
x-cube-n6-ai-hand-landmarks-dk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a37c  34000750  34000750  00000750  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  3402aae0  3402aae0  0002aae0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000a1a84  3402ab00  3402ab00  0002ab00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .version      0000000c  340cc584  340cc584  000cc584  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  340cc590  340cc590  000d0a94  2**0
                  CONTENTS
  6 .ARM          00000008  340cc590  340cc590  000cc590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  340cc598  340d0a94  000d0a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  340cc598  340cc598  000cc598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  340cc59c  340cc59c  000cc59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000044f4  340cc5a0  340cc5a0  000cc5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00015484  340d0a98  340d0a98  000d0a94  2**3
                  ALLOC
 12 ._user_heap_stack 00001204  340e5f1c  340e5f1c  000d0a94  2**0
                  ALLOC
 13 .psram_section 00844800  91000000  91000000  000d1000  2**5
                  ALLOC
 14 .ARM.attributes 0000003a  00000000  00000000  000d0a94  2**0
                  CONTENTS, READONLY
 15 .debug_info   000b5a08  00000000  00000000  000d0ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00010226  00000000  00000000  001864d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00047785  00000000  00000000  001966fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004590  00000000  00000000  001dde88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000061e2  00000000  00000000  001e2418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0009f43b  00000000  00000000  001e85fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000894a3  00000000  00000000  00287a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    003ec2d1  00000000  00000000  00310ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000105  00000000  00000000  006fd1a9  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000f2f0  00000000  00000000  006fd2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000dc  00000000  00000000  0070c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	340d0a98 	.word	0x340d0a98
3400076c:	00000000 	.word	0x00000000
34000770:	3402aa60 	.word	0x3402aa60

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	340d0a9c 	.word	0x340d0a9c
3400078c:	3402aa60 	.word	0x3402aa60

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <vVjsiRnEsi>:
340007a0:	ed90 6aad 	vldr	s12, [r0, #692]	@ 0x2b4
340007a4:	b530      	push	{r4, r5, lr}
340007a6:	ed2d 8b10 	vpush	{d8-d15}
340007aa:	ed90 7ba8 	vldr	d7, [r0, #672]	@ 0x2a0
340007ae:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
340007b2:	b087      	sub	sp, #28
340007b4:	ed8d 7b00 	vstr	d7, [sp]
340007b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340007bc:	ed90 7ba4 	vldr	d7, [r0, #656]	@ 0x290
340007c0:	4604      	mov	r4, r0
340007c2:	ed91 5a01 	vldr	s10, [r1, #4]
340007c6:	ed91 4a00 	vldr	s8, [r1]
340007ca:	ed91 fb02 	vldr	d15, [r1, #8]
340007ce:	ed91 8b04 	vldr	d8, [r1, #16]
340007d2:	ed90 3b12 	vldr	d3, [r0, #72]	@ 0x48
340007d6:	ed90 dbaa 	vldr	d13, [r0, #680]	@ 0x2a8
340007da:	ed90 bb16 	vldr	d11, [r0, #88]	@ 0x58
340007de:	ed8d 7b04 	vstr	d7, [sp, #16]
340007e2:	ed90 eba6 	vldr	d14, [r0, #664]	@ 0x298
340007e6:	dc09      	bgt.n	340007fc <vVjsiRnEsi+0x5c>
340007e8:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
340007ec:	48d4      	ldr	r0, [pc, #848]	@ (34000b40 <vVjsiRnEsi+0x3a0>)
340007ee:	4798      	blx	r3
340007f0:	f04f 30ff 	mov.w	r0, #4294967295
340007f4:	b007      	add	sp, #28
340007f6:	ecbd 8b10 	vpop	{d8-d15}
340007fa:	bd30      	pop	{r4, r5, pc}
340007fc:	eeb8 5b45 	vcvt.f64.u32	d5, s10
34000800:	ed9f 7bc1 	vldr	d7, [pc, #772]	@ 34000b08 <vVjsiRnEsi+0x368>
34000804:	eeb8 4b44 	vcvt.f64.u32	d4, s8
34000808:	ee25 7b07 	vmul.f64	d7, d5, d7
3400080c:	eeb4 7bc4 	vcmpe.f64	d7, d4
34000810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000814:	dd0f      	ble.n	34000836 <vVjsiRnEsi+0x96>
34000816:	ed90 7b1c 	vldr	d7, [r0, #112]	@ 0x70
3400081a:	ed9f 2bbd 	vldr	d2, [pc, #756]	@ 34000b10 <vVjsiRnEsi+0x370>
3400081e:	ee37 2b02 	vadd.f64	d2, d7, d2
34000822:	ed9f 7bbd 	vldr	d7, [pc, #756]	@ 34000b18 <vVjsiRnEsi+0x378>
34000826:	eeb4 2bc7 	vcmpe.f64	d2, d7
3400082a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400082e:	fe37 7b02 	vselgt.f64	d7, d7, d2
34000832:	ed80 7b1c 	vstr	d7, [r0, #112]	@ 0x70
34000836:	ed9f 7bba 	vldr	d7, [pc, #744]	@ 34000b20 <vVjsiRnEsi+0x380>
3400083a:	ee25 5b07 	vmul.f64	d5, d5, d7
3400083e:	eeb4 5bc4 	vcmpe.f64	d5, d4
34000842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000846:	d510      	bpl.n	3400086a <vVjsiRnEsi+0xca>
34000848:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
3400084c:	ed9f 5bb0 	vldr	d5, [pc, #704]	@ 34000b10 <vVjsiRnEsi+0x370>
34000850:	ee37 7b45 	vsub.f64	d7, d7, d5
34000854:	ed9f 5bb4 	vldr	d5, [pc, #720]	@ 34000b28 <vVjsiRnEsi+0x388>
34000858:	eeb4 7bc5 	vcmpe.f64	d7, d5
3400085c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000860:	bf58      	it	pl
34000862:	eeb0 5b47 	vmovpl.f64	d5, d7
34000866:	ed84 5b1c 	vstr	d5, [r4, #112]	@ 0x70
3400086a:	ee83 9b0d 	vdiv.f64	d9, d3, d13
3400086e:	eebc 9bc9 	vcvt.u32.f64	s18, d9
34000872:	eeb8 9b49 	vcvt.f64.u32	d9, s18
34000876:	ee29 9b0d 	vmul.f64	d9, d9, d13
3400087a:	eefc 7bc9 	vcvt.u32.f64	s15, d9
3400087e:	f894 5050 	ldrb.w	r5, [r4, #80]	@ 0x50
34000882:	edcd 7a03 	vstr	s15, [sp, #12]
34000886:	2d01      	cmp	r5, #1
34000888:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
3400088c:	d152      	bne.n	34000934 <vVjsiRnEsi+0x194>
3400088e:	ed9f 7ba8 	vldr	d7, [pc, #672]	@ 34000b30 <vVjsiRnEsi+0x390>
34000892:	ee3f 5b48 	vsub.f64	d5, d15, d8
34000896:	ee85 cb07 	vdiv.f64	d12, d5, d7
3400089a:	ee3f 5b08 	vadd.f64	d5, d15, d8
3400089e:	ee85 ab07 	vdiv.f64	d10, d5, d7
340008a2:	eeb0 7bcc 	vabs.f64	d7, d12
340008a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
340008aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340008ae:	eeb0 5bca 	vabs.f64	d5, d10
340008b2:	db0d      	blt.n	340008d0 <vVjsiRnEsi+0x130>
340008b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
340008b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340008bc:	db08      	blt.n	340008d0 <vVjsiRnEsi+0x130>
340008be:	2300      	movs	r3, #0
340008c0:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
340008c4:	2300      	movs	r3, #0
340008c6:	eeb0 8b49 	vmov.f64	d8, d9
340008ca:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
340008ce:	e049      	b.n	34000964 <vVjsiRnEsi+0x1c4>
340008d0:	eeb4 6bc5 	vcmpe.f64	d6, d5
340008d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340008d8:	d50c      	bpl.n	340008f4 <vVjsiRnEsi+0x154>
340008da:	ee8a 5b0c 	vdiv.f64	d5, d10, d12
340008de:	ed94 6aae 	vldr	s12, [r4, #696]	@ 0x2b8
340008e2:	eeb0 5bc5 	vabs.f64	d5, d5
340008e6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
340008ea:	eeb4 5bc6 	vcmpe.f64	d5, d6
340008ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340008f2:	dae7      	bge.n	340008c4 <vVjsiRnEsi+0x124>
340008f4:	2300      	movs	r3, #0
340008f6:	eef7 0bcb 	vcvt.f32.f64	s1, d11
340008fa:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
340008fe:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34000902:	f024 fa3d 	bl	34024d80 <powf>
34000906:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
3400090a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3400090e:	eeb0 6bc8 	vabs.f64	d6, d8
34000912:	ee20 0b07 	vmul.f64	d0, d0, d7
34000916:	eeb0 7bcf 	vabs.f64	d7, d15
3400091a:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400091e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000922:	dd6f      	ble.n	34000a04 <vVjsiRnEsi+0x264>
34000924:	eeb5 fbc0 	vcmpe.f64	d15, #0.0
34000928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400092c:	d56f      	bpl.n	34000a0e <vVjsiRnEsi+0x26e>
3400092e:	ee39 0b40 	vsub.f64	d0, d9, d0
34000932:	e06e      	b.n	34000a12 <vVjsiRnEsi+0x272>
34000934:	eeb0 5bcf 	vabs.f64	d5, d15
34000938:	eeb0 7bc8 	vabs.f64	d7, d8
3400093c:	eeb4 7bc5 	vcmpe.f64	d7, d5
34000940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000944:	fe37 7b05 	vselgt.f64	d7, d7, d5
34000948:	eeb4 7bc6 	vcmpe.f64	d7, d6
3400094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000950:	d853      	bhi.n	340009fa <vVjsiRnEsi+0x25a>
34000952:	ed9f ab79 	vldr	d10, [pc, #484]	@ 34000b38 <vVjsiRnEsi+0x398>
34000956:	2300      	movs	r3, #0
34000958:	eeb0 8b49 	vmov.f64	d8, d9
3400095c:	eeb0 cb4a 	vmov.f64	d12, d10
34000960:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34000964:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
34000968:	bb2b      	cbnz	r3, 340009b6 <vVjsiRnEsi+0x216>
3400096a:	2210      	movs	r2, #16
3400096c:	f104 0188 	add.w	r1, r4, #136	@ 0x88
34000970:	f104 0080 	add.w	r0, r4, #128	@ 0x80
34000974:	f020 feb4 	bl	340216e0 <memmove>
34000978:	2210      	movs	r2, #16
3400097a:	f104 01a0 	add.w	r1, r4, #160	@ 0xa0
3400097e:	f104 0098 	add.w	r0, r4, #152	@ 0x98
34000982:	f020 fead 	bl	340216e0 <memmove>
34000986:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	@ 0xc0
3400098a:	ed84 9b24 	vstr	d9, [r4, #144]	@ 0x90
3400098e:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
34000992:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	@ 0xc8
34000996:	ed84 8b2a 	vstr	d8, [r4, #168]	@ 0xa8
3400099a:	e9c4 232e 	strd	r2, r3, [r4, #184]	@ 0xb8
3400099e:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	@ 0xd0
340009a2:	ed84 cb34 	vstr	d12, [r4, #208]	@ 0xd0
340009a6:	e9c4 2330 	strd	r2, r3, [r4, #192]	@ 0xc0
340009aa:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	@ 0xd8
340009ae:	ed84 ab36 	vstr	d10, [r4, #216]	@ 0xd8
340009b2:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
340009b6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
340009ba:	ee17 3a90 	vmov	r3, s15
340009be:	ed94 7b1a 	vldr	d7, [r4, #104]	@ 0x68
340009c2:	9a03      	ldr	r2, [sp, #12]
340009c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
340009c8:	4293      	cmp	r3, r2
340009ca:	bf1c      	itt	ne
340009cc:	2301      	movne	r3, #1
340009ce:	f884 3060 	strbne.w	r3, [r4, #96]	@ 0x60
340009d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340009d6:	f340 80b5 	ble.w	34000b44 <vVjsiRnEsi+0x3a4>
340009da:	2301      	movs	r3, #1
340009dc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
340009e0:	ed9d 7b00 	vldr	d7, [sp]
340009e4:	eeb4 bbc7 	vcmpe.f64	d11, d7
340009e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340009ec:	f140 80bd 	bpl.w	34000b6a <vVjsiRnEsi+0x3ca>
340009f0:	ed9d 7b04 	vldr	d7, [sp, #16]
340009f4:	ee3b eb07 	vadd.f64	d14, d11, d7
340009f8:	e0a9      	b.n	34000b4e <vVjsiRnEsi+0x3ae>
340009fa:	ed9f ab4f 	vldr	d10, [pc, #316]	@ 34000b38 <vVjsiRnEsi+0x398>
340009fe:	eeb0 cb4a 	vmov.f64	d12, d10
34000a02:	e777      	b.n	340008f4 <vVjsiRnEsi+0x154>
34000a04:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
34000a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000a0c:	d58f      	bpl.n	3400092e <vVjsiRnEsi+0x18e>
34000a0e:	ee39 0b00 	vadd.f64	d0, d9, d0
34000a12:	ed94 7b3c 	vldr	d7, [r4, #240]	@ 0xf0
34000a16:	eeb4 7bc0 	vcmpe.f64	d7, d0
34000a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000a1e:	d42c      	bmi.n	34000a7a <vVjsiRnEsi+0x2da>
34000a20:	eeb0 7b40 	vmov.f64	d7, d0
34000a24:	ed94 6b3a 	vldr	d6, [r4, #232]	@ 0xe8
34000a28:	eeb4 6bc7 	vcmpe.f64	d6, d7
34000a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000a30:	dc26      	bgt.n	34000a80 <vVjsiRnEsi+0x2e0>
34000a32:	eeb0 6b47 	vmov.f64	d6, d7
34000a36:	ee86 8b0d 	vdiv.f64	d8, d6, d13
34000a3a:	eebc 8bc8 	vcvt.u32.f64	s16, d8
34000a3e:	eeb8 8b48 	vcvt.f64.u32	d8, s16
34000a42:	2d01      	cmp	r5, #1
34000a44:	ee2d 8b08 	vmul.f64	d8, d13, d8
34000a48:	d18c      	bne.n	34000964 <vVjsiRnEsi+0x1c4>
34000a4a:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	@ 0xe0
34000a4e:	2b02      	cmp	r3, #2
34000a50:	d819      	bhi.n	34000a86 <vVjsiRnEsi+0x2e6>
34000a52:	eefc 7bc9 	vcvt.u32.f64	s15, d9
34000a56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34000a5a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
34000a5e:	ed82 7b20 	vstr	d7, [r2, #128]	@ 0x80
34000a62:	ed82 8b26 	vstr	d8, [r2, #152]	@ 0x98
34000a66:	eb04 1203 	add.w	r2, r4, r3, lsl #4
34000a6a:	3301      	adds	r3, #1
34000a6c:	ed82 cb2c 	vstr	d12, [r2, #176]	@ 0xb0
34000a70:	ed82 ab2e 	vstr	d10, [r2, #184]	@ 0xb8
34000a74:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
34000a78:	e774      	b.n	34000964 <vVjsiRnEsi+0x1c4>
34000a7a:	eeb0 bb4e 	vmov.f64	d11, d14
34000a7e:	e7d1      	b.n	34000a24 <vVjsiRnEsi+0x284>
34000a80:	eeb0 bb4e 	vmov.f64	d11, d14
34000a84:	e7d7      	b.n	34000a36 <vVjsiRnEsi+0x296>
34000a86:	ed94 7b2a 	vldr	d7, [r4, #168]	@ 0xa8
34000a8a:	ed94 6aaf 	vldr	s12, [r4, #700]	@ 0x2bc
34000a8e:	ee38 7b47 	vsub.f64	d7, d8, d7
34000a92:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
34000a96:	eeb0 7bc7 	vabs.f64	d7, d7
34000a9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
34000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000aa2:	db28      	blt.n	34000af6 <vVjsiRnEsi+0x356>
34000aa4:	ed94 7b28 	vldr	d7, [r4, #160]	@ 0xa0
34000aa8:	ee38 7b47 	vsub.f64	d7, d8, d7
34000aac:	eeb0 7bc7 	vabs.f64	d7, d7
34000ab0:	eeb4 6bc7 	vcmpe.f64	d6, d7
34000ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000ab8:	dd1d      	ble.n	34000af6 <vVjsiRnEsi+0x356>
34000aba:	ed94 0b32 	vldr	d0, [r4, #200]	@ 0xc8
34000abe:	ed94 7b30 	vldr	d7, [r4, #192]	@ 0xc0
34000ac2:	ee3a 0b40 	vsub.f64	d0, d10, d0
34000ac6:	ee3c 7b47 	vsub.f64	d7, d12, d7
34000aca:	ee20 0b00 	vmul.f64	d0, d0, d0
34000ace:	eea7 0b07 	vfma.f64	d0, d7, d7
34000ad2:	f029 ffa1 	bl	3402aa18 <sqrt>
34000ad6:	ed94 7ab0 	vldr	s14, [r4, #704]	@ 0x2c0
34000ada:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000ade:	eeb4 0bc7 	vcmpe.f64	d0, d7
34000ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000ae6:	d506      	bpl.n	34000af6 <vVjsiRnEsi+0x356>
34000ae8:	eefc 7bc9 	vcvt.u32.f64	s15, d9
34000aec:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
34000af0:	eeb8 8b67 	vcvt.f64.u32	d8, s15
34000af4:	e736      	b.n	34000964 <vVjsiRnEsi+0x1c4>
34000af6:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
34000afa:	2b01      	cmp	r3, #1
34000afc:	f47f af32 	bne.w	34000964 <vVjsiRnEsi+0x1c4>
34000b00:	2300      	movs	r3, #0
34000b02:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
34000b06:	e72d      	b.n	34000964 <vVjsiRnEsi+0x1c4>
34000b08:	9999999a 	.word	0x9999999a
34000b0c:	3fa99999 	.word	0x3fa99999
34000b10:	47ae147b 	.word	0x47ae147b
34000b14:	3f847ae1 	.word	0x3f847ae1
34000b18:	33333334 	.word	0x33333334
34000b1c:	3fc33333 	.word	0x3fc33333
34000b20:	33333333 	.word	0x33333333
34000b24:	3fc33333 	.word	0x3fc33333
34000b28:	11111111 	.word	0x11111111
34000b2c:	3fb11111 	.word	0x3fb11111
34000b30:	667f3bcd 	.word	0x667f3bcd
34000b34:	3ff6a09e 	.word	0x3ff6a09e
	...
34000b40:	34030709 	.word	0x34030709
34000b44:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
34000b48:	2b00      	cmp	r3, #0
34000b4a:	f47f af49 	bne.w	340009e0 <vVjsiRnEsi+0x240>
34000b4e:	ee88 7b0d 	vdiv.f64	d7, d8, d13
34000b52:	eebc 7bc7 	vcvt.u32.f64	s14, d7
34000b56:	eeb8 7b47 	vcvt.f64.u32	d7, s14
34000b5a:	ee27 7b0d 	vmul.f64	d7, d7, d13
34000b5e:	ed84 eb16 	vstr	d14, [r4, #88]	@ 0x58
34000b62:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
34000b66:	2001      	movs	r0, #1
34000b68:	e644      	b.n	340007f4 <vVjsiRnEsi+0x54>
34000b6a:	ed9d eb00 	vldr	d14, [sp]
34000b6e:	e7ee      	b.n	34000b4e <vVjsiRnEsi+0x3ae>

34000b70 <RGqhTVOsSg>:
34000b70:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
34000b74:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34000b78:	ed90 4b12 	vldr	d4, [r0, #72]	@ 0x48
34000b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000b80:	ed90 5baa 	vldr	d5, [r0, #680]	@ 0x2a8
34000b84:	eeb0 7b46 	vmov.f64	d7, d6
34000b88:	bfdf      	itttt	le
34000b8a:	ee84 7b05 	vdivle.f64	d7, d4, d5
34000b8e:	eebc 7bc7 	vcvtle.u32.f64	s14, d7
34000b92:	eeb8 7b47 	vcvtle.f64.u32	d7, s14
34000b96:	ee27 7b05 	vmulle.f64	d7, d7, d5
34000b9a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
34000b9e:	ed90 5b3c 	vldr	d5, [r0, #240]	@ 0xf0
34000ba2:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34000ba6:	eeb4 4bc5 	vcmpe.f64	d4, d5
34000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000bae:	bfc8      	it	gt
34000bb0:	eeb7 7bc5 	vcvtgt.f32.f64	s14, d5
34000bb4:	ed90 5b3a 	vldr	d5, [r0, #232]	@ 0xe8
34000bb8:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34000bbc:	eeb4 4bc5 	vcmpe.f64	d4, d5
34000bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000bc4:	bf48      	it	mi
34000bc6:	eeb7 7bc5 	vcvtmi.f32.f64	s14, d5
34000bca:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
34000bce:	f8d0 3274 	ldr.w	r3, [r0, #628]	@ 0x274
34000bd2:	b530      	push	{r4, r5, lr}
34000bd4:	ed80 5b12 	vstr	d5, [r0, #72]	@ 0x48
34000bd8:	ed93 5a00 	vldr	s10, [r3]
34000bdc:	edd0 7aac 	vldr	s15, [r0, #688]	@ 0x2b0
34000be0:	eeb4 5ac7 	vcmpe.f32	s10, s14
34000be4:	eef1 5a67 	vneg.f32	s11, s15
34000be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000bec:	f04f 0100 	mov.w	r1, #0
34000bf0:	f8b0 30f8 	ldrh.w	r3, [r0, #248]	@ 0xf8
34000bf4:	fe75 7aa7 	vselgt.f32	s15, s11, s15
34000bf8:	3b01      	subs	r3, #1
34000bfa:	b28a      	uxth	r2, r1
34000bfc:	4293      	cmp	r3, r2
34000bfe:	d805      	bhi.n	34000c0c <RGqhTVOsSg+0x9c>
34000c00:	2244      	movs	r2, #68	@ 0x44
34000c02:	fb02 0303 	mla	r3, r2, r3, r0
34000c06:	f503 7390 	add.w	r3, r3, #288	@ 0x120
34000c0a:	e011      	b.n	34000c30 <RGqhTVOsSg+0xc0>
34000c0c:	eb00 0482 	add.w	r4, r0, r2, lsl #2
34000c10:	edd4 5a44 	vldr	s11, [r4, #272]	@ 0x110
34000c14:	ee77 5aa5 	vadd.f32	s11, s15, s11
34000c18:	eef4 5ac7 	vcmpe.f32	s11, s14
34000c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000c20:	f101 0101 	add.w	r1, r1, #1
34000c24:	dbe9      	blt.n	34000bfa <RGqhTVOsSg+0x8a>
34000c26:	2344      	movs	r3, #68	@ 0x44
34000c28:	fb03 0202 	mla	r2, r3, r2, r0
34000c2c:	f502 7390 	add.w	r3, r2, #288	@ 0x120
34000c30:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34000c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000c38:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
34000c3c:	dc05      	bgt.n	34000c4a <RGqhTVOsSg+0xda>
34000c3e:	ed93 7a00 	vldr	s14, [r3]
34000c42:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000c46:	ed80 7b12 	vstr	d7, [r0, #72]	@ 0x48
34000c4a:	685a      	ldr	r2, [r3, #4]
34000c4c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
34000c50:	6042      	str	r2, [r0, #4]
34000c52:	689a      	ldr	r2, [r3, #8]
34000c54:	f103 0424 	add.w	r4, r3, #36	@ 0x24
34000c58:	6082      	str	r2, [r0, #8]
34000c5a:	68da      	ldr	r2, [r3, #12]
34000c5c:	60c2      	str	r2, [r0, #12]
34000c5e:	691a      	ldr	r2, [r3, #16]
34000c60:	6102      	str	r2, [r0, #16]
34000c62:	f100 0238 	add.w	r2, r0, #56	@ 0x38
34000c66:	695d      	ldr	r5, [r3, #20]
34000c68:	330c      	adds	r3, #12
34000c6a:	6145      	str	r5, [r0, #20]
34000c6c:	68dd      	ldr	r5, [r3, #12]
34000c6e:	300c      	adds	r0, #12
34000c70:	60c5      	str	r5, [r0, #12]
34000c72:	691d      	ldr	r5, [r3, #16]
34000c74:	42a3      	cmp	r3, r4
34000c76:	6105      	str	r5, [r0, #16]
34000c78:	f851 5b04 	ldr.w	r5, [r1], #4
34000c7c:	f842 5b04 	str.w	r5, [r2], #4
34000c80:	d1f1      	bne.n	34000c66 <RGqhTVOsSg+0xf6>
34000c82:	2001      	movs	r0, #1
34000c84:	bd30      	pop	{r4, r5, pc}

34000c86 <evision_api_awb_new>:
34000c86:	b510      	push	{r4, lr}
34000c88:	b090      	sub	sp, #64	@ 0x40
34000c8a:	b178      	cbz	r0, 34000cac <evision_api_awb_new+0x26>
34000c8c:	2200      	movs	r2, #0
34000c8e:	4c08      	ldr	r4, [pc, #32]	@ (34000cb0 <evision_api_awb_new+0x2a>)
34000c90:	2140      	movs	r1, #64	@ 0x40
34000c92:	4b08      	ldr	r3, [pc, #32]	@ (34000cb4 <evision_api_awb_new+0x2e>)
34000c94:	7022      	strb	r2, [r4, #0]
34000c96:	f8c4 02c8 	str.w	r0, [r4, #712]	@ 0x2c8
34000c9a:	4a07      	ldr	r2, [pc, #28]	@ (34000cb8 <evision_api_awb_new+0x32>)
34000c9c:	4668      	mov	r0, sp
34000c9e:	f020 fbd5 	bl	3402144c <sniprintf>
34000ca2:	4668      	mov	r0, sp
34000ca4:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000ca8:	4798      	blx	r3
34000caa:	4620      	mov	r0, r4
34000cac:	b010      	add	sp, #64	@ 0x40
34000cae:	bd10      	pop	{r4, pc}
34000cb0:	340d0ab8 	.word	0x340d0ab8
34000cb4:	340cc584 	.word	0x340cc584
34000cb8:	34030749 	.word	0x34030749

34000cbc <evision_api_awb_delete>:
34000cbc:	2800      	cmp	r0, #0
34000cbe:	bf0c      	ite	eq
34000cc0:	f04f 30ff 	moveq.w	r0, #4294967295
34000cc4:	2001      	movne	r0, #1
34000cc6:	4770      	bx	lr

34000cc8 <evision_api_awb_set_profile>:
34000cc8:	b530      	push	{r4, r5, lr}
34000cca:	ed80 0a00 	vstr	s0, [r0]
34000cce:	680c      	ldr	r4, [r1, #0]
34000cd0:	6044      	str	r4, [r0, #4]
34000cd2:	684c      	ldr	r4, [r1, #4]
34000cd4:	6084      	str	r4, [r0, #8]
34000cd6:	688c      	ldr	r4, [r1, #8]
34000cd8:	60c4      	str	r4, [r0, #12]
34000cda:	68c9      	ldr	r1, [r1, #12]
34000cdc:	f102 0424 	add.w	r4, r2, #36	@ 0x24
34000ce0:	6101      	str	r1, [r0, #16]
34000ce2:	f100 0138 	add.w	r1, r0, #56	@ 0x38
34000ce6:	6815      	ldr	r5, [r2, #0]
34000ce8:	320c      	adds	r2, #12
34000cea:	6145      	str	r5, [r0, #20]
34000cec:	f852 5c08 	ldr.w	r5, [r2, #-8]
34000cf0:	300c      	adds	r0, #12
34000cf2:	60c5      	str	r5, [r0, #12]
34000cf4:	f852 5c04 	ldr.w	r5, [r2, #-4]
34000cf8:	42a2      	cmp	r2, r4
34000cfa:	6105      	str	r5, [r0, #16]
34000cfc:	f853 5b04 	ldr.w	r5, [r3], #4
34000d00:	f841 5b04 	str.w	r5, [r1], #4
34000d04:	d1ef      	bne.n	34000ce6 <evision_api_awb_set_profile+0x1e>
34000d06:	bd30      	pop	{r4, r5, pc}

34000d08 <evision_api_awb_init_profiles>:
34000d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000d0c:	ed2d 8b06 	vpush	{d8-d10}
34000d10:	460d      	mov	r5, r1
34000d12:	eeb0 9b40 	vmov.f64	d9, d0
34000d16:	eeb0 8b41 	vmov.f64	d8, d1
34000d1a:	461e      	mov	r6, r3
34000d1c:	4604      	mov	r4, r0
34000d1e:	b0c9      	sub	sp, #292	@ 0x124
34000d20:	2800      	cmp	r0, #0
34000d22:	f000 8185 	beq.w	34001030 <evision_api_awb_init_profiles+0x328>
34000d26:	ed9f abc6 	vldr	d10, [pc, #792]	@ 34001040 <evision_api_awb_init_profiles+0x338>
34000d2a:	ed80 ab12 	vstr	d10, [r0, #72]	@ 0x48
34000d2e:	2000      	movs	r0, #0
34000d30:	49c9      	ldr	r1, [pc, #804]	@ (34001058 <evision_api_awb_init_profiles+0x350>)
34000d32:	f04f 0800 	mov.w	r8, #0
34000d36:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
34000d3a:	e9c4 01a6 	strd	r0, r1, [r4, #664]	@ 0x298
34000d3e:	e9c4 01aa 	strd	r0, r1, [r4, #680]	@ 0x2a8
34000d42:	49c6      	ldr	r1, [pc, #792]	@ (3400105c <evision_api_awb_init_profiles+0x354>)
34000d44:	f8df 9348 	ldr.w	r9, [pc, #840]	@ 34001090 <evision_api_awb_init_profiles+0x388>
34000d48:	f8c4 12b0 	str.w	r1, [r4, #688]	@ 0x2b0
34000d4c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
34000d50:	f8c4 12b4 	str.w	r1, [r4, #692]	@ 0x2b4
34000d54:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
34000d58:	e9c4 891a 	strd	r8, r9, [r4, #104]	@ 0x68
34000d5c:	f20f 29e8 	addw	r9, pc, #744	@ 0x2e8
34000d60:	e9d9 8900 	ldrd	r8, r9, [r9]
34000d64:	e9c4 891c 	strd	r8, r9, [r4, #112]	@ 0x70
34000d68:	e9c4 89a4 	strd	r8, r9, [r4, #656]	@ 0x290
34000d6c:	f04f 0800 	mov.w	r8, #0
34000d70:	f8c4 12b8 	str.w	r1, [r4, #696]	@ 0x2b8
34000d74:	49ba      	ldr	r1, [pc, #744]	@ (34001060 <evision_api_awb_init_profiles+0x358>)
34000d76:	f8df 931c 	ldr.w	r9, [pc, #796]	@ 34001094 <evision_api_awb_init_profiles+0x38c>
34000d7a:	f8c4 12bc 	str.w	r1, [r4, #700]	@ 0x2bc
34000d7e:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
34000d82:	2300      	movs	r3, #0
34000d84:	e9c4 89a8 	strd	r8, r9, [r4, #672]	@ 0x2a0
34000d88:	2701      	movs	r7, #1
34000d8a:	f04f 0800 	mov.w	r8, #0
34000d8e:	f8c4 12c0 	str.w	r1, [r4, #704]	@ 0x2c0
34000d92:	1e69      	subs	r1, r5, #1
34000d94:	f8df 9300 	ldr.w	r9, [pc, #768]	@ 34001098 <evision_api_awb_init_profiles+0x390>
34000d98:	b288      	uxth	r0, r1
34000d9a:	2804      	cmp	r0, #4
34000d9c:	e9c4 89a0 	strd	r8, r9, [r4, #640]	@ 0x280
34000da0:	f20f 29ac 	addw	r9, pc, #684	@ 0x2ac
34000da4:	e9d9 8900 	ldrd	r8, r9, [r9]
34000da8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34000dac:	e9c4 89a2 	strd	r8, r9, [r4, #648]	@ 0x288
34000db0:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
34000db4:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
34000db8:	f8a4 7278 	strh.w	r7, [r4, #632]	@ 0x278
34000dbc:	d914      	bls.n	34000de8 <evision_api_awb_init_profiles+0xe0>
34000dbe:	2305      	movs	r3, #5
34000dc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000dc4:	4aa7      	ldr	r2, [pc, #668]	@ (34001064 <evision_api_awb_init_profiles+0x35c>)
34000dc6:	a808      	add	r0, sp, #32
34000dc8:	f020 fb40 	bl	3402144c <sniprintf>
34000dcc:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000dd0:	a808      	add	r0, sp, #32
34000dd2:	4798      	blx	r3
34000dd4:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
34000dd8:	4620      	mov	r0, r4
34000dda:	b049      	add	sp, #292	@ 0x124
34000ddc:	ecbd 8b06 	vpop	{d8-d10}
34000de0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000de4:	f7ff bec4 	b.w	34000b70 <RGqhTVOsSg>
34000de8:	ed96 7a00 	vldr	s14, [r6]
34000dec:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000df0:	eeb4 0bc7 	vcmpe.f64	d0, d7
34000df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000df8:	dd12      	ble.n	34000e20 <evision_api_awb_init_profiles+0x118>
34000dfa:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000dfe:	489a      	ldr	r0, [pc, #616]	@ (34001068 <evision_api_awb_init_profiles+0x360>)
34000e00:	4798      	blx	r3
34000e02:	ed96 7a00 	vldr	s14, [r6]
34000e06:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e0a:	ed8d 9b00 	vstr	d9, [sp]
34000e0e:	ed8d 7b02 	vstr	d7, [sp, #8]
34000e12:	4a96      	ldr	r2, [pc, #600]	@ (3400106c <evision_api_awb_init_profiles+0x364>)
34000e14:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000e18:	a808      	add	r0, sp, #32
34000e1a:	f020 fb17 	bl	3402144c <sniprintf>
34000e1e:	e7d5      	b.n	34000dcc <evision_api_awb_init_profiles+0xc4>
34000e20:	f04f 0844 	mov.w	r8, #68	@ 0x44
34000e24:	fb08 f805 	mul.w	r8, r8, r5
34000e28:	eb06 0908 	add.w	r9, r6, r8
34000e2c:	ed19 7a11 	vldr	s14, [r9, #-68]	@ 0xffffffbc
34000e30:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e34:	eeb4 1bc7 	vcmpe.f64	d1, d7
34000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000e3c:	d445      	bmi.n	34000eca <evision_api_awb_init_profiles+0x1c2>
34000e3e:	46b3      	mov	fp, r6
34000e40:	4637      	mov	r7, r6
34000e42:	4699      	mov	r9, r3
34000e44:	4628      	mov	r0, r5
34000e46:	3801      	subs	r0, #1
34000e48:	d14d      	bne.n	34000ee6 <evision_api_awb_init_profiles+0x1de>
34000e4a:	4610      	mov	r0, r2
34000e4c:	4691      	mov	r9, r2
34000e4e:	2700      	movs	r7, #0
34000e50:	f1a5 0e02 	sub.w	lr, r5, #2
34000e54:	f101 0c01 	add.w	ip, r1, #1
34000e58:	f1bc 0c01 	subs.w	ip, ip, #1
34000e5c:	d175      	bne.n	34000f4a <evision_api_awb_init_profiles+0x242>
34000e5e:	ed84 9b3a 	vstr	d9, [r4, #232]	@ 0xe8
34000e62:	ed84 8b3c 	vstr	d8, [r4, #240]	@ 0xf0
34000e66:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
34000e6a:	f8a4 50f8 	strh.w	r5, [r4, #248]	@ 0xf8
34000e6e:	f504 7388 	add.w	r3, r4, #272	@ 0x110
34000e72:	3101      	adds	r1, #1
34000e74:	3901      	subs	r1, #1
34000e76:	f040 80bf 	bne.w	34000ff8 <evision_api_awb_init_profiles+0x2f0>
34000e7a:	2700      	movs	r7, #0
34000e7c:	f104 0afc 	add.w	sl, r4, #252	@ 0xfc
34000e80:	f504 7990 	add.w	r9, r4, #288	@ 0x120
34000e84:	eb06 0b07 	add.w	fp, r6, r7
34000e88:	eb09 0007 	add.w	r0, r9, r7
34000e8c:	2244      	movs	r2, #68	@ 0x44
34000e8e:	4659      	mov	r1, fp
34000e90:	f020 feef 	bl	34021c72 <memcpy>
34000e94:	3744      	adds	r7, #68	@ 0x44
34000e96:	f8db 3000 	ldr.w	r3, [fp]
34000e9a:	45b8      	cmp	r8, r7
34000e9c:	f84a 3b04 	str.w	r3, [sl], #4
34000ea0:	d1f0      	bne.n	34000e84 <evision_api_awb_init_profiles+0x17c>
34000ea2:	1e6b      	subs	r3, r5, #1
34000ea4:	b29b      	uxth	r3, r3
34000ea6:	2d00      	cmp	r5, #0
34000ea8:	f103 0301 	add.w	r3, r3, #1
34000eac:	bf14      	ite	ne
34000eae:	461a      	movne	r2, r3
34000eb0:	2201      	moveq	r2, #1
34000eb2:	f8c4 9274 	str.w	r9, [r4, #628]	@ 0x274
34000eb6:	f504 71b2 	add.w	r1, r4, #356	@ 0x164
34000eba:	3a01      	subs	r2, #1
34000ebc:	f040 80a1 	bne.w	34001002 <evision_api_awb_init_profiles+0x2fa>
34000ec0:	2301      	movs	r3, #1
34000ec2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
34000ec6:	7023      	strb	r3, [r4, #0]
34000ec8:	e786      	b.n	34000dd8 <evision_api_awb_init_profiles+0xd0>
34000eca:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000ece:	4868      	ldr	r0, [pc, #416]	@ (34001070 <evision_api_awb_init_profiles+0x368>)
34000ed0:	4798      	blx	r3
34000ed2:	ed99 7a00 	vldr	s14, [r9]
34000ed6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000eda:	ed8d 8b00 	vstr	d8, [sp]
34000ede:	ed8d 7b02 	vstr	d7, [sp, #8]
34000ee2:	4a64      	ldr	r2, [pc, #400]	@ (34001074 <evision_api_awb_init_profiles+0x36c>)
34000ee4:	e796      	b.n	34000e14 <evision_api_awb_init_profiles+0x10c>
34000ee6:	46ba      	mov	sl, r7
34000ee8:	ed9a 7a00 	vldr	s14, [sl]
34000eec:	edda 7a11 	vldr	s15, [sl, #68]	@ 0x44
34000ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000ef8:	f109 0301 	add.w	r3, r9, #1
34000efc:	f107 0744 	add.w	r7, r7, #68	@ 0x44
34000f00:	db21      	blt.n	34000f46 <evision_api_awb_init_profiles+0x23e>
34000f02:	f8d4 22c8 	ldr.w	r2, [r4, #712]	@ 0x2c8
34000f06:	485c      	ldr	r0, [pc, #368]	@ (34001078 <evision_api_awb_init_profiles+0x370>)
34000f08:	9307      	str	r3, [sp, #28]
34000f0a:	4790      	blx	r2
34000f0c:	ed97 7a00 	vldr	s14, [r7]
34000f10:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000f14:	ed8d 7b04 	vstr	d7, [sp, #16]
34000f18:	9b07      	ldr	r3, [sp, #28]
34000f1a:	4a58      	ldr	r2, [pc, #352]	@ (3400107c <evision_api_awb_init_profiles+0x374>)
34000f1c:	9302      	str	r3, [sp, #8]
34000f1e:	ed9a 7a00 	vldr	s14, [sl]
34000f22:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000f26:	464b      	mov	r3, r9
34000f28:	ed8d 7b00 	vstr	d7, [sp]
34000f2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000f30:	a808      	add	r0, sp, #32
34000f32:	f020 fa8b 	bl	3402144c <sniprintf>
34000f36:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000f3a:	a808      	add	r0, sp, #32
34000f3c:	4798      	blx	r3
34000f3e:	2301      	movs	r3, #1
34000f40:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
34000f44:	e748      	b.n	34000dd8 <evision_api_awb_init_profiles+0xd0>
34000f46:	4699      	mov	r9, r3
34000f48:	e77d      	b.n	34000e46 <evision_api_awb_init_profiles+0x13e>
34000f4a:	45be      	cmp	lr, r7
34000f4c:	46ca      	mov	sl, r9
34000f4e:	f107 0201 	add.w	r2, r7, #1
34000f52:	ecf9 7a01 	vldmia	r9!, {s15}
34000f56:	d91c      	bls.n	34000f92 <evision_api_awb_init_profiles+0x28a>
34000f58:	ed99 7a00 	vldr	s14, [r9]
34000f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000f64:	d815      	bhi.n	34000f92 <evision_api_awb_init_profiles+0x28a>
34000f66:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000f6a:	4845      	ldr	r0, [pc, #276]	@ (34001080 <evision_api_awb_init_profiles+0x378>)
34000f6c:	9207      	str	r2, [sp, #28]
34000f6e:	4798      	blx	r3
34000f70:	ed99 7a00 	vldr	s14, [r9]
34000f74:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000f78:	ed8d 7b04 	vstr	d7, [sp, #16]
34000f7c:	9a07      	ldr	r2, [sp, #28]
34000f7e:	463b      	mov	r3, r7
34000f80:	9202      	str	r2, [sp, #8]
34000f82:	ed9a 7a00 	vldr	s14, [sl]
34000f86:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000f8a:	4a3e      	ldr	r2, [pc, #248]	@ (34001084 <evision_api_awb_init_profiles+0x37c>)
34000f8c:	ed8d 7b00 	vstr	d7, [sp]
34000f90:	e7cc      	b.n	34000f2c <evision_api_awb_init_profiles+0x224>
34000f92:	465b      	mov	r3, fp
34000f94:	ed93 7a00 	vldr	s14, [r3]
34000f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000fa0:	f10b 0b44 	add.w	fp, fp, #68	@ 0x44
34000fa4:	da06      	bge.n	34000fb4 <evision_api_awb_init_profiles+0x2ac>
34000fa6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
34000faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000fb2:	d81f      	bhi.n	34000ff4 <evision_api_awb_init_profiles+0x2ec>
34000fb4:	f8d4 22c8 	ldr.w	r2, [r4, #712]	@ 0x2c8
34000fb8:	4833      	ldr	r0, [pc, #204]	@ (34001088 <evision_api_awb_init_profiles+0x380>)
34000fba:	9307      	str	r3, [sp, #28]
34000fbc:	4790      	blx	r2
34000fbe:	ed9b 7a00 	vldr	s14, [fp]
34000fc2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000fc6:	ed8d 7b04 	vstr	d7, [sp, #16]
34000fca:	9b07      	ldr	r3, [sp, #28]
34000fcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000fd0:	ed93 7a00 	vldr	s14, [r3]
34000fd4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000fd8:	ed8d 7b02 	vstr	d7, [sp, #8]
34000fdc:	ed9a 7a00 	vldr	s14, [sl]
34000fe0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000fe4:	463b      	mov	r3, r7
34000fe6:	ed8d 7b00 	vstr	d7, [sp]
34000fea:	4a28      	ldr	r2, [pc, #160]	@ (3400108c <evision_api_awb_init_profiles+0x384>)
34000fec:	a808      	add	r0, sp, #32
34000fee:	f020 fa2d 	bl	3402144c <sniprintf>
34000ff2:	e7a0      	b.n	34000f36 <evision_api_awb_init_profiles+0x22e>
34000ff4:	4617      	mov	r7, r2
34000ff6:	e72f      	b.n	34000e58 <evision_api_awb_init_profiles+0x150>
34000ff8:	f850 2b04 	ldr.w	r2, [r0], #4
34000ffc:	f843 2b04 	str.w	r2, [r3], #4
34001000:	e738      	b.n	34000e74 <evision_api_awb_init_profiles+0x16c>
34001002:	f8d4 3274 	ldr.w	r3, [r4, #628]	@ 0x274
34001006:	ed91 6a00 	vldr	s12, [r1]
3400100a:	ed93 7a00 	vldr	s14, [r3]
3400100e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
34001012:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34001016:	ee36 6b4a 	vsub.f64	d6, d6, d10
3400101a:	ee37 7b4a 	vsub.f64	d7, d7, d10
3400101e:	eeb4 6bc7 	vcmpe.f64	d6, d7
34001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001026:	bf48      	it	mi
34001028:	f8c4 1274 	strmi.w	r1, [r4, #628]	@ 0x274
3400102c:	3144      	adds	r1, #68	@ 0x44
3400102e:	e744      	b.n	34000eba <evision_api_awb_init_profiles+0x1b2>
34001030:	f04f 30ff 	mov.w	r0, #4294967295
34001034:	b049      	add	sp, #292	@ 0x124
34001036:	ecbd 8b06 	vpop	{d8-d10}
3400103a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400103e:	bf00      	nop
34001040:	00000000 	.word	0x00000000
34001044:	40b38800 	.word	0x40b38800
34001048:	9999999a 	.word	0x9999999a
3400104c:	3fb99999 	.word	0x3fb99999
34001050:	00000000 	.word	0x00000000
34001054:	406ea000 	.word	0x406ea000
34001058:	3ff00000 	.word	0x3ff00000
3400105c:	42480000 	.word	0x42480000
34001060:	432f0000 	.word	0x432f0000
34001064:	34030759 	.word	0x34030759
34001068:	3403079d 	.word	0x3403079d
3400106c:	34030824 	.word	0x34030824
34001070:	34030882 	.word	0x34030882
34001074:	3403090a 	.word	0x3403090a
34001078:	34030967 	.word	0x34030967
3400107c:	340309cb 	.word	0x340309cb
34001080:	34030a23 	.word	0x34030a23
34001084:	34030a92 	.word	0x34030a92
34001088:	34030afc 	.word	0x34030afc
3400108c:	34030b53 	.word	0x34030b53
34001090:	bff00000 	.word	0xbff00000
34001094:	40080000 	.word	0x40080000
34001098:	40240000 	.word	0x40240000

3400109c <evision_api_awb_run_average>:
3400109c:	b530      	push	{r4, r5, lr}
3400109e:	4605      	mov	r5, r0
340010a0:	4614      	mov	r4, r2
340010a2:	b08d      	sub	sp, #52	@ 0x34
340010a4:	b952      	cbnz	r2, 340010bc <evision_api_awb_run_average+0x20>
340010a6:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
340010aa:	481d      	ldr	r0, [pc, #116]	@ (34001120 <evision_api_awb_run_average+0x84>)
340010ac:	4798      	blx	r3
340010ae:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
340010b2:	481c      	ldr	r0, [pc, #112]	@ (34001124 <evision_api_awb_run_average+0x88>)
340010b4:	4798      	blx	r3
340010b6:	4620      	mov	r0, r4
340010b8:	b00d      	add	sp, #52	@ 0x34
340010ba:	bd30      	pop	{r4, r5, pc}
340010bc:	ed93 2b04 	vldr	d2, [r3, #16]
340010c0:	ed93 1b02 	vldr	d1, [r3, #8]
340010c4:	ed93 0b00 	vldr	d0, [r3]
340010c8:	aa0a      	add	r2, sp, #40	@ 0x28
340010ca:	a908      	add	r1, sp, #32
340010cc:	a806      	add	r0, sp, #24
340010ce:	f000 f82f 	bl	34001130 <VGuzhuiVXN>
340010d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
340010d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
340010da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
340010de:	e9cd 2304 	strd	r2, r3, [sp, #16]
340010e2:	2301      	movs	r3, #1
340010e4:	4298      	cmp	r0, r3
340010e6:	4604      	mov	r4, r0
340010e8:	e9cd 3300 	strd	r3, r3, [sp]
340010ec:	d1df      	bne.n	340010ae <evision_api_awb_run_average+0x12>
340010ee:	4669      	mov	r1, sp
340010f0:	4628      	mov	r0, r5
340010f2:	f7ff fb55 	bl	340007a0 <vVjsiRnEsi>
340010f6:	2801      	cmp	r0, #1
340010f8:	4604      	mov	r4, r0
340010fa:	d003      	beq.n	34001104 <evision_api_awb_run_average+0x68>
340010fc:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
34001100:	4809      	ldr	r0, [pc, #36]	@ (34001128 <evision_api_awb_run_average+0x8c>)
34001102:	e7d7      	b.n	340010b4 <evision_api_awb_run_average+0x18>
34001104:	f895 3060 	ldrb.w	r3, [r5, #96]	@ 0x60
34001108:	2b01      	cmp	r3, #1
3400110a:	d1d4      	bne.n	340010b6 <evision_api_awb_run_average+0x1a>
3400110c:	4628      	mov	r0, r5
3400110e:	f7ff fd2f 	bl	34000b70 <RGqhTVOsSg>
34001112:	2801      	cmp	r0, #1
34001114:	4604      	mov	r4, r0
34001116:	d0ce      	beq.n	340010b6 <evision_api_awb_run_average+0x1a>
34001118:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
3400111c:	4803      	ldr	r0, [pc, #12]	@ (3400112c <evision_api_awb_run_average+0x90>)
3400111e:	e7c9      	b.n	340010b4 <evision_api_awb_run_average+0x18>
34001120:	34030bd9 	.word	0x34030bd9
34001124:	34030c3a 	.word	0x34030c3a
34001128:	34030c63 	.word	0x34030c63
3400112c:	34030c97 	.word	0x34030c97

34001130 <VGuzhuiVXN>:
34001130:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
34001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400113a:	eeb0 7b41 	vmov.f64	d7, d1
3400113e:	4613      	mov	r3, r2
34001140:	d409      	bmi.n	34001156 <VGuzhuiVXN+0x26>
34001142:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
34001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400114a:	d404      	bmi.n	34001156 <VGuzhuiVXN+0x26>
3400114c:	eeb5 2bc0 	vcmpe.f64	d2, #0.0
34001150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001154:	d50d      	bpl.n	34001172 <VGuzhuiVXN+0x42>
34001156:	ed8d 2b02 	vstr	d2, [sp, #8]
3400115a:	ed8d 7b00 	vstr	d7, [sp]
3400115e:	ec53 2b10 	vmov	r2, r3, d0
34001162:	4845      	ldr	r0, [pc, #276]	@ (34001278 <VGuzhuiVXN+0x148>)
34001164:	f020 f902 	bl	3402136c <iprintf>
34001168:	f04f 30ff 	mov.w	r0, #4294967295
3400116c:	b005      	add	sp, #20
3400116e:	f85d fb04 	ldr.w	pc, [sp], #4
34001172:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 34001240 <VGuzhuiVXN+0x110>
34001176:	eeb4 0bc6 	vcmpe.f64	d0, d6
3400117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400117e:	dc09      	bgt.n	34001194 <VGuzhuiVXN+0x64>
34001180:	eeb4 1bc6 	vcmpe.f64	d1, d6
34001184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001188:	dc04      	bgt.n	34001194 <VGuzhuiVXN+0x64>
3400118a:	eeb4 2bc6 	vcmpe.f64	d2, d6
3400118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001192:	dd07      	ble.n	340011a4 <VGuzhuiVXN+0x74>
34001194:	ed8d 2b02 	vstr	d2, [sp, #8]
34001198:	ed8d 7b00 	vstr	d7, [sp]
3400119c:	ec53 2b10 	vmov	r2, r3, d0
340011a0:	4836      	ldr	r0, [pc, #216]	@ (3400127c <VGuzhuiVXN+0x14c>)
340011a2:	e7df      	b.n	34001164 <VGuzhuiVXN+0x34>
340011a4:	b128      	cbz	r0, 340011b2 <VGuzhuiVXN+0x82>
340011a6:	b181      	cbz	r1, 340011ca <VGuzhuiVXN+0x9a>
340011a8:	b9aa      	cbnz	r2, 340011d6 <VGuzhuiVXN+0xa6>
340011aa:	4935      	ldr	r1, [pc, #212]	@ (34001280 <VGuzhuiVXN+0x150>)
340011ac:	4b35      	ldr	r3, [pc, #212]	@ (34001284 <VGuzhuiVXN+0x154>)
340011ae:	460a      	mov	r2, r1
340011b0:	e007      	b.n	340011c2 <VGuzhuiVXN+0x92>
340011b2:	b969      	cbnz	r1, 340011d0 <VGuzhuiVXN+0xa0>
340011b4:	4933      	ldr	r1, [pc, #204]	@ (34001284 <VGuzhuiVXN+0x154>)
340011b6:	460a      	mov	r2, r1
340011b8:	4832      	ldr	r0, [pc, #200]	@ (34001284 <VGuzhuiVXN+0x154>)
340011ba:	2b00      	cmp	r3, #0
340011bc:	4b30      	ldr	r3, [pc, #192]	@ (34001280 <VGuzhuiVXN+0x150>)
340011be:	bf08      	it	eq
340011c0:	4603      	moveq	r3, r0
340011c2:	4831      	ldr	r0, [pc, #196]	@ (34001288 <VGuzhuiVXN+0x158>)
340011c4:	f020 f8d2 	bl	3402136c <iprintf>
340011c8:	e7ce      	b.n	34001168 <VGuzhuiVXN+0x38>
340011ca:	492d      	ldr	r1, [pc, #180]	@ (34001280 <VGuzhuiVXN+0x150>)
340011cc:	4a2d      	ldr	r2, [pc, #180]	@ (34001284 <VGuzhuiVXN+0x154>)
340011ce:	e7f3      	b.n	340011b8 <VGuzhuiVXN+0x88>
340011d0:	492c      	ldr	r1, [pc, #176]	@ (34001284 <VGuzhuiVXN+0x154>)
340011d2:	4a2b      	ldr	r2, [pc, #172]	@ (34001280 <VGuzhuiVXN+0x150>)
340011d4:	e7f0      	b.n	340011b8 <VGuzhuiVXN+0x88>
340011d6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 34001248 <VGuzhuiVXN+0x118>
340011da:	ed9f 5b1d 	vldr	d5, [pc, #116]	@ 34001250 <VGuzhuiVXN+0x120>
340011de:	ee21 6b06 	vmul.f64	d6, d1, d6
340011e2:	eeb3 4b00 	vmov.f64	d4, #48	@ 0x41800000  16.0
340011e6:	eea0 6b05 	vfma.f64	d6, d0, d5
340011ea:	ed9f 5b1b 	vldr	d5, [pc, #108]	@ 34001258 <VGuzhuiVXN+0x128>
340011ee:	eea2 6b04 	vfma.f64	d6, d2, d4
340011f2:	eea6 4b05 	vfma.f64	d4, d6, d5
340011f6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 34001260 <VGuzhuiVXN+0x130>
340011fa:	ed80 4b00 	vstr	d4, [r0]
340011fe:	ee26 6b41 	vnmul.f64	d6, d6, d1
34001202:	eebb 4b0a 	vmov.f64	d4, #186	@ 0xc1d00000 -26.0
34001206:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 34001268 <VGuzhuiVXN+0x138>
3400120a:	eea0 6b04 	vfma.f64	d6, d0, d4
3400120e:	ee21 1b47 	vnmul.f64	d1, d1, d7
34001212:	ed9f 4b17 	vldr	d4, [pc, #92]	@ 34001270 <VGuzhuiVXN+0x140>
34001216:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
3400121a:	eea0 1b04 	vfma.f64	d1, d0, d4
3400121e:	eea2 6b04 	vfma.f64	d6, d2, d4
34001222:	eea2 1b47 	vfms.f64	d1, d2, d7
34001226:	ee26 6b05 	vmul.f64	d6, d6, d5
3400122a:	ee21 1b05 	vmul.f64	d1, d1, d5
3400122e:	ed81 6b00 	vstr	d6, [r1]
34001232:	2001      	movs	r0, #1
34001234:	ed82 1b00 	vstr	d1, [r2]
34001238:	e798      	b.n	3400116c <VGuzhuiVXN+0x3c>
3400123a:	bf00      	nop
3400123c:	f3af 8000 	nop.w
34001240:	00000000 	.word	0x00000000
34001244:	406fe000 	.word	0x406fe000
34001248:	00000000 	.word	0x00000000
3400124c:	4063a000 	.word	0x4063a000
34001250:	00000000 	.word	0x00000000
34001254:	40478000 	.word	0x40478000
34001258:	00000000 	.word	0x00000000
3400125c:	3f700000 	.word	0x3f700000
34001260:	00000000 	.word	0x00000000
34001264:	40558000 	.word	0x40558000
34001268:	00000000 	.word	0x00000000
3400126c:	40598000 	.word	0x40598000
34001270:	00000000 	.word	0x00000000
34001274:	405c0000 	.word	0x405c0000
34001278:	34030ccc 	.word	0x34030ccc
3400127c:	34030d0a 	.word	0x34030d0a
34001280:	3402b06f 	.word	0x3402b06f
34001284:	3402b06d 	.word	0x3402b06d
34001288:	34030d4a 	.word	0x34030d4a
3400128c:	00000000 	.word	0x00000000

34001290 <GTePMGhCOh>:
34001290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34001294:	4606      	mov	r6, r0
34001296:	4698      	mov	r8, r3
34001298:	6d73      	ldr	r3, [r6, #84]	@ 0x54
3400129a:	460f      	mov	r7, r1
3400129c:	4610      	mov	r0, r2
3400129e:	9906      	ldr	r1, [sp, #24]
340012a0:	b923      	cbnz	r3, 340012ac <GTePMGhCOh+0x1c>
340012a2:	f8c8 7000 	str.w	r7, [r8]
340012a6:	6008      	str	r0, [r1, #0]
340012a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340012ac:	4d20      	ldr	r5, [pc, #128]	@ (34001330 <GTePMGhCOh+0xa0>)
340012ae:	005b      	lsls	r3, r3, #1
340012b0:	fbb5 f5f3 	udiv	r5, r5, r3
340012b4:	4295      	cmp	r5, r2
340012b6:	d2f4      	bcs.n	340012a2 <GTePMGhCOh+0x12>
340012b8:	fbb2 f4f5 	udiv	r4, r2, r5
340012bc:	ee07 2a90 	vmov	s15, r2
340012c0:	fb04 5205 	mla	r2, r4, r5, r5
340012c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340012c8:	ee07 2a90 	vmov	s15, r2
340012cc:	eddf 6a19 	vldr	s13, [pc, #100]	@ 34001334 <GTePMGhCOh+0xa4>
340012d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
340012d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
340012d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
340012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340012e0:	d5df      	bpl.n	340012a2 <GTePMGhCOh+0x12>
340012e2:	1b52      	subs	r2, r2, r5
340012e4:	600a      	str	r2, [r1, #0]
340012e6:	3201      	adds	r2, #1
340012e8:	ee07 2a90 	vmov	s15, r2
340012ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
340012f0:	ee87 0a27 	vdiv.f32	s0, s14, s15
340012f4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
340012f8:	f023 f832 	bl	34024360 <log10>
340012fc:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 34001328 <GTePMGhCOh+0x98>
34001300:	ee20 0b07 	vmul.f64	d0, d0, d7
34001304:	eebc 0bc0 	vcvt.u32.f64	s0, d0
34001308:	ee10 3a10 	vmov	r3, s0
3400130c:	443b      	add	r3, r7
3400130e:	461f      	mov	r7, r3
34001310:	f8c8 3000 	str.w	r3, [r8]
34001314:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
34001316:	42bb      	cmp	r3, r7
34001318:	bf94      	ite	ls
3400131a:	f8c8 3000 	strls.w	r3, [r8]
3400131e:	f8c8 7000 	strhi.w	r7, [r8]
34001322:	e7c1      	b.n	340012a8 <GTePMGhCOh+0x18>
34001324:	f3af 8000 	nop.w
34001328:	00000000 	.word	0x00000000
3400132c:	40d38800 	.word	0x40d38800
34001330:	000f4240 	.word	0x000f4240
34001334:	3f733333 	.word	0x3f733333

34001338 <jHlPSTIzmc>:
34001338:	ee07 1a90 	vmov	s15, r1
3400133c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 340013e0 <jHlPSTIzmc+0xa8>
34001340:	eef8 7a67 	vcvt.f32.u32	s15, s15
34001344:	b570      	push	{r4, r5, r6, lr}
34001346:	ee87 1a87 	vdiv.f32	s2, s15, s14
3400134a:	ed2d 8b02 	vpush	{d8}
3400134e:	ee08 2a10 	vmov	s16, r2
34001352:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
34001356:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
3400135a:	4605      	mov	r5, r0
3400135c:	461c      	mov	r4, r3
3400135e:	9e06      	ldr	r6, [sp, #24]
34001360:	f023 f9ca 	bl	340246f8 <pow>
34001364:	eeb8 7b48 	vcvt.f64.u32	d7, s16
34001368:	ee27 7b00 	vmul.f64	d7, d7, d0
3400136c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
34001370:	ee17 2a90 	vmov	r2, s15
34001374:	6c69      	ldr	r1, [r5, #68]	@ 0x44
34001376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3400137a:	4291      	cmp	r1, r2
3400137c:	d916      	bls.n	340013ac <jHlPSTIzmc+0x74>
3400137e:	2300      	movs	r3, #0
34001380:	6023      	str	r3, [r4, #0]
34001382:	edc6 7a00 	vstr	s15, [r6]
34001386:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
34001388:	eddf 6a16 	vldr	s13, [pc, #88]	@ 340013e4 <jHlPSTIzmc+0xac>
3400138c:	ee07 3a90 	vmov	s15, r3
34001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
34001394:	ee67 7aa6 	vmul.f32	s15, s15, s13
34001398:	eeb4 7a67 	vcmp.f32	s14, s15
3400139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340013a0:	bfc8      	it	gt
340013a2:	461a      	movgt	r2, r3
340013a4:	6032      	str	r2, [r6, #0]
340013a6:	ecbd 8b02 	vpop	{d8}
340013aa:	bd70      	pop	{r4, r5, r6, pc}
340013ac:	ee07 1a90 	vmov	s15, r1
340013b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
340013b4:	ee87 0a27 	vdiv.f32	s0, s14, s15
340013b8:	6031      	str	r1, [r6, #0]
340013ba:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
340013be:	f022 ffcf 	bl	34024360 <log10>
340013c2:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 340013d8 <jHlPSTIzmc+0xa0>
340013c6:	ee20 0b07 	vmul.f64	d0, d0, d7
340013ca:	eebc 0bc0 	vcvt.u32.f64	s0, d0
340013ce:	ed84 0a00 	vstr	s0, [r4]
340013d2:	e7e8      	b.n	340013a6 <jHlPSTIzmc+0x6e>
340013d4:	f3af 8000 	nop.w
340013d8:	00000000 	.word	0x00000000
340013dc:	40d38800 	.word	0x40d38800
340013e0:	469c4000 	.word	0x469c4000
340013e4:	3f7ae148 	.word	0x3f7ae148

340013e8 <evision_api_st_ae_new>:
340013e8:	b510      	push	{r4, lr}
340013ea:	b090      	sub	sp, #64	@ 0x40
340013ec:	b168      	cbz	r0, 3400140a <evision_api_st_ae_new+0x22>
340013ee:	2200      	movs	r2, #0
340013f0:	4c07      	ldr	r4, [pc, #28]	@ (34001410 <evision_api_st_ae_new+0x28>)
340013f2:	2140      	movs	r1, #64	@ 0x40
340013f4:	4b07      	ldr	r3, [pc, #28]	@ (34001414 <evision_api_st_ae_new+0x2c>)
340013f6:	7022      	strb	r2, [r4, #0]
340013f8:	65a0      	str	r0, [r4, #88]	@ 0x58
340013fa:	4a07      	ldr	r2, [pc, #28]	@ (34001418 <evision_api_st_ae_new+0x30>)
340013fc:	4668      	mov	r0, sp
340013fe:	f020 f825 	bl	3402144c <sniprintf>
34001402:	4668      	mov	r0, sp
34001404:	6da3      	ldr	r3, [r4, #88]	@ 0x58
34001406:	4798      	blx	r3
34001408:	4620      	mov	r0, r4
3400140a:	b010      	add	sp, #64	@ 0x40
3400140c:	bd10      	pop	{r4, pc}
3400140e:	bf00      	nop
34001410:	340d0d88 	.word	0x340d0d88
34001414:	340cc58a 	.word	0x340cc58a
34001418:	34030d94 	.word	0x34030d94

3400141c <evision_api_st_ae_delete>:
3400141c:	2800      	cmp	r0, #0
3400141e:	bf0c      	ite	eq
34001420:	f04f 30ff 	moveq.w	r0, #4294967295
34001424:	2001      	movne	r0, #1
34001426:	4770      	bx	lr

34001428 <BnNqZEfmZx>:
34001428:	2238      	movs	r2, #56	@ 0x38
3400142a:	230a      	movs	r3, #10
3400142c:	b530      	push	{r4, r5, lr}
3400142e:	e9c0 2304 	strd	r2, r3, [r0, #16]
34001432:	2264      	movs	r2, #100	@ 0x64
34001434:	232d      	movs	r3, #45	@ 0x2d
34001436:	2178      	movs	r1, #120	@ 0x78
34001438:	e9c0 2306 	strd	r2, r3, [r0, #24]
3400143c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
34001440:	f241 7470 	movw	r4, #6000	@ 0x1770
34001444:	e9c0 1308 	strd	r1, r3, [r0, #32]
34001448:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
3400144c:	e9c0 430a 	strd	r4, r3, [r0, #40]	@ 0x28
34001450:	a50b      	add	r5, pc, #44	@ (adr r5, 34001480 <BnNqZEfmZx+0x58>)
34001452:	e9d5 4500 	ldrd	r4, r5, [r5]
34001456:	2305      	movs	r3, #5
34001458:	f248 01e8 	movw	r1, #33000	@ 0x80e8
3400145c:	6503      	str	r3, [r0, #80]	@ 0x50
3400145e:	2300      	movs	r3, #0
34001460:	e9c0 3110 	strd	r3, r1, [r0, #64]	@ 0x40
34001464:	2101      	movs	r1, #1
34001466:	e9c0 450c 	strd	r4, r5, [r0, #48]	@ 0x30
3400146a:	a507      	add	r5, pc, #28	@ (adr r5, 34001488 <BnNqZEfmZx+0x60>)
3400146c:	e9d5 4500 	ldrd	r4, r5, [r5]
34001470:	e9c0 1212 	strd	r1, r2, [r0, #72]	@ 0x48
34001474:	e9c0 450e 	strd	r4, r5, [r0, #56]	@ 0x38
34001478:	6543      	str	r3, [r0, #84]	@ 0x54
3400147a:	bd30      	pop	{r4, r5, pc}
3400147c:	f3af 8000 	nop.w
34001480:	40000000 	.word	0x40000000
34001484:	3f947ae1 	.word	0x3f947ae1
34001488:	e0000000 	.word	0xe0000000
3400148c:	3f70624d 	.word	0x3f70624d

34001490 <evision_api_st_ae_init>:
34001490:	b510      	push	{r4, lr}
34001492:	4604      	mov	r4, r0
34001494:	b120      	cbz	r0, 340014a0 <evision_api_st_ae_init+0x10>
34001496:	f7ff ffc7 	bl	34001428 <BnNqZEfmZx>
3400149a:	2001      	movs	r0, #1
3400149c:	7020      	strb	r0, [r4, #0]
3400149e:	bd10      	pop	{r4, pc}
340014a0:	f04f 30ff 	mov.w	r0, #4294967295
340014a4:	e7fb      	b.n	3400149e <evision_api_st_ae_init+0xe>

340014a6 <evision_api_st_ae_process>:
340014a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340014aa:	460f      	mov	r7, r1
340014ac:	4615      	mov	r5, r2
340014ae:	4698      	mov	r8, r3
340014b0:	4604      	mov	r4, r0
340014b2:	b089      	sub	sp, #36	@ 0x24
340014b4:	2800      	cmp	r0, #0
340014b6:	f000 813b 	beq.w	34001730 <evision_api_st_ae_process+0x28a>
340014ba:	7803      	ldrb	r3, [r0, #0]
340014bc:	2b01      	cmp	r3, #1
340014be:	d11c      	bne.n	340014fa <evision_api_st_ae_process+0x54>
340014c0:	2302      	movs	r3, #2
340014c2:	7003      	strb	r3, [r0, #0]
340014c4:	f8d4 9054 	ldr.w	r9, [r4, #84]	@ 0x54
340014c8:	f1b9 0f00 	cmp.w	r9, #0
340014cc:	d019      	beq.n	34001502 <evision_api_st_ae_process+0x5c>
340014ce:	4b9c      	ldr	r3, [pc, #624]	@ (34001740 <evision_api_st_ae_process+0x29a>)
340014d0:	ea4f 0249 	mov.w	r2, r9, lsl #1
340014d4:	fbb3 f3f2 	udiv	r3, r3, r2
340014d8:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
340014da:	42be      	cmp	r6, r7
340014dc:	d213      	bcs.n	34001506 <evision_api_st_ae_process+0x60>
340014de:	6c62      	ldr	r2, [r4, #68]	@ 0x44
340014e0:	42aa      	cmp	r2, r5
340014e2:	d910      	bls.n	34001506 <evision_api_st_ae_process+0x60>
340014e4:	fbb5 f2f3 	udiv	r2, r5, r3
340014e8:	fb03 5312 	mls	r3, r3, r2, r5
340014ec:	b15b      	cbz	r3, 34001506 <evision_api_st_ae_process+0x60>
340014ee:	e9c4 5601 	strd	r5, r6, [r4, #4]
340014f2:	2001      	movs	r0, #1
340014f4:	b009      	add	sp, #36	@ 0x24
340014f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
340014fa:	2b02      	cmp	r3, #2
340014fc:	d0e2      	beq.n	340014c4 <evision_api_st_ae_process+0x1e>
340014fe:	2000      	movs	r0, #0
34001500:	e7f8      	b.n	340014f4 <evision_api_st_ae_process+0x4e>
34001502:	2301      	movs	r3, #1
34001504:	e7e8      	b.n	340014d8 <evision_api_st_ae_process+0x32>
34001506:	f10d 0a14 	add.w	sl, sp, #20
3400150a:	4639      	mov	r1, r7
3400150c:	ab04      	add	r3, sp, #16
3400150e:	462a      	mov	r2, r5
34001510:	4620      	mov	r0, r4
34001512:	f8cd a000 	str.w	sl, [sp]
34001516:	f7ff ff0f 	bl	34001338 <jHlPSTIzmc>
3400151a:	e9dd b104 	ldrd	fp, r1, [sp, #16]
3400151e:	f8d4 c010 	ldr.w	ip, [r4, #16]
34001522:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
34001526:	ee07 ca90 	vmov	s15, ip
3400152a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3400152e:	ee07 8a90 	vmov	s15, r8
34001532:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34001536:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
3400153a:	ee37 7b05 	vadd.f64	d7, d7, d5
3400153e:	ee86 0b07 	vdiv.f64	d0, d6, d7
34001542:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34001544:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34001548:	4598      	cmp	r8, r3
3400154a:	d30e      	bcc.n	3400156a <evision_api_st_ae_process+0xc4>
3400154c:	ebac 0008 	sub.w	r0, ip, r8
34001550:	69e3      	ldr	r3, [r4, #28]
34001552:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
34001556:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
3400155a:	429a      	cmp	r2, r3
3400155c:	d959      	bls.n	34001612 <evision_api_st_ae_process+0x16c>
3400155e:	6a23      	ldr	r3, [r4, #32]
34001560:	429a      	cmp	r2, r3
34001562:	bf2c      	ite	cs
34001564:	6ae3      	ldrcs	r3, [r4, #44]	@ 0x2c
34001566:	6aa3      	ldrcc	r3, [r4, #40]	@ 0x28
34001568:	e054      	b.n	34001614 <evision_api_st_ae_process+0x16e>
3400156a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
3400156e:	eeb4 0ae7 	vcmpe.f32	s0, s15
34001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001576:	d4e9      	bmi.n	3400154c <evision_api_st_ae_process+0xa6>
34001578:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3400157a:	4291      	cmp	r1, r2
3400157c:	d22b      	bcs.n	340015d6 <evision_api_st_ae_process+0x130>
3400157e:	2901      	cmp	r1, #1
34001580:	460b      	mov	r3, r1
34001582:	bf38      	it	cc
34001584:	2301      	movcc	r3, #1
34001586:	ee07 3a90 	vmov	s15, r3
3400158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400158e:	ee67 7a80 	vmul.f32	s15, s15, s0
34001592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34001596:	ee17 3a90 	vmov	r3, s15
3400159a:	4293      	cmp	r3, r2
3400159c:	dc0e      	bgt.n	340015bc <evision_api_st_ae_process+0x116>
3400159e:	edc4 7a01 	vstr	s15, [r4, #4]
340015a2:	ab07      	add	r3, sp, #28
340015a4:	9300      	str	r3, [sp, #0]
340015a6:	4620      	mov	r0, r4
340015a8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
340015ac:	ab06      	add	r3, sp, #24
340015ae:	f7ff fe6f 	bl	34001290 <GTePMGhCOh>
340015b2:	9b06      	ldr	r3, [sp, #24]
340015b4:	60a3      	str	r3, [r4, #8]
340015b6:	9b07      	ldr	r3, [sp, #28]
340015b8:	6063      	str	r3, [r4, #4]
340015ba:	e79a      	b.n	340014f2 <evision_api_st_ae_process+0x4c>
340015bc:	ee07 2a90 	vmov	s15, r2
340015c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
340015c4:	ee07 1a90 	vmov	s15, r1
340015c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340015cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
340015d0:	ee80 0a27 	vdiv.f32	s0, s0, s15
340015d4:	6062      	str	r2, [r4, #4]
340015d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
340015da:	eeb4 0ae7 	vcmpe.f32	s0, s15
340015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340015e2:	ddde      	ble.n	340015a2 <evision_api_st_ae_process+0xfc>
340015e4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
340015e8:	f022 feba 	bl	34024360 <log10>
340015ec:	eeb3 7b04 	vmov.f64	d7, #52	@ 0x41a00000  20.0
340015f0:	ee20 0b07 	vmul.f64	d0, d0, d7
340015f4:	ed9f 7b50 	vldr	d7, [pc, #320]	@ 34001738 <evision_api_st_ae_process+0x292>
340015f8:	ee20 0b07 	vmul.f64	d0, d0, d7
340015fc:	eebd 0bc0 	vcvt.s32.f64	s0, d0
34001600:	ee10 3a10 	vmov	r3, s0
34001604:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
34001606:	445b      	add	r3, fp
34001608:	4293      	cmp	r3, r2
3400160a:	bfd4      	ite	le
3400160c:	60a3      	strle	r3, [r4, #8]
3400160e:	60a2      	strgt	r2, [r4, #8]
34001610:	e7c7      	b.n	340015a2 <evision_api_st_ae_process+0xfc>
34001612:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34001614:	f8d4 e014 	ldr.w	lr, [r4, #20]
34001618:	69a2      	ldr	r2, [r4, #24]
3400161a:	9303      	str	r3, [sp, #12]
3400161c:	eb0e 030c 	add.w	r3, lr, ip
34001620:	4543      	cmp	r3, r8
34001622:	fb00 f202 	mul.w	r2, r0, r2
34001626:	d24c      	bcs.n	340016c2 <evision_api_st_ae_process+0x21c>
34001628:	eddd 7a03 	vldr	s15, [sp, #12]
3400162c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 34001744 <evision_api_st_ae_process+0x29e>
34001630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34001634:	ee67 7a87 	vmul.f32	s15, s15, s14
34001638:	ee07 2a10 	vmov	s14, r2
3400163c:	eef1 6a67 	vneg.f32	s13, s15
34001640:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34001644:	eeb4 7ae6 	vcmpe.f32	s14, s13
34001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400164c:	d504      	bpl.n	34001658 <evision_api_st_ae_process+0x1b2>
3400164e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34001652:	ee17 3a90 	vmov	r3, s15
34001656:	425a      	negs	r2, r3
34001658:	2a00      	cmp	r2, #0
3400165a:	d057      	beq.n	3400170c <evision_api_st_ae_process+0x266>
3400165c:	455e      	cmp	r6, fp
3400165e:	d14a      	bne.n	340016f6 <evision_api_st_ae_process+0x250>
34001660:	6c65      	ldr	r5, [r4, #68]	@ 0x44
34001662:	42a9      	cmp	r1, r5
34001664:	d336      	bcc.n	340016d4 <evision_api_st_ae_process+0x22e>
34001666:	2a00      	cmp	r2, #0
34001668:	da45      	bge.n	340016f6 <evision_api_st_ae_process+0x250>
3400166a:	fb01 0000 	mla	r0, r1, r0, r0
3400166e:	ee07 0a90 	vmov	s15, r0
34001672:	eeb8 6be7 	vcvt.f64.s32	d6, s15
34001676:	ee07 1a90 	vmov	s15, r1
3400167a:	ed94 5b0e 	vldr	d5, [r4, #56]	@ 0x38
3400167e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34001682:	eea6 7b05 	vfma.f64	d7, d6, d5
34001686:	eebd 7bc7 	vcvt.s32.f64	s14, d7
3400168a:	ee17 2a10 	vmov	r2, s14
3400168e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34001690:	f8c4 b008 	str.w	fp, [r4, #8]
34001694:	429a      	cmp	r2, r3
34001696:	bfb8      	it	lt
34001698:	461a      	movlt	r2, r3
3400169a:	42aa      	cmp	r2, r5
3400169c:	bfd4      	ite	le
3400169e:	6062      	strle	r2, [r4, #4]
340016a0:	6065      	strgt	r5, [r4, #4]
340016a2:	4620      	mov	r0, r4
340016a4:	f8cd a000 	str.w	sl, [sp]
340016a8:	ab04      	add	r3, sp, #16
340016aa:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
340016ae:	f7ff fdef 	bl	34001290 <GTePMGhCOh>
340016b2:	9b04      	ldr	r3, [sp, #16]
340016b4:	9d05      	ldr	r5, [sp, #20]
340016b6:	60a3      	str	r3, [r4, #8]
340016b8:	4b23      	ldr	r3, [pc, #140]	@ (34001748 <evision_api_st_ae_process+0x2a2>)
340016ba:	6065      	str	r5, [r4, #4]
340016bc:	f8c3 9060 	str.w	r9, [r3, #96]	@ 0x60
340016c0:	e717      	b.n	340014f2 <evision_api_st_ae_process+0x4c>
340016c2:	ebac 0c0e 	sub.w	ip, ip, lr
340016c6:	45c4      	cmp	ip, r8
340016c8:	dd20      	ble.n	3400170c <evision_api_st_ae_process+0x266>
340016ca:	9b03      	ldr	r3, [sp, #12]
340016cc:	429a      	cmp	r2, r3
340016ce:	bfa8      	it	ge
340016d0:	461a      	movge	r2, r3
340016d2:	e7c1      	b.n	34001658 <evision_api_st_ae_process+0x1b2>
340016d4:	2a00      	cmp	r2, #0
340016d6:	dbc8      	blt.n	3400166a <evision_api_st_ae_process+0x1c4>
340016d8:	fb01 0000 	mla	r0, r1, r0, r0
340016dc:	ee07 0a90 	vmov	s15, r0
340016e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
340016e4:	ee07 1a90 	vmov	s15, r1
340016e8:	ed94 5b0c 	vldr	d5, [r4, #48]	@ 0x30
340016ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
340016f0:	eea5 7b06 	vfma.f64	d7, d5, d6
340016f4:	e7c7      	b.n	34001686 <evision_api_st_ae_process+0x1e0>
340016f6:	4493      	add	fp, r2
340016f8:	455e      	cmp	r6, fp
340016fa:	dc04      	bgt.n	34001706 <evision_api_st_ae_process+0x260>
340016fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340016fe:	465e      	mov	r6, fp
34001700:	459b      	cmp	fp, r3
34001702:	bfa8      	it	ge
34001704:	461e      	movge	r6, r3
34001706:	e9c4 1601 	strd	r1, r6, [r4, #4]
3400170a:	e7ca      	b.n	340016a2 <evision_api_st_ae_process+0x1fc>
3400170c:	4b0e      	ldr	r3, [pc, #56]	@ (34001748 <evision_api_st_ae_process+0x2a2>)
3400170e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34001710:	4599      	cmp	r9, r3
34001712:	d00b      	beq.n	3400172c <evision_api_st_ae_process+0x286>
34001714:	462a      	mov	r2, r5
34001716:	4639      	mov	r1, r7
34001718:	4620      	mov	r0, r4
3400171a:	f8cd a000 	str.w	sl, [sp]
3400171e:	ab04      	add	r3, sp, #16
34001720:	f1b9 0f00 	cmp.w	r9, #0
34001724:	d1c3      	bne.n	340016ae <evision_api_st_ae_process+0x208>
34001726:	f7ff fe07 	bl	34001338 <jHlPSTIzmc>
3400172a:	e7c2      	b.n	340016b2 <evision_api_st_ae_process+0x20c>
3400172c:	60a7      	str	r7, [r4, #8]
3400172e:	e7c3      	b.n	340016b8 <evision_api_st_ae_process+0x212>
34001730:	f04f 30ff 	mov.w	r0, #4294967295
34001734:	e6de      	b.n	340014f4 <evision_api_st_ae_process+0x4e>
34001736:	bf00      	nop
34001738:	00000000 	.word	0x00000000
3400173c:	408f4000 	.word	0x408f4000
34001740:	000f4240 	.word	0x000f4240
34001744:	3f59999a 	.word	0x3f59999a
34001748:	340d0d88 	.word	0x340d0d88

3400174c <__aeabi_drsub>:
3400174c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
34001750:	e002      	b.n	34001758 <__adddf3>
34001752:	bf00      	nop

34001754 <__aeabi_dsub>:
34001754:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

34001758 <__adddf3>:
34001758:	b530      	push	{r4, r5, lr}
3400175a:	ea4f 0441 	mov.w	r4, r1, lsl #1
3400175e:	ea4f 0543 	mov.w	r5, r3, lsl #1
34001762:	ea94 0f05 	teq	r4, r5
34001766:	bf08      	it	eq
34001768:	ea90 0f02 	teqeq	r0, r2
3400176c:	bf1f      	itttt	ne
3400176e:	ea54 0c00 	orrsne.w	ip, r4, r0
34001772:	ea55 0c02 	orrsne.w	ip, r5, r2
34001776:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
3400177a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
3400177e:	f000 80e2 	beq.w	34001946 <__adddf3+0x1ee>
34001782:	ea4f 5454 	mov.w	r4, r4, lsr #21
34001786:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
3400178a:	bfb8      	it	lt
3400178c:	426d      	neglt	r5, r5
3400178e:	dd0c      	ble.n	340017aa <__adddf3+0x52>
34001790:	442c      	add	r4, r5
34001792:	ea80 0202 	eor.w	r2, r0, r2
34001796:	ea81 0303 	eor.w	r3, r1, r3
3400179a:	ea82 0000 	eor.w	r0, r2, r0
3400179e:	ea83 0101 	eor.w	r1, r3, r1
340017a2:	ea80 0202 	eor.w	r2, r0, r2
340017a6:	ea81 0303 	eor.w	r3, r1, r3
340017aa:	2d36      	cmp	r5, #54	@ 0x36
340017ac:	bf88      	it	hi
340017ae:	bd30      	pophi	{r4, r5, pc}
340017b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
340017b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
340017b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
340017bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
340017c0:	d002      	beq.n	340017c8 <__adddf3+0x70>
340017c2:	4240      	negs	r0, r0
340017c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
340017c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
340017cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
340017d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
340017d4:	d002      	beq.n	340017dc <__adddf3+0x84>
340017d6:	4252      	negs	r2, r2
340017d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
340017dc:	ea94 0f05 	teq	r4, r5
340017e0:	f000 80a7 	beq.w	34001932 <__adddf3+0x1da>
340017e4:	f1a4 0401 	sub.w	r4, r4, #1
340017e8:	f1d5 0e20 	rsbs	lr, r5, #32
340017ec:	db0d      	blt.n	3400180a <__adddf3+0xb2>
340017ee:	fa02 fc0e 	lsl.w	ip, r2, lr
340017f2:	fa22 f205 	lsr.w	r2, r2, r5
340017f6:	1880      	adds	r0, r0, r2
340017f8:	f141 0100 	adc.w	r1, r1, #0
340017fc:	fa03 f20e 	lsl.w	r2, r3, lr
34001800:	1880      	adds	r0, r0, r2
34001802:	fa43 f305 	asr.w	r3, r3, r5
34001806:	4159      	adcs	r1, r3
34001808:	e00e      	b.n	34001828 <__adddf3+0xd0>
3400180a:	f1a5 0520 	sub.w	r5, r5, #32
3400180e:	f10e 0e20 	add.w	lr, lr, #32
34001812:	2a01      	cmp	r2, #1
34001814:	fa03 fc0e 	lsl.w	ip, r3, lr
34001818:	bf28      	it	cs
3400181a:	f04c 0c02 	orrcs.w	ip, ip, #2
3400181e:	fa43 f305 	asr.w	r3, r3, r5
34001822:	18c0      	adds	r0, r0, r3
34001824:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
34001828:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
3400182c:	d507      	bpl.n	3400183e <__adddf3+0xe6>
3400182e:	f04f 0e00 	mov.w	lr, #0
34001832:	f1dc 0c00 	rsbs	ip, ip, #0
34001836:	eb7e 0000 	sbcs.w	r0, lr, r0
3400183a:	eb6e 0101 	sbc.w	r1, lr, r1
3400183e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
34001842:	d31b      	bcc.n	3400187c <__adddf3+0x124>
34001844:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
34001848:	d30c      	bcc.n	34001864 <__adddf3+0x10c>
3400184a:	0849      	lsrs	r1, r1, #1
3400184c:	ea5f 0030 	movs.w	r0, r0, rrx
34001850:	ea4f 0c3c 	mov.w	ip, ip, rrx
34001854:	f104 0401 	add.w	r4, r4, #1
34001858:	ea4f 5244 	mov.w	r2, r4, lsl #21
3400185c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
34001860:	f080 809a 	bcs.w	34001998 <__adddf3+0x240>
34001864:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
34001868:	bf08      	it	eq
3400186a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
3400186e:	f150 0000 	adcs.w	r0, r0, #0
34001872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
34001876:	ea41 0105 	orr.w	r1, r1, r5
3400187a:	bd30      	pop	{r4, r5, pc}
3400187c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
34001880:	4140      	adcs	r0, r0
34001882:	eb41 0101 	adc.w	r1, r1, r1
34001886:	3c01      	subs	r4, #1
34001888:	bf28      	it	cs
3400188a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
3400188e:	d2e9      	bcs.n	34001864 <__adddf3+0x10c>
34001890:	f091 0f00 	teq	r1, #0
34001894:	bf04      	itt	eq
34001896:	4601      	moveq	r1, r0
34001898:	2000      	moveq	r0, #0
3400189a:	fab1 f381 	clz	r3, r1
3400189e:	bf08      	it	eq
340018a0:	3320      	addeq	r3, #32
340018a2:	f1a3 030b 	sub.w	r3, r3, #11
340018a6:	f1b3 0220 	subs.w	r2, r3, #32
340018aa:	da0c      	bge.n	340018c6 <__adddf3+0x16e>
340018ac:	320c      	adds	r2, #12
340018ae:	dd08      	ble.n	340018c2 <__adddf3+0x16a>
340018b0:	f102 0c14 	add.w	ip, r2, #20
340018b4:	f1c2 020c 	rsb	r2, r2, #12
340018b8:	fa01 f00c 	lsl.w	r0, r1, ip
340018bc:	fa21 f102 	lsr.w	r1, r1, r2
340018c0:	e00c      	b.n	340018dc <__adddf3+0x184>
340018c2:	f102 0214 	add.w	r2, r2, #20
340018c6:	bfd8      	it	le
340018c8:	f1c2 0c20 	rsble	ip, r2, #32
340018cc:	fa01 f102 	lsl.w	r1, r1, r2
340018d0:	fa20 fc0c 	lsr.w	ip, r0, ip
340018d4:	bfdc      	itt	le
340018d6:	ea41 010c 	orrle.w	r1, r1, ip
340018da:	4090      	lslle	r0, r2
340018dc:	1ae4      	subs	r4, r4, r3
340018de:	bfa2      	ittt	ge
340018e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
340018e4:	4329      	orrge	r1, r5
340018e6:	bd30      	popge	{r4, r5, pc}
340018e8:	ea6f 0404 	mvn.w	r4, r4
340018ec:	3c1f      	subs	r4, #31
340018ee:	da1c      	bge.n	3400192a <__adddf3+0x1d2>
340018f0:	340c      	adds	r4, #12
340018f2:	dc0e      	bgt.n	34001912 <__adddf3+0x1ba>
340018f4:	f104 0414 	add.w	r4, r4, #20
340018f8:	f1c4 0220 	rsb	r2, r4, #32
340018fc:	fa20 f004 	lsr.w	r0, r0, r4
34001900:	fa01 f302 	lsl.w	r3, r1, r2
34001904:	ea40 0003 	orr.w	r0, r0, r3
34001908:	fa21 f304 	lsr.w	r3, r1, r4
3400190c:	ea45 0103 	orr.w	r1, r5, r3
34001910:	bd30      	pop	{r4, r5, pc}
34001912:	f1c4 040c 	rsb	r4, r4, #12
34001916:	f1c4 0220 	rsb	r2, r4, #32
3400191a:	fa20 f002 	lsr.w	r0, r0, r2
3400191e:	fa01 f304 	lsl.w	r3, r1, r4
34001922:	ea40 0003 	orr.w	r0, r0, r3
34001926:	4629      	mov	r1, r5
34001928:	bd30      	pop	{r4, r5, pc}
3400192a:	fa21 f004 	lsr.w	r0, r1, r4
3400192e:	4629      	mov	r1, r5
34001930:	bd30      	pop	{r4, r5, pc}
34001932:	f094 0f00 	teq	r4, #0
34001936:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
3400193a:	bf06      	itte	eq
3400193c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
34001940:	3401      	addeq	r4, #1
34001942:	3d01      	subne	r5, #1
34001944:	e74e      	b.n	340017e4 <__adddf3+0x8c>
34001946:	ea7f 5c64 	mvns.w	ip, r4, asr #21
3400194a:	bf18      	it	ne
3400194c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
34001950:	d029      	beq.n	340019a6 <__adddf3+0x24e>
34001952:	ea94 0f05 	teq	r4, r5
34001956:	bf08      	it	eq
34001958:	ea90 0f02 	teqeq	r0, r2
3400195c:	d005      	beq.n	3400196a <__adddf3+0x212>
3400195e:	ea54 0c00 	orrs.w	ip, r4, r0
34001962:	bf04      	itt	eq
34001964:	4619      	moveq	r1, r3
34001966:	4610      	moveq	r0, r2
34001968:	bd30      	pop	{r4, r5, pc}
3400196a:	ea91 0f03 	teq	r1, r3
3400196e:	bf1e      	ittt	ne
34001970:	2100      	movne	r1, #0
34001972:	2000      	movne	r0, #0
34001974:	bd30      	popne	{r4, r5, pc}
34001976:	ea5f 5c54 	movs.w	ip, r4, lsr #21
3400197a:	d105      	bne.n	34001988 <__adddf3+0x230>
3400197c:	0040      	lsls	r0, r0, #1
3400197e:	4149      	adcs	r1, r1
34001980:	bf28      	it	cs
34001982:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
34001986:	bd30      	pop	{r4, r5, pc}
34001988:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
3400198c:	bf3c      	itt	cc
3400198e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
34001992:	bd30      	popcc	{r4, r5, pc}
34001994:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34001998:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
3400199c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
340019a0:	f04f 0000 	mov.w	r0, #0
340019a4:	bd30      	pop	{r4, r5, pc}
340019a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
340019aa:	bf1a      	itte	ne
340019ac:	4619      	movne	r1, r3
340019ae:	4610      	movne	r0, r2
340019b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
340019b4:	bf1c      	itt	ne
340019b6:	460b      	movne	r3, r1
340019b8:	4602      	movne	r2, r0
340019ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
340019be:	bf06      	itte	eq
340019c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
340019c4:	ea91 0f03 	teqeq	r1, r3
340019c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
340019cc:	bd30      	pop	{r4, r5, pc}
340019ce:	bf00      	nop

340019d0 <__aeabi_ui2d>:
340019d0:	f090 0f00 	teq	r0, #0
340019d4:	bf04      	itt	eq
340019d6:	2100      	moveq	r1, #0
340019d8:	4770      	bxeq	lr
340019da:	b530      	push	{r4, r5, lr}
340019dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
340019e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
340019e4:	f04f 0500 	mov.w	r5, #0
340019e8:	f04f 0100 	mov.w	r1, #0
340019ec:	e750      	b.n	34001890 <__adddf3+0x138>
340019ee:	bf00      	nop

340019f0 <__aeabi_i2d>:
340019f0:	f090 0f00 	teq	r0, #0
340019f4:	bf04      	itt	eq
340019f6:	2100      	moveq	r1, #0
340019f8:	4770      	bxeq	lr
340019fa:	b530      	push	{r4, r5, lr}
340019fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001a00:	f104 0432 	add.w	r4, r4, #50	@ 0x32
34001a04:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
34001a08:	bf48      	it	mi
34001a0a:	4240      	negmi	r0, r0
34001a0c:	f04f 0100 	mov.w	r1, #0
34001a10:	e73e      	b.n	34001890 <__adddf3+0x138>
34001a12:	bf00      	nop

34001a14 <__aeabi_f2d>:
34001a14:	0042      	lsls	r2, r0, #1
34001a16:	ea4f 01e2 	mov.w	r1, r2, asr #3
34001a1a:	ea4f 0131 	mov.w	r1, r1, rrx
34001a1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
34001a22:	bf1f      	itttt	ne
34001a24:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
34001a28:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
34001a2c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
34001a30:	4770      	bxne	lr
34001a32:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
34001a36:	bf08      	it	eq
34001a38:	4770      	bxeq	lr
34001a3a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
34001a3e:	bf04      	itt	eq
34001a40:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
34001a44:	4770      	bxeq	lr
34001a46:	b530      	push	{r4, r5, lr}
34001a48:	f44f 7460 	mov.w	r4, #896	@ 0x380
34001a4c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34001a50:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34001a54:	e71c      	b.n	34001890 <__adddf3+0x138>
34001a56:	bf00      	nop

34001a58 <__aeabi_ul2d>:
34001a58:	ea50 0201 	orrs.w	r2, r0, r1
34001a5c:	bf08      	it	eq
34001a5e:	4770      	bxeq	lr
34001a60:	b530      	push	{r4, r5, lr}
34001a62:	f04f 0500 	mov.w	r5, #0
34001a66:	e00a      	b.n	34001a7e <__aeabi_l2d+0x16>

34001a68 <__aeabi_l2d>:
34001a68:	ea50 0201 	orrs.w	r2, r0, r1
34001a6c:	bf08      	it	eq
34001a6e:	4770      	bxeq	lr
34001a70:	b530      	push	{r4, r5, lr}
34001a72:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
34001a76:	d502      	bpl.n	34001a7e <__aeabi_l2d+0x16>
34001a78:	4240      	negs	r0, r0
34001a7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001a7e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001a82:	f104 0432 	add.w	r4, r4, #50	@ 0x32
34001a86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
34001a8a:	f43f aed8 	beq.w	3400183e <__adddf3+0xe6>
34001a8e:	f04f 0203 	mov.w	r2, #3
34001a92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
34001a96:	bf18      	it	ne
34001a98:	3203      	addne	r2, #3
34001a9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
34001a9e:	bf18      	it	ne
34001aa0:	3203      	addne	r2, #3
34001aa2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
34001aa6:	f1c2 0320 	rsb	r3, r2, #32
34001aaa:	fa00 fc03 	lsl.w	ip, r0, r3
34001aae:	fa20 f002 	lsr.w	r0, r0, r2
34001ab2:	fa01 fe03 	lsl.w	lr, r1, r3
34001ab6:	ea40 000e 	orr.w	r0, r0, lr
34001aba:	fa21 f102 	lsr.w	r1, r1, r2
34001abe:	4414      	add	r4, r2
34001ac0:	e6bd      	b.n	3400183e <__adddf3+0xe6>
34001ac2:	bf00      	nop

34001ac4 <__aeabi_ldivmod>:
34001ac4:	b97b      	cbnz	r3, 34001ae6 <__aeabi_ldivmod+0x22>
34001ac6:	b972      	cbnz	r2, 34001ae6 <__aeabi_ldivmod+0x22>
34001ac8:	2900      	cmp	r1, #0
34001aca:	bfbe      	ittt	lt
34001acc:	2000      	movlt	r0, #0
34001ace:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
34001ad2:	e006      	blt.n	34001ae2 <__aeabi_ldivmod+0x1e>
34001ad4:	bf08      	it	eq
34001ad6:	2800      	cmpeq	r0, #0
34001ad8:	bf1c      	itt	ne
34001ada:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
34001ade:	f04f 30ff 	movne.w	r0, #4294967295
34001ae2:	f000 ba35 	b.w	34001f50 <__aeabi_idiv0>
34001ae6:	f1ad 0c08 	sub.w	ip, sp, #8
34001aea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34001aee:	2900      	cmp	r1, #0
34001af0:	db09      	blt.n	34001b06 <__aeabi_ldivmod+0x42>
34001af2:	2b00      	cmp	r3, #0
34001af4:	db1a      	blt.n	34001b2c <__aeabi_ldivmod+0x68>
34001af6:	f000 f887 	bl	34001c08 <__udivmoddi4>
34001afa:	f8dd e004 	ldr.w	lr, [sp, #4]
34001afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b02:	b004      	add	sp, #16
34001b04:	4770      	bx	lr
34001b06:	4240      	negs	r0, r0
34001b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001b0c:	2b00      	cmp	r3, #0
34001b0e:	db1b      	blt.n	34001b48 <__aeabi_ldivmod+0x84>
34001b10:	f000 f87a 	bl	34001c08 <__udivmoddi4>
34001b14:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b1c:	b004      	add	sp, #16
34001b1e:	4240      	negs	r0, r0
34001b20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001b24:	4252      	negs	r2, r2
34001b26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b2a:	4770      	bx	lr
34001b2c:	4252      	negs	r2, r2
34001b2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b32:	f000 f869 	bl	34001c08 <__udivmoddi4>
34001b36:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b3e:	b004      	add	sp, #16
34001b40:	4240      	negs	r0, r0
34001b42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001b46:	4770      	bx	lr
34001b48:	4252      	negs	r2, r2
34001b4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b4e:	f000 f85b 	bl	34001c08 <__udivmoddi4>
34001b52:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b5a:	b004      	add	sp, #16
34001b5c:	4252      	negs	r2, r2
34001b5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b62:	4770      	bx	lr

34001b64 <__aeabi_uldivmod>:
34001b64:	b953      	cbnz	r3, 34001b7c <__aeabi_uldivmod+0x18>
34001b66:	b94a      	cbnz	r2, 34001b7c <__aeabi_uldivmod+0x18>
34001b68:	2900      	cmp	r1, #0
34001b6a:	bf08      	it	eq
34001b6c:	2800      	cmpeq	r0, #0
34001b6e:	bf1c      	itt	ne
34001b70:	f04f 31ff 	movne.w	r1, #4294967295
34001b74:	f04f 30ff 	movne.w	r0, #4294967295
34001b78:	f000 b9ea 	b.w	34001f50 <__aeabi_idiv0>
34001b7c:	f1ad 0c08 	sub.w	ip, sp, #8
34001b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34001b84:	f000 f840 	bl	34001c08 <__udivmoddi4>
34001b88:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b90:	b004      	add	sp, #16
34001b92:	4770      	bx	lr

34001b94 <__aeabi_d2lz>:
34001b94:	4602      	mov	r2, r0
34001b96:	b508      	push	{r3, lr}
34001b98:	460b      	mov	r3, r1
34001b9a:	ec43 2b17 	vmov	d7, r2, r3
34001b9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001ba6:	d403      	bmi.n	34001bb0 <__aeabi_d2lz+0x1c>
34001ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
34001bac:	f000 b80c 	b.w	34001bc8 <__aeabi_d2ulz>
34001bb0:	eeb1 7b47 	vneg.f64	d7, d7
34001bb4:	ec51 0b17 	vmov	r0, r1, d7
34001bb8:	f000 f806 	bl	34001bc8 <__aeabi_d2ulz>
34001bbc:	4240      	negs	r0, r0
34001bbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001bc2:	bd08      	pop	{r3, pc}
34001bc4:	0000      	movs	r0, r0
	...

34001bc8 <__aeabi_d2ulz>:
34001bc8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 34001bf8 <__aeabi_d2ulz+0x30>
34001bcc:	ec41 0b17 	vmov	d7, r0, r1
34001bd0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 34001c00 <__aeabi_d2ulz+0x38>
34001bd4:	ee27 6b06 	vmul.f64	d6, d7, d6
34001bd8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
34001bdc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
34001be0:	ee16 1a10 	vmov	r1, s12
34001be4:	eea4 7b45 	vfms.f64	d7, d4, d5
34001be8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
34001bec:	ee17 0a90 	vmov	r0, s15
34001bf0:	4770      	bx	lr
34001bf2:	bf00      	nop
34001bf4:	f3af 8000 	nop.w
34001bf8:	00000000 	.word	0x00000000
34001bfc:	3df00000 	.word	0x3df00000
34001c00:	00000000 	.word	0x00000000
34001c04:	41f00000 	.word	0x41f00000

34001c08 <__udivmoddi4>:
34001c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34001c0c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
34001c0e:	4688      	mov	r8, r1
34001c10:	4604      	mov	r4, r0
34001c12:	468e      	mov	lr, r1
34001c14:	2b00      	cmp	r3, #0
34001c16:	d14a      	bne.n	34001cae <__udivmoddi4+0xa6>
34001c18:	428a      	cmp	r2, r1
34001c1a:	4617      	mov	r7, r2
34001c1c:	d95f      	bls.n	34001cde <__udivmoddi4+0xd6>
34001c1e:	fab2 f682 	clz	r6, r2
34001c22:	b14e      	cbz	r6, 34001c38 <__udivmoddi4+0x30>
34001c24:	f1c6 0320 	rsb	r3, r6, #32
34001c28:	fa01 fe06 	lsl.w	lr, r1, r6
34001c2c:	40b7      	lsls	r7, r6
34001c2e:	40b4      	lsls	r4, r6
34001c30:	fa20 f303 	lsr.w	r3, r0, r3
34001c34:	ea43 0e0e 	orr.w	lr, r3, lr
34001c38:	ea4f 4817 	mov.w	r8, r7, lsr #16
34001c3c:	fa1f fc87 	uxth.w	ip, r7
34001c40:	0c23      	lsrs	r3, r4, #16
34001c42:	fbbe f1f8 	udiv	r1, lr, r8
34001c46:	fb08 ee11 	mls	lr, r8, r1, lr
34001c4a:	fb01 f20c 	mul.w	r2, r1, ip
34001c4e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34001c52:	429a      	cmp	r2, r3
34001c54:	d907      	bls.n	34001c66 <__udivmoddi4+0x5e>
34001c56:	18fb      	adds	r3, r7, r3
34001c58:	f101 30ff 	add.w	r0, r1, #4294967295
34001c5c:	d202      	bcs.n	34001c64 <__udivmoddi4+0x5c>
34001c5e:	429a      	cmp	r2, r3
34001c60:	f200 8154 	bhi.w	34001f0c <__udivmoddi4+0x304>
34001c64:	4601      	mov	r1, r0
34001c66:	1a9b      	subs	r3, r3, r2
34001c68:	b2a2      	uxth	r2, r4
34001c6a:	fbb3 f0f8 	udiv	r0, r3, r8
34001c6e:	fb08 3310 	mls	r3, r8, r0, r3
34001c72:	fb00 fc0c 	mul.w	ip, r0, ip
34001c76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34001c7a:	4594      	cmp	ip, r2
34001c7c:	d90b      	bls.n	34001c96 <__udivmoddi4+0x8e>
34001c7e:	18ba      	adds	r2, r7, r2
34001c80:	f100 33ff 	add.w	r3, r0, #4294967295
34001c84:	bf2c      	ite	cs
34001c86:	2401      	movcs	r4, #1
34001c88:	2400      	movcc	r4, #0
34001c8a:	4594      	cmp	ip, r2
34001c8c:	d902      	bls.n	34001c94 <__udivmoddi4+0x8c>
34001c8e:	2c00      	cmp	r4, #0
34001c90:	f000 813f 	beq.w	34001f12 <__udivmoddi4+0x30a>
34001c94:	4618      	mov	r0, r3
34001c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34001c9a:	eba2 020c 	sub.w	r2, r2, ip
34001c9e:	2100      	movs	r1, #0
34001ca0:	b11d      	cbz	r5, 34001caa <__udivmoddi4+0xa2>
34001ca2:	40f2      	lsrs	r2, r6
34001ca4:	2300      	movs	r3, #0
34001ca6:	e9c5 2300 	strd	r2, r3, [r5]
34001caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34001cae:	428b      	cmp	r3, r1
34001cb0:	d905      	bls.n	34001cbe <__udivmoddi4+0xb6>
34001cb2:	b10d      	cbz	r5, 34001cb8 <__udivmoddi4+0xb0>
34001cb4:	e9c5 0100 	strd	r0, r1, [r5]
34001cb8:	2100      	movs	r1, #0
34001cba:	4608      	mov	r0, r1
34001cbc:	e7f5      	b.n	34001caa <__udivmoddi4+0xa2>
34001cbe:	fab3 f183 	clz	r1, r3
34001cc2:	2900      	cmp	r1, #0
34001cc4:	d14e      	bne.n	34001d64 <__udivmoddi4+0x15c>
34001cc6:	4543      	cmp	r3, r8
34001cc8:	f0c0 8112 	bcc.w	34001ef0 <__udivmoddi4+0x2e8>
34001ccc:	4282      	cmp	r2, r0
34001cce:	f240 810f 	bls.w	34001ef0 <__udivmoddi4+0x2e8>
34001cd2:	4608      	mov	r0, r1
34001cd4:	2d00      	cmp	r5, #0
34001cd6:	d0e8      	beq.n	34001caa <__udivmoddi4+0xa2>
34001cd8:	e9c5 4e00 	strd	r4, lr, [r5]
34001cdc:	e7e5      	b.n	34001caa <__udivmoddi4+0xa2>
34001cde:	2a00      	cmp	r2, #0
34001ce0:	f000 80ac 	beq.w	34001e3c <__udivmoddi4+0x234>
34001ce4:	fab2 f682 	clz	r6, r2
34001ce8:	2e00      	cmp	r6, #0
34001cea:	f040 80bb 	bne.w	34001e64 <__udivmoddi4+0x25c>
34001cee:	1a8b      	subs	r3, r1, r2
34001cf0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
34001cf4:	b2bc      	uxth	r4, r7
34001cf6:	2101      	movs	r1, #1
34001cf8:	0c02      	lsrs	r2, r0, #16
34001cfa:	b280      	uxth	r0, r0
34001cfc:	fbb3 fcfe 	udiv	ip, r3, lr
34001d00:	fb0e 331c 	mls	r3, lr, ip, r3
34001d04:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
34001d08:	fb04 f20c 	mul.w	r2, r4, ip
34001d0c:	429a      	cmp	r2, r3
34001d0e:	d90e      	bls.n	34001d2e <__udivmoddi4+0x126>
34001d10:	18fb      	adds	r3, r7, r3
34001d12:	f10c 38ff 	add.w	r8, ip, #4294967295
34001d16:	bf2c      	ite	cs
34001d18:	f04f 0901 	movcs.w	r9, #1
34001d1c:	f04f 0900 	movcc.w	r9, #0
34001d20:	429a      	cmp	r2, r3
34001d22:	d903      	bls.n	34001d2c <__udivmoddi4+0x124>
34001d24:	f1b9 0f00 	cmp.w	r9, #0
34001d28:	f000 80ec 	beq.w	34001f04 <__udivmoddi4+0x2fc>
34001d2c:	46c4      	mov	ip, r8
34001d2e:	1a9b      	subs	r3, r3, r2
34001d30:	fbb3 f8fe 	udiv	r8, r3, lr
34001d34:	fb0e 3318 	mls	r3, lr, r8, r3
34001d38:	fb04 f408 	mul.w	r4, r4, r8
34001d3c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34001d40:	4294      	cmp	r4, r2
34001d42:	d90b      	bls.n	34001d5c <__udivmoddi4+0x154>
34001d44:	18ba      	adds	r2, r7, r2
34001d46:	f108 33ff 	add.w	r3, r8, #4294967295
34001d4a:	bf2c      	ite	cs
34001d4c:	2001      	movcs	r0, #1
34001d4e:	2000      	movcc	r0, #0
34001d50:	4294      	cmp	r4, r2
34001d52:	d902      	bls.n	34001d5a <__udivmoddi4+0x152>
34001d54:	2800      	cmp	r0, #0
34001d56:	f000 80d1 	beq.w	34001efc <__udivmoddi4+0x2f4>
34001d5a:	4698      	mov	r8, r3
34001d5c:	1b12      	subs	r2, r2, r4
34001d5e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
34001d62:	e79d      	b.n	34001ca0 <__udivmoddi4+0x98>
34001d64:	f1c1 0620 	rsb	r6, r1, #32
34001d68:	408b      	lsls	r3, r1
34001d6a:	fa08 f401 	lsl.w	r4, r8, r1
34001d6e:	fa00 f901 	lsl.w	r9, r0, r1
34001d72:	fa22 f706 	lsr.w	r7, r2, r6
34001d76:	fa28 f806 	lsr.w	r8, r8, r6
34001d7a:	408a      	lsls	r2, r1
34001d7c:	431f      	orrs	r7, r3
34001d7e:	fa20 f306 	lsr.w	r3, r0, r6
34001d82:	0c38      	lsrs	r0, r7, #16
34001d84:	4323      	orrs	r3, r4
34001d86:	fa1f fc87 	uxth.w	ip, r7
34001d8a:	0c1c      	lsrs	r4, r3, #16
34001d8c:	fbb8 fef0 	udiv	lr, r8, r0
34001d90:	fb00 881e 	mls	r8, r0, lr, r8
34001d94:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34001d98:	fb0e f80c 	mul.w	r8, lr, ip
34001d9c:	45a0      	cmp	r8, r4
34001d9e:	d90e      	bls.n	34001dbe <__udivmoddi4+0x1b6>
34001da0:	193c      	adds	r4, r7, r4
34001da2:	f10e 3aff 	add.w	sl, lr, #4294967295
34001da6:	bf2c      	ite	cs
34001da8:	f04f 0b01 	movcs.w	fp, #1
34001dac:	f04f 0b00 	movcc.w	fp, #0
34001db0:	45a0      	cmp	r8, r4
34001db2:	d903      	bls.n	34001dbc <__udivmoddi4+0x1b4>
34001db4:	f1bb 0f00 	cmp.w	fp, #0
34001db8:	f000 80b8 	beq.w	34001f2c <__udivmoddi4+0x324>
34001dbc:	46d6      	mov	lr, sl
34001dbe:	eba4 0408 	sub.w	r4, r4, r8
34001dc2:	fa1f f883 	uxth.w	r8, r3
34001dc6:	fbb4 f3f0 	udiv	r3, r4, r0
34001dca:	fb00 4413 	mls	r4, r0, r3, r4
34001dce:	fb03 fc0c 	mul.w	ip, r3, ip
34001dd2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
34001dd6:	45a4      	cmp	ip, r4
34001dd8:	d90e      	bls.n	34001df8 <__udivmoddi4+0x1f0>
34001dda:	193c      	adds	r4, r7, r4
34001ddc:	f103 30ff 	add.w	r0, r3, #4294967295
34001de0:	bf2c      	ite	cs
34001de2:	f04f 0801 	movcs.w	r8, #1
34001de6:	f04f 0800 	movcc.w	r8, #0
34001dea:	45a4      	cmp	ip, r4
34001dec:	d903      	bls.n	34001df6 <__udivmoddi4+0x1ee>
34001dee:	f1b8 0f00 	cmp.w	r8, #0
34001df2:	f000 809f 	beq.w	34001f34 <__udivmoddi4+0x32c>
34001df6:	4603      	mov	r3, r0
34001df8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
34001dfc:	eba4 040c 	sub.w	r4, r4, ip
34001e00:	fba0 ec02 	umull	lr, ip, r0, r2
34001e04:	4564      	cmp	r4, ip
34001e06:	4673      	mov	r3, lr
34001e08:	46e0      	mov	r8, ip
34001e0a:	d302      	bcc.n	34001e12 <__udivmoddi4+0x20a>
34001e0c:	d107      	bne.n	34001e1e <__udivmoddi4+0x216>
34001e0e:	45f1      	cmp	r9, lr
34001e10:	d205      	bcs.n	34001e1e <__udivmoddi4+0x216>
34001e12:	ebbe 0302 	subs.w	r3, lr, r2
34001e16:	eb6c 0c07 	sbc.w	ip, ip, r7
34001e1a:	3801      	subs	r0, #1
34001e1c:	46e0      	mov	r8, ip
34001e1e:	b15d      	cbz	r5, 34001e38 <__udivmoddi4+0x230>
34001e20:	ebb9 0203 	subs.w	r2, r9, r3
34001e24:	eb64 0408 	sbc.w	r4, r4, r8
34001e28:	fa04 f606 	lsl.w	r6, r4, r6
34001e2c:	fa22 f301 	lsr.w	r3, r2, r1
34001e30:	40cc      	lsrs	r4, r1
34001e32:	431e      	orrs	r6, r3
34001e34:	e9c5 6400 	strd	r6, r4, [r5]
34001e38:	2100      	movs	r1, #0
34001e3a:	e736      	b.n	34001caa <__udivmoddi4+0xa2>
34001e3c:	fbb1 fcf2 	udiv	ip, r1, r2
34001e40:	0c01      	lsrs	r1, r0, #16
34001e42:	4614      	mov	r4, r2
34001e44:	b280      	uxth	r0, r0
34001e46:	4696      	mov	lr, r2
34001e48:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34001e4c:	2620      	movs	r6, #32
34001e4e:	4690      	mov	r8, r2
34001e50:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34001e54:	4610      	mov	r0, r2
34001e56:	fbb1 f1f2 	udiv	r1, r1, r2
34001e5a:	eba3 0308 	sub.w	r3, r3, r8
34001e5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34001e62:	e74b      	b.n	34001cfc <__udivmoddi4+0xf4>
34001e64:	40b7      	lsls	r7, r6
34001e66:	f1c6 0320 	rsb	r3, r6, #32
34001e6a:	fa01 f206 	lsl.w	r2, r1, r6
34001e6e:	fa21 f803 	lsr.w	r8, r1, r3
34001e72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34001e76:	fa20 f303 	lsr.w	r3, r0, r3
34001e7a:	b2bc      	uxth	r4, r7
34001e7c:	40b0      	lsls	r0, r6
34001e7e:	4313      	orrs	r3, r2
34001e80:	0c02      	lsrs	r2, r0, #16
34001e82:	0c19      	lsrs	r1, r3, #16
34001e84:	b280      	uxth	r0, r0
34001e86:	fbb8 f9fe 	udiv	r9, r8, lr
34001e8a:	fb0e 8819 	mls	r8, lr, r9, r8
34001e8e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34001e92:	fb09 f804 	mul.w	r8, r9, r4
34001e96:	4588      	cmp	r8, r1
34001e98:	d951      	bls.n	34001f3e <__udivmoddi4+0x336>
34001e9a:	1879      	adds	r1, r7, r1
34001e9c:	f109 3cff 	add.w	ip, r9, #4294967295
34001ea0:	bf2c      	ite	cs
34001ea2:	f04f 0a01 	movcs.w	sl, #1
34001ea6:	f04f 0a00 	movcc.w	sl, #0
34001eaa:	4588      	cmp	r8, r1
34001eac:	d902      	bls.n	34001eb4 <__udivmoddi4+0x2ac>
34001eae:	f1ba 0f00 	cmp.w	sl, #0
34001eb2:	d031      	beq.n	34001f18 <__udivmoddi4+0x310>
34001eb4:	eba1 0108 	sub.w	r1, r1, r8
34001eb8:	fbb1 f9fe 	udiv	r9, r1, lr
34001ebc:	fb09 f804 	mul.w	r8, r9, r4
34001ec0:	fb0e 1119 	mls	r1, lr, r9, r1
34001ec4:	b29b      	uxth	r3, r3
34001ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34001eca:	4543      	cmp	r3, r8
34001ecc:	d235      	bcs.n	34001f3a <__udivmoddi4+0x332>
34001ece:	18fb      	adds	r3, r7, r3
34001ed0:	f109 31ff 	add.w	r1, r9, #4294967295
34001ed4:	bf2c      	ite	cs
34001ed6:	f04f 0a01 	movcs.w	sl, #1
34001eda:	f04f 0a00 	movcc.w	sl, #0
34001ede:	4543      	cmp	r3, r8
34001ee0:	d2bb      	bcs.n	34001e5a <__udivmoddi4+0x252>
34001ee2:	f1ba 0f00 	cmp.w	sl, #0
34001ee6:	d1b8      	bne.n	34001e5a <__udivmoddi4+0x252>
34001ee8:	f1a9 0102 	sub.w	r1, r9, #2
34001eec:	443b      	add	r3, r7
34001eee:	e7b4      	b.n	34001e5a <__udivmoddi4+0x252>
34001ef0:	1a84      	subs	r4, r0, r2
34001ef2:	eb68 0203 	sbc.w	r2, r8, r3
34001ef6:	2001      	movs	r0, #1
34001ef8:	4696      	mov	lr, r2
34001efa:	e6eb      	b.n	34001cd4 <__udivmoddi4+0xcc>
34001efc:	443a      	add	r2, r7
34001efe:	f1a8 0802 	sub.w	r8, r8, #2
34001f02:	e72b      	b.n	34001d5c <__udivmoddi4+0x154>
34001f04:	f1ac 0c02 	sub.w	ip, ip, #2
34001f08:	443b      	add	r3, r7
34001f0a:	e710      	b.n	34001d2e <__udivmoddi4+0x126>
34001f0c:	3902      	subs	r1, #2
34001f0e:	443b      	add	r3, r7
34001f10:	e6a9      	b.n	34001c66 <__udivmoddi4+0x5e>
34001f12:	443a      	add	r2, r7
34001f14:	3802      	subs	r0, #2
34001f16:	e6be      	b.n	34001c96 <__udivmoddi4+0x8e>
34001f18:	eba7 0808 	sub.w	r8, r7, r8
34001f1c:	f1a9 0c02 	sub.w	ip, r9, #2
34001f20:	4441      	add	r1, r8
34001f22:	fbb1 f9fe 	udiv	r9, r1, lr
34001f26:	fb09 f804 	mul.w	r8, r9, r4
34001f2a:	e7c9      	b.n	34001ec0 <__udivmoddi4+0x2b8>
34001f2c:	f1ae 0e02 	sub.w	lr, lr, #2
34001f30:	443c      	add	r4, r7
34001f32:	e744      	b.n	34001dbe <__udivmoddi4+0x1b6>
34001f34:	3b02      	subs	r3, #2
34001f36:	443c      	add	r4, r7
34001f38:	e75e      	b.n	34001df8 <__udivmoddi4+0x1f0>
34001f3a:	4649      	mov	r1, r9
34001f3c:	e78d      	b.n	34001e5a <__udivmoddi4+0x252>
34001f3e:	eba1 0108 	sub.w	r1, r1, r8
34001f42:	46cc      	mov	ip, r9
34001f44:	fbb1 f9fe 	udiv	r9, r1, lr
34001f48:	fb09 f804 	mul.w	r8, r9, r4
34001f4c:	e7b8      	b.n	34001ec0 <__udivmoddi4+0x2b8>
34001f4e:	bf00      	nop

34001f50 <__aeabi_idiv0>:
34001f50:	4770      	bx	lr
34001f52:	bf00      	nop

34001f54 <_write>:

int _write(int file, char *ptr, int len)
{
  HAL_StatusTypeDef status;

  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
34001f54:	3801      	subs	r0, #1
34001f56:	2801      	cmp	r0, #1
{
34001f58:	b510      	push	{r4, lr}
34001f5a:	4614      	mov	r4, r2
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
34001f5c:	d907      	bls.n	34001f6e <_write+0x1a>
      errno = EBADF;
34001f5e:	f01f fe45 	bl	34021bec <__errno>
34001f62:	2309      	movs	r3, #9
      return -1;
34001f64:	f04f 34ff 	mov.w	r4, #4294967295
      errno = EBADF;
34001f68:	6003      	str	r3, [r0, #0]
  }

  status = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, ~0);

  return (status == HAL_OK ? len : 0);
}
34001f6a:	4620      	mov	r0, r4
34001f6c:	bd10      	pop	{r4, pc}
  status = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, ~0);
34001f6e:	f04f 33ff 	mov.w	r3, #4294967295
34001f72:	4804      	ldr	r0, [pc, #16]	@ (34001f84 <_write+0x30>)
34001f74:	b292      	uxth	r2, r2
34001f76:	f019 f91b 	bl	3401b1b0 <HAL_UART_Transmit>
  return (status == HAL_OK ? len : 0);
34001f7a:	2800      	cmp	r0, #0
34001f7c:	bf18      	it	ne
34001f7e:	2400      	movne	r4, #0
34001f80:	e7f3      	b.n	34001f6a <_write+0x16>
34001f82:	bf00      	nop
34001f84:	340e59c0 	.word	0x340e59c0

34001f88 <freertos_libc_init>:
static int is_tx_rt_init_done;
static SemaphoreHandle_t libc_lock;
static StaticSemaphore_t libc_lock_buffer;

void freertos_libc_init()
{
34001f88:	b508      	push	{r3, lr}
  libc_lock = xSemaphoreCreateMutexStatic(&libc_lock_buffer);
34001f8a:	2001      	movs	r0, #1
34001f8c:	4907      	ldr	r1, [pc, #28]	@ (34001fac <freertos_libc_init+0x24>)
34001f8e:	f008 faf5 	bl	3400a57c <xQueueCreateMutexStatic>
34001f92:	4b07      	ldr	r3, [pc, #28]	@ (34001fb0 <freertos_libc_init+0x28>)
34001f94:	6018      	str	r0, [r3, #0]
  assert(libc_lock);
34001f96:	b928      	cbnz	r0, 34001fa4 <freertos_libc_init+0x1c>
34001f98:	2125      	movs	r1, #37	@ 0x25
34001f9a:	4b06      	ldr	r3, [pc, #24]	@ (34001fb4 <freertos_libc_init+0x2c>)
34001f9c:	4a06      	ldr	r2, [pc, #24]	@ (34001fb8 <freertos_libc_init+0x30>)
34001f9e:	4807      	ldr	r0, [pc, #28]	@ (34001fbc <freertos_libc_init+0x34>)
34001fa0:	f01d fd32 	bl	3401fa08 <__assert_func>

  is_tx_rt_init_done = 1;
34001fa4:	2201      	movs	r2, #1
34001fa6:	4b06      	ldr	r3, [pc, #24]	@ (34001fc0 <freertos_libc_init+0x38>)
34001fa8:	601a      	str	r2, [r3, #0]
}
34001faa:	bd08      	pop	{r3, pc}
34001fac:	340d0dec 	.word	0x340d0dec
34001fb0:	340d0e3c 	.word	0x340d0e3c
34001fb4:	3402adc8 	.word	0x3402adc8
34001fb8:	34030dc4 	.word	0x34030dc4
34001fbc:	3402add2 	.word	0x3402add2
34001fc0:	340d0e40 	.word	0x340d0e40

34001fc4 <__malloc_lock>:

void __malloc_lock (struct _reent *reent)
{
34001fc4:	b508      	push	{r3, lr}
  int ret;

  if (!is_tx_rt_init_done)
34001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (34001ff8 <__malloc_lock+0x34>)
34001fc8:	681b      	ldr	r3, [r3, #0]
34001fca:	b1a3      	cbz	r3, 34001ff6 <__malloc_lock+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
34001fcc:	f3ef 8305 	mrs	r3, IPSR
    return ;

  assert(is_tx_rt_init_done);
  assert(!IS_IRQ_MODE());
34001fd0:	b12b      	cbz	r3, 34001fde <__malloc_lock+0x1a>
34001fd2:	2132      	movs	r1, #50	@ 0x32
34001fd4:	4b09      	ldr	r3, [pc, #36]	@ (34001ffc <__malloc_lock+0x38>)
34001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (34002000 <__malloc_lock+0x3c>)

  ret = xSemaphoreTake(libc_lock, portMAX_DELAY);
  assert(ret == pdTRUE);
34001fd8:	480a      	ldr	r0, [pc, #40]	@ (34002004 <__malloc_lock+0x40>)
34001fda:	f01d fd15 	bl	3401fa08 <__assert_func>
  ret = xSemaphoreTake(libc_lock, portMAX_DELAY);
34001fde:	4b0a      	ldr	r3, [pc, #40]	@ (34002008 <__malloc_lock+0x44>)
34001fe0:	f04f 31ff 	mov.w	r1, #4294967295
34001fe4:	6818      	ldr	r0, [r3, #0]
34001fe6:	f008 fbcb 	bl	3400a780 <xQueueSemaphoreTake>
  assert(ret == pdTRUE);
34001fea:	2801      	cmp	r0, #1
34001fec:	d003      	beq.n	34001ff6 <__malloc_lock+0x32>
34001fee:	2135      	movs	r1, #53	@ 0x35
34001ff0:	4b06      	ldr	r3, [pc, #24]	@ (3400200c <__malloc_lock+0x48>)
34001ff2:	4a03      	ldr	r2, [pc, #12]	@ (34002000 <__malloc_lock+0x3c>)
34001ff4:	e7f0      	b.n	34001fd8 <__malloc_lock+0x14>
}
34001ff6:	bd08      	pop	{r3, pc}
34001ff8:	340d0e40 	.word	0x340d0e40
34001ffc:	3402ae19 	.word	0x3402ae19
34002000:	34030db6 	.word	0x34030db6
34002004:	3402add2 	.word	0x3402add2
34002008:	340d0e3c 	.word	0x340d0e3c
3400200c:	3402ae28 	.word	0x3402ae28

34002010 <__malloc_unlock>:

void __malloc_unlock (struct _reent *reent)
{
34002010:	b508      	push	{r3, lr}
  int ret;

  if (!is_tx_rt_init_done)
34002012:	4b0c      	ldr	r3, [pc, #48]	@ (34002044 <__malloc_unlock+0x34>)
34002014:	681b      	ldr	r3, [r3, #0]
34002016:	b1a3      	cbz	r3, 34002042 <__malloc_unlock+0x32>
34002018:	f3ef 8305 	mrs	r3, IPSR
    return ;

  assert(is_tx_rt_init_done);
  assert(!IS_IRQ_MODE());
3400201c:	b12b      	cbz	r3, 3400202a <__malloc_unlock+0x1a>
3400201e:	2140      	movs	r1, #64	@ 0x40
34002020:	4b09      	ldr	r3, [pc, #36]	@ (34002048 <__malloc_unlock+0x38>)
34002022:	4a0a      	ldr	r2, [pc, #40]	@ (3400204c <__malloc_unlock+0x3c>)

  ret = xSemaphoreGive(libc_lock);
  assert(ret == pdTRUE);
34002024:	480a      	ldr	r0, [pc, #40]	@ (34002050 <__malloc_unlock+0x40>)
34002026:	f01d fcef 	bl	3401fa08 <__assert_func>
  ret = xSemaphoreGive(libc_lock);
3400202a:	480a      	ldr	r0, [pc, #40]	@ (34002054 <__malloc_unlock+0x44>)
3400202c:	461a      	mov	r2, r3
3400202e:	4619      	mov	r1, r3
34002030:	6800      	ldr	r0, [r0, #0]
34002032:	f008 fa01 	bl	3400a438 <xQueueGenericSend>
  assert(ret == pdTRUE);
34002036:	2801      	cmp	r0, #1
34002038:	d003      	beq.n	34002042 <__malloc_unlock+0x32>
3400203a:	2143      	movs	r1, #67	@ 0x43
3400203c:	4b06      	ldr	r3, [pc, #24]	@ (34002058 <__malloc_unlock+0x48>)
3400203e:	4a03      	ldr	r2, [pc, #12]	@ (3400204c <__malloc_unlock+0x3c>)
34002040:	e7f0      	b.n	34002024 <__malloc_unlock+0x14>
}
34002042:	bd08      	pop	{r3, pc}
34002044:	340d0e40 	.word	0x340d0e40
34002048:	3402ae19 	.word	0x3402ae19
3400204c:	34030da6 	.word	0x34030da6
34002050:	3402add2 	.word	0x3402add2
34002054:	340d0e3c 	.word	0x340d0e3c
34002058:	3402ae28 	.word	0x3402ae28

3400205c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
3400205c:	2001      	movs	r0, #1
3400205e:	4770      	bx	lr

34002060 <_kill>:

int _kill(int pid, int sig)
{
34002060:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
34002062:	f01f fdc3 	bl	34021bec <__errno>
34002066:	2316      	movs	r3, #22
34002068:	6003      	str	r3, [r0, #0]
  return -1;
}
3400206a:	f04f 30ff 	mov.w	r0, #4294967295
3400206e:	bd08      	pop	{r3, pc}

34002070 <_exit>:

void _exit (int status)
{
34002070:	b508      	push	{r3, lr}
  errno = EINVAL;
34002072:	f01f fdbb 	bl	34021bec <__errno>
34002076:	2316      	movs	r3, #22
34002078:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
3400207a:	e7fe      	b.n	3400207a <_exit+0xa>

3400207c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
3400207c:	b570      	push	{r4, r5, r6, lr}
3400207e:	460d      	mov	r5, r1
34002080:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34002082:	460e      	mov	r6, r1
34002084:	1b73      	subs	r3, r6, r5
34002086:	429c      	cmp	r4, r3
34002088:	dc01      	bgt.n	3400208e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
3400208a:	4620      	mov	r0, r4
3400208c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
3400208e:	f3af 8000 	nop.w
34002092:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
34002096:	e7f5      	b.n	34002084 <_read+0x8>

34002098 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
34002098:	f04f 30ff 	mov.w	r0, #4294967295
3400209c:	4770      	bx	lr

3400209e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
3400209e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
340020a2:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
340020a4:	604b      	str	r3, [r1, #4]
}
340020a6:	4770      	bx	lr

340020a8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
340020a8:	2001      	movs	r0, #1
340020aa:	4770      	bx	lr

340020ac <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
340020ac:	2000      	movs	r0, #0
340020ae:	4770      	bx	lr

340020b0 <mcu_cache_invalidate_range>:
  }
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr)
{
340020b0:	b530      	push	{r4, r5, lr}

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
340020b2:	4d13      	ldr	r5, [pc, #76]	@ (34002100 <mcu_cache_invalidate_range+0x50>)
340020b4:	696b      	ldr	r3, [r5, #20]
340020b6:	03db      	lsls	r3, r3, #15
340020b8:	d51f      	bpl.n	340020fa <mcu_cache_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
340020ba:	1a0a      	subs	r2, r1, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
340020bc:	2a00      	cmp	r2, #0
340020be:	dd1c      	ble.n	340020fa <mcu_cache_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
340020c0:	f000 031f 	and.w	r3, r0, #31
340020c4:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
340020c6:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
340020ca:	1884      	adds	r4, r0, r2
340020cc:	43c2      	mvns	r2, r0
340020ce:	1a1b      	subs	r3, r3, r0
340020d0:	440b      	add	r3, r1
340020d2:	4422      	add	r2, r4
340020d4:	3b20      	subs	r3, #32
340020d6:	0952      	lsrs	r2, r2, #5
340020d8:	3320      	adds	r3, #32
340020da:	f102 0e01 	add.w	lr, r2, #1
340020de:	bfd8      	it	le
340020e0:	f04f 0e01 	movle.w	lr, #1
340020e4:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
340020e8:	f8c5 025c 	str.w	r0, [r5, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
340020ec:	3020      	adds	r0, #32
      } while ( op_size > 0 );
340020ee:	f00f c805 	le	lr, 340020e8 <mcu_cache_invalidate_range+0x38>
340020f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340020f6:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
340020fa:	2000      	movs	r0, #0
340020fc:	bd30      	pop	{r4, r5, pc}
340020fe:	bf00      	nop
34002100:	e000ed00 	.word	0xe000ed00

34002104 <mcu_cache_clean_range>:

int mcu_cache_clean_range(uint32_t start_addr, uint32_t end_addr) {
34002104:	b530      	push	{r4, r5, lr}
34002106:	4d13      	ldr	r5, [pc, #76]	@ (34002154 <mcu_cache_clean_range+0x50>)
34002108:	696b      	ldr	r3, [r5, #20]
3400210a:	03db      	lsls	r3, r3, #15
3400210c:	d51f      	bpl.n	3400214e <mcu_cache_clean_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_CleanDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
3400210e:	1a0a      	subs	r2, r1, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34002110:	2a00      	cmp	r2, #0
34002112:	dd1c      	ble.n	3400214e <mcu_cache_clean_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34002114:	f000 031f 	and.w	r3, r0, #31
34002118:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3400211a:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
3400211e:	1884      	adds	r4, r0, r2
34002120:	43c2      	mvns	r2, r0
34002122:	1a1b      	subs	r3, r3, r0
34002124:	440b      	add	r3, r1
34002126:	4422      	add	r2, r4
34002128:	3b20      	subs	r3, #32
3400212a:	0952      	lsrs	r2, r2, #5
3400212c:	3320      	adds	r3, #32
3400212e:	f102 0e01 	add.w	lr, r2, #1
34002132:	bfd8      	it	le
34002134:	f04f 0e01 	movle.w	lr, #1
34002138:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3400213c:	f8c5 0268 	str.w	r0, [r5, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
34002140:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34002142:	f00f c805 	le	lr, 3400213c <mcu_cache_clean_range+0x38>
34002146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400214a:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
3400214e:	2000      	movs	r0, #0
34002150:	bd30      	pop	{r4, r5, pc}
34002152:	bf00      	nop
34002154:	e000ed00 	.word	0xe000ed00

34002158 <mcu_cache_clean_invalidate_range>:
 int mcu_cache_clean_invalidate_range(uint32_t start_addr, uint32_t end_addr) {
34002158:	b530      	push	{r4, r5, lr}
3400215a:	4d13      	ldr	r5, [pc, #76]	@ (340021a8 <mcu_cache_clean_invalidate_range+0x50>)
3400215c:	696b      	ldr	r3, [r5, #20]
3400215e:	03db      	lsls	r3, r3, #15
34002160:	d51f      	bpl.n	340021a2 <mcu_cache_clean_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_CleanInvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34002162:	1a0a      	subs	r2, r1, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34002164:	2a00      	cmp	r2, #0
34002166:	dd1c      	ble.n	340021a2 <mcu_cache_clean_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34002168:	f000 031f 	and.w	r3, r0, #31
3400216c:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3400216e:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
        op_size -=          __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34002172:	1884      	adds	r4, r0, r2
34002174:	43c2      	mvns	r2, r0
34002176:	1a1b      	subs	r3, r3, r0
34002178:	440b      	add	r3, r1
3400217a:	4422      	add	r2, r4
3400217c:	3b20      	subs	r3, #32
3400217e:	0952      	lsrs	r2, r2, #5
34002180:	3320      	adds	r3, #32
34002182:	f102 0e01 	add.w	lr, r2, #1
34002186:	bfd8      	it	le
34002188:	f04f 0e01 	movle.w	lr, #1
3400218c:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34002190:	f8c5 0270 	str.w	r0, [r5, #624]	@ 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
34002194:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34002196:	f00f c805 	le	lr, 34002190 <mcu_cache_clean_invalidate_range+0x38>
3400219a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400219e:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
340021a2:	2000      	movs	r0, #0
340021a4:	bd30      	pop	{r4, r5, pc}
340021a6:	bf00      	nop
340021a8:	e000ed00 	.word	0xe000ed00

340021ac <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
340021ac:	4802      	ldr	r0, [pc, #8]	@ (340021b8 <npu_cache_init+0xc>)
340021ae:	4b03      	ldr	r3, [pc, #12]	@ (340021bc <npu_cache_init+0x10>)
340021b0:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
340021b2:	f00d b90b 	b.w	3400f3cc <HAL_CACHEAXI_Init>
340021b6:	bf00      	nop
340021b8:	340d0e44 	.word	0x340d0e44
340021bc:	580dfc00 	.word	0x580dfc00

340021c0 <npu_cache_enable>:
}

void npu_cache_enable(void)
{
340021c0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
340021c2:	4c03      	ldr	r4, [pc, #12]	@ (340021d0 <npu_cache_enable+0x10>)
340021c4:	4620      	mov	r0, r4
340021c6:	f00d f8cd 	bl	3400f364 <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
340021ca:	2802      	cmp	r0, #2
340021cc:	d0fa      	beq.n	340021c4 <npu_cache_enable+0x4>
}
340021ce:	bd10      	pop	{r4, pc}
340021d0:	340d0e44 	.word	0x340d0e44

340021d4 <npu_cache_clean_invalidate_range>:
  HAL_CACHEAXI_CleanByAddr(&hcacheaxi_s, (uint32_t*)start_addr, end_addr-start_addr);
}

void npu_cache_clean_invalidate_range(uint32_t start_addr, uint32_t end_addr)
{
  HAL_CACHEAXI_CleanInvalidByAddr(&hcacheaxi_s, (uint32_t*)start_addr, end_addr-start_addr);
340021d4:	1a0a      	subs	r2, r1, r0
340021d6:	4601      	mov	r1, r0
340021d8:	4801      	ldr	r0, [pc, #4]	@ (340021e0 <npu_cache_clean_invalidate_range+0xc>)
340021da:	f00d b91b 	b.w	3400f414 <HAL_CACHEAXI_CleanInvalidByAddr>
340021de:	bf00      	nop
340021e0:	340d0e44 	.word	0x340d0e44

340021e4 <ec_get_blob_ptr>:
 * \return the pointer to the blob contained in the Epoch Controller binary pointed by \e binary_ptr, or \e NULL on
 * errors
 */

const uint64_t *ec_get_blob_ptr(const uint8_t *binary_ptr)
{
340021e4:	b508      	push	{r3, lr}

  magic = *((ECFileEntry *)ptr);

  ptr += sizeof(ECFileEntry);

  if (magic != ECASM_BINARY_MAGIC)
340021e6:	6802      	ldr	r2, [r0, #0]
340021e8:	4b06      	ldr	r3, [pc, #24]	@ (34002204 <ec_get_blob_ptr+0x20>)
340021ea:	429a      	cmp	r2, r3
340021ec:	d004      	beq.n	340021f8 <ec_get_blob_ptr+0x14>
  {
    LL_ATON_PRINTF("Error: Epoch Controller binary is invalid\n");
340021ee:	4806      	ldr	r0, [pc, #24]	@ (34002208 <ec_get_blob_ptr+0x24>)

  ptr += sizeof(ECFileEntry);

  if (blob_offset == 0)
  {
    LL_ATON_PRINTF("Error: Blob section offset in blob binary is invalid\n");
340021f0:	f01f f924 	bl	3402143c <puts>
    return NULL;
340021f4:	2000      	movs	r0, #0

    return NULL;
  }

  return (const uint64_t *)(binary_ptr + blob_offset);
}
340021f6:	bd08      	pop	{r3, pc}
  blob_offset = *((ECFileEntry *)ptr);
340021f8:	6903      	ldr	r3, [r0, #16]
  return (const uint64_t *)(binary_ptr + blob_offset);
340021fa:	4418      	add	r0, r3
  if (blob_offset == 0)
340021fc:	2b00      	cmp	r3, #0
340021fe:	d1fa      	bne.n	340021f6 <ec_get_blob_ptr+0x12>
    LL_ATON_PRINTF("Error: Blob section offset in blob binary is invalid\n");
34002200:	4802      	ldr	r0, [pc, #8]	@ (3400220c <ec_get_blob_ptr+0x28>)
34002202:	e7f5      	b.n	340021f0 <ec_get_blob_ptr+0xc>
34002204:	ecbf0030 	.word	0xecbf0030
34002208:	3402ae36 	.word	0x3402ae36
3400220c:	3402ae60 	.word	0x3402ae60

34002210 <ec_copy_blob>:
 * \retval \e true  on success
 * \retval \e false otherwise
 */

bool ec_copy_blob(ECInstr *blob, const uint8_t *binary_ptr, unsigned int *blob_size)
{
34002210:	b570      	push	{r4, r5, r6, lr}
34002212:	4604      	mov	r4, r0
  const uint8_t *ptr = (const uint8_t *)ec_get_blob_ptr(binary_ptr);
34002214:	4608      	mov	r0, r1
{
34002216:	4615      	mov	r5, r2
  const uint8_t *ptr = (const uint8_t *)ec_get_blob_ptr(binary_ptr);
34002218:	f7ff ffe4 	bl	340021e4 <ec_get_blob_ptr>

  if (ptr == NULL)
3400221c:	b130      	cbz	r0, 3400222c <ec_copy_blob+0x1c>

  blob_magic = *((ECInstr *)ptr);

  ptr += sizeof(ECInstr);

  if (blob_magic != ECASM_BLOB_MAGIC)
3400221e:	6806      	ldr	r6, [r0, #0]
34002220:	4b13      	ldr	r3, [pc, #76]	@ (34002270 <ec_copy_blob+0x60>)
34002222:	429e      	cmp	r6, r3
34002224:	d004      	beq.n	34002230 <ec_copy_blob+0x20>
  {
    LL_ATON_PRINTF("Error: Invalid magic number of Epoch Controller blob\n");
34002226:	4813      	ldr	r0, [pc, #76]	@ (34002274 <ec_copy_blob+0x64>)
34002228:	f01f f908 	bl	3402143c <puts>
    return false;
3400222c:	2000      	movs	r0, #0

    memcpy((uint8_t *)(blob + 2), ptr, size * sizeof(ECInstr));
  }

  return true;
}
3400222e:	bd70      	pop	{r4, r5, r6, pc}
  size = *((ECInstr *)ptr);
34002230:	6843      	ldr	r3, [r0, #4]
  if (blob == NULL)
34002232:	b924      	cbnz	r4, 3400223e <ec_copy_blob+0x2e>
    if (blob_size != NULL)
34002234:	b10d      	cbz	r5, 3400223a <ec_copy_blob+0x2a>
      *blob_size = size + 2;
34002236:	3302      	adds	r3, #2
34002238:	602b      	str	r3, [r5, #0]
  return true;
3400223a:	2001      	movs	r0, #1
3400223c:	e7f7      	b.n	3400222e <ec_copy_blob+0x1e>
    if ((((intptr_t)blob) % 8) != 0)
3400223e:	0762      	lsls	r2, r4, #29
34002240:	d001      	beq.n	34002246 <ec_copy_blob+0x36>
      LL_ATON_PRINTF("Error: Memory allocated for the Epoch Controller blob must be 8-byte aligned\n");
34002242:	480d      	ldr	r0, [pc, #52]	@ (34002278 <ec_copy_blob+0x68>)
34002244:	e7f0      	b.n	34002228 <ec_copy_blob+0x18>
    if (blob_size == NULL)
34002246:	b90d      	cbnz	r5, 3400224c <ec_copy_blob+0x3c>
      LL_ATON_PRINTF("Error: Size of memory allocated for the Epoch Controller blob has not been specified\n");
34002248:	480c      	ldr	r0, [pc, #48]	@ (3400227c <ec_copy_blob+0x6c>)
3400224a:	e7ed      	b.n	34002228 <ec_copy_blob+0x18>
    if (*blob_size < (size + 2))
3400224c:	682a      	ldr	r2, [r5, #0]
3400224e:	1c99      	adds	r1, r3, #2
34002250:	428a      	cmp	r2, r1
34002252:	d203      	bcs.n	3400225c <ec_copy_blob+0x4c>
      LL_ATON_PRINTF(
34002254:	480a      	ldr	r0, [pc, #40]	@ (34002280 <ec_copy_blob+0x70>)
34002256:	f01f f889 	bl	3402136c <iprintf>
      return false;
3400225a:	e7e7      	b.n	3400222c <ec_copy_blob+0x1c>
    memcpy((uint8_t *)(blob + 2), ptr, size * sizeof(ECInstr));
3400225c:	f100 0108 	add.w	r1, r0, #8
    blob[1] = size;
34002260:	e9c4 6300 	strd	r6, r3, [r4]
    memcpy((uint8_t *)(blob + 2), ptr, size * sizeof(ECInstr));
34002264:	009a      	lsls	r2, r3, #2
34002266:	f104 0008 	add.w	r0, r4, #8
3400226a:	f01f fd02 	bl	34021c72 <memcpy>
3400226e:	e7e4      	b.n	3400223a <ec_copy_blob+0x2a>
34002270:	ca057a7a 	.word	0xca057a7a
34002274:	3402ae95 	.word	0x3402ae95
34002278:	3402aeca 	.word	0x3402aeca
3400227c:	3402af17 	.word	0x3402af17
34002280:	3402af6c 	.word	0x3402af6c

34002284 <ec_reloc>:
 * \retval \e true  on success
 * \retval \e false otherwise
 */

bool ec_reloc(const ECFileEntry *reloc_table_ptr, ECInstr *blob, unsigned int idx, ECAddr base, ECAddr *prev_base)
{
34002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34002286:	9d06      	ldr	r5, [sp, #24]
34002288:	460c      	mov	r4, r1
  if (reloc_table_ptr == NULL)
3400228a:	b920      	cbnz	r0, 34002296 <ec_reloc+0x12>
  {
    LL_ATON_PRINTF("Error: Cannot relocate because the pointer to the Epoch Controller relocation table is invalid\n");
3400228c:	4815      	ldr	r0, [pc, #84]	@ (340022e4 <ec_reloc+0x60>)
3400228e:	f01f f8d5 	bl	3402143c <puts>

    return false;
34002292:	2000      	movs	r0, #0
34002294:	e007      	b.n	340022a6 <ec_reloc+0x22>
  }

  if (base == *prev_base)
34002296:	6829      	ldr	r1, [r5, #0]
34002298:	4299      	cmp	r1, r3
3400229a:	d003      	beq.n	340022a4 <ec_reloc+0x20>

  const ECFileEntry *ptr = reloc_table_ptr;

  ECFileEntry size = *ptr;

  if (idx < size)
3400229c:	6801      	ldr	r1, [r0, #0]
3400229e:	4291      	cmp	r1, r2
340022a0:	d802      	bhi.n	340022a8 <ec_reloc+0x24>
      // following the magic number of the EC blob and its size)
      blob[offset + 2] += base - *prev_base;
    }
  }

  *prev_base = base;
340022a2:	602b      	str	r3, [r5, #0]
    return true;
340022a4:	2001      	movs	r0, #1

  return true;
}
340022a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ptr = reloc_table_ptr + 3 * idx + 2;
340022a8:	210c      	movs	r1, #12
340022aa:	434a      	muls	r2, r1
340022ac:	3208      	adds	r2, #8
340022ae:	1881      	adds	r1, r0, r2
    ECFileEntry offset = *ptr;
340022b0:	6849      	ldr	r1, [r1, #4]
    ECFileEntry num = *ptr++;
340022b2:	5882      	ldr	r2, [r0, r2]
    if ((offset % sizeof(ECFileEntry)) != 0)
340022b4:	f011 0603 	ands.w	r6, r1, #3
340022b8:	d003      	beq.n	340022c2 <ec_reloc+0x3e>
      LL_ATON_PRINTF("Error: Offset %lu in Epoch Controller binary is invalid\n", (unsigned long)offset);
340022ba:	480b      	ldr	r0, [pc, #44]	@ (340022e8 <ec_reloc+0x64>)
340022bc:	f01f f856 	bl	3402136c <iprintf>
      return false;
340022c0:	e7e7      	b.n	34002292 <ec_reloc+0xe>
    ptr = (const ECFileEntry *)((const uint8_t *)reloc_table_ptr + offset);
340022c2:	4408      	add	r0, r1
340022c4:	3201      	adds	r2, #1
    for (unsigned int i = 0; i < num; i++)
340022c6:	3a01      	subs	r2, #1
340022c8:	d0eb      	beq.n	340022a2 <ec_reloc+0x1e>
      blob[offset + 2] += base - *prev_base;
340022ca:	f850 1026 	ldr.w	r1, [r0, r6, lsl #2]
340022ce:	682f      	ldr	r7, [r5, #0]
340022d0:	3102      	adds	r1, #2
340022d2:	eba3 0c07 	sub.w	ip, r3, r7
340022d6:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
    for (unsigned int i = 0; i < num; i++)
340022da:	3601      	adds	r6, #1
      blob[offset + 2] += base - *prev_base;
340022dc:	4467      	add	r7, ip
340022de:	f844 7021 	str.w	r7, [r4, r1, lsl #2]
    for (unsigned int i = 0; i < num; i++)
340022e2:	e7f0      	b.n	340022c6 <ec_reloc+0x42>
340022e4:	3402b016 	.word	0x3402b016
340022e8:	3402b075 	.word	0x3402b075

340022ec <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
340022ec:	b510      	push	{r4, lr}
  if (done != 0)
340022ee:	4ba3      	ldr	r3, [pc, #652]	@ (3400257c <LL_ATON_Init+0x290>)
{
340022f0:	b088      	sub	sp, #32
  if (done != 0)
340022f2:	781a      	ldrb	r2, [r3, #0]
340022f4:	b90a      	cbnz	r2, 340022fa <LL_ATON_Init+0xe>
  done = 1;
340022f6:	2201      	movs	r2, #1
340022f8:	701a      	strb	r2, [r3, #0]
  int i;

  ll_aton_static_checks();

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
340022fa:	4ba1      	ldr	r3, [pc, #644]	@ (34002580 <LL_ATON_Init+0x294>)
340022fc:	681a      	ldr	r2, [r3, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
340022fe:	f042 0202 	orr.w	r2, r2, #2
  ATON_CLKCTRL_CTRL_SET(0, t);
34002302:	601a      	str	r2, [r3, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
34002304:	2201      	movs	r2, #1
34002306:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
34002308:	f04f 32ff 	mov.w	r2, #4294967295
3400230c:	609a      	str	r2, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
3400230e:	60da      	str	r2, [r3, #12]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
34002310:	2200      	movs	r2, #0
34002312:	611a      	str	r2, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
34002314:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
34002318:	685c      	ldr	r4, [r3, #4]
3400231a:	2c00      	cmp	r4, #0
3400231c:	d0fc      	beq.n	34002318 <LL_ATON_Init+0x2c>
3400231e:	f245 0301 	movw	r3, #20481	@ 0x5001
34002322:	b2a2      	uxth	r2, r4
34002324:	429a      	cmp	r2, r3
34002326:	f040 8092 	bne.w	3400244e <LL_ATON_Init+0x162>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400232a:	4b96      	ldr	r3, [pc, #600]	@ (34002584 <LL_ATON_Init+0x298>)
3400232c:	685c      	ldr	r4, [r3, #4]
3400232e:	2c00      	cmp	r4, #0
34002330:	d0fc      	beq.n	3400232c <LL_ATON_Init+0x40>
34002332:	f245 1317 	movw	r3, #20759	@ 0x5117
34002336:	b2a2      	uxth	r2, r4
34002338:	429a      	cmp	r2, r3
3400233a:	f040 80b0 	bne.w	3400249e <LL_ATON_Init+0x1b2>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400233e:	4b92      	ldr	r3, [pc, #584]	@ (34002588 <LL_ATON_Init+0x29c>)
34002340:	685c      	ldr	r4, [r3, #4]
34002342:	2c00      	cmp	r4, #0
34002344:	d0fc      	beq.n	34002340 <LL_ATON_Init+0x54>
34002346:	f241 131c 	movw	r3, #4380	@ 0x111c
3400234a:	b2a2      	uxth	r2, r4
3400234c:	429a      	cmp	r2, r3
3400234e:	f040 80cc 	bne.w	340024ea <LL_ATON_Init+0x1fe>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
34002352:	4b8e      	ldr	r3, [pc, #568]	@ (3400258c <LL_ATON_Init+0x2a0>)
34002354:	685c      	ldr	r4, [r3, #4]
34002356:	2c00      	cmp	r4, #0
34002358:	d0fc      	beq.n	34002354 <LL_ATON_Init+0x68>
3400235a:	f241 031a 	movw	r3, #4122	@ 0x101a
3400235e:	b2a2      	uxth	r2, r4
34002360:	429a      	cmp	r2, r3
34002362:	f040 80e6 	bne.w	34002532 <LL_ATON_Init+0x246>
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
34002366:	4b8a      	ldr	r3, [pc, #552]	@ (34002590 <LL_ATON_Init+0x2a4>)
34002368:	685c      	ldr	r4, [r3, #4]
3400236a:	2c00      	cmp	r4, #0
3400236c:	d0fc      	beq.n	34002368 <LL_ATON_Init+0x7c>
3400236e:	f241 131b 	movw	r3, #4379	@ 0x111b
34002372:	b2a2      	uxth	r2, r4
34002374:	429a      	cmp	r2, r3
34002376:	f040 812d 	bne.w	340025d4 <LL_ATON_Init+0x2e8>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400237a:	4b86      	ldr	r3, [pc, #536]	@ (34002594 <LL_ATON_Init+0x2a8>)
3400237c:	685c      	ldr	r4, [r3, #4]
3400237e:	2c00      	cmp	r4, #0
34002380:	d0fc      	beq.n	3400237c <LL_ATON_Init+0x90>
34002382:	f641 2319 	movw	r3, #6681	@ 0x1a19
34002386:	b2a2      	uxth	r2, r4
34002388:	429a      	cmp	r2, r3
3400238a:	f040 8147 	bne.w	3400261c <LL_ATON_Init+0x330>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400238e:	4b82      	ldr	r3, [pc, #520]	@ (34002598 <LL_ATON_Init+0x2ac>)
34002390:	685c      	ldr	r4, [r3, #4]
34002392:	2c00      	cmp	r4, #0
34002394:	d0fc      	beq.n	34002390 <LL_ATON_Init+0xa4>
34002396:	f241 1321 	movw	r3, #4385	@ 0x1121
3400239a:	b2a2      	uxth	r2, r4
3400239c:	429a      	cmp	r2, r3
3400239e:	f040 8162 	bne.w	34002666 <LL_ATON_Init+0x37a>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
340023a2:	4b7e      	ldr	r3, [pc, #504]	@ (3400259c <LL_ATON_Init+0x2b0>)
340023a4:	685c      	ldr	r4, [r3, #4]
340023a6:	2c00      	cmp	r4, #0
340023a8:	d0fc      	beq.n	340023a4 <LL_ATON_Init+0xb8>
340023aa:	f243 2320 	movw	r3, #12832	@ 0x3220
340023ae:	b2a2      	uxth	r2, r4
340023b0:	429a      	cmp	r2, r3
340023b2:	f040 817c 	bne.w	340026ae <LL_ATON_Init+0x3c2>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
340023b6:	4b72      	ldr	r3, [pc, #456]	@ (34002580 <LL_ATON_Init+0x294>)
340023b8:	685c      	ldr	r4, [r3, #4]
340023ba:	2c00      	cmp	r4, #0
340023bc:	d0fc      	beq.n	340023b8 <LL_ATON_Init+0xcc>
340023be:	f241 231f 	movw	r3, #4639	@ 0x121f
340023c2:	b2a2      	uxth	r2, r4
340023c4:	429a      	cmp	r2, r3
340023c6:	f040 8198 	bne.w	340026fa <LL_ATON_Init+0x40e>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
340023ca:	4b75      	ldr	r3, [pc, #468]	@ (340025a0 <LL_ATON_Init+0x2b4>)
340023cc:	685c      	ldr	r4, [r3, #4]
340023ce:	2c00      	cmp	r4, #0
340023d0:	d0fc      	beq.n	340023cc <LL_ATON_Init+0xe0>
340023d2:	f241 131e 	movw	r3, #4382	@ 0x111e
340023d6:	b2a2      	uxth	r2, r4
340023d8:	429a      	cmp	r2, r3
340023da:	f040 81b4 	bne.w	34002746 <LL_ATON_Init+0x45a>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
340023de:	4b71      	ldr	r3, [pc, #452]	@ (340025a4 <LL_ATON_Init+0x2b8>)
340023e0:	685c      	ldr	r4, [r3, #4]
340023e2:	2c00      	cmp	r4, #0
340023e4:	d0fc      	beq.n	340023e0 <LL_ATON_Init+0xf4>
340023e6:	b2a3      	uxth	r3, r4
340023e8:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
340023ec:	f040 81cf 	bne.w	3400278e <LL_ATON_Init+0x4a2>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
340023f0:	4a6d      	ldr	r2, [pc, #436]	@ (340025a8 <LL_ATON_Init+0x2bc>)
340023f2:	6854      	ldr	r4, [r2, #4]
340023f4:	2c00      	cmp	r4, #0
340023f6:	d0fc      	beq.n	340023f2 <LL_ATON_Init+0x106>
340023f8:	f245 031d 	movw	r3, #20509	@ 0x501d
340023fc:	b2a1      	uxth	r1, r4
340023fe:	4299      	cmp	r1, r3
34002400:	f000 81ec 	beq.w	340027dc <LL_ATON_Init+0x4f0>
34002404:	f01f fbf2 	bl	34021bec <__errno>
34002408:	6803      	ldr	r3, [r0, #0]
3400240a:	2b00      	cmp	r3, #0
3400240c:	f000 81e4 	beq.w	340027d8 <LL_ATON_Init+0x4ec>
34002410:	f01f fbec 	bl	34021bec <__errno>
34002414:	6800      	ldr	r0, [r0, #0]
34002416:	f01f fb6b 	bl	34021af0 <strerror>
3400241a:	4603      	mov	r3, r0
3400241c:	2205      	movs	r2, #5
3400241e:	2100      	movs	r1, #0
34002420:	e9cd 2105 	strd	r2, r1, [sp, #20]
34002424:	221d      	movs	r2, #29
34002426:	9204      	str	r2, [sp, #16]
34002428:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400242c:	9203      	str	r2, [sp, #12]
3400242e:	f3c4 3203 	ubfx	r2, r4, #12, #4
34002432:	9202      	str	r2, [sp, #8]
34002434:	4a5d      	ldr	r2, [pc, #372]	@ (340025ac <LL_ATON_Init+0x2c0>)
34002436:	b2e4      	uxtb	r4, r4
34002438:	495d      	ldr	r1, [pc, #372]	@ (340025b0 <LL_ATON_Init+0x2c4>)
3400243a:	9200      	str	r2, [sp, #0]
3400243c:	485d      	ldr	r0, [pc, #372]	@ (340025b4 <LL_ATON_Init+0x2c8>)
3400243e:	22fb      	movs	r2, #251	@ 0xfb
34002440:	9401      	str	r4, [sp, #4]
34002442:	f01e ff93 	bl	3402136c <iprintf>
34002446:	21fb      	movs	r1, #251	@ 0xfb
34002448:	4b5b      	ldr	r3, [pc, #364]	@ (340025b8 <LL_ATON_Init+0x2cc>)
3400244a:	4a5c      	ldr	r2, [pc, #368]	@ (340025bc <LL_ATON_Init+0x2d0>)
3400244c:	e022      	b.n	34002494 <LL_ATON_Init+0x1a8>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400244e:	f01f fbcd 	bl	34021bec <__errno>
34002452:	6803      	ldr	r3, [r0, #0]
34002454:	b30b      	cbz	r3, 3400249a <LL_ATON_Init+0x1ae>
34002456:	f01f fbc9 	bl	34021bec <__errno>
3400245a:	6800      	ldr	r0, [r0, #0]
3400245c:	f01f fb48 	bl	34021af0 <strerror>
34002460:	4603      	mov	r3, r0
34002462:	2205      	movs	r2, #5
34002464:	f04f 0e00 	mov.w	lr, #0
34002468:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400246c:	2201      	movs	r2, #1
3400246e:	9204      	str	r2, [sp, #16]
34002470:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002474:	9203      	str	r2, [sp, #12]
34002476:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400247a:	9202      	str	r2, [sp, #8]
3400247c:	4a50      	ldr	r2, [pc, #320]	@ (340025c0 <LL_ATON_Init+0x2d4>)
3400247e:	b2e4      	uxtb	r4, r4
34002480:	494b      	ldr	r1, [pc, #300]	@ (340025b0 <LL_ATON_Init+0x2c4>)
34002482:	9200      	str	r2, [sp, #0]
34002484:	484b      	ldr	r0, [pc, #300]	@ (340025b4 <LL_ATON_Init+0x2c8>)
34002486:	22c7      	movs	r2, #199	@ 0xc7
34002488:	9401      	str	r4, [sp, #4]
3400248a:	f01e ff6f 	bl	3402136c <iprintf>
3400248e:	21c7      	movs	r1, #199	@ 0xc7
34002490:	4b49      	ldr	r3, [pc, #292]	@ (340025b8 <LL_ATON_Init+0x2cc>)
34002492:	4a4a      	ldr	r2, [pc, #296]	@ (340025bc <LL_ATON_Init+0x2d0>)
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
34002494:	4846      	ldr	r0, [pc, #280]	@ (340025b0 <LL_ATON_Init+0x2c4>)
34002496:	f01d fab7 	bl	3401fa08 <__assert_func>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400249a:	4b4a      	ldr	r3, [pc, #296]	@ (340025c4 <LL_ATON_Init+0x2d8>)
3400249c:	e7e1      	b.n	34002462 <LL_ATON_Init+0x176>
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400249e:	f01f fba5 	bl	34021bec <__errno>
340024a2:	6803      	ldr	r3, [r0, #0]
340024a4:	b1fb      	cbz	r3, 340024e6 <LL_ATON_Init+0x1fa>
340024a6:	f01f fba1 	bl	34021bec <__errno>
340024aa:	6800      	ldr	r0, [r0, #0]
340024ac:	f01f fb20 	bl	34021af0 <strerror>
340024b0:	4603      	mov	r3, r0
340024b2:	2205      	movs	r2, #5
340024b4:	f04f 0c01 	mov.w	ip, #1
340024b8:	e9cd 2c05 	strd	r2, ip, [sp, #20]
340024bc:	2217      	movs	r2, #23
340024be:	9204      	str	r2, [sp, #16]
340024c0:	f3c4 2203 	ubfx	r2, r4, #8, #4
340024c4:	9203      	str	r2, [sp, #12]
340024c6:	f3c4 3203 	ubfx	r2, r4, #12, #4
340024ca:	9202      	str	r2, [sp, #8]
340024cc:	4a3e      	ldr	r2, [pc, #248]	@ (340025c8 <LL_ATON_Init+0x2dc>)
340024ce:	b2e4      	uxtb	r4, r4
340024d0:	4937      	ldr	r1, [pc, #220]	@ (340025b0 <LL_ATON_Init+0x2c4>)
340024d2:	9200      	str	r2, [sp, #0]
340024d4:	4837      	ldr	r0, [pc, #220]	@ (340025b4 <LL_ATON_Init+0x2c8>)
340024d6:	22ca      	movs	r2, #202	@ 0xca
340024d8:	9401      	str	r4, [sp, #4]
340024da:	f01e ff47 	bl	3402136c <iprintf>
340024de:	21ca      	movs	r1, #202	@ 0xca
340024e0:	4b35      	ldr	r3, [pc, #212]	@ (340025b8 <LL_ATON_Init+0x2cc>)
340024e2:	4a36      	ldr	r2, [pc, #216]	@ (340025bc <LL_ATON_Init+0x2d0>)
340024e4:	e7d6      	b.n	34002494 <LL_ATON_Init+0x1a8>
340024e6:	4b37      	ldr	r3, [pc, #220]	@ (340025c4 <LL_ATON_Init+0x2d8>)
340024e8:	e7e3      	b.n	340024b2 <LL_ATON_Init+0x1c6>
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
340024ea:	f01f fb7f 	bl	34021bec <__errno>
340024ee:	6803      	ldr	r3, [r0, #0]
340024f0:	b1eb      	cbz	r3, 3400252e <LL_ATON_Init+0x242>
340024f2:	f01f fb7b 	bl	34021bec <__errno>
340024f6:	6800      	ldr	r0, [r0, #0]
340024f8:	f01f fafa 	bl	34021af0 <strerror>
340024fc:	4603      	mov	r3, r0
340024fe:	2201      	movs	r2, #1
34002500:	e9cd 2205 	strd	r2, r2, [sp, #20]
34002504:	221c      	movs	r2, #28
34002506:	9204      	str	r2, [sp, #16]
34002508:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400250c:	9203      	str	r2, [sp, #12]
3400250e:	f3c4 3203 	ubfx	r2, r4, #12, #4
34002512:	9202      	str	r2, [sp, #8]
34002514:	4a2d      	ldr	r2, [pc, #180]	@ (340025cc <LL_ATON_Init+0x2e0>)
34002516:	b2e4      	uxtb	r4, r4
34002518:	4925      	ldr	r1, [pc, #148]	@ (340025b0 <LL_ATON_Init+0x2c4>)
3400251a:	9200      	str	r2, [sp, #0]
3400251c:	4825      	ldr	r0, [pc, #148]	@ (340025b4 <LL_ATON_Init+0x2c8>)
3400251e:	22ce      	movs	r2, #206	@ 0xce
34002520:	9401      	str	r4, [sp, #4]
34002522:	f01e ff23 	bl	3402136c <iprintf>
34002526:	21ce      	movs	r1, #206	@ 0xce
34002528:	4b23      	ldr	r3, [pc, #140]	@ (340025b8 <LL_ATON_Init+0x2cc>)
3400252a:	4a24      	ldr	r2, [pc, #144]	@ (340025bc <LL_ATON_Init+0x2d0>)
3400252c:	e7b2      	b.n	34002494 <LL_ATON_Init+0x1a8>
3400252e:	4b25      	ldr	r3, [pc, #148]	@ (340025c4 <LL_ATON_Init+0x2d8>)
34002530:	e7e5      	b.n	340024fe <LL_ATON_Init+0x212>
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
34002532:	f01f fb5b 	bl	34021bec <__errno>
34002536:	6803      	ldr	r3, [r0, #0]
34002538:	b1f3      	cbz	r3, 34002578 <LL_ATON_Init+0x28c>
3400253a:	f01f fb57 	bl	34021bec <__errno>
3400253e:	6800      	ldr	r0, [r0, #0]
34002540:	f01f fad6 	bl	34021af0 <strerror>
34002544:	4603      	mov	r3, r0
34002546:	2201      	movs	r2, #1
34002548:	2000      	movs	r0, #0
3400254a:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400254e:	221a      	movs	r2, #26
34002550:	9204      	str	r2, [sp, #16]
34002552:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002556:	9203      	str	r2, [sp, #12]
34002558:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400255c:	9202      	str	r2, [sp, #8]
3400255e:	4a1c      	ldr	r2, [pc, #112]	@ (340025d0 <LL_ATON_Init+0x2e4>)
34002560:	b2e4      	uxtb	r4, r4
34002562:	4913      	ldr	r1, [pc, #76]	@ (340025b0 <LL_ATON_Init+0x2c4>)
34002564:	9200      	str	r2, [sp, #0]
34002566:	4813      	ldr	r0, [pc, #76]	@ (340025b4 <LL_ATON_Init+0x2c8>)
34002568:	22d2      	movs	r2, #210	@ 0xd2
3400256a:	9401      	str	r4, [sp, #4]
3400256c:	f01e fefe 	bl	3402136c <iprintf>
34002570:	21d2      	movs	r1, #210	@ 0xd2
34002572:	4b11      	ldr	r3, [pc, #68]	@ (340025b8 <LL_ATON_Init+0x2cc>)
34002574:	4a11      	ldr	r2, [pc, #68]	@ (340025bc <LL_ATON_Init+0x2d0>)
34002576:	e78d      	b.n	34002494 <LL_ATON_Init+0x1a8>
34002578:	4b12      	ldr	r3, [pc, #72]	@ (340025c4 <LL_ATON_Init+0x2d8>)
3400257a:	e7e4      	b.n	34002546 <LL_ATON_Init+0x25a>
3400257c:	340d0e50 	.word	0x340d0e50
34002580:	580e0000 	.word	0x580e0000
34002584:	580ef000 	.word	0x580ef000
34002588:	580fb000 	.word	0x580fb000
3400258c:	580f7000 	.word	0x580f7000
34002590:	580f5000 	.word	0x580f5000
34002594:	580f3000 	.word	0x580f3000
34002598:	580fe000 	.word	0x580fe000
3400259c:	580fd000 	.word	0x580fd000
340025a0:	580e1000 	.word	0x580e1000
340025a4:	580e4000 	.word	0x580e4000
340025a8:	580e2000 	.word	0x580e2000
340025ac:	3402b1bc 	.word	0x3402b1bc
340025b0:	3402b0b3 	.word	0x3402b0b3
340025b4:	3402b107 	.word	0x3402b107
340025b8:	3402b7cd 	.word	0x3402b7cd
340025bc:	34030e01 	.word	0x34030e01
340025c0:	3402b16b 	.word	0x3402b16b
340025c4:	3402b0ae 	.word	0x3402b0ae
340025c8:	3402b172 	.word	0x3402b172
340025cc:	3402b17a 	.word	0x3402b17a
340025d0:	3402b17f 	.word	0x3402b17f
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
340025d4:	f01f fb0a 	bl	34021bec <__errno>
340025d8:	6803      	ldr	r3, [r0, #0]
340025da:	b1eb      	cbz	r3, 34002618 <LL_ATON_Init+0x32c>
340025dc:	f01f fb06 	bl	34021bec <__errno>
340025e0:	6800      	ldr	r0, [r0, #0]
340025e2:	f01f fa85 	bl	34021af0 <strerror>
340025e6:	4603      	mov	r3, r0
340025e8:	2201      	movs	r2, #1
340025ea:	e9cd 2205 	strd	r2, r2, [sp, #20]
340025ee:	221b      	movs	r2, #27
340025f0:	9204      	str	r2, [sp, #16]
340025f2:	f3c4 2203 	ubfx	r2, r4, #8, #4
340025f6:	9203      	str	r2, [sp, #12]
340025f8:	f3c4 3203 	ubfx	r2, r4, #12, #4
340025fc:	9202      	str	r2, [sp, #8]
340025fe:	4a7c      	ldr	r2, [pc, #496]	@ (340027f0 <LL_ATON_Init+0x504>)
34002600:	b2e4      	uxtb	r4, r4
34002602:	497c      	ldr	r1, [pc, #496]	@ (340027f4 <LL_ATON_Init+0x508>)
34002604:	9200      	str	r2, [sp, #0]
34002606:	487c      	ldr	r0, [pc, #496]	@ (340027f8 <LL_ATON_Init+0x50c>)
34002608:	22d6      	movs	r2, #214	@ 0xd6
3400260a:	9401      	str	r4, [sp, #4]
3400260c:	f01e feae 	bl	3402136c <iprintf>
34002610:	21d6      	movs	r1, #214	@ 0xd6
34002612:	4b7a      	ldr	r3, [pc, #488]	@ (340027fc <LL_ATON_Init+0x510>)
34002614:	4a7a      	ldr	r2, [pc, #488]	@ (34002800 <LL_ATON_Init+0x514>)
34002616:	e73d      	b.n	34002494 <LL_ATON_Init+0x1a8>
34002618:	4b7a      	ldr	r3, [pc, #488]	@ (34002804 <LL_ATON_Init+0x518>)
3400261a:	e7e5      	b.n	340025e8 <LL_ATON_Init+0x2fc>
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400261c:	f01f fae6 	bl	34021bec <__errno>
34002620:	6803      	ldr	r3, [r0, #0]
34002622:	b1f3      	cbz	r3, 34002662 <LL_ATON_Init+0x376>
34002624:	f01f fae2 	bl	34021bec <__errno>
34002628:	6800      	ldr	r0, [r0, #0]
3400262a:	f01f fa61 	bl	34021af0 <strerror>
3400262e:	4603      	mov	r3, r0
34002630:	2201      	movs	r2, #1
34002632:	210a      	movs	r1, #10
34002634:	e9cd 2105 	strd	r2, r1, [sp, #20]
34002638:	2219      	movs	r2, #25
3400263a:	9204      	str	r2, [sp, #16]
3400263c:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002640:	9203      	str	r2, [sp, #12]
34002642:	f3c4 3203 	ubfx	r2, r4, #12, #4
34002646:	9202      	str	r2, [sp, #8]
34002648:	4a6f      	ldr	r2, [pc, #444]	@ (34002808 <LL_ATON_Init+0x51c>)
3400264a:	b2e4      	uxtb	r4, r4
3400264c:	4969      	ldr	r1, [pc, #420]	@ (340027f4 <LL_ATON_Init+0x508>)
3400264e:	9200      	str	r2, [sp, #0]
34002650:	4869      	ldr	r0, [pc, #420]	@ (340027f8 <LL_ATON_Init+0x50c>)
34002652:	22da      	movs	r2, #218	@ 0xda
34002654:	9401      	str	r4, [sp, #4]
34002656:	f01e fe89 	bl	3402136c <iprintf>
3400265a:	21da      	movs	r1, #218	@ 0xda
3400265c:	4b67      	ldr	r3, [pc, #412]	@ (340027fc <LL_ATON_Init+0x510>)
3400265e:	4a68      	ldr	r2, [pc, #416]	@ (34002800 <LL_ATON_Init+0x514>)
34002660:	e718      	b.n	34002494 <LL_ATON_Init+0x1a8>
34002662:	4b68      	ldr	r3, [pc, #416]	@ (34002804 <LL_ATON_Init+0x518>)
34002664:	e7e4      	b.n	34002630 <LL_ATON_Init+0x344>
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
34002666:	f01f fac1 	bl	34021bec <__errno>
3400266a:	6803      	ldr	r3, [r0, #0]
3400266c:	b1eb      	cbz	r3, 340026aa <LL_ATON_Init+0x3be>
3400266e:	f01f fabd 	bl	34021bec <__errno>
34002672:	6800      	ldr	r0, [r0, #0]
34002674:	f01f fa3c 	bl	34021af0 <strerror>
34002678:	4603      	mov	r3, r0
3400267a:	2201      	movs	r2, #1
3400267c:	e9cd 2205 	strd	r2, r2, [sp, #20]
34002680:	2221      	movs	r2, #33	@ 0x21
34002682:	9204      	str	r2, [sp, #16]
34002684:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002688:	9203      	str	r2, [sp, #12]
3400268a:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400268e:	9202      	str	r2, [sp, #8]
34002690:	4a5e      	ldr	r2, [pc, #376]	@ (3400280c <LL_ATON_Init+0x520>)
34002692:	b2e4      	uxtb	r4, r4
34002694:	4957      	ldr	r1, [pc, #348]	@ (340027f4 <LL_ATON_Init+0x508>)
34002696:	9200      	str	r2, [sp, #0]
34002698:	4857      	ldr	r0, [pc, #348]	@ (340027f8 <LL_ATON_Init+0x50c>)
3400269a:	22de      	movs	r2, #222	@ 0xde
3400269c:	9401      	str	r4, [sp, #4]
3400269e:	f01e fe65 	bl	3402136c <iprintf>
340026a2:	21de      	movs	r1, #222	@ 0xde
340026a4:	4b55      	ldr	r3, [pc, #340]	@ (340027fc <LL_ATON_Init+0x510>)
340026a6:	4a56      	ldr	r2, [pc, #344]	@ (34002800 <LL_ATON_Init+0x514>)
340026a8:	e6f4      	b.n	34002494 <LL_ATON_Init+0x1a8>
340026aa:	4b56      	ldr	r3, [pc, #344]	@ (34002804 <LL_ATON_Init+0x518>)
340026ac:	e7e5      	b.n	3400267a <LL_ATON_Init+0x38e>
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
340026ae:	f01f fa9d 	bl	34021bec <__errno>
340026b2:	6803      	ldr	r3, [r0, #0]
340026b4:	b1fb      	cbz	r3, 340026f6 <LL_ATON_Init+0x40a>
340026b6:	f01f fa99 	bl	34021bec <__errno>
340026ba:	6800      	ldr	r0, [r0, #0]
340026bc:	f01f fa18 	bl	34021af0 <strerror>
340026c0:	4603      	mov	r3, r0
340026c2:	2203      	movs	r2, #3
340026c4:	f04f 0e02 	mov.w	lr, #2
340026c8:	e9cd 2e05 	strd	r2, lr, [sp, #20]
340026cc:	2220      	movs	r2, #32
340026ce:	9204      	str	r2, [sp, #16]
340026d0:	f3c4 2203 	ubfx	r2, r4, #8, #4
340026d4:	9203      	str	r2, [sp, #12]
340026d6:	f3c4 3203 	ubfx	r2, r4, #12, #4
340026da:	9202      	str	r2, [sp, #8]
340026dc:	4a4c      	ldr	r2, [pc, #304]	@ (34002810 <LL_ATON_Init+0x524>)
340026de:	b2e4      	uxtb	r4, r4
340026e0:	4944      	ldr	r1, [pc, #272]	@ (340027f4 <LL_ATON_Init+0x508>)
340026e2:	9200      	str	r2, [sp, #0]
340026e4:	4844      	ldr	r0, [pc, #272]	@ (340027f8 <LL_ATON_Init+0x50c>)
340026e6:	22e2      	movs	r2, #226	@ 0xe2
340026e8:	9401      	str	r4, [sp, #4]
340026ea:	f01e fe3f 	bl	3402136c <iprintf>
340026ee:	21e2      	movs	r1, #226	@ 0xe2
340026f0:	4b42      	ldr	r3, [pc, #264]	@ (340027fc <LL_ATON_Init+0x510>)
340026f2:	4a43      	ldr	r2, [pc, #268]	@ (34002800 <LL_ATON_Init+0x514>)
340026f4:	e6ce      	b.n	34002494 <LL_ATON_Init+0x1a8>
340026f6:	4b43      	ldr	r3, [pc, #268]	@ (34002804 <LL_ATON_Init+0x518>)
340026f8:	e7e3      	b.n	340026c2 <LL_ATON_Init+0x3d6>
  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
340026fa:	f01f fa77 	bl	34021bec <__errno>
340026fe:	6803      	ldr	r3, [r0, #0]
34002700:	b1fb      	cbz	r3, 34002742 <LL_ATON_Init+0x456>
34002702:	f01f fa73 	bl	34021bec <__errno>
34002706:	6800      	ldr	r0, [r0, #0]
34002708:	f01f f9f2 	bl	34021af0 <strerror>
3400270c:	4603      	mov	r3, r0
3400270e:	2201      	movs	r2, #1
34002710:	f04f 0c02 	mov.w	ip, #2
34002714:	e9cd 2c05 	strd	r2, ip, [sp, #20]
34002718:	221f      	movs	r2, #31
3400271a:	9204      	str	r2, [sp, #16]
3400271c:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002720:	9203      	str	r2, [sp, #12]
34002722:	f3c4 3203 	ubfx	r2, r4, #12, #4
34002726:	9202      	str	r2, [sp, #8]
34002728:	4a3a      	ldr	r2, [pc, #232]	@ (34002814 <LL_ATON_Init+0x528>)
3400272a:	b2e4      	uxtb	r4, r4
3400272c:	4931      	ldr	r1, [pc, #196]	@ (340027f4 <LL_ATON_Init+0x508>)
3400272e:	9200      	str	r2, [sp, #0]
34002730:	4831      	ldr	r0, [pc, #196]	@ (340027f8 <LL_ATON_Init+0x50c>)
34002732:	22f5      	movs	r2, #245	@ 0xf5
34002734:	9401      	str	r4, [sp, #4]
34002736:	f01e fe19 	bl	3402136c <iprintf>
3400273a:	21f5      	movs	r1, #245	@ 0xf5
3400273c:	4b2f      	ldr	r3, [pc, #188]	@ (340027fc <LL_ATON_Init+0x510>)
3400273e:	4a30      	ldr	r2, [pc, #192]	@ (34002800 <LL_ATON_Init+0x514>)
34002740:	e6a8      	b.n	34002494 <LL_ATON_Init+0x1a8>
34002742:	4b30      	ldr	r3, [pc, #192]	@ (34002804 <LL_ATON_Init+0x518>)
34002744:	e7e3      	b.n	3400270e <LL_ATON_Init+0x422>
  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
34002746:	f01f fa51 	bl	34021bec <__errno>
3400274a:	6803      	ldr	r3, [r0, #0]
3400274c:	b1eb      	cbz	r3, 3400278a <LL_ATON_Init+0x49e>
3400274e:	f01f fa4d 	bl	34021bec <__errno>
34002752:	6800      	ldr	r0, [r0, #0]
34002754:	f01f f9cc 	bl	34021af0 <strerror>
34002758:	4603      	mov	r3, r0
3400275a:	2201      	movs	r2, #1
3400275c:	e9cd 2205 	strd	r2, r2, [sp, #20]
34002760:	221e      	movs	r2, #30
34002762:	9204      	str	r2, [sp, #16]
34002764:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002768:	9203      	str	r2, [sp, #12]
3400276a:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400276e:	9202      	str	r2, [sp, #8]
34002770:	4a29      	ldr	r2, [pc, #164]	@ (34002818 <LL_ATON_Init+0x52c>)
34002772:	b2e4      	uxtb	r4, r4
34002774:	491f      	ldr	r1, [pc, #124]	@ (340027f4 <LL_ATON_Init+0x508>)
34002776:	9200      	str	r2, [sp, #0]
34002778:	481f      	ldr	r0, [pc, #124]	@ (340027f8 <LL_ATON_Init+0x50c>)
3400277a:	22f7      	movs	r2, #247	@ 0xf7
3400277c:	9401      	str	r4, [sp, #4]
3400277e:	f01e fdf5 	bl	3402136c <iprintf>
34002782:	21f7      	movs	r1, #247	@ 0xf7
34002784:	4b1d      	ldr	r3, [pc, #116]	@ (340027fc <LL_ATON_Init+0x510>)
34002786:	4a1e      	ldr	r2, [pc, #120]	@ (34002800 <LL_ATON_Init+0x514>)
34002788:	e684      	b.n	34002494 <LL_ATON_Init+0x1a8>
3400278a:	4b1e      	ldr	r3, [pc, #120]	@ (34002804 <LL_ATON_Init+0x518>)
3400278c:	e7e5      	b.n	3400275a <LL_ATON_Init+0x46e>
  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400278e:	f01f fa2d 	bl	34021bec <__errno>
34002792:	6803      	ldr	r3, [r0, #0]
34002794:	b1f3      	cbz	r3, 340027d4 <LL_ATON_Init+0x4e8>
34002796:	f01f fa29 	bl	34021bec <__errno>
3400279a:	6800      	ldr	r0, [r0, #0]
3400279c:	f01f f9a8 	bl	34021af0 <strerror>
340027a0:	4603      	mov	r3, r0
340027a2:	2201      	movs	r2, #1
340027a4:	2006      	movs	r0, #6
340027a6:	e9cd 2005 	strd	r2, r0, [sp, #20]
340027aa:	2200      	movs	r2, #0
340027ac:	9204      	str	r2, [sp, #16]
340027ae:	f3c4 2203 	ubfx	r2, r4, #8, #4
340027b2:	9203      	str	r2, [sp, #12]
340027b4:	f3c4 3203 	ubfx	r2, r4, #12, #4
340027b8:	9202      	str	r2, [sp, #8]
340027ba:	4a18      	ldr	r2, [pc, #96]	@ (3400281c <LL_ATON_Init+0x530>)
340027bc:	b2e4      	uxtb	r4, r4
340027be:	490d      	ldr	r1, [pc, #52]	@ (340027f4 <LL_ATON_Init+0x508>)
340027c0:	9200      	str	r2, [sp, #0]
340027c2:	480d      	ldr	r0, [pc, #52]	@ (340027f8 <LL_ATON_Init+0x50c>)
340027c4:	22f9      	movs	r2, #249	@ 0xf9
340027c6:	9401      	str	r4, [sp, #4]
340027c8:	f01e fdd0 	bl	3402136c <iprintf>
340027cc:	21f9      	movs	r1, #249	@ 0xf9
340027ce:	4b0b      	ldr	r3, [pc, #44]	@ (340027fc <LL_ATON_Init+0x510>)
340027d0:	4a0b      	ldr	r2, [pc, #44]	@ (34002800 <LL_ATON_Init+0x514>)
340027d2:	e65f      	b.n	34002494 <LL_ATON_Init+0x1a8>
340027d4:	4b0b      	ldr	r3, [pc, #44]	@ (34002804 <LL_ATON_Init+0x518>)
340027d6:	e7e4      	b.n	340027a2 <LL_ATON_Init+0x4b6>
  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
340027d8:	4b0a      	ldr	r3, [pc, #40]	@ (34002804 <LL_ATON_Init+0x518>)
340027da:	e61f      	b.n	3400241c <LL_ATON_Init+0x130>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 1);
340027dc:	2301      	movs	r3, #1

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);

  return 0;
}
340027de:	2000      	movs	r0, #0
    ATON_BUSIF_CTRL_SET(i, 1);
340027e0:	6013      	str	r3, [r2, #0]
340027e2:	4a0f      	ldr	r2, [pc, #60]	@ (34002820 <LL_ATON_Init+0x534>)
340027e4:	6013      	str	r3, [r2, #0]
  ATON_INTCTRL_CTRL_SET(0, 1);
340027e6:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
340027ea:	6013      	str	r3, [r2, #0]
}
340027ec:	b008      	add	sp, #32
340027ee:	bd10      	pop	{r4, pc}
340027f0:	3402b185 	.word	0x3402b185
340027f4:	3402b0b3 	.word	0x3402b0b3
340027f8:	3402b107 	.word	0x3402b107
340027fc:	3402b7cd 	.word	0x3402b7cd
34002800:	34030e01 	.word	0x34030e01
34002804:	3402b0ae 	.word	0x3402b0ae
34002808:	3402b18b 	.word	0x3402b18b
3400280c:	3402b191 	.word	0x3402b191
34002810:	3402b19b 	.word	0x3402b19b
34002814:	3402b1a2 	.word	0x3402b1a2
34002818:	3402b1aa 	.word	0x3402b1aa
3400281c:	3402b1b2 	.word	0x3402b1b2
34002820:	580e3000 	.word	0x580e3000

34002824 <LL_ATON_DeInit>:
int LL_ATON_DeInit(void)
{
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
34002824:	2000      	movs	r0, #0
34002826:	4b07      	ldr	r3, [pc, #28]	@ (34002844 <LL_ATON_DeInit+0x20>)
34002828:	6018      	str	r0, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 0);
3400282a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400282e:	6018      	str	r0, [r3, #0]
34002830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34002834:	6018      	str	r0, [r3, #0]
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
34002836:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
3400283a:	6098      	str	r0, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
3400283c:	60d8      	str	r0, [r3, #12]
  ATON_CLKCTRL_BGATES_SET(0, 0);
3400283e:	6118      	str	r0, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
34002840:	6018      	str	r0, [r3, #0]

  return 0;
}
34002842:	4770      	bx	lr
34002844:	580e1000 	.word	0x580e1000

34002848 <LL_ATON_EnableUnits_Init>:
 * @param  n Lenght of the initialization array
 * @retval Error code
 * @todo   Add boundary checks
 */
int LL_ATON_EnableUnits_Init(const LL_ATON_EnableUnits_InitTypeDef *LL_ATON_EnableUnits_InitStruct, int n)
{
34002848:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;

  for (i = 0; i < n; i++)
3400284a:	2400      	movs	r4, #0
3400284c:	42a1      	cmp	r1, r4
3400284e:	f101 0201 	add.w	r2, r1, #1
34002852:	bfb8      	it	lt
34002854:	2201      	movlt	r2, #1
#endif // !POOL_RC14
      break;
#endif
#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_ENABLE(RECBUF, unitId);
34002856:	4d1e      	ldr	r5, [pc, #120]	@ (340028d0 <LL_ATON_EnableUnits_Init+0x88>)
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
34002858:	4f1e      	ldr	r7, [pc, #120]	@ (340028d4 <LL_ATON_EnableUnits_Init+0x8c>)
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
3400285a:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
3400285c:	3a01      	subs	r2, #1
3400285e:	d101      	bne.n	34002864 <LL_ATON_EnableUnits_Init+0x1c>
      break;
    }
  }

  return 0;
}
34002860:	2000      	movs	r0, #0
34002862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (unitType)
34002864:	f810 1024 	ldrb.w	r1, [r0, r4, lsl #2]
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
34002868:	f836 3024 	ldrh.w	r3, [r6, r4, lsl #2]
    switch (unitType)
3400286c:	2908      	cmp	r1, #8
3400286e:	d818      	bhi.n	340028a2 <LL_ATON_EnableUnits_Init+0x5a>
34002870:	e8df f001 	tbb	[pc, r1]
34002874:	190e1705 	.word	0x190e1705
34002878:	1725211d 	.word	0x1725211d
3400287c:	29          	.byte	0x29
3400287d:	00          	.byte	0x00
      ATON_ENABLE(STRENG, unitId);
3400287e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34002882:	33e5      	adds	r3, #229	@ 0xe5
      ATON_ENABLE(DECUN, unitId);
34002884:	031b      	lsls	r3, r3, #12
34002886:	6819      	ldr	r1, [r3, #0]
34002888:	f041 0101 	orr.w	r1, r1, #1
3400288c:	6019      	str	r1, [r3, #0]
      break;
3400288e:	e008      	b.n	340028a2 <LL_ATON_EnableUnits_Init+0x5a>
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
34002890:	f503 21b0 	add.w	r1, r3, #360448	@ 0x58000
34002894:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
34002898:	31ef      	adds	r1, #239	@ 0xef
3400289a:	0309      	lsls	r1, r1, #12
3400289c:	f043 0301 	orr.w	r3, r3, #1
340028a0:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
340028a2:	3401      	adds	r4, #1
340028a4:	e7da      	b.n	3400285c <LL_ATON_EnableUnits_Init+0x14>
      ATON_ENABLE(DECUN, unitId);
340028a6:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340028aa:	33f3      	adds	r3, #243	@ 0xf3
340028ac:	e7ea      	b.n	34002884 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ACTIV, unitId);
340028ae:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340028b2:	33f5      	adds	r3, #245	@ 0xf5
340028b4:	e7e6      	b.n	34002884 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ARITH, unitId);
340028b6:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340028ba:	33f7      	adds	r3, #247	@ 0xf7
340028bc:	e7e2      	b.n	34002884 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(POOL, unitId);
340028be:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
340028c2:	33fb      	adds	r3, #251	@ 0xfb
340028c4:	e7de      	b.n	34002884 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(RECBUF, unitId);
340028c6:	682b      	ldr	r3, [r5, #0]
340028c8:	f043 0301 	orr.w	r3, r3, #1
340028cc:	602b      	str	r3, [r5, #0]
      break;
340028ce:	e7e8      	b.n	340028a2 <LL_ATON_EnableUnits_Init+0x5a>
340028d0:	580fd000 	.word	0x580fd000
340028d4:	340d0e54 	.word	0x340d0e54

340028d8 <__atonn_getSrcPortID>:
}
#endif

unsigned __atonn_getSrcPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
340028d8:	b538      	push	{r3, r4, r5, lr}
340028da:	4605      	mov	r5, r0
340028dc:	f89d 4010 	ldrb.w	r4, [sp, #16]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
340028e0:	4608      	mov	r0, r1
340028e2:	b131      	cbz	r1, 340028f2 <__atonn_getSrcPortID+0x1a>
340028e4:	f44f 7152 	mov.w	r1, #840	@ 0x348
340028e8:	4b3d      	ldr	r3, [pc, #244]	@ (340029e0 <__atonn_getSrcPortID+0x108>)
340028ea:	4a3e      	ldr	r2, [pc, #248]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
  case STRSWITCH:
    switch (aut)
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
340028ec:	483e      	ldr	r0, [pc, #248]	@ (340029e8 <__atonn_getSrcPortID+0x110>)
340028ee:	f01d f88b 	bl	3401fa08 <__assert_func>
  switch (sut)
340028f2:	b125      	cbz	r5, 340028fe <__atonn_getSrcPortID+0x26>
340028f4:	2d01      	cmp	r5, #1
340028f6:	d068      	beq.n	340029ca <__atonn_getSrcPortID+0xf2>
340028f8:	2d02      	cmp	r5, #2
340028fa:	d06b      	beq.n	340029d4 <__atonn_getSrcPortID+0xfc>
    // TODO
    LL_ATON_ASSERT(0);
    break;
  }
  return 0;
}
340028fc:	bd38      	pop	{r3, r4, r5, pc}
    switch (aut)
340028fe:	2a06      	cmp	r2, #6
34002900:	d85e      	bhi.n	340029c0 <__atonn_getSrcPortID+0xe8>
34002902:	e8df f002 	tbb	[pc, r2]
34002906:	5d04      	.short	0x5d04
34002908:	3f302112 	.word	0x3f302112
3400290c:	4e          	.byte	0x4e
3400290d:	00          	.byte	0x00
      LL_ATON_ASSERT(port == 0);
3400290e:	b124      	cbz	r4, 3400291a <__atonn_getSrcPortID+0x42>
34002910:	f44f 7154 	mov.w	r1, #848	@ 0x350
34002914:	4b35      	ldr	r3, [pc, #212]	@ (340029ec <__atonn_getSrcPortID+0x114>)
34002916:	4a33      	ldr	r2, [pc, #204]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
34002918:	e7e8      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
3400291a:	2b09      	cmp	r3, #9
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, STRENG, 0, 0) + au_num;
3400291c:	4618      	mov	r0, r3
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
3400291e:	d9ed      	bls.n	340028fc <__atonn_getSrcPortID+0x24>
34002920:	f240 3151 	movw	r1, #849	@ 0x351
34002924:	4b32      	ldr	r3, [pc, #200]	@ (340029f0 <__atonn_getSrcPortID+0x118>)
34002926:	4a2f      	ldr	r2, [pc, #188]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
34002928:	e7e0      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
3400292a:	b124      	cbz	r4, 34002936 <__atonn_getSrcPortID+0x5e>
3400292c:	f240 3157 	movw	r1, #855	@ 0x357
34002930:	4b2e      	ldr	r3, [pc, #184]	@ (340029ec <__atonn_getSrcPortID+0x114>)
34002932:	4a2c      	ldr	r2, [pc, #176]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
34002934:	e7da      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
34002936:	2b03      	cmp	r3, #3
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0) + au_num;
34002938:	f103 000a 	add.w	r0, r3, #10
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
3400293c:	d9de      	bls.n	340028fc <__atonn_getSrcPortID+0x24>
3400293e:	f44f 7156 	mov.w	r1, #856	@ 0x358
34002942:	4b2c      	ldr	r3, [pc, #176]	@ (340029f4 <__atonn_getSrcPortID+0x11c>)
34002944:	4a27      	ldr	r2, [pc, #156]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
34002946:	e7d1      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
34002948:	b124      	cbz	r4, 34002954 <__atonn_getSrcPortID+0x7c>
3400294a:	f240 315e 	movw	r1, #862	@ 0x35e
3400294e:	4b27      	ldr	r3, [pc, #156]	@ (340029ec <__atonn_getSrcPortID+0x114>)
34002950:	4a24      	ldr	r2, [pc, #144]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
34002952:	e7cb      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
34002954:	2b01      	cmp	r3, #1
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, DECUN, 0, 0) + au_num;
34002956:	f103 000e 	add.w	r0, r3, #14
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
3400295a:	d9cf      	bls.n	340028fc <__atonn_getSrcPortID+0x24>
3400295c:	f240 315f 	movw	r1, #863	@ 0x35f
34002960:	4b25      	ldr	r3, [pc, #148]	@ (340029f8 <__atonn_getSrcPortID+0x120>)
34002962:	4a20      	ldr	r2, [pc, #128]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
34002964:	e7c2      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
34002966:	b124      	cbz	r4, 34002972 <__atonn_getSrcPortID+0x9a>
34002968:	f240 3165 	movw	r1, #869	@ 0x365
3400296c:	4b1f      	ldr	r3, [pc, #124]	@ (340029ec <__atonn_getSrcPortID+0x114>)
3400296e:	4a1d      	ldr	r2, [pc, #116]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
34002970:	e7bc      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
34002972:	2b01      	cmp	r3, #1
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ACTIV, 0, 0) + au_num;
34002974:	f103 0010 	add.w	r0, r3, #16
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
34002978:	d9c0      	bls.n	340028fc <__atonn_getSrcPortID+0x24>
3400297a:	f240 3166 	movw	r1, #870	@ 0x366
3400297e:	4b1e      	ldr	r3, [pc, #120]	@ (340029f8 <__atonn_getSrcPortID+0x120>)
34002980:	4a18      	ldr	r2, [pc, #96]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
34002982:	e7b3      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
34002984:	b124      	cbz	r4, 34002990 <__atonn_getSrcPortID+0xb8>
34002986:	f44f 715b 	mov.w	r1, #876	@ 0x36c
3400298a:	4b18      	ldr	r3, [pc, #96]	@ (340029ec <__atonn_getSrcPortID+0x114>)
3400298c:	4a15      	ldr	r2, [pc, #84]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
3400298e:	e7ad      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34002990:	2b03      	cmp	r3, #3
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ARITH, 0, 0) + au_num;
34002992:	f103 0012 	add.w	r0, r3, #18
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34002996:	d9b1      	bls.n	340028fc <__atonn_getSrcPortID+0x24>
34002998:	f240 316d 	movw	r1, #877	@ 0x36d
3400299c:	4b15      	ldr	r3, [pc, #84]	@ (340029f4 <__atonn_getSrcPortID+0x11c>)
3400299e:	4a11      	ldr	r2, [pc, #68]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
340029a0:	e7a4      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
340029a2:	b124      	cbz	r4, 340029ae <__atonn_getSrcPortID+0xd6>
340029a4:	f240 3173 	movw	r1, #883	@ 0x373
340029a8:	4b10      	ldr	r3, [pc, #64]	@ (340029ec <__atonn_getSrcPortID+0x114>)
340029aa:	4a0e      	ldr	r2, [pc, #56]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
340029ac:	e79e      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
340029ae:	2b01      	cmp	r3, #1
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, POOL, 0, 0) + au_num;
340029b0:	f103 0016 	add.w	r0, r3, #22
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
340029b4:	d9a2      	bls.n	340028fc <__atonn_getSrcPortID+0x24>
340029b6:	f44f 715d 	mov.w	r1, #884	@ 0x374
340029ba:	4b0f      	ldr	r3, [pc, #60]	@ (340029f8 <__atonn_getSrcPortID+0x120>)
340029bc:	4a09      	ldr	r2, [pc, #36]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
340029be:	e795      	b.n	340028ec <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(0);
340029c0:	f240 3179 	movw	r1, #889	@ 0x379
340029c4:	4b0d      	ldr	r3, [pc, #52]	@ (340029fc <__atonn_getSrcPortID+0x124>)
340029c6:	4a07      	ldr	r2, [pc, #28]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
340029c8:	e790      	b.n	340028ec <__atonn_getSrcPortID+0x14>
    LL_ATON_ASSERT(0);
340029ca:	f240 317f 	movw	r1, #895	@ 0x37f
340029ce:	4b0b      	ldr	r3, [pc, #44]	@ (340029fc <__atonn_getSrcPortID+0x124>)
340029d0:	4a04      	ldr	r2, [pc, #16]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
340029d2:	e78b      	b.n	340028ec <__atonn_getSrcPortID+0x14>
    LL_ATON_ASSERT(0);
340029d4:	f240 3183 	movw	r1, #899	@ 0x383
340029d8:	4b08      	ldr	r3, [pc, #32]	@ (340029fc <__atonn_getSrcPortID+0x124>)
340029da:	4a02      	ldr	r2, [pc, #8]	@ (340029e4 <__atonn_getSrcPortID+0x10c>)
340029dc:	e786      	b.n	340028ec <__atonn_getSrcPortID+0x14>
340029de:	bf00      	nop
340029e0:	3402b1c2 	.word	0x3402b1c2
340029e4:	34030dec 	.word	0x34030dec
340029e8:	3402b0b3 	.word	0x3402b0b3
340029ec:	3402b1ce 	.word	0x3402b1ce
340029f0:	3402b1d8 	.word	0x3402b1d8
340029f4:	3402b1e4 	.word	0x3402b1e4
340029f8:	3402b1ef 	.word	0x3402b1ef
340029fc:	3402b7cd 	.word	0x3402b7cd

34002a00 <__atonn_getDstPortID>:

unsigned __atonn_getDstPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
34002a00:	b538      	push	{r3, r4, r5, lr}
34002a02:	4605      	mov	r5, r0
34002a04:	f89d 4010 	ldrb.w	r4, [sp, #16]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
34002a08:	4608      	mov	r0, r1
34002a0a:	b131      	cbz	r1, 34002a1a <__atonn_getDstPortID+0x1a>
34002a0c:	f240 318d 	movw	r1, #909	@ 0x38d
34002a10:	4b46      	ldr	r3, [pc, #280]	@ (34002b2c <__atonn_getDstPortID+0x12c>)
34002a12:	4a47      	ldr	r2, [pc, #284]	@ (34002b30 <__atonn_getDstPortID+0x130>)
  case STRSWITCH:
    switch (aut)
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
34002a14:	4847      	ldr	r0, [pc, #284]	@ (34002b34 <__atonn_getDstPortID+0x134>)
34002a16:	f01c fff7 	bl	3401fa08 <__assert_func>
  switch (sut)
34002a1a:	b125      	cbz	r5, 34002a26 <__atonn_getDstPortID+0x26>
34002a1c:	2d01      	cmp	r5, #1
34002a1e:	d07a      	beq.n	34002b16 <__atonn_getDstPortID+0x116>
34002a20:	2d02      	cmp	r5, #2
34002a22:	d07d      	beq.n	34002b20 <__atonn_getDstPortID+0x120>
    // TODO
    LL_ATON_ASSERT(0);
    break;
  }
  return 0;
}
34002a24:	bd38      	pop	{r3, r4, r5, pc}
    switch (aut)
34002a26:	2a06      	cmp	r2, #6
34002a28:	d870      	bhi.n	34002b0c <__atonn_getDstPortID+0x10c>
34002a2a:	e8df f002 	tbb	[pc, r2]
34002a2e:	6f04      	.short	0x6f04
34002a30:	4c3d2915 	.word	0x4c3d2915
34002a34:	60          	.byte	0x60
34002a35:	00          	.byte	0x00
      LL_ATON_ASSERT(port == 0);
34002a36:	b124      	cbz	r4, 34002a42 <__atonn_getDstPortID+0x42>
34002a38:	f240 3195 	movw	r1, #917	@ 0x395
34002a3c:	4b3e      	ldr	r3, [pc, #248]	@ (34002b38 <__atonn_getDstPortID+0x138>)
34002a3e:	4a3c      	ldr	r2, [pc, #240]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002a40:	e7e8      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
34002a42:	2b09      	cmp	r3, #9
34002a44:	d904      	bls.n	34002a50 <__atonn_getDstPortID+0x50>
34002a46:	f240 3196 	movw	r1, #918	@ 0x396
34002a4a:	4b3c      	ldr	r3, [pc, #240]	@ (34002b3c <__atonn_getDstPortID+0x13c>)
34002a4c:	4a38      	ldr	r2, [pc, #224]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002a4e:	e7e1      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, STRENG, 0, 0) + (0x4 * au_num);
34002a50:	2008      	movs	r0, #8
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, POOL, 0, 0) + (0x4 * au_num);
34002a52:	eb00 0083 	add.w	r0, r0, r3, lsl #2
34002a56:	e7e5      	b.n	34002a24 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port < 3);
34002a58:	2c02      	cmp	r4, #2
34002a5a:	d904      	bls.n	34002a66 <__atonn_getDstPortID+0x66>
34002a5c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34002a60:	4b37      	ldr	r3, [pc, #220]	@ (34002b40 <__atonn_getDstPortID+0x140>)
34002a62:	4a33      	ldr	r2, [pc, #204]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002a64:	e7d6      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
34002a66:	2b03      	cmp	r3, #3
34002a68:	d904      	bls.n	34002a74 <__atonn_getDstPortID+0x74>
34002a6a:	f240 319d 	movw	r1, #925	@ 0x39d
34002a6e:	4b35      	ldr	r3, [pc, #212]	@ (34002b44 <__atonn_getDstPortID+0x144>)
34002a70:	4a2f      	ldr	r2, [pc, #188]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002a72:	e7cf      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, CONVACC, 0, 0) + (0x4 * (3 * au_num + port));
34002a74:	2003      	movs	r0, #3
34002a76:	fb10 4003 	smlabb	r0, r0, r3, r4
34002a7a:	0080      	lsls	r0, r0, #2
34002a7c:	3030      	adds	r0, #48	@ 0x30
34002a7e:	e7d1      	b.n	34002a24 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port < 2);
34002a80:	2c01      	cmp	r4, #1
34002a82:	d904      	bls.n	34002a8e <__atonn_getDstPortID+0x8e>
34002a84:	f240 31a3 	movw	r1, #931	@ 0x3a3
34002a88:	4b2f      	ldr	r3, [pc, #188]	@ (34002b48 <__atonn_getDstPortID+0x148>)
34002a8a:	4a29      	ldr	r2, [pc, #164]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002a8c:	e7c2      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
34002a8e:	2b01      	cmp	r3, #1
34002a90:	d904      	bls.n	34002a9c <__atonn_getDstPortID+0x9c>
34002a92:	f44f 7169 	mov.w	r1, #932	@ 0x3a4
34002a96:	4b2d      	ldr	r3, [pc, #180]	@ (34002b4c <__atonn_getDstPortID+0x14c>)
34002a98:	4a25      	ldr	r2, [pc, #148]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002a9a:	e7bb      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, DECUN, 0, 0) + (0x4 * (2 * au_num + port));
34002a9c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
34002aa0:	00a4      	lsls	r4, r4, #2
34002aa2:	f104 0060 	add.w	r0, r4, #96	@ 0x60
34002aa6:	e7bd      	b.n	34002a24 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port == 0);
34002aa8:	b124      	cbz	r4, 34002ab4 <__atonn_getDstPortID+0xb4>
34002aaa:	f240 31aa 	movw	r1, #938	@ 0x3aa
34002aae:	4b22      	ldr	r3, [pc, #136]	@ (34002b38 <__atonn_getDstPortID+0x138>)
34002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002ab2:	e7af      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
34002ab4:	2b01      	cmp	r3, #1
34002ab6:	d904      	bls.n	34002ac2 <__atonn_getDstPortID+0xc2>
34002ab8:	f240 31ab 	movw	r1, #939	@ 0x3ab
34002abc:	4b23      	ldr	r3, [pc, #140]	@ (34002b4c <__atonn_getDstPortID+0x14c>)
34002abe:	4a1c      	ldr	r2, [pc, #112]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002ac0:	e7a8      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ACTIV, 0, 0) + (0x4 * au_num);
34002ac2:	2070      	movs	r0, #112	@ 0x70
34002ac4:	e7c5      	b.n	34002a52 <__atonn_getDstPortID+0x52>
      LL_ATON_ASSERT(port < 2);
34002ac6:	2c01      	cmp	r4, #1
34002ac8:	d904      	bls.n	34002ad4 <__atonn_getDstPortID+0xd4>
34002aca:	f240 31b1 	movw	r1, #945	@ 0x3b1
34002ace:	4b1e      	ldr	r3, [pc, #120]	@ (34002b48 <__atonn_getDstPortID+0x148>)
34002ad0:	4a17      	ldr	r2, [pc, #92]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002ad2:	e79f      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34002ad4:	2b03      	cmp	r3, #3
34002ad6:	d904      	bls.n	34002ae2 <__atonn_getDstPortID+0xe2>
34002ad8:	f240 31b2 	movw	r1, #946	@ 0x3b2
34002adc:	4b19      	ldr	r3, [pc, #100]	@ (34002b44 <__atonn_getDstPortID+0x144>)
34002ade:	4a14      	ldr	r2, [pc, #80]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002ae0:	e798      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ARITH, 0, 0) + (0x4 * (2 * au_num + port));
34002ae2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
34002ae6:	00a4      	lsls	r4, r4, #2
34002ae8:	f104 0078 	add.w	r0, r4, #120	@ 0x78
34002aec:	e79a      	b.n	34002a24 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port == 0);
34002aee:	b124      	cbz	r4, 34002afa <__atonn_getDstPortID+0xfa>
34002af0:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
34002af4:	4b10      	ldr	r3, [pc, #64]	@ (34002b38 <__atonn_getDstPortID+0x138>)
34002af6:	4a0e      	ldr	r2, [pc, #56]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002af8:	e78c      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34002afa:	2b01      	cmp	r3, #1
34002afc:	d904      	bls.n	34002b08 <__atonn_getDstPortID+0x108>
34002afe:	f240 31b9 	movw	r1, #953	@ 0x3b9
34002b02:	4b12      	ldr	r3, [pc, #72]	@ (34002b4c <__atonn_getDstPortID+0x14c>)
34002b04:	4a0a      	ldr	r2, [pc, #40]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002b06:	e785      	b.n	34002a14 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, POOL, 0, 0) + (0x4 * au_num);
34002b08:	2098      	movs	r0, #152	@ 0x98
34002b0a:	e7a2      	b.n	34002a52 <__atonn_getDstPortID+0x52>
      LL_ATON_ASSERT(0);
34002b0c:	f240 31be 	movw	r1, #958	@ 0x3be
34002b10:	4b0f      	ldr	r3, [pc, #60]	@ (34002b50 <__atonn_getDstPortID+0x150>)
34002b12:	4a07      	ldr	r2, [pc, #28]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002b14:	e77e      	b.n	34002a14 <__atonn_getDstPortID+0x14>
    LL_ATON_ASSERT(0);
34002b16:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (34002b50 <__atonn_getDstPortID+0x150>)
34002b1c:	4a04      	ldr	r2, [pc, #16]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002b1e:	e779      	b.n	34002a14 <__atonn_getDstPortID+0x14>
    LL_ATON_ASSERT(0);
34002b20:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34002b24:	4b0a      	ldr	r3, [pc, #40]	@ (34002b50 <__atonn_getDstPortID+0x150>)
34002b26:	4a02      	ldr	r2, [pc, #8]	@ (34002b30 <__atonn_getDstPortID+0x130>)
34002b28:	e774      	b.n	34002a14 <__atonn_getDstPortID+0x14>
34002b2a:	bf00      	nop
34002b2c:	3402b1c2 	.word	0x3402b1c2
34002b30:	34030dd7 	.word	0x34030dd7
34002b34:	3402b0b3 	.word	0x3402b0b3
34002b38:	3402b1ce 	.word	0x3402b1ce
34002b3c:	3402b1d8 	.word	0x3402b1d8
34002b40:	3402b1fa 	.word	0x3402b1fa
34002b44:	3402b1e4 	.word	0x3402b1e4
34002b48:	3402b203 	.word	0x3402b203
34002b4c:	3402b1ef 	.word	0x3402b1ef
34002b50:	3402b7cd 	.word	0x3402b7cd

34002b54 <LL_Switch_Init_NoReset>:
  unsigned int fnr_mask[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_MASK, ATON_STRSWITCH_DST_FNR1_MASK};

  /* Enable Switch */
  t = ATON_STRSWITCH_CTRL_DT;
  t = ATON_STRSWITCH_CTRL_SET_EN(t, 1);
  ATON_STRSWITCH_CTRL_SET(0, t);
34002b54:	2301      	movs	r3, #1
34002b56:	4a13      	ldr	r2, [pc, #76]	@ (34002ba4 <LL_Switch_Init_NoReset+0x50>)
34002b58:	2900      	cmp	r1, #0
{
34002b5a:	b530      	push	{r4, r5, lr}
  ATON_STRSWITCH_CTRL_SET(0, t);
34002b5c:	6013      	str	r3, [r2, #0]

  for (i = 0; i < n; i++)
34002b5e:	eb01 0203 	add.w	r2, r1, r3
34002b62:	bfb8      	it	lt
34002b64:	461a      	movlt	r2, r3
34002b66:	3a01      	subs	r2, #1
34002b68:	d101      	bne.n	34002b6e <LL_Switch_Init_NoReset+0x1a>

    ATON_REG_WRITE(reg, t);
  }

  return 0;
}
34002b6a:	2000      	movs	r0, #0
34002b6c:	bd30      	pop	{r4, r5, pc}
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
34002b6e:	7b84      	ldrb	r4, [r0, #14]
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source1) << link_shift[1]);
34002b70:	e9d0 5300 	ldrd	r5, r3, [r0]
34002b74:	045b      	lsls	r3, r3, #17
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b76:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
34002b7a:	f004 0501 	and.w	r5, r4, #1
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b7e:	432b      	orrs	r3, r5
    t |= ((LL_Switch_InitStruct[i].frames0 << fnr_shift[0]) & fnr_mask[0]);
34002b80:	7b05      	ldrb	r5, [r0, #12]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b82:	6881      	ldr	r1, [r0, #8]
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b84:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
34002b88:	7b45      	ldrb	r5, [r0, #13]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b8a:	f101 41b0 	add.w	r1, r1, #1476395008	@ 0x58000000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b8e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    t |= ((LL_Switch_InitStruct[i].context1 != 0) << en_shift[1]);
34002b92:	f3c4 0440 	ubfx	r4, r4, #1, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b96:	f501 2164 	add.w	r1, r1, #933888	@ 0xe4000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    ATON_REG_WRITE(reg, t);
34002b9e:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
34002ba0:	3010      	adds	r0, #16
34002ba2:	e7e0      	b.n	34002b66 <LL_Switch_Init_NoReset+0x12>
34002ba4:	580e4000 	.word	0x580e4000

34002ba8 <LL_Switch_Init>:
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ll_aton_static_checks();
#endif

  /* Clear Configuration */
  ATON_DISABLE_CLR_CONFCLR(STRSWITCH, 0);
34002ba8:	2202      	movs	r2, #2
34002baa:	4b06      	ldr	r3, [pc, #24]	@ (34002bc4 <LL_Switch_Init+0x1c>)
34002bac:	601a      	str	r2, [r3, #0]
34002bae:	681a      	ldr	r2, [r3, #0]
34002bb0:	0792      	lsls	r2, r2, #30
34002bb2:	d4fc      	bmi.n	34002bae <LL_Switch_Init+0x6>
34002bb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002bb8:	601a      	str	r2, [r3, #0]
34002bba:	681a      	ldr	r2, [r3, #0]
34002bbc:	0052      	lsls	r2, r2, #1
34002bbe:	d4fc      	bmi.n	34002bba <LL_Switch_Init+0x12>

  return LL_Switch_Init_NoReset(LL_Switch_InitStruct, n);
34002bc0:	f7ff bfc8 	b.w	34002b54 <LL_Switch_Init_NoReset>
34002bc4:	580e4000 	.word	0x580e4000

34002bc8 <LL_Switch_Deinit>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be disconnected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Deinit(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
34002bc8:	b530      	push	{r4, r5, lr}
  int i;
  volatile uint32_t *reg;

  for (i = 0; i < n; i++)
34002bca:	2400      	movs	r4, #0
34002bcc:	42a1      	cmp	r1, r4
34002bce:	f101 0301 	add.w	r3, r1, #1
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));

    /* Disable contexts */
    ATON_REG_WRITE(reg, 0);
34002bd2:	4625      	mov	r5, r4
34002bd4:	bfb8      	it	lt
34002bd6:	2301      	movlt	r3, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002bd8:	3008      	adds	r0, #8
  for (i = 0; i < n; i++)
34002bda:	3b01      	subs	r3, #1
34002bdc:	d101      	bne.n	34002be2 <LL_Switch_Deinit+0x1a>
  }

  return 0;
}
34002bde:	2000      	movs	r0, #0
34002be0:	bd30      	pop	{r4, r5, pc}
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002be2:	0122      	lsls	r2, r4, #4
34002be4:	5882      	ldr	r2, [r0, r2]
  for (i = 0; i < n; i++)
34002be6:	3401      	adds	r4, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002be8:	f102 42b0 	add.w	r2, r2, #1476395008	@ 0x58000000
34002bec:	f502 2264 	add.w	r2, r2, #933888	@ 0xe4000
    ATON_REG_WRITE(reg, 0);
34002bf0:	6015      	str	r5, [r2, #0]
  for (i = 0; i < n; i++)
34002bf2:	e7f2      	b.n	34002bda <LL_Switch_Deinit+0x12>

34002bf4 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
34002bf4:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
34002bf6:	2401      	movs	r4, #1
34002bf8:	2500      	movs	r5, #0
34002bfa:	2301      	movs	r3, #1
34002bfc:	ea54 050d 	orrs.w	r5, r4, sp
34002c00:	4a03      	ldr	r2, [pc, #12]	@ (34002c10 <LL_ATON_EnableClock+0x1c>)
34002c02:	4083      	lsls	r3, r0
34002c04:	6911      	ldr	r1, [r2, #16]
34002c06:	404b      	eors	r3, r1
34002c08:	4023      	ands	r3, r4
34002c0a:	404b      	eors	r3, r1
34002c0c:	6113      	str	r3, [r2, #16]
#endif
}
34002c0e:	bd30      	pop	{r4, r5, pc}
34002c10:	580e0000 	.word	0x580e0000

34002c14 <LL_Streng_TensorInit>:
  if (id >= ATON_STRENG_NUM)
34002c14:	2809      	cmp	r0, #9
{
34002c16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34002c1a:	4604      	mov	r4, r0
34002c1c:	460d      	mov	r5, r1
34002c1e:	4616      	mov	r6, r2
  if (id >= ATON_STRENG_NUM)
34002c20:	dd04      	ble.n	34002c2c <LL_Streng_TensorInit+0x18>
    return LL_ATON_INVALID_ID;
34002c22:	f04f 30ff 	mov.w	r0, #4294967295
}
34002c26:	b003      	add	sp, #12
34002c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LL_ATON_EnableClock(ATON_STRENG_CLKB_CLK(id));
34002c2c:	f7ff ffe2 	bl	34002bf4 <LL_ATON_EnableClock>
  if (n != 1)
34002c30:	2e01      	cmp	r6, #1
34002c32:	d1f6      	bne.n	34002c22 <LL_Streng_TensorInit+0xe>
  if (conf->nbits_in > 24 || conf->nbits_out > 24)
34002c34:	f895 6044 	ldrb.w	r6, [r5, #68]	@ 0x44
34002c38:	2e18      	cmp	r6, #24
34002c3a:	d8f2      	bhi.n	34002c22 <LL_Streng_TensorInit+0xe>
34002c3c:	f895 c045 	ldrb.w	ip, [r5, #69]	@ 0x45
34002c40:	f1bc 0f18 	cmp.w	ip, #24
34002c44:	d8ed      	bhi.n	34002c22 <LL_Streng_TensorInit+0xe>
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34002c46:	7828      	ldrb	r0, [r5, #0]
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34002c48:	f8d5 a040 	ldr.w	sl, [r5, #64]	@ 0x40
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34002c4c:	01c2      	lsls	r2, r0, #7
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34002c4e:	00c3      	lsls	r3, r0, #3
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34002c50:	f402 7180 	and.w	r1, r2, #256	@ 0x100
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34002c54:	f003 0308 	and.w	r3, r3, #8
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34002c58:	430b      	orrs	r3, r1
  t = ATON_STRENG_CTRL_SET_RAW_OUT(t, conf->raw_out);
34002c5a:	f3c0 0180 	ubfx	r1, r0, #2, #1
34002c5e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  t = ATON_STRENG_CTRL_SET_NOBLK(t, (conf->noblk != 0));
34002c62:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
34002c66:	431a      	orrs	r2, r3
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
34002c68:	0843      	lsrs	r3, r0, #1
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34002c6a:	f10a 31ff 	add.w	r1, sl, #4294967295
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
34002c6e:	f003 0310 	and.w	r3, r3, #16
34002c72:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34002c74:	424a      	negs	r2, r1
34002c76:	414a      	adcs	r2, r1
34002c78:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
34002c7c:	0102      	lsls	r2, r0, #4
34002c7e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34002c82:	f8b5 8000 	ldrh.w	r8, [r5]
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
34002c86:	0207      	lsls	r7, r0, #8
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
34002c88:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
34002c8a:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
34002c8e:	431f      	orrs	r7, r3
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34002c90:	f408 7310 	and.w	r3, r8, #576	@ 0x240
34002c94:	f1a3 0e40 	sub.w	lr, r3, #64	@ 0x40
34002c98:	f1de 0300 	rsbs	r3, lr, #0
34002c9c:	eb43 030e 	adc.w	r3, r3, lr
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34002ca0:	f010 0201 	ands.w	r2, r0, #1
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34002ca4:	ea47 37c3 	orr.w	r7, r7, r3, lsl #15
  int nbits_in = conf->nbits_in;
34002ca8:	4631      	mov	r1, r6
  int nbits_out = conf->nbits_out;
34002caa:	4663      	mov	r3, ip
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34002cac:	9201      	str	r2, [sp, #4]
34002cae:	f000 0940 	and.w	r9, r0, #64	@ 0x40
34002cb2:	f040 80a9 	bne.w	34002e08 <LL_Streng_TensorInit+0x1f4>
34002cb6:	4566      	cmp	r6, ip
34002cb8:	bf8c      	ite	hi
34002cba:	2200      	movhi	r2, #0
34002cbc:	2201      	movls	r2, #1
  switch (io_case)
34002cbe:	2a03      	cmp	r2, #3
34002cc0:	f000 80b2 	beq.w	34002e28 <LL_Streng_TensorInit+0x214>
34002cc4:	2a01      	cmp	r2, #1
34002cc6:	f000 80aa 	beq.w	34002e1e <LL_Streng_TensorInit+0x20a>
    nbits_in = nbits_out;
34002cca:	4661      	mov	r1, ip
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34002ccc:	eba6 020c 	sub.w	r2, r6, ip
    if (conf->mem_lsb)
34002cd0:	0603      	lsls	r3, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34002cd2:	bf4b      	itete	mi
34002cd4:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
34002cd6:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34002cd8:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
34002cdc:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    in_bits[0] = _LL_min(8, nbits_in);
34002ce0:	2908      	cmp	r1, #8
34002ce2:	468e      	mov	lr, r1
34002ce4:	bfa8      	it	ge
34002ce6:	f04f 0e08 	movge.w	lr, #8
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34002cea:	2908      	cmp	r1, #8
34002cec:	f340 8099 	ble.w	34002e22 <LL_Streng_TensorInit+0x20e>
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
34002cf0:	2910      	cmp	r1, #16
34002cf2:	bfcb      	itete	gt
34002cf4:	f1a1 0310 	subgt.w	r3, r1, #16
34002cf8:	2300      	movle	r3, #0
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34002cfa:	2108      	movgt	r1, #8
34002cfc:	3908      	suble	r1, #8
    if (conf->align_right)
34002cfe:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
34002d02:	f1b9 0f00 	cmp.w	r9, #0
34002d06:	d10b      	bne.n	34002d20 <LL_Streng_TensorInit+0x10c>
      if (nbits_out > 16)
34002d08:	f1bc 0f10 	cmp.w	ip, #16
34002d0c:	f300 80b2 	bgt.w	34002e74 <LL_Streng_TensorInit+0x260>
      else if (nbits_out > 8)
34002d10:	f1bc 0f08 	cmp.w	ip, #8
      else if (nbits_in > 8)
34002d14:	f340 80b2 	ble.w	34002e7c <LL_Streng_TensorInit+0x268>
34002d18:	4673      	mov	r3, lr
        ch_bits[0] = out_bits[1];
34002d1a:	468e      	mov	lr, r1
        ch_bits[1] = out_bits[0];
34002d1c:	4619      	mov	r1, r3
  int ch_bits[3] = {0, 0, 0};
34002d1e:	465b      	mov	r3, fp
  t = ATON_STRENG_CTRL_SET_SIZE0(t, ch_bits[0]);
34002d20:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
  ATON_STRENG_CTRL_SET(id, t);
34002d24:	f504 24b0 	add.w	r4, r4, #360448	@ 0x58000
  t = ATON_STRENG_CTRL_SET_SIZE1(t, ch_bits[1]);
34002d28:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
  ATON_STRENG_CTRL_SET(id, t);
34002d2c:	34e5      	adds	r4, #229	@ 0xe5
  t = ATON_STRENG_CTRL_SET_SIZE2(t, ch_bits[2]);
34002d2e:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
  ATON_STRENG_CTRL_SET(id, t);
34002d32:	0324      	lsls	r4, r4, #12
34002d34:	6027      	str	r7, [r4, #0]
  ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_ADDR_ADDR(id)), conf->addr_base.i,
34002d36:	e9d5 7e01 	ldrd	r7, lr, [r5, #4]
34002d3a:	eb07 030e 	add.w	r3, r7, lr
34002d3e:	60a3      	str	r3, [r4, #8]
  if (conf->raw)
34002d40:	0783      	lsls	r3, r0, #30
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002d42:	6a69      	ldr	r1, [r5, #36]	@ 0x24
  if (conf->raw)
34002d44:	f140 809d 	bpl.w	34002e82 <LL_Streng_TensorInit+0x26e>
    if (conf->frame_count)
34002d48:	696b      	ldr	r3, [r5, #20]
34002d4a:	b94b      	cbnz	r3, 34002d60 <LL_Streng_TensorInit+0x14c>
      t = (LL_Streng_len(conf) * 8) / (conf->dir == 0 ? conf->nbits_in : conf->nbits_out);
34002d4c:	f010 0f01 	tst.w	r0, #1
34002d50:	bf18      	it	ne
34002d52:	4666      	movne	r6, ip
    return conf->addr_base.p + conf->offset_limit;
  }

  static inline uint32_t LL_Streng_len(const LL_Streng_TensorInitTypeDef *conf)
  {
    return conf->offset_end - conf->offset_start;
34002d54:	68eb      	ldr	r3, [r5, #12]
34002d56:	eba3 030e 	sub.w	r3, r3, lr
34002d5a:	00db      	lsls	r3, r3, #3
34002d5c:	fbb3 f3f6 	udiv	r3, r3, r6
  uint32_t t_streng_cid_cache = ATON_STRENG_CID_CACHE_DT;
34002d60:	2000      	movs	r0, #0
    ATON_STRENG_FSIZE_SET(id, t);
34002d62:	60e3      	str	r3, [r4, #12]
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
34002d64:	6aab      	ldr	r3, [r5, #40]	@ 0x28
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
34002d66:	f36f 010f 	bfc	r1, #0, #16
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
34002d6a:	61a3      	str	r3, [r4, #24]
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
34002d6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
34002d6e:	6223      	str	r3, [r4, #32]
  ATON_STRENG_FRAME_RPT_SET(id, conf->frame_loop_cnt);
34002d70:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
34002d72:	61e3      	str	r3, [r4, #28]
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
34002d74:	f041 0306 	orr.w	r3, r1, #6
  ATON_STRENG_LIMITEN_SET(id, t);
34002d78:	6323      	str	r3, [r4, #48]	@ 0x30
  if (/*(conf->dir == 0) && */ (conf->offset_limit != 0x0))
34002d7a:	692b      	ldr	r3, [r5, #16]
34002d7c:	b12b      	cbz	r3, 34002d8a <LL_Streng_TensorInit+0x176>
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34002d7e:	441f      	add	r7, r3
    t = ATON_STRENG_LIMITEN_SET_STOPPREFTC(t, 1);
34002d80:	f041 0107 	orr.w	r1, r1, #7
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34002d84:	3f01      	subs	r7, #1
    ATON_STRENG_LIMITEN_SET(id, t);
34002d86:	6321      	str	r1, [r4, #48]	@ 0x30
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34002d88:	63a7      	str	r7, [r4, #56]	@ 0x38
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
34002d8a:	7869      	ldrb	r1, [r5, #1]
  if ((conf->dir == 0) && conf->sync_with_other)
34002d8c:	f028 08fe 	bic.w	r8, r8, #254	@ 0xfe
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
34002d90:	f3c1 1380 	ubfx	r3, r1, #6, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
34002d94:	f3c1 1640 	ubfx	r6, r1, #5, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
34002d98:	011b      	lsls	r3, r3, #4
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d9a:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CID(t_streng_cid_cache, conf->bus_cid);
34002d9e:	f3c1 0682 	ubfx	r6, r1, #2, #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002da2:	4333      	orrs	r3, r6
34002da4:	78ae      	ldrb	r6, [r5, #2]
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_PFETCH(t_streng_cid_cache, conf->bus_pfetch);
34002da6:	09c9      	lsrs	r1, r1, #7
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002da8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  if ((conf->dir == 0) && conf->sync_with_other)
34002dac:	ea4f 58c8 	mov.w	r8, r8, lsl #23
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002db0:	f006 0103 	and.w	r1, r6, #3
34002db4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
  if ((conf->dir == 0) && conf->sync_with_other)
34002db8:	ea4f 58d8 	mov.w	r8, r8, lsr #23
  if (conf->dir == 1)
34002dbc:	9901      	ldr	r1, [sp, #4]
  ATON_STRENG_LIMIT_SET(id, conf->frame_tot_cnt);
34002dbe:	f8c4 a034 	str.w	sl, [r4, #52]	@ 0x34
  if ((conf->dir == 0) && conf->sync_with_other)
34002dc2:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002dc6:	ea43 0300 	orr.w	r3, r3, r0
  if (conf->dir == 1)
34002dca:	ea4f 40c1 	mov.w	r0, r1, lsl #19
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
34002dce:	bf09      	itett	eq
34002dd0:	78e9      	ldrbeq	r1, [r5, #3]
  t = ATON_STRENG_EVENT_SET_EN_ILLCFG(t, 1); // Enable Illegal Configuration interrupt
34002dd2:	f440 1180 	orrne.w	r1, r0, #1048576	@ 0x100000
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
34002dd6:	0609      	lsleq	r1, r1, #24
34002dd8:	f001 51f8 	andeq.w	r1, r1, #520093696	@ 0x1f000000
34002ddc:	bf08      	it	eq
34002dde:	4301      	orreq	r1, r0
  ATON_STRENG_POS_SET(id, t);
34002de0:	f04f 0024 	mov.w	r0, #36	@ 0x24
34002de4:	6260      	str	r0, [r4, #36]	@ 0x24
  ATON_STRENG_STRD_SET(id, t_streng_strd);
34002de6:	6162      	str	r2, [r4, #20]
  ATON_STRENG_CID_CACHE_SET(id, t_streng_cid_cache);
34002de8:	64a3      	str	r3, [r4, #72]	@ 0x48
  t = ATON_STRENG_ENCR_MSB_SET_EN(t, conf->cipher_en);
34002dea:	f3c6 0380 	ubfx	r3, r6, #2, #1
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
34002dee:	f3c6 06c0 	ubfx	r6, r6, #3, #1
34002df2:	ea4f 3686 	mov.w	r6, r6, lsl #14
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
34002df6:	bf08      	it	eq
34002df8:	f441 0110 	orreq.w	r1, r1, #9437184	@ 0x900000
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
34002dfc:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  ATON_STRENG_EVENT_SET(id, t_streng_event);
34002e00:	62a1      	str	r1, [r4, #40]	@ 0x28
  return 0;
34002e02:	2000      	movs	r0, #0
  ATON_STRENG_ENCR_MSB_SET(id, t);
34002e04:	6466      	str	r6, [r4, #68]	@ 0x44
  return 0;
34002e06:	e70e      	b.n	34002c26 <LL_Streng_TensorInit+0x12>
  int io_case = ((conf->dir != 0) << 1);
34002e08:	0042      	lsls	r2, r0, #1
34002e0a:	f002 0202 	and.w	r2, r2, #2
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34002e0e:	4566      	cmp	r6, ip
34002e10:	ea52 9222 			@ <UNDEFINED> instruction: 0xea529222
  switch (io_case)
34002e14:	2a02      	cmp	r2, #2
34002e16:	f47f af52 	bne.w	34002cbe <LL_Streng_TensorInit+0xaa>
34002e1a:	2200      	movs	r2, #0
34002e1c:	e00f      	b.n	34002e3e <LL_Streng_TensorInit+0x22a>
34002e1e:	2200      	movs	r2, #0
34002e20:	e75e      	b.n	34002ce0 <LL_Streng_TensorInit+0xcc>
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34002e22:	2100      	movs	r1, #0
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
34002e24:	460b      	mov	r3, r1
34002e26:	e76a      	b.n	34002cfe <LL_Streng_TensorInit+0xea>
    nbits_out = nbits_in;
34002e28:	4633      	mov	r3, r6
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34002e2a:	ebac 0206 	sub.w	r2, ip, r6
    if (conf->mem_lsb)
34002e2e:	0601      	lsls	r1, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34002e30:	bf4b      	itete	mi
34002e32:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
34002e34:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34002e36:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
34002e3a:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    out_bits[0] = _LL_min(8, nbits_out);
34002e3e:	2b08      	cmp	r3, #8
34002e40:	469e      	mov	lr, r3
34002e42:	bfa8      	it	ge
34002e44:	f04f 0e08 	movge.w	lr, #8
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34002e48:	2b08      	cmp	r3, #8
34002e4a:	dd10      	ble.n	34002e6e <LL_Streng_TensorInit+0x25a>
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34002e4c:	2b10      	cmp	r3, #16
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34002e4e:	bfd5      	itete	le
34002e50:	f1a3 0108 	suble.w	r1, r3, #8
34002e54:	2108      	movgt	r1, #8
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34002e56:	2300      	movle	r3, #0
34002e58:	3b10      	subgt	r3, #16
    if (conf->align_right)
34002e5a:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
34002e5e:	f1b9 0f00 	cmp.w	r9, #0
34002e62:	f47f af5d 	bne.w	34002d20 <LL_Streng_TensorInit+0x10c>
      if (nbits_in > 16)
34002e66:	2e10      	cmp	r6, #16
34002e68:	dc04      	bgt.n	34002e74 <LL_Streng_TensorInit+0x260>
      else if (nbits_in > 8)
34002e6a:	2e08      	cmp	r6, #8
34002e6c:	e752      	b.n	34002d14 <LL_Streng_TensorInit+0x100>
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34002e6e:	2100      	movs	r1, #0
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34002e70:	460b      	mov	r3, r1
34002e72:	e7f2      	b.n	34002e5a <LL_Streng_TensorInit+0x246>
34002e74:	46f1      	mov	r9, lr
        ch_bits[0] = out_bits[2];
34002e76:	469e      	mov	lr, r3
        ch_bits[2] = out_bits[0];
34002e78:	464b      	mov	r3, r9
34002e7a:	e751      	b.n	34002d20 <LL_Streng_TensorInit+0x10c>
  int ch_bits[3] = {0, 0, 0};
34002e7c:	465b      	mov	r3, fp
34002e7e:	4659      	mov	r1, fp
34002e80:	e74e      	b.n	34002d20 <LL_Streng_TensorInit+0x10c>
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
34002e82:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
    t = ATON_STRENG_FSIZE_SET_WIDTH(t, conf->fwidth);
34002e86:	b2b0      	uxth	r0, r6
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002e88:	434e      	muls	r6, r1
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
34002e8a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002e8e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
    ATON_STRENG_FSIZE_SET(id, t);
34002e90:	60e3      	str	r3, [r4, #12]
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002e92:	2800      	cmp	r0, #0
34002e94:	bf08      	it	eq
34002e96:	4630      	moveq	r0, r6
    t_streng_strd = ATON_STRENG_STRD_SET_LOFF(t_streng_strd, line_offset);
34002e98:	b283      	uxth	r3, r0
34002e9a:	431a      	orrs	r2, r3
    t = ATON_STRENG_DEPTH_SET_SIZE(t, conf->batch_depth);
34002e9c:	8c2b      	ldrh	r3, [r5, #32]
    t = ATON_STRENG_CID_CACHE_SET_LOFF_MSB(t, (line_offset >> ATON_STRENG_STRD_LOFF_W));
34002e9e:	f36f 000f 	bfc	r0, #0, #16
    t = ATON_STRENG_DEPTH_SET_OFFSET(t, conf->batch_offset);
34002ea2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ATON_STRENG_DEPTH_SET(id, t);
34002ea6:	6123      	str	r3, [r4, #16]
34002ea8:	e75c      	b.n	34002d64 <LL_Streng_TensorInit+0x150>
	...

34002eac <LL_EpochCtrl_Init>:
  if (id >= ATON_EPOCHCTRL_NUM)
34002eac:	2800      	cmp	r0, #0
{
34002eae:	b510      	push	{r4, lr}
34002eb0:	460c      	mov	r4, r1
  if (id >= ATON_EPOCHCTRL_NUM)
34002eb2:	dc0e      	bgt.n	34002ed2 <LL_EpochCtrl_Init+0x26>
  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
34002eb4:	3019      	adds	r0, #25
34002eb6:	f7ff fe9d 	bl	34002bf4 <LL_ATON_EnableClock>
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
34002eba:	7923      	ldrb	r3, [r4, #4]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
34002ebc:	4a08      	ldr	r2, [pc, #32]	@ (34002ee0 <LL_EpochCtrl_Init+0x34>)
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
34002ebe:	f003 0301 	and.w	r3, r3, #1
34002ec2:	00db      	lsls	r3, r3, #3
  ATON_EPOCHCTRL_CTRL_SET(id, t);
34002ec4:	6013      	str	r3, [r2, #0]
  if (conf->blobaddr & 0x7)
34002ec6:	6823      	ldr	r3, [r4, #0]
34002ec8:	f013 0007 	ands.w	r0, r3, #7
34002ecc:	d104      	bne.n	34002ed8 <LL_EpochCtrl_Init+0x2c>
  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
34002ece:	6093      	str	r3, [r2, #8]
}
34002ed0:	bd10      	pop	{r4, pc}
    return LL_ATON_INVALID_ID;
34002ed2:	f04f 30ff 	mov.w	r0, #4294967295
34002ed6:	e7fb      	b.n	34002ed0 <LL_EpochCtrl_Init+0x24>
    return LL_ATON_INVALID_PARAM;
34002ed8:	f06f 0001 	mvn.w	r0, #1
34002edc:	e7f8      	b.n	34002ed0 <LL_EpochCtrl_Init+0x24>
34002ede:	bf00      	nop
34002ee0:	580fe000 	.word	0x580fe000

34002ee4 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
34002ee4:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
34002ee6:	2401      	movs	r4, #1
34002ee8:	2500      	movs	r5, #0
34002eea:	ea54 050d 	orrs.w	r5, r4, sp
34002eee:	4a03      	ldr	r2, [pc, #12]	@ (34002efc <LL_ATON_DisableClock+0x18>)
34002ef0:	6913      	ldr	r3, [r2, #16]
34002ef2:	ea23 0304 	bic.w	r3, r3, r4
34002ef6:	6113      	str	r3, [r2, #16]
#endif
}
34002ef8:	bd30      	pop	{r4, r5, pc}
34002efa:	bf00      	nop
34002efc:	580e0000 	.word	0x580e0000

34002f00 <LL_ATON_DisableUnits_Init>:
{
34002f00:	b570      	push	{r4, r5, r6, lr}
34002f02:	4605      	mov	r5, r0
  for (i = 0; i < n; i++)
34002f04:	2400      	movs	r4, #0
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
34002f06:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
34002f08:	428c      	cmp	r4, r1
34002f0a:	db01      	blt.n	34002f10 <LL_ATON_DisableUnits_Init+0x10>
  return LL_ATON_OK;
34002f0c:	2000      	movs	r0, #0
}
34002f0e:	bd70      	pop	{r4, r5, r6, pc}
    switch (unitType)
34002f10:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
34002f14:	f836 0024 	ldrh.w	r0, [r6, r4, lsl #2]
    switch (unitType)
34002f18:	2b08      	cmp	r3, #8
34002f1a:	d87a      	bhi.n	34003012 <LL_ATON_DisableUnits_Init+0x112>
34002f1c:	e8df f003 	tbb	[pc, r3]
34002f20:	29187905 	.word	0x29187905
34002f24:	795b4a3a 	.word	0x795b4a3a
34002f28:	6b          	.byte	0x6b
34002f29:	00          	.byte	0x00
      ATON_DISABLE_CLR_CONFCLR(STRENG, unitId);
34002f2a:	2202      	movs	r2, #2
34002f2c:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f30:	33e5      	adds	r3, #229	@ 0xe5
34002f32:	031b      	lsls	r3, r3, #12
34002f34:	601a      	str	r2, [r3, #0]
34002f36:	681a      	ldr	r2, [r3, #0]
34002f38:	0792      	lsls	r2, r2, #30
34002f3a:	d4fc      	bmi.n	34002f36 <LL_ATON_DisableUnits_Init+0x36>
34002f3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002f40:	601a      	str	r2, [r3, #0]
34002f42:	681a      	ldr	r2, [r3, #0]
34002f44:	0052      	lsls	r2, r2, #1
34002f46:	d4fc      	bmi.n	34002f42 <LL_ATON_DisableUnits_Init+0x42>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
34002f48:	f7ff ffcc 	bl	34002ee4 <LL_ATON_DisableClock>
  for (i = 0; i < n; i++)
34002f4c:	3401      	adds	r4, #1
34002f4e:	e7db      	b.n	34002f08 <LL_ATON_DisableUnits_Init+0x8>
      ATON_DISABLE_CLR_CONFCLR(CONVACC, unitId);
34002f50:	2202      	movs	r2, #2
34002f52:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f56:	33ef      	adds	r3, #239	@ 0xef
34002f58:	031b      	lsls	r3, r3, #12
34002f5a:	601a      	str	r2, [r3, #0]
34002f5c:	681a      	ldr	r2, [r3, #0]
34002f5e:	0792      	lsls	r2, r2, #30
34002f60:	d4fc      	bmi.n	34002f5c <LL_ATON_DisableUnits_Init+0x5c>
34002f62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002f66:	601a      	str	r2, [r3, #0]
34002f68:	681a      	ldr	r2, [r3, #0]
34002f6a:	0052      	lsls	r2, r2, #1
34002f6c:	d4fc      	bmi.n	34002f68 <LL_ATON_DisableUnits_Init+0x68>
      LL_ATON_DisableClock(ATON_CONVACC_CLKB_CLK(unitId));
34002f6e:	300a      	adds	r0, #10
34002f70:	e7ea      	b.n	34002f48 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(DECUN, unitId);
34002f72:	2202      	movs	r2, #2
34002f74:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f78:	33f3      	adds	r3, #243	@ 0xf3
34002f7a:	031b      	lsls	r3, r3, #12
34002f7c:	601a      	str	r2, [r3, #0]
34002f7e:	681a      	ldr	r2, [r3, #0]
34002f80:	0792      	lsls	r2, r2, #30
34002f82:	d4fc      	bmi.n	34002f7e <LL_ATON_DisableUnits_Init+0x7e>
34002f84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002f88:	601a      	str	r2, [r3, #0]
34002f8a:	681a      	ldr	r2, [r3, #0]
34002f8c:	0052      	lsls	r2, r2, #1
34002f8e:	d4fc      	bmi.n	34002f8a <LL_ATON_DisableUnits_Init+0x8a>
      LL_ATON_DisableClock(ATON_DECUN_CLKB_CLK(unitId));
34002f90:	300e      	adds	r0, #14
34002f92:	e7d9      	b.n	34002f48 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ACTIV, unitId);
34002f94:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f98:	4a1f      	ldr	r2, [pc, #124]	@ (34003018 <LL_ATON_DisableUnits_Init+0x118>)
34002f9a:	33f5      	adds	r3, #245	@ 0xf5
34002f9c:	031b      	lsls	r3, r3, #12
34002f9e:	601a      	str	r2, [r3, #0]
34002fa0:	681a      	ldr	r2, [r3, #0]
34002fa2:	0792      	lsls	r2, r2, #30
34002fa4:	d4fc      	bmi.n	34002fa0 <LL_ATON_DisableUnits_Init+0xa0>
34002fa6:	4a1d      	ldr	r2, [pc, #116]	@ (3400301c <LL_ATON_DisableUnits_Init+0x11c>)
34002fa8:	601a      	str	r2, [r3, #0]
34002faa:	681a      	ldr	r2, [r3, #0]
34002fac:	0052      	lsls	r2, r2, #1
34002fae:	d4fc      	bmi.n	34002faa <LL_ATON_DisableUnits_Init+0xaa>
      LL_ATON_DisableClock(ATON_ACTIV_CLKB_CLK(unitId));
34002fb0:	3010      	adds	r0, #16
34002fb2:	e7c9      	b.n	34002f48 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ARITH, unitId);
34002fb4:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002fb8:	4a19      	ldr	r2, [pc, #100]	@ (34003020 <LL_ATON_DisableUnits_Init+0x120>)
34002fba:	33f7      	adds	r3, #247	@ 0xf7
34002fbc:	031b      	lsls	r3, r3, #12
34002fbe:	601a      	str	r2, [r3, #0]
34002fc0:	681a      	ldr	r2, [r3, #0]
34002fc2:	0792      	lsls	r2, r2, #30
34002fc4:	d4fc      	bmi.n	34002fc0 <LL_ATON_DisableUnits_Init+0xc0>
34002fc6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
34002fca:	601a      	str	r2, [r3, #0]
34002fcc:	681a      	ldr	r2, [r3, #0]
34002fce:	0052      	lsls	r2, r2, #1
34002fd0:	d4fc      	bmi.n	34002fcc <LL_ATON_DisableUnits_Init+0xcc>
      LL_ATON_DisableClock(ATON_ARITH_CLKB_CLK(unitId));
34002fd2:	3012      	adds	r0, #18
34002fd4:	e7b8      	b.n	34002f48 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(POOL, unitId);
34002fd6:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002fda:	4a12      	ldr	r2, [pc, #72]	@ (34003024 <LL_ATON_DisableUnits_Init+0x124>)
34002fdc:	33fb      	adds	r3, #251	@ 0xfb
34002fde:	031b      	lsls	r3, r3, #12
34002fe0:	601a      	str	r2, [r3, #0]
34002fe2:	681a      	ldr	r2, [r3, #0]
34002fe4:	0792      	lsls	r2, r2, #30
34002fe6:	d4fc      	bmi.n	34002fe2 <LL_ATON_DisableUnits_Init+0xe2>
34002fe8:	4a0f      	ldr	r2, [pc, #60]	@ (34003028 <LL_ATON_DisableUnits_Init+0x128>)
34002fea:	601a      	str	r2, [r3, #0]
34002fec:	681a      	ldr	r2, [r3, #0]
34002fee:	0052      	lsls	r2, r2, #1
34002ff0:	d4fc      	bmi.n	34002fec <LL_ATON_DisableUnits_Init+0xec>
      LL_ATON_DisableClock(ATON_POOL_CLKB_CLK(unitId));
34002ff2:	3016      	adds	r0, #22
34002ff4:	e7a8      	b.n	34002f48 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(RECBUF, unitId);
34002ff6:	2202      	movs	r2, #2
34002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (3400302c <LL_ATON_DisableUnits_Init+0x12c>)
34002ffa:	601a      	str	r2, [r3, #0]
34002ffc:	681a      	ldr	r2, [r3, #0]
34002ffe:	0792      	lsls	r2, r2, #30
34003000:	d4fc      	bmi.n	34002ffc <LL_ATON_DisableUnits_Init+0xfc>
34003002:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34003006:	601a      	str	r2, [r3, #0]
34003008:	681a      	ldr	r2, [r3, #0]
3400300a:	0052      	lsls	r2, r2, #1
3400300c:	d4fc      	bmi.n	34003008 <LL_ATON_DisableUnits_Init+0x108>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
3400300e:	3018      	adds	r0, #24
34003010:	e79a      	b.n	34002f48 <LL_ATON_DisableUnits_Init+0x48>
    switch (unitType)
34003012:	f06f 0001 	mvn.w	r0, #1
34003016:	e77a      	b.n	34002f0e <LL_ATON_DisableUnits_Init+0xe>
34003018:	00881082 	.word	0x00881082
3400301c:	40881080 	.word	0x40881080
34003020:	08000002 	.word	0x08000002
34003024:	00420002 	.word	0x00420002
34003028:	40420000 	.word	0x40420000
3400302c:	580fd000 	.word	0x580fd000

34003030 <LL_Buffer_addr_start>:
    return eb->blob_address;
  }

  static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf)
  {
    if (buf->is_user_allocated)
34003030:	7d02      	ldrb	r2, [r0, #20]
    {
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
34003032:	6843      	ldr	r3, [r0, #4]
    if (buf->is_user_allocated)
34003034:	b102      	cbz	r2, 34003038 <LL_Buffer_addr_start+0x8>
      return *tmp;
34003036:	681b      	ldr	r3, [r3, #0]
    return buf->addr_base.p;
  }

  static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf)
  {
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34003038:	6880      	ldr	r0, [r0, #8]
  }
3400303a:	4418      	add	r0, r3
3400303c:	4770      	bx	lr
	...

34003040 <__ll_lib_stop_transfer>:
  LL_Switch_Init_NoReset(switch_init, 1);
  LL_ATON_EnableUnits_Init(dma_units, 2);
}

static inline void __ll_lib_stop_transfer(void)
{
34003040:	b508      	push	{r3, lr}
  LL_Switch_Deinit(switch_init, 1);
34003042:	2101      	movs	r1, #1
34003044:	4804      	ldr	r0, [pc, #16]	@ (34003058 <__ll_lib_stop_transfer+0x18>)
34003046:	f7ff fdbf 	bl	34002bc8 <LL_Switch_Deinit>
  LL_ATON_DisableUnits_Init(dma_units, 2);
}
3400304a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DisableUnits_Init(dma_units, 2);
3400304e:	2102      	movs	r1, #2
34003050:	4802      	ldr	r0, [pc, #8]	@ (3400305c <__ll_lib_stop_transfer+0x1c>)
34003052:	f7ff bf55 	b.w	34002f00 <LL_ATON_DisableUnits_Init>
34003056:	bf00      	nop
34003058:	340cc650 	.word	0x340cc650
3400305c:	340cc640 	.word	0x340cc640

34003060 <__LL_LIB_DMA_Transfer_End_EpochBlock>:
  __ll_lib_start_transfer(params);
}

static void __LL_LIB_DMA_Transfer_End_EpochBlock(const void *epoch_block)
{
  __ll_lib_stop_transfer();
34003060:	f7ff bfee 	b.w	34003040 <__ll_lib_stop_transfer>

34003064 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
34003064:	b508      	push	{r3, lr}
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34003066:	4b07      	ldr	r3, [pc, #28]	@ (34003084 <__LL_ATON_RT_SetWaitMask+0x20>)
34003068:	681b      	ldr	r3, [r3, #0]
3400306a:	b92b      	cbnz	r3, 34003078 <__LL_ATON_RT_SetWaitMask+0x14>
3400306c:	216c      	movs	r1, #108	@ 0x6c
3400306e:	4b06      	ldr	r3, [pc, #24]	@ (34003088 <__LL_ATON_RT_SetWaitMask+0x24>)
34003070:	4a06      	ldr	r2, [pc, #24]	@ (3400308c <__LL_ATON_RT_SetWaitMask+0x28>)
34003072:	4807      	ldr	r0, [pc, #28]	@ (34003090 <__LL_ATON_RT_SetWaitMask+0x2c>)
34003074:	f01c fcc8 	bl	3401fa08 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
34003078:	4b06      	ldr	r3, [pc, #24]	@ (34003094 <__LL_ATON_RT_SetWaitMask+0x30>)
3400307a:	6018      	str	r0, [r3, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3400307c:	43c0      	mvns	r0, r0
3400307e:	4b06      	ldr	r3, [pc, #24]	@ (34003098 <__LL_ATON_RT_SetWaitMask+0x34>)
34003080:	6258      	str	r0, [r3, #36]	@ 0x24
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
34003082:	bd08      	pop	{r3, pc}
34003084:	340d1604 	.word	0x340d1604
34003088:	3402b20c 	.word	0x3402b20c
3400308c:	34030f32 	.word	0x34030f32
34003090:	3402b236 	.word	0x3402b236
34003094:	340d1600 	.word	0x340d1600
34003098:	580e1000 	.word	0x580e1000

3400309c <__ll_lib_strswitch_set_dmas>:
{
3400309c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  switch_init[0].source0 = __atonn_getSrcPortID(STRSWITCH, 0, STRENG, dma_in, 0);
340030a0:	2400      	movs	r4, #0
{
340030a2:	460d      	mov	r5, r1
340030a4:	4606      	mov	r6, r0
340030a6:	4617      	mov	r7, r2
  switch_init[0].source0 = __atonn_getSrcPortID(STRSWITCH, 0, STRENG, dma_in, 0);
340030a8:	4621      	mov	r1, r4
340030aa:	4622      	mov	r2, r4
340030ac:	b2c3      	uxtb	r3, r0
340030ae:	9400      	str	r4, [sp, #0]
340030b0:	4620      	mov	r0, r4
340030b2:	f7ff fc11 	bl	340028d8 <__atonn_getSrcPortID>
340030b6:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 34003100 <__ll_lib_strswitch_set_dmas+0x64>
  switch_init[0].dest = __atonn_getDstPortID(STRSWITCH, 0, STRENG, dma_out, 0);
340030ba:	4622      	mov	r2, r4
  switch_init[0].source0 = __atonn_getSrcPortID(STRSWITCH, 0, STRENG, dma_in, 0);
340030bc:	f8c8 0000 	str.w	r0, [r8]
  switch_init[0].dest = __atonn_getDstPortID(STRSWITCH, 0, STRENG, dma_out, 0);
340030c0:	b2eb      	uxtb	r3, r5
340030c2:	4621      	mov	r1, r4
340030c4:	4620      	mov	r0, r4
340030c6:	9400      	str	r4, [sp, #0]
340030c8:	f7ff fc9a 	bl	34002a00 <__atonn_getDstPortID>
  dma_units[1].unit = dma_in_streng;
340030cc:	4b09      	ldr	r3, [pc, #36]	@ (340030f4 <__ll_lib_strswitch_set_dmas+0x58>)
  dma_unit_id[1] = dma_in;
340030ce:	4a0a      	ldr	r2, [pc, #40]	@ (340030f8 <__ll_lib_strswitch_set_dmas+0x5c>)
  dma_units[1].unit = dma_in_streng;
340030d0:	711c      	strb	r4, [r3, #4]
  AccelUnits dma_in_streng = {STRENG, dma_in};
340030d2:	80de      	strh	r6, [r3, #6]
  dma_units[0].unit = dma_out_streng;
340030d4:	701c      	strb	r4, [r3, #0]
  AccelUnits dma_out_streng = {STRENG, dma_out};
340030d6:	805d      	strh	r5, [r3, #2]
  uint32_t wait_mask = (0x1 << dma_out);
340030d8:	2301      	movs	r3, #1
  dma_unit_id[1] = dma_in;
340030da:	6056      	str	r6, [r2, #4]
  dma_unit_id[0] = dma_out;
340030dc:	6015      	str	r5, [r2, #0]
  params->g_wait_mask = wait_mask;
340030de:	4a07      	ldr	r2, [pc, #28]	@ (340030fc <__ll_lib_strswitch_set_dmas+0x60>)
  uint32_t wait_mask = (0x1 << dma_out);
340030e0:	40ab      	lsls	r3, r5
  params->g_wait_mask = wait_mask;
340030e2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
  switch_init[0].dest = __atonn_getDstPortID(STRSWITCH, 0, STRENG, dma_out, 0);
340030e6:	f8c8 0008 	str.w	r0, [r8, #8]
  epoch_block_array->wait_mask = wait_mask;
340030ea:	60fb      	str	r3, [r7, #12]
}
340030ec:	b002      	add	sp, #8
340030ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340030f2:	bf00      	nop
340030f4:	340cc640 	.word	0x340cc640
340030f8:	340cc648 	.word	0x340cc648
340030fc:	340d0e64 	.word	0x340d0e64
34003100:	340cc650 	.word	0x340cc650

34003104 <LL_ATON_RT_Insert_LibEpochBlockArray>:
  }

  /*** AtoNN API Functions ***/

  static inline void LL_ATON_RT_Insert_LibEpochBlockArray(const LL_ATON_RT_EpochBlockItem_t *new_epoch_block_array)
  {
34003104:	b508      	push	{r3, lr}
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34003106:	4b0d      	ldr	r3, [pc, #52]	@ (3400313c <LL_ATON_RT_Insert_LibEpochBlockArray+0x38>)
34003108:	681a      	ldr	r2, [r3, #0]
3400310a:	b92a      	cbnz	r2, 34003118 <LL_ATON_RT_Insert_LibEpochBlockArray+0x14>
3400310c:	21af      	movs	r1, #175	@ 0xaf
3400310e:	4b0c      	ldr	r3, [pc, #48]	@ (34003140 <LL_ATON_RT_Insert_LibEpochBlockArray+0x3c>)
34003110:	4a0c      	ldr	r2, [pc, #48]	@ (34003144 <LL_ATON_RT_Insert_LibEpochBlockArray+0x40>)

    // only one saved context at a time allowed!
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.next_epoch_block == NULL);
34003112:	480d      	ldr	r0, [pc, #52]	@ (34003148 <LL_ATON_RT_Insert_LibEpochBlockArray+0x44>)
34003114:	f01c fc78 	bl	3401fa08 <__assert_func>
34003118:	681a      	ldr	r2, [r3, #0]
3400311a:	68d2      	ldr	r2, [r2, #12]
3400311c:	b11a      	cbz	r2, 34003126 <LL_ATON_RT_Insert_LibEpochBlockArray+0x22>
3400311e:	21b2      	movs	r1, #178	@ 0xb2
34003120:	4b0a      	ldr	r3, [pc, #40]	@ (3400314c <LL_ATON_RT_Insert_LibEpochBlockArray+0x48>)
34003122:	4a08      	ldr	r2, [pc, #32]	@ (34003144 <LL_ATON_RT_Insert_LibEpochBlockArray+0x40>)
34003124:	e7f5      	b.n	34003112 <LL_ATON_RT_Insert_LibEpochBlockArray+0xe>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.saved_current_epoch_block == NULL);
34003126:	681a      	ldr	r2, [r3, #0]
34003128:	6912      	ldr	r2, [r2, #16]
3400312a:	b11a      	cbz	r2, 34003134 <LL_ATON_RT_Insert_LibEpochBlockArray+0x30>
3400312c:	21b3      	movs	r1, #179	@ 0xb3
3400312e:	4b08      	ldr	r3, [pc, #32]	@ (34003150 <LL_ATON_RT_Insert_LibEpochBlockArray+0x4c>)
34003130:	4a04      	ldr	r2, [pc, #16]	@ (34003144 <LL_ATON_RT_Insert_LibEpochBlockArray+0x40>)
34003132:	e7ee      	b.n	34003112 <LL_ATON_RT_Insert_LibEpochBlockArray+0xe>

    __ll_current_aton_ip_owner->exec_state.next_epoch_block = new_epoch_block_array;
34003134:	681b      	ldr	r3, [r3, #0]
34003136:	60d8      	str	r0, [r3, #12]
  }
34003138:	bd08      	pop	{r3, pc}
3400313a:	bf00      	nop
3400313c:	340d1604 	.word	0x340d1604
34003140:	3402b20c 	.word	0x3402b20c
34003144:	34030f78 	.word	0x34030f78
34003148:	3402b236 	.word	0x3402b236
3400314c:	3402b292 	.word	0x3402b292
34003150:	3402b2d9 	.word	0x3402b2d9

34003154 <__ll_lib_prepare_inputs_epoch>:
  LL_ATON_ASSERT(ninputs <= __LL_MAX_TENSORS);
34003154:	2918      	cmp	r1, #24
{
34003156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34003158:	460d      	mov	r5, r1
3400315a:	4617      	mov	r7, r2
3400315c:	461e      	mov	r6, r3
  LL_ATON_ASSERT(ninputs <= __LL_MAX_TENSORS);
3400315e:	d905      	bls.n	3400316c <__ll_lib_prepare_inputs_epoch+0x18>
34003160:	21e6      	movs	r1, #230	@ 0xe6
34003162:	4b13      	ldr	r3, [pc, #76]	@ (340031b0 <__ll_lib_prepare_inputs_epoch+0x5c>)
34003164:	4a13      	ldr	r2, [pc, #76]	@ (340031b4 <__ll_lib_prepare_inputs_epoch+0x60>)
34003166:	4814      	ldr	r0, [pc, #80]	@ (340031b8 <__ll_lib_prepare_inputs_epoch+0x64>)
34003168:	f01c fc4e 	bl	3401fa08 <__assert_func>
  memcpy(inputs_copy, inputs, sizeof(LL_LIB_TensorInfo_TypeDef) * ninputs);
3400316c:	2238      	movs	r2, #56	@ 0x38
3400316e:	4b13      	ldr	r3, [pc, #76]	@ (340031bc <__ll_lib_prepare_inputs_epoch+0x68>)
34003170:	434a      	muls	r2, r1
34003172:	4601      	mov	r1, r0
34003174:	4618      	mov	r0, r3
34003176:	f01e fd7c 	bl	34021c72 <memcpy>
  params->g_tensors = inputs_copy;
3400317a:	f5a0 7484 	sub.w	r4, r0, #264	@ 0x108
  params->g_dma_in = *dma_in;
3400317e:	2248      	movs	r2, #72	@ 0x48
34003180:	4639      	mov	r1, r7
  params->g_num_tensors = ninputs;
34003182:	e940 5019 	strd	r5, r0, [r0, #-100]	@ 0x64
  params->g_dma_in = *dma_in;
34003186:	4620      	mov	r0, r4
34003188:	f01e fd73 	bl	34021c72 <memcpy>
  params->g_dma_out = *dma_out;
3400318c:	2248      	movs	r2, #72	@ 0x48
3400318e:	4631      	mov	r1, r6
34003190:	18a0      	adds	r0, r4, r2
34003192:	f01e fd6e 	bl	34021c72 <memcpy>
  params->g_dst_o_src = out_start;
34003196:	9b06      	ldr	r3, [sp, #24]
  params->g_size = nbytes_or_line_size;
34003198:	9a07      	ldr	r2, [sp, #28]
  params->g_dst_o_src = out_start;
3400319a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
  params->g_not_continuous = 0; // signals that destination is not written linearly
3400319e:	2300      	movs	r3, #0
  params->g_idx = 0;
340031a0:	e9c4 3224 	strd	r3, r2, [r4, #144]	@ 0x90
  params->g_not_continuous = 0; // signals that destination is not written linearly
340031a4:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
  params->g_offset_limit = 0;
340031a8:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
}
340031ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
340031ae:	bf00      	nop
340031b0:	3402b329 	.word	0x3402b329
340031b4:	34030f9d 	.word	0x34030f9d
340031b8:	3402b337 	.word	0x3402b337
340031bc:	340d0f6c 	.word	0x340d0f6c

340031c0 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0>:
 * @param  inputs list of input tensor info structures
 * @param  ninputs number of inputs
 * @param  dst destination address
 * @param  nbytes number of bytes to copy (-1 means: derive from `inputs` structure)
 */
static void __LL_ATON_LIB_DMA_Inputs_Memcpy(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
340031c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    /* prepare epoch */
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out, dst, nbytes);

    /* configure stream switch */
    __ll_lib_strswitch_set_dmas(dma_in, dma_out, _inputs_memcpy_epoch_block_array);
340031c2:	4c0a      	ldr	r4, [pc, #40]	@ (340031ec <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0+0x2c>)
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out, dst, nbytes);
340031c4:	e9cd 2300 	strd	r2, r3, [sp]
static void __LL_ATON_LIB_DMA_Inputs_Memcpy(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
340031c8:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out, dst, nbytes);
340031cc:	4b08      	ldr	r3, [pc, #32]	@ (340031f0 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0+0x30>)
340031ce:	4a09      	ldr	r2, [pc, #36]	@ (340031f4 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0+0x34>)
340031d0:	f7ff ffc0 	bl	34003154 <__ll_lib_prepare_inputs_epoch>
    __ll_lib_strswitch_set_dmas(dma_in, dma_out, _inputs_memcpy_epoch_block_array);
340031d4:	4628      	mov	r0, r5
340031d6:	4622      	mov	r2, r4
340031d8:	4631      	mov	r1, r6
340031da:	f7ff ff5f 	bl	3400309c <__ll_lib_strswitch_set_dmas>

    LL_ATON_RT_Insert_LibEpochBlockArray(_inputs_memcpy_epoch_block_array);
340031de:	4620      	mov	r0, r4
  }
  else
  {
    /* proceed to next epoch block */
  }
}
340031e0:	b002      	add	sp, #8
340031e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LL_ATON_RT_Insert_LibEpochBlockArray(_inputs_memcpy_epoch_block_array);
340031e6:	f7ff bf8d 	b.w	34003104 <LL_ATON_RT_Insert_LibEpochBlockArray>
340031ea:	bf00      	nop
340031ec:	340cc5f0 	.word	0x340cc5f0
340031f0:	34030fbc 	.word	0x34030fbc
340031f4:	34031004 	.word	0x34031004

340031f8 <__ll_lib_start_transfer.constprop.0>:
static inline void __ll_lib_start_transfer(__ll_lib_params_t *params)
340031f8:	b538      	push	{r3, r4, r5, lr}
  LL_Streng_TensorInit(dma_unit_id[1], &params->g_dma_in, 1);
340031fa:	4d0b      	ldr	r5, [pc, #44]	@ (34003228 <__ll_lib_start_transfer.constprop.0+0x30>)
340031fc:	4c0b      	ldr	r4, [pc, #44]	@ (3400322c <__ll_lib_start_transfer.constprop.0+0x34>)
340031fe:	4629      	mov	r1, r5
34003200:	2201      	movs	r2, #1
34003202:	6860      	ldr	r0, [r4, #4]
34003204:	f7ff fd06 	bl	34002c14 <LL_Streng_TensorInit>
  LL_Streng_TensorInit(dma_unit_id[0], &params->g_dma_out, 1);
34003208:	f105 0148 	add.w	r1, r5, #72	@ 0x48
3400320c:	2201      	movs	r2, #1
3400320e:	6820      	ldr	r0, [r4, #0]
34003210:	f7ff fd00 	bl	34002c14 <LL_Streng_TensorInit>
  LL_Switch_Init_NoReset(switch_init, 1);
34003214:	2101      	movs	r1, #1
34003216:	4806      	ldr	r0, [pc, #24]	@ (34003230 <__ll_lib_start_transfer.constprop.0+0x38>)
34003218:	f7ff fc9c 	bl	34002b54 <LL_Switch_Init_NoReset>
}
3400321c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LL_ATON_EnableUnits_Init(dma_units, 2);
34003220:	2102      	movs	r1, #2
34003222:	4804      	ldr	r0, [pc, #16]	@ (34003234 <__ll_lib_start_transfer.constprop.0+0x3c>)
34003224:	f7ff bb10 	b.w	34002848 <LL_ATON_EnableUnits_Init>
34003228:	340d0e64 	.word	0x340d0e64
3400322c:	340cc648 	.word	0x340cc648
34003230:	340cc650 	.word	0x340cc650
34003234:	340cc640 	.word	0x340cc640

34003238 <__LL_LIB_DMA_Transfer_Start_EpochBlock>:
  __ll_lib_start_transfer(params);
34003238:	f7ff bfde 	b.w	340031f8 <__ll_lib_start_transfer.constprop.0>

3400323c <LL_ATON_RT_DecCurrEpochBlock.constprop.0>:
  }

  static inline void LL_ATON_RT_DecCurrEpochBlock(uint32_t dec)
  {
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
3400323c:	4a12      	ldr	r2, [pc, #72]	@ (34003288 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x4c>)
  static inline void LL_ATON_RT_DecCurrEpochBlock(uint32_t dec)
3400323e:	b510      	push	{r4, lr}
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34003240:	6813      	ldr	r3, [r2, #0]
34003242:	b92b      	cbnz	r3, 34003250 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x14>
34003244:	21c9      	movs	r1, #201	@ 0xc9
34003246:	4b11      	ldr	r3, [pc, #68]	@ (3400328c <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x50>)
34003248:	4a11      	ldr	r2, [pc, #68]	@ (34003290 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x54>)
    LL_ATON_ASSERT(_first_epoch_block <= _current_epoch_block); // should never happen
3400324a:	4812      	ldr	r0, [pc, #72]	@ (34003294 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x58>)
3400324c:	f01c fbdc 	bl	3401fa08 <__assert_func>

    uint32_t current_index = __LL_ATON_RT_GetCurrEpochBlockIndex(__ll_current_aton_ip_owner);
34003250:	6811      	ldr	r1, [r2, #0]
    const LL_ATON_RT_EpochBlockItem_t *_current_epoch_block = nn_instance->exec_state.current_epoch_block;
34003252:	684b      	ldr	r3, [r1, #4]
    const LL_ATON_RT_EpochBlockItem_t *_first_epoch_block = nn_instance->exec_state.first_epoch_block;
34003254:	6889      	ldr	r1, [r1, #8]
    LL_ATON_ASSERT(_first_epoch_block <= _current_epoch_block); // should never happen
34003256:	428b      	cmp	r3, r1
34003258:	d203      	bcs.n	34003262 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x26>
3400325a:	2157      	movs	r1, #87	@ 0x57
3400325c:	4b0e      	ldr	r3, [pc, #56]	@ (34003298 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x5c>)
3400325e:	4a0f      	ldr	r2, [pc, #60]	@ (3400329c <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x60>)
34003260:	e7f3      	b.n	3400324a <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0xe>
    return (_current_epoch_block - _first_epoch_block);
34003262:	1a5b      	subs	r3, r3, r1
34003264:	4c0e      	ldr	r4, [pc, #56]	@ (340032a0 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x64>)
    LL_ATON_ASSERT((current_index + 1) >= dec); // should never happen
    int32_t new_index = current_index - dec;
    __LL_ATON_RT_SetCurrentEpochBlock(new_index, __ll_current_aton_ip_owner);
34003266:	6811      	ldr	r1, [r2, #0]
    return (_current_epoch_block - _first_epoch_block);
34003268:	109a      	asrs	r2, r3, #2
3400326a:	4362      	muls	r2, r4
    LL_ATON_ASSERT(index < (int32_t)(nn_instance->exec_state.nr_of_epoch_blocks - 1));
3400326c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
    int32_t new_index = current_index - dec;
3400326e:	3a01      	subs	r2, #1
    LL_ATON_ASSERT(index < (int32_t)(nn_instance->exec_state.nr_of_epoch_blocks - 1));
34003270:	3801      	subs	r0, #1
34003272:	4282      	cmp	r2, r0
34003274:	db03      	blt.n	3400327e <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x42>
34003276:	2161      	movs	r1, #97	@ 0x61
34003278:	4b0a      	ldr	r3, [pc, #40]	@ (340032a4 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x68>)
3400327a:	4a0b      	ldr	r2, [pc, #44]	@ (340032a8 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x6c>)
3400327c:	e7e5      	b.n	3400324a <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0xe>
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
3400327e:	688a      	ldr	r2, [r1, #8]
34003280:	3b14      	subs	r3, #20
34003282:	4413      	add	r3, r2
34003284:	604b      	str	r3, [r1, #4]
  }
34003286:	bd10      	pop	{r4, pc}
34003288:	340d1604 	.word	0x340d1604
3400328c:	3402b20c 	.word	0x3402b20c
34003290:	34030f15 	.word	0x34030f15
34003294:	3402b236 	.word	0x3402b236
34003298:	3402b38f 	.word	0x3402b38f
3400329c:	34030ef1 	.word	0x34030ef1
340032a0:	cccccccd 	.word	0xcccccccd
340032a4:	3402b3ba 	.word	0x3402b3ba
340032a8:	34030ecf 	.word	0x34030ecf

340032ac <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock>:
{
340032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  previous_value = eb->wait_mask;
340032ae:	68c4      	ldr	r4, [r0, #12]
{
340032b0:	4603      	mov	r3, r0
  eb->wait_mask = wait_mask;
340032b2:	2000      	movs	r0, #0
340032b4:	60d8      	str	r0, [r3, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340032b6:	f7ff fed5 	bl	34003064 <__LL_ATON_RT_SetWaitMask>
  if (__ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, 0))
340032ba:	b10c      	cbz	r4, 340032c0 <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock+0x14>
    __ll_lib_stop_transfer();
340032bc:	f7ff fec0 	bl	34003040 <__ll_lib_stop_transfer>
  LL_LIB_TensorInfo_TypeDef *in = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx;
340032c0:	2238      	movs	r2, #56	@ 0x38
340032c2:	4b21      	ldr	r3, [pc, #132]	@ (34003348 <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock+0x9c>)
340032c4:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
340032c8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
340032cc:	4342      	muls	r2, r0
340032ce:	188e      	adds	r6, r1, r2
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
340032d0:	f896 4027 	ldrb.w	r4, [r6, #39]	@ 0x27
  if (params->g_idx < params->g_num_tensors)
340032d4:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
340032d8:	6af6      	ldr	r6, [r6, #44]	@ 0x2c
  params->g_idx++;
340032da:	3001      	adds	r0, #1
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
340032dc:	3c01      	subs	r4, #1
  if (params->g_idx < params->g_num_tensors)
340032de:	42b8      	cmp	r0, r7
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
340032e0:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
340032e4:	ea4f 0584 	mov.w	r5, r4, lsl #2
  params->g_idx++;
340032e8:	f8c3 0090 	str.w	r0, [r3, #144]	@ 0x90
  if (params->g_idx < params->g_num_tensors)
340032ec:	d22b      	bcs.n	34003346 <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock+0x9a>
    in = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx;
340032ee:	3238      	adds	r2, #56	@ 0x38
340032f0:	4411      	add	r1, r2
    int in_batch = in->batch;
340032f2:	6988      	ldr	r0, [r1, #24]
    int in_fheight = in->shape[(in_ndims - 4) + TDIM_FHEIGHT];
340032f4:	f8d1 c02c 	ldr.w	ip, [r1, #44]	@ 0x2c
    int in_batch = in->batch;
340032f8:	4607      	mov	r7, r0
    int nbits = in->nbits;
340032fa:	f891 2028 	ldrb.w	r2, [r1, #40]	@ 0x28
    int in_fheight = in->shape[(in_ndims - 4) + TDIM_FHEIGHT];
340032fe:	4465      	add	r5, ip
    int in_fwidth = in->shape[(in_ndims - 4) + TDIM_FWIDTH];
34003300:	e955 1e02 	ldrd	r1, lr, [r5, #-8]
    int nbytes = (nbits + 7) >> 3;
34003304:	3207      	adds	r2, #7
    params->g_dst_o_src += in_nchannels_old * nbytes;
34003306:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
    int nbytes = (nbits + 7) >> 3;
3400330a:	10d2      	asrs	r2, r2, #3
    params->g_dst_o_src += in_nchannels_old * nbytes;
3400330c:	fb02 5506 	mla	r5, r2, r6, r5
    int in_nchannels = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003310:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
    params->g_dma_out.batch_depth = (nbytes == 4) ? (2 * in_batch) : in_batch;  // this must be updated on all inputs
34003314:	2a04      	cmp	r2, #4
    params->g_dst_o_src += in_nchannels_old * nbytes;
34003316:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98
    params->g_dma_out.batch_depth = (nbytes == 4) ? (2 * in_batch) : in_batch;  // this must be updated on all inputs
3400331a:	ea4f 0540 	mov.w	r5, r0, lsl #1
3400331e:	bf08      	it	eq
34003320:	4628      	moveq	r0, r5
    params->g_dma_out.frame_loop_cnt = in_nchannels / in_batch;                 // this must be updated on all inputs
34003322:	fb94 f4f7 	sdiv	r4, r4, r7
    params->g_dma_out.loop_offset = in_fheight * in_fwidth * in_batch * nbytes; // this must be updated on all inputs
34003326:	fb0e f101 	mul.w	r1, lr, r1
3400332a:	4379      	muls	r1, r7
    params->g_dma_out.batch_depth = (nbytes == 4) ? (2 * in_batch) : in_batch;  // this must be updated on all inputs
3400332c:	6698      	str	r0, [r3, #104]	@ 0x68
    params->g_dma_out.frame_offset = in_batch * nbytes;                         // this must be updated on all inputs
3400332e:	fb07 f002 	mul.w	r0, r7, r2
    params->g_dma_out.loop_offset = in_fheight * in_fwidth * in_batch * nbytes; // this must be updated on all inputs
34003332:	434a      	muls	r2, r1
    params->g_dma_out.frame_offset = in_batch * nbytes;                         // this must be updated on all inputs
34003334:	6718      	str	r0, [r3, #112]	@ 0x70
    params->g_dma_out.frame_loop_cnt = in_nchannels / in_batch;                 // this must be updated on all inputs
34003336:	67dc      	str	r4, [r3, #124]	@ 0x7c
    params->g_dma_out.frame_tot_cnt = in_nchannels / in_batch;                  // this must be updated on all inputs
34003338:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
    params->g_dma_out.loop_offset = in_fheight * in_fwidth * in_batch * nbytes; // this must be updated on all inputs
3400333c:	679a      	str	r2, [r3, #120]	@ 0x78
}
3400333e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LL_ATON_RT_DecCurrEpochBlock(1);
34003342:	f7ff bf7b 	b.w	3400323c <LL_ATON_RT_DecCurrEpochBlock.constprop.0>
}
34003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34003348:	340d0e64 	.word	0x340d0e64

3400334c <__LL_LIB_Inputs_Memcpy_End_EpochBlock>:
{
3400334c:	b510      	push	{r4, lr}
3400334e:	4603      	mov	r3, r0
  previous_value = eb->wait_mask;
34003350:	68c4      	ldr	r4, [r0, #12]
  eb->wait_mask = wait_mask;
34003352:	2000      	movs	r0, #0
34003354:	60d8      	str	r0, [r3, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
34003356:	f7ff fe85 	bl	34003064 <__LL_ATON_RT_SetWaitMask>
  if (__ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, 0))
3400335a:	b10c      	cbz	r4, 34003360 <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x14>
    __ll_lib_stop_transfer();
3400335c:	f7ff fe70 	bl	34003040 <__ll_lib_stop_transfer>
  if (params->g_size < 0)
34003360:	4b0e      	ldr	r3, [pc, #56]	@ (3400339c <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x50>)
    params->g_dst_o_src += LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003362:	e9d3 2024 	ldrd	r2, r0, [r3, #144]	@ 0x90
  if (params->g_size < 0)
34003366:	2800      	cmp	r0, #0
    params->g_dst_o_src += LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003368:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
  if (params->g_size < 0)
3400336c:	da07      	bge.n	3400337e <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x32>
    params->g_dst_o_src += LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
3400336e:	2438      	movs	r4, #56	@ 0x38
34003370:	f8d3 00a8 	ldr.w	r0, [r3, #168]	@ 0xa8
34003374:	fb04 0002 	mla	r0, r4, r2, r0
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
    return buf->offset_end - buf->offset_start;
34003378:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
3400337c:	1a20      	subs	r0, r4, r0
  params->g_idx++;
3400337e:	3201      	adds	r2, #1
    params->g_dst_o_src += (params->g_size);
34003380:	4401      	add	r1, r0
34003382:	f8c3 1098 	str.w	r1, [r3, #152]	@ 0x98
  params->g_idx++;
34003386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  if (params->g_idx < params->g_num_tensors)
3400338a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3400338e:	429a      	cmp	r2, r3
34003390:	d203      	bcs.n	3400339a <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x4e>
}
34003392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LL_ATON_RT_DecCurrEpochBlock(1);
34003396:	f7ff bf51 	b.w	3400323c <LL_ATON_RT_DecCurrEpochBlock.constprop.0>
}
3400339a:	bd10      	pop	{r4, pc}
3400339c:	340d0e64 	.word	0x340d0e64

340033a0 <__LL_LIB_Concat_Case3_End_EpochBlock>:
{
340033a0:	b510      	push	{r4, lr}
340033a2:	4603      	mov	r3, r0
  previous_value = eb->wait_mask;
340033a4:	68c4      	ldr	r4, [r0, #12]
  eb->wait_mask = wait_mask;
340033a6:	2000      	movs	r0, #0
340033a8:	60d8      	str	r0, [r3, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340033aa:	f7ff fe5b 	bl	34003064 <__LL_ATON_RT_SetWaitMask>
  if (__ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, 0))
340033ae:	b10c      	cbz	r4, 340033b4 <__LL_LIB_Concat_Case3_End_EpochBlock+0x14>
    __ll_lib_stop_transfer();
340033b0:	f7ff fe46 	bl	34003040 <__ll_lib_stop_transfer>
  params->g_idx++;
340033b4:	4923      	ldr	r1, [pc, #140]	@ (34003444 <__LL_LIB_Concat_Case3_End_EpochBlock+0xa4>)
340033b6:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
  if (params->g_idx < params->special.concat_case3.in_fheight)
340033ba:	f8d1 20b4 	ldr.w	r2, [r1, #180]	@ 0xb4
  params->g_idx++;
340033be:	3301      	adds	r3, #1
  if (params->g_idx < params->special.concat_case3.in_fheight)
340033c0:	4293      	cmp	r3, r2
  params->g_idx++;
340033c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if (params->g_idx < params->special.concat_case3.in_fheight)
340033c6:	d211      	bcs.n	340033ec <__LL_LIB_Concat_Case3_End_EpochBlock+0x4c>
    params->g_dst_o_src += params->special.concat_case3.out_line_size;
340033c8:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
340033cc:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
340033d0:	4413      	add	r3, r2
340033d2:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
    params->special.concat_case3.in_curr += params->g_size;
340033d6:	f8d1 2094 	ldr.w	r2, [r1, #148]	@ 0x94
340033da:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
340033de:	4413      	add	r3, r2
340033e0:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
}
340033e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LL_ATON_RT_DecCurrEpochBlock(1);
340033e8:	f7ff bf28 	b.w	3400323c <LL_ATON_RT_DecCurrEpochBlock.constprop.0>
    params->special.concat_case3.outer_idx++;
340033ec:	f8d1 30b0 	ldr.w	r3, [r1, #176]	@ 0xb0
    if (params->special.concat_case3.outer_idx < params->g_num_tensors)
340033f0:	f8d1 20a4 	ldr.w	r2, [r1, #164]	@ 0xa4
    params->special.concat_case3.outer_idx++;
340033f4:	3301      	adds	r3, #1
    if (params->special.concat_case3.outer_idx < params->g_num_tensors)
340033f6:	4293      	cmp	r3, r2
    params->special.concat_case3.outer_idx++;
340033f8:	f8c1 30b0 	str.w	r3, [r1, #176]	@ 0xb0
    if (params->special.concat_case3.outer_idx < params->g_num_tensors)
340033fc:	d221      	bcs.n	34003442 <__LL_LIB_Concat_Case3_End_EpochBlock+0xa2>
      int in_ndims = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->special.concat_case3.outer_idx].ndims;
340033fe:	2238      	movs	r2, #56	@ 0x38
34003400:	f8d1 00a8 	ldr.w	r0, [r1, #168]	@ 0xa8
34003404:	fb02 0003 	mla	r0, r2, r3, r0
                                  .shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003408:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
3400340c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
3400340e:	3a01      	subs	r2, #1
                         .shape[(in_ndims - 4) + TDIM_FWIDTH];
34003410:	eb04 0382 	add.w	r3, r4, r2, lsl #2
          pix_size * ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->special.concat_case3.outer_idx]
34003414:	f853 3c04 	ldr.w	r3, [r3, #-4]
34003418:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3400341c:	4353      	muls	r3, r2
3400341e:	f8d1 20b8 	ldr.w	r2, [r1, #184]	@ 0xb8
34003422:	4353      	muls	r3, r2
      params->g_dst_o_src += params->g_size;
34003424:	f8d1 2098 	ldr.w	r2, [r1, #152]	@ 0x98
      params->g_size =
34003428:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      params->g_dst_o_src += params->g_size;
3400342c:	441a      	add	r2, r3
3400342e:	f8c1 2098 	str.w	r2, [r1, #152]	@ 0x98
      params->special.concat_case3.in_curr = LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) +
34003432:	f7ff fdfd 	bl	34003030 <LL_Buffer_addr_start>
      params->g_idx = 0;
34003436:	2300      	movs	r3, #0
      params->special.concat_case3.in_curr = LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) +
34003438:	f8c1 00c0 	str.w	r0, [r1, #192]	@ 0xc0
      params->g_idx = 0;
3400343c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
34003440:	e7d0      	b.n	340033e4 <__LL_LIB_Concat_Case3_End_EpochBlock+0x44>
}
34003442:	bd10      	pop	{r4, pc}
34003444:	340d0e64 	.word	0x340d0e64

34003448 <__ll_lib_memcpy_prolog>:
  if (n < __LL_DMA_MIN_BUFF_LEN)
34003448:	2a27      	cmp	r2, #39	@ 0x27
{
3400344a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400344c:	4613      	mov	r3, r2
  int prolog_len = (n % 3);
3400344e:	bf81      	itttt	hi
34003450:	2303      	movhi	r3, #3
34003452:	fbb2 f3f3 	udivhi	r3, r2, r3
34003456:	eb03 0343 	addhi.w	r3, r3, r3, lsl #1
3400345a:	1ad3      	subhi	r3, r2, r3
3400345c:	2b00      	cmp	r3, #0
3400345e:	f103 0401 	add.w	r4, r3, #1
34003462:	bfb8      	it	lt
34003464:	2401      	movlt	r4, #1
{
34003466:	4605      	mov	r5, r0
  uint8_t *_dst_orig = *dst;
34003468:	6800      	ldr	r0, [r0, #0]
  for (i = 0; i < prolog_len; i++)
3400346a:	3c01      	subs	r4, #1
3400346c:	d106      	bne.n	3400347c <__ll_lib_memcpy_prolog+0x34>
  n -= prolog_len;
3400346e:	1ad4      	subs	r4, r2, r3
  if (prolog_len > 0)
34003470:	b113      	cbz	r3, 34003478 <__ll_lib_memcpy_prolog+0x30>
   *       filled
   */
  static inline void LL_ATON_Cache_MCU_Clean_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_clean_invalidate_range(virtual_addr, virtual_addr + size);
34003472:	18c1      	adds	r1, r0, r3
34003474:	f7fe fe70 	bl	34002158 <mcu_cache_clean_invalidate_range>
}
34003478:	4620      	mov	r0, r4
3400347a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    **_dst = **_src;
3400347c:	680f      	ldr	r7, [r1, #0]
3400347e:	682e      	ldr	r6, [r5, #0]
34003480:	783f      	ldrb	r7, [r7, #0]
34003482:	7037      	strb	r7, [r6, #0]
    (*_dst)++;
34003484:	682e      	ldr	r6, [r5, #0]
34003486:	3601      	adds	r6, #1
34003488:	602e      	str	r6, [r5, #0]
    (*_src)++;
3400348a:	680e      	ldr	r6, [r1, #0]
3400348c:	3601      	adds	r6, #1
3400348e:	600e      	str	r6, [r1, #0]
  for (i = 0; i < prolog_len; i++)
34003490:	e7eb      	b.n	3400346a <__ll_lib_memcpy_prolog+0x22>
	...

34003494 <__ll_lib_inputs_memcpy_start>:
{
34003494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t *_dst = (uint8_t *)params->g_dst_o_src;
34003496:	4c1e      	ldr	r4, [pc, #120]	@ (34003510 <__ll_lib_inputs_memcpy_start+0x7c>)
{
34003498:	4605      	mov	r5, r0
  if (params->g_size < 0)
3400349a:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
  uint8_t *_dst = (uint8_t *)params->g_dst_o_src;
3400349e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
  if (params->g_size < 0)
340034a2:	2800      	cmp	r0, #0
{
340034a4:	9101      	str	r1, [sp, #4]
  uint8_t *_dst = (uint8_t *)params->g_dst_o_src;
340034a6:	9303      	str	r3, [sp, #12]
  if (params->g_size < 0)
340034a8:	da09      	bge.n	340034be <__ll_lib_inputs_memcpy_start+0x2a>
    n = LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
340034aa:	2138      	movs	r1, #56	@ 0x38
340034ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
340034b0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340034b4:	fb01 3302 	mla	r3, r1, r2, r3
340034b8:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
340034bc:	1a10      	subs	r0, r2, r0
  if (params->g_not_continuous == 0)
340034be:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340034c2:	b923      	cbnz	r3, 340034ce <__ll_lib_inputs_memcpy_start+0x3a>
    n = __ll_lib_memcpy_prolog((void **)&_dst, (void **)&_src, n);
340034c4:	4602      	mov	r2, r0
340034c6:	a901      	add	r1, sp, #4
340034c8:	a803      	add	r0, sp, #12
340034ca:	f7ff ffbd 	bl	34003448 <__ll_lib_memcpy_prolog>
  if (n > 0)
340034ce:	b1d0      	cbz	r0, 34003506 <__ll_lib_inputs_memcpy_start+0x72>
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
340034d0:	2638      	movs	r6, #56	@ 0x38
    params->g_dma_in.offset_start = 0;
340034d2:	2200      	movs	r2, #0
    params->g_dma_in.addr_base.p = _src;
340034d4:	9b01      	ldr	r3, [sp, #4]
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
340034d6:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
    params->g_dma_in.addr_base.p = _src;
340034da:	6063      	str	r3, [r4, #4]
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
340034dc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
    params->g_dma_in.offset_end = n; // not used for batched output version g_not_continuous == 1
340034e0:	e9c4 2002 	strd	r2, r0, [r4, #8]
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
340034e4:	fb06 3301 	mla	r3, r6, r1, r3
340034e8:	691b      	ldr	r3, [r3, #16]
    params->g_dma_out.offset_end = n; // not used for batched input version g_not_continuous == 1
340034ea:	6560      	str	r0, [r4, #84]	@ 0x54
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
340034ec:	6123      	str	r3, [r4, #16]
    __ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, params->g_wait_mask);
340034ee:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
    params->g_dma_out.addr_base.p = _dst;
340034f2:	9b03      	ldr	r3, [sp, #12]
    params->g_dma_out.offset_start = 0;
340034f4:	e9c4 3213 	strd	r3, r2, [r4, #76]	@ 0x4c
  eb->wait_mask = wait_mask;
340034f8:	60e8      	str	r0, [r5, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340034fa:	f7ff fdb3 	bl	34003064 <__LL_ATON_RT_SetWaitMask>
    __ll_lib_start_transfer(params);
340034fe:	f7ff fe7b 	bl	340031f8 <__ll_lib_start_transfer.constprop.0>
}
34003502:	b004      	add	sp, #16
34003504:	bd70      	pop	{r4, r5, r6, pc}
  eb->wait_mask = wait_mask;
34003506:	60e8      	str	r0, [r5, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
34003508:	f7ff fdac 	bl	34003064 <__LL_ATON_RT_SetWaitMask>
}
3400350c:	e7f9      	b.n	34003502 <__ll_lib_inputs_memcpy_start+0x6e>
3400350e:	bf00      	nop
34003510:	340d0e64 	.word	0x340d0e64

34003514 <__LL_LIB_Concat_Case3_Start_EpochBlock>:
{
34003514:	b508      	push	{r3, lr}
  LL_ATON_ASSERT((params->special.concat_case3.outer_idx < params->g_num_tensors) &&
34003516:	4b0d      	ldr	r3, [pc, #52]	@ (3400354c <__LL_LIB_Concat_Case3_Start_EpochBlock+0x38>)
34003518:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
3400351c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
34003520:	4291      	cmp	r1, r2
34003522:	d205      	bcs.n	34003530 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x1c>
34003524:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
34003528:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3400352c:	4291      	cmp	r1, r2
3400352e:	d306      	bcc.n	3400353e <__LL_LIB_Concat_Case3_Start_EpochBlock+0x2a>
34003530:	f240 1193 	movw	r1, #403	@ 0x193
34003534:	4b06      	ldr	r3, [pc, #24]	@ (34003550 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x3c>)
34003536:	4a07      	ldr	r2, [pc, #28]	@ (34003554 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x40>)
34003538:	4807      	ldr	r0, [pc, #28]	@ (34003558 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x44>)
3400353a:	f01c fa65 	bl	3401fa08 <__assert_func>
  __ll_lib_inputs_memcpy_start(epoch_block, (uint8_t *)params->special.concat_case3.in_curr);
3400353e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
}
34003542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  __ll_lib_inputs_memcpy_start(epoch_block, (uint8_t *)params->special.concat_case3.in_curr);
34003546:	f7ff bfa5 	b.w	34003494 <__ll_lib_inputs_memcpy_start>
3400354a:	bf00      	nop
3400354c:	340d0e64 	.word	0x340d0e64
34003550:	3402b3fc 	.word	0x3402b3fc
34003554:	34030ea8 	.word	0x34030ea8
34003558:	3402b337 	.word	0x3402b337

3400355c <__LL_LIB_Inputs_Memcpy_Start_EpochBlock>:
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
3400355c:	4b0e      	ldr	r3, [pc, #56]	@ (34003598 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x3c>)
{
3400355e:	b510      	push	{r4, lr}
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003560:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34003564:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
{
34003568:	4604      	mov	r4, r0
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
3400356a:	428a      	cmp	r2, r1
3400356c:	d306      	bcc.n	3400357c <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x20>
3400356e:	f240 11cb 	movw	r1, #459	@ 0x1cb
34003572:	4b0a      	ldr	r3, [pc, #40]	@ (3400359c <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x40>)
34003574:	4a0a      	ldr	r2, [pc, #40]	@ (340035a0 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x44>)
34003576:	480b      	ldr	r0, [pc, #44]	@ (340035a4 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x48>)
34003578:	f01c fa46 	bl	3401fa08 <__assert_func>
  uint8_t *src = (uint8_t *)LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
3400357c:	2038      	movs	r0, #56	@ 0x38
3400357e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34003582:	fb00 3002 	mla	r0, r0, r2, r3
34003586:	f7ff fd53 	bl	34003030 <LL_Buffer_addr_start>
3400358a:	4601      	mov	r1, r0
  __ll_lib_inputs_memcpy_start(epoch_block, src);
3400358c:	4620      	mov	r0, r4
}
3400358e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __ll_lib_inputs_memcpy_start(epoch_block, src);
34003592:	f7ff bf7f 	b.w	34003494 <__ll_lib_inputs_memcpy_start>
34003596:	bf00      	nop
34003598:	340d0e64 	.word	0x340d0e64
3400359c:	3402b47a 	.word	0x3402b47a
340035a0:	34030e80 	.word	0x34030e80
340035a4:	3402b337 	.word	0x3402b337

340035a8 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock>:
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
340035a8:	4b0f      	ldr	r3, [pc, #60]	@ (340035e8 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x40>)
{
340035aa:	b510      	push	{r4, lr}
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
340035ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
340035b0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
{
340035b4:	4604      	mov	r4, r0
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
340035b6:	428a      	cmp	r2, r1
340035b8:	d306      	bcc.n	340035c8 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x20>
340035ba:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
340035be:	4b0b      	ldr	r3, [pc, #44]	@ (340035ec <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x44>)
340035c0:	4a0b      	ldr	r2, [pc, #44]	@ (340035f0 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x48>)
340035c2:	480c      	ldr	r0, [pc, #48]	@ (340035f4 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x4c>)
340035c4:	f01c fa20 	bl	3401fa08 <__assert_func>
  params->g_not_continuous =
340035c8:	2101      	movs	r1, #1
  uint8_t *src = (uint8_t *)LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
340035ca:	2038      	movs	r0, #56	@ 0x38
  params->g_not_continuous =
340035cc:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
  uint8_t *src = (uint8_t *)LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
340035d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
340035d4:	fb00 3002 	mla	r0, r0, r2, r3
340035d8:	f7ff fd2a 	bl	34003030 <LL_Buffer_addr_start>
340035dc:	4601      	mov	r1, r0
  __ll_lib_inputs_memcpy_start(epoch_block, src);
340035de:	4620      	mov	r0, r4
}
340035e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __ll_lib_inputs_memcpy_start(epoch_block, src);
340035e4:	f7ff bf56 	b.w	34003494 <__ll_lib_inputs_memcpy_start>
340035e8:	340d0e64 	.word	0x340d0e64
340035ec:	3402b47a 	.word	0x3402b47a
340035f0:	34030e50 	.word	0x34030e50
340035f4:	3402b337 	.word	0x3402b337

340035f8 <__ll_lib_error>:
{
340035f8:	b410      	push	{r4}
340035fa:	460c      	mov	r4, r1
340035fc:	3801      	subs	r0, #1
340035fe:	280f      	cmp	r0, #15
34003600:	bf98      	it	ls
34003602:	4b06      	ldrls	r3, [pc, #24]	@ (3400361c <__ll_lib_error+0x24>)
34003604:	4611      	mov	r1, r2
34003606:	bf98      	it	ls
34003608:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
  LL_ATON_PRINTF("%s line %d LL_LIB Error: %s\n", func, line, errs);
3400360c:	4622      	mov	r2, r4
  switch (err_code)
3400360e:	bf88      	it	hi
34003610:	4b03      	ldrhi	r3, [pc, #12]	@ (34003620 <__ll_lib_error+0x28>)
  LL_ATON_PRINTF("%s line %d LL_LIB Error: %s\n", func, line, errs);
34003612:	4804      	ldr	r0, [pc, #16]	@ (34003624 <__ll_lib_error+0x2c>)
}
34003614:	f85d 4b04 	ldr.w	r4, [sp], #4
  LL_ATON_PRINTF("%s line %d LL_LIB Error: %s\n", func, line, errs);
34003618:	f01d bea8 	b.w	3402136c <iprintf>
3400361c:	34030e10 	.word	0x34030e10
34003620:	3402b4a0 	.word	0x3402b4a0
34003624:	3402b4a8 	.word	0x3402b4a8

34003628 <LL_ATON_LIB_DMA_Transpose>:
}

int LL_ATON_LIB_DMA_Transpose(const LL_LIB_TensorShape_TypeDef *input, const uint32_t *input_axes_offsets,
                              const LL_LIB_TensorShape_TypeDef *output, const uint32_t *output_axes_offsets,
                              const uint8_t *target_pos, const uint8_t *perm_to_use, int dma_in, int dma_out)
{
34003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400362c:	b0a9      	sub	sp, #164	@ 0xa4
3400362e:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
34003630:	4607      	mov	r7, r0
34003632:	e9dd 8532 	ldrd	r8, r5, [sp, #200]	@ 0xc8
34003636:	9402      	str	r4, [sp, #8]
34003638:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
3400363a:	4691      	mov	r9, r2
3400363c:	9403      	str	r4, [sp, #12]
3400363e:	e9d2 a402 	ldrd	sl, r4, [r2, #8]
34003642:	eba4 040a 	sub.w	r4, r4, sl
  if (LL_Buffer_len(output) < __LL_DMA_MIN_BUFF_LEN)
34003646:	2c27      	cmp	r4, #39	@ 0x27
{
34003648:	461e      	mov	r6, r3
  if (LL_Buffer_len(output) < __LL_DMA_MIN_BUFF_LEN)
3400364a:	d805      	bhi.n	34003658 <LL_ATON_LIB_DMA_Transpose+0x30>
  { // not worth doing it in HW
#if defined(DUMP_DEBUG_SW_OPS)
    LL_ATON_PRINTF("===> running pure SW version of `Transpose`\n");
#endif

    return LL_ATON_LIB_Transpose(input, input_axes_offsets, output, output_axes_offsets, perm_to_use);
3400364c:	9532      	str	r5, [sp, #200]	@ 0xc8

  /* schedule epoch block */
  LL_ATON_RT_Insert_LibEpochBlockArray(_dma_transpose_epoch_block_array);

  return LL_ATON_OK;
}
3400364e:	b029      	add	sp, #164	@ 0xa4
34003650:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return LL_ATON_LIB_Transpose(input, input_axes_offsets, output, output_axes_offsets, perm_to_use);
34003654:	f000 bc14 	b.w	34003e80 <LL_ATON_LIB_Transpose>
  if (input->nbits != output->nbits)
34003658:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
3400365c:	f892 5028 	ldrb.w	r5, [r2, #40]	@ 0x28
34003660:	429d      	cmp	r5, r3
34003662:	d00a      	beq.n	3400367a <LL_ATON_LIB_DMA_Transpose+0x52>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM); // TODO: this restriction might be relaxed by a more
34003664:	f240 7151 	movw	r1, #1873	@ 0x751
34003668:	4a60      	ldr	r2, [pc, #384]	@ (340037ec <LL_ATON_LIB_DMA_Transpose+0x1c4>)
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
3400366a:	2006      	movs	r0, #6
3400366c:	f7ff ffc4 	bl	340035f8 <__ll_lib_error>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM); // TODO: this restriction might be relaxed by a more
34003670:	f06f 0001 	mvn.w	r0, #1
}
34003674:	b029      	add	sp, #164	@ 0xa4
34003676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((input->nbits < 8) || (input->nbits > 32))
3400367a:	f1a5 0308 	sub.w	r3, r5, #8
3400367e:	2b18      	cmp	r3, #24
34003680:	d903      	bls.n	3400368a <LL_ATON_LIB_DMA_Transpose+0x62>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003682:	f240 7157 	movw	r1, #1879	@ 0x757
34003686:	4a59      	ldr	r2, [pc, #356]	@ (340037ec <LL_ATON_LIB_DMA_Transpose+0x1c4>)
34003688:	e7ef      	b.n	3400366a <LL_ATON_LIB_DMA_Transpose+0x42>
  if (input->ndims != output->ndims)
3400368a:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
3400368e:	f892 b027 	ldrb.w	fp, [r2, #39]	@ 0x27
34003692:	459b      	cmp	fp, r3
34003694:	d004      	beq.n	340036a0 <LL_ATON_LIB_DMA_Transpose+0x78>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003696:	f240 715c 	movw	r1, #1884	@ 0x75c
3400369a:	4a54      	ldr	r2, [pc, #336]	@ (340037ec <LL_ATON_LIB_DMA_Transpose+0x1c4>)
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
3400369c:	2009      	movs	r0, #9
3400369e:	e7e5      	b.n	3400366c <LL_ATON_LIB_DMA_Transpose+0x44>
  if ((input->ndims != 4) && (input->ndims != 3))
340036a0:	f1ab 0303 	sub.w	r3, fp, #3
340036a4:	2b01      	cmp	r3, #1
340036a6:	d903      	bls.n	340036b0 <LL_ATON_LIB_DMA_Transpose+0x88>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
340036a8:	f240 7161 	movw	r1, #1889	@ 0x761
340036ac:	4a4f      	ldr	r2, [pc, #316]	@ (340037ec <LL_ATON_LIB_DMA_Transpose+0x1c4>)
340036ae:	e7f5      	b.n	3400369c <LL_ATON_LIB_DMA_Transpose+0x74>
  uint8_t nbytes = LL_LIB_NBYTES(input->nbits);
340036b0:	3507      	adds	r5, #7
  LL_Streng_TensorInitTypeDef _dma_in = {
340036b2:	2248      	movs	r2, #72	@ 0x48
340036b4:	2100      	movs	r1, #0
  uint8_t nbytes = LL_LIB_NBYTES(input->nbits);
340036b6:	10ed      	asrs	r5, r5, #3
  LL_Streng_TensorInitTypeDef _dma_in = {
340036b8:	a804      	add	r0, sp, #16
340036ba:	f01e f82b 	bl	34021714 <memset>
      .offset_limit = input->offset_limit,
340036be:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
      .offset_start = input->offset_start,
340036c2:	e9d7 1201 	ldrd	r1, r2, [r7, #4]
  LL_Streng_TensorInitTypeDef _dma_in = {
340036c6:	2d04      	cmp	r5, #4
340036c8:	ea4f 04c5 	mov.w	r4, r5, lsl #3
  params->g_dma_in = _dma_in;
340036cc:	e9cd 3007 	strd	r3, r0, [sp, #28]
  LL_Streng_TensorInitTypeDef _dma_in = {
340036d0:	b2e4      	uxtb	r4, r4
  params->g_dma_in = _dma_in;
340036d2:	f04f 0301 	mov.w	r3, #1
  LL_Streng_TensorInitTypeDef _dma_in = {
340036d6:	bf08      	it	eq
340036d8:	2410      	moveq	r4, #16
  params->g_dma_in = _dma_in;
340036da:	f04f 0c02 	mov.w	ip, #2
340036de:	e9cd 1205 	strd	r1, r2, [sp, #20]
340036e2:	4843      	ldr	r0, [pc, #268]	@ (340037f0 <LL_ATON_LIB_DMA_Transpose+0x1c8>)
340036e4:	2248      	movs	r2, #72	@ 0x48
340036e6:	a904      	add	r1, sp, #16
340036e8:	9314      	str	r3, [sp, #80]	@ 0x50
340036ea:	f88d c010 	strb.w	ip, [sp, #16]
340036ee:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
340036f2:	f88d 4055 	strb.w	r4, [sp, #85]	@ 0x55
340036f6:	f01e fabc 	bl	34021c72 <memcpy>
        .addr_base.i = output->addr_base.i,
340036fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
        .fwidth = input->shape[3],
340036fe:	6aff      	ldr	r7, [r7, #44]	@ 0x2c
        .addr_base.i = output->addr_base.i,
34003700:	9300      	str	r3, [sp, #0]
        .fheight = input->shape[2],
34003702:	68bb      	ldr	r3, [r7, #8]
  switch (input->ndims)
34003704:	f1bb 0f04 	cmp.w	fp, #4
    LL_Streng_TensorInitTypeDef _dma_out = {
34003708:	f04f 0248 	mov.w	r2, #72	@ 0x48
3400370c:	f04f 0100 	mov.w	r1, #0
        .frame_loop_cnt = input->shape[1],
34003710:	f8d7 9004 	ldr.w	r9, [r7, #4]
        .fheight = input->shape[2],
34003714:	9301      	str	r3, [sp, #4]
    LL_Streng_TensorInitTypeDef _dma_out = {
34003716:	a816      	add	r0, sp, #88	@ 0x58
  switch (input->ndims)
34003718:	d142      	bne.n	340037a0 <LL_ATON_LIB_DMA_Transpose+0x178>
    LL_Streng_TensorInitTypeDef _dma_out = {
3400371a:	f01d fffb 	bl	34021714 <memset>
        .batch_depth = (nbytes == 4) ? 2 : 1,
3400371e:	2d04      	cmp	r5, #4
34003720:	bf14      	ite	ne
34003722:	2501      	movne	r5, #1
34003724:	2502      	moveq	r5, #2
        .batch_offset = output_axes_offsets[target_pos[3]],
34003726:	f898 2003 	ldrb.w	r2, [r8, #3]
        .loop_offset = output_axes_offsets[target_pos[0]],
3400372a:	f898 e000 	ldrb.w	lr, [r8]
        .batch_offset = output_axes_offsets[target_pos[3]],
3400372e:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
        .frame_offset = output_axes_offsets[target_pos[1]],
34003732:	f898 2001 	ldrb.w	r2, [r8, #1]
        .fwidth = input->shape[3],
34003736:	f8d7 c00c 	ldr.w	ip, [r7, #12]
        .frame_offset = output_axes_offsets[target_pos[1]],
3400373a:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
        .line_offset = output_axes_offsets[target_pos[2]],
3400373e:	f898 2002 	ldrb.w	r2, [r8, #2]
        .loop_offset = output_axes_offsets[target_pos[0]],
34003742:	f856 302e 	ldr.w	r3, [r6, lr, lsl #2]
        .line_offset = output_axes_offsets[target_pos[2]],
34003746:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
        .frame_tot_cnt = input->shape[0] * input->shape[1],
3400374a:	683e      	ldr	r6, [r7, #0]
    params->g_dma_out = _dma_out;
3400374c:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
        .frame_tot_cnt = input->shape[0] * input->shape[1],
34003750:	fb06 f609 	mul.w	r6, r6, r9
    params->g_dma_out = _dma_out;
34003754:	f047 0701 	orr.w	r7, r7, #1
34003758:	f88d 7058 	strb.w	r7, [sp, #88]	@ 0x58
3400375c:	9f00      	ldr	r7, [sp, #0]
3400375e:	e9cd 011f 	strd	r0, r1, [sp, #124]	@ 0x7c
34003762:	e9cd 7a17 	strd	r7, sl, [sp, #92]	@ 0x5c
34003766:	9f01      	ldr	r7, [sp, #4]
34003768:	e9cd 2321 	strd	r2, r3, [sp, #132]	@ 0x84
3400376c:	e9cd 751d 	strd	r7, r5, [sp, #116]	@ 0x74
34003770:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
34003774:	f8cd 908c 	str.w	r9, [sp, #140]	@ 0x8c
34003778:	9626      	str	r6, [sp, #152]	@ 0x98
    params->g_dma_out = _dma_out;
3400377a:	2248      	movs	r2, #72	@ 0x48
3400377c:	a916      	add	r1, sp, #88	@ 0x58
3400377e:	481d      	ldr	r0, [pc, #116]	@ (340037f4 <LL_ATON_LIB_DMA_Transpose+0x1cc>)
34003780:	f88d 409c 	strb.w	r4, [sp, #156]	@ 0x9c
34003784:	f88d 409d 	strb.w	r4, [sp, #157]	@ 0x9d
34003788:	f01e fa73 	bl	34021c72 <memcpy>
  __ll_lib_strswitch_set_dmas(dma_in, dma_out, _dma_transpose_epoch_block_array);
3400378c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
34003790:	4a19      	ldr	r2, [pc, #100]	@ (340037f8 <LL_ATON_LIB_DMA_Transpose+0x1d0>)
34003792:	f7ff fc83 	bl	3400309c <__ll_lib_strswitch_set_dmas>
  LL_ATON_RT_Insert_LibEpochBlockArray(_dma_transpose_epoch_block_array);
34003796:	4818      	ldr	r0, [pc, #96]	@ (340037f8 <LL_ATON_LIB_DMA_Transpose+0x1d0>)
34003798:	f7ff fcb4 	bl	34003104 <LL_ATON_RT_Insert_LibEpochBlockArray>
  return LL_ATON_OK;
3400379c:	2000      	movs	r0, #0
3400379e:	e769      	b.n	34003674 <LL_ATON_LIB_DMA_Transpose+0x4c>
    LL_Streng_TensorInitTypeDef _dma_out = {
340037a0:	f01d ffb8 	bl	34021714 <memset>
        .batch_depth = (nbytes == 4) ? 2 : 1,
340037a4:	2d04      	cmp	r5, #4
340037a6:	bf14      	ite	ne
340037a8:	2501      	movne	r5, #1
340037aa:	2502      	moveq	r5, #2
        .batch_offset = output_axes_offsets[target_pos[2]],
340037ac:	f898 2002 	ldrb.w	r2, [r8, #2]
    params->g_dma_out = _dma_out;
340037b0:	9b00      	ldr	r3, [sp, #0]
        .batch_offset = output_axes_offsets[target_pos[2]],
340037b2:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
        .frame_offset = output_axes_offsets[target_pos[0]],
340037b6:	f898 2000 	ldrb.w	r2, [r8]
        .frame_loop_cnt = input->shape[0],
340037ba:	683f      	ldr	r7, [r7, #0]
        .frame_offset = output_axes_offsets[target_pos[0]],
340037bc:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
        .line_offset = output_axes_offsets[target_pos[1]],
340037c0:	f898 2001 	ldrb.w	r2, [r8, #1]
    params->g_dma_out = _dma_out;
340037c4:	e9cd 3a17 	strd	r3, sl, [sp, #92]	@ 0x5c
        .line_offset = output_axes_offsets[target_pos[1]],
340037c8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
    params->g_dma_out = _dma_out;
340037cc:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
340037d0:	9b01      	ldr	r3, [sp, #4]
340037d2:	f042 0201 	orr.w	r2, r2, #1
340037d6:	e9cd 391c 	strd	r3, r9, [sp, #112]	@ 0x70
340037da:	e9cd 501e 	strd	r5, r0, [sp, #120]	@ 0x78
340037de:	e9cd 1620 	strd	r1, r6, [sp, #128]	@ 0x80
340037e2:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
340037e6:	9723      	str	r7, [sp, #140]	@ 0x8c
340037e8:	9726      	str	r7, [sp, #152]	@ 0x98
340037ea:	e7c6      	b.n	3400377a <LL_ATON_LIB_DMA_Transpose+0x152>
340037ec:	34030f5e 	.word	0x34030f5e
340037f0:	340d0e64 	.word	0x340d0e64
340037f4:	340d0eac 	.word	0x340d0eac
340037f8:	340cc5a0 	.word	0x340cc5a0

340037fc <LL_ATON_LIB_Concat>:
 * @param  axis for concatenation
 * @retval Error code
 */
int LL_ATON_LIB_Concat(const LL_Buffer_InfoTypeDef *inputs, unsigned int ninputs, const LL_Buffer_InfoTypeDef *output,
                       unsigned int axis, int dma_in, int dma_out)
{
340037fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34003800:	b0bb      	sub	sp, #236	@ 0xec
34003802:	4605      	mov	r5, r0
34003804:	4617      	mov	r7, r2
  int i, k;

  // LL_ATON_PRINTF("Concat ------ axis=%d\n", axis);
  if (ninputs == 0)
34003806:	460e      	mov	r6, r1
{
34003808:	9305      	str	r3, [sp, #20]
  if (ninputs == 0)
3400380a:	b951      	cbnz	r1, 34003822 <LL_ATON_LIB_Concat+0x26>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
3400380c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
34003810:	2001      	movs	r0, #1
34003812:	4a98      	ldr	r2, [pc, #608]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)

  int in_ndims = inputs[0].ndims;

  if (in_ndims < 4)
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003814:	f7ff fef0 	bl	340035f8 <__ll_lib_error>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
34003818:	f06f 0001 	mvn.w	r0, #1
    }
    start += copy_val;
  }

  return LL_ATON_OK;
}
3400381c:	b03b      	add	sp, #236	@ 0xec
3400381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int in_ndims = inputs[0].ndims;
34003822:	f890 4027 	ldrb.w	r4, [r0, #39]	@ 0x27
  if (in_ndims < 4)
34003826:	2c03      	cmp	r4, #3
34003828:	dc04      	bgt.n	34003834 <LL_ATON_LIB_Concat+0x38>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
3400382a:	f240 71d5 	movw	r1, #2005	@ 0x7d5
3400382e:	4a91      	ldr	r2, [pc, #580]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
34003830:	2009      	movs	r0, #9
34003832:	e7ef      	b.n	34003814 <LL_ATON_LIB_Concat+0x18>
  int in_batch = inputs[0].batch;
34003834:	6983      	ldr	r3, [r0, #24]
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
34003836:	f8d0 802c 	ldr.w	r8, [r0, #44]	@ 0x2c
  int in_batch = inputs[0].batch;
3400383a:	9302      	str	r3, [sp, #8]
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
3400383c:	1ee3      	subs	r3, r4, #3
3400383e:	009a      	lsls	r2, r3, #2
34003840:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  int out_fwidth = output->shape[(in_ndims - 4) + TDIM_FWIDTH];
34003844:	f8d7 b02c 	ldr.w	fp, [r7, #44]	@ 0x2c
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
34003848:	9306      	str	r3, [sp, #24]
  int in_nchannels = inputs[0].shape[(in_ndims - 4) + TDIM_NCHANNELS];
3400384a:	4613      	mov	r3, r2
3400384c:	3308      	adds	r3, #8
3400384e:	9307      	str	r3, [sp, #28]
34003850:	f858 3003 	ldr.w	r3, [r8, r3]
  int axis_lut[] = {TDIM_NKERNELS, TDIM_NCHANNELS, TDIM_FHEIGHT, TDIM_FWIDTH}; // 0, 3, 1, 2
34003854:	f10d 0c48 	add.w	ip, sp, #72	@ 0x48
  int in_nchannels = inputs[0].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003858:	9303      	str	r3, [sp, #12]
  int out_batch = output->batch;
3400385a:	69bb      	ldr	r3, [r7, #24]
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
3400385c:	920c      	str	r2, [sp, #48]	@ 0x30
  int out_batch = output->batch;
3400385e:	9308      	str	r3, [sp, #32]
  int out_fwidth = output->shape[(in_ndims - 4) + TDIM_FWIDTH];
34003860:	4613      	mov	r3, r2
34003862:	3304      	adds	r3, #4
34003864:	930d      	str	r3, [sp, #52]	@ 0x34
34003866:	f85b 3003 	ldr.w	r3, [fp, r3]
3400386a:	9311      	str	r3, [sp, #68]	@ 0x44
  int out_nchannels = output->shape[(in_ndims - 4) + TDIM_NCHANNELS];
3400386c:	9b07      	ldr	r3, [sp, #28]
3400386e:	f85b 3003 	ldr.w	r3, [fp, r3]
34003872:	930f      	str	r3, [sp, #60]	@ 0x3c
  int axis_lut[] = {TDIM_NKERNELS, TDIM_NCHANNELS, TDIM_FHEIGHT, TDIM_FWIDTH}; // 0, 3, 1, 2
34003874:	4b80      	ldr	r3, [pc, #512]	@ (34003a78 <LL_ATON_LIB_Concat+0x27c>)
34003876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
34003878:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (output->ndims != in_ndims)
3400387c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34003880:	429c      	cmp	r4, r3
34003882:	9309      	str	r3, [sp, #36]	@ 0x24
34003884:	d003      	beq.n	3400388e <LL_ATON_LIB_Concat+0x92>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003886:	f240 71ee 	movw	r1, #2030	@ 0x7ee
3400388a:	4a7a      	ldr	r2, [pc, #488]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
3400388c:	e7d0      	b.n	34003830 <LL_ATON_LIB_Concat+0x34>
  int nbits = inputs[0].nbits;
3400388e:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
34003892:	9304      	str	r3, [sp, #16]
  if (nbits & 0x7)
34003894:	075b      	lsls	r3, r3, #29
34003896:	d004      	beq.n	340038a2 <LL_ATON_LIB_Concat+0xa6>
    __LL_LIB_ERROR(_ERR_FRACTIONAL, LL_ATON_INVALID_PARAM); // for now can't handle fractional bytes
34003898:	f240 71fa 	movw	r1, #2042	@ 0x7fa
3400389c:	2004      	movs	r0, #4
3400389e:	4a75      	ldr	r2, [pc, #468]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
340038a0:	e7b8      	b.n	34003814 <LL_ATON_LIB_Concat+0x18>
  int atonn_axis = LUT_AXIS(axis);
340038a2:	9b05      	ldr	r3, [sp, #20]
340038a4:	1f22      	subs	r2, r4, #4
340038a6:	429a      	cmp	r2, r3
340038a8:	d807      	bhi.n	340038ba <LL_ATON_LIB_Concat+0xbe>
340038aa:	3304      	adds	r3, #4
340038ac:	1b1b      	subs	r3, r3, r4
340038ae:	a93a      	add	r1, sp, #232	@ 0xe8
340038b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
340038b4:	f853 3ca0 	ldr.w	r3, [r3, #-160]
340038b8:	4413      	add	r3, r2
  int tot_axis_dim = 0;
340038ba:	f04f 0c00 	mov.w	ip, #0
    tot_axis_dim += inputs[i].shape[atonn_axis];
340038be:	009a      	lsls	r2, r3, #2
340038c0:	920e      	str	r2, [sp, #56]	@ 0x38
  for (i = 0; i < ninputs; i++)
340038c2:	46e6      	mov	lr, ip
    tot_axis_dim += inputs[i].shape[atonn_axis];
340038c4:	462a      	mov	r2, r5
340038c6:	950a      	str	r5, [sp, #40]	@ 0x28
  int tot_size = 0;
340038c8:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
    tot_size += LL_Buffer_len(inputs + i);
340038cc:	68d1      	ldr	r1, [r2, #12]
340038ce:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    if (!(((inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS] == inputs[i].batch) && in_canonical) ||
340038d0:	f8d2 902c 	ldr.w	r9, [r2, #44]	@ 0x2c
    tot_size += LL_Buffer_len(inputs + i);
340038d4:	4408      	add	r0, r1
340038d6:	4601      	mov	r1, r0
340038d8:	6890      	ldr	r0, [r2, #8]
    if (!(((inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS] == inputs[i].batch) && in_canonical) ||
340038da:	f8d2 a018 	ldr.w	sl, [r2, #24]
    tot_size += LL_Buffer_len(inputs + i);
340038de:	1a09      	subs	r1, r1, r0
340038e0:	910b      	str	r1, [sp, #44]	@ 0x2c
    if (!(((inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS] == inputs[i].batch) && in_canonical) ||
340038e2:	9907      	ldr	r1, [sp, #28]
340038e4:	f859 1001 	ldr.w	r1, [r9, r1]
340038e8:	4551      	cmp	r1, sl
340038ea:	d103      	bne.n	340038f4 <LL_ATON_LIB_Concat+0xf8>
340038ec:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
340038f0:	4281      	cmp	r1, r0
340038f2:	d007      	beq.n	34003904 <LL_ATON_LIB_Concat+0x108>
340038f4:	9902      	ldr	r1, [sp, #8]
340038f6:	4551      	cmp	r1, sl
340038f8:	d004      	beq.n	34003904 <LL_ATON_LIB_Concat+0x108>
      __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
340038fa:	f640 0108 	movw	r1, #2056	@ 0x808
340038fe:	4a5d      	ldr	r2, [pc, #372]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
      __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003900:	200a      	movs	r0, #10
34003902:	e787      	b.n	34003814 <LL_ATON_LIB_Concat+0x18>
    if (inputs[i].ndims != in_ndims)
34003904:	f892 1027 	ldrb.w	r1, [r2, #39]	@ 0x27
34003908:	42a1      	cmp	r1, r4
3400390a:	d003      	beq.n	34003914 <LL_ATON_LIB_Concat+0x118>
      __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
3400390c:	f640 010b 	movw	r1, #2059	@ 0x80b
34003910:	4a58      	ldr	r2, [pc, #352]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
34003912:	e7f5      	b.n	34003900 <LL_ATON_LIB_Concat+0x104>
    if (inputs[i].nbits != nbits)
34003914:	f892 1028 	ldrb.w	r1, [r2, #40]	@ 0x28
34003918:	9804      	ldr	r0, [sp, #16]
3400391a:	4281      	cmp	r1, r0
3400391c:	d004      	beq.n	34003928 <LL_ATON_LIB_Concat+0x12c>
      __LL_LIB_ERROR(_ERR_NBITS_IN, LL_ATON_INVALID_PARAM);
3400391e:	f640 010d 	movw	r1, #2061	@ 0x80d
34003922:	2007      	movs	r0, #7
34003924:	4a53      	ldr	r2, [pc, #332]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
34003926:	e775      	b.n	34003814 <LL_ATON_LIB_Concat+0x18>
    for (k = 0; k < in_ndims; k++)
34003928:	f04f 0a00 	mov.w	sl, #0
    tot_axis_dim += inputs[i].shape[atonn_axis];
3400392c:	990e      	ldr	r1, [sp, #56]	@ 0x38
3400392e:	4554      	cmp	r4, sl
34003930:	f859 1001 	ldr.w	r1, [r9, r1]
34003934:	448c      	add	ip, r1
    for (k = 0; k < in_ndims; k++)
34003936:	bf14      	ite	ne
34003938:	4621      	movne	r1, r4
3400393a:	2101      	moveq	r1, #1
3400393c:	9110      	str	r1, [sp, #64]	@ 0x40
      if (k != atonn_axis && inputs[0].shape[k] != inputs[i].shape[k])
3400393e:	4553      	cmp	r3, sl
34003940:	d009      	beq.n	34003956 <LL_ATON_LIB_Concat+0x15a>
34003942:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
34003946:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
3400394a:	4288      	cmp	r0, r1
3400394c:	d003      	beq.n	34003956 <LL_ATON_LIB_Concat+0x15a>
        __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
3400394e:	f640 0114 	movw	r1, #2068	@ 0x814
34003952:	4a48      	ldr	r2, [pc, #288]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
34003954:	e7d4      	b.n	34003900 <LL_ATON_LIB_Concat+0x104>
    for (k = 0; k < in_ndims; k++)
34003956:	9910      	ldr	r1, [sp, #64]	@ 0x40
34003958:	f10a 0a01 	add.w	sl, sl, #1
3400395c:	3901      	subs	r1, #1
3400395e:	9110      	str	r1, [sp, #64]	@ 0x40
34003960:	d1ed      	bne.n	3400393e <LL_ATON_LIB_Concat+0x142>
  for (i = 0; i < ninputs; i++)
34003962:	f10e 0e01 	add.w	lr, lr, #1
34003966:	45b6      	cmp	lr, r6
34003968:	f102 0238 	add.w	r2, r2, #56	@ 0x38
3400396c:	d1ae      	bne.n	340038cc <LL_ATON_LIB_Concat+0xd0>
  for (k = 0; k < in_ndims; k++)
3400396e:	2000      	movs	r0, #0
34003970:	4284      	cmp	r4, r0
34003972:	bf14      	ite	ne
34003974:	46a6      	movne	lr, r4
34003976:	f04f 0e01 	moveq.w	lr, #1
    if (k != atonn_axis && output->shape[k] != inputs[0].shape[k])
3400397a:	4283      	cmp	r3, r0
3400397c:	d009      	beq.n	34003992 <LL_ATON_LIB_Concat+0x196>
3400397e:	f85b 1020 	ldr.w	r1, [fp, r0, lsl #2]
34003982:	f858 2020 	ldr.w	r2, [r8, r0, lsl #2]
34003986:	4291      	cmp	r1, r2
34003988:	d003      	beq.n	34003992 <LL_ATON_LIB_Concat+0x196>
      __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
3400398a:	f640 011d 	movw	r1, #2077	@ 0x81d
3400398e:	4a39      	ldr	r2, [pc, #228]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
34003990:	e74e      	b.n	34003830 <LL_ATON_LIB_Concat+0x34>
  for (k = 0; k < in_ndims; k++)
34003992:	f1be 0e01 	subs.w	lr, lr, #1
34003996:	f100 0001 	add.w	r0, r0, #1
3400399a:	d1ee      	bne.n	3400397a <LL_ATON_LIB_Concat+0x17e>
  if (output->shape[atonn_axis] != tot_axis_dim)
3400399c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3400399e:	f85b 0002 	ldr.w	r0, [fp, r2]
340039a2:	4584      	cmp	ip, r0
340039a4:	d004      	beq.n	340039b0 <LL_ATON_LIB_Concat+0x1b4>
    __LL_LIB_ERROR(_ERR_AXIS, LL_ATON_INVALID_PARAM);
340039a6:	f640 0122 	movw	r1, #2082	@ 0x822
340039aa:	2003      	movs	r0, #3
340039ac:	4a31      	ldr	r2, [pc, #196]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
340039ae:	e731      	b.n	34003814 <LL_ATON_LIB_Concat+0x18>
  if (nbits != output->nbits) // perhaps this could be relaxed later on FIXME !!!
340039b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
340039b4:	9904      	ldr	r1, [sp, #16]
340039b6:	428a      	cmp	r2, r1
340039b8:	d004      	beq.n	340039c4 <LL_ATON_LIB_Concat+0x1c8>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
340039ba:	f640 0127 	movw	r1, #2087	@ 0x827
340039be:	2006      	movs	r0, #6
340039c0:	4a2c      	ldr	r2, [pc, #176]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
340039c2:	e727      	b.n	34003814 <LL_ATON_LIB_Concat+0x18>
340039c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
340039c8:	1a52      	subs	r2, r2, r1
  if (tot_size > LL_Buffer_len(output))
340039ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
340039cc:	4291      	cmp	r1, r2
340039ce:	d822      	bhi.n	34003a16 <LL_ATON_LIB_Concat+0x21a>
  int axis_is_leftmost = 1;
340039d0:	f04f 0c01 	mov.w	ip, #1
340039d4:	4659      	mov	r1, fp
340039d6:	9a05      	ldr	r2, [sp, #20]
340039d8:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
340039dc:	4462      	add	r2, ip
  for (i = 0; i < axis; i++)
340039de:	3a01      	subs	r2, #1
340039e0:	d11e      	bne.n	34003a20 <LL_ATON_LIB_Concat+0x224>
  int nbytes = (inputs[0].nbits + 7) >> 3;
340039e2:	9a04      	ldr	r2, [sp, #16]
340039e4:	1dd1      	adds	r1, r2, #7
  if (nbits > 24) // assumes that inputs & output have the same number of bits (`nbits`), see above `__LL_LIB_ERROR`s
340039e6:	2a18      	cmp	r2, #24
  int nbytes = (inputs[0].nbits + 7) >> 3;
340039e8:	ea4f 09e1 	mov.w	r9, r1, asr #3
  if (nbits > 24) // assumes that inputs & output have the same number of bits (`nbits`), see above `__LL_LIB_ERROR`s
340039ec:	f300 80f5 	bgt.w	34003bda <LL_ATON_LIB_Concat+0x3de>
  if (axis_is_leftmost)
340039f0:	f1bc 0f00 	cmp.w	ip, #0
340039f4:	f000 80f1 	beq.w	34003bda <LL_ATON_LIB_Concat+0x3de>
    switch ((in_ndims - 1) - axis) // count from right CHW, W=0,H=1,C=2, anything else >= 3
340039f8:	9b05      	ldr	r3, [sp, #20]
340039fa:	1ae4      	subs	r4, r4, r3
340039fc:	3c01      	subs	r4, #1
340039fe:	f000 80b1 	beq.w	34003b64 <LL_ATON_LIB_Concat+0x368>
34003a02:	2c02      	cmp	r4, #2
34003a04:	d026      	beq.n	34003a54 <LL_ATON_LIB_Concat+0x258>
      if (in_batch != out_batch)
34003a06:	9b02      	ldr	r3, [sp, #8]
34003a08:	9a08      	ldr	r2, [sp, #32]
34003a0a:	4293      	cmp	r3, r2
34003a0c:	d012      	beq.n	34003a34 <LL_ATON_LIB_Concat+0x238>
        __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003a0e:	f640 0144 	movw	r1, #2116	@ 0x844
34003a12:	4a18      	ldr	r2, [pc, #96]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
34003a14:	e70c      	b.n	34003830 <LL_ATON_LIB_Concat+0x34>
    __LL_LIB_ERROR(_ERR_BUFFER, LL_ATON_INVALID_PARAM);
34003a16:	f640 012c 	movw	r1, #2092	@ 0x82c
34003a1a:	200c      	movs	r0, #12
34003a1c:	4a15      	ldr	r2, [pc, #84]	@ (34003a74 <LL_ATON_LIB_Concat+0x278>)
34003a1e:	e6f9      	b.n	34003814 <LL_ATON_LIB_Concat+0x18>
    axis_is_leftmost &= (output->shape[i] == 1);
34003a20:	f851 eb04 	ldr.w	lr, [r1], #4
34003a24:	f1be 0f01 	cmp.w	lr, #1
34003a28:	bf14      	ite	ne
34003a2a:	f04f 0c00 	movne.w	ip, #0
34003a2e:	f00c 0c01 	andeq.w	ip, ip, #1
  for (i = 0; i < axis; i++)
34003a32:	e7d4      	b.n	340039de <LL_ATON_LIB_Concat+0x1e2>
      __LL_ATON_LIB_DMA_Inputs_Memcpy(inputs, ninputs, LL_Buffer_addr_start(output), -1, dma_in, dma_out);
34003a34:	4638      	mov	r0, r7
34003a36:	f7ff fafb 	bl	34003030 <LL_Buffer_addr_start>
34003a3a:	9b45      	ldr	r3, [sp, #276]	@ 0x114
34003a3c:	4602      	mov	r2, r0
  if (ninputs > 0)
34003a3e:	9301      	str	r3, [sp, #4]
34003a40:	9b44      	ldr	r3, [sp, #272]	@ 0x110
34003a42:	9300      	str	r3, [sp, #0]
34003a44:	f04f 33ff 	mov.w	r3, #4294967295
34003a48:	4631      	mov	r1, r6
34003a4a:	4628      	mov	r0, r5
34003a4c:	f7ff fbb8 	bl	340031c0 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0>
      return LL_ATON_OK;
34003a50:	2000      	movs	r0, #0
34003a52:	e6e3      	b.n	3400381c <LL_ATON_LIB_Concat+0x20>
      __LL_ATON_LIB_DMA_Inputs_Memcpy(inputs, ninputs, LL_Buffer_addr_start(output), -1, dma_in, dma_out);
34003a54:	4638      	mov	r0, r7
34003a56:	f7ff faeb 	bl	34003030 <LL_Buffer_addr_start>
      if (in_batch == out_batch)
34003a5a:	9b02      	ldr	r3, [sp, #8]
34003a5c:	9a08      	ldr	r2, [sp, #32]
      __LL_ATON_LIB_DMA_Inputs_Memcpy(inputs, ninputs, LL_Buffer_addr_start(output), -1, dma_in, dma_out);
34003a5e:	4681      	mov	r9, r0
      if (in_batch == out_batch)
34003a60:	4293      	cmp	r3, r2
34003a62:	d10b      	bne.n	34003a7c <LL_ATON_LIB_Concat+0x280>
  if (ninputs > 0)
34003a64:	9b45      	ldr	r3, [sp, #276]	@ 0x114
34003a66:	4602      	mov	r2, r0
34003a68:	9301      	str	r3, [sp, #4]
34003a6a:	9b44      	ldr	r3, [sp, #272]	@ 0x110
34003a6c:	9300      	str	r3, [sp, #0]
34003a6e:	f04f 33ff 	mov.w	r3, #4294967295
34003a72:	e7e9      	b.n	34003a48 <LL_ATON_LIB_Concat+0x24c>
34003a74:	34030f4b 	.word	0x34030f4b
34003a78:	3402ab00 	.word	0x3402ab00
  uint32_t in_fwidth = inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003a7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a7e:	46b6      	mov	lr, r6
  uint32_t in_fwidth = inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003a80:	f858 b003 	ldr.w	fp, [r8, r3]
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003a84:	9b06      	ldr	r3, [sp, #24]
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a86:	f04f 0c38 	mov.w	ip, #56	@ 0x38
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003a8a:	fb0b fa03 	mul.w	sl, fp, r3
  uint32_t in_nkernels = inputs[0].shape[(in_ndims - 4) + TDIM_NKERNELS];
34003a8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  uint32_t nbytes = (nbits + 7) >> 3;
34003a90:	08cf      	lsrs	r7, r1, #3
  uint32_t in_nkernels = inputs[0].shape[(in_ndims - 4) + TDIM_NKERNELS];
34003a92:	4443      	add	r3, r8
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003a94:	f853 4c04 	ldr.w	r4, [r3, #-4]
34003a98:	9b03      	ldr	r3, [sp, #12]
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a9a:	f105 012c 	add.w	r1, r5, #44	@ 0x2c
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003a9e:	435c      	muls	r4, r3
  for (i = 0; i < ninputs; i++)
34003aa0:	2300      	movs	r3, #0
34003aa2:	429e      	cmp	r6, r3
34003aa4:	bf14      	ite	ne
34003aa6:	46b6      	movne	lr, r6
34003aa8:	f04f 0e01 	moveq.w	lr, #1
  uint32_t out_nchannels = 0;
34003aac:	4698      	mov	r8, r3
34003aae:	f04e e001 	dls	lr, lr
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003ab2:	437c      	muls	r4, r7
34003ab4:	fb0a f404 	mul.w	r4, sl, r4
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003ab8:	fb0c f203 	mul.w	r2, ip, r3
34003abc:	9807      	ldr	r0, [sp, #28]
34003abe:	588a      	ldr	r2, [r1, r2]
  for (i = 0; i < ninputs; i++)
34003ac0:	3301      	adds	r3, #1
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003ac2:	5812      	ldr	r2, [r2, r0]
34003ac4:	4490      	add	r8, r2
  for (i = 0; i < ninputs; i++)
34003ac6:	f00f c809 	le	lr, 34003ab8 <LL_ATON_LIB_Concat+0x2bc>
  LL_Streng_TensorInitTypeDef _dma_in = {
34003aca:	2248      	movs	r2, #72	@ 0x48
34003acc:	2100      	movs	r1, #0
34003ace:	a816      	add	r0, sp, #88	@ 0x58
34003ad0:	f01d fe20 	bl	34021714 <memset>
34003ad4:	2302      	movs	r3, #2
34003ad6:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
34003ada:	686b      	ldr	r3, [r5, #4]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003adc:	2248      	movs	r2, #72	@ 0x48
  LL_Streng_TensorInitTypeDef _dma_in = {
34003ade:	9317      	str	r3, [sp, #92]	@ 0x5c
      .offset_start = inputs[0].offset_start,               // this must be updated on all inputs
34003ae0:	68ab      	ldr	r3, [r5, #8]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003ae2:	2100      	movs	r1, #0
      .offset_end = inputs[0].offset_start + in_bytes_size, // this must be updated on all inputs
34003ae4:	441c      	add	r4, r3
  LL_Streng_TensorInitTypeDef _dma_in = {
34003ae6:	9318      	str	r3, [sp, #96]	@ 0x60
34003ae8:	2301      	movs	r3, #1
34003aea:	9419      	str	r4, [sp, #100]	@ 0x64
34003aec:	00fc      	lsls	r4, r7, #3
34003aee:	b2e4      	uxtb	r4, r4
  LL_Streng_TensorInitTypeDef _dma_out = {
34003af0:	a828      	add	r0, sp, #160	@ 0xa0
  LL_Streng_TensorInitTypeDef _dma_in = {
34003af2:	9326      	str	r3, [sp, #152]	@ 0x98
34003af4:	f88d 409c 	strb.w	r4, [sp, #156]	@ 0x9c
34003af8:	f88d 409d 	strb.w	r4, [sp, #157]	@ 0x9d
  LL_Streng_TensorInitTypeDef _dma_out = {
34003afc:	f01d fe0a 	bl	34021714 <memset>
34003b00:	2301      	movs	r3, #1
34003b02:	f88d 30a0 	strb.w	r3, [sp, #160]	@ 0xa0
34003b06:	9b06      	ldr	r3, [sp, #24]
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003b08:	4628      	mov	r0, r5
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b0a:	932f      	str	r3, [sp, #188]	@ 0xbc
34003b0c:	9b02      	ldr	r3, [sp, #8]
34003b0e:	f8cd 90a4 	str.w	r9, [sp, #164]	@ 0xa4
34003b12:	9330      	str	r3, [sp, #192]	@ 0xc0
      .batch_offset = out_nchannels * nbytes,
34003b14:	fb08 f307 	mul.w	r3, r8, r7
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b18:	9331      	str	r3, [sp, #196]	@ 0xc4
      .frame_offset = in_batch * nbytes, // this must be updated on all inputs
34003b1a:	9b02      	ldr	r3, [sp, #8]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b1c:	f8cd b0b8 	str.w	fp, [sp, #184]	@ 0xb8
      .frame_offset = in_batch * nbytes, // this must be updated on all inputs
34003b20:	fb07 f103 	mul.w	r1, r7, r3
      .frame_loop_cnt = in_nchannels / in_batch,                 // this must be updated on all inputs
34003b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34003b28:	fbb3 f3f2 	udiv	r3, r3, r2
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b2c:	9335      	str	r3, [sp, #212]	@ 0xd4
34003b2e:	9338      	str	r3, [sp, #224]	@ 0xe0
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003b30:	f04f 33ff 	mov.w	r3, #4294967295
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b34:	9132      	str	r1, [sp, #200]	@ 0xc8
      .loop_offset = in_fheight * in_fwidth * in_batch * nbytes, // this must be updated on all inputs
34003b36:	fb01 f10a 	mul.w	r1, r1, sl
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003b3a:	e9cd 9300 	strd	r9, r3, [sp]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b3e:	9134      	str	r1, [sp, #208]	@ 0xd0
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003b40:	ab28      	add	r3, sp, #160	@ 0xa0
34003b42:	4631      	mov	r1, r6
34003b44:	aa16      	add	r2, sp, #88	@ 0x58
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b46:	f88d 40e4 	strb.w	r4, [sp, #228]	@ 0xe4
34003b4a:	f88d 40e5 	strb.w	r4, [sp, #229]	@ 0xe5
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003b4e:	f7ff fb01 	bl	34003154 <__ll_lib_prepare_inputs_epoch>
    __ll_lib_strswitch_set_dmas(dma_in, dma_out, _inputs_batched_memcpy_epoch_block_array);
34003b52:	e9dd 0144 	ldrd	r0, r1, [sp, #272]	@ 0x110
34003b56:	4a48      	ldr	r2, [pc, #288]	@ (34003c78 <LL_ATON_LIB_Concat+0x47c>)
34003b58:	f7ff faa0 	bl	3400309c <__ll_lib_strswitch_set_dmas>
    LL_ATON_RT_Insert_LibEpochBlockArray(_inputs_batched_memcpy_epoch_block_array);
34003b5c:	4846      	ldr	r0, [pc, #280]	@ (34003c78 <LL_ATON_LIB_Concat+0x47c>)
          LL_ATON_RT_Insert_LibEpochBlockArray(_concat_case3_epoch_block_array);
34003b5e:	f7ff fad1 	bl	34003104 <LL_ATON_RT_Insert_LibEpochBlockArray>
34003b62:	e775      	b.n	34003a50 <LL_ATON_LIB_Concat+0x254>
      if (in_batch != out_batch)
34003b64:	9b02      	ldr	r3, [sp, #8]
34003b66:	9a08      	ldr	r2, [sp, #32]
34003b68:	4293      	cmp	r3, r2
34003b6a:	d003      	beq.n	34003b74 <LL_ATON_LIB_Concat+0x378>
        __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003b6c:	f640 0165 	movw	r1, #2149	@ 0x865
34003b70:	4a42      	ldr	r2, [pc, #264]	@ (34003c7c <LL_ATON_LIB_Concat+0x480>)
34003b72:	e65d      	b.n	34003830 <LL_ATON_LIB_Concat+0x34>
      unsigned int out_pix_size = nbytes * out_nchannels;
34003b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
      unsigned char *out_start = LL_Buffer_addr_start(output);
34003b76:	4638      	mov	r0, r7
      unsigned int out_pix_size = nbytes * out_nchannels;
34003b78:	fb09 f103 	mul.w	r1, r9, r3
      unsigned int out_line_size = out_pix_size * out_fwidth;
34003b7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
34003b7e:	4359      	muls	r1, r3
      unsigned char *out_start = LL_Buffer_addr_start(output);
34003b80:	f7ff fa56 	bl	34003030 <LL_Buffer_addr_start>
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003b84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
      unsigned char *out_start = LL_Buffer_addr_start(output);
34003b86:	4607      	mov	r7, r0
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003b88:	f858 a003 	ldr.w	sl, [r8, r3]
        params->special.concat_case3.outer_idx = 0;
34003b8c:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 34003c8c <LL_ATON_LIB_Concat+0x490>
        params->special.concat_case3.in_fheight = in_fheight;
34003b90:	9b06      	ldr	r3, [sp, #24]
        params->special.concat_case3.in_curr = LL_Buffer_addr_start((LL_LIB_TensorInfo_TypeDef *)params->g_tensors);
34003b92:	f8d8 00a8 	ldr.w	r0, [r8, #168]	@ 0xa8
        params->special.concat_case3.nbytes = nbytes;
34003b96:	e9c8 392d 	strd	r3, r9, [r8, #180]	@ 0xb4
        params->special.concat_case3.outer_idx = 0;
34003b9a:	f8c8 40b0 	str.w	r4, [r8, #176]	@ 0xb0
        params->special.concat_case3.out_line_size = out_line_size;
34003b9e:	f8c8 10bc 	str.w	r1, [r8, #188]	@ 0xbc
        params->special.concat_case3.in_curr = LL_Buffer_addr_start((LL_LIB_TensorInfo_TypeDef *)params->g_tensors);
34003ba2:	f7ff fa45 	bl	34003030 <LL_Buffer_addr_start>
        if ((ninputs > 0) && (in_fheight > 0))
34003ba6:	9b06      	ldr	r3, [sp, #24]
        params->special.concat_case3.in_curr = LL_Buffer_addr_start((LL_LIB_TensorInfo_TypeDef *)params->g_tensors);
34003ba8:	f8c8 00c0 	str.w	r0, [r8, #192]	@ 0xc0
        if ((ninputs > 0) && (in_fheight > 0))
34003bac:	2b00      	cmp	r3, #0
34003bae:	f77f af4f 	ble.w	34003a50 <LL_ATON_LIB_Concat+0x254>
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003bb2:	9b03      	ldr	r3, [sp, #12]
          __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out,
34003bb4:	4631      	mov	r1, r6
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003bb6:	fb0a fa03 	mul.w	sl, sl, r3
34003bba:	fb09 f30a 	mul.w	r3, r9, sl
          __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out,
34003bbe:	4628      	mov	r0, r5
34003bc0:	e9cd 7300 	strd	r7, r3, [sp]
34003bc4:	4a2e      	ldr	r2, [pc, #184]	@ (34003c80 <LL_ATON_LIB_Concat+0x484>)
34003bc6:	4b2f      	ldr	r3, [pc, #188]	@ (34003c84 <LL_ATON_LIB_Concat+0x488>)
34003bc8:	f7ff fac4 	bl	34003154 <__ll_lib_prepare_inputs_epoch>
          __ll_lib_strswitch_set_dmas(dma_in, dma_out, _concat_case3_epoch_block_array);
34003bcc:	e9dd 0144 	ldrd	r0, r1, [sp, #272]	@ 0x110
34003bd0:	4a2d      	ldr	r2, [pc, #180]	@ (34003c88 <LL_ATON_LIB_Concat+0x48c>)
34003bd2:	f7ff fa63 	bl	3400309c <__ll_lib_strswitch_set_dmas>
          LL_ATON_RT_Insert_LibEpochBlockArray(_concat_case3_epoch_block_array);
34003bd6:	482c      	ldr	r0, [pc, #176]	@ (34003c88 <LL_ATON_LIB_Concat+0x48c>)
34003bd8:	e7c1      	b.n	34003b5e <LL_ATON_LIB_Concat+0x362>
  if (in_canonical == 0)
34003bda:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
34003bde:	428a      	cmp	r2, r1
34003be0:	d003      	beq.n	34003bea <LL_ATON_LIB_Concat+0x3ee>
    __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003be2:	f640 01bd 	movw	r1, #2237	@ 0x8bd
34003be6:	4a25      	ldr	r2, [pc, #148]	@ (34003c7c <LL_ATON_LIB_Concat+0x480>)
34003be8:	e68a      	b.n	34003900 <LL_ATON_LIB_Concat+0x104>
  if (out_canonical == 0)
34003bea:	9a08      	ldr	r2, [sp, #32]
34003bec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
34003bee:	428a      	cmp	r2, r1
34003bf0:	d004      	beq.n	34003bfc <LL_ATON_LIB_Concat+0x400>
    __LL_LIB_ERROR(_ERR_SHAPE_OUT, LL_ATON_INVALID_PARAM);
34003bf2:	f640 01bf 	movw	r1, #2239	@ 0x8bf
34003bf6:	200b      	movs	r0, #11
34003bf8:	4a20      	ldr	r2, [pc, #128]	@ (34003c7c <LL_ATON_LIB_Concat+0x480>)
34003bfa:	e60b      	b.n	34003814 <LL_ATON_LIB_Concat+0x18>
  uint32_t jump_base = 1;
34003bfc:	2401      	movs	r4, #1
34003bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34003c00:	1919      	adds	r1, r3, r4
34003c02:	4291      	cmp	r1, r2
34003c04:	eba2 0303 	sub.w	r3, r2, r3
34003c08:	bfd4      	ite	le
34003c0a:	461d      	movle	r5, r3
34003c0c:	4625      	movgt	r5, r4
  for (i = atonn_axis + 1; i < output->ndims; i++)
34003c0e:	3d01      	subs	r5, #1
34003c10:	d11a      	bne.n	34003c48 <LL_ATON_LIB_Concat+0x44c>
  jump_base *= nbytes;
34003c12:	fb04 f909 	mul.w	r9, r4, r9
  uint32_t start = 0;
34003c16:	2400      	movs	r4, #0
  for (i = 0; i < ninputs; i++)
34003c18:	46a2      	mov	sl, r4
  uint32_t jump = jump_base * output->shape[atonn_axis];
34003c1a:	fb09 f300 	mul.w	r3, r9, r0
34003c1e:	9303      	str	r3, [sp, #12]
    for (dst = start; dst < stop; dst += jump, src += copy_val)
34003c20:	46a0      	mov	r8, r4
    int src = 0;
34003c22:	2500      	movs	r5, #0
    uint32_t copy_val = inputs[i].shape[atonn_axis] * jump_base;
34003c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34003c26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34003c2a:	589a      	ldr	r2, [r3, r2]
34003c2c:	fb02 fb09 	mul.w	fp, r2, r9
    for (dst = start; dst < stop; dst += jump, src += copy_val)
34003c30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34003c32:	4543      	cmp	r3, r8
34003c34:	d80d      	bhi.n	34003c52 <LL_ATON_LIB_Concat+0x456>
  for (i = 0; i < ninputs; i++)
34003c36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34003c38:	f10a 0a01 	add.w	sl, sl, #1
34003c3c:	3338      	adds	r3, #56	@ 0x38
34003c3e:	45b2      	cmp	sl, r6
    start += copy_val;
34003c40:	445c      	add	r4, fp
  for (i = 0; i < ninputs; i++)
34003c42:	930a      	str	r3, [sp, #40]	@ 0x28
34003c44:	d3ec      	bcc.n	34003c20 <LL_ATON_LIB_Concat+0x424>
34003c46:	e703      	b.n	34003a50 <LL_ATON_LIB_Concat+0x254>
    jump_base *= output->shape[i];
34003c48:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
  for (i = atonn_axis + 1; i < output->ndims; i++)
34003c4c:	3101      	adds	r1, #1
    jump_base *= output->shape[i];
34003c4e:	4354      	muls	r4, r2
  for (i = atonn_axis + 1; i < output->ndims; i++)
34003c50:	e7dd      	b.n	34003c0e <LL_ATON_LIB_Concat+0x412>
      memcpy(LL_Buffer_addr_start(output) + dst, LL_Buffer_addr_start(inputs + i) + src, copy_val);
34003c52:	4638      	mov	r0, r7
34003c54:	f7ff f9ec 	bl	34003030 <LL_Buffer_addr_start>
34003c58:	eb00 0308 	add.w	r3, r0, r8
34003c5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
34003c5e:	9302      	str	r3, [sp, #8]
34003c60:	f7ff f9e6 	bl	34003030 <LL_Buffer_addr_start>
34003c64:	465a      	mov	r2, fp
34003c66:	1941      	adds	r1, r0, r5
34003c68:	9802      	ldr	r0, [sp, #8]
34003c6a:	f01e f802 	bl	34021c72 <memcpy>
    for (dst = start; dst < stop; dst += jump, src += copy_val)
34003c6e:	9b03      	ldr	r3, [sp, #12]
34003c70:	445d      	add	r5, fp
34003c72:	4498      	add	r8, r3
34003c74:	e7dc      	b.n	34003c30 <LL_ATON_LIB_Concat+0x434>
34003c76:	bf00      	nop
34003c78:	340cc5c8 	.word	0x340cc5c8
34003c7c:	34030f4b 	.word	0x34030f4b
34003c80:	34031004 	.word	0x34031004
34003c84:	34030fbc 	.word	0x34030fbc
34003c88:	340cc618 	.word	0x340cc618
34003c8c:	340d0e64 	.word	0x340d0e64

34003c90 <LL_Buffer_addr_start>:
    if (buf->is_user_allocated)
34003c90:	7d02      	ldrb	r2, [r0, #20]
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
34003c92:	6843      	ldr	r3, [r0, #4]
    if (buf->is_user_allocated)
34003c94:	b102      	cbz	r2, 34003c98 <LL_Buffer_addr_start+0x8>
      return *tmp;
34003c96:	681b      	ldr	r3, [r3, #0]
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34003c98:	6880      	ldr	r0, [r0, #8]
  }
34003c9a:	4418      	add	r0, r3
34003c9c:	4770      	bx	lr
	...

34003ca0 <__ll_transp_get_inner_out_axis>:
  return (int8_t *)target;
}

static inline uint32_t __ll_transp_get_inner_out_axis(const __ll_transp_params_t *common_params)
{
  for (unsigned int i = 0; i < common_params->rank; i++)
34003ca0:	6803      	ldr	r3, [r0, #0]
{
34003ca2:	4602      	mov	r2, r0
  for (unsigned int i = 0; i < common_params->rank; i++)
34003ca4:	2000      	movs	r0, #0
{
34003ca6:	b510      	push	{r4, lr}
  {
    if (((uint32_t)common_params->perm[i]) == (common_params->rank - 1))
34003ca8:	1e59      	subs	r1, r3, #1
  for (unsigned int i = 0; i < common_params->rank; i++)
34003caa:	3301      	adds	r3, #1
34003cac:	3b01      	subs	r3, #1
34003cae:	d106      	bne.n	34003cbe <__ll_transp_get_inner_out_axis+0x1e>
      return i;
  }
  LL_ATON_ASSERT(false);
34003cb0:	f240 31e2 	movw	r1, #994	@ 0x3e2
34003cb4:	4b05      	ldr	r3, [pc, #20]	@ (34003ccc <__ll_transp_get_inner_out_axis+0x2c>)
34003cb6:	4a06      	ldr	r2, [pc, #24]	@ (34003cd0 <__ll_transp_get_inner_out_axis+0x30>)
34003cb8:	4806      	ldr	r0, [pc, #24]	@ (34003cd4 <__ll_transp_get_inner_out_axis+0x34>)
34003cba:	f01b fea5 	bl	3401fa08 <__assert_func>
    if (((uint32_t)common_params->perm[i]) == (common_params->rank - 1))
34003cbe:	6854      	ldr	r4, [r2, #4]
34003cc0:	5c24      	ldrb	r4, [r4, r0]
34003cc2:	428c      	cmp	r4, r1
34003cc4:	d001      	beq.n	34003cca <__ll_transp_get_inner_out_axis+0x2a>
  for (unsigned int i = 0; i < common_params->rank; i++)
34003cc6:	3001      	adds	r0, #1
34003cc8:	e7f0      	b.n	34003cac <__ll_transp_get_inner_out_axis+0xc>
  return common_params->rank; // make compiler happy
}
34003cca:	bd10      	pop	{r4, pc}
34003ccc:	3402b7cd 	.word	0x3402b7cd
34003cd0:	340310a0 	.word	0x340310a0
34003cd4:	3402b70d 	.word	0x3402b70d

34003cd8 <__ll_aton_lib_copy_element.isra.0>:
  switch (nbytes)
34003cd8:	3801      	subs	r0, #1
static inline void __ll_aton_lib_copy_element(uint8_t nbytes, int32_t index, int8_t *out_target, int8_t *in_target)
34003cda:	b508      	push	{r3, lr}
  switch (nbytes)
34003cdc:	2803      	cmp	r0, #3
34003cde:	d832      	bhi.n	34003d46 <__ll_aton_lib_copy_element.isra.0+0x6e>
34003ce0:	e8df f000 	tbb	[pc, r0]
34003ce4:	22180602 	.word	0x22180602
    *out_target = *in_target;
34003ce8:	f992 3000 	ldrsb.w	r3, [r2]
34003cec:	700b      	strb	r3, [r1, #0]
}
34003cee:	bd08      	pop	{r3, pc}
    LL_ATON_ASSERT((((uintptr_t)in_target) % 2) == 0);
34003cf0:	07d0      	lsls	r0, r2, #31
34003cf2:	d505      	bpl.n	34003d00 <__ll_aton_lib_copy_element.isra.0+0x28>
34003cf4:	2139      	movs	r1, #57	@ 0x39
34003cf6:	4b16      	ldr	r3, [pc, #88]	@ (34003d50 <__ll_aton_lib_copy_element.isra.0+0x78>)
34003cf8:	4a16      	ldr	r2, [pc, #88]	@ (34003d54 <__ll_aton_lib_copy_element.isra.0+0x7c>)
    LL_ATON_ASSERT((((uintptr_t)out_target) % 2) == 0);
34003cfa:	4817      	ldr	r0, [pc, #92]	@ (34003d58 <__ll_aton_lib_copy_element.isra.0+0x80>)
34003cfc:	f01b fe84 	bl	3401fa08 <__assert_func>
34003d00:	07cb      	lsls	r3, r1, #31
34003d02:	d503      	bpl.n	34003d0c <__ll_aton_lib_copy_element.isra.0+0x34>
34003d04:	213a      	movs	r1, #58	@ 0x3a
34003d06:	4b15      	ldr	r3, [pc, #84]	@ (34003d5c <__ll_aton_lib_copy_element.isra.0+0x84>)
34003d08:	4a12      	ldr	r2, [pc, #72]	@ (34003d54 <__ll_aton_lib_copy_element.isra.0+0x7c>)
34003d0a:	e7f6      	b.n	34003cfa <__ll_aton_lib_copy_element.isra.0+0x22>
    *((int16_t *)out_target) = *((int16_t *)in_target);
34003d0c:	f9b2 3000 	ldrsh.w	r3, [r2]
34003d10:	800b      	strh	r3, [r1, #0]
    return;
34003d12:	e7ec      	b.n	34003cee <__ll_aton_lib_copy_element.isra.0+0x16>
    *out_target++ = *in_target++;
34003d14:	f992 3000 	ldrsb.w	r3, [r2]
34003d18:	700b      	strb	r3, [r1, #0]
    *out_target++ = *in_target++;
34003d1a:	f992 3001 	ldrsb.w	r3, [r2, #1]
34003d1e:	704b      	strb	r3, [r1, #1]
    *out_target++ = *in_target++;
34003d20:	f992 3002 	ldrsb.w	r3, [r2, #2]
34003d24:	708b      	strb	r3, [r1, #2]
    return;
34003d26:	e7e2      	b.n	34003cee <__ll_aton_lib_copy_element.isra.0+0x16>
    LL_ATON_ASSERT((((uintptr_t)in_target) % 4) == 0);
34003d28:	0790      	lsls	r0, r2, #30
34003d2a:	d003      	beq.n	34003d34 <__ll_aton_lib_copy_element.isra.0+0x5c>
34003d2c:	214a      	movs	r1, #74	@ 0x4a
34003d2e:	4b0c      	ldr	r3, [pc, #48]	@ (34003d60 <__ll_aton_lib_copy_element.isra.0+0x88>)
34003d30:	4a08      	ldr	r2, [pc, #32]	@ (34003d54 <__ll_aton_lib_copy_element.isra.0+0x7c>)
34003d32:	e7e2      	b.n	34003cfa <__ll_aton_lib_copy_element.isra.0+0x22>
    LL_ATON_ASSERT((((uintptr_t)out_target) % 4) == 0);
34003d34:	078b      	lsls	r3, r1, #30
34003d36:	d003      	beq.n	34003d40 <__ll_aton_lib_copy_element.isra.0+0x68>
34003d38:	214b      	movs	r1, #75	@ 0x4b
34003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (34003d64 <__ll_aton_lib_copy_element.isra.0+0x8c>)
34003d3c:	4a05      	ldr	r2, [pc, #20]	@ (34003d54 <__ll_aton_lib_copy_element.isra.0+0x7c>)
34003d3e:	e7dc      	b.n	34003cfa <__ll_aton_lib_copy_element.isra.0+0x22>
    *((int32_t *)out_target) = *((int32_t *)in_target);
34003d40:	6813      	ldr	r3, [r2, #0]
34003d42:	600b      	str	r3, [r1, #0]
    return;
34003d44:	e7d3      	b.n	34003cee <__ll_aton_lib_copy_element.isra.0+0x16>
    LL_ATON_ASSERT(false);
34003d46:	2151      	movs	r1, #81	@ 0x51
34003d48:	4b07      	ldr	r3, [pc, #28]	@ (34003d68 <__ll_aton_lib_copy_element.isra.0+0x90>)
34003d4a:	4a02      	ldr	r2, [pc, #8]	@ (34003d54 <__ll_aton_lib_copy_element.isra.0+0x7c>)
34003d4c:	e7d5      	b.n	34003cfa <__ll_aton_lib_copy_element.isra.0+0x22>
34003d4e:	bf00      	nop
34003d50:	3402b7ad 	.word	0x3402b7ad
34003d54:	340310fa 	.word	0x340310fa
34003d58:	3402b70d 	.word	0x3402b70d
34003d5c:	3402b7cf 	.word	0x3402b7cf
34003d60:	3402b7f2 	.word	0x3402b7f2
34003d64:	3402b814 	.word	0x3402b814
34003d68:	3402b7cd 	.word	0x3402b7cd

34003d6c <__ll_aton_lib_transpose>:
{
34003d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __ll_stack_lnklst_t linked_stack_list = {.back_link = back_link, .axis = curr_in_axis, .index = 0};
34003d70:	2400      	movs	r4, #0
  if (curr_in_axis < (common_params->rank - 1))
34003d72:	f8d3 8000 	ldr.w	r8, [r3]
{
34003d76:	461d      	mov	r5, r3
  if (curr_in_axis < (common_params->rank - 1))
34003d78:	f108 33ff 	add.w	r3, r8, #4294967295
{
34003d7c:	b085      	sub	sp, #20
  if (curr_in_axis < (common_params->rank - 1))
34003d7e:	4283      	cmp	r3, r0
{
34003d80:	460e      	mov	r6, r1
  __ll_stack_lnklst_t linked_stack_list = {.back_link = back_link, .axis = curr_in_axis, .index = 0};
34003d82:	e9cd 2001 	strd	r2, r0, [sp, #4]
34003d86:	9403      	str	r4, [sp, #12]
  if (curr_in_axis < (common_params->rank - 1))
34003d88:	d914      	bls.n	34003db4 <__ll_aton_lib_transpose+0x48>
      __ll_aton_lib_transpose(curr_in_axis + 1, inner_out_axis, &linked_stack_list, common_params);
34003d8a:	1c44      	adds	r4, r0, #1
    for (; linked_stack_list.index < common_params->in_shape_aton[linked_stack_list.axis]; linked_stack_list.index++)
34003d8c:	9a02      	ldr	r2, [sp, #8]
34003d8e:	68ab      	ldr	r3, [r5, #8]
34003d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34003d94:	9a03      	ldr	r2, [sp, #12]
34003d96:	429a      	cmp	r2, r3
34003d98:	d302      	bcc.n	34003da0 <__ll_aton_lib_transpose+0x34>
}
34003d9a:	b005      	add	sp, #20
34003d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __ll_aton_lib_transpose(curr_in_axis + 1, inner_out_axis, &linked_stack_list, common_params);
34003da0:	462b      	mov	r3, r5
34003da2:	4631      	mov	r1, r6
34003da4:	4620      	mov	r0, r4
34003da6:	aa01      	add	r2, sp, #4
34003da8:	f7ff ffe0 	bl	34003d6c <__ll_aton_lib_transpose>
    for (; linked_stack_list.index < common_params->in_shape_aton[linked_stack_list.axis]; linked_stack_list.index++)
34003dac:	9b03      	ldr	r3, [sp, #12]
34003dae:	3301      	adds	r3, #1
34003db0:	9303      	str	r3, [sp, #12]
34003db2:	e7eb      	b.n	34003d8c <__ll_aton_lib_transpose+0x20>
    LL_ATON_ASSERT(curr_in_axis == (common_params->rank - 1));
34003db4:	d006      	beq.n	34003dc4 <__ll_aton_lib_transpose+0x58>
34003db6:	f240 3192 	movw	r1, #914	@ 0x392
34003dba:	4b2a      	ldr	r3, [pc, #168]	@ (34003e64 <__ll_aton_lib_transpose+0xf8>)
34003dbc:	4a2a      	ldr	r2, [pc, #168]	@ (34003e68 <__ll_aton_lib_transpose+0xfc>)
  LL_ATON_ASSERT(false); // should never be reached
34003dbe:	482b      	ldr	r0, [pc, #172]	@ (34003e6c <__ll_aton_lib_transpose+0x100>)
34003dc0:	f01b fe22 	bl	3401fa08 <__assert_func>
  int8_t *target = common_params->out_tensor;
34003dc4:	69ef      	ldr	r7, [r5, #28]
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
34003dc6:	45a0      	cmp	r8, r4
34003dc8:	d115      	bne.n	34003df6 <__ll_aton_lib_transpose+0x8a>
  const int8_t *target = common_params->in_tensor;
34003dca:	f8d5 8018 	ldr.w	r8, [r5, #24]
  for (__ll_stack_lnklst_t *elem = linked_stack_list->back_link; elem != NULL; elem = elem->back_link)
34003dce:	bb5a      	cbnz	r2, 34003e28 <__ll_aton_lib_transpose+0xbc>
    uint32_t out_axes_offset = common_params->out_axis_off[inner_out_axis];
34003dd0:	692b      	ldr	r3, [r5, #16]
    const uint32_t end_index = common_params->in_shape_aton[(common_params->rank - 1)];
34003dd2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
    uint32_t out_axes_offset = common_params->out_axis_off[inner_out_axis];
34003dd6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
    const uint32_t end_index = common_params->in_shape_aton[(common_params->rank - 1)];
34003dda:	68ab      	ldr	r3, [r5, #8]
34003ddc:	3c01      	subs	r4, #1
34003dde:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
    const uint8_t byte_size = common_params->byte_size;
34003de2:	7d2c      	ldrb	r4, [r5, #20]
    if (byte_size != out_axes_offset)
34003de4:	42b4      	cmp	r4, r6
34003de6:	d139      	bne.n	34003e5c <__ll_aton_lib_transpose+0xf0>
      memcpy(out_target, in_target, size_in_bytes);
34003de8:	4641      	mov	r1, r8
34003dea:	4638      	mov	r0, r7
34003dec:	fb09 f204 	mul.w	r2, r9, r4
34003df0:	f01d ff3f 	bl	34021c72 <memcpy>
}
34003df4:	e7d1      	b.n	34003d9a <__ll_aton_lib_transpose+0x2e>
    if (output_axis == inner_out_axis)
34003df6:	42a6      	cmp	r6, r4
34003df8:	d00c      	beq.n	34003e14 <__ll_aton_lib_transpose+0xa8>
    uint32_t axis_size = common_params->out_axis_off[output_axis];
34003dfa:	692b      	ldr	r3, [r5, #16]
34003dfc:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
  uint32_t input_axis = (uint32_t)perm[output_axis];
34003e00:	686b      	ldr	r3, [r5, #4]
34003e02:	f813 e004 	ldrb.w	lr, [r3, r4]
34003e06:	ab01      	add	r3, sp, #4
    if (elem->axis == input_axis)
34003e08:	6859      	ldr	r1, [r3, #4]
34003e0a:	458e      	cmp	lr, r1
34003e0c:	d104      	bne.n	34003e18 <__ll_aton_lib_transpose+0xac>
    target += (input_index * axis_size);
34003e0e:	689b      	ldr	r3, [r3, #8]
34003e10:	fb03 770c 	mla	r7, r3, ip, r7
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
34003e14:	3401      	adds	r4, #1
34003e16:	e7d6      	b.n	34003dc6 <__ll_aton_lib_transpose+0x5a>
  for (; elem != NULL; elem = elem->back_link)
34003e18:	681b      	ldr	r3, [r3, #0]
34003e1a:	2b00      	cmp	r3, #0
34003e1c:	d1f4      	bne.n	34003e08 <__ll_aton_lib_transpose+0x9c>
  LL_ATON_ASSERT(false); // should never be reached
34003e1e:	f240 3159 	movw	r1, #857	@ 0x359
34003e22:	4b13      	ldr	r3, [pc, #76]	@ (34003e70 <__ll_aton_lib_transpose+0x104>)
34003e24:	4a13      	ldr	r2, [pc, #76]	@ (34003e74 <__ll_aton_lib_transpose+0x108>)
34003e26:	e7ca      	b.n	34003dbe <__ll_aton_lib_transpose+0x52>
    LL_ATON_ASSERT(elem->axis < (common_params->rank - 1));
34003e28:	6853      	ldr	r3, [r2, #4]
34003e2a:	4298      	cmp	r0, r3
34003e2c:	d804      	bhi.n	34003e38 <__ll_aton_lib_transpose+0xcc>
34003e2e:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34003e32:	4b11      	ldr	r3, [pc, #68]	@ (34003e78 <__ll_aton_lib_transpose+0x10c>)
34003e34:	4a11      	ldr	r2, [pc, #68]	@ (34003e7c <__ll_aton_lib_transpose+0x110>)
34003e36:	e7c2      	b.n	34003dbe <__ll_aton_lib_transpose+0x52>
    uint32_t axis_size = common_params->in_axis_off[elem->axis];
34003e38:	68e9      	ldr	r1, [r5, #12]
    target += (elem->index * axis_size);
34003e3a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
34003e3e:	6893      	ldr	r3, [r2, #8]
  for (__ll_stack_lnklst_t *elem = linked_stack_list->back_link; elem != NULL; elem = elem->back_link)
34003e40:	6812      	ldr	r2, [r2, #0]
    target += (elem->index * axis_size);
34003e42:	fb03 8801 	mla	r8, r3, r1, r8
  for (__ll_stack_lnklst_t *elem = linked_stack_list->back_link; elem != NULL; elem = elem->back_link)
34003e46:	e7c2      	b.n	34003dce <__ll_aton_lib_transpose+0x62>
        __ll_aton_lib_copy_element(byte_size, linked_stack_list.index, out_target, in_target);
34003e48:	fb01 8204 	mla	r2, r1, r4, r8
34003e4c:	4620      	mov	r0, r4
34003e4e:	fb06 7101 	mla	r1, r6, r1, r7
34003e52:	f7ff ff41 	bl	34003cd8 <__ll_aton_lib_copy_element.isra.0>
      for (; linked_stack_list.index < end_index; linked_stack_list.index++)
34003e56:	9b03      	ldr	r3, [sp, #12]
34003e58:	3301      	adds	r3, #1
34003e5a:	9303      	str	r3, [sp, #12]
34003e5c:	9903      	ldr	r1, [sp, #12]
34003e5e:	4549      	cmp	r1, r9
34003e60:	d3f2      	bcc.n	34003e48 <__ll_aton_lib_transpose+0xdc>
34003e62:	e79a      	b.n	34003d9a <__ll_aton_lib_transpose+0x2e>
34003e64:	3402b837 	.word	0x3402b837
34003e68:	34031088 	.word	0x34031088
34003e6c:	3402b70d 	.word	0x3402b70d
34003e70:	3402b7cd 	.word	0x3402b7cd
34003e74:	3403106b 	.word	0x3403106b
34003e78:	3402b861 	.word	0x3402b861
34003e7c:	3403104c 	.word	0x3403104c

34003e80 <LL_ATON_LIB_Transpose>:
}

int LL_ATON_LIB_Transpose(const LL_LIB_TensorShape_TypeDef *input, const uint32_t *input_axes_offsets,
                          const LL_LIB_TensorShape_TypeDef *output, const uint32_t *output_axes_offsets,
                          const uint8_t *perm)
{
34003e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34003e84:	461f      	mov	r7, r3
  if (input->ndims <= 2)
34003e86:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
{
34003e8a:	4616      	mov	r6, r2
  if (input->ndims <= 2)
34003e8c:	2b02      	cmp	r3, #2
{
34003e8e:	b095      	sub	sp, #84	@ 0x54
  if (input->ndims <= 2)
34003e90:	d80a      	bhi.n	34003ea8 <LL_ATON_LIB_Transpose+0x28>
  {
    __LL_LIB_ERROR(_ERR_RANK, LL_ATON_INVALID_PARAM);
34003e92:	f240 4119 	movw	r1, #1049	@ 0x419
34003e96:	4a66      	ldr	r2, [pc, #408]	@ (34004030 <LL_ATON_LIB_Transpose+0x1b0>)
  }

  if (input->ndims != output->ndims)
  {
    __LL_LIB_ERROR(_ERR_RANK, LL_ATON_INVALID_PARAM);
34003e98:	200f      	movs	r0, #15
34003e9a:	f7ff fbad 	bl	340035f8 <__ll_lib_error>
    __LL_LIB_ERROR(_ERR_RANK, LL_ATON_INVALID_PARAM);
34003e9e:	f06f 0001 	mvn.w	r0, #1
    uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(&common_params);
    __ll_aton_lib_transpose(0, inner_out_axis, NULL, &common_params);
  }

  return LL_ATON_OK;
}
34003ea2:	b015      	add	sp, #84	@ 0x54
34003ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (input->ndims != output->ndims)
34003ea8:	f892 9027 	ldrb.w	r9, [r2, #39]	@ 0x27
34003eac:	4599      	cmp	r9, r3
34003eae:	d003      	beq.n	34003eb8 <LL_ATON_LIB_Transpose+0x38>
    __LL_LIB_ERROR(_ERR_RANK, LL_ATON_INVALID_PARAM);
34003eb0:	f240 411e 	movw	r1, #1054	@ 0x41e
34003eb4:	4a5e      	ldr	r2, [pc, #376]	@ (34004030 <LL_ATON_LIB_Transpose+0x1b0>)
34003eb6:	e7ef      	b.n	34003e98 <LL_ATON_LIB_Transpose+0x18>
  if (input->nbits != output->nbits)
34003eb8:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
34003ebc:	f892 4028 	ldrb.w	r4, [r2, #40]	@ 0x28
34003ec0:	429c      	cmp	r4, r3
34003ec2:	d004      	beq.n	34003ece <LL_ATON_LIB_Transpose+0x4e>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003ec4:	f240 4123 	movw	r1, #1059	@ 0x423
34003ec8:	4a59      	ldr	r2, [pc, #356]	@ (34004030 <LL_ATON_LIB_Transpose+0x1b0>)
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003eca:	2006      	movs	r0, #6
34003ecc:	e7e5      	b.n	34003e9a <LL_ATON_LIB_Transpose+0x1a>
  if ((input->nbits < 8) || (input->nbits > 32))
34003ece:	f1a4 0308 	sub.w	r3, r4, #8
34003ed2:	2b18      	cmp	r3, #24
34003ed4:	d903      	bls.n	34003ede <LL_ATON_LIB_Transpose+0x5e>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003ed6:	f44f 6185 	mov.w	r1, #1064	@ 0x428
34003eda:	4a55      	ldr	r2, [pc, #340]	@ (34004030 <LL_ATON_LIB_Transpose+0x1b0>)
34003edc:	e7f5      	b.n	34003eca <LL_ATON_LIB_Transpose+0x4a>
  const __ll_transp_params_t common_params = {.perm = perm,
34003ede:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
                                              .in_shape_aton = input->shape,
34003ee0:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
                                              .byte_size = LL_LIB_NBYTES(input->nbits),
34003ee2:	3407      	adds	r4, #7
  const __ll_transp_params_t common_params = {.perm = perm,
34003ee4:	930d      	str	r3, [sp, #52]	@ 0x34
34003ee6:	08e3      	lsrs	r3, r4, #3
34003ee8:	9301      	str	r3, [sp, #4]
34003eea:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
34003eee:	e9cd 510e 	strd	r5, r1, [sp, #56]	@ 0x38
34003ef2:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
34003ef6:	9710      	str	r7, [sp, #64]	@ 0x40
                                              .in_tensor = (int8_t *)LL_Buffer_addr_start(input),
34003ef8:	f7ff feca 	bl	34003c90 <LL_Buffer_addr_start>
  const __ll_transp_params_t common_params = {.perm = perm,
34003efc:	9012      	str	r0, [sp, #72]	@ 0x48
                                              .out_tensor = (int8_t *)LL_Buffer_addr_start(output)};
34003efe:	4630      	mov	r0, r6
34003f00:	f7ff fec6 	bl	34003c90 <LL_Buffer_addr_start>
  if (input->ndims <= 4)
34003f04:	f1b9 0f04 	cmp.w	r9, #4
  const __ll_transp_params_t common_params = {.perm = perm,
34003f08:	9013      	str	r0, [sp, #76]	@ 0x4c
                                              .byte_size = LL_LIB_NBYTES(input->nbits),
34003f0a:	ea4f 08e4 	mov.w	r8, r4, asr #3
  uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(common_params);
34003f0e:	a80c      	add	r0, sp, #48	@ 0x30
  if (input->ndims <= 4)
34003f10:	f200 8084 	bhi.w	3400401c <LL_ATON_LIB_Transpose+0x19c>
  uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(common_params);
34003f14:	f7ff fec4 	bl	34003ca0 <__ll_transp_get_inner_out_axis>
  uint32_t out_axes_offset = common_params->out_axis_off[inner_out_axis];
34003f18:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
  uint32_t size_n = (common_params->rank == 4) ? common_params->in_shape_aton[0] : 1;
34003f1c:	f1b9 0f04 	cmp.w	r9, #4
  uint32_t out_axes_offset = common_params->out_axis_off[inner_out_axis];
34003f20:	9303      	str	r3, [sp, #12]
34003f22:	e9d5 2300 	ldrd	r2, r3, [r5]
  uint32_t size_h = (common_params->rank == 4) ? common_params->in_shape_aton[2] : common_params->in_shape_aton[1];
34003f26:	bf1c      	itt	ne
34003f28:	e9cd 2304 	strdne	r2, r3, [sp, #16]
  uint32_t size_n = (common_params->rank == 4) ? common_params->in_shape_aton[0] : 1;
34003f2c:	2301      	movne	r3, #1
  for (uint32_t index_n = 0; index_n < size_n; index_n++)
34003f2e:	f04f 0600 	mov.w	r6, #0
34003f32:	68ac      	ldr	r4, [r5, #8]
  uint32_t size_n = (common_params->rank == 4) ? common_params->in_shape_aton[0] : 1;
34003f34:	bf12      	itee	ne
34003f36:	9306      	strne	r3, [sp, #24]
  uint32_t size_h = (common_params->rank == 4) ? common_params->in_shape_aton[2] : common_params->in_shape_aton[1];
34003f38:	e9cd 3404 	strdeq	r3, r4, [sp, #16]
  uint32_t size_w = (common_params->rank == 4) ? common_params->in_shape_aton[3] : common_params->in_shape_aton[2];
34003f3c:	68ec      	ldreq	r4, [r5, #12]
  uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(common_params);
34003f3e:	9002      	str	r0, [sp, #8]
          uint32_t size_in_bytes = size_w * byte_size; // `byte_size == out_axes_offset`
34003f40:	fb04 f308 	mul.w	r3, r4, r8
  uint32_t size_n = (common_params->rank == 4) ? common_params->in_shape_aton[0] : 1;
34003f44:	bf08      	it	eq
34003f46:	9206      	streq	r2, [sp, #24]
          uint32_t size_in_bytes = size_w * byte_size; // `byte_size == out_axes_offset`
34003f48:	9307      	str	r3, [sp, #28]
  for (uint32_t index_n = 0; index_n < size_n; index_n++)
34003f4a:	9b06      	ldr	r3, [sp, #24]
34003f4c:	42b3      	cmp	r3, r6
34003f4e:	d163      	bne.n	34004018 <LL_ATON_LIB_Transpose+0x198>
  return LL_ATON_OK;
34003f50:	2000      	movs	r0, #0
34003f52:	e7a6      	b.n	34003ea2 <LL_ATON_LIB_Transpose+0x22>
        uint32_t *indexes = (common_params->rank == 4) ? &indexes_array[0] : &indexes_array[1];
34003f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
34003f56:	a909      	add	r1, sp, #36	@ 0x24
34003f58:	2b04      	cmp	r3, #4
34003f5a:	aa0a      	add	r2, sp, #40	@ 0x28
34003f5c:	bf0c      	ite	eq
34003f5e:	468c      	moveq	ip, r1
34003f60:	4694      	movne	ip, r2
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
34003f62:	2100      	movs	r1, #0
        uint32_t indexes_array[] = {index_n, index_c, index_h};
34003f64:	e9cd 6709 	strd	r6, r7, [sp, #36]	@ 0x24
  int8_t *target = common_params->out_tensor;
34003f68:	9813      	ldr	r0, [sp, #76]	@ 0x4c
    LL_ATON_ASSERT((uint32_t)common_params->perm[output_axis] < (common_params->rank - 1));
34003f6a:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    uint32_t axis_size = common_params->out_axis_off[output_axis];
34003f6e:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
        uint32_t indexes_array[] = {index_n, index_c, index_h};
34003f72:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
    LL_ATON_ASSERT((uint32_t)common_params->perm[output_axis] < (common_params->rank - 1));
34003f76:	1e5d      	subs	r5, r3, #1
34003f78:	f103 0b01 	add.w	fp, r3, #1
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
34003f7c:	f1bb 0b01 	subs.w	fp, fp, #1
34003f80:	d11b      	bne.n	34003fba <LL_ATON_LIB_Transpose+0x13a>
  for (uint32_t axis = 0; axis < (common_params->rank - 1); axis++)
34003f82:	2200      	movs	r2, #0
  const int8_t *target = common_params->in_tensor;
34003f84:	9912      	ldr	r1, [sp, #72]	@ 0x48
    uint32_t axis_size = common_params->in_axis_off[axis];
34003f86:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
  for (uint32_t axis = 0; axis < (common_params->rank - 1); axis++)
34003f8a:	f105 0a01 	add.w	sl, r5, #1
34003f8e:	f1ba 0a01 	subs.w	sl, sl, #1
34003f92:	d128      	bne.n	34003fe6 <LL_ATON_LIB_Transpose+0x166>
        if (byte_size != out_axes_offset)
34003f94:	9b03      	ldr	r3, [sp, #12]
34003f96:	4543      	cmp	r3, r8
34003f98:	d037      	beq.n	3400400a <LL_ATON_LIB_Transpose+0x18a>
34003f9a:	4682      	mov	sl, r0
34003f9c:	468b      	mov	fp, r1
          for (uint32_t index_w = 0; index_w < size_w; index_w++)
34003f9e:	2500      	movs	r5, #0
34003fa0:	42a5      	cmp	r5, r4
34003fa2:	d128      	bne.n	34003ff6 <LL_ATON_LIB_Transpose+0x176>
      for (uint32_t index_h = 0; index_h < size_h; index_h++)
34003fa4:	f109 0901 	add.w	r9, r9, #1
34003fa8:	9b05      	ldr	r3, [sp, #20]
34003faa:	454b      	cmp	r3, r9
34003fac:	d1d2      	bne.n	34003f54 <LL_ATON_LIB_Transpose+0xd4>
    for (uint32_t index_c = 0; index_c < size_c; index_c++)
34003fae:	3701      	adds	r7, #1
34003fb0:	9b04      	ldr	r3, [sp, #16]
34003fb2:	42bb      	cmp	r3, r7
34003fb4:	d12d      	bne.n	34004012 <LL_ATON_LIB_Transpose+0x192>
  for (uint32_t index_n = 0; index_n < size_n; index_n++)
34003fb6:	3601      	adds	r6, #1
34003fb8:	e7c7      	b.n	34003f4a <LL_ATON_LIB_Transpose+0xca>
    if (output_axis == inner_out_axis)
34003fba:	9a02      	ldr	r2, [sp, #8]
34003fbc:	428a      	cmp	r2, r1
34003fbe:	d010      	beq.n	34003fe2 <LL_ATON_LIB_Transpose+0x162>
    LL_ATON_ASSERT((uint32_t)common_params->perm[output_axis] < (common_params->rank - 1));
34003fc0:	f81e 2001 	ldrb.w	r2, [lr, r1]
34003fc4:	4295      	cmp	r5, r2
34003fc6:	d806      	bhi.n	34003fd6 <LL_ATON_LIB_Transpose+0x156>
34003fc8:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34003fcc:	4b19      	ldr	r3, [pc, #100]	@ (34004034 <LL_ATON_LIB_Transpose+0x1b4>)
34003fce:	4a1a      	ldr	r2, [pc, #104]	@ (34004038 <LL_ATON_LIB_Transpose+0x1b8>)
34003fd0:	481a      	ldr	r0, [pc, #104]	@ (3400403c <LL_ATON_LIB_Transpose+0x1bc>)
34003fd2:	f01b fd19 	bl	3401fa08 <__assert_func>
    target += (input_index * axis_size);
34003fd6:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
34003fda:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
34003fde:	fb03 0002 	mla	r0, r3, r2, r0
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
34003fe2:	3101      	adds	r1, #1
34003fe4:	e7ca      	b.n	34003f7c <LL_ATON_LIB_Transpose+0xfc>
    target += (indexes[axis] * axis_size);
34003fe6:	f85e 5022 	ldr.w	r5, [lr, r2, lsl #2]
34003fea:	f85c 3022 	ldr.w	r3, [ip, r2, lsl #2]
  for (uint32_t axis = 0; axis < (common_params->rank - 1); axis++)
34003fee:	3201      	adds	r2, #1
    target += (indexes[axis] * axis_size);
34003ff0:	fb03 1105 	mla	r1, r3, r5, r1
  for (uint32_t axis = 0; axis < (common_params->rank - 1); axis++)
34003ff4:	e7cb      	b.n	34003f8e <LL_ATON_LIB_Transpose+0x10e>
            __ll_aton_lib_copy_element(byte_size, index_w, out_target, in_target);
34003ff6:	465a      	mov	r2, fp
34003ff8:	4651      	mov	r1, sl
34003ffa:	9801      	ldr	r0, [sp, #4]
34003ffc:	f7ff fe6c 	bl	34003cd8 <__ll_aton_lib_copy_element.isra.0>
          for (uint32_t index_w = 0; index_w < size_w; index_w++)
34004000:	9b03      	ldr	r3, [sp, #12]
34004002:	3501      	adds	r5, #1
34004004:	449a      	add	sl, r3
34004006:	44c3      	add	fp, r8
34004008:	e7ca      	b.n	34003fa0 <LL_ATON_LIB_Transpose+0x120>
          memcpy(base_out_target, base_in_target, size_in_bytes);
3400400a:	9a07      	ldr	r2, [sp, #28]
3400400c:	f01d fe31 	bl	34021c72 <memcpy>
34004010:	e7c8      	b.n	34003fa4 <LL_ATON_LIB_Transpose+0x124>
      for (uint32_t index_h = 0; index_h < size_h; index_h++)
34004012:	f04f 0900 	mov.w	r9, #0
34004016:	e7c7      	b.n	34003fa8 <LL_ATON_LIB_Transpose+0x128>
    for (uint32_t index_c = 0; index_c < size_c; index_c++)
34004018:	2700      	movs	r7, #0
3400401a:	e7c9      	b.n	34003fb0 <LL_ATON_LIB_Transpose+0x130>
    uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(&common_params);
3400401c:	f7ff fe40 	bl	34003ca0 <__ll_transp_get_inner_out_axis>
    __ll_aton_lib_transpose(0, inner_out_axis, NULL, &common_params);
34004020:	2200      	movs	r2, #0
    uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(&common_params);
34004022:	4601      	mov	r1, r0
    __ll_aton_lib_transpose(0, inner_out_axis, NULL, &common_params);
34004024:	ab0c      	add	r3, sp, #48	@ 0x30
34004026:	4610      	mov	r0, r2
34004028:	f7ff fea0 	bl	34003d6c <__ll_aton_lib_transpose>
3400402c:	e790      	b.n	34003f50 <LL_ATON_LIB_Transpose+0xd0>
3400402e:	bf00      	nop
34004030:	340310e4 	.word	0x340310e4
34004034:	3402b888 	.word	0x3402b888
34004038:	340310bf 	.word	0x340310bf
3400403c:	3402b70d 	.word	0x3402b70d

34004040 <aton_osal_freertos_init>:

/**
 * @brief Initialize RTOS OSAL implementation
 */
void LL_ATON_OSAL_INIT()
{
34004040:	b513      	push	{r0, r1, r4, lr}

  /*** Helper inline functions ***/
  static inline _ReturnType_ _my_xSemaphoreCreateBinaryStatic(SemaphoreHandle_t *dao_addr,
                                                              StaticSemaphore_t *static_buffer)
  {
    SemaphoreHandle_t ret = xSemaphoreCreateBinaryStatic(static_buffer);
34004042:	2200      	movs	r2, #0
34004044:	2403      	movs	r4, #3
34004046:	4611      	mov	r1, r2
34004048:	2001      	movs	r0, #1
3400404a:	4b1f      	ldr	r3, [pc, #124]	@ (340040c8 <aton_osal_freertos_init+0x88>)
3400404c:	9400      	str	r4, [sp, #0]
3400404e:	f006 f997 	bl	3400a380 <xQueueGenericCreateStatic>
    if (ret != _NullHandle_)
34004052:	b928      	cbnz	r0, 34004060 <aton_osal_freertos_init+0x20>
  /* create main "deferred ATON owner" mechanism mutex */
  _ReturnType_ ret = _CreateDaoMutexNoWaiters_(
      _dao_mutex,
      _dao_mutex_buffer); // no thread will ever wait on this "conceptional" mutex
                          // (so priority inheritance - as would come with a "real" mutex - is not needed)
  assert(ret == _OsTrue_);
34004054:	213d      	movs	r1, #61	@ 0x3d
34004056:	4b1d      	ldr	r3, [pc, #116]	@ (340040cc <aton_osal_freertos_init+0x8c>)
34004058:	4a1d      	ldr	r2, [pc, #116]	@ (340040d0 <aton_osal_freertos_init+0x90>)
  _MakeDaoMutexNoWaitersAvailable_(_dao_mutex); // make it available

  /* create "deferred ATON owner" mechanism semaphore */
  ret = _CreateDaoWaitQueue_(_dao_wait_queue, _dao_wait_queue_buffer);
  assert(ret == _OsTrue_);
3400405a:	481e      	ldr	r0, [pc, #120]	@ (340040d4 <aton_osal_freertos_init+0x94>)
3400405c:	f01b fcd4 	bl	3401fa08 <__assert_func>
  _MakeDaoMutexNoWaitersAvailable_(_dao_mutex); // make it available
34004060:	2300      	movs	r3, #0
    {
      *dao_addr = ret;
34004062:	4a1d      	ldr	r2, [pc, #116]	@ (340040d8 <aton_osal_freertos_init+0x98>)
34004064:	4619      	mov	r1, r3
34004066:	6010      	str	r0, [r2, #0]
34004068:	461a      	mov	r2, r3
3400406a:	f006 f9e5 	bl	3400a438 <xQueueGenericSend>
    SemaphoreHandle_t ret = xSemaphoreCreateBinaryStatic(static_buffer);
3400406e:	2200      	movs	r2, #0
34004070:	2001      	movs	r0, #1
34004072:	4611      	mov	r1, r2
34004074:	4b19      	ldr	r3, [pc, #100]	@ (340040dc <aton_osal_freertos_init+0x9c>)
34004076:	9400      	str	r4, [sp, #0]
34004078:	f006 f982 	bl	3400a380 <xQueueGenericCreateStatic>
    if (ret != _NullHandle_)
3400407c:	b160      	cbz	r0, 34004098 <aton_osal_freertos_init+0x58>
      *dao_addr = ret;
3400407e:	4b18      	ldr	r3, [pc, #96]	@ (340040e0 <aton_osal_freertos_init+0xa0>)
  }

  static inline _ReturnType_ _my_xSemaphoreCreateCountingStatic(SemaphoreHandle_t *dao_addr,
                                                                StaticSemaphore_t *static_buffer)
  {
    SemaphoreHandle_t ret = xSemaphoreCreateCountingStatic(0xFFFFFFFF, 0, static_buffer);
34004080:	2100      	movs	r1, #0
      *dao_addr = ret;
34004082:	6018      	str	r0, [r3, #0]
    SemaphoreHandle_t ret = xSemaphoreCreateCountingStatic(0xFFFFFFFF, 0, static_buffer);
34004084:	4a17      	ldr	r2, [pc, #92]	@ (340040e4 <aton_osal_freertos_init+0xa4>)
34004086:	f04f 30ff 	mov.w	r0, #4294967295
3400408a:	f006 f9b5 	bl	3400a3f8 <xQueueCreateCountingSemaphoreStatic>
    if (ret != _NullHandle_)
3400408e:	b938      	cbnz	r0, 340040a0 <aton_osal_freertos_init+0x60>
  _MakeDaoWaitQueueUnavailable_(_dao_wait_queue); // make it un-available

  /* create WFE semaphore */
  ret = _CreateWfeSemaphore_(_wfe_sem, _wfe_sem_buffer);
  assert(ret == _OsTrue_);
34004090:	2147      	movs	r1, #71	@ 0x47
34004092:	4b0e      	ldr	r3, [pc, #56]	@ (340040cc <aton_osal_freertos_init+0x8c>)
34004094:	4a0e      	ldr	r2, [pc, #56]	@ (340040d0 <aton_osal_freertos_init+0x90>)
34004096:	e7e0      	b.n	3400405a <aton_osal_freertos_init+0x1a>
  assert(ret == _OsTrue_);
34004098:	2142      	movs	r1, #66	@ 0x42
3400409a:	4b0c      	ldr	r3, [pc, #48]	@ (340040cc <aton_osal_freertos_init+0x8c>)
3400409c:	4a0c      	ldr	r2, [pc, #48]	@ (340040d0 <aton_osal_freertos_init+0x90>)
3400409e:	e7dc      	b.n	3400405a <aton_osal_freertos_init+0x1a>
    {
      *dao_addr = ret;
340040a0:	4b11      	ldr	r3, [pc, #68]	@ (340040e8 <aton_osal_freertos_init+0xa8>)
  }

  static inline _ReturnType_ _my_xSemaphoreCreateMutexStatic(SemaphoreHandle_t *dao_addr,
                                                             StaticSemaphore_t *static_buffer)
  {
    SemaphoreHandle_t ret = xSemaphoreCreateMutexStatic(static_buffer);
340040a2:	4912      	ldr	r1, [pc, #72]	@ (340040ec <aton_osal_freertos_init+0xac>)
      *dao_addr = ret;
340040a4:	6018      	str	r0, [r3, #0]
    SemaphoreHandle_t ret = xSemaphoreCreateMutexStatic(static_buffer);
340040a6:	2001      	movs	r0, #1
340040a8:	f006 fa68 	bl	3400a57c <xQueueCreateMutexStatic>
    if (ret != _NullHandle_)
340040ac:	b918      	cbnz	r0, 340040b6 <aton_osal_freertos_init+0x76>
  _MakeWfeSemaphoreUnavailable_(_wfe_sem); // make it un-available

  /* create cache mutex */
  ret = _CreateCacheMutex_(_cache_mutex, _cache_mutex_buffer);
  assert(ret == _OsTrue_);
340040ae:	214c      	movs	r1, #76	@ 0x4c
340040b0:	4b06      	ldr	r3, [pc, #24]	@ (340040cc <aton_osal_freertos_init+0x8c>)
340040b2:	4a07      	ldr	r2, [pc, #28]	@ (340040d0 <aton_osal_freertos_init+0x90>)
340040b4:	e7d1      	b.n	3400405a <aton_osal_freertos_init+0x1a>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340040b6:	2250      	movs	r2, #80	@ 0x50
    {
      *dao_addr = ret;
340040b8:	4b0d      	ldr	r3, [pc, #52]	@ (340040f0 <aton_osal_freertos_init+0xb0>)
340040ba:	6018      	str	r0, [r3, #0]
340040bc:	4b0d      	ldr	r3, [pc, #52]	@ (340040f4 <aton_osal_freertos_init+0xb4>)
340040be:	f883 2335 	strb.w	r2, [r3, #821]	@ 0x335
  _MakeCacheMutexAvailable_(_cache_mutex); // make it available

  /* Finalize IRQ handling (e.g. priority) */
  _FinalizeIRQHandling_();
}
340040c2:	b002      	add	sp, #8
340040c4:	bd10      	pop	{r4, pc}
340040c6:	bf00      	nop
340040c8:	340d15ac 	.word	0x340d15ac
340040cc:	3402b8cf 	.word	0x3402b8cf
340040d0:	3403117e 	.word	0x3403117e
340040d4:	3402b8df 	.word	0x3402b8df
340040d8:	340d14b8 	.word	0x340d14b8
340040dc:	340d155c 	.word	0x340d155c
340040e0:	340d14b4 	.word	0x340d14b4
340040e4:	340d150c 	.word	0x340d150c
340040e8:	340d14b0 	.word	0x340d14b0
340040ec:	340d14bc 	.word	0x340d14bc
340040f0:	340d14ac 	.word	0x340d14ac
340040f4:	e000e100 	.word	0xe000e100

340040f8 <aton_osal_freertos_deinit>:
 * @brief De-initialize RTOS OSAL implementation
 */
void LL_ATON_OSAL_DEINIT()
{
  _DeInitNonDao_(); // de-initialize non DAO part
}
340040f8:	4770      	bx	lr
	...

340040fc <aton_osal_freertos_lock>:
#ifndef LL_HAS_NO_ATON_OSAL_LOCK_NPU_CACHE
/**
 * @brief Lock cache mutex
 */
void LL_ATON_OSAL_LOCK_NPU_CACHE()
{
340040fc:	b508      	push	{r3, lr}
  _ReturnType_ ret;

  ret = _GetCacheMutex_(_cache_mutex);
340040fe:	4b07      	ldr	r3, [pc, #28]	@ (3400411c <aton_osal_freertos_lock+0x20>)
34004100:	f04f 31ff 	mov.w	r1, #4294967295
34004104:	6818      	ldr	r0, [r3, #0]
34004106:	f006 fb3b 	bl	3400a780 <xQueueSemaphoreTake>
  assert(ret == _OsTrue_);
3400410a:	2801      	cmp	r0, #1
3400410c:	d005      	beq.n	3400411a <aton_osal_freertos_lock+0x1e>
3400410e:	21e2      	movs	r1, #226	@ 0xe2
34004110:	4b03      	ldr	r3, [pc, #12]	@ (34004120 <aton_osal_freertos_lock+0x24>)
34004112:	4a04      	ldr	r2, [pc, #16]	@ (34004124 <aton_osal_freertos_lock+0x28>)
34004114:	4804      	ldr	r0, [pc, #16]	@ (34004128 <aton_osal_freertos_lock+0x2c>)
34004116:	f01b fc77 	bl	3401fa08 <__assert_func>
  LL_ATON_LIB_UNUSED(ret);
}
3400411a:	bd08      	pop	{r3, pc}
3400411c:	340d14ac 	.word	0x340d14ac
34004120:	3402b8cf 	.word	0x3402b8cf
34004124:	34031166 	.word	0x34031166
34004128:	3402b8df 	.word	0x3402b8df

3400412c <aton_osal_freertos_unlock>:

/**
 * @brief Unlock cache mutex
 */
void LL_ATON_OSAL_UNLOCK_NPU_CACHE()
{
3400412c:	b508      	push	{r3, lr}
  _ReturnType_ ret;

  ret = _ReleaseCacheMutex_(_cache_mutex);
3400412e:	2300      	movs	r3, #0
34004130:	4807      	ldr	r0, [pc, #28]	@ (34004150 <aton_osal_freertos_unlock+0x24>)
34004132:	461a      	mov	r2, r3
34004134:	4619      	mov	r1, r3
34004136:	6800      	ldr	r0, [r0, #0]
34004138:	f006 f97e 	bl	3400a438 <xQueueGenericSend>
  assert(ret == _OsTrue_);
3400413c:	2801      	cmp	r0, #1
3400413e:	d005      	beq.n	3400414c <aton_osal_freertos_unlock+0x20>
34004140:	21ee      	movs	r1, #238	@ 0xee
34004142:	4b04      	ldr	r3, [pc, #16]	@ (34004154 <aton_osal_freertos_unlock+0x28>)
34004144:	4a04      	ldr	r2, [pc, #16]	@ (34004158 <aton_osal_freertos_unlock+0x2c>)
34004146:	4805      	ldr	r0, [pc, #20]	@ (3400415c <aton_osal_freertos_unlock+0x30>)
34004148:	f01b fc5e 	bl	3401fa08 <__assert_func>
  LL_ATON_LIB_UNUSED(ret);
}
3400414c:	bd08      	pop	{r3, pc}
3400414e:	bf00      	nop
34004150:	340d14ac 	.word	0x340d14ac
34004154:	3402b8cf 	.word	0x3402b8cf
34004158:	3403114c 	.word	0x3403114c
3400415c:	3402b8df 	.word	0x3402b8df

34004160 <aton_osal_freertos_wfe>:

/**
 * @brief Wait for event
 */
void LL_ATON_OSAL_WFE()
{
34004160:	b508      	push	{r3, lr}
  _ReturnType_ ret;

  ret = _GetWfeSemaphore_(_wfe_sem);
34004162:	4b08      	ldr	r3, [pc, #32]	@ (34004184 <aton_osal_freertos_wfe+0x24>)
34004164:	f04f 31ff 	mov.w	r1, #4294967295
34004168:	6818      	ldr	r0, [r3, #0]
3400416a:	f006 fb09 	bl	3400a780 <xQueueSemaphoreTake>
  assert(ret == _OsTrue_);
3400416e:	2801      	cmp	r0, #1
34004170:	d006      	beq.n	34004180 <aton_osal_freertos_wfe+0x20>
34004172:	f240 1115 	movw	r1, #277	@ 0x115
34004176:	4b04      	ldr	r3, [pc, #16]	@ (34004188 <aton_osal_freertos_wfe+0x28>)
34004178:	4a04      	ldr	r2, [pc, #16]	@ (3400418c <aton_osal_freertos_wfe+0x2c>)
3400417a:	4805      	ldr	r0, [pc, #20]	@ (34004190 <aton_osal_freertos_wfe+0x30>)
3400417c:	f01b fc44 	bl	3401fa08 <__assert_func>
  LL_ATON_LIB_UNUSED(ret);
}
34004180:	bd08      	pop	{r3, pc}
34004182:	bf00      	nop
34004184:	340d14b0 	.word	0x340d14b0
34004188:	3402b8cf 	.word	0x3402b8cf
3400418c:	34031135 	.word	0x34031135
34004190:	3402b8df 	.word	0x3402b8df

34004194 <aton_osal_freertos_signal_event>:
 * @note  Define macro `RTOS_HAS_NO_ISR_SIGNAL` if signalling is not performed from an interrupt handler.
 *        Calling this function within the same application from both ISR and normal contexts is currently not
 *        supported!
 */
void LL_ATON_OSAL_SIGNAL_EVENT()
{
34004194:	b507      	push	{r0, r1, r2, lr}
  assert(ret == _OsTrue_);
#else  // !RTOS_HAS_NO_ISR_SIGNAL
  _ReturnType_ task_woken;

  _HeadIsrCode_();
  ret = _ReleaseWfeSemaphoreISR_(
34004196:	4b0c      	ldr	r3, [pc, #48]	@ (340041c8 <aton_osal_freertos_signal_event+0x34>)
34004198:	a901      	add	r1, sp, #4
3400419a:	6818      	ldr	r0, [r3, #0]
3400419c:	f006 fa04 	bl	3400a5a8 <xQueueGiveFromISR>
      _wfe_sem, &task_woken); // assuming that this function gets called from within an interrupt handler
  assert(ret == _OsTrue_);
340041a0:	2801      	cmp	r0, #1
340041a2:	d006      	beq.n	340041b2 <aton_osal_freertos_signal_event+0x1e>
340041a4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
340041a8:	4b08      	ldr	r3, [pc, #32]	@ (340041cc <aton_osal_freertos_signal_event+0x38>)
340041aa:	4a09      	ldr	r2, [pc, #36]	@ (340041d0 <aton_osal_freertos_signal_event+0x3c>)
340041ac:	4809      	ldr	r0, [pc, #36]	@ (340041d4 <aton_osal_freertos_signal_event+0x40>)
340041ae:	f01b fc2b 	bl	3401fa08 <__assert_func>
  _TailIsrCode_(task_woken);
340041b2:	9b01      	ldr	r3, [sp, #4]
340041b4:	b12b      	cbz	r3, 340041c2 <aton_osal_freertos_signal_event+0x2e>
340041b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
340041ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
340041be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04

  LL_ATON_LIB_UNUSED(task_woken);
#endif // !RTOS_HAS_NO_ISR_SIGNAL

  LL_ATON_LIB_UNUSED(ret);
}
340041c2:	b003      	add	sp, #12
340041c4:	f85d fb04 	ldr.w	pc, [sp], #4
340041c8:	340d14b0 	.word	0x340d14b0
340041cc:	3402b8cf 	.word	0x3402b8cf
340041d0:	34031115 	.word	0x34031115
340041d4:	3402b8df 	.word	0x3402b8df

340041d8 <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
340041d8:	b510      	push	{r4, lr}

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
340041da:	4604      	mov	r4, r0
340041dc:	b928      	cbnz	r0, 340041ea <LL_ATON_RT_Main+0x12>
340041de:	212e      	movs	r1, #46	@ 0x2e
340041e0:	4b10      	ldr	r3, [pc, #64]	@ (34004224 <LL_ATON_RT_Main+0x4c>)
340041e2:	4a11      	ldr	r2, [pc, #68]	@ (34004228 <LL_ATON_RT_Main+0x50>)
  LL_ATON_ASSERT(network_instance->network != NULL);
340041e4:	4811      	ldr	r0, [pc, #68]	@ (3400422c <LL_ATON_RT_Main+0x54>)
340041e6:	f01b fc0f 	bl	3401fa08 <__assert_func>
340041ea:	6803      	ldr	r3, [r0, #0]
340041ec:	b91b      	cbnz	r3, 340041f6 <LL_ATON_RT_Main+0x1e>
340041ee:	212f      	movs	r1, #47	@ 0x2f
340041f0:	4b0f      	ldr	r3, [pc, #60]	@ (34004230 <LL_ATON_RT_Main+0x58>)
340041f2:	4a0d      	ldr	r2, [pc, #52]	@ (34004228 <LL_ATON_RT_Main+0x50>)
340041f4:	e7f6      	b.n	340041e4 <LL_ATON_RT_Main+0xc>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
340041f6:	f000 fa11 	bl	3400461c <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
340041fa:	4620      	mov	r0, r4
340041fc:	f000 f9cc 	bl	34004598 <LL_ATON_RT_Init_Network>

  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
34004200:	4620      	mov	r0, r4
34004202:	f000 fa89 	bl	34004718 <LL_ATON_RT_RunEpochBlock>
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
34004206:	2801      	cmp	r0, #1
34004208:	d102      	bne.n	34004210 <LL_ATON_RT_Main+0x38>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
3400420a:	f7ff ffa9 	bl	34004160 <aton_osal_freertos_wfe>
    }
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
3400420e:	e7f7      	b.n	34004200 <LL_ATON_RT_Main+0x28>
34004210:	2802      	cmp	r0, #2
34004212:	d1f5      	bne.n	34004200 <LL_ATON_RT_Main+0x28>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
34004214:	4620      	mov	r0, r4
34004216:	f000 f9e3 	bl	340045e0 <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
3400421a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
3400421e:	f000 ba49 	b.w	340046b4 <LL_ATON_RT_RuntimeDeInit>
34004222:	bf00      	nop
34004224:	3402b946 	.word	0x3402b946
34004228:	34031196 	.word	0x34031196
3400422c:	3402b966 	.word	0x3402b966
34004230:	3402b9c2 	.word	0x3402b9c2

34004234 <__LL_ATON_RT_Init_Network>:
                          // wait for
  }
}

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
34004234:	b510      	push	{r4, lr}
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
34004236:	4604      	mov	r4, r0
34004238:	b310      	cbz	r0, 34004280 <__LL_ATON_RT_Init_Network+0x4c>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3400423a:	6803      	ldr	r3, [r0, #0]
3400423c:	b303      	cbz	r3, 34004280 <__LL_ATON_RT_Init_Network+0x4c>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
3400423e:	69db      	ldr	r3, [r3, #28]
34004240:	4798      	blx	r3
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
  nn_instance->exec_state.first_epoch_block = eb_list;
  nn_instance->exec_state.next_epoch_block = NULL;
34004242:	2300      	movs	r3, #0
  nn_instance->exec_state.current_epoch_block = eb_list;
34004244:	6060      	str	r0, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
34004246:	60a0      	str	r0, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
34004248:	60e3      	str	r3, [r4, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400424a:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400424c:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400424e:	6863      	ldr	r3, [r4, #4]
  if (list != NULL)
34004250:	b9a3      	cbnz	r3, 3400427c <__LL_ATON_RT_Init_Network+0x48>
  int i = 0;
34004252:	461a      	mov	r2, r3
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
34004254:	6262      	str	r2, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34004256:	2200      	movs	r2, #0
  nn_instance->exec_state.triggered_events = 0x0;
  nn_instance->exec_state.current_epoch_block_started = false;
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004258:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400425a:	62a2      	str	r2, [r4, #40]	@ 0x28
  nn_instance->exec_state.inference_started = false;
3400425c:	7622      	strb	r2, [r4, #24]
  nn_instance->exec_state.triggered_events = 0x0;
3400425e:	61e2      	str	r2, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
34004260:	f884 2020 	strb.w	r2, [r4, #32]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004264:	b163      	cbz	r3, 34004280 <__LL_ATON_RT_Init_Network+0x4c>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
34004266:	4621      	mov	r1, r4
  }
}
34004268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400426c:	2004      	movs	r0, #4
3400426e:	4718      	bx	r3
      list++;
34004270:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
34004272:	3201      	adds	r2, #1
34004274:	8a19      	ldrh	r1, [r3, #16]
34004276:	0709      	lsls	r1, r1, #28
34004278:	d5fa      	bpl.n	34004270 <__LL_ATON_RT_Init_Network+0x3c>
3400427a:	e7eb      	b.n	34004254 <__LL_ATON_RT_Init_Network+0x20>
3400427c:	2201      	movs	r2, #1
3400427e:	e7f9      	b.n	34004274 <__LL_ATON_RT_Init_Network+0x40>
}
34004280:	bd10      	pop	{r4, pc}
	...

34004284 <__ll_clear_aton_owner>:
  {
34004284:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
34004286:	4b09      	ldr	r3, [pc, #36]	@ (340042ac <__ll_clear_aton_owner+0x28>)
34004288:	681a      	ldr	r2, [r3, #0]
3400428a:	4282      	cmp	r2, r0
3400428c:	d005      	beq.n	3400429a <__ll_clear_aton_owner+0x16>
3400428e:	2139      	movs	r1, #57	@ 0x39
34004290:	4b07      	ldr	r3, [pc, #28]	@ (340042b0 <__ll_clear_aton_owner+0x2c>)
34004292:	4a08      	ldr	r2, [pc, #32]	@ (340042b4 <__ll_clear_aton_owner+0x30>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
34004294:	4808      	ldr	r0, [pc, #32]	@ (340042b8 <__ll_clear_aton_owner+0x34>)
34004296:	f01b fbb7 	bl	3401fa08 <__assert_func>
3400429a:	4a08      	ldr	r2, [pc, #32]	@ (340042bc <__ll_clear_aton_owner+0x38>)
3400429c:	6812      	ldr	r2, [r2, #0]
3400429e:	b11a      	cbz	r2, 340042a8 <__ll_clear_aton_owner+0x24>
340042a0:	213d      	movs	r1, #61	@ 0x3d
340042a2:	4b07      	ldr	r3, [pc, #28]	@ (340042c0 <__ll_clear_aton_owner+0x3c>)
340042a4:	4a03      	ldr	r2, [pc, #12]	@ (340042b4 <__ll_clear_aton_owner+0x30>)
340042a6:	e7f5      	b.n	34004294 <__ll_clear_aton_owner+0x10>
    __ll_current_aton_ip_owner = NULL;
340042a8:	601a      	str	r2, [r3, #0]
  }
340042aa:	bd08      	pop	{r3, pc}
340042ac:	340d1604 	.word	0x340d1604
340042b0:	3402b9eb 	.word	0x3402b9eb
340042b4:	340312f4 	.word	0x340312f4
340042b8:	3402b236 	.word	0x3402b236
340042bc:	340d1600 	.word	0x340d1600
340042c0:	3402ba17 	.word	0x3402ba17

340042c4 <__LL_ATON_RT_SetWaitMask>:
  {
340042c4:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
340042c6:	4b07      	ldr	r3, [pc, #28]	@ (340042e4 <__LL_ATON_RT_SetWaitMask+0x20>)
340042c8:	681b      	ldr	r3, [r3, #0]
340042ca:	b92b      	cbnz	r3, 340042d8 <__LL_ATON_RT_SetWaitMask+0x14>
340042cc:	216c      	movs	r1, #108	@ 0x6c
340042ce:	4b06      	ldr	r3, [pc, #24]	@ (340042e8 <__LL_ATON_RT_SetWaitMask+0x24>)
340042d0:	4a06      	ldr	r2, [pc, #24]	@ (340042ec <__LL_ATON_RT_SetWaitMask+0x28>)
340042d2:	4807      	ldr	r0, [pc, #28]	@ (340042f0 <__LL_ATON_RT_SetWaitMask+0x2c>)
340042d4:	f01b fb98 	bl	3401fa08 <__assert_func>
    __ll_current_wait_mask = wait_mask;
340042d8:	4b06      	ldr	r3, [pc, #24]	@ (340042f4 <__LL_ATON_RT_SetWaitMask+0x30>)
340042da:	6018      	str	r0, [r3, #0]
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
340042dc:	43c0      	mvns	r0, r0
340042de:	4b06      	ldr	r3, [pc, #24]	@ (340042f8 <__LL_ATON_RT_SetWaitMask+0x34>)
340042e0:	6258      	str	r0, [r3, #36]	@ 0x24
  }
340042e2:	bd08      	pop	{r3, pc}
340042e4:	340d1604 	.word	0x340d1604
340042e8:	3402b20c 	.word	0x3402b20c
340042ec:	34031247 	.word	0x34031247
340042f0:	3402b236 	.word	0x3402b236
340042f4:	340d1600 	.word	0x340d1600
340042f8:	580e1000 	.word	0x580e1000

340042fc <EpochBlock_EpochControllerUnit>:
  {
340042fc:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
340042fe:	8a03      	ldrh	r3, [r0, #16]
34004300:	075b      	lsls	r3, r3, #29
34004302:	d406      	bmi.n	34004312 <EpochBlock_EpochControllerUnit+0x16>
34004304:	f240 11d5 	movw	r1, #469	@ 0x1d5
34004308:	4b03      	ldr	r3, [pc, #12]	@ (34004318 <EpochBlock_EpochControllerUnit+0x1c>)
3400430a:	4a04      	ldr	r2, [pc, #16]	@ (3400431c <EpochBlock_EpochControllerUnit+0x20>)
3400430c:	4804      	ldr	r0, [pc, #16]	@ (34004320 <EpochBlock_EpochControllerUnit+0x24>)
3400430e:	f01b fb7b 	bl	3401fa08 <__assert_func>
  }
34004312:	68c0      	ldr	r0, [r0, #12]
34004314:	bd08      	pop	{r3, pc}
34004316:	bf00      	nop
34004318:	3402ba33 	.word	0x3402ba33
3400431c:	34031228 	.word	0x34031228
34004320:	3402ba4e 	.word	0x3402ba4e

34004324 <__LL_ATON_RT_ExecEndEpochBlock>:
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004324:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
{
34004326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400432a:	4605      	mov	r5, r0
3400432c:	460c      	mov	r4, r1
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400432e:	b113      	cbz	r3, 34004336 <__LL_ATON_RT_ExecEndEpochBlock+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
34004330:	4602      	mov	r2, r0
34004332:	2002      	movs	r0, #2
34004334:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
34004336:	8a2b      	ldrh	r3, [r5, #16]
34004338:	0758      	lsls	r0, r3, #29
3400433a:	d518      	bpl.n	3400436e <__LL_ATON_RT_ExecEndEpochBlock+0x4a>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400433c:	4628      	mov	r0, r5
3400433e:	f7ff ffdd 	bl	340042fc <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34004342:	b128      	cbz	r0, 34004350 <__LL_ATON_RT_ExecEndEpochBlock+0x2c>
34004344:	21c2      	movs	r1, #194	@ 0xc2
34004346:	4b25      	ldr	r3, [pc, #148]	@ (340043dc <__LL_ATON_RT_ExecEndEpochBlock+0xb8>)
34004348:	4a25      	ldr	r2, [pc, #148]	@ (340043e0 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400434a:	4826      	ldr	r0, [pc, #152]	@ (340043e4 <__LL_ATON_RT_ExecEndEpochBlock+0xc0>)
3400434c:	f01b fb5c 	bl	3401fa08 <__assert_func>
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
34004350:	2202      	movs	r2, #2
34004352:	4b25      	ldr	r3, [pc, #148]	@ (340043e8 <__LL_ATON_RT_ExecEndEpochBlock+0xc4>)
34004354:	601a      	str	r2, [r3, #0]
34004356:	681a      	ldr	r2, [r3, #0]
34004358:	0791      	lsls	r1, r2, #30
3400435a:	d4fc      	bmi.n	34004356 <__LL_ATON_RT_ExecEndEpochBlock+0x32>
3400435c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34004360:	601a      	str	r2, [r3, #0]
34004362:	681a      	ldr	r2, [r3, #0]
34004364:	0052      	lsls	r2, r2, #1
34004366:	d4fc      	bmi.n	34004362 <__LL_ATON_RT_ExecEndEpochBlock+0x3e>
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
34004368:	2019      	movs	r0, #25
3400436a:	f7fe fdbb 	bl	34002ee4 <LL_ATON_DisableClock>
  if (eb->end_epoch_block != NULL)
3400436e:	686b      	ldr	r3, [r5, #4]
34004370:	b10b      	cbz	r3, 34004376 <__LL_ATON_RT_ExecEndEpochBlock+0x52>
    eb->end_epoch_block((const void *)eb);
34004372:	4628      	mov	r0, r5
34004374:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
34004376:	8a2e      	ldrh	r6, [r5, #16]
  if (EpochBlock_IsEpochPureHW(eb) ||
34004378:	f016 0f90 	tst.w	r6, #144	@ 0x90
3400437c:	f006 07c0 	and.w	r7, r6, #192	@ 0xc0
34004380:	d108      	bne.n	34004394 <__LL_ATON_RT_ExecEndEpochBlock+0x70>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
34004382:	bb0f      	cbnz	r7, 340043c8 <__LL_ATON_RT_ExecEndEpochBlock+0xa4>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
34004384:	4b19      	ldr	r3, [pc, #100]	@ (340043ec <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
34004386:	681b      	ldr	r3, [r3, #0]
34004388:	42a3      	cmp	r3, r4
3400438a:	d115      	bne.n	340043b8 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400438c:	21ed      	movs	r1, #237	@ 0xed
3400438e:	4b18      	ldr	r3, [pc, #96]	@ (340043f0 <__LL_ATON_RT_ExecEndEpochBlock+0xcc>)
34004390:	4a13      	ldr	r2, [pc, #76]	@ (340043e0 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
34004392:	e7da      	b.n	3400434a <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
34004394:	4b15      	ldr	r3, [pc, #84]	@ (340043ec <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
34004396:	681b      	ldr	r3, [r3, #0]
34004398:	42a3      	cmp	r3, r4
3400439a:	d003      	beq.n	340043a4 <__LL_ATON_RT_ExecEndEpochBlock+0x80>
3400439c:	21e1      	movs	r1, #225	@ 0xe1
3400439e:	4b15      	ldr	r3, [pc, #84]	@ (340043f4 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>)
340043a0:	4a0f      	ldr	r2, [pc, #60]	@ (340043e0 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
340043a2:	e7d2      	b.n	3400434a <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    __LL_ATON_RT_SetWaitMask(0);
340043a4:	2000      	movs	r0, #0
340043a6:	f7ff ff8d 	bl	340042c4 <__LL_ATON_RT_SetWaitMask>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
340043aa:	06f3      	lsls	r3, r6, #27
340043ac:	d5e9      	bpl.n	34004382 <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
    __ll_clear_aton_owner(nn_instance);
340043ae:	4620      	mov	r0, r4
340043b0:	f7ff ff68 	bl	34004284 <__ll_clear_aton_owner>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
340043b4:	2f00      	cmp	r7, #0
340043b6:	d0e5      	beq.n	34004384 <__LL_ATON_RT_ExecEndEpochBlock+0x60>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
340043b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340043ba:	b163      	cbz	r3, 340043d6 <__LL_ATON_RT_ExecEndEpochBlock+0xb2>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
340043bc:	462a      	mov	r2, r5
340043be:	4621      	mov	r1, r4
}
340043c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
340043c4:	2003      	movs	r0, #3
340043c6:	4718      	bx	r3
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
340043c8:	6923      	ldr	r3, [r4, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
340043ca:	2b00      	cmp	r3, #0
340043cc:	d1f4      	bne.n	340043b8 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
                                       (nn_instance->exec_state.next_epoch_block ==
340043ce:	68e3      	ldr	r3, [r4, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
340043d0:	2b00      	cmp	r3, #0
340043d2:	d1f1      	bne.n	340043b8 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
340043d4:	e7eb      	b.n	340043ae <__LL_ATON_RT_ExecEndEpochBlock+0x8a>
}
340043d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340043da:	bf00      	nop
340043dc:	3402baaf 	.word	0x3402baaf
340043e0:	34031209 	.word	0x34031209
340043e4:	3402bab8 	.word	0x3402bab8
340043e8:	580fe000 	.word	0x580fe000
340043ec:	340d1604 	.word	0x340d1604
340043f0:	3402bb3e 	.word	0x3402bb3e
340043f4:	3402bb14 	.word	0x3402bb14

340043f8 <__LL_ATON_RT_DetermineNextEpochBlock>:
{
340043f8:	b508      	push	{r3, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
340043fa:	b928      	cbnz	r0, 34004408 <__LL_ATON_RT_DetermineNextEpochBlock+0x10>
340043fc:	21f8      	movs	r1, #248	@ 0xf8
340043fe:	4b1a      	ldr	r3, [pc, #104]	@ (34004468 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
34004400:	4a1a      	ldr	r2, [pc, #104]	@ (3400446c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
34004402:	481b      	ldr	r0, [pc, #108]	@ (34004470 <__LL_ATON_RT_DetermineNextEpochBlock+0x78>)
34004404:	f01b fb00 	bl	3401fa08 <__assert_func>
34004408:	69c3      	ldr	r3, [r0, #28]
3400440a:	b11b      	cbz	r3, 34004414 <__LL_ATON_RT_DetermineNextEpochBlock+0x1c>
3400440c:	21fa      	movs	r1, #250	@ 0xfa
3400440e:	4b19      	ldr	r3, [pc, #100]	@ (34004474 <__LL_ATON_RT_DetermineNextEpochBlock+0x7c>)
34004410:	4a16      	ldr	r2, [pc, #88]	@ (3400446c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
34004412:	e7f6      	b.n	34004402 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
  if ((nn_instance->exec_state.next_epoch_block != NULL))
34004414:	68c3      	ldr	r3, [r0, #12]
34004416:	b313      	cbz	r3, 3400445e <__LL_ATON_RT_DetermineNextEpochBlock+0x66>
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
34004418:	6903      	ldr	r3, [r0, #16]
3400441a:	b123      	cbz	r3, 34004426 <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
3400441c:	f44f 7181 	mov.w	r1, #258	@ 0x102
34004420:	4b15      	ldr	r3, [pc, #84]	@ (34004478 <__LL_ATON_RT_DetermineNextEpochBlock+0x80>)
34004422:	4a12      	ldr	r2, [pc, #72]	@ (3400446c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
34004424:	e7ed      	b.n	34004402 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
34004426:	6843      	ldr	r3, [r0, #4]
34004428:	6103      	str	r3, [r0, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3400442a:	6883      	ldr	r3, [r0, #8]
3400442c:	6143      	str	r3, [r0, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
3400442e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
34004430:	6283      	str	r3, [r0, #40]	@ 0x28
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
34004432:	68c3      	ldr	r3, [r0, #12]
34004434:	6043      	str	r3, [r0, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
34004436:	68c3      	ldr	r3, [r0, #12]
34004438:	6083      	str	r3, [r0, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400443a:	6883      	ldr	r3, [r0, #8]
  if (list != NULL)
3400443c:	b96b      	cbnz	r3, 3400445a <__LL_ATON_RT_DetermineNextEpochBlock+0x62>
  int i = 0;
3400443e:	461a      	mov	r2, r3
    nn_instance->exec_state.next_epoch_block = NULL;
34004440:	2300      	movs	r3, #0
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
34004442:	6242      	str	r2, [r0, #36]	@ 0x24
    nn_instance->exec_state.next_epoch_block = NULL;
34004444:	60c3      	str	r3, [r0, #12]
  nn_instance->exec_state.current_epoch_block_started = false;
34004446:	2300      	movs	r3, #0
34004448:	f880 3020 	strb.w	r3, [r0, #32]
}
3400444c:	bd08      	pop	{r3, pc}
      list++;
3400444e:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
34004450:	3201      	adds	r2, #1
34004452:	8a19      	ldrh	r1, [r3, #16]
34004454:	0709      	lsls	r1, r1, #28
34004456:	d5fa      	bpl.n	3400444e <__LL_ATON_RT_DetermineNextEpochBlock+0x56>
34004458:	e7f2      	b.n	34004440 <__LL_ATON_RT_DetermineNextEpochBlock+0x48>
3400445a:	2201      	movs	r2, #1
3400445c:	e7f9      	b.n	34004452 <__LL_ATON_RT_DetermineNextEpochBlock+0x5a>
    nn_instance->exec_state.current_epoch_block++;
3400445e:	6843      	ldr	r3, [r0, #4]
34004460:	3314      	adds	r3, #20
34004462:	6043      	str	r3, [r0, #4]
34004464:	e7ef      	b.n	34004446 <__LL_ATON_RT_DetermineNextEpochBlock+0x4e>
34004466:	bf00      	nop
34004468:	3402bbac 	.word	0x3402bbac
3400446c:	340311e4 	.word	0x340311e4
34004470:	3402bab8 	.word	0x3402bab8
34004474:	3402bbc7 	.word	0x3402bbc7
34004478:	3402bbf7 	.word	0x3402bbf7

3400447c <dump_dma_state>:
LL_ATON_WEAK void dump_dma_state(void){};
3400447c:	4770      	bx	lr
	...

34004480 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
34004480:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
34004482:	4604      	mov	r4, r0
34004484:	2800      	cmp	r0, #0
34004486:	d05b      	beq.n	34004540 <__LL_ATON_RT_IrqErr+0xc0>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
34004488:	4b2e      	ldr	r3, [pc, #184]	@ (34004544 <__LL_ATON_RT_IrqErr+0xc4>)
3400448a:	4003      	ands	r3, r0
3400448c:	d007      	beq.n	3400449e <__LL_ATON_RT_IrqErr+0x1e>

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3400448e:	4259      	negs	r1, r3
34004490:	4019      	ands	r1, r3
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
34004492:	4b2d      	ldr	r3, [pc, #180]	@ (34004548 <__LL_ATON_RT_IrqErr+0xc8>)
34004494:	030a      	lsls	r2, r1, #12
34004496:	58d2      	ldr	r2, [r2, r3]
    LL_ATON_PRINTF("Streaming engine #%" PRIu32 " error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
34004498:	482c      	ldr	r0, [pc, #176]	@ (3400454c <__LL_ATON_RT_IrqErr+0xcc>)
3400449a:	f01c ff67 	bl	3402136c <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3400449e:	f3c4 0309 	ubfx	r3, r4, #0, #10
340044a2:	b113      	cbz	r3, 340044aa <__LL_ATON_RT_IrqErr+0x2a>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
340044a4:	482a      	ldr	r0, [pc, #168]	@ (34004550 <__LL_ATON_RT_IrqErr+0xd0>)
340044a6:	f01c ffc9 	bl	3402143c <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
340044aa:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
340044ae:	d002      	beq.n	340044b6 <__LL_ATON_RT_IrqErr+0x36>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
340044b0:	4828      	ldr	r0, [pc, #160]	@ (34004554 <__LL_ATON_RT_IrqErr+0xd4>)
340044b2:	f01c ffc3 	bl	3402143c <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
340044b6:	01e5      	lsls	r5, r4, #7
340044b8:	d502      	bpl.n	340044c0 <__LL_ATON_RT_IrqErr+0x40>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
340044ba:	4827      	ldr	r0, [pc, #156]	@ (34004558 <__LL_ATON_RT_IrqErr+0xd8>)
340044bc:	f01c ffbe 	bl	3402143c <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
340044c0:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
340044c4:	d00e      	beq.n	340044e4 <__LL_ATON_RT_IrqErr+0x64>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
340044c6:	4825      	ldr	r0, [pc, #148]	@ (3400455c <__LL_ATON_RT_IrqErr+0xdc>)
340044c8:	f01c ffb8 	bl	3402143c <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
340044cc:	4b24      	ldr	r3, [pc, #144]	@ (34004560 <__LL_ATON_RT_IrqErr+0xe0>)
340044ce:	2100      	movs	r1, #0
340044d0:	691a      	ldr	r2, [r3, #16]
340044d2:	4824      	ldr	r0, [pc, #144]	@ (34004564 <__LL_ATON_RT_IrqErr+0xe4>)
340044d4:	f01c ff4a 	bl	3402136c <iprintf>
340044d8:	4b23      	ldr	r3, [pc, #140]	@ (34004568 <__LL_ATON_RT_IrqErr+0xe8>)
340044da:	2101      	movs	r1, #1
340044dc:	691a      	ldr	r2, [r3, #16]
340044de:	4821      	ldr	r0, [pc, #132]	@ (34004564 <__LL_ATON_RT_IrqErr+0xe4>)
340044e0:	f01c ff44 	bl	3402136c <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
340044e4:	0120      	lsls	r0, r4, #4
340044e6:	d502      	bpl.n	340044ee <__LL_ATON_RT_IrqErr+0x6e>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
340044e8:	4820      	ldr	r0, [pc, #128]	@ (3400456c <__LL_ATON_RT_IrqErr+0xec>)
340044ea:	f01c ffa7 	bl	3402143c <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
340044ee:	0061      	lsls	r1, r4, #1
340044f0:	d50c      	bpl.n	3400450c <__LL_ATON_RT_IrqErr+0x8c>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
340044f2:	4d1f      	ldr	r5, [pc, #124]	@ (34004570 <__LL_ATON_RT_IrqErr+0xf0>)
340044f4:	481f      	ldr	r0, [pc, #124]	@ (34004574 <__LL_ATON_RT_IrqErr+0xf4>)
340044f6:	68e9      	ldr	r1, [r5, #12]
340044f8:	f01c ff38 	bl	3402136c <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
340044fc:	6a29      	ldr	r1, [r5, #32]
340044fe:	481e      	ldr	r0, [pc, #120]	@ (34004578 <__LL_ATON_RT_IrqErr+0xf8>)
34004500:	f01c ff34 	bl	3402136c <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
34004504:	69e9      	ldr	r1, [r5, #28]
34004506:	481d      	ldr	r0, [pc, #116]	@ (3400457c <__LL_ATON_RT_IrqErr+0xfc>)
34004508:	f01c ff30 	bl	3402136c <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
3400450c:	00a2      	lsls	r2, r4, #2
3400450e:	d502      	bpl.n	34004516 <__LL_ATON_RT_IrqErr+0x96>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
34004510:	481b      	ldr	r0, [pc, #108]	@ (34004580 <__LL_ATON_RT_IrqErr+0x100>)
34004512:	f01c ff93 	bl	3402143c <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
34004516:	00e3      	lsls	r3, r4, #3
34004518:	d502      	bpl.n	34004520 <__LL_ATON_RT_IrqErr+0xa0>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3400451a:	481a      	ldr	r0, [pc, #104]	@ (34004584 <__LL_ATON_RT_IrqErr+0x104>)
3400451c:	f01c ff8e 	bl	3402143c <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
34004520:	f7ff ffac 	bl	3400447c <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
34004524:	4622      	mov	r2, r4
34004526:	2300      	movs	r3, #0
34004528:	f240 3153 	movw	r1, #851	@ 0x353
3400452c:	4816      	ldr	r0, [pc, #88]	@ (34004588 <__LL_ATON_RT_IrqErr+0x108>)
3400452e:	f01c ff1d 	bl	3402136c <iprintf>
#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
#endif
  LL_ATON_ASSERT(false); // may never happen
34004532:	f240 3157 	movw	r1, #855	@ 0x357
34004536:	4b15      	ldr	r3, [pc, #84]	@ (3400458c <__LL_ATON_RT_IrqErr+0x10c>)
34004538:	4a15      	ldr	r2, [pc, #84]	@ (34004590 <__LL_ATON_RT_IrqErr+0x110>)
3400453a:	4816      	ldr	r0, [pc, #88]	@ (34004594 <__LL_ATON_RT_IrqErr+0x114>)
3400453c:	f01b fa64 	bl	3401fa08 <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
34004540:	bd38      	pop	{r3, r4, r5, pc}
34004542:	bf00      	nop
34004544:	000ffc00 	.word	0x000ffc00
34004548:	580e503c 	.word	0x580e503c
3400454c:	3402bc38 	.word	0x3402bc38
34004550:	3402bc66 	.word	0x3402bc66
34004554:	3402bc8c 	.word	0x3402bc8c
34004558:	3402bcb0 	.word	0x3402bcb0
3400455c:	3402bcd0 	.word	0x3402bcd0
34004560:	580e2000 	.word	0x580e2000
34004564:	3402bce8 	.word	0x3402bce8
34004568:	580e3000 	.word	0x580e3000
3400456c:	3402bcfd 	.word	0x3402bcfd
34004570:	580fe000 	.word	0x580fe000
34004574:	3402bd15 	.word	0x3402bd15
34004578:	3402bd49 	.word	0x3402bd49
3400457c:	3402bd73 	.word	0x3402bd73
34004580:	3402bd94 	.word	0x3402bd94
34004584:	3402bdb5 	.word	0x3402bdb5
34004588:	3402bdd0 	.word	0x3402bdd0
3400458c:	3402b7cd 	.word	0x3402b7cd
34004590:	340311c0 	.word	0x340311c0
34004594:	3402bab8 	.word	0x3402bab8

34004598 <LL_ATON_RT_Init_Network>:
{
34004598:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400459a:	4604      	mov	r4, r0
3400459c:	b1b0      	cbz	r0, 340045cc <LL_ATON_RT_Init_Network+0x34>
  if (nn_instance->network == NULL)
3400459e:	6803      	ldr	r3, [r0, #0]
340045a0:	b1a3      	cbz	r3, 340045cc <LL_ATON_RT_Init_Network+0x34>
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
340045a2:	685b      	ldr	r3, [r3, #4]
340045a4:	b933      	cbnz	r3, 340045b4 <LL_ATON_RT_Init_Network+0x1c>
340045a6:	f240 11af 	movw	r1, #431	@ 0x1af
340045aa:	4b09      	ldr	r3, [pc, #36]	@ (340045d0 <LL_ATON_RT_Init_Network+0x38>)
340045ac:	4a09      	ldr	r2, [pc, #36]	@ (340045d4 <LL_ATON_RT_Init_Network+0x3c>)
  LL_ATON_ASSERT(ret == true);
340045ae:	480a      	ldr	r0, [pc, #40]	@ (340045d8 <LL_ATON_RT_Init_Network+0x40>)
340045b0:	f01b fa2a 	bl	3401fa08 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
340045b4:	4798      	blx	r3
  LL_ATON_ASSERT(ret == true);
340045b6:	b920      	cbnz	r0, 340045c2 <LL_ATON_RT_Init_Network+0x2a>
340045b8:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
340045bc:	4b07      	ldr	r3, [pc, #28]	@ (340045dc <LL_ATON_RT_Init_Network+0x44>)
340045be:	4a05      	ldr	r2, [pc, #20]	@ (340045d4 <LL_ATON_RT_Init_Network+0x3c>)
340045c0:	e7f5      	b.n	340045ae <LL_ATON_RT_Init_Network+0x16>
  __LL_ATON_RT_Init_Network(nn_instance);
340045c2:	4620      	mov	r0, r4
}
340045c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __LL_ATON_RT_Init_Network(nn_instance);
340045c8:	f7ff be34 	b.w	34004234 <__LL_ATON_RT_Init_Network>
}
340045cc:	bd10      	pop	{r4, pc}
340045ce:	bf00      	nop
340045d0:	3402bdf7 	.word	0x3402bdf7
340045d4:	3403130a 	.word	0x3403130a
340045d8:	3402bab8 	.word	0x3402bab8
340045dc:	3402be2c 	.word	0x3402be2c

340045e0 <LL_ATON_RT_DeInit_Network>:
{
340045e0:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
340045e2:	4604      	mov	r4, r0
340045e4:	b1b8      	cbz	r0, 34004616 <LL_ATON_RT_DeInit_Network+0x36>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
340045e6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
340045e8:	b11b      	cbz	r3, 340045f2 <LL_ATON_RT_DeInit_Network+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
340045ea:	4601      	mov	r1, r0
340045ec:	2200      	movs	r2, #0
340045ee:	2005      	movs	r0, #5
340045f0:	4798      	blx	r3
  if (nn_instance == __ll_current_aton_ip_owner)
340045f2:	4b09      	ldr	r3, [pc, #36]	@ (34004618 <LL_ATON_RT_DeInit_Network+0x38>)
340045f4:	681b      	ldr	r3, [r3, #0]
340045f6:	42a3      	cmp	r3, r4
340045f8:	d102      	bne.n	34004600 <LL_ATON_RT_DeInit_Network+0x20>
    __ll_clear_aton_owner(nn_instance);
340045fa:	4620      	mov	r0, r4
340045fc:	f7ff fe42 	bl	34004284 <__ll_clear_aton_owner>
  nn_instance->exec_state.current_epoch_block = eb_list;
34004600:	2300      	movs	r3, #0
34004602:	6063      	str	r3, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
34004604:	60a3      	str	r3, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
34004606:	60e3      	str	r3, [r4, #12]
  nn_instance->exec_state.saved_current_epoch_block = NULL;
34004608:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400460a:	6163      	str	r3, [r4, #20]
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
3400460c:	6263      	str	r3, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400460e:	62a3      	str	r3, [r4, #40]	@ 0x28
  nn_instance->exec_state.triggered_events = 0x0;
34004610:	61e3      	str	r3, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
34004612:	f884 3020 	strb.w	r3, [r4, #32]
}
34004616:	bd10      	pop	{r4, pc}
34004618:	340d1604 	.word	0x340d1604

3400461c <LL_ATON_RT_RuntimeInit>:
{
3400461c:	b510      	push	{r4, lr}
  LL_ATON_Init();
3400461e:	f7fd fe65 	bl	340022ec <LL_ATON_Init>
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
34004622:	2202      	movs	r2, #2
34004624:	4b20      	ldr	r3, [pc, #128]	@ (340046a8 <LL_ATON_RT_RuntimeInit+0x8c>)
34004626:	601a      	str	r2, [r3, #0]
34004628:	681a      	ldr	r2, [r3, #0]
3400462a:	0791      	lsls	r1, r2, #30
3400462c:	d4fc      	bmi.n	34004628 <LL_ATON_RT_RuntimeInit+0xc>
3400462e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34004632:	601a      	str	r2, [r3, #0]
34004634:	681a      	ldr	r2, [r3, #0]
34004636:	0052      	lsls	r2, r2, #1
34004638:	d4fc      	bmi.n	34004634 <LL_ATON_RT_RuntimeInit+0x18>
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3400463a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3400463e:	615a      	str	r2, [r3, #20]
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
34004640:	f04f 32ff 	mov.w	r2, #4294967295
34004644:	625a      	str	r2, [r3, #36]	@ 0x24
    ATON_ENABLE(INTCTRL, 0);
34004646:	681a      	ldr	r2, [r3, #0]
34004648:	f042 0201 	orr.w	r2, r2, #1
3400464c:	601a      	str	r2, [r3, #0]
  LL_ATON_OSAL_INIT();
3400464e:	f7ff fcf7 	bl	34004040 <aton_osal_freertos_init>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34004652:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34004656:	4b15      	ldr	r3, [pc, #84]	@ (340046ac <LL_ATON_RT_RuntimeInit+0x90>)
34004658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400465c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004660:	f3bf 8f6f 	isb	sy
34004664:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34004668:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400466c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004670:	f3bf 8f6f 	isb	sy
34004674:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
34004678:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400467c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004680:	f3bf 8f6f 	isb	sy
34004684:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
34004688:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400468c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004690:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34004694:	605a      	str	r2, [r3, #4]
  if (ll_aton_init_deinit_trace)
34004696:	4b06      	ldr	r3, [pc, #24]	@ (340046b0 <LL_ATON_RT_RuntimeInit+0x94>)
34004698:	681b      	ldr	r3, [r3, #0]
3400469a:	b11b      	cbz	r3, 340046a4 <LL_ATON_RT_RuntimeInit+0x88>
}
3400469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
340046a0:	2006      	movs	r0, #6
340046a2:	4718      	bx	r3
}
340046a4:	bd10      	pop	{r4, pc}
340046a6:	bf00      	nop
340046a8:	580e1000 	.word	0x580e1000
340046ac:	e000e100 	.word	0xe000e100
340046b0:	340d15fc 	.word	0x340d15fc

340046b4 <LL_ATON_RT_RuntimeDeInit>:
{
340046b4:	b508      	push	{r3, lr}
  if (ll_aton_init_deinit_trace)
340046b6:	4b16      	ldr	r3, [pc, #88]	@ (34004710 <LL_ATON_RT_RuntimeDeInit+0x5c>)
340046b8:	681b      	ldr	r3, [r3, #0]
340046ba:	b10b      	cbz	r3, 340046c0 <LL_ATON_RT_RuntimeDeInit+0xc>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
340046bc:	2007      	movs	r0, #7
340046be:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
340046c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
340046c4:	4b13      	ldr	r3, [pc, #76]	@ (34004714 <LL_ATON_RT_RuntimeDeInit+0x60>)
340046c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340046ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340046ce:	f3bf 8f6f 	isb	sy
340046d2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
340046d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340046da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340046de:	f3bf 8f6f 	isb	sy
340046e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
340046e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340046ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340046ee:	f3bf 8f6f 	isb	sy
340046f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340046f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340046fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340046fe:	f3bf 8f6f 	isb	sy
  LL_ATON_OSAL_DEINIT();
34004702:	f7ff fcf9 	bl	340040f8 <aton_osal_freertos_deinit>
}
34004706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DeInit();
3400470a:	f7fe b88b 	b.w	34002824 <LL_ATON_DeInit>
3400470e:	bf00      	nop
34004710:	340d15fc 	.word	0x340d15fc
34004714:	e000e100 	.word	0xe000e100

34004718 <LL_ATON_RT_RunEpochBlock>:
{
34004718:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400471a:	4604      	mov	r4, r0
3400471c:	b930      	cbnz	r0, 3400472c <LL_ATON_RT_RunEpochBlock+0x14>
3400471e:	f240 2149 	movw	r1, #585	@ 0x249
34004722:	4b8c      	ldr	r3, [pc, #560]	@ (34004954 <LL_ATON_RT_RunEpochBlock+0x23c>)
34004724:	4a8c      	ldr	r2, [pc, #560]	@ (34004958 <LL_ATON_RT_RunEpochBlock+0x240>)
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
34004726:	488d      	ldr	r0, [pc, #564]	@ (3400495c <LL_ATON_RT_RunEpochBlock+0x244>)
34004728:	f01b f96e 	bl	3401fa08 <__assert_func>
3400472c:	6843      	ldr	r3, [r0, #4]
3400472e:	b923      	cbnz	r3, 3400473a <LL_ATON_RT_RunEpochBlock+0x22>
34004730:	f44f 7113 	mov.w	r1, #588	@ 0x24c
34004734:	4b8a      	ldr	r3, [pc, #552]	@ (34004960 <LL_ATON_RT_RunEpochBlock+0x248>)
34004736:	4a88      	ldr	r2, [pc, #544]	@ (34004958 <LL_ATON_RT_RunEpochBlock+0x240>)
34004738:	e7f5      	b.n	34004726 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.inference_started == false)
3400473a:	7e03      	ldrb	r3, [r0, #24]
3400473c:	b98b      	cbnz	r3, 34004762 <LL_ATON_RT_RunEpochBlock+0x4a>
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3400473e:	6803      	ldr	r3, [r0, #0]
34004740:	b10b      	cbz	r3, 34004746 <LL_ATON_RT_RunEpochBlock+0x2e>
34004742:	689b      	ldr	r3, [r3, #8]
34004744:	b923      	cbnz	r3, 34004750 <LL_ATON_RT_RunEpochBlock+0x38>
34004746:	f240 215e 	movw	r1, #606	@ 0x25e
3400474a:	4b86      	ldr	r3, [pc, #536]	@ (34004964 <LL_ATON_RT_RunEpochBlock+0x24c>)
3400474c:	4a82      	ldr	r2, [pc, #520]	@ (34004958 <LL_ATON_RT_RunEpochBlock+0x240>)
3400474e:	e7ea      	b.n	34004726 <LL_ATON_RT_RunEpochBlock+0xe>
    bool ret = nn_instance->network->ec_inference_init();
34004750:	4798      	blx	r3
    LL_ATON_ASSERT(ret == true);
34004752:	b920      	cbnz	r0, 3400475e <LL_ATON_RT_RunEpochBlock+0x46>
34004754:	f240 2162 	movw	r1, #610	@ 0x262
34004758:	4b83      	ldr	r3, [pc, #524]	@ (34004968 <LL_ATON_RT_RunEpochBlock+0x250>)
3400475a:	4a7f      	ldr	r2, [pc, #508]	@ (34004958 <LL_ATON_RT_RunEpochBlock+0x240>)
3400475c:	e7e3      	b.n	34004726 <LL_ATON_RT_RunEpochBlock+0xe>
    nn_instance->exec_state.inference_started = true;
3400475e:	2301      	movs	r3, #1
34004760:	7623      	strb	r3, [r4, #24]
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
34004762:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
34004764:	8a03      	ldrh	r3, [r0, #16]
34004766:	075a      	lsls	r2, r3, #29
34004768:	d512      	bpl.n	34004790 <LL_ATON_RT_RunEpochBlock+0x78>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400476a:	f7ff fdc7 	bl	340042fc <EpochBlock_EpochControllerUnit>
3400476e:	2301      	movs	r3, #1
34004770:	fa03 f000 	lsl.w	r0, r3, r0
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
34004774:	f894 3020 	ldrb.w	r3, [r4, #32]
34004778:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
3400477c:	b343      	cbz	r3, 340047d0 <LL_ATON_RT_RunEpochBlock+0xb8>
3400477e:	2800      	cmp	r0, #0
34004780:	d036      	beq.n	340047f0 <LL_ATON_RT_RunEpochBlock+0xd8>
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
34004782:	69e3      	ldr	r3, [r4, #28]
34004784:	ea30 0303 	bics.w	r3, r0, r3
34004788:	d004      	beq.n	34004794 <LL_ATON_RT_RunEpochBlock+0x7c>
        return LL_ATON_RT_WFE;
3400478a:	2001      	movs	r0, #1
}
3400478c:	b002      	add	sp, #8
3400478e:	bd70      	pop	{r4, r5, r6, pc}
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
34004790:	68c0      	ldr	r0, [r0, #12]
34004792:	e7ef      	b.n	34004774 <LL_ATON_RT_RunEpochBlock+0x5c>
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
34004794:	4b75      	ldr	r3, [pc, #468]	@ (3400496c <LL_ATON_RT_RunEpochBlock+0x254>)
34004796:	681b      	ldr	r3, [r3, #0]
34004798:	42a3      	cmp	r3, r4
3400479a:	d004      	beq.n	340047a6 <LL_ATON_RT_RunEpochBlock+0x8e>
3400479c:	f240 217a 	movw	r1, #634	@ 0x27a
340047a0:	4b73      	ldr	r3, [pc, #460]	@ (34004970 <LL_ATON_RT_RunEpochBlock+0x258>)
340047a2:	4a6d      	ldr	r2, [pc, #436]	@ (34004958 <LL_ATON_RT_RunEpochBlock+0x240>)
340047a4:	e7bf      	b.n	34004726 <LL_ATON_RT_RunEpochBlock+0xe>
340047a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
340047aa:	4a72      	ldr	r2, [pc, #456]	@ (34004974 <LL_ATON_RT_RunEpochBlock+0x25c>)
340047ac:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340047b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340047b4:	f3bf 8f6f 	isb	sy
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
340047b8:	69e3      	ldr	r3, [r4, #28]
340047ba:	ea23 0300 	bic.w	r3, r3, r0
340047be:	61e3      	str	r3, [r4, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
340047c0:	6051      	str	r1, [r2, #4]
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
340047c2:	6860      	ldr	r0, [r4, #4]
340047c4:	4621      	mov	r1, r4
340047c6:	f7ff fdad 	bl	34004324 <__LL_ATON_RT_ExecEndEpochBlock>
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
340047ca:	4620      	mov	r0, r4
340047cc:	f7ff fe14 	bl	340043f8 <__LL_ATON_RT_DetermineNextEpochBlock>
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
340047d0:	6863      	ldr	r3, [r4, #4]
340047d2:	8a1b      	ldrh	r3, [r3, #16]
340047d4:	071b      	lsls	r3, r3, #28
340047d6:	d534      	bpl.n	34004842 <LL_ATON_RT_RunEpochBlock+0x12a>
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
340047d8:	6923      	ldr	r3, [r4, #16]
340047da:	2b00      	cmp	r3, #0
340047dc:	f000 80b7 	beq.w	3400494e <LL_ATON_RT_RunEpochBlock+0x236>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
340047e0:	4b62      	ldr	r3, [pc, #392]	@ (3400496c <LL_ATON_RT_RunEpochBlock+0x254>)
340047e2:	681a      	ldr	r2, [r3, #0]
340047e4:	b932      	cbnz	r2, 340047f4 <LL_ATON_RT_RunEpochBlock+0xdc>
340047e6:	218e      	movs	r1, #142	@ 0x8e
340047e8:	4b63      	ldr	r3, [pc, #396]	@ (34004978 <LL_ATON_RT_RunEpochBlock+0x260>)
340047ea:	4a64      	ldr	r2, [pc, #400]	@ (3400497c <LL_ATON_RT_RunEpochBlock+0x264>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
340047ec:	4864      	ldr	r0, [pc, #400]	@ (34004980 <LL_ATON_RT_RunEpochBlock+0x268>)
340047ee:	e79b      	b.n	34004728 <LL_ATON_RT_RunEpochBlock+0x10>
  bool this_run_executed_end_epoch = false;
340047f0:	4606      	mov	r6, r0
340047f2:	e7ed      	b.n	340047d0 <LL_ATON_RT_RunEpochBlock+0xb8>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
340047f4:	6862      	ldr	r2, [r4, #4]
340047f6:	8a12      	ldrh	r2, [r2, #16]
340047f8:	0716      	lsls	r6, r2, #28
340047fa:	d403      	bmi.n	34004804 <LL_ATON_RT_RunEpochBlock+0xec>
340047fc:	218f      	movs	r1, #143	@ 0x8f
340047fe:	4b61      	ldr	r3, [pc, #388]	@ (34004984 <LL_ATON_RT_RunEpochBlock+0x26c>)
34004800:	4a5e      	ldr	r2, [pc, #376]	@ (3400497c <LL_ATON_RT_RunEpochBlock+0x264>)
34004802:	e7f3      	b.n	340047ec <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
34004804:	6922      	ldr	r2, [r4, #16]
34004806:	8a12      	ldrh	r2, [r2, #16]
34004808:	0655      	lsls	r5, r2, #25
3400480a:	d403      	bmi.n	34004814 <LL_ATON_RT_RunEpochBlock+0xfc>
3400480c:	2191      	movs	r1, #145	@ 0x91
3400480e:	4b5e      	ldr	r3, [pc, #376]	@ (34004988 <LL_ATON_RT_RunEpochBlock+0x270>)
34004810:	4a5a      	ldr	r2, [pc, #360]	@ (3400497c <LL_ATON_RT_RunEpochBlock+0x264>)
34004812:	e7eb      	b.n	340047ec <LL_ATON_RT_RunEpochBlock+0xd4>
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
34004814:	6818      	ldr	r0, [r3, #0]
34004816:	f7ff fd35 	bl	34004284 <__ll_clear_aton_owner>
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400481a:	68e3      	ldr	r3, [r4, #12]
3400481c:	b11b      	cbz	r3, 34004826 <LL_ATON_RT_RunEpochBlock+0x10e>
3400481e:	219a      	movs	r1, #154	@ 0x9a
34004820:	4b5a      	ldr	r3, [pc, #360]	@ (3400498c <LL_ATON_RT_RunEpochBlock+0x274>)
34004822:	4a56      	ldr	r2, [pc, #344]	@ (3400497c <LL_ATON_RT_RunEpochBlock+0x264>)
34004824:	e7e2      	b.n	340047ec <LL_ATON_RT_RunEpochBlock+0xd4>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
34004826:	6922      	ldr	r2, [r4, #16]
34004828:	6062      	str	r2, [r4, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3400482a:	6962      	ldr	r2, [r4, #20]
3400482c:	60a2      	str	r2, [r4, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
3400482e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
34004830:	6262      	str	r2, [r4, #36]	@ 0x24
    nn_instance->exec_state.saved_current_epoch_block = NULL;
34004832:	6123      	str	r3, [r4, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
34004834:	6163      	str	r3, [r4, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34004836:	62a3      	str	r3, [r4, #40]	@ 0x28
        nn_instance->exec_state.current_epoch_block++;
34004838:	6863      	ldr	r3, [r4, #4]
3400483a:	3314      	adds	r3, #20
3400483c:	6063      	str	r3, [r4, #4]
        return LL_ATON_RT_NO_WFE;
3400483e:	2000      	movs	r0, #0
34004840:	e7a4      	b.n	3400478c <LL_ATON_RT_RunEpochBlock+0x74>
    if (this_run_executed_end_epoch)
34004842:	2e00      	cmp	r6, #0
34004844:	d1fb      	bne.n	3400483e <LL_ATON_RT_RunEpochBlock+0x126>
    if (!nn_instance->exec_state.current_epoch_block_started)
34004846:	f894 3020 	ldrb.w	r3, [r4, #32]
3400484a:	2b00      	cmp	r3, #0
3400484c:	d169      	bne.n	34004922 <LL_ATON_RT_RunEpochBlock+0x20a>
      nn_instance->exec_state.current_epoch_block_started = true;
3400484e:	2301      	movs	r3, #1
34004850:	f884 3020 	strb.w	r3, [r4, #32]
      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
34004854:	6865      	ldr	r5, [r4, #4]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
34004856:	68e3      	ldr	r3, [r4, #12]
34004858:	b11b      	cbz	r3, 34004862 <LL_ATON_RT_RunEpochBlock+0x14a>
3400485a:	2161      	movs	r1, #97	@ 0x61
3400485c:	4b4b      	ldr	r3, [pc, #300]	@ (3400498c <LL_ATON_RT_RunEpochBlock+0x274>)
3400485e:	4a4c      	ldr	r2, [pc, #304]	@ (34004990 <LL_ATON_RT_RunEpochBlock+0x278>)
34004860:	e761      	b.n	34004726 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004862:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004864:	b11b      	cbz	r3, 3400486e <LL_ATON_RT_RunEpochBlock+0x156>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
34004866:	462a      	mov	r2, r5
34004868:	4621      	mov	r1, r4
3400486a:	4630      	mov	r0, r6
3400486c:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
3400486e:	8a2b      	ldrh	r3, [r5, #16]
  if (EpochBlock_IsEpochStart(eb))
34004870:	07d8      	lsls	r0, r3, #31
34004872:	d505      	bpl.n	34004880 <LL_ATON_RT_RunEpochBlock+0x168>
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
34004874:	69e2      	ldr	r2, [r4, #28]
34004876:	b11a      	cbz	r2, 34004880 <LL_ATON_RT_RunEpochBlock+0x168>
34004878:	214d      	movs	r1, #77	@ 0x4d
3400487a:	4b46      	ldr	r3, [pc, #280]	@ (34004994 <LL_ATON_RT_RunEpochBlock+0x27c>)
3400487c:	4a46      	ldr	r2, [pc, #280]	@ (34004998 <LL_ATON_RT_RunEpochBlock+0x280>)
3400487e:	e7b5      	b.n	340047ec <LL_ATON_RT_RunEpochBlock+0xd4>
  if (EpochBlock_IsEpochPureHW(eb) ||
34004880:	f013 0f50 	tst.w	r3, #80	@ 0x50
34004884:	d015      	beq.n	340048b2 <LL_ATON_RT_RunEpochBlock+0x19a>
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
34004886:	4a39      	ldr	r2, [pc, #228]	@ (3400496c <LL_ATON_RT_RunEpochBlock+0x254>)
34004888:	6811      	ldr	r1, [r2, #0]
3400488a:	428c      	cmp	r4, r1
3400488c:	d103      	bne.n	34004896 <LL_ATON_RT_RunEpochBlock+0x17e>
3400488e:	2128      	movs	r1, #40	@ 0x28
34004890:	4b42      	ldr	r3, [pc, #264]	@ (3400499c <LL_ATON_RT_RunEpochBlock+0x284>)
34004892:	4a43      	ldr	r2, [pc, #268]	@ (340049a0 <LL_ATON_RT_RunEpochBlock+0x288>)
34004894:	e7aa      	b.n	340047ec <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
34004896:	6811      	ldr	r1, [r2, #0]
34004898:	b119      	cbz	r1, 340048a2 <LL_ATON_RT_RunEpochBlock+0x18a>
3400489a:	212c      	movs	r1, #44	@ 0x2c
3400489c:	4b41      	ldr	r3, [pc, #260]	@ (340049a4 <LL_ATON_RT_RunEpochBlock+0x28c>)
3400489e:	4a40      	ldr	r2, [pc, #256]	@ (340049a0 <LL_ATON_RT_RunEpochBlock+0x288>)
340048a0:	e7a4      	b.n	340047ec <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
340048a2:	4941      	ldr	r1, [pc, #260]	@ (340049a8 <LL_ATON_RT_RunEpochBlock+0x290>)
340048a4:	6809      	ldr	r1, [r1, #0]
340048a6:	b119      	cbz	r1, 340048b0 <LL_ATON_RT_RunEpochBlock+0x198>
340048a8:	2130      	movs	r1, #48	@ 0x30
340048aa:	4b40      	ldr	r3, [pc, #256]	@ (340049ac <LL_ATON_RT_RunEpochBlock+0x294>)
340048ac:	4a3c      	ldr	r2, [pc, #240]	@ (340049a0 <LL_ATON_RT_RunEpochBlock+0x288>)
340048ae:	e79d      	b.n	340047ec <LL_ATON_RT_RunEpochBlock+0xd4>
    __ll_current_aton_ip_owner = new_owner;
340048b0:	6014      	str	r4, [r2, #0]
  if (!EpochBlock_IsEpochBlob(eb))
340048b2:	0759      	lsls	r1, r3, #29
340048b4:	d41c      	bmi.n	340048f0 <LL_ATON_RT_RunEpochBlock+0x1d8>
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
340048b6:	f013 0f90 	tst.w	r3, #144	@ 0x90
340048ba:	d00a      	beq.n	340048d2 <LL_ATON_RT_RunEpochBlock+0x1ba>
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
340048bc:	4b2b      	ldr	r3, [pc, #172]	@ (3400496c <LL_ATON_RT_RunEpochBlock+0x254>)
340048be:	681b      	ldr	r3, [r3, #0]
340048c0:	429c      	cmp	r4, r3
340048c2:	d003      	beq.n	340048cc <LL_ATON_RT_RunEpochBlock+0x1b4>
340048c4:	2178      	movs	r1, #120	@ 0x78
340048c6:	4b2a      	ldr	r3, [pc, #168]	@ (34004970 <LL_ATON_RT_RunEpochBlock+0x258>)
340048c8:	4a31      	ldr	r2, [pc, #196]	@ (34004990 <LL_ATON_RT_RunEpochBlock+0x278>)
340048ca:	e72c      	b.n	34004726 <LL_ATON_RT_RunEpochBlock+0xe>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340048cc:	68e8      	ldr	r0, [r5, #12]
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
340048ce:	f7ff fcf9 	bl	340042c4 <__LL_ATON_RT_SetWaitMask>
  if (eb->start_epoch_block != NULL)
340048d2:	682b      	ldr	r3, [r5, #0]
340048d4:	b10b      	cbz	r3, 340048da <LL_ATON_RT_RunEpochBlock+0x1c2>
    eb->start_epoch_block((const void *)eb);
340048d6:	4628      	mov	r0, r5
340048d8:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
340048da:	8a2b      	ldrh	r3, [r5, #16]
340048dc:	075a      	lsls	r2, r3, #29
340048de:	d51a      	bpl.n	34004916 <LL_ATON_RT_RunEpochBlock+0x1fe>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
340048e0:	4628      	mov	r0, r5
340048e2:	f7ff fd0b 	bl	340042fc <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
340048e6:	b130      	cbz	r0, 340048f6 <LL_ATON_RT_RunEpochBlock+0x1de>
340048e8:	21a4      	movs	r1, #164	@ 0xa4
340048ea:	4b31      	ldr	r3, [pc, #196]	@ (340049b0 <LL_ATON_RT_RunEpochBlock+0x298>)
340048ec:	4a28      	ldr	r2, [pc, #160]	@ (34004990 <LL_ATON_RT_RunEpochBlock+0x278>)
340048ee:	e71a      	b.n	34004726 <LL_ATON_RT_RunEpochBlock+0xe>
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
340048f0:	f240 30ff 	movw	r0, #1023	@ 0x3ff
340048f4:	e7eb      	b.n	340048ce <LL_ATON_RT_RunEpochBlock+0x1b6>
    conf.stepmode = 0;
340048f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
340048fa:	68ab      	ldr	r3, [r5, #8]
    conf.stepmode = 0;
340048fc:	f360 0200 	bfi	r2, r0, #0, #1
    LL_EpochCtrl_Init(ecId, &conf);
34004900:	4669      	mov	r1, sp
    conf.stepmode = 0;
34004902:	f88d 2004 	strb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
34004906:	9300      	str	r3, [sp, #0]
    LL_EpochCtrl_Init(ecId, &conf);
34004908:	f7fe fad0 	bl	34002eac <LL_EpochCtrl_Init>
    ATON_ENABLE(EPOCHCTRL, ecId);
3400490c:	4a29      	ldr	r2, [pc, #164]	@ (340049b4 <LL_ATON_RT_RunEpochBlock+0x29c>)
3400490e:	6813      	ldr	r3, [r2, #0]
34004910:	f043 0301 	orr.w	r3, r3, #1
34004914:	6013      	str	r3, [r2, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004916:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004918:	b11b      	cbz	r3, 34004922 <LL_ATON_RT_RunEpochBlock+0x20a>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3400491a:	462a      	mov	r2, r5
3400491c:	4621      	mov	r1, r4
3400491e:	2001      	movs	r0, #1
34004920:	4798      	blx	r3
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
34004922:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
34004924:	8a03      	ldrh	r3, [r0, #16]
34004926:	075b      	lsls	r3, r3, #29
34004928:	d50f      	bpl.n	3400494a <LL_ATON_RT_RunEpochBlock+0x232>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400492a:	f7ff fce7 	bl	340042fc <EpochBlock_EpochControllerUnit>
3400492e:	2301      	movs	r3, #1
34004930:	fa03 f000 	lsl.w	r0, r3, r0
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
34004934:	2800      	cmp	r0, #0
34004936:	f47f af28 	bne.w	3400478a <LL_ATON_RT_RunEpochBlock+0x72>
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400493a:	6860      	ldr	r0, [r4, #4]
3400493c:	4621      	mov	r1, r4
3400493e:	f7ff fcf1 	bl	34004324 <__LL_ATON_RT_ExecEndEpochBlock>
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
34004942:	4620      	mov	r0, r4
34004944:	f7ff fd58 	bl	340043f8 <__LL_ATON_RT_DetermineNextEpochBlock>
      return LL_ATON_RT_NO_WFE;
34004948:	e779      	b.n	3400483e <LL_ATON_RT_RunEpochBlock+0x126>
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400494a:	68c0      	ldr	r0, [r0, #12]
3400494c:	e7f2      	b.n	34004934 <LL_ATON_RT_RunEpochBlock+0x21c>
        return LL_ATON_RT_DONE;
3400494e:	2002      	movs	r0, #2
34004950:	e71c      	b.n	3400478c <LL_ATON_RT_RunEpochBlock+0x74>
34004952:	bf00      	nop
34004954:	3402bbac 	.word	0x3402bbac
34004958:	340312db 	.word	0x340312db
3400495c:	3402bab8 	.word	0x3402bab8
34004960:	3402be35 	.word	0x3402be35
34004964:	3402be70 	.word	0x3402be70
34004968:	3402be2c 	.word	0x3402be2c
3400496c:	340d1604 	.word	0x340d1604
34004970:	3402bed2 	.word	0x3402bed2
34004974:	e000e100 	.word	0xe000e100
34004978:	3402b20c 	.word	0x3402b20c
3400497c:	340312b4 	.word	0x340312b4
34004980:	3402b236 	.word	0x3402b236
34004984:	3402befc 	.word	0x3402befc
34004988:	3402bf98 	.word	0x3402bf98
3400498c:	3402bfe4 	.word	0x3402bfe4
34004990:	34031293 	.word	0x34031293
34004994:	3402bbc7 	.word	0x3402bbc7
34004998:	34031274 	.word	0x34031274
3400499c:	3402c01c 	.word	0x3402c01c
340049a0:	34031260 	.word	0x34031260
340049a4:	3402c044 	.word	0x3402c044
340049a8:	340d1600 	.word	0x340d1600
340049ac:	3402ba17 	.word	0x3402ba17
340049b0:	3402baaf 	.word	0x3402baaf
340049b4:	580fe000 	.word	0x580fe000

340049b8 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
340049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
340049ba:	4b39      	ldr	r3, [pc, #228]	@ (34004aa0 <NPU0_IRQHandler+0xe8>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
340049bc:	4c39      	ldr	r4, [pc, #228]	@ (34004aa4 <NPU0_IRQHandler+0xec>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
340049be:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
340049c0:	6823      	ldr	r3, [r4, #0]
340049c2:	b343      	cbz	r3, 34004a16 <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
340049c4:	6823      	ldr	r3, [r4, #0]
340049c6:	685b      	ldr	r3, [r3, #4]
340049c8:	b933      	cbnz	r3, 340049d8 <NPU0_IRQHandler+0x20>
340049ca:	f240 31ba 	movw	r1, #954	@ 0x3ba
340049ce:	4b36      	ldr	r3, [pc, #216]	@ (34004aa8 <NPU0_IRQHandler+0xf0>)
340049d0:	4a36      	ldr	r2, [pc, #216]	@ (34004aac <NPU0_IRQHandler+0xf4>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
340049d2:	4837      	ldr	r0, [pc, #220]	@ (34004ab0 <NPU0_IRQHandler+0xf8>)
340049d4:	f01b f818 	bl	3401fa08 <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
340049d8:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
340049da:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
340049dc:	8a1b      	ldrh	r3, [r3, #16]
340049de:	075b      	lsls	r3, r3, #29
340049e0:	d40c      	bmi.n	340049fc <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
340049e2:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
340049e6:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
340049ea:	f7ff fd49 	bl	34004480 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
340049ee:	6823      	ldr	r3, [r4, #0]
340049f0:	b99b      	cbnz	r3, 34004a1a <NPU0_IRQHandler+0x62>
340049f2:	f240 31db 	movw	r1, #987	@ 0x3db
340049f6:	4b2f      	ldr	r3, [pc, #188]	@ (34004ab4 <NPU0_IRQHandler+0xfc>)
340049f8:	4a2c      	ldr	r2, [pc, #176]	@ (34004aac <NPU0_IRQHandler+0xf4>)
340049fa:	e7ea      	b.n	340049d2 <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
340049fc:	6823      	ldr	r3, [r4, #0]
340049fe:	6858      	ldr	r0, [r3, #4]
34004a00:	f7ff fc7c 	bl	340042fc <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34004a04:	b120      	cbz	r0, 34004a10 <NPU0_IRQHandler+0x58>
34004a06:	f240 31c7 	movw	r1, #967	@ 0x3c7
34004a0a:	4b2b      	ldr	r3, [pc, #172]	@ (34004ab8 <NPU0_IRQHandler+0x100>)
34004a0c:	4a27      	ldr	r2, [pc, #156]	@ (34004aac <NPU0_IRQHandler+0xf4>)
34004a0e:	e7e0      	b.n	340049d2 <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
34004a10:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
34004a14:	e7e9      	b.n	340049ea <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
34004a16:	4628      	mov	r0, r5
34004a18:	e7e7      	b.n	340049ea <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
34004a1a:	6823      	ldr	r3, [r4, #0]
34004a1c:	685b      	ldr	r3, [r3, #4]
34004a1e:	8a1b      	ldrh	r3, [r3, #16]
34004a20:	f013 0304 	ands.w	r3, r3, #4
34004a24:	d126      	bne.n	34004a74 <NPU0_IRQHandler+0xbc>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
34004a26:	6822      	ldr	r2, [r4, #0]
34004a28:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
34004a2a:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
34004a2c:	402a      	ands	r2, r5
34004a2e:	d017      	beq.n	34004a60 <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
34004a30:	f04f 0c01 	mov.w	ip, #1
34004a34:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
34004a36:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
34004a38:	4e20      	ldr	r6, [pc, #128]	@ (34004abc <NPU0_IRQHandler+0x104>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
34004a3a:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
34004a3c:	fa22 f703 	lsr.w	r7, r2, r3
34004a40:	07ff      	lsls	r7, r7, #31
34004a42:	d507      	bpl.n	34004a54 <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
34004a44:	031f      	lsls	r7, r3, #12
34004a46:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
34004a4a:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
34004a4e:	fa0c f703 	lsl.w	r7, ip, r3
34004a52:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
34004a54:	3801      	subs	r0, #1
34004a56:	f103 0301 	add.w	r3, r3, #1
34004a5a:	d1ef      	bne.n	34004a3c <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34004a5c:	6823      	ldr	r3, [r4, #0]
34004a5e:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
34004a60:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
34004a64:	4b0e      	ldr	r3, [pc, #56]	@ (34004aa0 <NPU0_IRQHandler+0xe8>)
34004a66:	611d      	str	r5, [r3, #16]
34004a68:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
34004a6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LL_ATON_OSAL_SIGNAL_EVENT();
34004a70:	f7ff bb90 	b.w	34004194 <aton_osal_freertos_signal_event>
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
34004a74:	6823      	ldr	r3, [r4, #0]
34004a76:	6858      	ldr	r0, [r3, #4]
34004a78:	f7ff fc40 	bl	340042fc <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34004a7c:	b120      	cbz	r0, 34004a88 <NPU0_IRQHandler+0xd0>
34004a7e:	f240 319a 	movw	r1, #922	@ 0x39a
34004a82:	4b0d      	ldr	r3, [pc, #52]	@ (34004ab8 <NPU0_IRQHandler+0x100>)
34004a84:	4a0e      	ldr	r2, [pc, #56]	@ (34004ac0 <NPU0_IRQHandler+0x108>)
34004a86:	e7a4      	b.n	340049d2 <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
34004a88:	00eb      	lsls	r3, r5, #3
34004a8a:	d5e9      	bpl.n	34004a60 <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
34004a8c:	4b0d      	ldr	r3, [pc, #52]	@ (34004ac4 <NPU0_IRQHandler+0x10c>)
34004a8e:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
34004a90:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
34004a92:	6823      	ldr	r3, [r4, #0]
34004a94:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34004a96:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
34004a98:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34004a9c:	61d3      	str	r3, [r2, #28]
34004a9e:	e7df      	b.n	34004a60 <NPU0_IRQHandler+0xa8>
34004aa0:	580e1000 	.word	0x580e1000
34004aa4:	340d1604 	.word	0x340d1604
34004aa8:	3402c06e 	.word	0x3402c06e
34004aac:	340311d4 	.word	0x340311d4
34004ab0:	3402bab8 	.word	0x3402bab8
34004ab4:	3402b20c 	.word	0x3402b20c
34004ab8:	3402baaf 	.word	0x3402baaf
34004abc:	580e503c 	.word	0x580e503c
34004ac0:	340311a6 	.word	0x340311a6
34004ac4:	580fe000 	.word	0x580fe000

34004ac8 <ll_sw_forward_dequantizelinear>:
{
  Dequantizelinear_sw_info *sw_info = (Dequantizelinear_sw_info *)sw_info_struct;

  // array init
  int32_t format = sw_info->general.input.format.is_signed ? (AI_ARRAY_FORMAT_S8 | AI_FMT_FLAG_IS_IO)
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004ac8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
34004acc:	4a47      	ldr	r2, [pc, #284]	@ (34004bec <ll_sw_forward_dequantizelinear+0x124>)
34004ace:	2b00      	cmp	r3, #0
34004ad0:	4b47      	ldr	r3, [pc, #284]	@ (34004bf0 <ll_sw_forward_dequantizelinear+0x128>)
34004ad2:	bf18      	it	ne
34004ad4:	4613      	movne	r3, r2
{
34004ad6:	b510      	push	{r4, lr}
34004ad8:	b0c4      	sub	sp, #272	@ 0x110
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
34004ada:	930a      	str	r3, [sp, #40]	@ 0x28
34004adc:	6943      	ldr	r3, [r0, #20]
                                  .info = (const ai_intq_info[1]){{
                                      .scale = ((float *)sw_info->is.mem.start_offset),
                                      .zeropoint = ((void *)sw_info->izp.mem.start_offset),
                                  }}};

  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004ade:	f04f 7482 	mov.w	r4, #17039360	@ 0x1040000
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
34004ae2:	930b      	str	r3, [sp, #44]	@ 0x2c
34004ae4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
34004ae6:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  AI_ARRAY_OBJ_DECLARE(dequantize_output_array, FORMAT, sw_info->general.output.mem.start_offset,
34004aea:	4b42      	ldr	r3, [pc, #264]	@ (34004bf4 <ll_sw_forward_dequantizelinear+0x12c>)
34004aec:	930e      	str	r3, [sp, #56]	@ 0x38
34004aee:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34004af0:	930f      	str	r3, [sp, #60]	@ 0x3c
34004af2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
34004af4:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  uint16_t offset_format =
34004af8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
34004afc:	2b00      	cmp	r3, #0
34004afe:	bf0c      	ite	eq
34004b00:	2202      	moveq	r2, #2
34004b02:	2204      	movne	r2, #4
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004b04:	f042 0201 	orr.w	r2, r2, #1
34004b08:	f8ad 2010 	strh.w	r2, [sp, #16]
34004b0c:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
34004b0e:	ab04      	add	r3, sp, #16
34004b10:	f8ad 2012 	strh.w	r2, [sp, #18]
                                  .info = (const ai_intq_info[1]){{
34004b14:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004b18:	9322      	str	r3, [sp, #136]	@ 0x88
                                  .info = (const ai_intq_info[1]){{
34004b1a:	9206      	str	r2, [sp, #24]
34004b1c:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004b20:	6903      	ldr	r3, [r0, #16]
                                  .info = (const ai_intq_info[1]){{
34004b22:	9207      	str	r2, [sp, #28]
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004b24:	aa06      	add	r2, sp, #24
34004b26:	9205      	str	r2, [sp, #20]
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004b28:	f240 4201 	movw	r2, #1025	@ 0x401
34004b2c:	9312      	str	r3, [sp, #72]	@ 0x48
34004b2e:	68c3      	ldr	r3, [r0, #12]
34004b30:	e9cd 4223 	strd	r4, r2, [sp, #140]	@ 0x8c
34004b34:	9313      	str	r3, [sp, #76]	@ 0x4c
34004b36:	6883      	ldr	r3, [r0, #8]
34004b38:	6a41      	ldr	r1, [r0, #36]	@ 0x24
34004b3a:	9314      	str	r3, [sp, #80]	@ 0x50
34004b3c:	9116      	str	r1, [sp, #88]	@ 0x58
34004b3e:	6a01      	ldr	r1, [r0, #32]
34004b40:	6843      	ldr	r3, [r0, #4]
34004b42:	9117      	str	r1, [sp, #92]	@ 0x5c
34004b44:	69c1      	ldr	r1, [r0, #28]
34004b46:	9315      	str	r3, [sp, #84]	@ 0x54
34004b48:	ab12      	add	r3, sp, #72	@ 0x48
34004b4a:	9325      	str	r3, [sp, #148]	@ 0x94
34004b4c:	9118      	str	r1, [sp, #96]	@ 0x60
34004b4e:	f240 4302 	movw	r3, #1026	@ 0x402
34004b52:	6981      	ldr	r1, [r0, #24]
                                   sw_info->general.input.dim.tensor_c, sw_info->general.input.dim.tensor_b),
                        STRIDE_INIT(sw_info->general.input.stride.h, sw_info->general.input.stride.w,
                                    sw_info->general.input.stride.c, sw_info->general.input.stride.b),
                        1, &input_output_array, &input_intq);

  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004b54:	922b      	str	r2, [sp, #172]	@ 0xac
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004b56:	9119      	str	r1, [sp, #100]	@ 0x64
34004b58:	a916      	add	r1, sp, #88	@ 0x58
34004b5a:	9127      	str	r1, [sp, #156]	@ 0x9c
34004b5c:	a90a      	add	r1, sp, #40	@ 0x28
34004b5e:	9128      	str	r1, [sp, #160]	@ 0xa0
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004b60:	2100      	movs	r1, #0
34004b62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004b64:	9326      	str	r3, [sp, #152]	@ 0x98
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004b66:	921a      	str	r2, [sp, #104]	@ 0x68
34004b68:	6b82      	ldr	r2, [r0, #56]	@ 0x38
34004b6a:	e9cd 1429 	strd	r1, r4, [sp, #164]	@ 0xa4
34004b6e:	921b      	str	r2, [sp, #108]	@ 0x6c
34004b70:	6b42      	ldr	r2, [r0, #52]	@ 0x34
34004b72:	921c      	str	r2, [sp, #112]	@ 0x70
34004b74:	6b02      	ldr	r2, [r0, #48]	@ 0x30
34004b76:	921d      	str	r2, [sp, #116]	@ 0x74
34004b78:	aa1a      	add	r2, sp, #104	@ 0x68
34004b7a:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
34004b7e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
                        STRIDE_INIT(sw_info->general.output.stride.h, sw_info->general.output.stride.w,
                                    sw_info->general.output.stride.c, sw_info->general.output.stride.b),
                        1, &dequantize_output_array, NULL);

  // tensor chain initialization
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004b80:	aa22      	add	r2, sp, #136	@ 0x88
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004b82:	931e      	str	r3, [sp, #120]	@ 0x78
34004b84:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
34004b86:	931f      	str	r3, [sp, #124]	@ 0x7c
34004b88:	6c83      	ldr	r3, [r0, #72]	@ 0x48
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004b8a:	9200      	str	r2, [sp, #0]
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004b8c:	9320      	str	r3, [sp, #128]	@ 0x80
34004b8e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004b90:	aa29      	add	r2, sp, #164	@ 0xa4
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004b92:	9321      	str	r3, [sp, #132]	@ 0x84
34004b94:	ab1e      	add	r3, sp, #120	@ 0x78
34004b96:	932e      	str	r3, [sp, #184]	@ 0xb8
34004b98:	ab0e      	add	r3, sp, #56	@ 0x38
34004b9a:	932f      	str	r3, [sp, #188]	@ 0xbc
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004b9c:	2304      	movs	r3, #4
34004b9e:	9308      	str	r3, [sp, #32]
34004ba0:	2301      	movs	r3, #1
34004ba2:	e9cd 133a 	strd	r1, r3, [sp, #232]	@ 0xe8
34004ba6:	9338      	str	r3, [sp, #224]	@ 0xe0
34004ba8:	ab01      	add	r3, sp, #4
34004baa:	e9cd 313c 	strd	r3, r1, [sp, #240]	@ 0xf0
34004bae:	ab02      	add	r3, sp, #8
34004bb0:	e9cd 313f 	strd	r3, r1, [sp, #252]	@ 0xfc
34004bb4:	ab03      	add	r3, sp, #12
34004bb6:	e9cd 3142 	strd	r3, r1, [sp, #264]	@ 0x108
34004bba:	ab38      	add	r3, sp, #224	@ 0xe0
34004bbc:	9309      	str	r3, [sp, #36]	@ 0x24
                              AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&dequantize_output)),
                              AI_TENSOR_LIST_OBJ_EMPTY, AI_TENSOR_LIST_OBJ_EMPTY)

  // layer initialization
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004bbe:	4b0e      	ldr	r3, [pc, #56]	@ (34004bf8 <ll_sw_forward_dequantizelinear+0x130>)
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004bc0:	9201      	str	r2, [sp, #4]
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004bc2:	a831      	add	r0, sp, #196	@ 0xc4
34004bc4:	221c      	movs	r2, #28
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004bc6:	913e      	str	r1, [sp, #248]	@ 0xf8
34004bc8:	9102      	str	r1, [sp, #8]
34004bca:	9141      	str	r1, [sp, #260]	@ 0x104
34004bcc:	9103      	str	r1, [sp, #12]
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004bce:	9330      	str	r3, [sp, #192]	@ 0xc0
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004bd0:	f8cd d0e4 	str.w	sp, [sp, #228]	@ 0xe4
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004bd4:	f01c fd9e 	bl	34021714 <memset>
34004bd8:	4b08      	ldr	r3, [pc, #32]	@ (34004bfc <ll_sw_forward_dequantizelinear+0x134>)
                       NULL, )
  dequantize_layer.forward(AI_LAYER_OBJ(&dequantize_layer));
34004bda:	a830      	add	r0, sp, #192	@ 0xc0
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004bdc:	9335      	str	r3, [sp, #212]	@ 0xd4
34004bde:	ab08      	add	r3, sp, #32
34004be0:	9336      	str	r3, [sp, #216]	@ 0xd8
  dequantize_layer.forward(AI_LAYER_OBJ(&dequantize_layer));
34004be2:	f021 fce9 	bl	340265b8 <node_convert>
}
34004be6:	b044      	add	sp, #272	@ 0x110
34004be8:	bd10      	pop	{r4, pc}
34004bea:	bf00      	nop
34004bec:	08840440 	.word	0x08840440
34004bf0:	08040440 	.word	0x08040440
34004bf4:	00821040 	.word	0x00821040
34004bf8:	00010107 	.word	0x00010107
34004bfc:	340265b9 	.word	0x340265b9

34004c00 <ll_sw_forward_resize_integer>:
{
  Resize_integer_sw_info *sw_info = (Resize_integer_sw_info *)sw_info_struct;
  // array init

  int32_t format = sw_info->general.input.format.is_signed ? (AI_ARRAY_FORMAT_S8 | AI_FMT_FLAG_IS_IO)
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004c00:	f890 102c 	ldrb.w	r1, [r0, #44]	@ 0x2c
34004c04:	4a8a      	ldr	r2, [pc, #552]	@ (34004e30 <ll_sw_forward_resize_integer+0x230>)
34004c06:	4b8b      	ldr	r3, [pc, #556]	@ (34004e34 <ll_sw_forward_resize_integer+0x234>)
34004c08:	2900      	cmp	r1, #0
{
34004c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004c0c:	bf14      	ite	ne
34004c0e:	4614      	movne	r4, r2
34004c10:	461c      	moveq	r4, r3
{
34004c12:	b0d9      	sub	sp, #356	@ 0x164

  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
34004c14:	9410      	str	r4, [sp, #64]	@ 0x40
34004c16:	6944      	ldr	r4, [r0, #20]
34004c18:	a910      	add	r1, sp, #64	@ 0x40
34004c1a:	604c      	str	r4, [r1, #4]
34004c1c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
                       sw_info->general.output.mem.start_offset, sw_info->general.output.dim.num_elem, )

  uint16_t offset_format =
      sw_info->izp.format.is_signed ? (AI_BUFFER_META_FLAG_ZEROPOINT_S8) : (AI_BUFFER_META_FLAG_ZEROPOINT_U8);
  uint16_t scale_format = AI_BUFFER_META_FLAG_SCALE_FLOAT;
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004c1e:	ae04      	add	r6, sp, #16
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
34004c20:	e9c1 4402 	strd	r4, r4, [r1, #8]
                                                    : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004c24:	f890 4058 	ldrb.w	r4, [r0, #88]	@ 0x58
  offset_format =
      sw_info->ozp.format.is_signed ? (AI_BUFFER_META_FLAG_ZEROPOINT_S8) : (AI_BUFFER_META_FLAG_ZEROPOINT_U8);
  scale_format = AI_BUFFER_META_FLAG_SCALE_FLOAT;
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
                                   .size = sw_info->os.dim.num_elem,
                                   .info = (const ai_intq_info[1]){{
34004c28:	f8d0 50d8 	ldr.w	r5, [r0, #216]	@ 0xd8
                                                    : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004c2c:	2c00      	cmp	r4, #0
34004c2e:	bf18      	it	ne
34004c30:	4613      	movne	r3, r2
  AI_ARRAY_OBJ_DECLARE(resize_output_array, format, sw_info->general.output.mem.start_offset,
34004c32:	9314      	str	r3, [sp, #80]	@ 0x50
34004c34:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34004c36:	aa14      	add	r2, sp, #80	@ 0x50
34004c38:	6053      	str	r3, [r2, #4]
34004c3a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
                                  .info = (const ai_intq_info[1]){{
34004c3c:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
  AI_ARRAY_OBJ_DECLARE(resize_output_array, format, sw_info->general.output.mem.start_offset,
34004c40:	e9c2 3302 	strd	r3, r3, [r2, #8]
  uint16_t offset_format =
34004c44:	f890 30b0 	ldrb.w	r3, [r0, #176]	@ 0xb0
                                  .info = (const ai_intq_info[1]){{
34004c48:	9406      	str	r4, [sp, #24]
  uint16_t offset_format =
34004c4a:	2b00      	cmp	r3, #0
34004c4c:	bf0c      	ite	eq
34004c4e:	2302      	moveq	r3, #2
34004c50:	2304      	movne	r3, #4
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004c52:	f043 0301 	orr.w	r3, r3, #1
34004c56:	8033      	strh	r3, [r6, #0]
34004c58:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
                                  .info = (const ai_intq_info[1]){{
34004c5a:	f8d0 40ac 	ldr.w	r4, [r0, #172]	@ 0xac
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004c5e:	8073      	strh	r3, [r6, #2]
                                  .info = (const ai_intq_info[1]){{
34004c60:	ab06      	add	r3, sp, #24
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004c62:	6073      	str	r3, [r6, #4]
  offset_format =
34004c64:	f890 3108 	ldrb.w	r3, [r0, #264]	@ 0x108
                                  .info = (const ai_intq_info[1]){{
34004c68:	9407      	str	r4, [sp, #28]
  offset_format =
34004c6a:	2b00      	cmp	r3, #0
34004c6c:	bf0c      	ite	eq
34004c6e:	2302      	moveq	r3, #2
34004c70:	2304      	movne	r3, #4
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
34004c72:	ac08      	add	r4, sp, #32
34004c74:	f043 0301 	orr.w	r3, r3, #1
34004c78:	8023      	strh	r3, [r4, #0]
34004c7a:	f8d0 30c4 	ldr.w	r3, [r0, #196]	@ 0xc4
                                   .info = (const ai_intq_info[1]){{
34004c7e:	950a      	str	r5, [sp, #40]	@ 0x28
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
34004c80:	8063      	strh	r3, [r4, #2]
                                   .info = (const ai_intq_info[1]){{
34004c82:	ab0a      	add	r3, sp, #40	@ 0x28
34004c84:	f8d0 5104 	ldr.w	r5, [r0, #260]	@ 0x104
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
34004c88:	6063      	str	r3, [r4, #4]
  AI_ARRAY_OBJ_DECLARE(resize_scales_array, FORMAT, sw_info->scales.mem.start_offset, sw_info->scales.mem.start_offset,
                       sw_info->scales.dim.num_elem, )

  ai_array *resize_roi_array_ptr = NULL;
  ai_array resize_roi_array;
  if (sw_info->roi.mem.start_offset != NULL)
34004c8a:	f8d0 315c 	ldr.w	r3, [r0, #348]	@ 0x15c
                                   .info = (const ai_intq_info[1]){{
34004c8e:	950b      	str	r5, [sp, #44]	@ 0x2c
  AI_ARRAY_OBJ_DECLARE(resize_scales_array, FORMAT, sw_info->scales.mem.start_offset, sw_info->scales.mem.start_offset,
34004c90:	f8d0 5130 	ldr.w	r5, [r0, #304]	@ 0x130
  if (sw_info->roi.mem.start_offset != NULL)
34004c94:	b13b      	cbz	r3, 34004ca6 <ll_sw_forward_resize_integer+0xa6>
  {
    resize_roi_array = (ai_array)AI_ARRAY_OBJ_INIT(FORMAT, sw_info->roi.mem.start_offset, sw_info->roi.mem.start_offset,
34004c96:	4f68      	ldr	r7, [pc, #416]	@ (34004e38 <ll_sw_forward_resize_integer+0x238>)
34004c98:	931b      	str	r3, [sp, #108]	@ 0x6c
34004c9a:	9718      	str	r7, [sp, #96]	@ 0x60
34004c9c:	f8d0 7148 	ldr.w	r7, [r0, #328]	@ 0x148
34004ca0:	e9cd 7319 	strd	r7, r3, [sp, #100]	@ 0x64
                                                   sw_info->roi.dim.num_elem);
    resize_roi_array_ptr = &resize_roi_array;
34004ca4:	ab18      	add	r3, sp, #96	@ 0x60
  }

  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004ca6:	f04f 7c82 	mov.w	ip, #17039360	@ 0x1040000
34004caa:	f240 4e02 	movw	lr, #1026	@ 0x402
34004cae:	9630      	str	r6, [sp, #192]	@ 0xc0
34004cb0:	f240 4601 	movw	r6, #1025	@ 0x401
34004cb4:	6907      	ldr	r7, [r0, #16]
                                   sw_info->general.input.dim.tensor_c, sw_info->general.input.dim.tensor_b),
                        STRIDE_INIT(sw_info->general.input.stride.h, sw_info->general.input.stride.w,
                                    sw_info->general.input.stride.c, sw_info->general.input.stride.b),
                        1, &input_output_array, &input_intq);

  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004cb6:	e9cd 4c37 	strd	r4, ip, [sp, #220]	@ 0xdc
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004cba:	971c      	str	r7, [sp, #112]	@ 0x70
34004cbc:	68c7      	ldr	r7, [r0, #12]
34004cbe:	e9cd c631 	strd	ip, r6, [sp, #196]	@ 0xc4
34004cc2:	971d      	str	r7, [sp, #116]	@ 0x74
34004cc4:	6887      	ldr	r7, [r0, #8]
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004cc6:	9639      	str	r6, [sp, #228]	@ 0xe4
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004cc8:	971e      	str	r7, [sp, #120]	@ 0x78
34004cca:	6847      	ldr	r7, [r0, #4]
34004ccc:	f8cd e0d0 	str.w	lr, [sp, #208]	@ 0xd0
34004cd0:	971f      	str	r7, [sp, #124]	@ 0x7c
34004cd2:	af1c      	add	r7, sp, #112	@ 0x70
34004cd4:	9733      	str	r7, [sp, #204]	@ 0xcc
34004cd6:	6a47      	ldr	r7, [r0, #36]	@ 0x24
                        STRIDE_INIT(sw_info->scales.stride.h, sw_info->scales.stride.w, sw_info->scales.stride.c,
                                    sw_info->scales.stride.b),
                        1, &resize_scales_array, NULL);

  // tensor chain initialization
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004cd8:	ac0c      	add	r4, sp, #48	@ 0x30
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004cda:	9720      	str	r7, [sp, #128]	@ 0x80
34004cdc:	6a07      	ldr	r7, [r0, #32]
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004cde:	ae37      	add	r6, sp, #220	@ 0xdc
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004ce0:	9721      	str	r7, [sp, #132]	@ 0x84
34004ce2:	69c7      	ldr	r7, [r0, #28]
34004ce4:	9722      	str	r7, [sp, #136]	@ 0x88
34004ce6:	6987      	ldr	r7, [r0, #24]
34004ce8:	9723      	str	r7, [sp, #140]	@ 0x8c
34004cea:	af20      	add	r7, sp, #128	@ 0x80
34004cec:	e9cd 7135 	strd	r7, r1, [sp, #212]	@ 0xd4
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004cf0:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
34004cf2:	9124      	str	r1, [sp, #144]	@ 0x90
34004cf4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
34004cf6:	9125      	str	r1, [sp, #148]	@ 0x94
34004cf8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
34004cfa:	9126      	str	r1, [sp, #152]	@ 0x98
34004cfc:	6b01      	ldr	r1, [r0, #48]	@ 0x30
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004cfe:	9601      	str	r6, [sp, #4]
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004d00:	9127      	str	r1, [sp, #156]	@ 0x9c
34004d02:	a924      	add	r1, sp, #144	@ 0x90
34004d04:	e9cd 1e3a 	strd	r1, lr, [sp, #232]	@ 0xe8
34004d08:	6d01      	ldr	r1, [r0, #80]	@ 0x50
                              AI_TENSOR_LIST_OBJ_EMPTY, AI_TENSOR_LIST_OBJ_EMPTY)

  // extrapolating the scales values needed
  const ai_tensor *p = &resize_scales;
  const ai_float *s = AI_ARRAY_OBJ_DATA(p->data, ai_float);
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004d0a:	4e4b      	ldr	r6, [pc, #300]	@ (34004e38 <ll_sw_forward_resize_integer+0x238>)
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004d0c:	9128      	str	r1, [sp, #160]	@ 0xa0
34004d0e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004d10:	f8cd d0fc 	str.w	sp, [sp, #252]	@ 0xfc
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004d14:	9129      	str	r1, [sp, #164]	@ 0xa4
34004d16:	6c81      	ldr	r1, [r0, #72]	@ 0x48
34004d18:	912a      	str	r1, [sp, #168]	@ 0xa8
34004d1a:	6c41      	ldr	r1, [r0, #68]	@ 0x44
34004d1c:	912b      	str	r1, [sp, #172]	@ 0xac
34004d1e:	a928      	add	r1, sp, #160	@ 0xa0
34004d20:	e9cd 123c 	strd	r1, r2, [sp, #240]	@ 0xf0
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004d24:	2204      	movs	r2, #4
34004d26:	6022      	str	r2, [r4, #0]
34004d28:	aa30      	add	r2, sp, #192	@ 0xc0
34004d2a:	2101      	movs	r1, #1
34004d2c:	9200      	str	r2, [sp, #0]
34004d2e:	2200      	movs	r2, #0
34004d30:	913e      	str	r1, [sp, #248]	@ 0xf8
34004d32:	e9cd 2140 	strd	r2, r1, [sp, #256]	@ 0x100
34004d36:	a901      	add	r1, sp, #4
34004d38:	e9cd 1242 	strd	r1, r2, [sp, #264]	@ 0x108
34004d3c:	a902      	add	r1, sp, #8
34004d3e:	e9cd 1245 	strd	r1, r2, [sp, #276]	@ 0x114
34004d42:	a903      	add	r1, sp, #12
34004d44:	e9cd 1248 	strd	r1, r2, [sp, #288]	@ 0x120
34004d48:	a93e      	add	r1, sp, #248	@ 0xf8
34004d4a:	6061      	str	r1, [r4, #4]
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004d4c:	2102      	movs	r1, #2
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004d4e:	9244      	str	r2, [sp, #272]	@ 0x110
34004d50:	9202      	str	r2, [sp, #8]
34004d52:	9247      	str	r2, [sp, #284]	@ 0x11c
34004d54:	9203      	str	r2, [sp, #12]
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004d56:	e9cd 612c 	strd	r6, r1, [sp, #176]	@ 0xb0
34004d5a:	a90e      	add	r1, sp, #56	@ 0x38
34004d5c:	68ae      	ldr	r6, [r5, #8]
34004d5e:	68ed      	ldr	r5, [r5, #12]
34004d60:	e9cd 122e 	strd	r1, r2, [sp, #184]	@ 0xb8

  // layer initialization
  if ((ai_resize_mode)sw_info->mode == AI_RESIZE_NEAREST)
34004d64:	f890 119c 	ldrb.w	r1, [r0, #412]	@ 0x19c
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004d68:	960e      	str	r6, [sp, #56]	@ 0x38
  if ((ai_resize_mode)sw_info->mode == AI_RESIZE_NEAREST)
34004d6a:	2901      	cmp	r1, #1
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004d6c:	950f      	str	r5, [sp, #60]	@ 0x3c
  if ((ai_resize_mode)sw_info->mode == AI_RESIZE_NEAREST)
34004d6e:	d124      	bne.n	34004dba <ll_sw_forward_resize_integer+0x1ba>
  {
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, RESIZE_TYPE, 0x0, NULL, resize, forward_resize_nearest_is8os8, &resize_chain,
34004d70:	4d32      	ldr	r5, [pc, #200]	@ (34004e3c <ll_sw_forward_resize_integer+0x23c>)
34004d72:	e9cd 224c 	strd	r2, r2, [sp, #304]	@ 0x130
34004d76:	e9cd 524a 	strd	r5, r2, [sp, #296]	@ 0x128
34004d7a:	924e      	str	r2, [sp, #312]	@ 0x138
34004d7c:	4a30      	ldr	r2, [pc, #192]	@ (34004e40 <ll_sw_forward_resize_integer+0x240>)
34004d7e:	f88d 1154 	strb.w	r1, [sp, #340]	@ 0x154
34004d82:	e9cd 244f 	strd	r2, r4, [sp, #316]	@ 0x13c
34004d86:	f890 219e 	ldrb.w	r2, [r0, #414]	@ 0x19e
34004d8a:	f88d 2144 	strb.w	r2, [sp, #324]	@ 0x144
34004d8e:	f8d0 2190 	ldr.w	r2, [r0, #400]	@ 0x190
34004d92:	9252      	str	r2, [sp, #328]	@ 0x148
34004d94:	f890 2194 	ldrb.w	r2, [r0, #404]	@ 0x194
34004d98:	f88d 214c 	strb.w	r2, [sp, #332]	@ 0x14c
34004d9c:	f8d0 2198 	ldr.w	r2, [r0, #408]	@ 0x198
34004da0:	9254      	str	r2, [sp, #336]	@ 0x150
34004da2:	f890 219d 	ldrb.w	r2, [r0, #413]	@ 0x19d
                         NULL, NULL, , .cubic_coeff_a = sw_info->cubic_coeff_a,
                         .exclude_outside = sw_info->exclude_outside, .extrapol_val = sw_info->extrapol_val,
                         .mode = (ai_resize_mode)sw_info->mode, .nearest_mode = (ai_nearest_mode)sw_info->nearest_mode,
                         .coord_transf_mode = (ai_coord_transf_mode)sw_info->coord_transf_mode,
                         .scales = AI_ARRAY_OBJ(&rs), .roi = resize_roi_array_ptr)
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004da6:	a84a      	add	r0, sp, #296	@ 0x128
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, RESIZE_TYPE, 0x0, NULL, resize, forward_resize_nearest_is8os8, &resize_chain,
34004da8:	f88d 2155 	strb.w	r2, [sp, #341]	@ 0x155
34004dac:	aa2c      	add	r2, sp, #176	@ 0xb0
34004dae:	e9cd 2356 	strd	r2, r3, [sp, #344]	@ 0x158
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004db2:	f021 fd4b 	bl	3402684c <forward_resize_nearest_is8os8>
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, UPSAMPLE_TYPE, 0x0, NULL, upsample, forward_upsample_zeros, &resize_chain,
                         NULL, NULL, , .mode = AI_UPSAMPLE_ZEROS, .center = false, .scales = AI_ARRAY_OBJ(&rs),
                         .nearest_mode = AI_ROUND_PREFER_FLOOR)
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
  }
}
34004db6:	b059      	add	sp, #356	@ 0x164
34004db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((ai_resize_mode)sw_info->mode == AI_RESIZE_LINEAR)
34004dba:	2902      	cmp	r1, #2
34004dbc:	d123      	bne.n	34004e06 <ll_sw_forward_resize_integer+0x206>
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, RESIZE_TYPE, 0x0, NULL, resize, forward_resize_bilinear_is8os8, &resize_chain,
34004dbe:	4d1f      	ldr	r5, [pc, #124]	@ (34004e3c <ll_sw_forward_resize_integer+0x23c>)
34004dc0:	e9cd 224c 	strd	r2, r2, [sp, #304]	@ 0x130
34004dc4:	e9cd 524a 	strd	r5, r2, [sp, #296]	@ 0x128
34004dc8:	924e      	str	r2, [sp, #312]	@ 0x138
34004dca:	4a1e      	ldr	r2, [pc, #120]	@ (34004e44 <ll_sw_forward_resize_integer+0x244>)
34004dcc:	f88d 1154 	strb.w	r1, [sp, #340]	@ 0x154
34004dd0:	e9cd 244f 	strd	r2, r4, [sp, #316]	@ 0x13c
34004dd4:	f890 219e 	ldrb.w	r2, [r0, #414]	@ 0x19e
34004dd8:	f88d 2144 	strb.w	r2, [sp, #324]	@ 0x144
34004ddc:	f8d0 2190 	ldr.w	r2, [r0, #400]	@ 0x190
34004de0:	9252      	str	r2, [sp, #328]	@ 0x148
34004de2:	f890 2194 	ldrb.w	r2, [r0, #404]	@ 0x194
34004de6:	f88d 214c 	strb.w	r2, [sp, #332]	@ 0x14c
34004dea:	f8d0 2198 	ldr.w	r2, [r0, #408]	@ 0x198
34004dee:	9254      	str	r2, [sp, #336]	@ 0x150
34004df0:	f890 219d 	ldrb.w	r2, [r0, #413]	@ 0x19d
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004df4:	a84a      	add	r0, sp, #296	@ 0x128
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, RESIZE_TYPE, 0x0, NULL, resize, forward_resize_bilinear_is8os8, &resize_chain,
34004df6:	f88d 2155 	strb.w	r2, [sp, #341]	@ 0x155
34004dfa:	aa2c      	add	r2, sp, #176	@ 0xb0
34004dfc:	e9cd 2356 	strd	r2, r3, [sp, #344]	@ 0x158
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004e00:	f021 fd6e 	bl	340268e0 <forward_resize_bilinear_is8os8>
34004e04:	e7d7      	b.n	34004db6 <ll_sw_forward_resize_integer+0x1b6>
  else if ((ai_resize_mode)sw_info->mode == AI_RESIZE_ZEROS)
34004e06:	2900      	cmp	r1, #0
34004e08:	d1d5      	bne.n	34004db6 <ll_sw_forward_resize_integer+0x1b6>
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, UPSAMPLE_TYPE, 0x0, NULL, upsample, forward_upsample_zeros, &resize_chain,
34004e0a:	4b0f      	ldr	r3, [pc, #60]	@ (34004e48 <ll_sw_forward_resize_integer+0x248>)
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004e0c:	a84a      	add	r0, sp, #296	@ 0x128
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, UPSAMPLE_TYPE, 0x0, NULL, upsample, forward_upsample_zeros, &resize_chain,
34004e0e:	e9cd 314a 	strd	r3, r1, [sp, #296]	@ 0x128
34004e12:	4b0e      	ldr	r3, [pc, #56]	@ (34004e4c <ll_sw_forward_resize_integer+0x24c>)
34004e14:	e9cd 114c 	strd	r1, r1, [sp, #304]	@ 0x130
34004e18:	e9cd 344f 	strd	r3, r4, [sp, #316]	@ 0x13c
34004e1c:	ab2c      	add	r3, sp, #176	@ 0xb0
34004e1e:	914e      	str	r1, [sp, #312]	@ 0x138
34004e20:	f8ad 1144 	strh.w	r1, [sp, #324]	@ 0x144
34004e24:	9352      	str	r3, [sp, #328]	@ 0x148
34004e26:	f88d 114c 	strb.w	r1, [sp, #332]	@ 0x14c
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004e2a:	f021 fd93 	bl	34026954 <forward_upsample_zeros>
}
34004e2e:	e7c2      	b.n	34004db6 <ll_sw_forward_resize_integer+0x1b6>
34004e30:	08840440 	.word	0x08840440
34004e34:	08040440 	.word	0x08040440
34004e38:	00821040 	.word	0x00821040
34004e3c:	0001011b 	.word	0x0001011b
34004e40:	3402684d 	.word	0x3402684d
34004e44:	340268e1 	.word	0x340268e1
34004e48:	00010112 	.word	0x00010112
34004e4c:	34026955 	.word	0x34026955

34004e50 <ISP_Algo_BadPixel_Init>:
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_Init(void *hIsp, void *pAlgo)
{
  (void)hIsp; /* unused */

  ((ISP_AlgoTypeDef *)pAlgo)->state = ISP_ALGO_STATE_INIT;
34004e50:	2000      	movs	r0, #0
34004e52:	7048      	strb	r0, [r1, #1]

  return ISP_OK;
}
34004e54:	4770      	bx	lr

34004e56 <ISP_Algo_BadPixel_DeInit>:
{
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  return ISP_OK;
}
34004e56:	2000      	movs	r0, #0
34004e58:	4770      	bx	lr

34004e5a <ISP_Algo_AEC_StatCb>:
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_StatCb(ISP_AlgoTypeDef *pAlgo)
{
  /* Update State */
  pAlgo->state = ISP_ALGO_STATE_STAT_READY;
34004e5a:	2303      	movs	r3, #3
34004e5c:	7043      	strb	r3, [r0, #1]

  return ISP_OK;
}
34004e5e:	2000      	movs	r0, #0
34004e60:	4770      	bx	lr

34004e62 <ISP_Algo_AWB_StatCb>:
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_StatCb(ISP_AlgoTypeDef *pAlgo)
{
  /* Update State */
  if (pAlgo->state != ISP_ALGO_STATE_INIT)
34004e62:	7843      	ldrb	r3, [r0, #1]
34004e64:	b10b      	cbz	r3, 34004e6a <ISP_Algo_AWB_StatCb+0x8>
  {
    pAlgo->state = ISP_ALGO_STATE_STAT_READY;
34004e66:	2303      	movs	r3, #3
34004e68:	7043      	strb	r3, [r0, #1]
  }

  return ISP_OK;
}
34004e6a:	2000      	movs	r0, #0
34004e6c:	4770      	bx	lr
	...

34004e70 <ISP_Algo_BadPixel_Process>:
{
34004e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34004e72:	4604      	mov	r4, r0
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34004e74:	f001 fba2 	bl	340065bc <ISP_SVC_IQParam_Get>
  if (IQParamConfig->badPixelAlgo.enable == false)
34004e78:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34004e7c:	4607      	mov	r7, r0
  if (IQParamConfig->badPixelAlgo.enable == false)
34004e7e:	b913      	cbnz	r3, 34004e86 <ISP_Algo_BadPixel_Process+0x16>
    return ISP_OK;
34004e80:	2000      	movs	r0, #0
}
34004e82:	b003      	add	sp, #12
34004e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CurrentFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp);
34004e86:	4620      	mov	r0, r4
34004e88:	f001 fb4c 	bl	34006524 <ISP_SVC_Misc_GetMainFrameId>
  if (CurrentFrameId == LastFrameId)
34004e8c:	4b1e      	ldr	r3, [pc, #120]	@ (34004f08 <ISP_Algo_BadPixel_Process+0x98>)
34004e8e:	681a      	ldr	r2, [r3, #0]
34004e90:	4282      	cmp	r2, r0
34004e92:	d0f5      	beq.n	34004e80 <ISP_Algo_BadPixel_Process+0x10>
  if (Step++ >= 0)
34004e94:	4d1d      	ldr	r5, [pc, #116]	@ (34004f0c <ISP_Algo_BadPixel_Process+0x9c>)
  LastFrameId = CurrentFrameId;
34004e96:	6018      	str	r0, [r3, #0]
  if (Step++ >= 0)
34004e98:	f995 3000 	ldrsb.w	r3, [r5]
34004e9c:	1c5a      	adds	r2, r3, #1
34004e9e:	2b00      	cmp	r3, #0
34004ea0:	702a      	strb	r2, [r5, #0]
34004ea2:	db0a      	blt.n	34004eba <ISP_Algo_BadPixel_Process+0x4a>
    ret  = ISP_SVC_ISP_GetBadPixel(hIsp, &BadPixelConfig);
34004ea4:	4669      	mov	r1, sp
34004ea6:	4620      	mov	r0, r4
34004ea8:	f001 f8c7 	bl	3400603a <ISP_SVC_ISP_GetBadPixel>
    if (ret != ISP_OK)
34004eac:	2800      	cmp	r0, #0
34004eae:	d1e8      	bne.n	34004e82 <ISP_Algo_BadPixel_Process+0x12>
    BadPixelCount += BadPixelConfig.count;
34004eb0:	4a17      	ldr	r2, [pc, #92]	@ (34004f10 <ISP_Algo_BadPixel_Process+0xa0>)
34004eb2:	9b01      	ldr	r3, [sp, #4]
34004eb4:	6811      	ldr	r1, [r2, #0]
34004eb6:	440b      	add	r3, r1
34004eb8:	6013      	str	r3, [r2, #0]
  if (Step == 10)
34004eba:	f995 2000 	ldrsb.w	r2, [r5]
34004ebe:	2a0a      	cmp	r2, #10
34004ec0:	d1de      	bne.n	34004e80 <ISP_Algo_BadPixel_Process+0x10>
    BadPixelCount /= 10;
34004ec2:	4e13      	ldr	r6, [pc, #76]	@ (34004f10 <ISP_Algo_BadPixel_Process+0xa0>)
34004ec4:	6833      	ldr	r3, [r6, #0]
34004ec6:	fbb3 f3f2 	udiv	r3, r3, r2
    if ((BadPixelCount > IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength > 0))
34004eca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
    BadPixelCount /= 10;
34004ecc:	6033      	str	r3, [r6, #0]
    if ((BadPixelCount > IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength > 0))
34004ece:	4293      	cmp	r3, r2
34004ed0:	d912      	bls.n	34004ef8 <ISP_Algo_BadPixel_Process+0x88>
34004ed2:	f89d 3001 	ldrb.w	r3, [sp, #1]
34004ed6:	b113      	cbz	r3, 34004ede <ISP_Algo_BadPixel_Process+0x6e>
      BadPixelConfig.strength--;
34004ed8:	3b01      	subs	r3, #1
      BadPixelConfig.strength++;
34004eda:	f88d 3001 	strb.w	r3, [sp, #1]
    BadPixelConfig.enable = 1;
34004ede:	2301      	movs	r3, #1
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &BadPixelConfig);
34004ee0:	4669      	mov	r1, sp
34004ee2:	4620      	mov	r0, r4
    BadPixelConfig.enable = 1;
34004ee4:	f88d 3000 	strb.w	r3, [sp]
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &BadPixelConfig);
34004ee8:	f001 f88c 	bl	34006004 <ISP_SVC_ISP_SetBadPixel>
    if (ret != ISP_OK)
34004eec:	2800      	cmp	r0, #0
34004eee:	d1c8      	bne.n	34004e82 <ISP_Algo_BadPixel_Process+0x12>
    Step = -1;
34004ef0:	23ff      	movs	r3, #255	@ 0xff
    BadPixelCount = 0;
34004ef2:	6030      	str	r0, [r6, #0]
    Step = -1;
34004ef4:	702b      	strb	r3, [r5, #0]
    BadPixelCount = 0;
34004ef6:	e7c4      	b.n	34004e82 <ISP_Algo_BadPixel_Process+0x12>
    else if ((BadPixelCount < IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength < ISP_BADPIXEL_STRENGTH_MAX - 1))
34004ef8:	d2f1      	bcs.n	34004ede <ISP_Algo_BadPixel_Process+0x6e>
34004efa:	f89d 3001 	ldrb.w	r3, [sp, #1]
34004efe:	2b05      	cmp	r3, #5
34004f00:	d8ed      	bhi.n	34004ede <ISP_Algo_BadPixel_Process+0x6e>
      BadPixelConfig.strength++;
34004f02:	3301      	adds	r3, #1
34004f04:	e7e9      	b.n	34004eda <ISP_Algo_BadPixel_Process+0x6a>
34004f06:	bf00      	nop
34004f08:	340d1898 	.word	0x340d1898
34004f0c:	340d1894 	.word	0x340d1894
34004f10:	340d1890 	.word	0x340d1890

34004f14 <ISP_Algo_AEC_DeInit>:
{
34004f14:	b508      	push	{r3, lr}
  if (pIspAEprocess != NULL)
34004f16:	4b03      	ldr	r3, [pc, #12]	@ (34004f24 <ISP_Algo_AEC_DeInit+0x10>)
34004f18:	6818      	ldr	r0, [r3, #0]
34004f1a:	b108      	cbz	r0, 34004f20 <ISP_Algo_AEC_DeInit+0xc>
    evision_api_st_ae_delete(pIspAEprocess);
34004f1c:	f7fc fa7e 	bl	3400141c <evision_api_st_ae_delete>
}
34004f20:	2000      	movs	r0, #0
34004f22:	bd08      	pop	{r3, pc}
34004f24:	340d18b8 	.word	0x340d18b8

34004f28 <ISP_Algo_AEC_Init>:
{
34004f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34004f2a:	4604      	mov	r4, r0
34004f2c:	460e      	mov	r6, r1
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34004f2e:	f001 fb45 	bl	340065bc <ISP_SVC_IQParam_Get>
  if (IQParamConfig->sensorDelay.delay == 0)
34004f32:	f890 3255 	ldrb.w	r3, [r0, #597]	@ 0x255
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34004f36:	4605      	mov	r5, r0
  if (IQParamConfig->sensorDelay.delay == 0)
34004f38:	b913      	cbnz	r3, 34004f40 <ISP_Algo_AEC_Init+0x18>
    IQParamConfig->sensorDelay.delay = 1;
34004f3a:	2301      	movs	r3, #1
34004f3c:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  pIspAEprocess = evision_api_st_ae_new(log_cb);
34004f40:	482d      	ldr	r0, [pc, #180]	@ (34004ff8 <ISP_Algo_AEC_Init+0xd0>)
34004f42:	f7fc fa51 	bl	340013e8 <evision_api_st_ae_new>
34004f46:	4f2d      	ldr	r7, [pc, #180]	@ (34004ffc <ISP_Algo_AEC_Init+0xd4>)
34004f48:	6038      	str	r0, [r7, #0]
  if (pIspAEprocess == NULL)
34004f4a:	b130      	cbz	r0, 34004f5a <ISP_Algo_AEC_Init+0x32>
  e_ret = evision_api_st_ae_init(pIspAEprocess);
34004f4c:	f7fc faa0 	bl	34001490 <evision_api_st_ae_init>
  if (e_ret != EVISION_RET_SUCCESS)
34004f50:	2801      	cmp	r0, #1
34004f52:	d004      	beq.n	34004f5e <ISP_Algo_AEC_Init+0x36>
    evision_api_st_ae_delete(pIspAEprocess);
34004f54:	6838      	ldr	r0, [r7, #0]
34004f56:	f7fc fa61 	bl	3400141c <evision_api_st_ae_delete>
    return ISP_ERR_ALGO;
34004f5a:	20be      	movs	r0, #190	@ 0xbe
34004f5c:	e033      	b.n	34004fc6 <ISP_Algo_AEC_Init+0x9e>
  pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
34004f5e:	683b      	ldr	r3, [r7, #0]
34004f60:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
  pIspAEprocess->hyper_params.gain_max = pIsp_handle->sensorInfo.gain_max;
34004f62:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
  pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
34004f64:	611a      	str	r2, [r3, #16]
  pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
34004f66:	f895 2070 	ldrb.w	r2, [r5, #112]	@ 0x70
  pIspAEprocess->hyper_params.exposure_min = pIsp_handle->sensorInfo.exposure_min;
34004f6a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
  pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
34004f6e:	655a      	str	r2, [r3, #84]	@ 0x54
  pIspAEprocess->hyper_params.exposure_max = pIsp_handle->sensorInfo.exposure_max;
34004f70:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  pIspAEprocess->hyper_params.gain_increment_coeff = HYPERPARAM_AEC_GAIN_INCREMENT_COEFF;
34004f74:	200a      	movs	r0, #10
  pIspAEprocess->hyper_params.exposure_max = pIsp_handle->sensorInfo.exposure_max;
34004f76:	645a      	str	r2, [r3, #68]	@ 0x44
  pIspAEprocess->hyper_params.gain_min = pIsp_handle->sensorInfo.gain_min;
34004f78:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
  pIspAEprocess->hyper_params.gain_max = pIsp_handle->sensorInfo.gain_max;
34004f7a:	64d9      	str	r1, [r3, #76]	@ 0x4c
  pIspAEprocess->hyper_params.gain_increment_coeff = HYPERPARAM_AEC_GAIN_INCREMENT_COEFF;
34004f7c:	2164      	movs	r1, #100	@ 0x64
  pIspAEprocess->hyper_params.gain_high_delta = HYPERPARAM_AEC_GAIN_HIGH_DELTA;
34004f7e:	f04f 0c2d 	mov.w	ip, #45	@ 0x2d
  pIspAEprocess->hyper_params.gain_increment_coeff = HYPERPARAM_AEC_GAIN_INCREMENT_COEFF;
34004f82:	e9c3 0105 	strd	r0, r1, [r3, #20]
  pIspAEprocess->hyper_params.gain_high_delta = HYPERPARAM_AEC_GAIN_HIGH_DELTA;
34004f86:	2178      	movs	r1, #120	@ 0x78
  pIspAEprocess->hyper_params.gain_medium_increment_max = HYPERPARAM_AEC_GAIN_MEDIUM_INC_MAX;
34004f88:	f240 50dc 	movw	r0, #1500	@ 0x5dc
  pIspAEprocess->hyper_params.gain_high_delta = HYPERPARAM_AEC_GAIN_HIGH_DELTA;
34004f8c:	e9c3 c107 	strd	ip, r1, [r3, #28]
  pIspAEprocess->hyper_params.gain_medium_increment_max = HYPERPARAM_AEC_GAIN_MEDIUM_INC_MAX;
34004f90:	f241 7170 	movw	r1, #6000	@ 0x1770
34004f94:	e9c3 0109 	strd	r0, r1, [r3, #36]	@ 0x24
  pIspAEprocess->hyper_params.gain_high_increment_max = HYPERPARAM_AEC_GAIN_HIGH_INC_MAX;
34004f98:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
34004f9c:	62d9      	str	r1, [r3, #44]	@ 0x2c
  pIspAEprocess->hyper_params.exposure_up_ratio = HYPERPARAM_AEC_EXPOSURE_UP_RATIO;
34004f9e:	a112      	add	r1, pc, #72	@ (adr r1, 34004fe8 <ISP_Algo_AEC_Init+0xc0>)
34004fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
34004fa4:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
  pIspAEprocess->hyper_params.exposure_down_ratio = HYPERPARAM_AEC_EXPOSURE_DOWN_RATIO;
34004fa8:	a111      	add	r1, pc, #68	@ (adr r1, 34004ff0 <ISP_Algo_AEC_Init+0xc8>)
34004faa:	e9d1 0100 	ldrd	r0, r1, [r1]
34004fae:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
  pIspAEprocess->hyper_params.dark_zone_lum_limit = HYPERPARAM_AEC_DARKZONE_LUM_LIMIT;
34004fb2:	2105      	movs	r1, #5
  pIspAEprocess->hyper_params.exposure_min = pIsp_handle->sensorInfo.exposure_min;
34004fb4:	641f      	str	r7, [r3, #64]	@ 0x40
  pIspAEprocess->hyper_params.gain_min = pIsp_handle->sensorInfo.gain_min;
34004fb6:	649a      	str	r2, [r3, #72]	@ 0x48
  pIspAEprocess->hyper_params.dark_zone_lum_limit = HYPERPARAM_AEC_DARKZONE_LUM_LIMIT;
34004fb8:	6519      	str	r1, [r3, #80]	@ 0x50
  if (IQParamConfig->AECAlgo.enable == true)
34004fba:	f895 3068 	ldrb.w	r3, [r5, #104]	@ 0x68
34004fbe:	2b01      	cmp	r3, #1
34004fc0:	d003      	beq.n	34004fca <ISP_Algo_AEC_Init+0xa2>
  algo->state = ISP_ALGO_STATE_INIT;
34004fc2:	2000      	movs	r0, #0
34004fc4:	7070      	strb	r0, [r6, #1]
}
34004fc6:	b003      	add	sp, #12
34004fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig) != ISP_OK) || (ISP_SVC_Sensor_SetGain(hIsp, &gainConfig)!= ISP_OK))
34004fca:	4669      	mov	r1, sp
34004fcc:	4620      	mov	r0, r4
    gainConfig.gain = pIsp_handle->sensorInfo.gain_min;
34004fce:	e9cd 7200 	strd	r7, r2, [sp]
    if ((ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig) != ISP_OK) || (ISP_SVC_Sensor_SetGain(hIsp, &gainConfig)!= ISP_OK))
34004fd2:	f001 fa73 	bl	340064bc <ISP_SVC_Sensor_SetExposure>
34004fd6:	2800      	cmp	r0, #0
34004fd8:	d1bf      	bne.n	34004f5a <ISP_Algo_AEC_Init+0x32>
34004fda:	4620      	mov	r0, r4
34004fdc:	a901      	add	r1, sp, #4
34004fde:	f001 fa49 	bl	34006474 <ISP_SVC_Sensor_SetGain>
34004fe2:	2800      	cmp	r0, #0
34004fe4:	d0ed      	beq.n	34004fc2 <ISP_Algo_AEC_Init+0x9a>
34004fe6:	e7b8      	b.n	34004f5a <ISP_Algo_AEC_Init+0x32>
34004fe8:	40000000 	.word	0x40000000
34004fec:	3f947ae1 	.word	0x3f947ae1
34004ff0:	e0000000 	.word	0xe0000000
34004ff4:	3f70624d 	.word	0x3f70624d
34004ff8:	34005001 	.word	0x34005001
34004ffc:	340d18b8 	.word	0x340d18b8

34005000 <log_cb>:
{
34005000:	b508      	push	{r3, lr}
34005002:	4601      	mov	r1, r0
  printf("%s", msg);
34005004:	4803      	ldr	r0, [pc, #12]	@ (34005014 <log_cb+0x14>)
34005006:	f01c f9b1 	bl	3402136c <iprintf>
}
3400500a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("\r\n");
3400500e:	4802      	ldr	r0, [pc, #8]	@ (34005018 <log_cb+0x18>)
34005010:	f01c ba14 	b.w	3402143c <puts>
34005014:	34030756 	.word	0x34030756
34005018:	3402c27b 	.word	0x3402c27b

3400501c <ISP_Algo_AEC_Process>:
{
3400501c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34005020:	b086      	sub	sp, #24
34005022:	4605      	mov	r5, r0
34005024:	460c      	mov	r4, r1
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005026:	f001 fac9 	bl	340065bc <ISP_SVC_IQParam_Get>
  if (IQParamConfig->AECAlgo.enable == false)
3400502a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3400502e:	4606      	mov	r6, r0
  if (IQParamConfig->AECAlgo.enable == false)
34005030:	b113      	cbz	r3, 34005038 <ISP_Algo_AEC_Process+0x1c>
  switch(algo->state)
34005032:	7863      	ldrb	r3, [r4, #1]
34005034:	2b02      	cmp	r3, #2
34005036:	d103      	bne.n	34005040 <ISP_Algo_AEC_Process+0x24>
{
34005038:	2000      	movs	r0, #0
}
3400503a:	b006      	add	sp, #24
3400503c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch(algo->state)
34005040:	d907      	bls.n	34005052 <ISP_Algo_AEC_Process+0x36>
34005042:	2b03      	cmp	r3, #3
34005044:	d016      	beq.n	34005074 <ISP_Algo_AEC_Process+0x58>
    printf("WARNING: Unknown AE algo state\r\n");
34005046:	4831      	ldr	r0, [pc, #196]	@ (3400510c <ISP_Algo_AEC_Process+0xf0>)
34005048:	f01c f9f8 	bl	3402143c <puts>
    algo->state = ISP_ALGO_STATE_INIT;
3400504c:	2300      	movs	r3, #0
3400504e:	7063      	strb	r3, [r4, #1]
    break;
34005050:	e7f2      	b.n	34005038 <ISP_Algo_AEC_Process+0x1c>
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34005052:	f890 3255 	ldrb.w	r3, [r0, #597]	@ 0x255
34005056:	2602      	movs	r6, #2
34005058:	9302      	str	r3, [sp, #8]
3400505a:	2301      	movs	r3, #1
3400505c:	4622      	mov	r2, r4
3400505e:	e9cd 6300 	strd	r6, r3, [sp]
34005062:	4628      	mov	r0, r5
34005064:	4b2a      	ldr	r3, [pc, #168]	@ (34005110 <ISP_Algo_AEC_Process+0xf4>)
34005066:	492b      	ldr	r1, [pc, #172]	@ (34005114 <ISP_Algo_AEC_Process+0xf8>)
34005068:	f001 fcee 	bl	34006a48 <ISP_SVC_Stats_GetNext>
    if (ret != ISP_OK)
3400506c:	2800      	cmp	r0, #0
3400506e:	d1e4      	bne.n	3400503a <ISP_Algo_AEC_Process+0x1e>
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
34005070:	7066      	strb	r6, [r4, #1]
    break;
34005072:	e7e2      	b.n	3400503a <ISP_Algo_AEC_Process+0x1e>
    pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
34005074:	4f28      	ldr	r7, [pc, #160]	@ (34005118 <ISP_Algo_AEC_Process+0xfc>)
34005076:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
34005078:	683b      	ldr	r3, [r7, #0]
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
3400507a:	a904      	add	r1, sp, #16
    pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3400507c:	611a      	str	r2, [r3, #16]
    pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
3400507e:	f890 2070 	ldrb.w	r2, [r0, #112]	@ 0x70
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
34005082:	4628      	mov	r0, r5
    pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
34005084:	655a      	str	r2, [r3, #84]	@ 0x54
    avgL = stats.down.averageL;
34005086:	4b22      	ldr	r3, [pc, #136]	@ (34005110 <ISP_Algo_AEC_Process+0xf4>)
34005088:	f893 8037 	ldrb.w	r8, [r3, #55]	@ 0x37
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
3400508c:	f001 fa08 	bl	340064a0 <ISP_SVC_Sensor_GetGain>
    if (ret != ISP_OK)
34005090:	2800      	cmp	r0, #0
34005092:	d1d2      	bne.n	3400503a <ISP_Algo_AEC_Process+0x1e>
    ret = ISP_SVC_Sensor_GetExposure(hIsp, &exposureConfig);
34005094:	4628      	mov	r0, r5
34005096:	a905      	add	r1, sp, #20
34005098:	f001 fa26 	bl	340064e8 <ISP_SVC_Sensor_GetExposure>
    if (ret != ISP_OK)
3400509c:	2800      	cmp	r0, #0
3400509e:	d1cc      	bne.n	3400503a <ISP_Algo_AEC_Process+0x1e>
    Meta.averageL = (uint8_t)avgL;
340050a0:	4b1e      	ldr	r3, [pc, #120]	@ (3400511c <ISP_Algo_AEC_Process+0x100>)
    Meta.exposureTarget = IQParamConfig->AECAlgo.exposureTarget;
340050a2:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
    Meta.averageL = (uint8_t)avgL;
340050a4:	f883 8001 	strb.w	r8, [r3, #1]
    Meta.exposureTarget = IQParamConfig->AECAlgo.exposureTarget;
340050a8:	605a      	str	r2, [r3, #4]
    e_ret = evision_api_st_ae_process(pIspAEprocess, gainConfig.gain, exposureConfig.exposure, (uint8_t)avgL);
340050aa:	6838      	ldr	r0, [r7, #0]
340050ac:	4643      	mov	r3, r8
340050ae:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
340050b2:	f7fc f9f8 	bl	340014a6 <evision_api_st_ae_process>
    if (e_ret == EVISION_RET_SUCCESS)
340050b6:	2801      	cmp	r0, #1
340050b8:	d00d      	beq.n	340050d6 <ISP_Algo_AEC_Process+0xba>
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340050ba:	f896 3255 	ldrb.w	r3, [r6, #597]	@ 0x255
340050be:	2602      	movs	r6, #2
340050c0:	9302      	str	r3, [sp, #8]
340050c2:	2301      	movs	r3, #1
340050c4:	4622      	mov	r2, r4
340050c6:	e9cd 6300 	strd	r6, r3, [sp]
340050ca:	4628      	mov	r0, r5
340050cc:	4b10      	ldr	r3, [pc, #64]	@ (34005110 <ISP_Algo_AEC_Process+0xf4>)
340050ce:	4911      	ldr	r1, [pc, #68]	@ (34005114 <ISP_Algo_AEC_Process+0xf8>)
340050d0:	f001 fcba 	bl	34006a48 <ISP_SVC_Stats_GetNext>
340050d4:	e7cc      	b.n	34005070 <ISP_Algo_AEC_Process+0x54>
      if (gainConfig.gain != pIspAEprocess->new_gain)
340050d6:	683b      	ldr	r3, [r7, #0]
340050d8:	9a04      	ldr	r2, [sp, #16]
340050da:	689b      	ldr	r3, [r3, #8]
340050dc:	429a      	cmp	r2, r3
340050de:	d10c      	bne.n	340050fa <ISP_Algo_AEC_Process+0xde>
      if (exposureConfig.exposure != pIspAEprocess->new_exposure)
340050e0:	683b      	ldr	r3, [r7, #0]
340050e2:	9a05      	ldr	r2, [sp, #20]
340050e4:	685b      	ldr	r3, [r3, #4]
340050e6:	429a      	cmp	r2, r3
340050e8:	d0e7      	beq.n	340050ba <ISP_Algo_AEC_Process+0x9e>
        ret = ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig);
340050ea:	4628      	mov	r0, r5
340050ec:	a905      	add	r1, sp, #20
        exposureConfig.exposure = pIspAEprocess->new_exposure;
340050ee:	9305      	str	r3, [sp, #20]
        ret = ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig);
340050f0:	f001 f9e4 	bl	340064bc <ISP_SVC_Sensor_SetExposure>
        if (ret != ISP_OK)
340050f4:	2800      	cmp	r0, #0
340050f6:	d0e0      	beq.n	340050ba <ISP_Algo_AEC_Process+0x9e>
340050f8:	e79f      	b.n	3400503a <ISP_Algo_AEC_Process+0x1e>
        ret = ISP_SVC_Sensor_SetGain(hIsp, &gainConfig);
340050fa:	4628      	mov	r0, r5
340050fc:	a904      	add	r1, sp, #16
        gainConfig.gain = pIspAEprocess->new_gain;
340050fe:	9304      	str	r3, [sp, #16]
        ret = ISP_SVC_Sensor_SetGain(hIsp, &gainConfig);
34005100:	f001 f9b8 	bl	34006474 <ISP_SVC_Sensor_SetGain>
        if (ret != ISP_OK)
34005104:	2800      	cmp	r0, #0
34005106:	d0eb      	beq.n	340050e0 <ISP_Algo_AEC_Process+0xc4>
34005108:	e797      	b.n	3400503a <ISP_Algo_AEC_Process+0x1e>
3400510a:	bf00      	nop
3400510c:	3402c0b8 	.word	0x3402c0b8
34005110:	340d1818 	.word	0x340d1818
34005114:	34004e5b 	.word	0x34004e5b
34005118:	340d18b8 	.word	0x340d18b8
3400511c:	340d189c 	.word	0x340d189c

34005120 <ISP_Algo_AWB_Init>:
{
34005120:	b510      	push	{r4, lr}
  pIspAWBestimator = evision_api_awb_new(log_cb);
34005122:	4806      	ldr	r0, [pc, #24]	@ (3400513c <ISP_Algo_AWB_Init+0x1c>)
{
34005124:	460c      	mov	r4, r1
  pIspAWBestimator = evision_api_awb_new(log_cb);
34005126:	f7fb fdae 	bl	34000c86 <evision_api_awb_new>
3400512a:	4b05      	ldr	r3, [pc, #20]	@ (34005140 <ISP_Algo_AWB_Init+0x20>)
3400512c:	6018      	str	r0, [r3, #0]
  if (pIspAWBestimator == NULL)
3400512e:	b110      	cbz	r0, 34005136 <ISP_Algo_AWB_Init+0x16>
  algo->state = ISP_ALGO_STATE_INIT;
34005130:	2000      	movs	r0, #0
34005132:	7060      	strb	r0, [r4, #1]
}
34005134:	bd10      	pop	{r4, pc}
    return ISP_ERR_ALGO;
34005136:	20be      	movs	r0, #190	@ 0xbe
34005138:	e7fc      	b.n	34005134 <ISP_Algo_AWB_Init+0x14>
3400513a:	bf00      	nop
3400513c:	34005001 	.word	0x34005001
34005140:	340d18b4 	.word	0x340d18b4

34005144 <ISP_Algo_AWB_DeInit>:
{
34005144:	b508      	push	{r3, lr}
  if (pIspAWBestimator != NULL)
34005146:	4b03      	ldr	r3, [pc, #12]	@ (34005154 <ISP_Algo_AWB_DeInit+0x10>)
34005148:	6818      	ldr	r0, [r3, #0]
3400514a:	b108      	cbz	r0, 34005150 <ISP_Algo_AWB_DeInit+0xc>
    evision_api_awb_delete(pIspAWBestimator);
3400514c:	f7fb fdb6 	bl	34000cbc <evision_api_awb_delete>
}
34005150:	2000      	movs	r0, #0
34005152:	bd08      	pop	{r3, pc}
34005154:	340d18b4 	.word	0x340d18b4

34005158 <ISP_Algo_ApplyGammaInverse>:
{
34005158:	b508      	push	{r3, lr}
3400515a:	ed2d 8b02 	vpush	{d8}
3400515e:	ee08 1a10 	vmov	s16, r1
  if (ISP_SVC_Misc_IsGammaEnabled(hIsp, 1 /*main pipe*/) != 0) {
34005162:	2101      	movs	r1, #1
34005164:	f001 f9ee 	bl	34006544 <ISP_SVC_Misc_IsGammaEnabled>
34005168:	b190      	cbz	r0, 34005190 <ISP_Algo_ApplyGammaInverse+0x38>
    out = 255 * pow((float)comp / 255, 1.0 / 2.2);
3400516a:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 340051a8 <ISP_Algo_ApplyGammaInverse+0x50>
3400516e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
34005172:	ee88 0a27 	vdiv.f32	s0, s16, s15
34005176:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 34005198 <ISP_Algo_ApplyGammaInverse+0x40>
3400517a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3400517e:	f01f fabb 	bl	340246f8 <pow>
34005182:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 340051a0 <ISP_Algo_ApplyGammaInverse+0x48>
34005186:	ee20 0b07 	vmul.f64	d0, d0, d7
}
3400518a:	ecbd 8b02 	vpop	{d8}
3400518e:	bd08      	pop	{r3, pc}
    out = (double) comp;
34005190:	eeb8 0b48 	vcvt.f64.u32	d0, s16
  return out;
34005194:	e7f9      	b.n	3400518a <ISP_Algo_ApplyGammaInverse+0x32>
34005196:	bf00      	nop
34005198:	d1745d17 	.word	0xd1745d17
3400519c:	3fdd1745 	.word	0x3fdd1745
340051a0:	00000000 	.word	0x00000000
340051a4:	406fe000 	.word	0x406fe000
340051a8:	437f0000 	.word	0x437f0000

340051ac <ISP_Algo_GetUpStat>:
{
340051ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
340051b0:	b087      	sub	sp, #28
340051b2:	460c      	mov	r4, r1
  if ((ISP_SVC_ISP_GetGain(hIsp, &ISPGain) == ISP_OK) && (ISPGain.enable == 1))
340051b4:	a902      	add	r1, sp, #8
{
340051b6:	4680      	mov	r8, r0
  if ((ISP_SVC_ISP_GetGain(hIsp, &ISPGain) == ISP_OK) && (ISPGain.enable == 1))
340051b8:	f001 f834 	bl	34006224 <ISP_SVC_ISP_GetGain>
340051bc:	f894 7036 	ldrb.w	r7, [r4, #54]	@ 0x36
340051c0:	4606      	mov	r6, r0
340051c2:	2800      	cmp	r0, #0
340051c4:	d13b      	bne.n	3400523e <ISP_Algo_GetUpStat+0x92>
340051c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
340051ca:	2b01      	cmp	r3, #1
340051cc:	d137      	bne.n	3400523e <ISP_Algo_GetUpStat+0x92>
    upG = (int64_t) pStats->down.averageG * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainG;
340051ce:	4d1e      	ldr	r5, [pc, #120]	@ (34005248 <ISP_Algo_GetUpStat+0x9c>)
340051d0:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
340051d4:	4603      	mov	r3, r0
340051d6:	9a04      	ldr	r2, [sp, #16]
340051d8:	fba1 0105 	umull	r0, r1, r1, r5
340051dc:	f7fc fc72 	bl	34001ac4 <__aeabi_ldivmod>
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
340051e0:	4633      	mov	r3, r6
    upG = (int64_t) pStats->down.averageG * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainG;
340051e2:	4681      	mov	r9, r0
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
340051e4:	9a05      	ldr	r2, [sp, #20]
340051e6:	fba7 0105 	umull	r0, r1, r7, r5
340051ea:	f7fc fc6b 	bl	34001ac4 <__aeabi_ldivmod>
    upR = (int64_t) pStats->down.averageR * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainR;
340051ee:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
340051f2:	4607      	mov	r7, r0
    upR = (int64_t) pStats->down.averageR * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainR;
340051f4:	4633      	mov	r3, r6
340051f6:	fba1 0105 	umull	r0, r1, r1, r5
340051fa:	9a03      	ldr	r2, [sp, #12]
340051fc:	f7fc fc62 	bl	34001ac4 <__aeabi_ldivmod>
    pStats->up.averageG = (uint8_t) upG;
34005200:	f884 9001 	strb.w	r9, [r4, #1]
    pStats->up.averageR = (uint8_t) upR;
34005204:	7020      	strb	r0, [r4, #0]
    pStats->up.averageB = (uint8_t) upB;
34005206:	70a7      	strb	r7, [r4, #2]
    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
34005208:	4640      	mov	r0, r8
3400520a:	a901      	add	r1, sp, #4
3400520c:	f000 ff53 	bl	340060b6 <ISP_SVC_ISP_GetBlackLevel>
34005210:	b990      	cbnz	r0, 34005238 <ISP_Algo_GetUpStat+0x8c>
34005212:	f89d 3004 	ldrb.w	r3, [sp, #4]
34005216:	2b01      	cmp	r3, #1
34005218:	d10e      	bne.n	34005238 <ISP_Algo_GetUpStat+0x8c>
    pStats->up.averageR += BlackLevel.BLCR;
3400521a:	7823      	ldrb	r3, [r4, #0]
3400521c:	f89d 2005 	ldrb.w	r2, [sp, #5]
34005220:	4413      	add	r3, r2
34005222:	7023      	strb	r3, [r4, #0]
    pStats->up.averageG += BlackLevel.BLCG;
34005224:	f89d 2006 	ldrb.w	r2, [sp, #6]
34005228:	7863      	ldrb	r3, [r4, #1]
3400522a:	4413      	add	r3, r2
3400522c:	7063      	strb	r3, [r4, #1]
    pStats->up.averageB += BlackLevel.BLCB;
3400522e:	f89d 2007 	ldrb.w	r2, [sp, #7]
34005232:	78a3      	ldrb	r3, [r4, #2]
34005234:	4413      	add	r3, r2
34005236:	70a3      	strb	r3, [r4, #2]
}
34005238:	b007      	add	sp, #28
3400523a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pStats->up.averageR = pStats->down.averageR;
3400523e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
    pStats->up.averageB = pStats->down.averageB;
34005240:	70a7      	strb	r7, [r4, #2]
    pStats->up.averageR = pStats->down.averageR;
34005242:	8023      	strh	r3, [r4, #0]
}
34005244:	e7f8      	b.n	34005238 <ISP_Algo_GetUpStat+0x8c>
34005246:	bf00      	nop
34005248:	05f5e100 	.word	0x05f5e100
3400524c:	00000000 	.word	0x00000000

34005250 <ISP_Algo_ApplyCConv>:
{
34005250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34005254:	b08b      	sub	sp, #44	@ 0x2c
34005256:	460e      	mov	r6, r1
  if ((ISP_SVC_ISP_GetColorConv(hIsp, &colorConv) == ISP_OK) && (colorConv.enable == 1))
34005258:	4669      	mov	r1, sp
{
3400525a:	4615      	mov	r5, r2
3400525c:	461c      	mov	r4, r3
  if ((ISP_SVC_ISP_GetColorConv(hIsp, &colorConv) == ISP_OK) && (colorConv.enable == 1))
3400525e:	f001 f8b3 	bl	340063c8 <ISP_SVC_ISP_GetColorConv>
34005262:	4602      	mov	r2, r0
34005264:	2800      	cmp	r0, #0
34005266:	f040 8096 	bne.w	34005396 <ISP_Algo_ApplyCConv+0x146>
3400526a:	f89d 3000 	ldrb.w	r3, [sp]
3400526e:	2b01      	cmp	r3, #1
34005270:	f040 8091 	bne.w	34005396 <ISP_Algo_ApplyCConv+0x146>
    ccR = (int64_t) inR * colorConv.coeff[0][0] + (int64_t) inG * colorConv.coeff[0][1] + (int64_t) inB * colorConv.coeff[0][2];
34005274:	9b01      	ldr	r3, [sp, #4]
34005276:	17d9      	asrs	r1, r3, #31
34005278:	fba3 3706 	umull	r3, r7, r3, r6
3400527c:	fb06 7701 	mla	r7, r6, r1, r7
34005280:	9902      	ldr	r1, [sp, #8]
34005282:	ea4f 7ce1 	mov.w	ip, r1, asr #31
34005286:	fba1 1005 	umull	r1, r0, r1, r5
3400528a:	fb05 000c 	mla	r0, r5, ip, r0
3400528e:	185b      	adds	r3, r3, r1
34005290:	eb47 0700 	adc.w	r7, r7, r0
34005294:	9803      	ldr	r0, [sp, #12]
34005296:	ea4f 7ce0 	mov.w	ip, r0, asr #31
3400529a:	fba0 0104 	umull	r0, r1, r0, r4
3400529e:	fb04 110c 	mla	r1, r4, ip, r1
340052a2:	1818      	adds	r0, r3, r0
    ccG = (int64_t) inR * colorConv.coeff[1][0] + (int64_t) inG * colorConv.coeff[1][1] + (int64_t) inB * colorConv.coeff[1][2];
340052a4:	9b04      	ldr	r3, [sp, #16]
    ccR = (int64_t) inR * colorConv.coeff[0][0] + (int64_t) inG * colorConv.coeff[0][1] + (int64_t) inB * colorConv.coeff[0][2];
340052a6:	eb41 0107 	adc.w	r1, r1, r7
    ccG = (int64_t) inR * colorConv.coeff[1][0] + (int64_t) inG * colorConv.coeff[1][1] + (int64_t) inB * colorConv.coeff[1][2];
340052aa:	17df      	asrs	r7, r3, #31
340052ac:	fba3 8306 	umull	r8, r3, r3, r6
340052b0:	fb06 3307 	mla	r3, r6, r7, r3
340052b4:	9f05      	ldr	r7, [sp, #20]
340052b6:	fba7 ce05 	umull	ip, lr, r7, r5
340052ba:	ea4f 79e7 	mov.w	r9, r7, asr #31
340052be:	fb05 ee09 	mla	lr, r5, r9, lr
340052c2:	eb18 070c 	adds.w	r7, r8, ip
340052c6:	f8dd c018 	ldr.w	ip, [sp, #24]
340052ca:	eb43 030e 	adc.w	r3, r3, lr
340052ce:	ea4f 7eec 	mov.w	lr, ip, asr #31
340052d2:	fbac c804 	umull	ip, r8, ip, r4
340052d6:	fb04 880e 	mla	r8, r4, lr, r8
340052da:	eb17 070c 	adds.w	r7, r7, ip
340052de:	eb48 0803 	adc.w	r8, r8, r3
    ccB = (int64_t) inR * colorConv.coeff[2][0] + (int64_t) inG * colorConv.coeff[2][1] + (int64_t) inB * colorConv.coeff[2][2];
340052e2:	9b07      	ldr	r3, [sp, #28]
340052e4:	ea4f 7ce3 	mov.w	ip, r3, asr #31
340052e8:	fba3 e306 	umull	lr, r3, r3, r6
340052ec:	fb06 3c0c 	mla	ip, r6, ip, r3
340052f0:	9b08      	ldr	r3, [sp, #32]
340052f2:	ea4f 79e3 	mov.w	r9, r3, asr #31
340052f6:	fba3 3605 	umull	r3, r6, r3, r5
340052fa:	fb05 6509 	mla	r5, r5, r9, r6
340052fe:	eb1e 0303 	adds.w	r3, lr, r3
34005302:	eb4c 0c05 	adc.w	ip, ip, r5
34005306:	9d09      	ldr	r5, [sp, #36]	@ 0x24
34005308:	ea4f 7ee5 	mov.w	lr, r5, asr #31
3400530c:	fba5 5604 	umull	r5, r6, r5, r4
34005310:	fb04 660e 	mla	r6, r4, lr, r6
34005314:	195c      	adds	r4, r3, r5
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
34005316:	f04f 33ff 	mov.w	r3, #4294967295
3400531a:	4d29      	ldr	r5, [pc, #164]	@ (340053c0 <ISP_Algo_ApplyCConv+0x170>)
    ccB = (int64_t) inR * colorConv.coeff[2][0] + (int64_t) inG * colorConv.coeff[2][1] + (int64_t) inB * colorConv.coeff[2][2];
3400531c:	eb46 060c 	adc.w	r6, r6, ip
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
34005320:	42a8      	cmp	r0, r5
34005322:	eb71 0303 	sbcs.w	r3, r1, r3
34005326:	db3f      	blt.n	340053a8 <ISP_Algo_ApplyCConv+0x158>
    ccR /= ISP_CCM_PRECISION_FACTOR;
34005328:	a323      	add	r3, pc, #140	@ (adr r3, 340053b8 <ISP_Algo_ApplyCConv+0x168>)
3400532a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400532e:	f7fc fbc9 	bl	34001ac4 <__aeabi_ldivmod>
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
34005332:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
34005336:	f171 0100 	sbcs.w	r1, r1, #0
3400533a:	4681      	mov	r9, r0
3400533c:	db01      	blt.n	34005342 <ISP_Algo_ApplyCConv+0xf2>
3400533e:	f04f 09ff 	mov.w	r9, #255	@ 0xff
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
34005342:	f04f 33ff 	mov.w	r3, #4294967295
34005346:	42af      	cmp	r7, r5
34005348:	eb78 0303 	sbcs.w	r3, r8, r3
3400534c:	db2e      	blt.n	340053ac <ISP_Algo_ApplyCConv+0x15c>
    ccG /= ISP_CCM_PRECISION_FACTOR;
3400534e:	a31a      	add	r3, pc, #104	@ (adr r3, 340053b8 <ISP_Algo_ApplyCConv+0x168>)
34005350:	e9d3 2300 	ldrd	r2, r3, [r3]
34005354:	4638      	mov	r0, r7
34005356:	4641      	mov	r1, r8
34005358:	f7fc fbb4 	bl	34001ac4 <__aeabi_ldivmod>
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
3400535c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
34005360:	f171 0100 	sbcs.w	r1, r1, #0
34005364:	4607      	mov	r7, r0
34005366:	db00      	blt.n	3400536a <ISP_Algo_ApplyCConv+0x11a>
34005368:	27ff      	movs	r7, #255	@ 0xff
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
3400536a:	f04f 33ff 	mov.w	r3, #4294967295
3400536e:	42ac      	cmp	r4, r5
34005370:	eb76 0303 	sbcs.w	r3, r6, r3
34005374:	db1c      	blt.n	340053b0 <ISP_Algo_ApplyCConv+0x160>
    ccB /= ISP_CCM_PRECISION_FACTOR;
34005376:	a310      	add	r3, pc, #64	@ (adr r3, 340053b8 <ISP_Algo_ApplyCConv+0x168>)
34005378:	e9d3 2300 	ldrd	r2, r3, [r3]
3400537c:	4620      	mov	r0, r4
3400537e:	4631      	mov	r1, r6
34005380:	f7fc fba0 	bl	34001ac4 <__aeabi_ldivmod>
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
34005384:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
34005388:	f171 0100 	sbcs.w	r1, r1, #0
3400538c:	4604      	mov	r4, r0
3400538e:	db00      	blt.n	34005392 <ISP_Algo_ApplyCConv+0x142>
34005390:	24ff      	movs	r4, #255	@ 0xff
    *outR = (uint32_t) ccR;
34005392:	464e      	mov	r6, r9
    *outG = (uint32_t) ccG;
34005394:	463d      	mov	r5, r7
    *outR = (uint32_t) ccR;
34005396:	9b12      	ldr	r3, [sp, #72]	@ 0x48
34005398:	601e      	str	r6, [r3, #0]
    *outG = (uint32_t) ccG;
3400539a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
3400539c:	601d      	str	r5, [r3, #0]
    *outB = (uint32_t) ccB;
3400539e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
340053a0:	601c      	str	r4, [r3, #0]
}
340053a2:	b00b      	add	sp, #44	@ 0x2c
340053a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
340053a8:	4691      	mov	r9, r2
340053aa:	e7ca      	b.n	34005342 <ISP_Algo_ApplyCConv+0xf2>
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
340053ac:	2700      	movs	r7, #0
340053ae:	e7dc      	b.n	3400536a <ISP_Algo_ApplyCConv+0x11a>
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
340053b0:	2400      	movs	r4, #0
340053b2:	e7ee      	b.n	34005392 <ISP_Algo_ApplyCConv+0x142>
340053b4:	f3af 8000 	nop.w
340053b8:	05f5e100 	.word	0x05f5e100
340053bc:	00000000 	.word	0x00000000
340053c0:	fa0a1f01 	.word	0xfa0a1f01
340053c4:	00000000 	.word	0x00000000

340053c8 <ISP_Algo_AWB_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_Process(void *hIsp, void *pAlgo)
{
340053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340053cc:	ed2d 8b02 	vpush	{d8}
  ISP_ISPGainTypeDef ISPGainConfig;
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
  ISP_StatusTypeDef ret_stat, ret = ISP_OK;
  evision_return_t e_ret;
  uint32_t ccAvgR, ccAvgG, ccAvgB, colorTemp, i, j, profId, profNb;
  float cfaGains[4], ccmCoeffs[3][3], ccmOffsets[3] = { 0 };
340053d0:	2300      	movs	r3, #0
{
340053d2:	b0a1      	sub	sp, #132	@ 0x84
  float cfaGains[4], ccmCoeffs[3][3], ccmOffsets[3] = { 0 };
340053d4:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
340053d8:	930b      	str	r3, [sp, #44]	@ 0x2c
{
340053da:	4606      	mov	r6, r0
340053dc:	4688      	mov	r8, r1
  static uint32_t statsHistory[3][3] = { 0 };
  static uint32_t colorTempHistory[2] = { 0 };
  static uint8_t skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_INIT;
  uint8_t stat_has_changed = false;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
340053de:	f001 f8ed 	bl	340065bc <ISP_SVC_IQParam_Get>

  if (IQParamConfig->AWBAlgo.enable == false)
340053e2:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
340053e6:	4605      	mov	r5, r0
  if (IQParamConfig->AWBAlgo.enable == false)
340053e8:	4b75      	ldr	r3, [pc, #468]	@ (340055c0 <ISP_Algo_AWB_Process+0x1f8>)
340053ea:	b932      	cbnz	r2, 340053fa <ISP_Algo_AWB_Process+0x32>
  {
    enableCurrent = false;
340053ec:	701a      	strb	r2, [r3, #0]
    return ISP_OK;
340053ee:	2000      	movs	r0, #0
    algo->state = ISP_ALGO_STATE_INIT;
    break;
  }

  return ret;
}
340053f0:	b021      	add	sp, #132	@ 0x84
340053f2:	ecbd 8b02 	vpop	{d8}
340053f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((enableCurrent == false) || (IQParamConfig->AWBAlgo.enable == ISP_AWB_ENABLE_RECONFIGURE))
340053fa:	7819      	ldrb	r1, [r3, #0]
340053fc:	b111      	cbz	r1, 34005404 <ISP_Algo_AWB_Process+0x3c>
340053fe:	2aff      	cmp	r2, #255	@ 0xff
34005400:	f040 80b9 	bne.w	34005576 <ISP_Algo_AWB_Process+0x1ae>
    algo->state = ISP_ALGO_STATE_INIT;
34005404:	2200      	movs	r2, #0
34005406:	f888 2001 	strb.w	r2, [r8, #1]
    IQParamConfig->AWBAlgo.enable = true;
3400540a:	2201      	movs	r2, #1
    reconfigureRequest = true;
3400540c:	496d      	ldr	r1, [pc, #436]	@ (340055c4 <ISP_Algo_AWB_Process+0x1fc>)
    enableCurrent = true;
3400540e:	701a      	strb	r2, [r3, #0]
    IQParamConfig->AWBAlgo.enable = true;
34005410:	f885 2074 	strb.w	r2, [r5, #116]	@ 0x74
    reconfigureRequest = true;
34005414:	700a      	strb	r2, [r1, #0]
    skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
34005416:	2206      	movs	r2, #6
34005418:	4b6b      	ldr	r3, [pc, #428]	@ (340055c8 <ISP_Algo_AWB_Process+0x200>)
3400541a:	701a      	strb	r2, [r3, #0]
      colorTempHistory[i] = 0;
3400541c:	2400      	movs	r4, #0
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
3400541e:	ed9f 8a6b 	vldr	s16, [pc, #428]	@ 340055cc <ISP_Algo_AWB_Process+0x204>
      colorTempHistory[i] = 0;
34005422:	4b6b      	ldr	r3, [pc, #428]	@ (340055d0 <ISP_Algo_AWB_Process+0x208>)
34005424:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 340055dc <ISP_Algo_AWB_Process+0x214>
34005428:	e9c3 4400 	strd	r4, r4, [r3]
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
3400542c:	f8df a1a8 	ldr.w	sl, [pc, #424]	@ 340055d8 <ISP_Algo_AWB_Process+0x210>
34005430:	f505 778a 	add.w	r7, r5, #276	@ 0x114
      colorTemp = IQParamConfig->AWBAlgo.referenceColorTemp[profId];
34005434:	6878      	ldr	r0, [r7, #4]
      if (colorTemp == 0)
34005436:	2800      	cmp	r0, #0
34005438:	f000 80ae 	beq.w	34005598 <ISP_Algo_AWB_Process+0x1d0>
      if (profNb > 0)
3400543c:	b154      	cbz	r4, 34005454 <ISP_Algo_AWB_Process+0x8c>
        colorTempThresholds[profNb - 1] = (float) ((colorTemp + 3 * IQParamConfig->AWBAlgo.referenceColorTemp[profId - 1]) /4 );
3400543e:	683b      	ldr	r3, [r7, #0]
34005440:	eb03 0343 	add.w	r3, r3, r3, lsl #1
34005444:	4403      	add	r3, r0
34005446:	089b      	lsrs	r3, r3, #2
34005448:	ee07 3a90 	vmov	s15, r3
3400544c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34005450:	ed49 7a01 	vstr	s15, [r9, #-4]
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
34005454:	edd7 7a06 	vldr	s15, [r7, #24]
34005458:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400545c:	ee87 7a88 	vdiv.f32	s14, s15, s16
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
34005460:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
34005464:	eef8 7a67 	vcvt.f32.u32	s15, s15
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
34005468:	ed8d 7a10 	vstr	s14, [sp, #64]	@ 0x40
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
3400546c:	ee87 7a88 	vdiv.f32	s14, s15, s16
      cfaGains[3] = (float) IQParamConfig->AWBAlgo.ispGainB[profId] / ISP_GAIN_PRECISION_FACTOR;
34005470:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
34005474:	eef8 7a67 	vcvt.f32.u32	s15, s15
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
34005478:	ed8d 7a11 	vstr	s14, [sp, #68]	@ 0x44
      cfaGains[2] = cfaGains[1];
3400547c:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
      cfaGains[3] = (float) IQParamConfig->AWBAlgo.ispGainB[profId] / ISP_GAIN_PRECISION_FACTOR;
34005480:	ee87 7a88 	vdiv.f32	s14, s15, s16
34005484:	2324      	movs	r3, #36	@ 0x24
34005486:	a916      	add	r1, sp, #88	@ 0x58
34005488:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
      for (i = 0; i < 3; i++)
3400548c:	f04f 0c00 	mov.w	ip, #0
34005490:	460a      	mov	r2, r1
34005492:	fb03 5304 	mla	r3, r3, r4, r5
          ccmCoeffs[i][j] = (float) IQParamConfig->AWBAlgo.coeff[profId][i][j] / ISP_CCM_PRECISION_FACTOR;
34005496:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
3400549a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400549e:	ee87 7a88 	vdiv.f32	s14, s15, s16
340054a2:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
340054a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340054aa:	ed81 7a00 	vstr	s14, [r1]
340054ae:	ee87 7a88 	vdiv.f32	s14, s15, s16
340054b2:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
340054b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340054ba:	ed81 7a01 	vstr	s14, [r1, #4]
340054be:	ee87 7a88 	vdiv.f32	s14, s15, s16
      for (i = 0; i < 3; i++)
340054c2:	f10c 0c01 	add.w	ip, ip, #1
340054c6:	f1bc 0f03 	cmp.w	ip, #3
          ccmCoeffs[i][j] = (float) IQParamConfig->AWBAlgo.coeff[profId][i][j] / ISP_CCM_PRECISION_FACTOR;
340054ca:	ed81 7a02 	vstr	s14, [r1, #8]
      for (i = 0; i < 3; i++)
340054ce:	f103 030c 	add.w	r3, r3, #12
340054d2:	f101 010c 	add.w	r1, r1, #12
340054d6:	d1de      	bne.n	34005496 <ISP_Algo_AWB_Process+0xce>
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
340054d8:	ee07 0a90 	vmov	s15, r0
340054dc:	2044      	movs	r0, #68	@ 0x44
340054de:	eeb8 0a67 	vcvt.f32.u32	s0, s15
340054e2:	fb00 a004 	mla	r0, r0, r4, sl
340054e6:	ab09      	add	r3, sp, #36	@ 0x24
340054e8:	a910      	add	r1, sp, #64	@ 0x40
      profNb++;
340054ea:	3401      	adds	r4, #1
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
340054ec:	f7fb fbec 	bl	34000cc8 <evision_api_awb_set_profile>
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
340054f0:	2c05      	cmp	r4, #5
340054f2:	f107 0704 	add.w	r7, r7, #4
340054f6:	f109 0904 	add.w	r9, r9, #4
340054fa:	d19b      	bne.n	34005434 <ISP_Algo_AWB_Process+0x6c>
                                          (double) IQParamConfig->AWBAlgo.referenceColorTemp[profNb - 1], (uint16_t)profNb,
340054fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    e_ret = evision_api_awb_init_profiles(pIspAWBestimator, (double) IQParamConfig->AWBAlgo.referenceColorTemp[0],
34005500:	ed93 1a45 	vldr	s2, [r3, #276]	@ 0x114
34005504:	ed95 0a46 	vldr	s0, [r5, #280]	@ 0x118
34005508:	4d32      	ldr	r5, [pc, #200]	@ (340055d4 <ISP_Algo_AWB_Process+0x20c>)
3400550a:	eeb8 1b41 	vcvt.f64.u32	d1, s2
3400550e:	eeb8 0b40 	vcvt.f64.u32	d0, s0
34005512:	4b31      	ldr	r3, [pc, #196]	@ (340055d8 <ISP_Algo_AWB_Process+0x210>)
34005514:	4a31      	ldr	r2, [pc, #196]	@ (340055dc <ISP_Algo_AWB_Process+0x214>)
34005516:	6828      	ldr	r0, [r5, #0]
34005518:	b2a1      	uxth	r1, r4
3400551a:	f7fb fbf5 	bl	34000d08 <evision_api_awb_init_profiles>
    if (e_ret != EVISION_RET_SUCCESS)
3400551e:	2801      	cmp	r0, #1
34005520:	f040 8157 	bne.w	340057d2 <ISP_Algo_AWB_Process+0x40a>
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
34005524:	f20f 0b88 	addw	fp, pc, #136	@ 0x88
34005528:	e9db ab00 	ldrd	sl, fp, [fp]
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
3400552c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
34005530:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 340055b8 <ISP_Algo_AWB_Process+0x1f0>
    pIspAWBestimator->hyper_params.gm_tolerance = 1;
34005534:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
34005538:	2c03      	cmp	r4, #3
3400553a:	bf98      	it	ls
3400553c:	eeb0 7b46 	vmovls.f64	d7, d6
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
34005540:	682b      	ldr	r3, [r5, #0]
    pIspAWBestimator->hyper_params.gm_tolerance = 1;
34005542:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pIspAWBestimator->hyper_params.conv_criterion = 3;
34005546:	4a26      	ldr	r2, [pc, #152]	@ (340055e0 <ISP_Algo_AWB_Process+0x218>)
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
34005548:	ed83 7ba8 	vstr	d7, [r3, #672]	@ 0x2a0
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
3400554c:	e9c3 aba6 	strd	sl, fp, [r3, #664]	@ 0x298
    pIspAWBestimator->hyper_params.conv_criterion = 3;
34005550:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34005554:	2305      	movs	r3, #5
34005556:	e9cd 0301 	strd	r0, r3, [sp, #4]
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3400555a:	2402      	movs	r4, #2
3400555c:	4642      	mov	r2, r8
3400555e:	4630      	mov	r0, r6
34005560:	4b20      	ldr	r3, [pc, #128]	@ (340055e4 <ISP_Algo_AWB_Process+0x21c>)
34005562:	4921      	ldr	r1, [pc, #132]	@ (340055e8 <ISP_Algo_AWB_Process+0x220>)
34005564:	9400      	str	r4, [sp, #0]
34005566:	f001 fa6f 	bl	34006a48 <ISP_SVC_Stats_GetNext>
    if (ret != ISP_OK)
3400556a:	2800      	cmp	r0, #0
3400556c:	f47f af40 	bne.w	340053f0 <ISP_Algo_AWB_Process+0x28>
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
34005570:	f888 4001 	strb.w	r4, [r8, #1]
    break;
34005574:	e73c      	b.n	340053f0 <ISP_Algo_AWB_Process+0x28>
  switch(algo->state)
34005576:	f898 3001 	ldrb.w	r3, [r8, #1]
3400557a:	2b03      	cmp	r3, #3
3400557c:	f200 8122 	bhi.w	340057c4 <ISP_Algo_AWB_Process+0x3fc>
34005580:	a201      	add	r2, pc, #4	@ (adr r2, 34005588 <ISP_Algo_AWB_Process+0x1c0>)
34005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34005586:	bf00      	nop
34005588:	3400541d 	.word	0x3400541d
3400558c:	340055a3 	.word	0x340055a3
34005590:	340053ef 	.word	0x340053ef
34005594:	340055ed 	.word	0x340055ed
      return ISP_ERR_WB_COLORTEMP;
34005598:	2096      	movs	r0, #150	@ 0x96
    if (profNb == 0)
3400559a:	2c00      	cmp	r4, #0
3400559c:	f43f af28 	beq.w	340053f0 <ISP_Algo_AWB_Process+0x28>
340055a0:	e7ac      	b.n	340054fc <ISP_Algo_AWB_Process+0x134>
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340055a2:	2301      	movs	r3, #1
340055a4:	2105      	movs	r1, #5
340055a6:	e9cd 3101 	strd	r3, r1, [sp, #4]
340055aa:	e7d6      	b.n	3400555a <ISP_Algo_AWB_Process+0x192>
340055ac:	f3af 8000 	nop.w
340055b0:	9999999a 	.word	0x9999999a
340055b4:	3ff59999 	.word	0x3ff59999
340055b8:	cccccccd 	.word	0xcccccccd
340055bc:	3ffccccc 	.word	0x3ffccccc
340055c0:	340d1815 	.word	0x340d1815
340055c4:	340d1814 	.word	0x340d1814
340055c8:	340cc660 	.word	0x340cc660
340055cc:	4cbebc20 	.word	0x4cbebc20
340055d0:	340d180c 	.word	0x340d180c
340055d4:	340d18b4 	.word	0x340d18b4
340055d8:	340d16a8 	.word	0x340d16a8
340055dc:	340d17fc 	.word	0x340d17fc
340055e0:	40400000 	.word	0x40400000
340055e4:	340d1630 	.word	0x340d1630
340055e8:	34004e63 	.word	0x34004e63
  uint8_t stat_has_changed = false;
340055ec:	2400      	movs	r4, #0
    ISP_Algo_GetUpStat(hIsp, &stats);
340055ee:	f8df 9284 	ldr.w	r9, [pc, #644]	@ 34005874 <ISP_Algo_AWB_Process+0x4ac>
340055f2:	4630      	mov	r0, r6
340055f4:	4649      	mov	r1, r9
340055f6:	f7ff fdd9 	bl	340051ac <ISP_Algo_GetUpStat>
    for (i = 0; i < 3; i++)
340055fa:	f8df c288 	ldr.w	ip, [pc, #648]	@ 34005884 <ISP_Algo_AWB_Process+0x4bc>
340055fe:	46a6      	mov	lr, r4
34005600:	4667      	mov	r7, ip
      if ((abs(stats.up.averageR - (int32_t)statsHistory[i][0]) > 2)
34005602:	f899 0000 	ldrb.w	r0, [r9]
          || (abs(stats.up.averageG - (int32_t)statsHistory[i][1]) > 2)
34005606:	f899 1001 	ldrb.w	r1, [r9, #1]
          || (abs(stats.up.averageB - (int32_t)statsHistory[i][2]) > 2))
3400560a:	f899 2002 	ldrb.w	r2, [r9, #2]
      if ((abs(stats.up.averageR - (int32_t)statsHistory[i][0]) > 2)
3400560e:	f8dc 3000 	ldr.w	r3, [ip]
34005612:	1ac3      	subs	r3, r0, r3
34005614:	2b00      	cmp	r3, #0
34005616:	bfb8      	it	lt
34005618:	425b      	neglt	r3, r3
3400561a:	2b02      	cmp	r3, #2
3400561c:	f300 80ac 	bgt.w	34005778 <ISP_Algo_AWB_Process+0x3b0>
          || (abs(stats.up.averageG - (int32_t)statsHistory[i][1]) > 2)
34005620:	f8dc 3004 	ldr.w	r3, [ip, #4]
34005624:	1acb      	subs	r3, r1, r3
34005626:	2b00      	cmp	r3, #0
34005628:	bfb8      	it	lt
3400562a:	425b      	neglt	r3, r3
3400562c:	2b02      	cmp	r3, #2
3400562e:	f300 80a3 	bgt.w	34005778 <ISP_Algo_AWB_Process+0x3b0>
          || (abs(stats.up.averageB - (int32_t)statsHistory[i][2]) > 2))
34005632:	f8dc 3008 	ldr.w	r3, [ip, #8]
34005636:	1ad3      	subs	r3, r2, r3
34005638:	2b00      	cmp	r3, #0
3400563a:	bfb8      	it	lt
3400563c:	425b      	neglt	r3, r3
        stat_has_changed = true;
3400563e:	2b03      	cmp	r3, #3
34005640:	bfa8      	it	ge
34005642:	2401      	movge	r4, #1
    for (i = 0; i < 3; i++)
34005644:	f10e 0e01 	add.w	lr, lr, #1
34005648:	f1be 0f03 	cmp.w	lr, #3
3400564c:	f10c 0c0c 	add.w	ip, ip, #12
34005650:	d1dd      	bne.n	3400560e <ISP_Algo_AWB_Process+0x246>
    if (skip_stat_check_count || stat_has_changed || reconfigureRequest)
34005652:	4b84      	ldr	r3, [pc, #528]	@ (34005864 <ISP_Algo_AWB_Process+0x49c>)
34005654:	f8df a230 	ldr.w	sl, [pc, #560]	@ 34005888 <ISP_Algo_AWB_Process+0x4c0>
34005658:	f893 c000 	ldrb.w	ip, [r3]
3400565c:	f89a e000 	ldrb.w	lr, [sl]
34005660:	f8df b228 	ldr.w	fp, [pc, #552]	@ 3400588c <ISP_Algo_AWB_Process+0x4c4>
34005664:	ea4e 030c 	orr.w	r3, lr, ip
34005668:	431c      	orrs	r4, r3
3400566a:	b2e4      	uxtb	r4, r4
3400566c:	2c00      	cmp	r4, #0
3400566e:	d050      	beq.n	34005712 <ISP_Algo_AWB_Process+0x34a>
        ISP_Algo_ApplyCConv(hIsp, stats.down.averageR, stats.down.averageG, stats.down.averageB, &ccAvgR, &ccAvgG, &ccAvgB);
34005670:	ab08      	add	r3, sp, #32
        statsHistory[2][1] = stats.up.averageG;
34005672:	e9c7 0106 	strd	r0, r1, [r7, #24]
        statsHistory[2][2] = stats.up.averageB;
34005676:	623a      	str	r2, [r7, #32]
        ISP_Algo_ApplyCConv(hIsp, stats.down.averageR, stats.down.averageG, stats.down.averageB, &ccAvgR, &ccAvgG, &ccAvgB);
34005678:	9302      	str	r3, [sp, #8]
3400567a:	ab07      	add	r3, sp, #28
3400567c:	9301      	str	r3, [sp, #4]
3400567e:	ab06      	add	r3, sp, #24
34005680:	9300      	str	r3, [sp, #0]
34005682:	f899 3036 	ldrb.w	r3, [r9, #54]	@ 0x36
34005686:	f899 2035 	ldrb.w	r2, [r9, #53]	@ 0x35
3400568a:	4630      	mov	r0, r6
3400568c:	f899 1034 	ldrb.w	r1, [r9, #52]	@ 0x34
34005690:	f7ff fdde 	bl	34005250 <ISP_Algo_ApplyCConv>
        meas[0] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgR);
34005694:	4630      	mov	r0, r6
34005696:	9906      	ldr	r1, [sp, #24]
34005698:	f7ff fd5e 	bl	34005158 <ISP_Algo_ApplyGammaInverse>
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
3400569c:	4630      	mov	r0, r6
3400569e:	9907      	ldr	r1, [sp, #28]
        meas[0] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgR);
340056a0:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
340056a4:	f7ff fd58 	bl	34005158 <ISP_Algo_ApplyGammaInverse>
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
340056a8:	4630      	mov	r0, r6
340056aa:	9908      	ldr	r1, [sp, #32]
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
340056ac:	ed8d 0b12 	vstr	d0, [sp, #72]	@ 0x48
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
340056b0:	f7ff fd52 	bl	34005158 <ISP_Algo_ApplyGammaInverse>
        e_ret = evision_api_awb_run_average(pIspAWBestimator, NULL, 1, meas);
340056b4:	486c      	ldr	r0, [pc, #432]	@ (34005868 <ISP_Algo_AWB_Process+0x4a0>)
340056b6:	2201      	movs	r2, #1
340056b8:	2100      	movs	r1, #0
340056ba:	6800      	ldr	r0, [r0, #0]
340056bc:	ab10      	add	r3, sp, #64	@ 0x40
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
340056be:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
        e_ret = evision_api_awb_run_average(pIspAWBestimator, NULL, 1, meas);
340056c2:	f7fb fceb 	bl	3400109c <evision_api_awb_run_average>
        if (e_ret == EVISION_RET_SUCCESS)
340056c6:	2801      	cmp	r0, #1
340056c8:	d17a      	bne.n	340057c0 <ISP_Algo_AWB_Process+0x3f8>
          if (pIspAWBestimator->out_temp != currentColorTemp || reconfigureRequest == true)
340056ca:	4b67      	ldr	r3, [pc, #412]	@ (34005868 <ISP_Algo_AWB_Process+0x4a0>)
340056cc:	681b      	ldr	r3, [r3, #0]
340056ce:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
340056d2:	4b66      	ldr	r3, [pc, #408]	@ (3400586c <ISP_Algo_AWB_Process+0x4a4>)
340056d4:	681b      	ldr	r3, [r3, #0]
340056d6:	ee06 3a90 	vmov	s13, r3
340056da:	eeb8 6b66 	vcvt.f64.u32	d6, s13
340056de:	eeb4 7b46 	vcmp.f64	d7, d6
340056e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340056e6:	9305      	str	r3, [sp, #20]
340056e8:	d103      	bne.n	340056f2 <ISP_Algo_AWB_Process+0x32a>
340056ea:	4b5e      	ldr	r3, [pc, #376]	@ (34005864 <ISP_Algo_AWB_Process+0x49c>)
340056ec:	781b      	ldrb	r3, [r3, #0]
340056ee:	2b01      	cmp	r3, #1
340056f0:	d10f      	bne.n	34005712 <ISP_Algo_AWB_Process+0x34a>
            if ((pIspAWBestimator->out_temp == colorTempHistory[1]) && (reconfigureRequest != true))
340056f2:	eddb 6a01 	vldr	s13, [fp, #4]
340056f6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
340056fa:	eeb4 7b46 	vcmp.f64	d7, d6
340056fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34005702:	d13b      	bne.n	3400577c <ISP_Algo_AWB_Process+0x3b4>
34005704:	4b57      	ldr	r3, [pc, #348]	@ (34005864 <ISP_Algo_AWB_Process+0x49c>)
34005706:	781b      	ldrb	r3, [r3, #0]
34005708:	2b01      	cmp	r3, #1
3400570a:	d037      	beq.n	3400577c <ISP_Algo_AWB_Process+0x3b4>
              skip_stat_check_count = 0; //oscillation detected
3400570c:	2300      	movs	r3, #0
3400570e:	f88a 3000 	strb.w	r3, [sl]
  ISP_StatusTypeDef ret_stat, ret = ISP_OK;
34005712:	2400      	movs	r4, #0
    reconfigureRequest = false;
34005714:	2300      	movs	r3, #0
34005716:	4a53      	ldr	r2, [pc, #332]	@ (34005864 <ISP_Algo_AWB_Process+0x49c>)
34005718:	7013      	strb	r3, [r2, #0]
    if (skip_stat_check_count > 0) skip_stat_check_count--;
3400571a:	f89a 3000 	ldrb.w	r3, [sl]
3400571e:	b113      	cbz	r3, 34005726 <ISP_Algo_AWB_Process+0x35e>
34005720:	3b01      	subs	r3, #1
34005722:	f88a 3000 	strb.w	r3, [sl]
    statsHistory[1][0] = statsHistory[0][0];
34005726:	683b      	ldr	r3, [r7, #0]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34005728:	2205      	movs	r2, #5
    statsHistory[1][0] = statsHistory[0][0];
3400572a:	60fb      	str	r3, [r7, #12]
    statsHistory[1][1] = statsHistory[0][1];
3400572c:	687b      	ldr	r3, [r7, #4]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3400572e:	2502      	movs	r5, #2
    statsHistory[1][1] = statsHistory[0][1];
34005730:	613b      	str	r3, [r7, #16]
    statsHistory[1][2] = statsHistory[0][2];
34005732:	68bb      	ldr	r3, [r7, #8]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34005734:	4630      	mov	r0, r6
    statsHistory[1][2] = statsHistory[0][2];
34005736:	617b      	str	r3, [r7, #20]
    statsHistory[0][0] = stats.up.averageR;
34005738:	f899 3000 	ldrb.w	r3, [r9]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3400573c:	494c      	ldr	r1, [pc, #304]	@ (34005870 <ISP_Algo_AWB_Process+0x4a8>)
    statsHistory[0][0] = stats.up.averageR;
3400573e:	603b      	str	r3, [r7, #0]
    statsHistory[0][1] = stats.up.averageG;
34005740:	f899 3001 	ldrb.w	r3, [r9, #1]
34005744:	607b      	str	r3, [r7, #4]
    statsHistory[0][2] = stats.up.averageB;
34005746:	f899 3002 	ldrb.w	r3, [r9, #2]
3400574a:	60bb      	str	r3, [r7, #8]
    colorTempHistory[1] = colorTempHistory[0];
3400574c:	f8db 3000 	ldr.w	r3, [fp]
34005750:	f8cb 3004 	str.w	r3, [fp, #4]
    colorTempHistory[0] = currentColorTemp;
34005754:	4b45      	ldr	r3, [pc, #276]	@ (3400586c <ISP_Algo_AWB_Process+0x4a4>)
34005756:	681b      	ldr	r3, [r3, #0]
34005758:	f8cb 3000 	str.w	r3, [fp]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3400575c:	2301      	movs	r3, #1
3400575e:	9500      	str	r5, [sp, #0]
34005760:	e9cd 3201 	strd	r3, r2, [sp, #4]
34005764:	4642      	mov	r2, r8
34005766:	4b43      	ldr	r3, [pc, #268]	@ (34005874 <ISP_Algo_AWB_Process+0x4ac>)
34005768:	f001 f96e 	bl	34006a48 <ISP_SVC_Stats_GetNext>
    ret = (ret != ISP_OK) ? ret : ret_stat;
3400576c:	2c00      	cmp	r4, #0
3400576e:	bf18      	it	ne
34005770:	4620      	movne	r0, r4
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
34005772:	f888 5001 	strb.w	r5, [r8, #1]
    break;
34005776:	e63b      	b.n	340053f0 <ISP_Algo_AWB_Process+0x28>
        stat_has_changed = true;
34005778:	2401      	movs	r4, #1
3400577a:	e763      	b.n	34005644 <ISP_Algo_AWB_Process+0x27c>
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
3400577c:	f89a 3000 	ldrb.w	r3, [sl]
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
34005780:	eefc 6bc7 	vcvt.u32.f64	s13, d7
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
34005784:	2b06      	cmp	r3, #6
34005786:	bf98      	it	ls
34005788:	2306      	movls	r3, #6
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
3400578a:	4a3b      	ldr	r2, [pc, #236]	@ (34005878 <ISP_Algo_AWB_Process+0x4b0>)
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
3400578c:	bf98      	it	ls
3400578e:	f88a 3000 	strbls.w	r3, [sl]
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
34005792:	edc2 6a04 	vstr	s13, [r2, #16]
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
34005796:	2305      	movs	r3, #5
34005798:	2200      	movs	r2, #0
3400579a:	f505 718a 	add.w	r1, r5, #276	@ 0x114
                if (pIspAWBestimator->out_temp == IQParamConfig->AWBAlgo.referenceColorTemp[profId])
3400579e:	ed91 6a01 	vldr	s12, [r1, #4]
340057a2:	eeb8 6b46 	vcvt.f64.u32	d6, s12
340057a6:	eeb4 7b46 	vcmp.f64	d7, d6
340057aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340057ae:	f101 0104 	add.w	r1, r1, #4
340057b2:	d010      	beq.n	340057d6 <ISP_Algo_AWB_Process+0x40e>
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
340057b4:	3b01      	subs	r3, #1
340057b6:	f102 0201 	add.w	r2, r2, #1
340057ba:	d1f0      	bne.n	3400579e <ISP_Algo_AWB_Process+0x3d6>
                ret  = ISP_ERR_WB_COLORTEMP;
340057bc:	2496      	movs	r4, #150	@ 0x96
340057be:	e7a9      	b.n	34005714 <ISP_Algo_AWB_Process+0x34c>
          ret = ISP_ERR_ALGO;
340057c0:	24be      	movs	r4, #190	@ 0xbe
340057c2:	e7a7      	b.n	34005714 <ISP_Algo_AWB_Process+0x34c>
    printf("WARNING: Unknown AWB algo state\r\n");
340057c4:	482d      	ldr	r0, [pc, #180]	@ (3400587c <ISP_Algo_AWB_Process+0x4b4>)
340057c6:	f01b fe39 	bl	3402143c <puts>
    algo->state = ISP_ALGO_STATE_INIT;
340057ca:	2300      	movs	r3, #0
340057cc:	f888 3001 	strb.w	r3, [r8, #1]
    break;
340057d0:	e60d      	b.n	340053ee <ISP_Algo_AWB_Process+0x26>
      return ISP_ERR_ALGO;
340057d2:	20be      	movs	r0, #190	@ 0xbe
340057d4:	e60c      	b.n	340053f0 <ISP_Algo_AWB_Process+0x28>
                ColorConvConfig.enable = 1;
340057d6:	2301      	movs	r3, #1
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
340057d8:	f04f 0e04 	mov.w	lr, #4
                ColorConvConfig.enable = 1;
340057dc:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
340057e0:	2324      	movs	r3, #36	@ 0x24
340057e2:	f04e e001 	dls	lr, lr
340057e6:	fb03 5302 	mla	r3, r3, r2, r5
340057ea:	ac17      	add	r4, sp, #92	@ 0x5c
340057ec:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
340057f0:	46a4      	mov	ip, r4
340057f2:	6818      	ldr	r0, [r3, #0]
340057f4:	6859      	ldr	r1, [r3, #4]
340057f6:	3308      	adds	r3, #8
340057f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
340057fc:	4664      	mov	r4, ip
340057fe:	f00f c809 	le	lr, 340057f0 <ISP_Algo_AWB_Process+0x428>
34005802:	9205      	str	r2, [sp, #20]
34005804:	6818      	ldr	r0, [r3, #0]
                ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConvConfig);
34005806:	a916      	add	r1, sp, #88	@ 0x58
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
34005808:	f8cc 0000 	str.w	r0, [ip]
                ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConvConfig);
3400580c:	4630      	mov	r0, r6
3400580e:	f000 fd53 	bl	340062b8 <ISP_SVC_ISP_SetColorConv>
                if (ret == ISP_OK)
34005812:	9a05      	ldr	r2, [sp, #20]
34005814:	4604      	mov	r4, r0
34005816:	2800      	cmp	r0, #0
34005818:	f47f af7c 	bne.w	34005714 <ISP_Algo_AWB_Process+0x34c>
                  ISPGainConfig.enable = 1;
3400581c:	2301      	movs	r3, #1
3400581e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
34005822:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                  ISPGainConfig.ispGainR = IQParamConfig->AWBAlgo.ispGainR[profId];
34005826:	f8d5 312c 	ldr.w	r3, [r5, #300]	@ 0x12c
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
3400582a:	4630      	mov	r0, r6
                  ISPGainConfig.ispGainR = IQParamConfig->AWBAlgo.ispGainR[profId];
3400582c:	930d      	str	r3, [sp, #52]	@ 0x34
                  ISPGainConfig.ispGainG = IQParamConfig->AWBAlgo.ispGainG[profId];
3400582e:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
34005832:	a90c      	add	r1, sp, #48	@ 0x30
                  ISPGainConfig.ispGainG = IQParamConfig->AWBAlgo.ispGainG[profId];
34005834:	930e      	str	r3, [sp, #56]	@ 0x38
                  ISPGainConfig.ispGainB = IQParamConfig->AWBAlgo.ispGainB[profId];
34005836:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
3400583a:	9205      	str	r2, [sp, #20]
3400583c:	930f      	str	r3, [sp, #60]	@ 0x3c
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
3400583e:	f000 fc57 	bl	340060f0 <ISP_SVC_ISP_SetGain>
                  if (ret == ISP_OK)
34005842:	4604      	mov	r4, r0
34005844:	2800      	cmp	r0, #0
34005846:	f47f af65 	bne.w	34005714 <ISP_Algo_AWB_Process+0x34c>
                    currentColorTemp = (uint32_t) pIspAWBestimator->out_temp ;
3400584a:	4b07      	ldr	r3, [pc, #28]	@ (34005868 <ISP_Algo_AWB_Process+0x4a0>)
                    current_awb_profId = profId;
3400584c:	9a05      	ldr	r2, [sp, #20]
                    currentColorTemp = (uint32_t) pIspAWBestimator->out_temp ;
3400584e:	681b      	ldr	r3, [r3, #0]
34005850:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
34005854:	eebc 7bc7 	vcvt.u32.f64	s14, d7
34005858:	4b04      	ldr	r3, [pc, #16]	@ (3400586c <ISP_Algo_AWB_Process+0x4a4>)
3400585a:	ed83 7a00 	vstr	s14, [r3]
                    current_awb_profId = profId;
3400585e:	4b08      	ldr	r3, [pc, #32]	@ (34005880 <ISP_Algo_AWB_Process+0x4b8>)
34005860:	601a      	str	r2, [r3, #0]
34005862:	e757      	b.n	34005714 <ISP_Algo_AWB_Process+0x34c>
34005864:	340d1814 	.word	0x340d1814
34005868:	340d18b4 	.word	0x340d18b4
3400586c:	340d1608 	.word	0x340d1608
34005870:	34004e63 	.word	0x34004e63
34005874:	340d1630 	.word	0x340d1630
34005878:	340d189c 	.word	0x340d189c
3400587c:	3402c0d8 	.word	0x3402c0d8
34005880:	340d18b0 	.word	0x340d18b0
34005884:	340d160c 	.word	0x340d160c
34005888:	340cc660 	.word	0x340cc660
3400588c:	340d180c 	.word	0x340d180c

34005890 <ISP_Algo_Init>:
  *         Register and initialize all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Init(ISP_HandleTypeDef *hIsp)
{
34005890:	b538      	push	{r3, r4, r5, lr}
34005892:	4604      	mov	r4, r0
  ISP_AlgoTypeDef *algo;
  ISP_StatusTypeDef ret;
  uint8_t i;

  hIsp->algorithm = ISP_Algo_List;
34005894:	2500      	movs	r5, #0
34005896:	4b09      	ldr	r3, [pc, #36]	@ (340058bc <ISP_Algo_Init+0x2c>)
34005898:	6183      	str	r3, [r0, #24]

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
  {
    algo = hIsp->algorithm[i];
3400589a:	69a3      	ldr	r3, [r4, #24]
3400589c:	5959      	ldr	r1, [r3, r5]
    if ((algo != NULL) && (algo->Init != NULL))
3400589e:	b921      	cbnz	r1, 340058aa <ISP_Algo_Init+0x1a>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
340058a0:	3504      	adds	r5, #4
340058a2:	2d0c      	cmp	r5, #12
340058a4:	d1f9      	bne.n	3400589a <ISP_Algo_Init+0xa>
        return ret;
      }
    }
  }

  return ISP_OK;
340058a6:	2000      	movs	r0, #0
}
340058a8:	bd38      	pop	{r3, r4, r5, pc}
    if ((algo != NULL) && (algo->Init != NULL))
340058aa:	684b      	ldr	r3, [r1, #4]
340058ac:	2b00      	cmp	r3, #0
340058ae:	d0f7      	beq.n	340058a0 <ISP_Algo_Init+0x10>
      ret = algo->Init((void*)hIsp, (void*)algo);
340058b0:	4620      	mov	r0, r4
340058b2:	4798      	blx	r3
      if (ret != ISP_OK)
340058b4:	2800      	cmp	r0, #0
340058b6:	d0f3      	beq.n	340058a0 <ISP_Algo_Init+0x10>
340058b8:	e7f6      	b.n	340058a8 <ISP_Algo_Init+0x18>
340058ba:	bf00      	nop
340058bc:	340cc664 	.word	0x340cc664

340058c0 <ISP_Algo_DeInit>:
  *         Deinitialize all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_DeInit(ISP_HandleTypeDef *hIsp)
{
340058c0:	b538      	push	{r3, r4, r5, lr}
340058c2:	4604      	mov	r4, r0
340058c4:	2500      	movs	r5, #0
  ISP_StatusTypeDef ret;
  uint8_t i;

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
  {
    algo = hIsp->algorithm[i];
340058c6:	69a3      	ldr	r3, [r4, #24]
340058c8:	5959      	ldr	r1, [r3, r5]
    if ((algo != NULL) && (algo->DeInit != NULL))
340058ca:	b921      	cbnz	r1, 340058d6 <ISP_Algo_DeInit+0x16>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
340058cc:	3504      	adds	r5, #4
340058ce:	2d0c      	cmp	r5, #12
340058d0:	d1f9      	bne.n	340058c6 <ISP_Algo_DeInit+0x6>
        return ret;
      }
    }
  }

  return ISP_OK;
340058d2:	2000      	movs	r0, #0
}
340058d4:	bd38      	pop	{r3, r4, r5, pc}
    if ((algo != NULL) && (algo->DeInit != NULL))
340058d6:	688b      	ldr	r3, [r1, #8]
340058d8:	2b00      	cmp	r3, #0
340058da:	d0f7      	beq.n	340058cc <ISP_Algo_DeInit+0xc>
      ret = algo->DeInit((void*)hIsp, (void*)algo);
340058dc:	4620      	mov	r0, r4
340058de:	4798      	blx	r3
      if (ret != ISP_OK)
340058e0:	2800      	cmp	r0, #0
340058e2:	d0f3      	beq.n	340058cc <ISP_Algo_DeInit+0xc>
340058e4:	e7f6      	b.n	340058d4 <ISP_Algo_DeInit+0x14>

340058e6 <ISP_Algo_Process>:
  *         Process all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Process(ISP_HandleTypeDef *hIsp)
{
340058e6:	b538      	push	{r3, r4, r5, lr}
340058e8:	4604      	mov	r4, r0
340058ea:	2500      	movs	r5, #0
  ISP_StatusTypeDef ret;
  uint8_t i;

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
  {
    algo = hIsp->algorithm[i];
340058ec:	69a3      	ldr	r3, [r4, #24]
340058ee:	5959      	ldr	r1, [r3, r5]
    if ((algo != NULL) && (algo->Process != NULL))
340058f0:	b921      	cbnz	r1, 340058fc <ISP_Algo_Process+0x16>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
340058f2:	3504      	adds	r5, #4
340058f4:	2d0c      	cmp	r5, #12
340058f6:	d1f9      	bne.n	340058ec <ISP_Algo_Process+0x6>
      }
#endif
    }
  }

  return ISP_OK;
340058f8:	2000      	movs	r0, #0
}
340058fa:	bd38      	pop	{r3, r4, r5, pc}
    if ((algo != NULL) && (algo->Process != NULL))
340058fc:	68cb      	ldr	r3, [r1, #12]
340058fe:	2b00      	cmp	r3, #0
34005900:	d0f7      	beq.n	340058f2 <ISP_Algo_Process+0xc>
      ret = algo->Process((void*)hIsp, (void*)algo);
34005902:	4620      	mov	r0, r4
34005904:	4798      	blx	r3
      if (ret != ISP_OK)
34005906:	2800      	cmp	r0, #0
34005908:	d0f3      	beq.n	340058f2 <ISP_Algo_Process+0xc>
3400590a:	e7f6      	b.n	340058fa <ISP_Algo_Process+0x14>

3400590c <ISP_Init>:
ISP_StatusTypeDef ISP_Init(ISP_HandleTypeDef *hIsp,
                           void *hDcmipp,
                           uint32_t CameraInstance,
                           ISP_AppliHelpersTypeDef *pAppliHelpers,
                           const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
3400590c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400590e:	460e      	mov	r6, r1
34005910:	4617      	mov	r7, r2
34005912:	461c      	mov	r4, r3
  ISP_StatusTypeDef ret;

  if ((hIsp == NULL) || (hDcmipp == NULL) || (pAppliHelpers == NULL))
34005914:	4605      	mov	r5, r0
34005916:	2800      	cmp	r0, #0
34005918:	d066      	beq.n	340059e8 <ISP_Init+0xdc>
3400591a:	2900      	cmp	r1, #0
3400591c:	d064      	beq.n	340059e8 <ISP_Init+0xdc>
3400591e:	2b00      	cmp	r3, #0
34005920:	d062      	beq.n	340059e8 <ISP_Init+0xdc>
  {
    return ISP_ERR_EINVAL;
  }

  memset(hIsp, 0, sizeof(*hIsp));
34005922:	2280      	movs	r2, #128	@ 0x80
34005924:	2100      	movs	r1, #0
34005926:	3008      	adds	r0, #8
34005928:	f01b fef4 	bl	34021714 <memset>
  hIsp->cameraInstance = CameraInstance;
  hIsp->MainPipe_FrameCount = 0;
  hIsp->AncillaryPipe_FrameCount = 0;
  hIsp->DumpPipe_FrameCount = 0;

  hIsp->appliHelpers = *pAppliHelpers;
3400592c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  hIsp->cameraInstance = CameraInstance;
3400592e:	e9c5 6700 	strd	r6, r7, [r5]
  hIsp->appliHelpers = *pAppliHelpers;
34005932:	f105 061c 	add.w	r6, r5, #28
34005936:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34005938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3400593a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
3400593c:	6823      	ldr	r3, [r4, #0]
3400593e:	6033      	str	r3, [r6, #0]
  /* Appli CB is mandatory for the sensor get/set exp/gain function */
  if (hIsp->appliHelpers.GetSensorInfo == NULL)
34005940:	6aab      	ldr	r3, [r5, #40]	@ 0x28
34005942:	b933      	cbnz	r3, 34005952 <ISP_Init+0x46>
  {
     printf("INFO: GetSensorInfo helper function is not implemented\r\n");
34005944:	4829      	ldr	r0, [pc, #164]	@ (340059ec <ISP_Init+0xe0>)
      printf("INFO: SetSensorGain helper function is not implemented\r\n");
      return ISP_ERR_APP_HELPER_UNDEFINED;
  }
  if (hIsp->appliHelpers.GetSensorGain == NULL)
  {
     printf("INFO: GetSensorGain helper function is not implemented\r\n");
34005946:	f01b fd79 	bl	3402143c <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
3400594a:	24b4      	movs	r4, #180	@ 0xb4

  /* Initialize the statistic engine */
  ISP_SVC_Stats_Init(hIsp);

  return ISP_OK;
}
3400594c:	4620      	mov	r0, r4
3400594e:	b003      	add	sp, #12
34005950:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hIsp->appliHelpers.SetSensorGain == NULL)
34005952:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
34005954:	b90b      	cbnz	r3, 3400595a <ISP_Init+0x4e>
      printf("INFO: SetSensorGain helper function is not implemented\r\n");
34005956:	4826      	ldr	r0, [pc, #152]	@ (340059f0 <ISP_Init+0xe4>)
34005958:	e7f5      	b.n	34005946 <ISP_Init+0x3a>
  if (hIsp->appliHelpers.GetSensorGain == NULL)
3400595a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
3400595c:	b90b      	cbnz	r3, 34005962 <ISP_Init+0x56>
     printf("INFO: GetSensorGain helper function is not implemented\r\n");
3400595e:	4825      	ldr	r0, [pc, #148]	@ (340059f4 <ISP_Init+0xe8>)
34005960:	e7f1      	b.n	34005946 <ISP_Init+0x3a>
  if (hIsp->appliHelpers.SetSensorExposure == NULL)
34005962:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
34005964:	b90b      	cbnz	r3, 3400596a <ISP_Init+0x5e>
      printf("INFO: SetSensorExposure helper function is not implemented\r\n");
34005966:	4824      	ldr	r0, [pc, #144]	@ (340059f8 <ISP_Init+0xec>)
34005968:	e7ed      	b.n	34005946 <ISP_Init+0x3a>
  if (hIsp->appliHelpers.GetSensorExposure == NULL)
3400596a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
3400596c:	b90b      	cbnz	r3, 34005972 <ISP_Init+0x66>
     printf("INFO: GetSensorExposure helper function is not implemented\r\n");
3400596e:	4823      	ldr	r0, [pc, #140]	@ (340059fc <ISP_Init+0xf0>)
34005970:	e7e9      	b.n	34005946 <ISP_Init+0x3a>
  ret = ISP_SVC_IQParam_Init(hIsp, ISP_IQParamCacheInit);
34005972:	4628      	mov	r0, r5
34005974:	9908      	ldr	r1, [sp, #32]
34005976:	f000 fe17 	bl	340065a8 <ISP_SVC_IQParam_Init>
  if (ret != ISP_OK)
3400597a:	4604      	mov	r4, r0
3400597c:	2800      	cmp	r0, #0
3400597e:	d1e5      	bne.n	3400594c <ISP_Init+0x40>
  ret = ISP_SVC_Sensor_GetInfo(hIsp, &hIsp->sensorInfo);
34005980:	4628      	mov	r0, r5
34005982:	f105 014c 	add.w	r1, r5, #76	@ 0x4c
34005986:	f000 fd67 	bl	34006458 <ISP_SVC_Sensor_GetInfo>
  if (ret != ISP_OK)
3400598a:	4604      	mov	r4, r0
3400598c:	2800      	cmp	r0, #0
3400598e:	d1dd      	bne.n	3400594c <ISP_Init+0x40>
  if ((hIsp->sensorInfo.width / ISP_DECIM_FACTOR_1) < ISP_RAW_MAX_WIDTH)
34005990:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
34005992:	f5b2 6f28 	cmp.w	r2, #2688	@ 0xa80
34005996:	d30f      	bcc.n	340059b8 <ISP_Init+0xac>
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_2) < ISP_RAW_MAX_WIDTH)
34005998:	f5b2 5fa8 	cmp.w	r2, #5376	@ 0x1500
3400599c:	d320      	bcc.n	340059e0 <ISP_Init+0xd4>
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_4) < ISP_RAW_MAX_WIDTH)
3400599e:	f5b2 5f28 	cmp.w	r2, #10752	@ 0x2a00
340059a2:	d31f      	bcc.n	340059e4 <ISP_Init+0xd8>
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_8) < ISP_RAW_MAX_WIDTH)
340059a4:	f5b2 4fa8 	cmp.w	r2, #21504	@ 0x5400
340059a8:	f04f 0308 	mov.w	r3, #8
340059ac:	d305      	bcc.n	340059ba <ISP_Init+0xae>
    printf("ERROR: No possible decimation factor to target ISP RAW width constraint\r\n");
340059ae:	4814      	ldr	r0, [pc, #80]	@ (34005a00 <ISP_Init+0xf4>)
340059b0:	f01b fd44 	bl	3402143c <puts>
    return ISP_ERR_DECIMATION_EINVAL;
340059b4:	241e      	movs	r4, #30
340059b6:	e7c9      	b.n	3400594c <ISP_Init+0x40>
340059b8:	2301      	movs	r3, #1
  ret = ISP_SVC_ISP_SetDecimation(hIsp, &decimation);
340059ba:	4628      	mov	r0, r5
340059bc:	a901      	add	r1, sp, #4
    decimation.factor = ISP_DECIM_FACTOR_1;
340059be:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ISP_SVC_ISP_SetDecimation(hIsp, &decimation);
340059c2:	f000 fa25 	bl	34005e10 <ISP_SVC_ISP_SetDecimation>
  if (ret != ISP_OK)
340059c6:	4604      	mov	r4, r0
340059c8:	2800      	cmp	r0, #0
340059ca:	d1bf      	bne.n	3400594c <ISP_Init+0x40>
  ret = ISP_Algo_Init(hIsp);
340059cc:	4628      	mov	r0, r5
340059ce:	f7ff ff5f 	bl	34005890 <ISP_Algo_Init>
  if (ret != ISP_OK)
340059d2:	4604      	mov	r4, r0
340059d4:	2800      	cmp	r0, #0
340059d6:	d1b9      	bne.n	3400594c <ISP_Init+0x40>
  ISP_SVC_Stats_Init(hIsp);
340059d8:	4628      	mov	r0, r5
340059da:	f000 fdf3 	bl	340065c4 <ISP_SVC_Stats_Init>
  return ISP_OK;
340059de:	e7b5      	b.n	3400594c <ISP_Init+0x40>
340059e0:	2302      	movs	r3, #2
340059e2:	e7ea      	b.n	340059ba <ISP_Init+0xae>
340059e4:	2304      	movs	r3, #4
340059e6:	e7e8      	b.n	340059ba <ISP_Init+0xae>
    return ISP_ERR_EINVAL;
340059e8:	2401      	movs	r4, #1
340059ea:	e7af      	b.n	3400594c <ISP_Init+0x40>
340059ec:	3402c0f9 	.word	0x3402c0f9
340059f0:	3402c131 	.word	0x3402c131
340059f4:	3402c169 	.word	0x3402c169
340059f8:	3402c1a1 	.word	0x3402c1a1
340059fc:	3402c1dd 	.word	0x3402c1dd
34005a00:	3402c219 	.word	0x3402c219

34005a04 <ISP_DeInit>:
  *         Deinitializes the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_DeInit(ISP_HandleTypeDef *hIsp)
{
34005a04:	b538      	push	{r3, r4, r5, lr}
  ISP_StatusTypeDef ret;

  if (hIsp == NULL)
34005a06:	4605      	mov	r5, r0
34005a08:	b150      	cbz	r0, 34005a20 <ISP_DeInit+0x1c>
  {
    return ISP_ERR_EINVAL;
  }

  /* DeInitialize algorithms */
  ret = ISP_Algo_DeInit(hIsp);
34005a0a:	f7ff ff59 	bl	340058c0 <ISP_Algo_DeInit>
  if (ret != ISP_OK)
34005a0e:	4604      	mov	r4, r0
34005a10:	b920      	cbnz	r0, 34005a1c <ISP_DeInit+0x18>
  {
    return ret;
  }

  /* Re-initialized the hIsp structure */
  memset(hIsp, 0, sizeof(*hIsp));
34005a12:	4601      	mov	r1, r0
34005a14:	2288      	movs	r2, #136	@ 0x88
34005a16:	4628      	mov	r0, r5
34005a18:	f01b fe7c 	bl	34021714 <memset>

  return ISP_OK;
}
34005a1c:	4620      	mov	r0, r4
34005a1e:	bd38      	pop	{r3, r4, r5, pc}
    return ISP_ERR_EINVAL;
34005a20:	2401      	movs	r4, #1
34005a22:	e7fb      	b.n	34005a1c <ISP_DeInit+0x18>
34005a24:	0000      	movs	r0, r0
	...

34005a28 <ISP_Start>:
  *         Configures the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_Start(ISP_HandleTypeDef *hIsp)
{
34005a28:	b567      	push	{r0, r1, r2, r5, r6, lr}
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;

  if (hIsp == NULL)
34005a2a:	4605      	mov	r5, r0
34005a2c:	2800      	cmp	r0, #0
34005a2e:	f000 8095 	beq.w	34005b5c <ISP_Start+0x134>
  {
    return ISP_ERR_EINVAL;
  }

  ret = ISP_SVC_Misc_IsDCMIPPReady(hIsp);
34005a32:	f000 fd67 	bl	34006504 <ISP_SVC_Misc_IsDCMIPPReady>
  if (ret != ISP_OK)
34005a36:	2800      	cmp	r0, #0
34005a38:	d149      	bne.n	34005ace <ISP_Start+0xa6>
  {
    return ret;
  }

  /* Get IQ Param config */
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005a3a:	4628      	mov	r0, r5
34005a3c:	f000 fdbe 	bl	340065bc <ISP_SVC_IQParam_Get>
34005a40:	4606      	mov	r6, r0

  /* Set static configurations */
  ret = ISP_SVC_ISP_SetDemosaicing(hIsp, &IQParamConfig->demosaicing);
34005a42:	f100 010c 	add.w	r1, r0, #12
34005a46:	4628      	mov	r0, r5
34005a48:	f000 f982 	bl	34005d50 <ISP_SVC_ISP_SetDemosaicing>
  if (ret != ISP_OK)
34005a4c:	2800      	cmp	r0, #0
34005a4e:	d13e      	bne.n	34005ace <ISP_Start+0xa6>
  {
    return ret;
  }

  ret = ISP_SVC_ISP_SetStatRemoval(hIsp, &IQParamConfig->statRemoval);
34005a50:	4631      	mov	r1, r6
34005a52:	4628      	mov	r0, r5
34005a54:	f000 f9bb 	bl	34005dce <ISP_SVC_ISP_SetStatRemoval>
  if (ret != ISP_OK)
34005a58:	2800      	cmp	r0, #0
34005a5a:	d138      	bne.n	34005ace <ISP_Start+0xa6>
  {
    return ret;
  }

  ret = ISP_SVC_ISP_SetContrast(hIsp, &IQParamConfig->contrast);
34005a5c:	4628      	mov	r0, r5
34005a5e:	f106 0114 	add.w	r1, r6, #20
34005a62:	f000 fa09 	bl	34005e78 <ISP_SVC_ISP_SetContrast>
  if (ret != ISP_OK)
34005a66:	bb90      	cbnz	r0, 34005ace <ISP_Start+0xa6>
  {
    return ret;
  }

  /* Set optional static configurations */
  if ((IQParamConfig->sensorGainStatic.gain != 0) && (!IQParamConfig->AECAlgo.enable))
34005a68:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
34005a6a:	bb2b      	cbnz	r3, 34005ab8 <ISP_Start+0x90>
    {
      return ret;
    }
  }

  if ((IQParamConfig->sensorExposureStatic.exposure != 0) && (!IQParamConfig->AECAlgo.enable))
34005a6c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
34005a6e:	bb83      	cbnz	r3, 34005ad2 <ISP_Start+0xaa>
    {
      return ret;
    }
  }

  if (IQParamConfig->badPixelStatic.enable != 0)
34005a70:	f896 305c 	ldrb.w	r3, [r6, #92]	@ 0x5c
34005a74:	b12b      	cbz	r3, 34005a82 <ISP_Start+0x5a>
  {
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &IQParamConfig->badPixelStatic);
34005a76:	4628      	mov	r0, r5
34005a78:	f106 015c 	add.w	r1, r6, #92	@ 0x5c
34005a7c:	f000 fac2 	bl	34006004 <ISP_SVC_ISP_SetBadPixel>
    if (ret != ISP_OK)
34005a80:	bb28      	cbnz	r0, 34005ace <ISP_Start+0xa6>
    {
      return ret;
    }
  }

  if (IQParamConfig->blackLevelStatic.enable != 0)
34005a82:	f896 3064 	ldrb.w	r3, [r6, #100]	@ 0x64
34005a86:	b12b      	cbz	r3, 34005a94 <ISP_Start+0x6c>
  {
    ret = ISP_SVC_ISP_SetBlackLevel(hIsp, &IQParamConfig->blackLevelStatic);
34005a88:	4628      	mov	r0, r5
34005a8a:	f106 0164 	add.w	r1, r6, #100	@ 0x64
34005a8e:	f000 faee 	bl	3400606e <ISP_SVC_ISP_SetBlackLevel>
    if (ret != ISP_OK)
34005a92:	b9e0      	cbnz	r0, 34005ace <ISP_Start+0xa6>
    {
      return ret;
    }
  }

  if ((IQParamConfig->ispGainStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005a94:	f896 321c 	ldrb.w	r3, [r6, #540]	@ 0x21c
34005a98:	bb3b      	cbnz	r3, 34005aea <ISP_Start+0xc2>
    {
      return ret;
    }
  }

  if ((IQParamConfig->colorConvStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005a9a:	f896 322c 	ldrb.w	r3, [r6, #556]	@ 0x22c
34005a9e:	2b00      	cmp	r3, #0
34005aa0:	d12f      	bne.n	34005b02 <ISP_Start+0xda>
      return ret;
    }
  }

  /* Configure statistic area if not already configured by ISP_SetStatArea() */
  if ((hIsp->statArea.XSize == 0) || (hIsp->statArea.YSize == 0))
34005aa2:	692b      	ldr	r3, [r5, #16]
34005aa4:	2b00      	cmp	r3, #0
34005aa6:	d138      	bne.n	34005b1a <ISP_Start+0xf2>
  {
    /* Configure statistic area from IQ params */
    ret = ISP_SVC_ISP_SetStatArea(hIsp, &IQParamConfig->statAreaStatic);
34005aa8:	4628      	mov	r0, r5
34005aaa:	f106 013c 	add.w	r1, r6, #60	@ 0x3c
34005aae:	f000 fa5d 	bl	34005f6c <ISP_SVC_ISP_SetStatArea>
    if (ret != ISP_OK)
34005ab2:	2800      	cmp	r0, #0
34005ab4:	d034      	beq.n	34005b20 <ISP_Start+0xf8>
34005ab6:	e00a      	b.n	34005ace <ISP_Start+0xa6>
  if ((IQParamConfig->sensorGainStatic.gain != 0) && (!IQParamConfig->AECAlgo.enable))
34005ab8:	f896 3068 	ldrb.w	r3, [r6, #104]	@ 0x68
34005abc:	2b00      	cmp	r3, #0
34005abe:	d1d5      	bne.n	34005a6c <ISP_Start+0x44>
    ret = ISP_SVC_Sensor_SetGain(hIsp, &IQParamConfig->sensorGainStatic);
34005ac0:	4628      	mov	r0, r5
34005ac2:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
34005ac6:	f000 fcd5 	bl	34006474 <ISP_SVC_Sensor_SetGain>
    if (ret != ISP_OK)
34005aca:	2800      	cmp	r0, #0
34005acc:	d0ce      	beq.n	34005a6c <ISP_Start+0x44>

  /* Initialize the exposure target based on the selected exposure compensation */
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));

  return ISP_OK;
}
34005ace:	b003      	add	sp, #12
34005ad0:	bd60      	pop	{r5, r6, pc}
  if ((IQParamConfig->sensorExposureStatic.exposure != 0) && (!IQParamConfig->AECAlgo.enable))
34005ad2:	f896 3068 	ldrb.w	r3, [r6, #104]	@ 0x68
34005ad6:	2b00      	cmp	r3, #0
34005ad8:	d1ca      	bne.n	34005a70 <ISP_Start+0x48>
    ret = ISP_SVC_Sensor_SetExposure(hIsp, &IQParamConfig->sensorExposureStatic);
34005ada:	4628      	mov	r0, r5
34005adc:	f106 0150 	add.w	r1, r6, #80	@ 0x50
34005ae0:	f000 fcec 	bl	340064bc <ISP_SVC_Sensor_SetExposure>
    if (ret != ISP_OK)
34005ae4:	2800      	cmp	r0, #0
34005ae6:	d0c3      	beq.n	34005a70 <ISP_Start+0x48>
34005ae8:	e7f1      	b.n	34005ace <ISP_Start+0xa6>
  if ((IQParamConfig->ispGainStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005aea:	f896 3074 	ldrb.w	r3, [r6, #116]	@ 0x74
34005aee:	2b00      	cmp	r3, #0
34005af0:	d1d3      	bne.n	34005a9a <ISP_Start+0x72>
    ret = ISP_SVC_ISP_SetGain(hIsp, &IQParamConfig->ispGainStatic);
34005af2:	4628      	mov	r0, r5
34005af4:	f506 7107 	add.w	r1, r6, #540	@ 0x21c
34005af8:	f000 fafa 	bl	340060f0 <ISP_SVC_ISP_SetGain>
    if (ret != ISP_OK)
34005afc:	2800      	cmp	r0, #0
34005afe:	d0cc      	beq.n	34005a9a <ISP_Start+0x72>
34005b00:	e7e5      	b.n	34005ace <ISP_Start+0xa6>
  if ((IQParamConfig->colorConvStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005b02:	f896 3074 	ldrb.w	r3, [r6, #116]	@ 0x74
34005b06:	2b00      	cmp	r3, #0
34005b08:	d1cb      	bne.n	34005aa2 <ISP_Start+0x7a>
    ret = ISP_SVC_ISP_SetColorConv(hIsp, &IQParamConfig->colorConvStatic);
34005b0a:	4628      	mov	r0, r5
34005b0c:	f506 710b 	add.w	r1, r6, #556	@ 0x22c
34005b10:	f000 fbd2 	bl	340062b8 <ISP_SVC_ISP_SetColorConv>
    if (ret != ISP_OK)
34005b14:	2800      	cmp	r0, #0
34005b16:	d0c4      	beq.n	34005aa2 <ISP_Start+0x7a>
34005b18:	e7d9      	b.n	34005ace <ISP_Start+0xa6>
  if ((hIsp->statArea.XSize == 0) || (hIsp->statArea.YSize == 0))
34005b1a:	696b      	ldr	r3, [r5, #20]
34005b1c:	2b00      	cmp	r3, #0
34005b1e:	d0c3      	beq.n	34005aa8 <ISP_Start+0x80>
  ret = ISP_SVC_ISP_SetGamma(hIsp, &IQParamConfig->gamma);
34005b20:	4628      	mov	r0, r5
34005b22:	f506 7115 	add.w	r1, r6, #596	@ 0x254
34005b26:	f000 fd1f 	bl	34006568 <ISP_SVC_ISP_SetGamma>
  if (ret != ISP_OK)
34005b2a:	2800      	cmp	r0, #0
34005b2c:	d1cf      	bne.n	34005ace <ISP_Start+0xa6>
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));
34005b2e:	f996 3069 	ldrsb.w	r3, [r6, #105]	@ 0x69
34005b32:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
34005b36:	ee01 3a10 	vmov	s2, r3
34005b3a:	eeba 1aef 	vcvt.f32.s32	s2, s2, #1
34005b3e:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
34005b42:	9001      	str	r0, [sp, #4]
34005b44:	f01e fdd8 	bl	340246f8 <pow>
34005b48:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 34005b60 <ISP_Start+0x138>
34005b4c:	ee20 0b07 	vmul.f64	d0, d0, d7
34005b50:	eebc 0bc0 	vcvt.u32.f64	s0, d0
  return ISP_OK;
34005b54:	9801      	ldr	r0, [sp, #4]
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));
34005b56:	ed86 0a1b 	vstr	s0, [r6, #108]	@ 0x6c
  return ISP_OK;
34005b5a:	e7b8      	b.n	34005ace <ISP_Start+0xa6>
    return ISP_ERR_EINVAL;
34005b5c:	2001      	movs	r0, #1
34005b5e:	e7b6      	b.n	34005ace <ISP_Start+0xa6>
34005b60:	00000000 	.word	0x00000000
34005b64:	404c0000 	.word	0x404c0000

34005b68 <ISP_BackgroundProcess>:
  *         Run the background process of the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_BackgroundProcess(ISP_HandleTypeDef *hIsp)
{
34005b68:	b538      	push	{r3, r4, r5, lr}
#ifdef ISP_MW_TUNING_TOOL_SUPPORT
  ISP_StatusTypeDef retCmdParser = ISP_OK;
  uint8_t *cmd;
#endif

  if (hIsp == NULL)
34005b6a:	4605      	mov	r5, r0
34005b6c:	b150      	cbz	r0, 34005b84 <ISP_BackgroundProcess+0x1c>
    retCmdParser = ISP_CmdParser_ProcessCommand(hIsp, cmd);
  }
#endif

  /* Check if a statistics gathering cycle has been completed to call the statistic callbacks */
  retStats = ISP_SVC_Stats_ProcessCallbacks(hIsp);
34005b6e:	f000 ff2d 	bl	340069cc <ISP_SVC_Stats_ProcessCallbacks>
34005b72:	4604      	mov	r4, r0

  /* Process the algorithms */
  retAlgo = ISP_Algo_Process(hIsp);
34005b74:	4628      	mov	r0, r5
34005b76:	f7ff feb6 	bl	340058e6 <ISP_Algo_Process>
  else if (retAlgo != ISP_OK)
  {
    return retAlgo;
  }

  return ISP_OK;
34005b7a:	2c00      	cmp	r4, #0
34005b7c:	bf08      	it	eq
34005b7e:	4604      	moveq	r4, r0
}
34005b80:	4620      	mov	r0, r4
34005b82:	bd38      	pop	{r3, r4, r5, pc}
    return ISP_ERR_EINVAL;
34005b84:	2401      	movs	r4, #1
34005b86:	e7fb      	b.n	34005b80 <ISP_BackgroundProcess+0x18>

34005b88 <ISP_ListWBRefModes>:
  * @param  hIsp: ISP device handle
  * @param  RefColorTemp: Array of reference color temperatures
  * @retval Operation status
  */
ISP_StatusTypeDef ISP_ListWBRefModes(ISP_HandleTypeDef *hIsp, uint32_t RefColorTemp[])
{
34005b88:	b510      	push	{r4, lr}
34005b8a:	460c      	mov	r4, r1
  ISP_IQParamTypeDef *IQParamConfig;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005b8c:	f000 fd16 	bl	340065bc <ISP_SVC_IQParam_Get>

  memcpy(RefColorTemp, IQParamConfig->AWBAlgo.referenceColorTemp, sizeof(IQParamConfig->AWBAlgo.referenceColorTemp));
34005b90:	f04f 0e05 	mov.w	lr, #5
34005b94:	4621      	mov	r1, r4
34005b96:	f04e e001 	dls	lr, lr
34005b9a:	f500 708c 	add.w	r0, r0, #280	@ 0x118
34005b9e:	f850 3b04 	ldr.w	r3, [r0], #4
34005ba2:	f841 3b04 	str.w	r3, [r1], #4
34005ba6:	f00f c007 	le	lr, 34005b9e <ISP_ListWBRefModes+0x16>

  return ISP_OK;
}
34005baa:	2000      	movs	r0, #0
34005bac:	bd10      	pop	{r4, pc}

34005bae <ISP_SetWBRefMode>:
  * @param  Automatic: 'true' if the AWB automatic mode is requested
  * @param  RefColorTemp: Reference color temperature (manual mode). Not significant if Automatic is set to 'true'
  * @retval Operation status
  */
ISP_StatusTypeDef ISP_SetWBRefMode(ISP_HandleTypeDef *hIsp, uint8_t Automatic, uint32_t RefColorTemp)
{
34005bae:	b570      	push	{r4, r5, r6, lr}
34005bb0:	460e      	mov	r6, r1
34005bb2:	b08e      	sub	sp, #56	@ 0x38
34005bb4:	4604      	mov	r4, r0
34005bb6:	4615      	mov	r5, r2
  ISP_ColorConvTypeDef ColorConv;
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;
  uint32_t index;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005bb8:	f000 fd00 	bl	340065bc <ISP_SVC_IQParam_Get>

  if (Automatic)
34005bbc:	b12e      	cbz	r6, 34005bca <ISP_SetWBRefMode+0x1c>
  {
    /* Start the AWB algorithm */
    IQParamConfig->AWBAlgo.enable = 1;
34005bbe:	2301      	movs	r3, #1
34005bc0:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    {
      return ret;
    }
  }

  return ISP_OK;
34005bc4:	2000      	movs	r0, #0
}
34005bc6:	b00e      	add	sp, #56	@ 0x38
34005bc8:	bd70      	pop	{r4, r5, r6, pc}
    for (index = 0; index < ISP_AWB_COLORTEMP_REF; index++)
34005bca:	4631      	mov	r1, r6
34005bcc:	2305      	movs	r3, #5
34005bce:	f500 728a 	add.w	r2, r0, #276	@ 0x114
      if (IQParamConfig->AWBAlgo.referenceColorTemp[index] == RefColorTemp)
34005bd2:	f852 6f04 	ldr.w	r6, [r2, #4]!
34005bd6:	42ae      	cmp	r6, r5
34005bd8:	d005      	beq.n	34005be6 <ISP_SetWBRefMode+0x38>
    for (index = 0; index < ISP_AWB_COLORTEMP_REF; index++)
34005bda:	3b01      	subs	r3, #1
34005bdc:	f101 0101 	add.w	r1, r1, #1
34005be0:	d1f7      	bne.n	34005bd2 <ISP_SetWBRefMode+0x24>
      return ISP_ERR_WB_COLORTEMP;
34005be2:	2096      	movs	r0, #150	@ 0x96
34005be4:	e7ef      	b.n	34005bc6 <ISP_SetWBRefMode+0x18>
    IQParamConfig->AWBAlgo.enable = 0;
34005be6:	2300      	movs	r3, #0
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005be8:	f04f 0e04 	mov.w	lr, #4
    IQParamConfig->AWBAlgo.enable = 0;
34005bec:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    ISPGain.enable = 1;
34005bf0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    ISPGain.ispGainR = IQParamConfig->AWBAlgo.ispGainR[index];
34005bf4:	f8d3 612c 	ldr.w	r6, [r3, #300]	@ 0x12c
    ISPGain.enable = 1;
34005bf8:	2201      	movs	r2, #1
    ISPGain.ispGainR = IQParamConfig->AWBAlgo.ispGainR[index];
34005bfa:	9601      	str	r6, [sp, #4]
    ISPGain.ispGainG = IQParamConfig->AWBAlgo.ispGainG[index];
34005bfc:	f8d3 6140 	ldr.w	r6, [r3, #320]	@ 0x140
    ISPGain.ispGainB = IQParamConfig->AWBAlgo.ispGainB[index];
34005c00:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005c04:	f04e e001 	dls	lr, lr
    ISPGain.ispGainB = IQParamConfig->AWBAlgo.ispGainB[index];
34005c08:	9303      	str	r3, [sp, #12]
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005c0a:	2324      	movs	r3, #36	@ 0x24
34005c0c:	fb03 0301 	mla	r3, r3, r1, r0
    ISPGain.enable = 1;
34005c10:	f88d 2000 	strb.w	r2, [sp]
    ColorConv.enable = 1;
34005c14:	f88d 2010 	strb.w	r2, [sp, #16]
    ISPGain.ispGainG = IQParamConfig->AWBAlgo.ispGainG[index];
34005c18:	9602      	str	r6, [sp, #8]
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005c1a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
34005c1e:	aa05      	add	r2, sp, #20
34005c20:	4616      	mov	r6, r2
34005c22:	6818      	ldr	r0, [r3, #0]
34005c24:	6859      	ldr	r1, [r3, #4]
34005c26:	3308      	adds	r3, #8
34005c28:	c603      	stmia	r6!, {r0, r1}
34005c2a:	4632      	mov	r2, r6
34005c2c:	f00f c009 	le	lr, 34005c20 <ISP_SetWBRefMode+0x72>
34005c30:	6818      	ldr	r0, [r3, #0]
    ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGain);
34005c32:	4669      	mov	r1, sp
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005c34:	6030      	str	r0, [r6, #0]
    ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGain);
34005c36:	4620      	mov	r0, r4
34005c38:	f000 fa5a 	bl	340060f0 <ISP_SVC_ISP_SetGain>
    if (ret != ISP_OK)
34005c3c:	2800      	cmp	r0, #0
34005c3e:	d1c2      	bne.n	34005bc6 <ISP_SetWBRefMode+0x18>
    ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConv);
34005c40:	4620      	mov	r0, r4
34005c42:	a904      	add	r1, sp, #16
34005c44:	f000 fb38 	bl	340062b8 <ISP_SVC_ISP_SetColorConv>
    if (ret != ISP_OK)
34005c48:	2800      	cmp	r0, #0
34005c4a:	d1bc      	bne.n	34005bc6 <ISP_SetWBRefMode+0x18>
    ret = ISP_SVC_Misc_SetWBRefMode(hIsp, RefColorTemp);
34005c4c:	4629      	mov	r1, r5
34005c4e:	4620      	mov	r0, r4
34005c50:	f000 fc72 	bl	34006538 <ISP_SVC_Misc_SetWBRefMode>
    if (ret != ISP_OK)
34005c54:	e7b7      	b.n	34005bc6 <ISP_SetWBRefMode+0x18>

34005c56 <ISP_GatherStatistics>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_GatherStatistics(ISP_HandleTypeDef *hIsp)
{
  ISP_SVC_Stats_Gather(hIsp);
34005c56:	f000 bcbd 	b.w	340065d4 <ISP_SVC_Stats_Gather>

34005c5a <ISP_IncMainFrameId>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
  ISP_SVC_Misc_IncMainFrameId(hIsp);
34005c5a:	f000 bc5f 	b.w	3400651c <ISP_SVC_Misc_IncMainFrameId>

34005c5e <ISP_IncAncillaryFrameId>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
	ISP_SVC_Misc_IncAncillaryFrameId(hIsp);
34005c5e:	f000 bc63 	b.w	34006528 <ISP_SVC_Misc_IncAncillaryFrameId>

34005c62 <ISP_IncDumpFrameId>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
  ISP_SVC_Misc_IncDumpFrameId(hIsp);
34005c62:	f000 bc65 	b.w	34006530 <ISP_SVC_Misc_IncDumpFrameId>
	...

34005c68 <GetAvgStats>:

  return (int32_t) Val;
}

static uint8_t GetAvgStats(ISP_HandleTypeDef *hIsp, ISP_SVC_StatLocation location, ISP_SVC_Component component, uint32_t accu)
{
34005c68:	b510      	push	{r4, lr}
  uint32_t nb_comp_pix, comp_divider;

  /* Number of pixels computed from Stat Area and considering decimation */
  nb_comp_pix = hIsp->statArea.XSize * hIsp->statArea.YSize;
34005c6a:	e9d0 4004 	ldrd	r4, r0, [r0, #16]
34005c6e:	4360      	muls	r0, r4
  nb_comp_pix /= ISP_DecimationValue.factor * ISP_DecimationValue.factor;
34005c70:	4c0d      	ldr	r4, [pc, #52]	@ (34005ca8 <GetAvgStats+0x40>)

  if (location == ISP_STAT_LOC_DOWN)
34005c72:	2902      	cmp	r1, #2
  nb_comp_pix /= ISP_DecimationValue.factor * ISP_DecimationValue.factor;
34005c74:	7824      	ldrb	r4, [r4, #0]
34005c76:	fb04 f404 	mul.w	r4, r4, r4
34005c7a:	fbb0 f0f4 	udiv	r0, r0, r4
  if (location == ISP_STAT_LOC_DOWN)
34005c7e:	d010      	beq.n	34005ca2 <GetAvgStats+0x3a>
  }
  else
  {
    /* Only raw bayer sensor expected */
    /* raw bayer: RGB component not present for all pixels */
    comp_divider = (component == ISP_GREEN) ? 2 : 4;
34005c80:	2a01      	cmp	r2, #1
34005c82:	bf14      	ite	ne
34005c84:	2204      	movne	r2, #4
34005c86:	2202      	moveq	r2, #2

  /* Number of pixels per component */
  nb_comp_pix /= comp_divider;

  /* Compute average (rounding to closest integer) */
  if (nb_comp_pix == 0)
34005c88:	4282      	cmp	r2, r0
  nb_comp_pix /= comp_divider;
34005c8a:	bf9f      	itttt	ls
34005c8c:	fbb0 f0f2 	udivls	r0, r0, r2
  {
    return 0;
  }

  return (uint8_t)(((accu * 256) + (nb_comp_pix / 2)) / nb_comp_pix);
34005c90:	0842      	lsrls	r2, r0, #1
34005c92:	eb02 2303 	addls.w	r3, r2, r3, lsl #8
34005c96:	fbb3 f0f0 	udivls	r0, r3, r0
    return 0;
34005c9a:	bf8c      	ite	hi
34005c9c:	2000      	movhi	r0, #0
  return (uint8_t)(((accu * 256) + (nb_comp_pix / 2)) / nb_comp_pix);
34005c9e:	b2c0      	uxtbls	r0, r0
}
34005ca0:	bd10      	pop	{r4, pc}
    comp_divider = 1;
34005ca2:	2201      	movs	r2, #1
34005ca4:	e7f0      	b.n	34005c88 <GetAvgStats+0x20>
34005ca6:	bf00      	nop
34005ca8:	340cc726 	.word	0x340cc726

34005cac <SetStatConfig>:
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
  }
}

static void SetStatConfig(DCMIPP_StatisticExtractionConfTypeDef *statConf, const DCMIPP_StatisticExtractionConfTypeDef *refConfig)
{
34005cac:	b5f0      	push	{r4, r5, r6, r7, lr}
34005cae:	460b      	mov	r3, r1
34005cb0:	4606      	mov	r6, r0
  for (int i = 0; i < 3; i++)
34005cb2:	2400      	movs	r4, #0
  {
    statConf[i] = *refConfig;
34005cb4:	270c      	movs	r7, #12
34005cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
34005cba:	fb07 6504 	mla	r5, r7, r4, r6
  for (int i = 0; i < 3; i++)
34005cbe:	3401      	adds	r4, #1
34005cc0:	2c03      	cmp	r4, #3
    statConf[i] = *refConfig;
34005cc2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  for (int i = 0; i < 3; i++)
34005cc6:	d1f6      	bne.n	34005cb6 <SetStatConfig+0xa>
  }
}
34005cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

34005cca <ReadStatHistogram>:
{
34005cca:	b570      	push	{r4, r5, r6, lr}
34005ccc:	4606      	mov	r6, r0
34005cce:	460d      	mov	r5, r1
  for (uint8_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005cd0:	2401      	movs	r4, #1
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
34005cd2:	4622      	mov	r2, r4
  for (uint8_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005cd4:	3401      	adds	r4, #1
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
34005cd6:	462b      	mov	r3, r5
34005cd8:	2101      	movs	r1, #1
34005cda:	6830      	ldr	r0, [r6, #0]
  for (uint8_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005cdc:	b2e4      	uxtb	r4, r4
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
34005cde:	f00b ffdd 	bl	34011c9c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
  for (uint8_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005ce2:	2c04      	cmp	r4, #4
34005ce4:	f105 0504 	add.w	r5, r5, #4
34005ce8:	d1f3      	bne.n	34005cd2 <ReadStatHistogram+0x8>
}
34005cea:	bd70      	pop	{r4, r5, r6, pc}
34005cec:	0000      	movs	r0, r0
	...

34005cf0 <LuminanceFromRGB>:
  }
  return stage;
}

uint8_t LuminanceFromRGB(uint8_t r, uint8_t g, uint8_t b)
{
34005cf0:	ee07 1a10 	vmov	s14, r1
34005cf4:	ee05 0a10 	vmov	s10, r0
  /* Compute luminance from RGB components (BT.601) */
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
34005cf8:	ed9f 4b0f 	vldr	d4, [pc, #60]	@ 34005d38 <LuminanceFromRGB+0x48>
34005cfc:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
{
34005d00:	ee06 2a10 	vmov	s12, r2
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
34005d04:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
34005d08:	ee27 7b04 	vmul.f64	d7, d7, d4
34005d0c:	ed9f 4b0c 	vldr	d4, [pc, #48]	@ 34005d40 <LuminanceFromRGB+0x50>
34005d10:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
34005d14:	eea5 7b04 	vfma.f64	d7, d5, d4
34005d18:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 34005d48 <LuminanceFromRGB+0x58>
34005d1c:	eea6 7b05 	vfma.f64	d7, d6, d5
34005d20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
{
34005d24:	b082      	sub	sp, #8
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
34005d26:	edcd 7a01 	vstr	s15, [sp, #4]
}
34005d2a:	f89d 0004 	ldrb.w	r0, [sp, #4]
34005d2e:	b002      	add	sp, #8
34005d30:	4770      	bx	lr
34005d32:	bf00      	nop
34005d34:	f3af 8000 	nop.w
34005d38:	39581062 	.word	0x39581062
34005d3c:	3fe2c8b4 	.word	0x3fe2c8b4
34005d40:	e5604189 	.word	0xe5604189
34005d44:	3fd322d0 	.word	0x3fd322d0
34005d48:	9fbe76c9 	.word	0x9fbe76c9
34005d4c:	3fbd2f1a 	.word	0x3fbd2f1a

34005d50 <ISP_SVC_ISP_SetDemosaicing>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the demosaicing configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDemosaicing(ISP_HandleTypeDef *hIsp, ISP_DemosaicingTypeDef *pConfig)
{
34005d50:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_RawBayer2RGBConfTypeDef rawBayerCfg;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005d52:	4604      	mov	r4, r0
{
34005d54:	b087      	sub	sp, #28
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005d56:	2800      	cmp	r0, #0
34005d58:	d037      	beq.n	34005dca <ISP_SVC_ISP_SetDemosaicing+0x7a>
34005d5a:	2900      	cmp	r1, #0
34005d5c:	d035      	beq.n	34005dca <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34005d5e:	788f      	ldrb	r7, [r1, #2]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005d60:	2f07      	cmp	r7, #7
34005d62:	d832      	bhi.n	34005dca <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34005d64:	78ce      	ldrb	r6, [r1, #3]
34005d66:	2e07      	cmp	r6, #7
34005d68:	d82f      	bhi.n	34005dca <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
34005d6a:	790d      	ldrb	r5, [r1, #4]
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34005d6c:	2d07      	cmp	r5, #7
34005d6e:	d82c      	bhi.n	34005dca <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
34005d70:	7948      	ldrb	r0, [r1, #5]
34005d72:	2807      	cmp	r0, #7
34005d74:	d829      	bhi.n	34005dca <ISP_SVC_ISP_SetDemosaicing+0x7a>
  {
    return ISP_ERR_DEMOSAICING_EINVAL;
  }

  /* Do not enable demosaicing if the camera sensor is a monochrome sensor */
  if ((pConfig->enable == 0) || (pConfig->type == ISP_DEMOS_TYPE_MONO))
34005d76:	780b      	ldrb	r3, [r1, #0]
34005d78:	b113      	cbz	r3, 34005d80 <ISP_SVC_ISP_SetDemosaicing+0x30>
34005d7a:	784a      	ldrb	r2, [r1, #1]
34005d7c:	2a04      	cmp	r2, #4
34005d7e:	d107      	bne.n	34005d90 <ISP_SVC_ISP_SetDemosaicing+0x40>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
34005d80:	2101      	movs	r1, #1
34005d82:	6820      	ldr	r0, [r4, #0]
34005d84:	f00b f8bc 	bl	34010f00 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34005d88:	b100      	cbz	r0, 34005d8c <ISP_SVC_ISP_SetDemosaicing+0x3c>
  {
    return ISP_ERR_DEMOSAICING_HAL;
34005d8a:	200b      	movs	r0, #11
  }

  return ISP_OK;
}
34005d8c:	b007      	add	sp, #28
34005d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(pConfig->type)
34005d90:	2a02      	cmp	r2, #2
34005d92:	d018      	beq.n	34005dc6 <ISP_SVC_ISP_SetDemosaicing+0x76>
34005d94:	1e51      	subs	r1, r2, #1
34005d96:	424b      	negs	r3, r1
34005d98:	414b      	adcs	r3, r1
34005d9a:	2a03      	cmp	r2, #3
34005d9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
34005da0:	bf08      	it	eq
34005da2:	2306      	moveq	r3, #6
    rawBayerCfg.EdgeStrength = (uint32_t) pConfig->edge;
34005da4:	9005      	str	r0, [sp, #20]
    halStatus = HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &rawBayerCfg);
34005da6:	2101      	movs	r1, #1
34005da8:	6820      	ldr	r0, [r4, #0]
34005daa:	aa01      	add	r2, sp, #4
    rawBayerCfg.PeakStrength = (uint32_t) pConfig->peak;
34005dac:	e9cd 3703 	strd	r3, r7, [sp, #12]
    rawBayerCfg.HLineStrength = (uint32_t) pConfig->lineH;
34005db0:	e9cd 6501 	strd	r6, r5, [sp, #4]
    halStatus = HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &rawBayerCfg);
34005db4:	f00b f832 	bl	34010e1c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>
    if (halStatus == HAL_OK)
34005db8:	2800      	cmp	r0, #0
34005dba:	d1e6      	bne.n	34005d8a <ISP_SVC_ISP_SetDemosaicing+0x3a>
      halStatus = HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
34005dbc:	2101      	movs	r1, #1
34005dbe:	6820      	ldr	r0, [r4, #0]
34005dc0:	f00b f886 	bl	34010ed0 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>
34005dc4:	e7e0      	b.n	34005d88 <ISP_SVC_ISP_SetDemosaicing+0x38>
    switch(pConfig->type)
34005dc6:	2304      	movs	r3, #4
34005dc8:	e7ec      	b.n	34005da4 <ISP_SVC_ISP_SetDemosaicing+0x54>
    return ISP_ERR_DEMOSAICING_EINVAL;
34005dca:	200a      	movs	r0, #10
34005dcc:	e7de      	b.n	34005d8c <ISP_SVC_ISP_SetDemosaicing+0x3c>

34005dce <ISP_SVC_ISP_SetStatRemoval>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Stat Removal configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatRemoval(ISP_HandleTypeDef *hIsp, ISP_StatRemovalTypeDef *pConfig)
{
34005dce:	b510      	push	{r4, lr}
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005dd0:	4604      	mov	r4, r0
34005dd2:	b1d8      	cbz	r0, 34005e0c <ISP_SVC_ISP_SetStatRemoval+0x3e>
34005dd4:	b1d1      	cbz	r1, 34005e0c <ISP_SVC_ISP_SetStatRemoval+0x3e>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
34005dd6:	684a      	ldr	r2, [r1, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005dd8:	2a07      	cmp	r2, #7
34005dda:	d817      	bhi.n	34005e0c <ISP_SVC_ISP_SetStatRemoval+0x3e>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
34005ddc:	f640 70fe 	movw	r0, #4094	@ 0xffe
34005de0:	688b      	ldr	r3, [r1, #8]
34005de2:	4283      	cmp	r3, r0
34005de4:	d812      	bhi.n	34005e0c <ISP_SVC_ISP_SetStatRemoval+0x3e>
  {
    return ISP_ERR_STATREMOVAL_EINVAL;
  }

  if (pConfig->enable == 0)
34005de6:	7809      	ldrb	r1, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34005de8:	6820      	ldr	r0, [r4, #0]
  if (pConfig->enable == 0)
34005dea:	b921      	cbnz	r1, 34005df6 <ISP_SVC_ISP_SetStatRemoval+0x28>
    halStatus = HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34005dec:	2101      	movs	r1, #1
34005dee:	f00b f8db 	bl	34010fa8 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34005df2:	b128      	cbz	r0, 34005e00 <ISP_SVC_ISP_SetStatRemoval+0x32>
34005df4:	e003      	b.n	34005dfe <ISP_SVC_ISP_SetStatRemoval+0x30>
    halStatus = HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->nbHeadLines, pConfig->nbValidLines);
34005df6:	2101      	movs	r1, #1
34005df8:	f00b f89a 	bl	34010f30 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>
    if (halStatus == HAL_OK)
34005dfc:	b108      	cbz	r0, 34005e02 <ISP_SVC_ISP_SetStatRemoval+0x34>
  {
    return ISP_ERR_STATREMOVAL_HAL;
34005dfe:	2015      	movs	r0, #21
  }

  return ISP_OK;
}
34005e00:	bd10      	pop	{r4, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34005e02:	2101      	movs	r1, #1
34005e04:	6820      	ldr	r0, [r4, #0]
34005e06:	f00b f8c1 	bl	34010f8c <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>
34005e0a:	e7f2      	b.n	34005df2 <ISP_SVC_ISP_SetStatRemoval+0x24>
    return ISP_ERR_STATREMOVAL_EINVAL;
34005e0c:	2014      	movs	r0, #20
34005e0e:	e7f7      	b.n	34005e00 <ISP_SVC_ISP_SetStatRemoval+0x32>

34005e10 <ISP_SVC_ISP_SetDecimation>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the decimation configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDecimation(ISP_HandleTypeDef *hIsp, ISP_DecimationTypeDef *pConfig)
{
34005e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
34005e12:	460c      	mov	r4, r1
  DCMIPP_DecimationConfTypeDef decimationCfg;
  ISP_StatusTypeDef ret = ISP_OK;

  /* Check handles validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005e14:	4605      	mov	r5, r0
34005e16:	b350      	cbz	r0, 34005e6e <ISP_SVC_ISP_SetDecimation+0x5e>
34005e18:	b349      	cbz	r1, 34005e6e <ISP_SVC_ISP_SetDecimation+0x5e>
  {
    return ISP_ERR_DECIMATION_EINVAL;
  }

  switch (pConfig->factor)
34005e1a:	780b      	ldrb	r3, [r1, #0]
34005e1c:	3b01      	subs	r3, #1
34005e1e:	2b07      	cmp	r3, #7
34005e20:	d825      	bhi.n	34005e6e <ISP_SVC_ISP_SetDecimation+0x5e>
34005e22:	e8df f003 	tbb	[pc, r3]
34005e26:	0417      	.short	0x0417
34005e28:	24241124 	.word	0x24241124
34005e2c:	1424      	.short	0x1424
34005e2e:	2308      	movs	r3, #8
34005e30:	2202      	movs	r2, #2
  {
  case ISP_DECIM_FACTOR_1:
    decimationCfg.VRatio = DCMIPP_VDEC_ALL;
    decimationCfg.HRatio = DCMIPP_HDEC_ALL;
34005e32:	e9cd 3200 	strd	r3, r2, [sp]

  default:
    return ISP_ERR_DECIMATION_EINVAL;
  }

  if (HAL_DCMIPP_PIPE_SetISPDecimationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &decimationCfg) != HAL_OK)
34005e36:	2101      	movs	r1, #1
34005e38:	466a      	mov	r2, sp
34005e3a:	6828      	ldr	r0, [r5, #0]
34005e3c:	f00a fde6 	bl	34010a0c <HAL_DCMIPP_PIPE_SetISPDecimationConfig>
34005e40:	b158      	cbz	r0, 34005e5a <ISP_SVC_ISP_SetDecimation+0x4a>
  {
    return ISP_ERR_DECIMATION_HAL;
34005e42:	201f      	movs	r0, #31

  /* Save decimation value */
  ISP_DecimationValue.factor = pConfig->factor;

  return ret;
}
34005e44:	b003      	add	sp, #12
34005e46:	bd30      	pop	{r4, r5, pc}
    break;
34005e48:	2310      	movs	r3, #16
34005e4a:	2204      	movs	r2, #4
34005e4c:	e7f1      	b.n	34005e32 <ISP_SVC_ISP_SetDecimation+0x22>
    break;
34005e4e:	2318      	movs	r3, #24
34005e50:	2206      	movs	r2, #6
34005e52:	e7ee      	b.n	34005e32 <ISP_SVC_ISP_SetDecimation+0x22>
  switch (pConfig->factor)
34005e54:	2300      	movs	r3, #0
34005e56:	461a      	mov	r2, r3
34005e58:	e7eb      	b.n	34005e32 <ISP_SVC_ISP_SetDecimation+0x22>
  if (HAL_DCMIPP_PIPE_EnableISPDecimation(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34005e5a:	2101      	movs	r1, #1
34005e5c:	6828      	ldr	r0, [r5, #0]
34005e5e:	f00a fe13 	bl	34010a88 <HAL_DCMIPP_PIPE_EnableISPDecimation>
34005e62:	2800      	cmp	r0, #0
34005e64:	d1ed      	bne.n	34005e42 <ISP_SVC_ISP_SetDecimation+0x32>
  ISP_DecimationValue.factor = pConfig->factor;
34005e66:	7822      	ldrb	r2, [r4, #0]
34005e68:	4b02      	ldr	r3, [pc, #8]	@ (34005e74 <ISP_SVC_ISP_SetDecimation+0x64>)
34005e6a:	701a      	strb	r2, [r3, #0]
  return ret;
34005e6c:	e7ea      	b.n	34005e44 <ISP_SVC_ISP_SetDecimation+0x34>
  switch (pConfig->factor)
34005e6e:	201e      	movs	r0, #30
34005e70:	e7e8      	b.n	34005e44 <ISP_SVC_ISP_SetDecimation+0x34>
34005e72:	bf00      	nop
34005e74:	340cc726 	.word	0x340cc726

34005e78 <ISP_SVC_ISP_SetContrast>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the contrast configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetContrast(ISP_HandleTypeDef *hIsp, ISP_ContrastTypeDef *pConfig)
{
34005e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_ContrastConfTypeDef contrast;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005e7c:	4605      	mov	r5, r0
{
34005e7e:	b085      	sub	sp, #20
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005e80:	2800      	cmp	r0, #0
34005e82:	d071      	beq.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
34005e84:	2900      	cmp	r1, #0
34005e86:	d06f      	beq.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005e88:	684b      	ldr	r3, [r1, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005e8a:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34005e8e:	d86b      	bhi.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005e90:	f8d1 9008 	ldr.w	r9, [r1, #8]
34005e94:	f5b9 7fc5 	cmp.w	r9, #394	@ 0x18a
34005e98:	d866      	bhi.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005e9a:	f8d1 800c 	ldr.w	r8, [r1, #12]
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005e9e:	f5b8 7fc5 	cmp.w	r8, #394	@ 0x18a
34005ea2:	d861      	bhi.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005ea4:	f8d1 e010 	ldr.w	lr, [r1, #16]
34005ea8:	f5be 7fc5 	cmp.w	lr, #394	@ 0x18a
34005eac:	d85c      	bhi.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005eae:	f8d1 c014 	ldr.w	ip, [r1, #20]
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005eb2:	f5bc 7fc5 	cmp.w	ip, #394	@ 0x18a
34005eb6:	d857      	bhi.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005eb8:	698f      	ldr	r7, [r1, #24]
34005eba:	f5b7 7fc5 	cmp.w	r7, #394	@ 0x18a
34005ebe:	d853      	bhi.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005ec0:	69ce      	ldr	r6, [r1, #28]
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005ec2:	f5b6 7fc5 	cmp.w	r6, #394	@ 0x18a
34005ec6:	d84f      	bhi.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005ec8:	6a0c      	ldr	r4, [r1, #32]
34005eca:	f5b4 7fc5 	cmp.w	r4, #394	@ 0x18a
34005ece:	d84b      	bhi.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_256 > ISP_CONTAST_LUMCOEFF_MAX))
34005ed0:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005ed2:	f5b2 7fc5 	cmp.w	r2, #394	@ 0x18a
34005ed6:	d847      	bhi.n	34005f68 <ISP_SVC_ISP_SetContrast+0xf0>
  {
    return ISP_ERR_CONTRAST_EINVAL;
  }

  if (pConfig->enable == 0)
34005ed8:	7809      	ldrb	r1, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
34005eda:	6800      	ldr	r0, [r0, #0]
  if (pConfig->enable == 0)
34005edc:	b921      	cbnz	r1, 34005ee8 <ISP_SVC_ISP_SetContrast+0x70>
    halStatus = HAL_DCMIPP_PIPE_DisableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
34005ede:	2101      	movs	r1, #1
34005ee0:	f00b fd36 	bl	34011950 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34005ee4:	b3c0      	cbz	r0, 34005f58 <ISP_SVC_ISP_SetContrast+0xe0>
34005ee6:	e036      	b.n	34005f56 <ISP_SVC_ISP_SetContrast+0xde>
    contrast.LUM_0 = (uint8_t)((pConfig->coeff.LUM_0 * 16) / 100);
34005ee8:	0119      	lsls	r1, r3, #4
34005eea:	2364      	movs	r3, #100	@ 0x64
    contrast.LUM_256 = (uint8_t)((pConfig->coeff.LUM_256 * 16) / 100);
34005eec:	0112      	lsls	r2, r2, #4
    contrast.LUM_0 = (uint8_t)((pConfig->coeff.LUM_0 * 16) / 100);
34005eee:	fbb1 f1f3 	udiv	r1, r1, r3
    contrast.LUM_256 = (uint8_t)((pConfig->coeff.LUM_256 * 16) / 100);
34005ef2:	fbb2 f2f3 	udiv	r2, r2, r3
    contrast.LUM_32 = (uint8_t)((pConfig->coeff.LUM_32 * 16) / 100);
34005ef6:	ea4f 1909 	mov.w	r9, r9, lsl #4
    contrast.LUM_64 = (uint8_t)((pConfig->coeff.LUM_64 * 16) / 100);
34005efa:	ea4f 1808 	mov.w	r8, r8, lsl #4
    contrast.LUM_96 = (uint8_t)((pConfig->coeff.LUM_96 * 16) / 100);
34005efe:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    contrast.LUM_128 = (uint8_t)((pConfig->coeff.LUM_128 * 16) / 100);
34005f02:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    contrast.LUM_160 = (uint8_t)((pConfig->coeff.LUM_160 * 16) / 100);
34005f06:	013f      	lsls	r7, r7, #4
    contrast.LUM_192 = (uint8_t)((pConfig->coeff.LUM_192 * 16) / 100);
34005f08:	0136      	lsls	r6, r6, #4
    contrast.LUM_224 = (uint8_t)((pConfig->coeff.LUM_224 * 16) / 100);
34005f0a:	0124      	lsls	r4, r4, #4
    contrast.LUM_32 = (uint8_t)((pConfig->coeff.LUM_32 * 16) / 100);
34005f0c:	fbb9 f9f3 	udiv	r9, r9, r3
    contrast.LUM_64 = (uint8_t)((pConfig->coeff.LUM_64 * 16) / 100);
34005f10:	fbb8 f8f3 	udiv	r8, r8, r3
    contrast.LUM_96 = (uint8_t)((pConfig->coeff.LUM_96 * 16) / 100);
34005f14:	fbbe fef3 	udiv	lr, lr, r3
    contrast.LUM_128 = (uint8_t)((pConfig->coeff.LUM_128 * 16) / 100);
34005f18:	fbbc fcf3 	udiv	ip, ip, r3
    contrast.LUM_160 = (uint8_t)((pConfig->coeff.LUM_160 * 16) / 100);
34005f1c:	fbb7 f7f3 	udiv	r7, r7, r3
    contrast.LUM_192 = (uint8_t)((pConfig->coeff.LUM_192 * 16) / 100);
34005f20:	fbb6 f6f3 	udiv	r6, r6, r3
    contrast.LUM_224 = (uint8_t)((pConfig->coeff.LUM_224 * 16) / 100);
34005f24:	fbb4 f4f3 	udiv	r4, r4, r3
    contrast.LUM_0 = (uint8_t)((pConfig->coeff.LUM_0 * 16) / 100);
34005f28:	f88d 1004 	strb.w	r1, [sp, #4]
    contrast.LUM_256 = (uint8_t)((pConfig->coeff.LUM_256 * 16) / 100);
34005f2c:	f88d 200c 	strb.w	r2, [sp, #12]
    halStatus = HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &contrast);
34005f30:	2101      	movs	r1, #1
34005f32:	aa01      	add	r2, sp, #4
    contrast.LUM_32 = (uint8_t)((pConfig->coeff.LUM_32 * 16) / 100);
34005f34:	f88d 9005 	strb.w	r9, [sp, #5]
    contrast.LUM_64 = (uint8_t)((pConfig->coeff.LUM_64 * 16) / 100);
34005f38:	f88d 8006 	strb.w	r8, [sp, #6]
    contrast.LUM_96 = (uint8_t)((pConfig->coeff.LUM_96 * 16) / 100);
34005f3c:	f88d e007 	strb.w	lr, [sp, #7]
    contrast.LUM_128 = (uint8_t)((pConfig->coeff.LUM_128 * 16) / 100);
34005f40:	f88d c008 	strb.w	ip, [sp, #8]
    contrast.LUM_160 = (uint8_t)((pConfig->coeff.LUM_160 * 16) / 100);
34005f44:	f88d 7009 	strb.w	r7, [sp, #9]
    contrast.LUM_192 = (uint8_t)((pConfig->coeff.LUM_192 * 16) / 100);
34005f48:	f88d 600a 	strb.w	r6, [sp, #10]
    contrast.LUM_224 = (uint8_t)((pConfig->coeff.LUM_224 * 16) / 100);
34005f4c:	f88d 400b 	strb.w	r4, [sp, #11]
    halStatus = HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &contrast);
34005f50:	f00b fc64 	bl	3401181c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>
    if (halStatus == HAL_OK)
34005f54:	b118      	cbz	r0, 34005f5e <ISP_SVC_ISP_SetContrast+0xe6>
  {
    return ISP_ERR_CONTRAST_HAL;
34005f56:	2029      	movs	r0, #41	@ 0x29
  }

  return ISP_OK;
}
34005f58:	b005      	add	sp, #20
34005f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
34005f5e:	2101      	movs	r1, #1
34005f60:	6828      	ldr	r0, [r5, #0]
34005f62:	f00b fcdd 	bl	34011920 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>
34005f66:	e7bd      	b.n	34005ee4 <ISP_SVC_ISP_SetContrast+0x6c>
    return ISP_ERR_CONTRAST_EINVAL;
34005f68:	2028      	movs	r0, #40	@ 0x28
34005f6a:	e7f5      	b.n	34005f58 <ISP_SVC_ISP_SetContrast+0xe0>

34005f6c <ISP_SVC_ISP_SetStatArea>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to statistic area used by the IQ algorithms
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatArea(ISP_HandleTypeDef *hIsp, ISP_StatAreaTypeDef *pConfig)
{
34005f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
34005f6e:	460e      	mov	r6, r1
  HAL_StatusTypeDef halStatus;
  DCMIPP_StatisticExtractionAreaConfTypeDef currentStatAreaCfg;
  ISP_StatusTypeDef ret = ISP_OK;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005f70:	4605      	mov	r5, r0
{
34005f72:	b085      	sub	sp, #20
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005f74:	2800      	cmp	r0, #0
34005f76:	d041      	beq.n	34005ffc <ISP_SVC_ISP_SetStatArea+0x90>
34005f78:	2900      	cmp	r1, #0
34005f7a:	d03f      	beq.n	34005ffc <ISP_SVC_ISP_SetStatArea+0x90>
34005f7c:	f640 72fe 	movw	r2, #4094	@ 0xffe
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
34005f80:	6808      	ldr	r0, [r1, #0]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005f82:	4290      	cmp	r0, r2
34005f84:	d83a      	bhi.n	34005ffc <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
34005f86:	6849      	ldr	r1, [r1, #4]
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
34005f88:	4291      	cmp	r1, r2
34005f8a:	d837      	bhi.n	34005ffc <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
34005f8c:	68b3      	ldr	r3, [r6, #8]
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
34005f8e:	4293      	cmp	r3, r2
34005f90:	d834      	bhi.n	34005ffc <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
34005f92:	f640 74fa 	movw	r4, #4090	@ 0xffa
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
34005f96:	68f2      	ldr	r2, [r6, #12]
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
34005f98:	1f17      	subs	r7, r2, #4
34005f9a:	42a7      	cmp	r7, r4
34005f9c:	d82e      	bhi.n	34005ffc <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
34005f9e:	2b03      	cmp	r3, #3
34005fa0:	d92c      	bls.n	34005ffc <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->XSize < ISP_STATWINDOW_MIN) ||
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
34005fa2:	6f2f      	ldr	r7, [r5, #112]	@ 0x70
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
34005fa4:	18c4      	adds	r4, r0, r3
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
34005fa6:	42bc      	cmp	r4, r7
34005fa8:	d828      	bhi.n	34005ffc <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
34005faa:	6f6f      	ldr	r7, [r5, #116]	@ 0x74
      (pConfig->Y0 + pConfig->YSize > hIsp->sensorInfo.height))
34005fac:	188c      	adds	r4, r1, r2
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
34005fae:	42bc      	cmp	r4, r7
34005fb0:	d824      	bhi.n	34005ffc <ISP_SVC_ISP_SetStatArea+0x90>
  {
    return ISP_ERR_STATAREA_EINVAL;
  }

  /* Set coordinates in the 'decimated' referential */
  currentStatAreaCfg.HStart = pConfig->X0 / ISP_DecimationValue.factor;
34005fb2:	4c13      	ldr	r4, [pc, #76]	@ (34006000 <ISP_SVC_ISP_SetStatArea+0x94>)
34005fb4:	7824      	ldrb	r4, [r4, #0]
34005fb6:	fbb0 f0f4 	udiv	r0, r0, r4
  currentStatAreaCfg.VStart = pConfig->Y0 / ISP_DecimationValue.factor;
34005fba:	fbb1 f1f4 	udiv	r1, r1, r4
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
  currentStatAreaCfg.VSize = pConfig->YSize / ISP_DecimationValue.factor;
34005fbe:	fbb2 f2f4 	udiv	r2, r2, r4
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
34005fc2:	fbb3 f3f4 	udiv	r3, r3, r4
  currentStatAreaCfg.HStart = pConfig->X0 / ISP_DecimationValue.factor;
34005fc6:	9001      	str	r0, [sp, #4]
  currentStatAreaCfg.VStart = pConfig->Y0 / ISP_DecimationValue.factor;
34005fc8:	9100      	str	r1, [sp, #0]
  currentStatAreaCfg.VSize = pConfig->YSize / ISP_DecimationValue.factor;
34005fca:	9202      	str	r2, [sp, #8]

  if (HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1,
34005fcc:	2101      	movs	r1, #1
34005fce:	466a      	mov	r2, sp
34005fd0:	6828      	ldr	r0, [r5, #0]
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
34005fd2:	9303      	str	r3, [sp, #12]
  if (HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1,
34005fd4:	f00b fb08 	bl	340115e8 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>
34005fd8:	b118      	cbz	r0, 34005fe2 <ISP_SVC_ISP_SetStatArea+0x76>
                                                          &currentStatAreaCfg) != HAL_OK)
  {
    return ISP_ERR_STATAREA_HAL;
34005fda:	2433      	movs	r4, #51	@ 0x33

  /* Update internal state */
  hIsp->statArea = *pConfig;

  return ret;
}
34005fdc:	4620      	mov	r0, r4
34005fde:	b005      	add	sp, #20
34005fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    halStatus = HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1);
34005fe2:	2101      	movs	r1, #1
34005fe4:	6828      	ldr	r0, [r5, #0]
34005fe6:	f00b fb89 	bl	340116fc <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>
  if (halStatus != HAL_OK)
34005fea:	4604      	mov	r4, r0
34005fec:	2800      	cmp	r0, #0
34005fee:	d1f4      	bne.n	34005fda <ISP_SVC_ISP_SetStatArea+0x6e>
  hIsp->statArea = *pConfig;
34005ff0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
34005ff4:	3508      	adds	r5, #8
34005ff6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  return ret;
34005ffa:	e7ef      	b.n	34005fdc <ISP_SVC_ISP_SetStatArea+0x70>
    return ISP_ERR_STATAREA_EINVAL;
34005ffc:	2432      	movs	r4, #50	@ 0x32
34005ffe:	e7ed      	b.n	34005fdc <ISP_SVC_ISP_SetStatArea+0x70>
34006000:	340cc726 	.word	0x340cc726

34006004 <ISP_SVC_ISP_SetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
34006004:	b510      	push	{r4, lr}
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) || (pConfig->strength > ISP_BADPIXEL_STRENGTH_MAX))
34006006:	4604      	mov	r4, r0
34006008:	b1a8      	cbz	r0, 34006036 <ISP_SVC_ISP_SetBadPixel+0x32>
3400600a:	b1a1      	cbz	r1, 34006036 <ISP_SVC_ISP_SetBadPixel+0x32>
3400600c:	784a      	ldrb	r2, [r1, #1]
3400600e:	2a07      	cmp	r2, #7
34006010:	d811      	bhi.n	34006036 <ISP_SVC_ISP_SetBadPixel+0x32>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
  }

  if (pConfig->enable == 0)
34006012:	780b      	ldrb	r3, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
34006014:	6800      	ldr	r0, [r0, #0]
34006016:	2101      	movs	r1, #1
  if (pConfig->enable == 0)
34006018:	b91b      	cbnz	r3, 34006022 <ISP_SVC_ISP_SetBadPixel+0x1e>
    halStatus = HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
3400601a:	f00b f813 	bl	34011044 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>
    }

    halStatus = HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
  }

  if (halStatus != HAL_OK)
3400601e:	b120      	cbz	r0, 3400602a <ISP_SVC_ISP_SetBadPixel+0x26>
34006020:	e002      	b.n	34006028 <ISP_SVC_ISP_SetBadPixel+0x24>
    halStatus = HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->strength);
34006022:	f00a ffcf 	bl	34010fc4 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>
    if (halStatus != HAL_OK)
34006026:	b108      	cbz	r0, 3400602c <ISP_SVC_ISP_SetBadPixel+0x28>
      return ISP_ERR_BADPIXEL_HAL;
34006028:	203d      	movs	r0, #61	@ 0x3d
  {
    return ISP_ERR_BADPIXEL_HAL;
  }

  return ISP_OK;
}
3400602a:	bd10      	pop	{r4, pc}
    halStatus = HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
3400602c:	2101      	movs	r1, #1
3400602e:	6820      	ldr	r0, [r4, #0]
34006030:	f00a fff0 	bl	34011014 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>
34006034:	e7f3      	b.n	3400601e <ISP_SVC_ISP_SetBadPixel+0x1a>
    return ISP_ERR_BADPIXEL_EINVAL;
34006036:	203c      	movs	r0, #60	@ 0x3c
34006038:	e7f7      	b.n	3400602a <ISP_SVC_ISP_SetBadPixel+0x26>

3400603a <ISP_SVC_ISP_GetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
3400603a:	b538      	push	{r3, r4, r5, lr}
3400603c:	460d      	mov	r5, r1
  HAL_StatusTypeDef halStatus;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3400603e:	4604      	mov	r4, r0
34006040:	b198      	cbz	r0, 3400606a <ISP_SVC_ISP_GetBadPixel+0x30>
34006042:	b191      	cbz	r1, 3400606a <ISP_SVC_ISP_GetBadPixel+0x30>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
  }

  pConfig->enable = (uint8_t) HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
34006044:	2101      	movs	r1, #1
34006046:	6800      	ldr	r0, [r0, #0]
34006048:	f00b f826 	bl	34011098 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>
3400604c:	7028      	strb	r0, [r5, #0]
  pConfig->strength = (uint8_t) HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1);
3400604e:	2101      	movs	r1, #1
34006050:	6820      	ldr	r0, [r4, #0]
34006052:	f00b f80f 	bl	34011074 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>
34006056:	7068      	strb	r0, [r5, #1]

  halStatus = HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter(hIsp->hDcmipp, DCMIPP_PIPE1, &pConfig->count);
34006058:	2101      	movs	r1, #1
3400605a:	6820      	ldr	r0, [r4, #0]
3400605c:	1d2a      	adds	r2, r5, #4
3400605e:	f00b f841 	bl	340110e4 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>

  if (halStatus != HAL_OK)
  {
    return ISP_ERR_BADPIXEL_HAL;
34006062:	2800      	cmp	r0, #0
34006064:	bf18      	it	ne
34006066:	203d      	movne	r0, #61	@ 0x3d
  }

  return ISP_OK;
}
34006068:	bd38      	pop	{r3, r4, r5, pc}
    return ISP_ERR_BADPIXEL_EINVAL;
3400606a:	203c      	movs	r0, #60	@ 0x3c
3400606c:	e7fc      	b.n	34006068 <ISP_SVC_ISP_GetBadPixel+0x2e>

3400606e <ISP_SVC_ISP_SetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
3400606e:	b513      	push	{r0, r1, r4, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34006070:	4604      	mov	r4, r0
34006072:	b1f0      	cbz	r0, 340060b2 <ISP_SVC_ISP_SetBlackLevel+0x44>
34006074:	b1e9      	cbz	r1, 340060b2 <ISP_SVC_ISP_SetBlackLevel+0x44>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
  }

  if (pConfig->enable == 0)
34006076:	780b      	ldrb	r3, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34006078:	6800      	ldr	r0, [r0, #0]
  if (pConfig->enable == 0)
3400607a:	b923      	cbnz	r3, 34006086 <ISP_SVC_ISP_SetBlackLevel+0x18>
    halStatus = HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
3400607c:	2101      	movs	r1, #1
3400607e:	f00b f9f9 	bl	34011474 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34006082:	b178      	cbz	r0, 340060a4 <ISP_SVC_ISP_SetBlackLevel+0x36>
34006084:	e00d      	b.n	340060a2 <ISP_SVC_ISP_SetBlackLevel+0x34>
    blackLevelConfig.RedCompBlackLevel = pConfig->BLCR;
34006086:	784b      	ldrb	r3, [r1, #1]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
34006088:	aa01      	add	r2, sp, #4
    blackLevelConfig.RedCompBlackLevel = pConfig->BLCR;
3400608a:	f88d 3004 	strb.w	r3, [sp, #4]
    blackLevelConfig.GreenCompBlackLevel = pConfig->BLCG;
3400608e:	788b      	ldrb	r3, [r1, #2]
34006090:	f88d 3005 	strb.w	r3, [sp, #5]
    blackLevelConfig.BlueCompBlackLevel = pConfig->BLCB;
34006094:	78cb      	ldrb	r3, [r1, #3]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
34006096:	2101      	movs	r1, #1
    blackLevelConfig.BlueCompBlackLevel = pConfig->BLCB;
34006098:	f88d 3006 	strb.w	r3, [sp, #6]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
3400609c:	f00b f9b0 	bl	34011400 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>
    if (halStatus == HAL_OK)
340060a0:	b110      	cbz	r0, 340060a8 <ISP_SVC_ISP_SetBlackLevel+0x3a>
  {
    return ISP_ERR_BLACKLEVEL_HAL;
340060a2:	2047      	movs	r0, #71	@ 0x47
  }

  return ISP_OK;
}
340060a4:	b002      	add	sp, #8
340060a6:	bd10      	pop	{r4, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
340060a8:	2101      	movs	r1, #1
340060aa:	6820      	ldr	r0, [r4, #0]
340060ac:	f00b f9ca 	bl	34011444 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>
340060b0:	e7e7      	b.n	34006082 <ISP_SVC_ISP_SetBlackLevel+0x14>
    return ISP_ERR_BLACKLEVEL_EINVAL;
340060b2:	2046      	movs	r0, #70	@ 0x46
340060b4:	e7f6      	b.n	340060a4 <ISP_SVC_ISP_SetBlackLevel+0x36>

340060b6 <ISP_SVC_ISP_GetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
340060b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
340060b8:	460c      	mov	r4, r1
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340060ba:	4605      	mov	r5, r0
340060bc:	b1b0      	cbz	r0, 340060ec <ISP_SVC_ISP_GetBlackLevel+0x36>
340060be:	b1a9      	cbz	r1, 340060ec <ISP_SVC_ISP_GetBlackLevel+0x36>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
  }

  pConfig->enable = (uint8_t) HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
340060c0:	2101      	movs	r1, #1
340060c2:	6800      	ldr	r0, [r0, #0]
340060c4:	f00b fa04 	bl	340114d0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>
340060c8:	7020      	strb	r0, [r4, #0]

  HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
340060ca:	6828      	ldr	r0, [r5, #0]
340060cc:	2101      	movs	r1, #1
340060ce:	aa01      	add	r2, sp, #4
340060d0:	f00b f9e8 	bl	340114a4 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>

  pConfig->BLCR = blackLevelConfig.RedCompBlackLevel;
  pConfig->BLCG = blackLevelConfig.GreenCompBlackLevel;
  pConfig->BLCB = blackLevelConfig.BlueCompBlackLevel;

  return ISP_OK;
340060d4:	2000      	movs	r0, #0
  pConfig->BLCR = blackLevelConfig.RedCompBlackLevel;
340060d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
340060da:	7063      	strb	r3, [r4, #1]
  pConfig->BLCG = blackLevelConfig.GreenCompBlackLevel;
340060dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
340060e0:	70a3      	strb	r3, [r4, #2]
  pConfig->BLCB = blackLevelConfig.BlueCompBlackLevel;
340060e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
340060e6:	70e3      	strb	r3, [r4, #3]
}
340060e8:	b003      	add	sp, #12
340060ea:	bd30      	pop	{r4, r5, pc}
    return ISP_ERR_BLACKLEVEL_EINVAL;
340060ec:	2046      	movs	r0, #70	@ 0x46
340060ee:	e7fb      	b.n	340060e8 <ISP_SVC_ISP_GetBlackLevel+0x32>

340060f0 <ISP_SVC_ISP_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
340060f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_ExposureConfTypeDef exposureConfig;

  if ((hIsp == NULL) || (pConfig == NULL) ||
340060f4:	4605      	mov	r5, r0
340060f6:	2800      	cmp	r0, #0
340060f8:	f000 808b 	beq.w	34006212 <ISP_SVC_ISP_SetGain+0x122>
340060fc:	2900      	cmp	r1, #0
340060fe:	f000 8088 	beq.w	34006212 <ISP_SVC_ISP_SetGain+0x122>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
34006102:	684a      	ldr	r2, [r1, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34006104:	4b46      	ldr	r3, [pc, #280]	@ (34006220 <ISP_SVC_ISP_SetGain+0x130>)
34006106:	429a      	cmp	r2, r3
34006108:	f200 8083 	bhi.w	34006212 <ISP_SVC_ISP_SetGain+0x122>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
3400610c:	f8d1 8008 	ldr.w	r8, [r1, #8]
34006110:	4598      	cmp	r8, r3
34006112:	d87e      	bhi.n	34006212 <ISP_SVC_ISP_SetGain+0x122>
34006114:	68cf      	ldr	r7, [r1, #12]
34006116:	429f      	cmp	r7, r3
34006118:	d87b      	bhi.n	34006212 <ISP_SVC_ISP_SetGain+0x122>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
  }

  if (pConfig->enable == 0)
3400611a:	780b      	ldrb	r3, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
3400611c:	6806      	ldr	r6, [r0, #0]
  if (pConfig->enable == 0)
3400611e:	b933      	cbnz	r3, 3400612e <ISP_SVC_ISP_SetGain+0x3e>
    halStatus = HAL_DCMIPP_PIPE_DisableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
34006120:	2101      	movs	r1, #1
34006122:	4630      	mov	r0, r6
34006124:	f00b fb62 	bl	340117ec <HAL_DCMIPP_PIPE_DisableISPExposure>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34006128:	2800      	cmp	r0, #0
3400612a:	d05b      	beq.n	340061e4 <ISP_SVC_ISP_SetGain+0xf4>
3400612c:	e059      	b.n	340061e2 <ISP_SVC_ISP_SetGain+0xf2>
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
3400612e:	2400      	movs	r4, #0
34006130:	4610      	mov	r0, r2
34006132:	a339      	add	r3, pc, #228	@ (adr r3, 34006218 <ISP_SVC_ISP_SetGain+0x128>)
34006134:	e9d3 2300 	ldrd	r2, r3, [r3]
34006138:	4621      	mov	r1, r4
3400613a:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
3400613e:	f7fb fd11 	bl	34001b64 <__aeabi_uldivmod>
  while (Val >= 256)
34006142:	4623      	mov	r3, r4
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006144:	4682      	mov	sl, r0
34006146:	468b      	mov	fp, r1
  while (Val >= 256)
34006148:	4622      	mov	r2, r4
3400614a:	f5ba 7f80 	cmp.w	sl, #256	@ 0x100
3400614e:	f17b 0000 	sbcs.w	r0, fp, #0
34006152:	f103 0101 	add.w	r1, r3, #1
34006156:	d248      	bcs.n	340061ea <ISP_SVC_ISP_SetGain+0xfa>
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006158:	2400      	movs	r4, #0
  *pShift = 0;
3400615a:	2a00      	cmp	r2, #0
3400615c:	bf08      	it	eq
3400615e:	4613      	moveq	r3, r2
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006160:	4640      	mov	r0, r8
34006162:	4621      	mov	r1, r4
  *pShift = 0;
34006164:	f88d 3000 	strb.w	r3, [sp]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006168:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
3400616c:	a32a      	add	r3, pc, #168	@ (adr r3, 34006218 <ISP_SVC_ISP_SetGain+0x128>)
3400616e:	e9d3 2300 	ldrd	r2, r3, [r3]
  *pMultiplier = (uint8_t)Val;
34006172:	f88d a001 	strb.w	sl, [sp, #1]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006176:	f7fb fcf5 	bl	34001b64 <__aeabi_uldivmod>
  while (Val >= 256)
3400617a:	4623      	mov	r3, r4
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
3400617c:	4680      	mov	r8, r0
3400617e:	4689      	mov	r9, r1
  while (Val >= 256)
34006180:	4622      	mov	r2, r4
34006182:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
34006186:	f179 0000 	sbcs.w	r0, r9, #0
3400618a:	f103 0101 	add.w	r1, r3, #1
3400618e:	d231      	bcs.n	340061f4 <ISP_SVC_ISP_SetGain+0x104>
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006190:	2400      	movs	r4, #0
  *pShift = 0;
34006192:	2a00      	cmp	r2, #0
34006194:	bf08      	it	eq
34006196:	4613      	moveq	r3, r2
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006198:	4638      	mov	r0, r7
3400619a:	4621      	mov	r1, r4
  *pShift = 0;
3400619c:	f88d 3002 	strb.w	r3, [sp, #2]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
340061a0:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
340061a4:	a31c      	add	r3, pc, #112	@ (adr r3, 34006218 <ISP_SVC_ISP_SetGain+0x128>)
340061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  *pMultiplier = (uint8_t)Val;
340061aa:	f88d 8003 	strb.w	r8, [sp, #3]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
340061ae:	f7fb fcd9 	bl	34001b64 <__aeabi_uldivmod>
  while (Val >= 256)
340061b2:	4623      	mov	r3, r4
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
340061b4:	4680      	mov	r8, r0
340061b6:	4689      	mov	r9, r1
  while (Val >= 256)
340061b8:	4622      	mov	r2, r4
340061ba:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
340061be:	f179 0000 	sbcs.w	r0, r9, #0
340061c2:	f103 0101 	add.w	r1, r3, #1
340061c6:	d21a      	bcs.n	340061fe <ISP_SVC_ISP_SetGain+0x10e>
  *pShift = 0;
340061c8:	2a00      	cmp	r2, #0
340061ca:	bf08      	it	eq
340061cc:	4613      	moveq	r3, r2
    halStatus = HAL_DCMIPP_PIPE_SetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
340061ce:	2101      	movs	r1, #1
340061d0:	466a      	mov	r2, sp
340061d2:	4630      	mov	r0, r6
  *pShift = 0;
340061d4:	f88d 3004 	strb.w	r3, [sp, #4]
  *pMultiplier = (uint8_t)Val;
340061d8:	f88d 8005 	strb.w	r8, [sp, #5]
    halStatus = HAL_DCMIPP_PIPE_SetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
340061dc:	f00b faa6 	bl	3401172c <HAL_DCMIPP_PIPE_SetISPExposureConfig>
    if (halStatus == HAL_OK)
340061e0:	b190      	cbz	r0, 34006208 <ISP_SVC_ISP_SetGain+0x118>
  {
    return ISP_ERR_ISPGAIN_HAL;
340061e2:	2051      	movs	r0, #81	@ 0x51
  }

  return ISP_OK;
}
340061e4:	b003      	add	sp, #12
340061e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Val /= 2;
340061ea:	ea5a 0b5f 	orrs.w	fp, sl, pc, lsr #1
340061ee:	460b      	mov	r3, r1
340061f0:	2201      	movs	r2, #1
340061f2:	e7aa      	b.n	3400614a <ISP_SVC_ISP_SetGain+0x5a>
340061f4:	ea58 095f 	orrs.w	r9, r8, pc, lsr #1
340061f8:	460b      	mov	r3, r1
340061fa:	2201      	movs	r2, #1
340061fc:	e7c1      	b.n	34006182 <ISP_SVC_ISP_SetGain+0x92>
340061fe:	ea58 095f 	orrs.w	r9, r8, pc, lsr #1
34006202:	460b      	mov	r3, r1
34006204:	2201      	movs	r2, #1
34006206:	e7d8      	b.n	340061ba <ISP_SVC_ISP_SetGain+0xca>
      halStatus = HAL_DCMIPP_PIPE_EnableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
34006208:	2101      	movs	r1, #1
3400620a:	6828      	ldr	r0, [r5, #0]
3400620c:	f00b fad6 	bl	340117bc <HAL_DCMIPP_PIPE_EnableISPExposure>
34006210:	e78a      	b.n	34006128 <ISP_SVC_ISP_SetGain+0x38>
    return ISP_ERR_ISPGAIN_EINVAL;
34006212:	2050      	movs	r0, #80	@ 0x50
34006214:	e7e6      	b.n	340061e4 <ISP_SVC_ISP_SetGain+0xf4>
34006216:	bf00      	nop
34006218:	05f5e100 	.word	0x05f5e100
3400621c:	00000000 	.word	0x00000000
34006220:	5f5e1000 	.word	0x5f5e1000

34006224 <ISP_SVC_ISP_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
34006224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34006226:	460c      	mov	r4, r1
  DCMIPP_ExposureConfTypeDef exposureConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34006228:	4605      	mov	r5, r0
3400622a:	2800      	cmp	r0, #0
3400622c:	d03f      	beq.n	340062ae <ISP_SVC_ISP_GetGain+0x8a>
3400622e:	2900      	cmp	r1, #0
34006230:	d03d      	beq.n	340062ae <ISP_SVC_ISP_GetGain+0x8a>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
  }

  pConfig->enable = (uint8_t) HAL_DCMIPP_PIPE_IsEnabledISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
34006232:	2101      	movs	r1, #1
34006234:	6800      	ldr	r0, [r0, #0]
34006236:	f00b fe25 	bl	34011e84 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>
3400623a:	7020      	strb	r0, [r4, #0]
  HAL_DCMIPP_PIPE_GetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
3400623c:	6828      	ldr	r0, [r5, #0]
3400623e:	466a      	mov	r2, sp
34006240:	2101      	movs	r1, #1
34006242:	f00b fd5d 	bl	34011d00 <HAL_DCMIPP_PIPE_GetISPExposureConfig>
  uint64_t Val = (1 << Shift);
34006246:	2301      	movs	r3, #1
34006248:	f89d 1000 	ldrb.w	r1, [sp]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
3400624c:	f89d 2001 	ldrb.w	r2, [sp, #1]
  uint64_t Val = (1 << Shift);
34006250:	fa03 f101 	lsl.w	r1, r3, r1
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34006254:	fb81 1002 	smull	r1, r0, r1, r2
34006258:	4a16      	ldr	r2, [pc, #88]	@ (340062b4 <ISP_SVC_ISP_GetGain+0x90>)
3400625a:	fba1 1502 	umull	r1, r5, r1, r2
3400625e:	460e      	mov	r6, r1
34006260:	fb02 5700 	mla	r7, r2, r0, r5
34006264:	ea56 17df 	orrs.w	r7, r6, pc, lsr #7
  uint64_t Val = (1 << Shift);
34006268:	f89d 0002 	ldrb.w	r0, [sp, #2]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
3400626c:	f89d 1003 	ldrb.w	r1, [sp, #3]
  uint64_t Val = (1 << Shift);
34006270:	fa03 f000 	lsl.w	r0, r3, r0
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34006274:	fb80 0101 	smull	r0, r1, r0, r1
34006278:	fba0 0502 	umull	r0, r5, r0, r2
  return (uint32_t) Val;
3400627c:	6066      	str	r6, [r4, #4]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
3400627e:	4606      	mov	r6, r0
34006280:	fb02 5701 	mla	r7, r2, r1, r5
34006284:	ea56 17df 	orrs.w	r7, r6, pc, lsr #7
  uint64_t Val = (1 << Shift);
34006288:	f89d 1004 	ldrb.w	r1, [sp, #4]
  return (uint32_t) Val;
3400628c:	60a6      	str	r6, [r4, #8]
  uint64_t Val = (1 << Shift);
3400628e:	408b      	lsls	r3, r1
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34006290:	f89d 1005 	ldrb.w	r1, [sp, #5]
34006294:	fb83 3501 	smull	r3, r5, r3, r1
34006298:	fba3 3602 	umull	r3, r6, r3, r2
3400629c:	4618      	mov	r0, r3
3400629e:	fb02 6105 	mla	r1, r2, r5, r6
340062a2:	ea50 11df 	orrs.w	r1, r0, pc, lsr #7
  return (uint32_t) Val;
340062a6:	60e0      	str	r0, [r4, #12]

  pConfig->ispGainR = From_Shift_Multiplier(exposureConfig.ShiftRed, exposureConfig.MultiplierRed);
  pConfig->ispGainG = From_Shift_Multiplier(exposureConfig.ShiftGreen, exposureConfig.MultiplierGreen);
  pConfig->ispGainB = From_Shift_Multiplier(exposureConfig.ShiftBlue, exposureConfig.MultiplierBlue);

  return ISP_OK;
340062a8:	2000      	movs	r0, #0
}
340062aa:	b003      	add	sp, #12
340062ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ISP_ERR_ISPGAIN_EINVAL;
340062ae:	2050      	movs	r0, #80	@ 0x50
340062b0:	e7fb      	b.n	340062aa <ISP_SVC_ISP_GetGain+0x86>
340062b2:	bf00      	nop
340062b4:	05f5e100 	.word	0x05f5e100

340062b8 <ISP_SVC_ISP_SetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
340062b8:	b570      	push	{r4, r5, r6, lr}
340062ba:	4605      	mov	r5, r0
340062bc:	b088      	sub	sp, #32
340062be:	460c      	mov	r4, r1
  HAL_StatusTypeDef halStatus;
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;
  uint32_t i, j;

  memset(&colorConvConfig, 0, sizeof(colorConvConfig));
340062c0:	221a      	movs	r2, #26
340062c2:	2100      	movs	r1, #0
340062c4:	a801      	add	r0, sp, #4
340062c6:	f01b fa25 	bl	34021714 <memset>

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340062ca:	b16d      	cbz	r5, 340062e8 <ISP_SVC_ISP_SetColorConv+0x30>
340062cc:	b164      	cbz	r4, 340062e8 <ISP_SVC_ISP_SetColorConv+0x30>
340062ce:	4623      	mov	r3, r4

  for (i = 0; i < 3; i++)
  {
    for (j = 0; j < 3; j++)
    {
      if ((pConfig->coeff[i][j] > ISP_COLORCONV_MAX) || (pConfig->coeff[i][j] < -ISP_COLORCONV_MAX))
340062d0:	483a      	ldr	r0, [pc, #232]	@ (340063bc <ISP_SVC_ISP_SetColorConv+0x104>)
340062d2:	4a3b      	ldr	r2, [pc, #236]	@ (340063c0 <ISP_SVC_ISP_SetColorConv+0x108>)
340062d4:	f104 0624 	add.w	r6, r4, #36	@ 0x24
340062d8:	6859      	ldr	r1, [r3, #4]
340062da:	4401      	add	r1, r0
340062dc:	4291      	cmp	r1, r2
340062de:	d803      	bhi.n	340062e8 <ISP_SVC_ISP_SetColorConv+0x30>
340062e0:	6899      	ldr	r1, [r3, #8]
340062e2:	4401      	add	r1, r0
340062e4:	4291      	cmp	r1, r2
340062e6:	d901      	bls.n	340062ec <ISP_SVC_ISP_SetColorConv+0x34>
    return ISP_ERR_COLORCONV_EINVAL;
340062e8:	205a      	movs	r0, #90	@ 0x5a
340062ea:	e05f      	b.n	340063ac <ISP_SVC_ISP_SetColorConv+0xf4>
      if ((pConfig->coeff[i][j] > ISP_COLORCONV_MAX) || (pConfig->coeff[i][j] < -ISP_COLORCONV_MAX))
340062ec:	68d9      	ldr	r1, [r3, #12]
340062ee:	4401      	add	r1, r0
340062f0:	4291      	cmp	r1, r2
340062f2:	d8f9      	bhi.n	340062e8 <ISP_SVC_ISP_SetColorConv+0x30>
  for (i = 0; i < 3; i++)
340062f4:	330c      	adds	r3, #12
340062f6:	42b3      	cmp	r3, r6
340062f8:	d1ee      	bne.n	340062d8 <ISP_SVC_ISP_SetColorConv+0x20>
        return ISP_ERR_COLORCONV_EINVAL;
      }
    }
  }

  if (pConfig->enable == 0)
340062fa:	7823      	ldrb	r3, [r4, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
340062fc:	682e      	ldr	r6, [r5, #0]
  if (pConfig->enable == 0)
340062fe:	b933      	cbnz	r3, 3400630e <ISP_SVC_ISP_SetColorConv+0x56>
    halStatus = HAL_DCMIPP_PIPE_DisableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
34006300:	2101      	movs	r1, #1
34006302:	4630      	mov	r0, r6
34006304:	f00b f864 	bl	340113d0 <HAL_DCMIPP_PIPE_DisableISPColorConversion>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34006308:	2800      	cmp	r0, #0
3400630a:	d04f      	beq.n	340063ac <ISP_SVC_ISP_SetColorConv+0xf4>
3400630c:	e04d      	b.n	340063aa <ISP_SVC_ISP_SetColorConv+0xf2>
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400630e:	6860      	ldr	r0, [r4, #4]
34006310:	2300      	movs	r3, #0
34006312:	4a2c      	ldr	r2, [pc, #176]	@ (340063c4 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006314:	17c1      	asrs	r1, r0, #31
34006316:	f7fb fbd5 	bl	34001ac4 <__aeabi_ldivmod>
  return (int16_t) Val;
3400631a:	f8ad 0006 	strh.w	r0, [sp, #6]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400631e:	68a0      	ldr	r0, [r4, #8]
34006320:	2300      	movs	r3, #0
34006322:	4a28      	ldr	r2, [pc, #160]	@ (340063c4 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006324:	17c1      	asrs	r1, r0, #31
34006326:	f7fb fbcd 	bl	34001ac4 <__aeabi_ldivmod>
  return (int16_t) Val;
3400632a:	f8ad 0008 	strh.w	r0, [sp, #8]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400632e:	68e0      	ldr	r0, [r4, #12]
34006330:	2300      	movs	r3, #0
34006332:	4a24      	ldr	r2, [pc, #144]	@ (340063c4 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006334:	17c1      	asrs	r1, r0, #31
34006336:	f7fb fbc5 	bl	34001ac4 <__aeabi_ldivmod>
  return (int16_t) Val;
3400633a:	f8ad 000a 	strh.w	r0, [sp, #10]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400633e:	6920      	ldr	r0, [r4, #16]
34006340:	2300      	movs	r3, #0
34006342:	4a20      	ldr	r2, [pc, #128]	@ (340063c4 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006344:	17c1      	asrs	r1, r0, #31
34006346:	f7fb fbbd 	bl	34001ac4 <__aeabi_ldivmod>
  return (int16_t) Val;
3400634a:	f8ad 000e 	strh.w	r0, [sp, #14]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400634e:	6960      	ldr	r0, [r4, #20]
34006350:	2300      	movs	r3, #0
34006352:	4a1c      	ldr	r2, [pc, #112]	@ (340063c4 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006354:	17c1      	asrs	r1, r0, #31
34006356:	f7fb fbb5 	bl	34001ac4 <__aeabi_ldivmod>
  return (int16_t) Val;
3400635a:	f8ad 0010 	strh.w	r0, [sp, #16]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400635e:	69a0      	ldr	r0, [r4, #24]
34006360:	2300      	movs	r3, #0
34006362:	4a18      	ldr	r2, [pc, #96]	@ (340063c4 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006364:	17c1      	asrs	r1, r0, #31
34006366:	f7fb fbad 	bl	34001ac4 <__aeabi_ldivmod>
  return (int16_t) Val;
3400636a:	f8ad 0012 	strh.w	r0, [sp, #18]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400636e:	69e0      	ldr	r0, [r4, #28]
34006370:	2300      	movs	r3, #0
34006372:	4a14      	ldr	r2, [pc, #80]	@ (340063c4 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006374:	17c1      	asrs	r1, r0, #31
34006376:	f7fb fba5 	bl	34001ac4 <__aeabi_ldivmod>
  return (int16_t) Val;
3400637a:	f8ad 0016 	strh.w	r0, [sp, #22]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400637e:	6a20      	ldr	r0, [r4, #32]
34006380:	2300      	movs	r3, #0
34006382:	4a10      	ldr	r2, [pc, #64]	@ (340063c4 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006384:	17c1      	asrs	r1, r0, #31
34006386:	f7fb fb9d 	bl	34001ac4 <__aeabi_ldivmod>
  return (int16_t) Val;
3400638a:	f8ad 0018 	strh.w	r0, [sp, #24]
  int64_t Val = Coeff;
3400638e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34006390:	4a0c      	ldr	r2, [pc, #48]	@ (340063c4 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006392:	2300      	movs	r3, #0
34006394:	17c1      	asrs	r1, r0, #31
34006396:	f7fb fb95 	bl	34001ac4 <__aeabi_ldivmod>
    halStatus = HAL_DCMIPP_PIPE_SetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
3400639a:	2101      	movs	r1, #1
  return (int16_t) Val;
3400639c:	f8ad 001a 	strh.w	r0, [sp, #26]
    halStatus = HAL_DCMIPP_PIPE_SetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
340063a0:	aa01      	add	r2, sp, #4
340063a2:	4630      	mov	r0, r6
340063a4:	f00a feba 	bl	3401111c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>
    if (halStatus == HAL_OK)
340063a8:	b110      	cbz	r0, 340063b0 <ISP_SVC_ISP_SetColorConv+0xf8>
  {
    return ISP_ERR_COLORCONV_HAL;
340063aa:	205b      	movs	r0, #91	@ 0x5b
  }

  return ISP_OK;
}
340063ac:	b008      	add	sp, #32
340063ae:	bd70      	pop	{r4, r5, r6, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
340063b0:	2101      	movs	r1, #1
340063b2:	6828      	ldr	r0, [r5, #0]
340063b4:	f00a fff4 	bl	340113a0 <HAL_DCMIPP_PIPE_EnableISPColorConversion>
340063b8:	e7a6      	b.n	34006308 <ISP_SVC_ISP_SetColorConv+0x50>
340063ba:	bf00      	nop
340063bc:	17c841c0 	.word	0x17c841c0
340063c0:	2f908380 	.word	0x2f908380
340063c4:	0005f5e1 	.word	0x0005f5e1

340063c8 <ISP_SVC_ISP_GetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
340063c8:	b530      	push	{r4, r5, lr}
340063ca:	460c      	mov	r4, r1
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340063cc:	4605      	mov	r5, r0
{
340063ce:	b089      	sub	sp, #36	@ 0x24
  if ((hIsp == NULL) || (pConfig == NULL))
340063d0:	2800      	cmp	r0, #0
340063d2:	d03c      	beq.n	3400644e <ISP_SVC_ISP_GetColorConv+0x86>
340063d4:	2900      	cmp	r1, #0
340063d6:	d03a      	beq.n	3400644e <ISP_SVC_ISP_GetColorConv+0x86>
  {
    return ISP_ERR_COLORCONV_EINVAL;
  }

  pConfig->enable = (uint8_t) HAL_DCMIPP_PIPE_IsEnabledISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
340063d8:	2101      	movs	r1, #1
340063da:	6800      	ldr	r0, [r0, #0]
340063dc:	f00b fd78 	bl	34011ed0 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>
340063e0:	7020      	strb	r0, [r4, #0]

  HAL_DCMIPP_PIPE_GetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
340063e2:	2101      	movs	r1, #1
340063e4:	6828      	ldr	r0, [r5, #0]
340063e6:	aa01      	add	r2, sp, #4
340063e8:	f00b fcaa 	bl	34011d40 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
340063ec:	4b19      	ldr	r3, [pc, #100]	@ (34006454 <ISP_SVC_ISP_GetColorConv+0x8c>)
  int64_t Val = Reg;
340063ee:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  pConfig->coeff[1][2] = From_CConv_Reg(colorConvConfig.GB);
  pConfig->coeff[2][0] = From_CConv_Reg(colorConvConfig.BR);
  pConfig->coeff[2][1] = From_CConv_Reg(colorConvConfig.BG);
  pConfig->coeff[2][2] = From_CConv_Reg(colorConvConfig.BB);

  return ISP_OK;
340063f2:	2000      	movs	r0, #0
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
340063f4:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
340063f8:	6062      	str	r2, [r4, #4]
  int64_t Val = Reg;
340063fa:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
340063fe:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34006402:	60a2      	str	r2, [r4, #8]
  int64_t Val = Reg;
34006404:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34006408:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
3400640c:	60e2      	str	r2, [r4, #12]
  int64_t Val = Reg;
3400640e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34006412:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34006416:	6122      	str	r2, [r4, #16]
  int64_t Val = Reg;
34006418:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
3400641c:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34006420:	6162      	str	r2, [r4, #20]
  int64_t Val = Reg;
34006422:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34006426:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
3400642a:	61a2      	str	r2, [r4, #24]
  int64_t Val = Reg;
3400642c:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34006430:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34006434:	61e2      	str	r2, [r4, #28]
  int64_t Val = Reg;
34006436:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
3400643a:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
3400643e:	6222      	str	r2, [r4, #32]
  int64_t Val = Reg;
34006440:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34006444:	fba2 2303 	umull	r2, r3, r2, r3
  return (int32_t) Val;
34006448:	6262      	str	r2, [r4, #36]	@ 0x24
}
3400644a:	b009      	add	sp, #36	@ 0x24
3400644c:	bd30      	pop	{r4, r5, pc}
    return ISP_ERR_COLORCONV_EINVAL;
3400644e:	205a      	movs	r0, #90	@ 0x5a
34006450:	e7fb      	b.n	3400644a <ISP_SVC_ISP_GetColorConv+0x82>
34006452:	bf00      	nop
34006454:	0005f5e1 	.word	0x0005f5e1

34006458 <ISP_SVC_Sensor_GetInfo>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor info
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetInfo(ISP_HandleTypeDef *hIsp, ISP_SensorInfoTypeDef *pConfig)
{
34006458:	b508      	push	{r3, lr}
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3400645a:	b138      	cbz	r0, 3400646c <ISP_SVC_Sensor_GetInfo+0x14>
3400645c:	b131      	cbz	r1, 3400646c <ISP_SVC_Sensor_GetInfo+0x14>
  {
    return ISP_ERR_SENSORINFO_EINVAL;
  }

  if (hIsp->appliHelpers.GetSensorInfo != NULL)
3400645e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
34006460:	b113      	cbz	r3, 34006468 <ISP_SVC_Sensor_GetInfo+0x10>
  {
    if (hIsp->appliHelpers.GetSensorInfo(hIsp->cameraInstance, pConfig) != 0)
34006462:	6840      	ldr	r0, [r0, #4]
34006464:	4798      	blx	r3
34006466:	b918      	cbnz	r0, 34006470 <ISP_SVC_Sensor_GetInfo+0x18>
    {
      return ISP_ERR_SENSORINFO;
    }
  }

  return ISP_OK;
34006468:	2000      	movs	r0, #0
}
3400646a:	bd08      	pop	{r3, pc}
    return ISP_ERR_SENSORINFO_EINVAL;
3400646c:	206e      	movs	r0, #110	@ 0x6e
3400646e:	e7fc      	b.n	3400646a <ISP_SVC_Sensor_GetInfo+0x12>
      return ISP_ERR_SENSORINFO;
34006470:	206f      	movs	r0, #111	@ 0x6f
34006472:	e7fa      	b.n	3400646a <ISP_SVC_Sensor_GetInfo+0x12>

34006474 <ISP_SVC_Sensor_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
34006474:	b510      	push	{r4, lr}
34006476:	460c      	mov	r4, r1
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34006478:	b170      	cbz	r0, 34006498 <ISP_SVC_Sensor_SetGain+0x24>
3400647a:	b169      	cbz	r1, 34006498 <ISP_SVC_Sensor_SetGain+0x24>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
  }

  if (hIsp->appliHelpers.SetSensorGain != NULL)
3400647c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    if (hIsp->appliHelpers.SetSensorGain(hIsp->cameraInstance, (int32_t)pConfig->gain) != 0)
3400647e:	6809      	ldr	r1, [r1, #0]
  if (hIsp->appliHelpers.SetSensorGain != NULL)
34006480:	b923      	cbnz	r3, 3400648c <ISP_SVC_Sensor_SetGain+0x18>
    }
  }

  Meta.gain = pConfig->gain;

  return ISP_OK;
34006482:	2000      	movs	r0, #0
  Meta.gain = pConfig->gain;
34006484:	6822      	ldr	r2, [r4, #0]
34006486:	4b05      	ldr	r3, [pc, #20]	@ (3400649c <ISP_SVC_Sensor_SetGain+0x28>)
34006488:	609a      	str	r2, [r3, #8]
}
3400648a:	bd10      	pop	{r4, pc}
    if (hIsp->appliHelpers.SetSensorGain(hIsp->cameraInstance, (int32_t)pConfig->gain) != 0)
3400648c:	6840      	ldr	r0, [r0, #4]
3400648e:	4798      	blx	r3
34006490:	2800      	cmp	r0, #0
34006492:	d0f6      	beq.n	34006482 <ISP_SVC_Sensor_SetGain+0xe>
      return ISP_ERR_SENSORGAIN;
34006494:	2079      	movs	r0, #121	@ 0x79
34006496:	e7f8      	b.n	3400648a <ISP_SVC_Sensor_SetGain+0x16>
    return ISP_ERR_SENSORGAIN_EINVAL;
34006498:	2078      	movs	r0, #120	@ 0x78
3400649a:	e7f6      	b.n	3400648a <ISP_SVC_Sensor_SetGain+0x16>
3400649c:	340d189c 	.word	0x340d189c

340064a0 <ISP_SVC_Sensor_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
340064a0:	b508      	push	{r3, lr}
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340064a2:	b138      	cbz	r0, 340064b4 <ISP_SVC_Sensor_GetGain+0x14>
340064a4:	b131      	cbz	r1, 340064b4 <ISP_SVC_Sensor_GetGain+0x14>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
  }

  if (hIsp->appliHelpers.GetSensorGain != NULL)
340064a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
340064a8:	b113      	cbz	r3, 340064b0 <ISP_SVC_Sensor_GetGain+0x10>
  {
    if (hIsp->appliHelpers.GetSensorGain(hIsp->cameraInstance, (int32_t *)&pConfig->gain) != 0)
340064aa:	6840      	ldr	r0, [r0, #4]
340064ac:	4798      	blx	r3
340064ae:	b918      	cbnz	r0, 340064b8 <ISP_SVC_Sensor_GetGain+0x18>
    {
      return ISP_ERR_SENSORGAIN;
    }
  }

  return ISP_OK;
340064b0:	2000      	movs	r0, #0
}
340064b2:	bd08      	pop	{r3, pc}
    return ISP_ERR_SENSORGAIN_EINVAL;
340064b4:	2078      	movs	r0, #120	@ 0x78
340064b6:	e7fc      	b.n	340064b2 <ISP_SVC_Sensor_GetGain+0x12>
      return ISP_ERR_SENSORGAIN;
340064b8:	2079      	movs	r0, #121	@ 0x79
340064ba:	e7fa      	b.n	340064b2 <ISP_SVC_Sensor_GetGain+0x12>

340064bc <ISP_SVC_Sensor_SetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
340064bc:	b510      	push	{r4, lr}
340064be:	460c      	mov	r4, r1
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340064c0:	b170      	cbz	r0, 340064e0 <ISP_SVC_Sensor_SetExposure+0x24>
340064c2:	b169      	cbz	r1, 340064e0 <ISP_SVC_Sensor_SetExposure+0x24>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
  }

  if (hIsp->appliHelpers.SetSensorExposure != NULL)
340064c4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  {
    if (hIsp->appliHelpers.SetSensorExposure(hIsp->cameraInstance, (int32_t)pConfig->exposure) != 0)
340064c6:	6809      	ldr	r1, [r1, #0]
  if (hIsp->appliHelpers.SetSensorExposure != NULL)
340064c8:	b923      	cbnz	r3, 340064d4 <ISP_SVC_Sensor_SetExposure+0x18>
    }
  }

  Meta.exposure = pConfig->exposure;

  return ISP_OK;
340064ca:	2000      	movs	r0, #0
  Meta.exposure = pConfig->exposure;
340064cc:	6822      	ldr	r2, [r4, #0]
340064ce:	4b05      	ldr	r3, [pc, #20]	@ (340064e4 <ISP_SVC_Sensor_SetExposure+0x28>)
340064d0:	60da      	str	r2, [r3, #12]
}
340064d2:	bd10      	pop	{r4, pc}
    if (hIsp->appliHelpers.SetSensorExposure(hIsp->cameraInstance, (int32_t)pConfig->exposure) != 0)
340064d4:	6840      	ldr	r0, [r0, #4]
340064d6:	4798      	blx	r3
340064d8:	2800      	cmp	r0, #0
340064da:	d0f6      	beq.n	340064ca <ISP_SVC_Sensor_SetExposure+0xe>
      return ISP_ERR_SENSOREXPOSURE;
340064dc:	2083      	movs	r0, #131	@ 0x83
340064de:	e7f8      	b.n	340064d2 <ISP_SVC_Sensor_SetExposure+0x16>
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
340064e0:	2082      	movs	r0, #130	@ 0x82
340064e2:	e7f6      	b.n	340064d2 <ISP_SVC_Sensor_SetExposure+0x16>
340064e4:	340d189c 	.word	0x340d189c

340064e8 <ISP_SVC_Sensor_GetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
340064e8:	b508      	push	{r3, lr}
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340064ea:	b138      	cbz	r0, 340064fc <ISP_SVC_Sensor_GetExposure+0x14>
340064ec:	b131      	cbz	r1, 340064fc <ISP_SVC_Sensor_GetExposure+0x14>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
  }

  if (hIsp->appliHelpers.GetSensorExposure != NULL)
340064ee:	6b83      	ldr	r3, [r0, #56]	@ 0x38
340064f0:	b113      	cbz	r3, 340064f8 <ISP_SVC_Sensor_GetExposure+0x10>
  {
    if (hIsp->appliHelpers.GetSensorExposure(hIsp->cameraInstance, (int32_t *)&pConfig->exposure) != 0)
340064f2:	6840      	ldr	r0, [r0, #4]
340064f4:	4798      	blx	r3
340064f6:	b918      	cbnz	r0, 34006500 <ISP_SVC_Sensor_GetExposure+0x18>
    {
      return ISP_ERR_SENSOREXPOSURE;
    }
  }

  return ISP_OK;
340064f8:	2000      	movs	r0, #0
}
340064fa:	bd08      	pop	{r3, pc}
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
340064fc:	2082      	movs	r0, #130	@ 0x82
340064fe:	e7fc      	b.n	340064fa <ISP_SVC_Sensor_GetExposure+0x12>
      return ISP_ERR_SENSOREXPOSURE;
34006500:	2083      	movs	r0, #131	@ 0x83
34006502:	e7fa      	b.n	340064fa <ISP_SVC_Sensor_GetExposure+0x12>

34006504 <ISP_SVC_Misc_IsDCMIPPReady>:
  *         Check that the DCMIPP device is ready
  * @param  hIsp: ISP device handle
  * @retval ISP_OK if DCMIPP is running, ISP_FAIL otherwise
  */
ISP_StatusTypeDef ISP_SVC_Misc_IsDCMIPPReady(ISP_HandleTypeDef *hIsp)
{
34006504:	b508      	push	{r3, lr}
  /* Check handle validity */
  if (hIsp == NULL)
34006506:	b138      	cbz	r0, 34006518 <ISP_SVC_Misc_IsDCMIPPReady+0x14>
  {
    return ISP_ERR_EINVAL;
  }

  if (HAL_DCMIPP_GetState(hIsp->hDcmipp) != HAL_DCMIPP_STATE_READY)
34006508:	6800      	ldr	r0, [r0, #0]
3400650a:	f00b fd07 	bl	34011f1c <HAL_DCMIPP_GetState>
  {
    return ISP_ERR_DCMIPP_STATE;
  }

  return ISP_OK;
3400650e:	2802      	cmp	r0, #2
34006510:	bf14      	ite	ne
34006512:	208c      	movne	r0, #140	@ 0x8c
34006514:	2000      	moveq	r0, #0
}
34006516:	bd08      	pop	{r3, pc}
    return ISP_ERR_EINVAL;
34006518:	2001      	movs	r0, #1
3400651a:	e7fc      	b.n	34006516 <ISP_SVC_Misc_IsDCMIPPReady+0x12>

3400651c <ISP_SVC_Misc_IncMainFrameId>:
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
  hIsp->MainPipe_FrameCount++;
3400651c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400651e:	3301      	adds	r3, #1
34006520:	6403      	str	r3, [r0, #64]	@ 0x40
}
34006522:	4770      	bx	lr

34006524 <ISP_SVC_Misc_GetMainFrameId>:
  * @retval Id of the last frame output on the main pipe
  */
uint32_t ISP_SVC_Misc_GetMainFrameId(ISP_HandleTypeDef *hIsp)
{
  return hIsp->MainPipe_FrameCount;
}
34006524:	6c00      	ldr	r0, [r0, #64]	@ 0x40
34006526:	4770      	bx	lr

34006528 <ISP_SVC_Misc_IncAncillaryFrameId>:
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
  hIsp->AncillaryPipe_FrameCount++;
34006528:	6c43      	ldr	r3, [r0, #68]	@ 0x44
3400652a:	3301      	adds	r3, #1
3400652c:	6443      	str	r3, [r0, #68]	@ 0x44
}
3400652e:	4770      	bx	lr

34006530 <ISP_SVC_Misc_IncDumpFrameId>:
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
  hIsp->DumpPipe_FrameCount++;
34006530:	6c83      	ldr	r3, [r0, #72]	@ 0x48
34006532:	3301      	adds	r3, #1
34006534:	6483      	str	r3, [r0, #72]	@ 0x48
}
34006536:	4770      	bx	lr

34006538 <ISP_SVC_Misc_SetWBRefMode>:
  */
ISP_StatusTypeDef ISP_SVC_Misc_SetWBRefMode(ISP_HandleTypeDef *hIsp, uint32_t RefColorTemp)
{
  (void)hIsp; /* unused */

  ISP_ManualWBRefColorTemp = RefColorTemp;
34006538:	4b01      	ldr	r3, [pc, #4]	@ (34006540 <ISP_SVC_Misc_SetWBRefMode+0x8>)

  return ISP_OK;
}
3400653a:	2000      	movs	r0, #0
  ISP_ManualWBRefColorTemp = RefColorTemp;
3400653c:	6019      	str	r1, [r3, #0]
}
3400653e:	4770      	bx	lr
34006540:	340d1c74 	.word	0x340d1c74

34006544 <ISP_SVC_Misc_IsGammaEnabled>:
  * @param  hIsp: ISP device handle
  * @param  Pipe: DCMIPP pipe line
  * @retval 1 if enabled 0 otherwise
  */
bool ISP_SVC_Misc_IsGammaEnabled(ISP_HandleTypeDef *hIsp, uint32_t Pipe)
{
34006544:	b508      	push	{r3, lr}
  uint8_t ret;

  /* Check handle validity */
  if (hIsp == NULL)
34006546:	b168      	cbz	r0, 34006564 <ISP_SVC_Misc_IsGammaEnabled+0x20>
  {
    return ISP_ERR_EINVAL;
  }

  switch(Pipe)
34006548:	2901      	cmp	r1, #1
3400654a:	d006      	beq.n	3400655a <ISP_SVC_Misc_IsGammaEnabled+0x16>
3400654c:	2902      	cmp	r1, #2
3400654e:	d004      	beq.n	3400655a <ISP_SVC_Misc_IsGammaEnabled+0x16>
34006550:	2000      	movs	r0, #0
    break;
  default:
    ret = 0; /*  No gamma on pipe 0 */
  }

  return ret;
34006552:	3800      	subs	r0, #0
34006554:	bf18      	it	ne
34006556:	2001      	movne	r0, #1
}
34006558:	bd08      	pop	{r3, pc}
    ret = (uint8_t) HAL_DCMIPP_PIPE_IsEnabledGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2);
3400655a:	6800      	ldr	r0, [r0, #0]
3400655c:	f00a fc32 	bl	34010dc4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>
34006560:	b2c0      	uxtb	r0, r0
    break;
34006562:	e7f6      	b.n	34006552 <ISP_SVC_Misc_IsGammaEnabled+0xe>
    return ISP_ERR_EINVAL;
34006564:	2001      	movs	r0, #1
34006566:	e7f7      	b.n	34006558 <ISP_SVC_Misc_IsGammaEnabled+0x14>

34006568 <ISP_SVC_ISP_SetGamma>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gamma configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGamma(ISP_HandleTypeDef *hIsp, ISP_GammaTypeDef *pConfig)
{
34006568:	b510      	push	{r4, lr}
  if ((hIsp == NULL) || (pConfig == NULL))
3400656a:	4604      	mov	r4, r0
3400656c:	b908      	cbnz	r0, 34006572 <ISP_SVC_ISP_SetGamma+0xa>
  {
    return ISP_ERR_DCMIPP_GAMMA;
3400656e:	2095      	movs	r0, #149	@ 0x95
      return ISP_ERR_DCMIPP_GAMMA;
    }
  }

  return ISP_OK;
}
34006570:	bd10      	pop	{r4, pc}
  if ((hIsp == NULL) || (pConfig == NULL))
34006572:	2900      	cmp	r1, #0
34006574:	d0fb      	beq.n	3400656e <ISP_SVC_ISP_SetGamma+0x6>
  if (pConfig->enable == 0)
34006576:	780b      	ldrb	r3, [r1, #0]
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34006578:	6800      	ldr	r0, [r0, #0]
3400657a:	2101      	movs	r1, #1
  if (pConfig->enable == 0)
3400657c:	b95b      	cbnz	r3, 34006596 <ISP_SVC_ISP_SetGamma+0x2e>
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
3400657e:	f00a fbff 	bl	34010d80 <HAL_DCMIPP_PIPE_DisableGammaConversion>
34006582:	2800      	cmp	r0, #0
34006584:	d1f3      	bne.n	3400656e <ISP_SVC_ISP_SetGamma+0x6>
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
34006586:	2102      	movs	r1, #2
34006588:	6820      	ldr	r0, [r4, #0]
3400658a:	f00a fbf9 	bl	34010d80 <HAL_DCMIPP_PIPE_DisableGammaConversion>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
3400658e:	2800      	cmp	r0, #0
34006590:	d1ed      	bne.n	3400656e <ISP_SVC_ISP_SetGamma+0x6>
  return ISP_OK;
34006592:	2000      	movs	r0, #0
34006594:	e7ec      	b.n	34006570 <ISP_SVC_ISP_SetGamma+0x8>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34006596:	f00a fbd1 	bl	34010d3c <HAL_DCMIPP_PIPE_EnableGammaConversion>
3400659a:	2800      	cmp	r0, #0
3400659c:	d1e7      	bne.n	3400656e <ISP_SVC_ISP_SetGamma+0x6>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
3400659e:	2102      	movs	r1, #2
340065a0:	6820      	ldr	r0, [r4, #0]
340065a2:	f00a fbcb 	bl	34010d3c <HAL_DCMIPP_PIPE_EnableGammaConversion>
340065a6:	e7f2      	b.n	3400658e <ISP_SVC_ISP_SetGamma+0x26>

340065a8 <ISP_SVC_IQParam_Init>:
  *         Initialize the IQ parameters cache with values from non volatile memory
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_IQParam_Init(ISP_HandleTypeDef *hIsp, const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
340065a8:	b508      	push	{r3, lr}
  (void)hIsp; /* unused */

  ISP_IQParamCache = *ISP_IQParamCacheInit;
340065aa:	f44f 7216 	mov.w	r2, #600	@ 0x258
340065ae:	4802      	ldr	r0, [pc, #8]	@ (340065b8 <ISP_SVC_IQParam_Init+0x10>)
340065b0:	f01b fb5f 	bl	34021c72 <memcpy>
  return ISP_OK;
}
340065b4:	2000      	movs	r0, #0
340065b6:	bd08      	pop	{r3, pc}
340065b8:	340d1a1c 	.word	0x340d1a1c

340065bc <ISP_SVC_IQParam_Get>:
ISP_IQParamTypeDef *ISP_SVC_IQParam_Get(ISP_HandleTypeDef *hIsp)
{
  (void)hIsp; /* unused */

  return &ISP_IQParamCache;
}
340065bc:	4800      	ldr	r0, [pc, #0]	@ (340065c0 <ISP_SVC_IQParam_Get+0x4>)
340065be:	4770      	bx	lr
340065c0:	340d1a1c 	.word	0x340d1a1c

340065c4 <ISP_SVC_Stats_Init>:
  * @retval None
  */
void ISP_SVC_Stats_Init(ISP_HandleTypeDef *hIsp)
{
  UNUSED(hIsp);
  memset(&ISP_SVC_StatEngine, 0, sizeof(ISP_SVC_StatEngineTypeDef));
340065c4:	f44f 72b0 	mov.w	r2, #352	@ 0x160
340065c8:	2100      	movs	r1, #0
340065ca:	4801      	ldr	r0, [pc, #4]	@ (340065d0 <ISP_SVC_Stats_Init+0xc>)
340065cc:	f01b b8a2 	b.w	34021714 <memset>
340065d0:	340d18bc 	.word	0x340d18bc

340065d4 <ISP_SVC_Stats_Gather>:
  *         Gather statistics
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Gather(ISP_HandleTypeDef *hIsp)
{
340065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ISP_SVC_StatStateTypeDef *ongoing;
  uint32_t avgR, avgG, avgB, frameId;
  uint8_t i;

  /* Check handle validity */
  if (hIsp == NULL)
340065d8:	4605      	mov	r5, r0
{
340065da:	b08d      	sub	sp, #52	@ 0x34
  if (hIsp == NULL)
340065dc:	b928      	cbnz	r0, 340065ea <ISP_SVC_Stats_Gather+0x16>
  {
    printf("ERROR: ISP handle is NULL\r\n");
340065de:	48ab      	ldr	r0, [pc, #684]	@ (3400688c <ISP_SVC_Stats_Gather+0x2b8>)

  /* Save the two last processed stages and go to next stage */
  stagePrevious2 = stagePrevious1;
  stagePrevious1 = ISP_SVC_StatEngine.stage;
  ISP_SVC_StatEngine.stage = GetNextStatStage(ISP_SVC_StatEngine.stage);
}
340065e0:	b00d      	add	sp, #52	@ 0x34
340065e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("ERROR: ISP handle is NULL\r\n");
340065e6:	f01a bf29 	b.w	3402143c <puts>
  if (hIsp->hDcmipp == NULL)
340065ea:	6800      	ldr	r0, [r0, #0]
340065ec:	2800      	cmp	r0, #0
340065ee:	f000 80b5 	beq.w	3400675c <ISP_SVC_Stats_Gather+0x188>
  switch(stagePrevious2)
340065f2:	f8df 92f4 	ldr.w	r9, [pc, #756]	@ 340068e8 <ISP_SVC_Stats_Gather+0x314>
340065f6:	4ca6      	ldr	r4, [pc, #664]	@ (34006890 <ISP_SVC_Stats_Gather+0x2bc>)
340065f8:	f899 3000 	ldrb.w	r3, [r9]
340065fc:	2b09      	cmp	r3, #9
340065fe:	d836      	bhi.n	3400666e <ISP_SVC_Stats_Gather+0x9a>
34006600:	e8df f003 	tbb	[pc, r3]
34006604:	46443f05 	.word	0x46443f05
34006608:	8c8a4a48 	.word	0x8c8a4a48
3400660c:	908e      	.short	0x908e
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
3400660e:	2201      	movs	r2, #1
34006610:	466b      	mov	r3, sp
34006612:	4611      	mov	r1, r2
34006614:	f00b fb42 	bl	34011c9c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
34006618:	2202      	movs	r2, #2
3400661a:	2101      	movs	r1, #1
3400661c:	ab01      	add	r3, sp, #4
3400661e:	6828      	ldr	r0, [r5, #0]
34006620:	f00b fb3c 	bl	34011c9c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
34006624:	2203      	movs	r2, #3
34006626:	2101      	movs	r1, #1
34006628:	ab02      	add	r3, sp, #8
3400662a:	6828      	ldr	r0, [r5, #0]
3400662c:	f00b fb36 	bl	34011c9c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
34006630:	2101      	movs	r1, #1
34006632:	2200      	movs	r2, #0
34006634:	9b00      	ldr	r3, [sp, #0]
34006636:	4628      	mov	r0, r5
34006638:	f7ff fb16 	bl	34005c68 <GetAvgStats>
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
3400663c:	460a      	mov	r2, r1
    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
3400663e:	4606      	mov	r6, r0
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
34006640:	9b01      	ldr	r3, [sp, #4]
    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
34006642:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
34006646:	4628      	mov	r0, r5
34006648:	f7ff fb0e 	bl	34005c68 <GetAvgStats>
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
3400664c:	2202      	movs	r2, #2
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
3400664e:	4607      	mov	r7, r0
34006650:	f884 007d 	strb.w	r0, [r4, #125]	@ 0x7d
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
34006654:	9b02      	ldr	r3, [sp, #8]
34006656:	4628      	mov	r0, r5
34006658:	f7ff fb06 	bl	34005c68 <GetAvgStats>
    ongoing->up.averageL = LuminanceFromRGB(ongoing->up.averageR, ongoing->up.averageG, ongoing->up.averageB);
3400665c:	4639      	mov	r1, r7
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
3400665e:	4602      	mov	r2, r0
34006660:	f884 007e 	strb.w	r0, [r4, #126]	@ 0x7e
    ongoing->up.averageL = LuminanceFromRGB(ongoing->up.averageR, ongoing->up.averageG, ongoing->up.averageB);
34006664:	4630      	mov	r0, r6
34006666:	f7ff fb43 	bl	34005cf0 <LuminanceFromRGB>
3400666a:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
  switch(ISP_SVC_StatEngine.stage)
3400666e:	7823      	ldrb	r3, [r4, #0]
34006670:	2b09      	cmp	r3, #9
34006672:	d866      	bhi.n	34006742 <ISP_SVC_Stats_Gather+0x16e>
34006674:	e8df f003 	tbb	[pc, r3]
34006678:	87858075 	.word	0x87858075
3400667c:	8d8b5889 	.word	0x8d8b5889
34006680:	918f      	.short	0x918f
    ReadStatHistogram(hIsp, &ongoing->up.histogram[0]);
34006682:	4984      	ldr	r1, [pc, #528]	@ (34006894 <ISP_SVC_Stats_Gather+0x2c0>)
    ReadStatHistogram(hIsp, &ongoing->down.histogram[9]);
34006684:	4628      	mov	r0, r5
34006686:	f7ff fb20 	bl	34005cca <ReadStatHistogram>
    break;
3400668a:	e7f0      	b.n	3400666e <ISP_SVC_Stats_Gather+0x9a>
    ReadStatHistogram(hIsp, &ongoing->up.histogram[3]);
3400668c:	4982      	ldr	r1, [pc, #520]	@ (34006898 <ISP_SVC_Stats_Gather+0x2c4>)
3400668e:	e7f9      	b.n	34006684 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->up.histogram[6]);
34006690:	4982      	ldr	r1, [pc, #520]	@ (3400689c <ISP_SVC_Stats_Gather+0x2c8>)
34006692:	e7f7      	b.n	34006684 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->up.histogram[9]);
34006694:	4982      	ldr	r1, [pc, #520]	@ (340068a0 <ISP_SVC_Stats_Gather+0x2cc>)
34006696:	e7f5      	b.n	34006684 <ISP_SVC_Stats_Gather+0xb0>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
34006698:	2201      	movs	r2, #1
3400669a:	466b      	mov	r3, sp
3400669c:	4611      	mov	r1, r2
3400669e:	f00b fafd 	bl	34011c9c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
340066a2:	2202      	movs	r2, #2
340066a4:	2101      	movs	r1, #1
340066a6:	ab01      	add	r3, sp, #4
340066a8:	6828      	ldr	r0, [r5, #0]
340066aa:	f00b faf7 	bl	34011c9c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
340066ae:	2203      	movs	r2, #3
340066b0:	2101      	movs	r1, #1
340066b2:	ab02      	add	r3, sp, #8
340066b4:	6828      	ldr	r0, [r5, #0]
340066b6:	f00b faf1 	bl	34011c9c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    ongoing->down.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_RED, avgR);
340066ba:	2102      	movs	r1, #2
340066bc:	2200      	movs	r2, #0
340066be:	9b00      	ldr	r3, [sp, #0]
340066c0:	4628      	mov	r0, r5
340066c2:	f7ff fad1 	bl	34005c68 <GetAvgStats>
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
340066c6:	2201      	movs	r2, #1
340066c8:	9b01      	ldr	r3, [sp, #4]
    ongoing->down.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_RED, avgR);
340066ca:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0
340066ce:	4607      	mov	r7, r0
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
340066d0:	4628      	mov	r0, r5
340066d2:	f7ff fac9 	bl	34005c68 <GetAvgStats>
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
340066d6:	460a      	mov	r2, r1
340066d8:	9b02      	ldr	r3, [sp, #8]
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
340066da:	f884 00b1 	strb.w	r0, [r4, #177]	@ 0xb1
340066de:	4606      	mov	r6, r0
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
340066e0:	4628      	mov	r0, r5
340066e2:	f7ff fac1 	bl	34005c68 <GetAvgStats>
340066e6:	f884 00b2 	strb.w	r0, [r4, #178]	@ 0xb2
    if ((hIsp->sensorInfo.bayer_pattern == ISP_DEMOS_TYPE_MONO) || (!IQParamConfig->demosaicing.enable))
340066ea:	f895 306c 	ldrb.w	r3, [r5, #108]	@ 0x6c
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
340066ee:	4602      	mov	r2, r0
    if ((hIsp->sensorInfo.bayer_pattern == ISP_DEMOS_TYPE_MONO) || (!IQParamConfig->demosaicing.enable))
340066f0:	2b04      	cmp	r3, #4
340066f2:	d002      	beq.n	340066fa <ISP_SVC_Stats_Gather+0x126>
340066f4:	4b6b      	ldr	r3, [pc, #428]	@ (340068a4 <ISP_SVC_Stats_Gather+0x2d0>)
340066f6:	7b1b      	ldrb	r3, [r3, #12]
340066f8:	b93b      	cbnz	r3, 3400670a <ISP_SVC_Stats_Gather+0x136>
  uint32_t lum = (uint32_t)r + g + b;
340066fa:	443e      	add	r6, r7
340066fc:	4416      	add	r6, r2
  return (uint8_t)((lum > 255)? 255 : lum);
340066fe:	2eff      	cmp	r6, #255	@ 0xff
34006700:	bf28      	it	cs
34006702:	26ff      	movcs	r6, #255	@ 0xff
      ongoing->down.averageL = LuminanceFromRGBMono(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
34006704:	f884 60b3 	strb.w	r6, [r4, #179]	@ 0xb3
34006708:	e7b1      	b.n	3400666e <ISP_SVC_Stats_Gather+0x9a>
      ongoing->down.averageL = LuminanceFromRGB(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
3400670a:	4631      	mov	r1, r6
3400670c:	4638      	mov	r0, r7
3400670e:	f7ff faef 	bl	34005cf0 <LuminanceFromRGB>
34006712:	f884 00b3 	strb.w	r0, [r4, #179]	@ 0xb3
34006716:	e7aa      	b.n	3400666e <ISP_SVC_Stats_Gather+0x9a>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[0]);
34006718:	4963      	ldr	r1, [pc, #396]	@ (340068a8 <ISP_SVC_Stats_Gather+0x2d4>)
3400671a:	e7b3      	b.n	34006684 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[3]);
3400671c:	4963      	ldr	r1, [pc, #396]	@ (340068ac <ISP_SVC_Stats_Gather+0x2d8>)
3400671e:	e7b1      	b.n	34006684 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[6]);
34006720:	4963      	ldr	r1, [pc, #396]	@ (340068b0 <ISP_SVC_Stats_Gather+0x2dc>)
34006722:	e7af      	b.n	34006684 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[9]);
34006724:	4963      	ldr	r1, [pc, #396]	@ (340068b4 <ISP_SVC_Stats_Gather+0x2e0>)
34006726:	e7ad      	b.n	34006684 <ISP_SVC_Stats_Gather+0xb0>
      statConf[i].Source = avgRGBDown[i];
34006728:	2300      	movs	r3, #0
3400672a:	2240      	movs	r2, #64	@ 0x40
3400672c:	e9cd 3203 	strd	r3, r2, [sp, #12]
34006730:	2250      	movs	r2, #80	@ 0x50
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
34006732:	e9cd 2307 	strd	r2, r3, [sp, #28]
      statConf[i].Source = avgRGBDown[i];
34006736:	2260      	movs	r2, #96	@ 0x60
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
34006738:	e9cd 3305 	strd	r3, r3, [sp, #20]
3400673c:	9309      	str	r3, [sp, #36]	@ 0x24
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
3400673e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
{
34006742:	f04f 0801 	mov.w	r8, #1
34006746:	af03      	add	r7, sp, #12
    if (HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, i, &statConf[i - DCMIPP_STATEXT_MODULE1]) != HAL_OK)
34006748:	463b      	mov	r3, r7
3400674a:	4642      	mov	r2, r8
3400674c:	2101      	movs	r1, #1
3400674e:	6828      	ldr	r0, [r5, #0]
34006750:	f00a fee4 	bl	3401151c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>
34006754:	b318      	cbz	r0, 3400679e <ISP_SVC_Stats_Gather+0x1ca>
      printf("ERROR: can't set Statistic Extraction config\r\n");
34006756:	4858      	ldr	r0, [pc, #352]	@ (340068b8 <ISP_SVC_Stats_Gather+0x2e4>)
      printf("ERROR: can't enable Statistic Extraction config\r\n");
34006758:	f01a fe70 	bl	3402143c <puts>
}
3400675c:	b00d      	add	sp, #52	@ 0x34
3400675e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
34006762:	2300      	movs	r3, #0
      statConf[i].Source = avgRGBUp[i];
34006764:	2210      	movs	r2, #16
34006766:	e9cd 3303 	strd	r3, r3, [sp, #12]
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
3400676a:	e9cd 2307 	strd	r2, r3, [sp, #28]
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
3400676e:	e9cd 3305 	strd	r3, r3, [sp, #20]
      statConf[i].Source = avgRGBUp[i];
34006772:	2220      	movs	r2, #32
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
34006774:	9309      	str	r3, [sp, #36]	@ 0x24
      statConf[i].Source = avgRGBUp[i];
34006776:	e7e2      	b.n	3400673e <ISP_SVC_Stats_Gather+0x16a>
    SetStatConfig(statConf, &statConfUpBins_0_2);
34006778:	4950      	ldr	r1, [pc, #320]	@ (340068bc <ISP_SVC_Stats_Gather+0x2e8>)
    SetStatConfig(statConf, &statConfDownBins_9_11);
3400677a:	a803      	add	r0, sp, #12
3400677c:	f7ff fa96 	bl	34005cac <SetStatConfig>
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34006780:	e7df      	b.n	34006742 <ISP_SVC_Stats_Gather+0x16e>
    SetStatConfig(statConf, &statConfUpBins_3_5);
34006782:	494f      	ldr	r1, [pc, #316]	@ (340068c0 <ISP_SVC_Stats_Gather+0x2ec>)
34006784:	e7f9      	b.n	3400677a <ISP_SVC_Stats_Gather+0x1a6>
    SetStatConfig(statConf, &statConfUpBins_6_8);
34006786:	494f      	ldr	r1, [pc, #316]	@ (340068c4 <ISP_SVC_Stats_Gather+0x2f0>)
34006788:	e7f7      	b.n	3400677a <ISP_SVC_Stats_Gather+0x1a6>
    SetStatConfig(statConf, &statConfUpBins_9_11);
3400678a:	494f      	ldr	r1, [pc, #316]	@ (340068c8 <ISP_SVC_Stats_Gather+0x2f4>)
3400678c:	e7f5      	b.n	3400677a <ISP_SVC_Stats_Gather+0x1a6>
    SetStatConfig(statConf, &statConfDownBins_0_2);
3400678e:	494f      	ldr	r1, [pc, #316]	@ (340068cc <ISP_SVC_Stats_Gather+0x2f8>)
34006790:	e7f3      	b.n	3400677a <ISP_SVC_Stats_Gather+0x1a6>
    SetStatConfig(statConf, &statConfDownBins_3_5);
34006792:	494f      	ldr	r1, [pc, #316]	@ (340068d0 <ISP_SVC_Stats_Gather+0x2fc>)
34006794:	e7f1      	b.n	3400677a <ISP_SVC_Stats_Gather+0x1a6>
    SetStatConfig(statConf, &statConfDownBins_6_8);
34006796:	494f      	ldr	r1, [pc, #316]	@ (340068d4 <ISP_SVC_Stats_Gather+0x300>)
34006798:	e7ef      	b.n	3400677a <ISP_SVC_Stats_Gather+0x1a6>
    SetStatConfig(statConf, &statConfDownBins_9_11);
3400679a:	494f      	ldr	r1, [pc, #316]	@ (340068d8 <ISP_SVC_Stats_Gather+0x304>)
3400679c:	e7ed      	b.n	3400677a <ISP_SVC_Stats_Gather+0x1a6>
    if (HAL_DCMIPP_PIPE_EnableISPStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1, i) != HAL_OK)
3400679e:	4642      	mov	r2, r8
340067a0:	2101      	movs	r1, #1
340067a2:	6828      	ldr	r0, [r5, #0]
340067a4:	f00a ff72 	bl	3401168c <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>
340067a8:	4606      	mov	r6, r0
340067aa:	b108      	cbz	r0, 340067b0 <ISP_SVC_Stats_Gather+0x1dc>
      printf("ERROR: can't enable Statistic Extraction config\r\n");
340067ac:	484b      	ldr	r0, [pc, #300]	@ (340068dc <ISP_SVC_Stats_Gather+0x308>)
340067ae:	e7d3      	b.n	34006758 <ISP_SVC_Stats_Gather+0x184>
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
340067b0:	f108 0801 	add.w	r8, r8, #1
340067b4:	fa5f f888 	uxtb.w	r8, r8
340067b8:	f1b8 0f04 	cmp.w	r8, #4
340067bc:	f107 070c 	add.w	r7, r7, #12
340067c0:	d1c2      	bne.n	34006748 <ISP_SVC_Stats_Gather+0x174>
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
340067c2:	f894 8158 	ldrb.w	r8, [r4, #344]	@ 0x158
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
340067c6:	f899 b000 	ldrb.w	fp, [r9]
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
340067ca:	f018 0f05 	tst.w	r8, #5
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
340067ce:	bf0c      	ite	eq
340067d0:	2301      	moveq	r3, #1
340067d2:	2300      	movne	r3, #0
  return hIsp->MainPipe_FrameCount;
340067d4:	f8d5 a040 	ldr.w	sl, [r5, #64]	@ 0x40
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG) ||
340067d8:	f894 7159 	ldrb.w	r7, [r4, #345]	@ 0x159
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
340067dc:	455b      	cmp	r3, fp
    ongoing->upFrameIdStart = frameId;
340067de:	bf08      	it	eq
340067e0:	f8c4 a0e4 	streq.w	sl, [r4, #228]	@ 0xe4
      stage = ISP_STAT_CFG_DOWN_AVG;
340067e4:	f017 0f05 	tst.w	r7, #5
340067e8:	bf0c      	ite	eq
340067ea:	2306      	moveq	r3, #6
340067ec:	2305      	movne	r3, #5
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_DOWN))
340067ee:	459b      	cmp	fp, r3
340067f0:	d17c      	bne.n	340068ec <ISP_SVC_Stats_Gather+0x318>
    ongoing->downFrameIdStart = frameId;
340067f2:	f8c4 a0ec 	str.w	sl, [r4, #236]	@ 0xec
      stage = ISP_STAT_CFG_DOWN_BINS_9_11;
340067f6:	f017 0f06 	tst.w	r7, #6
340067fa:	bf0c      	ite	eq
340067fc:	2305      	moveq	r3, #5
340067fe:	2309      	movne	r3, #9
  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_DOWN)) && (ongoing->downFrameIdStart != 0))
34006800:	459b      	cmp	fp, r3
34006802:	d11e      	bne.n	34006842 <ISP_SVC_Stats_Gather+0x26e>
34006804:	f8d4 e0ec 	ldr.w	lr, [r4, #236]	@ 0xec
34006808:	f1be 0f00 	cmp.w	lr, #0
3400680c:	d019      	beq.n	34006842 <ISP_SVC_Stats_Gather+0x26e>
    ISP_SVC_StatEngine.last.down = ongoing->down;
3400680e:	4d34      	ldr	r5, [pc, #208]	@ (340068e0 <ISP_SVC_Stats_Gather+0x30c>)
    ISP_SVC_StatEngine.last.downFrameIdStart = ongoing->downFrameIdStart;
34006810:	e9c4 ea1d 	strd	lr, sl, [r4, #116]	@ 0x74
    ISP_SVC_StatEngine.last.down = ongoing->down;
34006814:	f105 0c78 	add.w	ip, r5, #120	@ 0x78
34006818:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
3400681c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
3400681e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
34006822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34006824:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
34006828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
3400682a:	4628      	mov	r0, r5
3400682c:	f8dc 3000 	ldr.w	r3, [ip]
    memset(&ongoing->down, 0, sizeof(ongoing->down));
34006830:	2234      	movs	r2, #52	@ 0x34
    ISP_SVC_StatEngine.last.down = ongoing->down;
34006832:	f840 3b48 	str.w	r3, [r0], #72
    memset(&ongoing->down, 0, sizeof(ongoing->down));
34006836:	2100      	movs	r1, #0
34006838:	f01a ff6c 	bl	34021714 <memset>
    ongoing->downFrameIdStart = 0;
3400683c:	2300      	movs	r3, #0
    ongoing->downFrameIdEnd = 0;
3400683e:	e9c4 333b 	strd	r3, r3, [r4, #236]	@ 0xec
  if (((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34006842:	ea48 0307 	orr.w	r3, r8, r7
34006846:	075a      	lsls	r2, r3, #29
34006848:	d50b      	bpl.n	34006862 <ISP_SVC_Stats_Gather+0x28e>
       (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP)) &&
3400684a:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
3400684e:	4553      	cmp	r3, sl
    ISP_SVC_StatEngine.upRequest &= ~ISP_STAT_TYPE_ALL_TMP;
34006850:	bf3f      	itttt	cc
34006852:	f028 0804 	biccc.w	r8, r8, #4
    ISP_SVC_StatEngine.downRequest &= ~ISP_STAT_TYPE_ALL_TMP;
34006856:	f027 0704 	biccc.w	r7, r7, #4
    ISP_SVC_StatEngine.upRequest &= ~ISP_STAT_TYPE_ALL_TMP;
3400685a:	f884 8158 	strbcc.w	r8, [r4, #344]	@ 0x158
    ISP_SVC_StatEngine.downRequest &= ~ISP_STAT_TYPE_ALL_TMP;
3400685e:	f884 7159 	strbcc.w	r7, [r4, #345]	@ 0x159
  stagePrevious2 = stagePrevious1;
34006862:	4b20      	ldr	r3, [pc, #128]	@ (340068e4 <ISP_SVC_Stats_Gather+0x310>)
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34006864:	f894 1158 	ldrb.w	r1, [r4, #344]	@ 0x158
  stagePrevious2 = stagePrevious1;
34006868:	781a      	ldrb	r2, [r3, #0]
3400686a:	f889 2000 	strb.w	r2, [r9]
  stagePrevious1 = ISP_SVC_StatEngine.stage;
3400686e:	7822      	ldrb	r2, [r4, #0]
34006870:	701a      	strb	r2, [r3, #0]
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34006872:	074b      	lsls	r3, r1, #29
34006874:	d403      	bmi.n	3400687e <ISP_SVC_Stats_Gather+0x2aa>
      (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
34006876:	f894 3159 	ldrb.w	r3, [r4, #345]	@ 0x159
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
3400687a:	075f      	lsls	r7, r3, #29
3400687c:	d560      	bpl.n	34006940 <ISP_SVC_Stats_Gather+0x36c>
    next = (ISP_SVC_StatEngineStage) ((current < ISP_STAT_CFG_LAST) ? current + 1 : ISP_STAT_CFG_UP_AVG);
3400687e:	1c53      	adds	r3, r2, #1
34006880:	b2db      	uxtb	r3, r3
34006882:	2a09      	cmp	r2, #9
34006884:	bf38      	it	cc
34006886:	461e      	movcc	r6, r3
  ISP_SVC_StatEngine.stage = GetNextStatStage(ISP_SVC_StatEngine.stage);
34006888:	7026      	strb	r6, [r4, #0]
3400688a:	e767      	b.n	3400675c <ISP_SVC_Stats_Gather+0x188>
3400688c:	3402c262 	.word	0x3402c262
34006890:	340d18bc 	.word	0x340d18bc
34006894:	340d193c 	.word	0x340d193c
34006898:	340d1948 	.word	0x340d1948
3400689c:	340d1954 	.word	0x340d1954
340068a0:	340d1960 	.word	0x340d1960
340068a4:	340d1a1c 	.word	0x340d1a1c
340068a8:	340d1970 	.word	0x340d1970
340068ac:	340d197c 	.word	0x340d197c
340068b0:	340d1988 	.word	0x340d1988
340068b4:	340d1994 	.word	0x340d1994
340068b8:	3402c27d 	.word	0x3402c27d
340068bc:	34031378 	.word	0x34031378
340068c0:	3403136c 	.word	0x3403136c
340068c4:	34031360 	.word	0x34031360
340068c8:	34031354 	.word	0x34031354
340068cc:	34031348 	.word	0x34031348
340068d0:	3403133c 	.word	0x3403133c
340068d4:	34031330 	.word	0x34031330
340068d8:	34031324 	.word	0x34031324
340068dc:	3402c2ab 	.word	0x3402c2ab
340068e0:	340d18f4 	.word	0x340d18f4
340068e4:	340cc724 	.word	0x340cc724
340068e8:	340cc725 	.word	0x340cc725
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS) ||
340068ec:	f018 0f06 	tst.w	r8, #6
340068f0:	bf14      	ite	ne
340068f2:	2301      	movne	r3, #1
340068f4:	2300      	moveq	r3, #0
  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_UP)) && (ongoing->upFrameIdStart != 0))
340068f6:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
340068fa:	f47f af7c 	bne.w	340067f6 <ISP_SVC_Stats_Gather+0x222>
340068fe:	f8d4 e0e4 	ldr.w	lr, [r4, #228]	@ 0xe4
34006902:	f1be 0f00 	cmp.w	lr, #0
34006906:	f43f af76 	beq.w	340067f6 <ISP_SVC_Stats_Gather+0x222>
    ISP_SVC_StatEngine.last.up = ongoing->up;
3400690a:	4d2f      	ldr	r5, [pc, #188]	@ (340069c8 <ISP_SVC_Stats_Gather+0x3f4>)
    ISP_SVC_StatEngine.last.upFrameIdStart = ongoing->upFrameIdStart;
3400690c:	e9c4 ea1b 	strd	lr, sl, [r4, #108]	@ 0x6c
    ISP_SVC_StatEngine.last.up = ongoing->up;
34006910:	f105 0c78 	add.w	ip, r5, #120	@ 0x78
34006914:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
34006918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
3400691a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
3400691e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34006920:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
34006924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34006926:	4628      	mov	r0, r5
34006928:	f8dc 3000 	ldr.w	r3, [ip]
    memset(&ongoing->up, 0, sizeof(ongoing->up));
3400692c:	2234      	movs	r2, #52	@ 0x34
    ISP_SVC_StatEngine.last.up = ongoing->up;
3400692e:	f840 3b48 	str.w	r3, [r0], #72
    memset(&ongoing->up, 0, sizeof(ongoing->up));
34006932:	2100      	movs	r1, #0
34006934:	f01a feee 	bl	34021714 <memset>
    ongoing->upFrameIdStart = 0;
34006938:	2300      	movs	r3, #0
    ongoing->upFrameIdEnd = 0;
3400693a:	e9c4 3339 	strd	r3, r3, [r4, #228]	@ 0xe4
3400693e:	e75a      	b.n	340067f6 <ISP_SVC_Stats_Gather+0x222>
  switch (current)
34006940:	2a09      	cmp	r2, #9
34006942:	d836      	bhi.n	340069b2 <ISP_SVC_Stats_Gather+0x3de>
34006944:	e8df f002 	tbb	[pc, r2]
34006948:	35353505 	.word	0x35353505
3400694c:	35351d11 	.word	0x35351d11
34006950:	2a35      	.short	0x2a35
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34006952:	078d      	lsls	r5, r1, #30
34006954:	d434      	bmi.n	340069c0 <ISP_SVC_Stats_Gather+0x3ec>
    else if (ISP_SVC_StatEngine.downRequest &  ISP_STAT_TYPE_AVG)
34006956:	07d8      	lsls	r0, r3, #31
34006958:	d434      	bmi.n	340069c4 <ISP_SVC_Stats_Gather+0x3f0>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3400695a:	f013 0602 	ands.w	r6, r3, #2
3400695e:	d12b      	bne.n	340069b8 <ISP_SVC_Stats_Gather+0x3e4>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
34006960:	f011 0f01 	tst.w	r1, #1
34006964:	bf08      	it	eq
34006966:	2609      	moveq	r6, #9
34006968:	e78e      	b.n	34006888 <ISP_SVC_Stats_Gather+0x2b4>
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
3400696a:	07da      	lsls	r2, r3, #31
3400696c:	d42a      	bmi.n	340069c4 <ISP_SVC_Stats_Gather+0x3f0>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3400696e:	f013 0602 	ands.w	r6, r3, #2
34006972:	d121      	bne.n	340069b8 <ISP_SVC_Stats_Gather+0x3e4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34006974:	07cb      	lsls	r3, r1, #31
34006976:	d487      	bmi.n	34006888 <ISP_SVC_Stats_Gather+0x2b4>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
34006978:	f011 0f02 	tst.w	r1, #2
3400697c:	bf18      	it	ne
3400697e:	2601      	movne	r6, #1
34006980:	e7f0      	b.n	34006964 <ISP_SVC_Stats_Gather+0x390>
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
34006982:	f013 0602 	ands.w	r6, r3, #2
34006986:	d117      	bne.n	340069b8 <ISP_SVC_Stats_Gather+0x3e4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34006988:	07cf      	lsls	r7, r1, #31
3400698a:	f53f af7d 	bmi.w	34006888 <ISP_SVC_Stats_Gather+0x2b4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
3400698e:	078d      	lsls	r5, r1, #30
34006990:	d416      	bmi.n	340069c0 <ISP_SVC_Stats_Gather+0x3ec>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
34006992:	f013 0f01 	tst.w	r3, #1
34006996:	bf18      	it	ne
34006998:	4616      	movne	r6, r2
3400699a:	e7e3      	b.n	34006964 <ISP_SVC_Stats_Gather+0x390>
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3400699c:	07c8      	lsls	r0, r1, #31
3400699e:	d40d      	bmi.n	340069bc <ISP_SVC_Stats_Gather+0x3e8>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
340069a0:	0789      	lsls	r1, r1, #30
340069a2:	d40d      	bmi.n	340069c0 <ISP_SVC_Stats_Gather+0x3ec>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
340069a4:	07da      	lsls	r2, r3, #31
340069a6:	d40d      	bmi.n	340069c4 <ISP_SVC_Stats_Gather+0x3f0>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
340069a8:	f013 0f02 	tst.w	r3, #2
340069ac:	bf18      	it	ne
340069ae:	2606      	movne	r6, #6
340069b0:	e7d8      	b.n	34006964 <ISP_SVC_Stats_Gather+0x390>
    next = (ISP_SVC_StatEngineStage) (current + 1);
340069b2:	3201      	adds	r2, #1
340069b4:	b2d6      	uxtb	r6, r2
    break;
340069b6:	e767      	b.n	34006888 <ISP_SVC_Stats_Gather+0x2b4>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
340069b8:	2606      	movs	r6, #6
340069ba:	e765      	b.n	34006888 <ISP_SVC_Stats_Gather+0x2b4>
    next = (ISP_SVC_StatEngineStage) ((current < ISP_STAT_CFG_LAST) ? current + 1 : ISP_STAT_CFG_UP_AVG);
340069bc:	2600      	movs	r6, #0
340069be:	e763      	b.n	34006888 <ISP_SVC_Stats_Gather+0x2b4>
      next = ISP_STAT_CFG_UP_BINS_0_2;
340069c0:	2601      	movs	r6, #1
340069c2:	e761      	b.n	34006888 <ISP_SVC_Stats_Gather+0x2b4>
      next = ISP_STAT_CFG_DOWN_AVG;
340069c4:	2605      	movs	r6, #5
340069c6:	e75f      	b.n	34006888 <ISP_SVC_Stats_Gather+0x2b4>
340069c8:	340d18c0 	.word	0x340d18c0

340069cc <ISP_SVC_Stats_ProcessCallbacks>:
  *         If the conditions are met, call the client registered callbacks
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_ProcessCallbacks(ISP_HandleTypeDef *hIsp)
{
340069cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  (void)hIsp; /* unused */
  ISP_SVC_StatStateTypeDef *pLastStat;
  ISP_SVC_StatRegisteredClient *client;
  ISP_StatusTypeDef retcb, ret = ISP_OK;
340069d0:	2500      	movs	r5, #0
340069d2:	4c1c      	ldr	r4, [pc, #112]	@ (34006a44 <ISP_SVC_Stats_ProcessCallbacks+0x78>)
{
340069d4:	2705      	movs	r7, #5
340069d6:	4626      	mov	r6, r4
      {
        ret = retcb;
      }

      /* Remove the client from the registered list */
      client->callback = NULL;
340069d8:	46a9      	mov	r9, r5
      *(client->pStats) = *pLastStat;
340069da:	f104 0804 	add.w	r8, r4, #4
    if (client->callback == NULL)
340069de:	f8d4 a0f4 	ldr.w	sl, [r4, #244]	@ 0xf4
340069e2:	f1ba 0f00 	cmp.w	sl, #0
340069e6:	d016      	beq.n	34006a16 <ISP_SVC_Stats_ProcessCallbacks+0x4a>
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
340069e8:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
340069ec:	2b02      	cmp	r3, #2
340069ee:	d119      	bne.n	34006a24 <ISP_SVC_Stats_ProcessCallbacks+0x58>
340069f0:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
340069f4:	6f73      	ldr	r3, [r6, #116]	@ 0x74
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
340069f6:	429a      	cmp	r2, r3
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
340069f8:	d80d      	bhi.n	34006a16 <ISP_SVC_Stats_ProcessCallbacks+0x4a>
      *(client->pStats) = *pLastStat;
340069fa:	2278      	movs	r2, #120	@ 0x78
340069fc:	4641      	mov	r1, r8
340069fe:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
34006a02:	f01b f936 	bl	34021c72 <memcpy>
      retcb = client->callback(client->pAlgo);
34006a06:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34006a0a:	47d0      	blx	sl
      if (retcb != ISP_OK)
34006a0c:	2800      	cmp	r0, #0
      client->callback = NULL;
34006a0e:	bf18      	it	ne
34006a10:	4605      	movne	r5, r0
34006a12:	f8c4 90f4 	str.w	r9, [r4, #244]	@ 0xf4
  for (uint32_t i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34006a16:	3f01      	subs	r7, #1
34006a18:	f104 0414 	add.w	r4, r4, #20
34006a1c:	d1df      	bne.n	340069de <ISP_SVC_Stats_ProcessCallbacks+0x12>
    }
  }

  return ret;
}
34006a1e:	4628      	mov	r0, r5
34006a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
34006a24:	2b01      	cmp	r3, #1
34006a26:	d103      	bne.n	34006a30 <ISP_SVC_Stats_ProcessCallbacks+0x64>
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
34006a28:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
34006a2c:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
34006a2e:	e7e2      	b.n	340069f6 <ISP_SVC_Stats_ProcessCallbacks+0x2a>
34006a30:	2b03      	cmp	r3, #3
34006a32:	d1f0      	bne.n	34006a16 <ISP_SVC_Stats_ProcessCallbacks+0x4a>
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
34006a34:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34006a38:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
34006a3a:	4293      	cmp	r3, r2
34006a3c:	d8eb      	bhi.n	34006a16 <ISP_SVC_Stats_ProcessCallbacks+0x4a>
34006a3e:	6f72      	ldr	r2, [r6, #116]	@ 0x74
34006a40:	4293      	cmp	r3, r2
34006a42:	e7d9      	b.n	340069f8 <ISP_SVC_Stats_ProcessCallbacks+0x2c>
34006a44:	340d18bc 	.word	0x340d18bc

34006a48 <ISP_SVC_Stats_GetNext>:
  * @param  frameDelay: number of frames to wait before considering the stats as valid
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_GetNext(ISP_HandleTypeDef *hIsp, ISP_stat_ready_cb callback, ISP_AlgoTypeDef *pAlgo, ISP_SVC_StatStateTypeDef *pStats,
                                        ISP_SVC_StatLocation location, ISP_SVC_StatType type, uint32_t frameDelay)
{
34006a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34006a4c:	4691      	mov	r9, r2
34006a4e:	f89d c01c 	ldrb.w	ip, [sp, #28]
34006a52:	f89d 5020 	ldrb.w	r5, [sp, #32]
  uint32_t i, refFrameId;

  /* Check handle validity */
  if ((hIsp == NULL) || (pStats == NULL))
34006a56:	b1b0      	cbz	r0, 34006a86 <ISP_SVC_Stats_GetNext+0x3e>
34006a58:	b1ab      	cbz	r3, 34006a86 <ISP_SVC_Stats_GetNext+0x3e>
  return hIsp->MainPipe_FrameCount;
34006a5a:	4e1e      	ldr	r6, [pc, #120]	@ (34006ad4 <ISP_SVC_Stats_GetNext+0x8c>)
  }

  refFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp) + frameDelay;

  /* Register the callback */
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34006a5c:	f04f 0e00 	mov.w	lr, #0
34006a60:	4634      	mov	r4, r6
34006a62:	f04f 0805 	mov.w	r8, #5
  return hIsp->MainPipe_FrameCount;
34006a66:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  refFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp) + frameDelay;
34006a68:	9f09      	ldr	r7, [sp, #36]	@ 0x24
34006a6a:	4407      	add	r7, r0
  {
    if (ISP_SVC_StatEngine.client[i].callback == NULL)
34006a6c:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
34006a70:	b15a      	cbz	r2, 34006a8a <ISP_SVC_Stats_GetNext+0x42>
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34006a72:	f1b8 0801 	subs.w	r8, r8, #1
34006a76:	f10e 0e01 	add.w	lr, lr, #1
34006a7a:	f106 0614 	add.w	r6, r6, #20
34006a7e:	d1f5      	bne.n	34006a6c <ISP_SVC_Stats_GetNext+0x24>
  }

  if (i == ISP_SVC_STAT_MAX_CB)
  {
    /* Too much callback registered */
    return ISP_ERR_STAT_MAXCLIENTS;
34006a80:	20ac      	movs	r0, #172	@ 0xac
  ISP_SVC_StatEngine.client[i].location = location;
  ISP_SVC_StatEngine.client[i].type = type;
  ISP_SVC_StatEngine.client[i].refFrameId = refFrameId;

  return ISP_OK;
}
34006a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ISP_ERR_EINVAL;
34006a86:	2001      	movs	r0, #1
34006a88:	e7fb      	b.n	34006a82 <ISP_SVC_Stats_GetNext+0x3a>
  if (location & ISP_STAT_LOC_UP)
34006a8a:	f01c 0f01 	tst.w	ip, #1
34006a8e:	d004      	beq.n	34006a9a <ISP_SVC_Stats_GetNext+0x52>
    ISP_SVC_StatEngine.upRequest |= type;
34006a90:	f894 6158 	ldrb.w	r6, [r4, #344]	@ 0x158
34006a94:	432e      	orrs	r6, r5
34006a96:	f884 6158 	strb.w	r6, [r4, #344]	@ 0x158
  if (location & ISP_STAT_LOC_DOWN)
34006a9a:	f01c 0f02 	tst.w	ip, #2
    ISP_SVC_StatEngine.downRequest |= type;
34006a9e:	bf1e      	ittt	ne
34006aa0:	f894 6159 	ldrbne.w	r6, [r4, #345]	@ 0x159
34006aa4:	432e      	orrne	r6, r5
34006aa6:	f884 6159 	strbne.w	r6, [r4, #345]	@ 0x159
  if (type == ISP_STAT_TYPE_ALL_TMP)
34006aaa:	2d04      	cmp	r5, #4
    ISP_SVC_StatEngine.requestAllCounter = ISP_SVC_Misc_GetMainFrameId(hIsp) + 3 * ISP_STAT_CFG_CYCLE_SIZE;
34006aac:	bf04      	itt	eq
34006aae:	301e      	addeq	r0, #30
34006ab0:	f8c4 015c 	streq.w	r0, [r4, #348]	@ 0x15c
  ISP_SVC_StatEngine.client[i].callback = callback;
34006ab4:	2014      	movs	r0, #20
34006ab6:	fb00 400e 	mla	r0, r0, lr, r4
  ISP_SVC_StatEngine.client[i].pAlgo = pAlgo;
34006aba:	e9c0 193d 	strd	r1, r9, [r0, #244]	@ 0xf4
  ISP_SVC_StatEngine.client[i].pStats = pStats;
34006abe:	f8c0 30fc 	str.w	r3, [r0, #252]	@ 0xfc
  ISP_SVC_StatEngine.client[i].location = location;
34006ac2:	f880 c104 	strb.w	ip, [r0, #260]	@ 0x104
  ISP_SVC_StatEngine.client[i].type = type;
34006ac6:	f880 5105 	strb.w	r5, [r0, #261]	@ 0x105
  ISP_SVC_StatEngine.client[i].refFrameId = refFrameId;
34006aca:	f8c0 7100 	str.w	r7, [r0, #256]	@ 0x100
  return ISP_OK;
34006ace:	2000      	movs	r0, #0
34006ad0:	e7d7      	b.n	34006a82 <ISP_SVC_Stats_GetNext+0x3a>
34006ad2:	bf00      	nop
34006ad4:	340d18bc 	.word	0x340d18bc

34006ad8 <CB_ISP_GetSensorGain>:
  * @param  Gain     Gain in mdB
  * @retval CMW status
  */
int CMW_CAMERA_GetGain(int32_t *Gain)
{
  *Gain = Camera_Ctx.Gain;
34006ad8:	4b02      	ldr	r3, [pc, #8]	@ (34006ae4 <CB_ISP_GetSensorGain+0xc>)
{
  if (CMW_CAMERA_GetGain(gain) != CMW_ERROR_NONE)
    return ISP_ERR_SENSORGAIN;

  return ISP_OK;
}
34006ada:	2000      	movs	r0, #0
  *Gain = Camera_Ctx.Gain;
34006adc:	6a1b      	ldr	r3, [r3, #32]
34006ade:	600b      	str	r3, [r1, #0]
}
34006ae0:	4770      	bx	lr
34006ae2:	bf00      	nop
34006ae4:	340d1e38 	.word	0x340d1e38

34006ae8 <CB_ISP_GetSensorExposure>:
  *exposure = Camera_Ctx.Exposure;
34006ae8:	4b02      	ldr	r3, [pc, #8]	@ (34006af4 <CB_ISP_GetSensorExposure+0xc>)
{
  if (CMW_CAMERA_GetExposure(exposure) != CMW_ERROR_NONE)
    return ISP_ERR_SENSOREXPOSURE;

  return ISP_OK;
}
34006aea:	2000      	movs	r0, #0
  *exposure = Camera_Ctx.Exposure;
34006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006aee:	600b      	str	r3, [r1, #0]
}
34006af0:	4770      	bx	lr
34006af2:	bf00      	nop
34006af4:	340d1e38 	.word	0x340d1e38

34006af8 <CB_ISP_GetSensorInfo>:

static ISP_StatusTypeDef CB_ISP_GetSensorInfo(uint32_t camera_instance, ISP_SensorInfoTypeDef *Info)
{
34006af8:	b508      	push	{r3, lr}
  if(Camera_Drv.GetSensorInfo != NULL)
34006afa:	4b05      	ldr	r3, [pc, #20]	@ (34006b10 <CB_ISP_GetSensorInfo+0x18>)
34006afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006afe:	b113      	cbz	r3, 34006b06 <CB_ISP_GetSensorInfo+0xe>
  {
    if (Camera_Drv.GetSensorInfo(&camera_bsp, Info) != CMW_ERROR_NONE)
34006b00:	4804      	ldr	r0, [pc, #16]	@ (34006b14 <CB_ISP_GetSensorInfo+0x1c>)
34006b02:	4798      	blx	r3
34006b04:	b908      	cbnz	r0, 34006b0a <CB_ISP_GetSensorInfo+0x12>
      return ISP_ERR_SENSOREXPOSURE;
  }
  return ISP_OK;
34006b06:	2000      	movs	r0, #0
}
34006b08:	bd08      	pop	{r3, pc}
      return ISP_ERR_SENSOREXPOSURE;
34006b0a:	2083      	movs	r0, #131	@ 0x83
34006b0c:	e7fc      	b.n	34006b08 <CB_ISP_GetSensorInfo+0x10>
34006b0e:	bf00      	nop
34006b10:	340d1dc4 	.word	0x340d1dc4
34006b14:	340d1c84 	.word	0x340d1c84

34006b18 <CMW_CAMERA_EnablePin>:
  HAL_GPIO_WritePin(EN_CAM_PORT, EN_CAM_PIN, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
34006b18:	1e02      	subs	r2, r0, #0
34006b1a:	bf18      	it	ne
34006b1c:	2201      	movne	r2, #1
34006b1e:	2104      	movs	r1, #4
34006b20:	4801      	ldr	r0, [pc, #4]	@ (34006b28 <CMW_CAMERA_EnablePin+0x10>)
34006b22:	f00c b915 	b.w	34012d50 <HAL_GPIO_WritePin>
34006b26:	bf00      	nop
34006b28:	56020c00 	.word	0x56020c00

34006b2c <CMW_CAMERA_ShutdownPin>:
  HAL_GPIO_WritePin(NRST_CAM_PORT, NRST_CAM_PIN, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
34006b2c:	1e02      	subs	r2, r0, #0
34006b2e:	bf18      	it	ne
34006b30:	2201      	movne	r2, #1
34006b32:	f44f 7180 	mov.w	r1, #256	@ 0x100
34006b36:	4801      	ldr	r0, [pc, #4]	@ (34006b3c <CMW_CAMERA_ShutdownPin+0x10>)
34006b38:	f00c b90a 	b.w	34012d50 <HAL_GPIO_WritePin>
34006b3c:	56020800 	.word	0x56020800

34006b40 <CMW_CAMERA_Probe_Sensor.constprop.0>:

#if defined(USE_VD55G1_SENSOR)
static int32_t CMW_CAMERA_VD55G1_Init( CMW_Sensor_Init_t *initSensors_params)
{
  int32_t ret = CMW_ERROR_NONE;
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006b40:	2100      	movs	r1, #0
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName)
34006b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };

  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006b46:	4c6c      	ldr	r4, [pc, #432]	@ (34006cf8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b8>)
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName)
34006b48:	b099      	sub	sp, #100	@ 0x64
34006b4a:	4605      	mov	r5, r0
  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006b4c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
34006b50:	4620      	mov	r0, r4
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006b52:	e9cd 1103 	strd	r1, r1, [sp, #12]
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };
34006b56:	e9cd 1105 	strd	r1, r1, [sp, #20]
34006b5a:	e9cd 1107 	strd	r1, r1, [sp, #28]
  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006b5e:	f01a fdd9 	bl	34021714 <memset>
  camera_bsp.vd55g1_bsp.Address     = CAMERA_VD55G1_ADDRESS;
34006b62:	2320      	movs	r3, #32
  camera_bsp.vd55g1_bsp.Init        = CMW_I2C_INIT;
34006b64:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 34006d28 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1e8>
  camera_bsp.vd55g1_bsp.DeInit      = CMW_I2C_DEINIT;
34006b68:	f8df a1c0 	ldr.w	sl, [pc, #448]	@ 34006d2c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1ec>
  camera_bsp.vd55g1_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006b6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	@ 34006d30 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f0>
  camera_bsp.vd55g1_bsp.ReadReg     = CMW_I2C_READREG16;
34006b70:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 34006d34 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  camera_bsp.vd55g1_bsp.Delay       = HAL_Delay;
34006b74:	4f61      	ldr	r7, [pc, #388]	@ (34006cfc <CMW_CAMERA_Probe_Sensor.constprop.0+0x1bc>)
  camera_bsp.vd55g1_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006b76:	4e62      	ldr	r6, [pc, #392]	@ (34006d00 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c0>)
  camera_bsp.vd55g1_bsp.Address     = CAMERA_VD55G1_ADDRESS;
34006b78:	8023      	strh	r3, [r4, #0]
  camera_bsp.vd55g1_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006b7a:	4b62      	ldr	r3, [pc, #392]	@ (34006d04 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)

  ret = CMW_VD55G1_Probe(&camera_bsp.vd55g1_bsp, &Camera_Drv);
34006b7c:	4620      	mov	r0, r4
34006b7e:	4962      	ldr	r1, [pc, #392]	@ (34006d08 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
  camera_bsp.vd55g1_bsp.Init        = CMW_I2C_INIT;
34006b80:	f8c4 b070 	str.w	fp, [r4, #112]	@ 0x70
  camera_bsp.vd55g1_bsp.DeInit      = CMW_I2C_DEINIT;
34006b84:	f8c4 a074 	str.w	sl, [r4, #116]	@ 0x74
  camera_bsp.vd55g1_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006b88:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
  camera_bsp.vd55g1_bsp.ReadReg     = CMW_I2C_READREG16;
34006b8c:	f8c4 907c 	str.w	r9, [r4, #124]	@ 0x7c
  camera_bsp.vd55g1_bsp.Delay       = HAL_Delay;
34006b90:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
  camera_bsp.vd55g1_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006b94:	f8c4 6088 	str.w	r6, [r4, #136]	@ 0x88
  camera_bsp.vd55g1_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006b98:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  ret = CMW_VD55G1_Probe(&camera_bsp.vd55g1_bsp, &Camera_Drv);
34006b9c:	f000 ffc8 	bl	34007b30 <CMW_VD55G1_Probe>
  if (ret != CMW_ERROR_NONE)
34006ba0:	2800      	cmp	r0, #0
34006ba2:	d13f      	bne.n	34006c24 <CMW_CAMERA_Probe_Sensor.constprop.0+0xe4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  if ((connected_sensor != CMW_VD55G1_Sensor) && (connected_sensor != CMW_NOTKNOWN_Sensor))
34006ba4:	4b59      	ldr	r3, [pc, #356]	@ (34006d0c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1cc>)
34006ba6:	781b      	ldrb	r3, [r3, #0]
34006ba8:	2b03      	cmp	r3, #3
34006baa:	d001      	beq.n	34006bb0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x70>
34006bac:	2b00      	cmp	r3, #0
34006bae:	d139      	bne.n	34006c24 <CMW_CAMERA_Probe_Sensor.constprop.0+0xe4>
    /* If the selected sensor in the application side has selected a different sensors than VD55G1 */
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  /* Special case: when resolution is not specified take the full sensor resolution */
  if ((initSensors_params->width == 0) || (initSensors_params->height == 0))
34006bb0:	682b      	ldr	r3, [r5, #0]
34006bb2:	4a55      	ldr	r2, [pc, #340]	@ (34006d08 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006bb4:	b10b      	cbz	r3, 34006bba <CMW_CAMERA_Probe_Sensor.constprop.0+0x7a>
34006bb6:	686b      	ldr	r3, [r5, #4]
34006bb8:	b943      	cbnz	r3, 34006bcc <CMW_CAMERA_Probe_Sensor.constprop.0+0x8c>
  {
    ISP_SensorInfoTypeDef sensor_info;
    Camera_Drv.GetSensorInfo(&camera_bsp, &sensor_info);
34006bba:	6e13      	ldr	r3, [r2, #96]	@ 0x60
34006bbc:	484e      	ldr	r0, [pc, #312]	@ (34006cf8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b8>)
34006bbe:	a909      	add	r1, sp, #36	@ 0x24
34006bc0:	4798      	blx	r3
    initSensors_params->width = sensor_info.width;
34006bc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    initSensors_params->height = sensor_info.height;
34006bc4:	4a50      	ldr	r2, [pc, #320]	@ (34006d08 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
    initSensors_params->width = sensor_info.width;
34006bc6:	602b      	str	r3, [r5, #0]
    initSensors_params->height = sensor_info.height;
34006bc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
34006bca:	606b      	str	r3, [r5, #4]
  }

  ret = Camera_Drv.Init(&camera_bsp, initSensors_params);
34006bcc:	4629      	mov	r1, r5
34006bce:	6813      	ldr	r3, [r2, #0]
34006bd0:	4849      	ldr	r0, [pc, #292]	@ (34006cf8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b8>)
34006bd2:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006bd4:	bb30      	cbnz	r0, 34006c24 <CMW_CAMERA_Probe_Sensor.constprop.0+0xe4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  csi_conf.NumberOfLanes = DCMIPP_CSI_ONE_DATA_LANE;
  csi_conf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34006bd6:	f44f 7080 	mov.w	r0, #256	@ 0x100
34006bda:	2301      	movs	r3, #1
34006bdc:	e9cd 0303 	strd	r0, r3, [sp, #12]
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006be0:	231c      	movs	r3, #28
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006be2:	a903      	add	r1, sp, #12
34006be4:	484a      	ldr	r0, [pc, #296]	@ (34006d10 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d0>)
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006be6:	9305      	str	r3, [sp, #20]
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006be8:	f008 fe3a 	bl	3400f860 <HAL_DCMIPP_CSI_SetConfig>
  if (ret != HAL_OK)
34006bec:	4601      	mov	r1, r0
34006bee:	b9c8      	cbnz	r0, 34006c24 <CMW_CAMERA_Probe_Sensor.constprop.0+0xe4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  ret = HAL_DCMIPP_CSI_SetVCConfig(&hcamera_dcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP8);
34006bf0:	2202      	movs	r2, #2
34006bf2:	4847      	ldr	r0, [pc, #284]	@ (34006d10 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d0>)
34006bf4:	f008 ffa4 	bl	3400fb40 <HAL_DCMIPP_CSI_SetVCConfig>
  if (ret != HAL_OK)
34006bf8:	4601      	mov	r1, r0
34006bfa:	b998      	cbnz	r0, 34006c24 <CMW_CAMERA_Probe_Sensor.constprop.0+0xe4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
  csi_pipe_conf.DataTypeIDA = DCMIPP_DT_RAW8;
34006bfc:	232a      	movs	r3, #42	@ 0x2a
  csi_pipe_conf.DataTypeIDB = 0;
34006bfe:	e9cd 3007 	strd	r3, r0, [sp, #28]
  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34006c02:	9006      	str	r0, [sp, #24]
  /* Pre-initialize CSI config for all the pipes */
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
  {
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006c04:	4842      	ldr	r0, [pc, #264]	@ (34006d10 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d0>)
34006c06:	aa06      	add	r2, sp, #24
34006c08:	9101      	str	r1, [sp, #4]
34006c0a:	f008 fee5 	bl	3400f9d8 <HAL_DCMIPP_CSI_PIPE_SetConfig>
    if (ret != HAL_OK)
34006c0e:	b948      	cbnz	r0, 34006c24 <CMW_CAMERA_Probe_Sensor.constprop.0+0xe4>
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
34006c10:	9901      	ldr	r1, [sp, #4]
34006c12:	3101      	adds	r1, #1
34006c14:	2903      	cmp	r1, #3
34006c16:	d1f5      	bne.n	34006c04 <CMW_CAMERA_Probe_Sensor.constprop.0+0xc4>
    return ret;
34006c18:	2000      	movs	r0, #0
    *sensorName = CMW_VD66GY_Sensor;
34006c1a:	4b3c      	ldr	r3, [pc, #240]	@ (34006d0c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1cc>)
34006c1c:	7019      	strb	r1, [r3, #0]
}
34006c1e:	b019      	add	sp, #100	@ 0x64
34006c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

#if defined(USE_VD66GY_SENSOR)
static int32_t CMW_CAMERA_VD66GY_Init( CMW_Sensor_Init_t *initSensors_params)
{
  int32_t ret = CMW_ERROR_NONE;
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006c24:	2100      	movs	r1, #0
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };

  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006c26:	f44f 72a0 	mov.w	r2, #320	@ 0x140
34006c2a:	4833      	ldr	r0, [pc, #204]	@ (34006cf8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b8>)
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006c2c:	e9cd 1103 	strd	r1, r1, [sp, #12]
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };
34006c30:	e9cd 1105 	strd	r1, r1, [sp, #20]
34006c34:	e9cd 1107 	strd	r1, r1, [sp, #28]
  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006c38:	f01a fd6c 	bl	34021714 <memset>
  camera_bsp.vd66gy_bsp.Address     = CAMERA_VD66GY_ADDRESS;
34006c3c:	2320      	movs	r3, #32
34006c3e:	8023      	strh	r3, [r4, #0]
  camera_bsp.vd66gy_bsp.DeInit      = CMW_I2C_DEINIT;
  camera_bsp.vd66gy_bsp.ReadReg     = CMW_I2C_READREG16;
  camera_bsp.vd66gy_bsp.WriteReg    = CMW_I2C_WRITEREG16;
  camera_bsp.vd66gy_bsp.Delay       = HAL_Delay;
  camera_bsp.vd66gy_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
  camera_bsp.vd66gy_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006c40:	4b30      	ldr	r3, [pc, #192]	@ (34006d04 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;

  ret = CMW_VD66GY_Probe(&camera_bsp.vd66gy_bsp, &Camera_Drv);
34006c42:	4931      	ldr	r1, [pc, #196]	@ (34006d08 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
  camera_bsp.vd66gy_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006c44:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
  camera_bsp.vd66gy_bsp.hdcmipp     = &hcamera_dcmipp;
34006c48:	4b31      	ldr	r3, [pc, #196]	@ (34006d10 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d0>)
  ret = CMW_VD66GY_Probe(&camera_bsp.vd66gy_bsp, &Camera_Drv);
34006c4a:	482b      	ldr	r0, [pc, #172]	@ (34006cf8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b8>)
  camera_bsp.vd66gy_bsp.hdcmipp     = &hcamera_dcmipp;
34006c4c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006c50:	4b30      	ldr	r3, [pc, #192]	@ (34006d14 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d4>)
  camera_bsp.vd66gy_bsp.DeInit      = CMW_I2C_DEINIT;
34006c52:	e9c4 ba48 	strd	fp, sl, [r4, #288]	@ 0x120
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006c56:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
34006c5a:	4b2f      	ldr	r3, [pc, #188]	@ (34006d18 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d8>)
  camera_bsp.vd66gy_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006c5c:	e9c4 894a 	strd	r8, r9, [r4, #296]	@ 0x128
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
34006c60:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
34006c64:	4b2d      	ldr	r3, [pc, #180]	@ (34006d1c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1dc>)
  camera_bsp.vd66gy_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006c66:	e9c4 764d 	strd	r7, r6, [r4, #308]	@ 0x134
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
34006c6a:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
34006c6e:	4b2c      	ldr	r3, [pc, #176]	@ (34006d20 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1e0>)
34006c70:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;
34006c74:	4b2b      	ldr	r3, [pc, #172]	@ (34006d24 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1e4>)
34006c76:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  ret = CMW_VD66GY_Probe(&camera_bsp.vd66gy_bsp, &Camera_Drv);
34006c7a:	f001 fb2d 	bl	340082d8 <CMW_VD66GY_Probe>
  if (ret != CMW_ERROR_NONE)
34006c7e:	2800      	cmp	r0, #0
34006c80:	d15a      	bne.n	34006d38 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f8>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  if ((connected_sensor != CMW_VD66GY_Sensor) && (connected_sensor != CMW_NOTKNOWN_Sensor))
34006c82:	4b22      	ldr	r3, [pc, #136]	@ (34006d0c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1cc>)
34006c84:	781b      	ldrb	r3, [r3, #0]
34006c86:	2b01      	cmp	r3, #1
34006c88:	d856      	bhi.n	34006d38 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f8>
    /* If the selected sensor in the application side has selected a different sensors than VD66GY */
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  /* Special case: when resolution is not specified take the full sensor resolution */
  if ((initSensors_params->width == 0) || (initSensors_params->height == 0))
34006c8a:	682b      	ldr	r3, [r5, #0]
34006c8c:	b10b      	cbz	r3, 34006c92 <CMW_CAMERA_Probe_Sensor.constprop.0+0x152>
34006c8e:	686b      	ldr	r3, [r5, #4]
34006c90:	b943      	cbnz	r3, 34006ca4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x164>
  {
    ISP_SensorInfoTypeDef sensor_info;
    Camera_Drv.GetSensorInfo(&camera_bsp, &sensor_info);
34006c92:	4b1d      	ldr	r3, [pc, #116]	@ (34006d08 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006c94:	4818      	ldr	r0, [pc, #96]	@ (34006cf8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b8>)
34006c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006c98:	a909      	add	r1, sp, #36	@ 0x24
34006c9a:	4798      	blx	r3
    initSensors_params->width = sensor_info.width;
34006c9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
34006c9e:	602b      	str	r3, [r5, #0]
    initSensors_params->height = sensor_info.height;
34006ca0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
34006ca2:	606b      	str	r3, [r5, #4]
  }

  ret = Camera_Drv.Init(&camera_bsp, initSensors_params);
34006ca4:	4b18      	ldr	r3, [pc, #96]	@ (34006d08 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006ca6:	4629      	mov	r1, r5
34006ca8:	681b      	ldr	r3, [r3, #0]
34006caa:	4813      	ldr	r0, [pc, #76]	@ (34006cf8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b8>)
34006cac:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006cae:	2800      	cmp	r0, #0
34006cb0:	d142      	bne.n	34006d38 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f8>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  csi_conf.NumberOfLanes = DCMIPP_CSI_TWO_DATA_LANES;
  csi_conf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34006cb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
34006cb6:	2301      	movs	r3, #1
34006cb8:	e9cd 1303 	strd	r1, r3, [sp, #12]
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006cbc:	231c      	movs	r3, #28
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006cbe:	a903      	add	r1, sp, #12
34006cc0:	4813      	ldr	r0, [pc, #76]	@ (34006d10 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d0>)
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006cc2:	9305      	str	r3, [sp, #20]
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006cc4:	f008 fdcc 	bl	3400f860 <HAL_DCMIPP_CSI_SetConfig>
  if (ret != HAL_OK)
34006cc8:	4601      	mov	r1, r0
34006cca:	bba8      	cbnz	r0, 34006d38 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f8>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  ret = HAL_DCMIPP_CSI_SetVCConfig(&hcamera_dcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP8);
34006ccc:	2202      	movs	r2, #2
34006cce:	4810      	ldr	r0, [pc, #64]	@ (34006d10 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d0>)
34006cd0:	f008 ff36 	bl	3400fb40 <HAL_DCMIPP_CSI_SetVCConfig>
  if (ret != HAL_OK)
34006cd4:	bb80      	cbnz	r0, 34006d38 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f8>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
  csi_pipe_conf.DataTypeIDA = DCMIPP_DT_RAW8;
34006cd6:	232a      	movs	r3, #42	@ 0x2a
  csi_pipe_conf.DataTypeIDB = 0;
  /* Pre-initialize CSI config for all the pipes */
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
34006cd8:	4601      	mov	r1, r0
  csi_pipe_conf.DataTypeIDB = 0;
34006cda:	e9cd 3007 	strd	r3, r0, [sp, #28]
  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34006cde:	9006      	str	r0, [sp, #24]
  {
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006ce0:	480b      	ldr	r0, [pc, #44]	@ (34006d10 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d0>)
34006ce2:	aa06      	add	r2, sp, #24
34006ce4:	9101      	str	r1, [sp, #4]
34006ce6:	f008 fe77 	bl	3400f9d8 <HAL_DCMIPP_CSI_PIPE_SetConfig>
    if (ret != HAL_OK)
34006cea:	bb28      	cbnz	r0, 34006d38 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f8>
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
34006cec:	9901      	ldr	r1, [sp, #4]
34006cee:	3101      	adds	r1, #1
34006cf0:	2903      	cmp	r1, #3
34006cf2:	d1f5      	bne.n	34006ce0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1a0>
    return ret;
34006cf4:	2101      	movs	r1, #1
34006cf6:	e78f      	b.n	34006c18 <CMW_CAMERA_Probe_Sensor.constprop.0+0xd8>
34006cf8:	340d1c84 	.word	0x340d1c84
34006cfc:	3401eee1 	.word	0x3401eee1
34006d00:	34006b2d 	.word	0x34006b2d
34006d04:	34006b19 	.word	0x34006b19
34006d08:	340d1dc4 	.word	0x340d1dc4
34006d0c:	340d1e78 	.word	0x340d1e78
34006d10:	340d1e2c 	.word	0x340d1e2c
34006d14:	34007145 	.word	0x34007145
34006d18:	34006ad9 	.word	0x34006ad9
34006d1c:	34007189 	.word	0x34007189
34006d20:	34006ae9 	.word	0x34006ae9
34006d24:	34006af9 	.word	0x34006af9
34006d28:	3400dd45 	.word	0x3400dd45
34006d2c:	3400dcb5 	.word	0x3400dcb5
34006d30:	3400de05 	.word	0x3400de05
34006d34:	3400de3d 	.word	0x3400de3d

#if defined(USE_IMX335_SENSOR)
static int32_t CMW_CAMERA_IMX335_Init(CMW_Sensor_Init_t *initSensors_params)
{
  int32_t ret = CMW_ERROR_NONE;
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006d38:	2100      	movs	r1, #0
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };

  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006d3a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
34006d3e:	483b      	ldr	r0, [pc, #236]	@ (34006e2c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006d40:	e9cd 1103 	strd	r1, r1, [sp, #12]
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };
34006d44:	e9cd 1105 	strd	r1, r1, [sp, #20]
34006d48:	e9cd 1107 	strd	r1, r1, [sp, #28]
  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006d4c:	f01a fce2 	bl	34021714 <memset>
  camera_bsp.imx335_bsp.Address     = CAMERA_IMX335_ADDRESS;
34006d50:	2334      	movs	r3, #52	@ 0x34
34006d52:	8023      	strh	r3, [r4, #0]
  camera_bsp.imx335_bsp.Init        = CMW_I2C_INIT;
  camera_bsp.imx335_bsp.DeInit      = CMW_I2C_DEINIT;
  camera_bsp.imx335_bsp.ReadReg     = CMW_I2C_READREG16;
  camera_bsp.imx335_bsp.WriteReg    = CMW_I2C_WRITEREG16;
  camera_bsp.imx335_bsp.GetTick     = BSP_GetTick;
34006d54:	4b36      	ldr	r3, [pc, #216]	@ (34006e30 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f0>)
  camera_bsp.imx335_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
  camera_bsp.imx335_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
  camera_bsp.imx335_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
  camera_bsp.imx335_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;

  ret = CMW_IMX335_Probe(&camera_bsp.imx335_bsp, &Camera_Drv);
34006d56:	4937      	ldr	r1, [pc, #220]	@ (34006e34 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f4>)
  camera_bsp.imx335_bsp.Delay       = HAL_Delay;
34006d58:	e9c4 373d 	strd	r3, r7, [r4, #244]	@ 0xf4
  camera_bsp.imx335_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006d5c:	4b36      	ldr	r3, [pc, #216]	@ (34006e38 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f8>)
  ret = CMW_IMX335_Probe(&camera_bsp.imx335_bsp, &Camera_Drv);
34006d5e:	4833      	ldr	r0, [pc, #204]	@ (34006e2c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
  camera_bsp.imx335_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006d60:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  camera_bsp.imx335_bsp.hdcmipp     = &hcamera_dcmipp;
34006d64:	4b35      	ldr	r3, [pc, #212]	@ (34006e3c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2fc>)
  camera_bsp.imx335_bsp.DeInit      = CMW_I2C_DEINIT;
34006d66:	e9c4 ba39 	strd	fp, sl, [r4, #228]	@ 0xe4
  camera_bsp.imx335_bsp.hdcmipp     = &hcamera_dcmipp;
34006d6a:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
  camera_bsp.imx335_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006d6e:	4b34      	ldr	r3, [pc, #208]	@ (34006e40 <CMW_CAMERA_Probe_Sensor.constprop.0+0x300>)
  camera_bsp.imx335_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006d70:	e9c4 893b 	strd	r8, r9, [r4, #236]	@ 0xec
  camera_bsp.imx335_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006d74:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
  camera_bsp.imx335_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
34006d78:	4b32      	ldr	r3, [pc, #200]	@ (34006e44 <CMW_CAMERA_Probe_Sensor.constprop.0+0x304>)
  camera_bsp.imx335_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006d7a:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
  camera_bsp.imx335_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
34006d7e:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
  camera_bsp.imx335_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
34006d82:	4b31      	ldr	r3, [pc, #196]	@ (34006e48 <CMW_CAMERA_Probe_Sensor.constprop.0+0x308>)
34006d84:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
  camera_bsp.imx335_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
34006d88:	4b30      	ldr	r3, [pc, #192]	@ (34006e4c <CMW_CAMERA_Probe_Sensor.constprop.0+0x30c>)
34006d8a:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
  camera_bsp.imx335_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;
34006d8e:	4b30      	ldr	r3, [pc, #192]	@ (34006e50 <CMW_CAMERA_Probe_Sensor.constprop.0+0x310>)
34006d90:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
  ret = CMW_IMX335_Probe(&camera_bsp.imx335_bsp, &Camera_Drv);
34006d94:	f000 fcf0 	bl	34007778 <CMW_IMX335_Probe>
  if (ret != CMW_ERROR_NONE)
34006d98:	2800      	cmp	r0, #0
34006d9a:	d143      	bne.n	34006e24 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  if ((connected_sensor != CMW_IMX335_Sensor) && (connected_sensor != CMW_NOTKNOWN_Sensor))
34006d9c:	4b2d      	ldr	r3, [pc, #180]	@ (34006e54 <CMW_CAMERA_Probe_Sensor.constprop.0+0x314>)
34006d9e:	781b      	ldrb	r3, [r3, #0]
34006da0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
34006da4:	d13e      	bne.n	34006e24 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>
    /* If the selected sensor in the application side has selected a different sensors than IMX335 */
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  /* Special case: when resolution is not specified take the full sensor resolution */
  if ((initSensors_params->width == 0) || (initSensors_params->height == 0))
34006da6:	682b      	ldr	r3, [r5, #0]
34006da8:	4c22      	ldr	r4, [pc, #136]	@ (34006e34 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f4>)
34006daa:	b10b      	cbz	r3, 34006db0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x270>
34006dac:	686b      	ldr	r3, [r5, #4]
34006dae:	b93b      	cbnz	r3, 34006dc0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x280>
  {
    ISP_SensorInfoTypeDef sensor_info;
    Camera_Drv.GetSensorInfo(&camera_bsp, &sensor_info);
34006db0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34006db2:	481e      	ldr	r0, [pc, #120]	@ (34006e2c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
34006db4:	a909      	add	r1, sp, #36	@ 0x24
34006db6:	4798      	blx	r3
    initSensors_params->width = sensor_info.width;
34006db8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
34006dba:	602b      	str	r3, [r5, #0]
    initSensors_params->height = sensor_info.height;
34006dbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
34006dbe:	606b      	str	r3, [r5, #4]
  }

  ret = Camera_Drv.Init(&camera_bsp, initSensors_params);
34006dc0:	4629      	mov	r1, r5
34006dc2:	6823      	ldr	r3, [r4, #0]
34006dc4:	4819      	ldr	r0, [pc, #100]	@ (34006e2c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
34006dc6:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006dc8:	bb60      	cbnz	r0, 34006e24 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  ret = Camera_Drv.SetFrequency(&camera_bsp, IMX335_INCK_24MHZ);
34006dca:	2102      	movs	r1, #2
34006dcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006dce:	4817      	ldr	r0, [pc, #92]	@ (34006e2c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
34006dd0:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006dd2:	bb38      	cbnz	r0, 34006e24 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  ret = Camera_Drv.SetFramerate(&camera_bsp, initSensors_params->fps);
34006dd4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006dd6:	68a9      	ldr	r1, [r5, #8]
34006dd8:	4814      	ldr	r0, [pc, #80]	@ (34006e2c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
34006dda:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006ddc:	bb10      	cbnz	r0, 34006e24 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  csi_conf.NumberOfLanes = DCMIPP_CSI_TWO_DATA_LANES;
  csi_conf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34006dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
34006de2:	2301      	movs	r3, #1
34006de4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_1600;
34006de8:	232c      	movs	r3, #44	@ 0x2c
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006dea:	a903      	add	r1, sp, #12
34006dec:	4813      	ldr	r0, [pc, #76]	@ (34006e3c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2fc>)
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_1600;
34006dee:	9305      	str	r3, [sp, #20]
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006df0:	f008 fd36 	bl	3400f860 <HAL_DCMIPP_CSI_SetConfig>
  if (ret != HAL_OK)
34006df4:	4601      	mov	r1, r0
34006df6:	b9a8      	cbnz	r0, 34006e24 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  ret = HAL_DCMIPP_CSI_SetVCConfig(&hcamera_dcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP10);
34006df8:	2203      	movs	r2, #3
34006dfa:	4810      	ldr	r0, [pc, #64]	@ (34006e3c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2fc>)
34006dfc:	f008 fea0 	bl	3400fb40 <HAL_DCMIPP_CSI_SetVCConfig>
  if (ret != HAL_OK)
34006e00:	4604      	mov	r4, r0
34006e02:	b978      	cbnz	r0, 34006e24 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
  csi_pipe_conf.DataTypeIDA = DCMIPP_DT_RAW10;
34006e04:	232b      	movs	r3, #43	@ 0x2b
  csi_pipe_conf.DataTypeIDB = 0;
34006e06:	e9cd 3007 	strd	r3, r0, [sp, #28]
  /* Pre-initialize CSI config for all the pipes */
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
  {
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006e0a:	4d0c      	ldr	r5, [pc, #48]	@ (34006e3c <CMW_CAMERA_Probe_Sensor.constprop.0+0x2fc>)
  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34006e0c:	9006      	str	r0, [sp, #24]
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006e0e:	4621      	mov	r1, r4
34006e10:	4628      	mov	r0, r5
34006e12:	aa06      	add	r2, sp, #24
34006e14:	f008 fde0 	bl	3400f9d8 <HAL_DCMIPP_CSI_PIPE_SetConfig>
    if (ret != HAL_OK)
34006e18:	b920      	cbnz	r0, 34006e24 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
34006e1a:	3401      	adds	r4, #1
34006e1c:	2c03      	cmp	r4, #3
34006e1e:	d1f6      	bne.n	34006e0e <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ce>
    return ret;
34006e20:	2102      	movs	r1, #2
34006e22:	e6f9      	b.n	34006c18 <CMW_CAMERA_Probe_Sensor.constprop.0+0xd8>
    return CMW_ERROR_UNKNOWN_COMPONENT;
34006e24:	f06f 0006 	mvn.w	r0, #6
34006e28:	e6f9      	b.n	34006c1e <CMW_CAMERA_Probe_Sensor.constprop.0+0xde>
34006e2a:	bf00      	nop
34006e2c:	340d1c84 	.word	0x340d1c84
34006e30:	3400de75 	.word	0x3400de75
34006e34:	340d1dc4 	.word	0x340d1dc4
34006e38:	34006b19 	.word	0x34006b19
34006e3c:	340d1e2c 	.word	0x340d1e2c
34006e40:	34007145 	.word	0x34007145
34006e44:	34006ad9 	.word	0x34006ad9
34006e48:	34007189 	.word	0x34007189
34006e4c:	34006ae9 	.word	0x34006ae9
34006e50:	34006af9 	.word	0x34006af9
34006e54:	340d1e78 	.word	0x340d1e78

34006e58 <CMW_CAMERA_EnableGPIOs>:
{
34006e58:	b570      	push	{r4, r5, r6, lr}
34006e5a:	b088      	sub	sp, #32
  GPIO_InitTypeDef gpio_init_structure = {0};
34006e5c:	2214      	movs	r2, #20
34006e5e:	2100      	movs	r1, #0
34006e60:	a803      	add	r0, sp, #12
34006e62:	f01a fc57 	bl	34021714 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34006e66:	2308      	movs	r3, #8
34006e68:	4c13      	ldr	r4, [pc, #76]	@ (34006eb8 <CMW_CAMERA_EnableGPIOs+0x60>)
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34006e6a:	2501      	movs	r5, #1
34006e6c:	f8c4 3a5c 	str.w	r3, [r4, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34006e70:	f8d4 325c 	ldr.w	r3, [r4, #604]	@ 0x25c
34006e74:	2600      	movs	r6, #0
34006e76:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
34006e78:	9b02      	ldr	r3, [sp, #8]
  NRST_CAM_GPIO_ENABLE_VDDIO();
34006e7a:	f00d fadf 	bl	3401443c <HAL_PWREx_EnableVddIO4>
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34006e7e:	2304      	movs	r3, #4
34006e80:	f8c4 3a5c 	str.w	r3, [r4, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34006e84:	f8d4 225c 	ldr.w	r2, [r4, #604]	@ 0x25c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34006e88:	2403      	movs	r4, #3
34006e8a:	9201      	str	r2, [sp, #4]
  HAL_GPIO_Init(EN_CAM_PORT, &gpio_init_structure);
34006e8c:	a903      	add	r1, sp, #12
34006e8e:	480b      	ldr	r0, [pc, #44]	@ (34006ebc <CMW_CAMERA_EnableGPIOs+0x64>)
  (void)tmpreg;
34006e90:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Pin       = EN_CAM_PIN;
34006e92:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34006e94:	e9cd 5604 	strd	r5, r6, [sp, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34006e98:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(EN_CAM_PORT, &gpio_init_structure);
34006e9a:	f00b fc01 	bl	340126a0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = NRST_CAM_PIN;
34006e9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(NRST_CAM_PORT, &gpio_init_structure);
34006ea2:	4807      	ldr	r0, [pc, #28]	@ (34006ec0 <CMW_CAMERA_EnableGPIOs+0x68>)
34006ea4:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34006ea6:	e9cd 5604 	strd	r5, r6, [sp, #16]
  gpio_init_structure.Pin       = NRST_CAM_PIN;
34006eaa:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34006eac:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(NRST_CAM_PORT, &gpio_init_structure);
34006eae:	f00b fbf7 	bl	340126a0 <HAL_GPIO_Init>
}
34006eb2:	b008      	add	sp, #32
34006eb4:	bd70      	pop	{r4, r5, r6, pc}
34006eb6:	bf00      	nop
34006eb8:	56028000 	.word	0x56028000
34006ebc:	56020c00 	.word	0x56020c00
34006ec0:	56020800 	.word	0x56020800

34006ec4 <CMW_CAMERA_GetDCMIPPHandle>:
}
34006ec4:	4800      	ldr	r0, [pc, #0]	@ (34006ec8 <CMW_CAMERA_GetDCMIPPHandle+0x4>)
34006ec6:	4770      	bx	lr
34006ec8:	340d1e2c 	.word	0x340d1e2c

34006ecc <CMW_CAMERA_SetPipeConfig>:
{
34006ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
}
#endif

static int32_t CMW_CAMERA_SetPipe(DCMIPP_HandleTypeDef *hdcmipp, uint32_t pipe, CMW_DCMIPP_Conf_t *p_conf, uint32_t *pitch)
{
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
34006ed0:	2600      	movs	r6, #0
{
34006ed2:	4604      	mov	r4, r0
34006ed4:	b093      	sub	sp, #76	@ 0x4c
  DCMIPP_PipeConfTypeDef pipe_conf = { 0 };
  DCMIPP_DownsizeTypeDef down_conf = { 0 };
34006ed6:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
{
34006eda:	460d      	mov	r5, r1
34006edc:	4617      	mov	r7, r2
  DCMIPP_DownsizeTypeDef down_conf = { 0 };
34006ede:	4631      	mov	r1, r6
34006ee0:	2218      	movs	r2, #24
34006ee2:	4640      	mov	r0, r8
  DCMIPP_PipeConfTypeDef pipe_conf = { 0 };
34006ee4:	e9cd 6604 	strd	r6, r6, [sp, #16]
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
34006ee8:	9602      	str	r6, [sp, #8]
  DCMIPP_PipeConfTypeDef pipe_conf = { 0 };
34006eea:	9606      	str	r6, [sp, #24]
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
34006eec:	9603      	str	r6, [sp, #12]
  DCMIPP_DownsizeTypeDef down_conf = { 0 };
34006eee:	f01a fc11 	bl	34021714 <memset>
  DCMIPP_CropConfTypeDef crop_conf = { 0 };
34006ef2:	2214      	movs	r2, #20
34006ef4:	4631      	mov	r1, r6
34006ef6:	a807      	add	r0, sp, #28
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
34006ef8:	f10d 0908 	add.w	r9, sp, #8
  DCMIPP_CropConfTypeDef crop_conf = { 0 };
34006efc:	f01a fc0a 	bl	34021714 <memset>
  int ret;

  /* specific case for pipe0 which is only a dump pipe */
  if (pipe == DCMIPP_PIPE0)
34006f00:	b95c      	cbnz	r4, 34006f1a <CMW_CAMERA_SetPipeConfig+0x4e>
  {
    /*  TODO: properly configure the dump pipe with decimation and crop */
    pipe_conf.FrameRate = DCMIPP_FRAME_RATE_ALL;
    ret = HAL_DCMIPP_PIPE_SetConfig(hdcmipp, pipe, &pipe_conf);
34006f02:	4621      	mov	r1, r4
34006f04:	484f      	ldr	r0, [pc, #316]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006f06:	aa04      	add	r2, sp, #16
34006f08:	f008 fe52 	bl	3400fbb0 <HAL_DCMIPP_PIPE_SetConfig>
    if (ret != HAL_OK)
34006f0c:	2800      	cmp	r0, #0
34006f0e:	d07c      	beq.n	3400700a <CMW_CAMERA_SetPipeConfig+0x13e>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
34006f10:	f06f 0004 	mvn.w	r0, #4
}
34006f14:	b013      	add	sp, #76	@ 0x4c
34006f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    return HAL_OK;
  }

  CMW_UTILS_GetPipeConfig(camera_conf.width, camera_conf.height, p_conf, &crop_conf, &dec_conf, &down_conf);
34006f1a:	e9cd 9800 	strd	r9, r8, [sp]
34006f1e:	484a      	ldr	r0, [pc, #296]	@ (34007048 <CMW_CAMERA_SetPipeConfig+0x17c>)
34006f20:	462a      	mov	r2, r5
34006f22:	e9d0 0100 	ldrd	r0, r1, [r0]
34006f26:	ab07      	add	r3, sp, #28
34006f28:	f000 fa64 	bl	340073f4 <CMW_UTILS_GetPipeConfig>

  if (crop_conf.VSize != 0 || crop_conf.HSize != 0)
34006f2c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
34006f30:	4313      	orrs	r3, r2
34006f32:	d015      	beq.n	34006f60 <CMW_CAMERA_SetPipeConfig+0x94>
  {
    ret = HAL_DCMIPP_PIPE_SetCropConfig(hdcmipp, pipe, &crop_conf);
34006f34:	4621      	mov	r1, r4
34006f36:	4843      	ldr	r0, [pc, #268]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006f38:	aa07      	add	r2, sp, #28
34006f3a:	f009 fc59 	bl	340107f0 <HAL_DCMIPP_PIPE_SetCropConfig>
    if (ret != HAL_OK)
34006f3e:	2800      	cmp	r0, #0
34006f40:	d1e6      	bne.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }

    ret = HAL_DCMIPP_PIPE_EnableCrop(hdcmipp, pipe);
34006f42:	4621      	mov	r1, r4
34006f44:	483f      	ldr	r0, [pc, #252]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006f46:	f009 fcf9 	bl	3401093c <HAL_DCMIPP_PIPE_EnableCrop>
    }
  }
  else
  {
    ret = HAL_DCMIPP_PIPE_DisableCrop(hdcmipp, pipe);
    if (ret != HAL_OK)
34006f4a:	2800      	cmp	r0, #0
34006f4c:	d1e0      	bne.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }
  }

  if (dec_conf.VRatio != 0 || dec_conf.HRatio != 0)
34006f4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
34006f52:	4313      	orrs	r3, r2
34006f54:	d109      	bne.n	34006f6a <CMW_CAMERA_SetPipeConfig+0x9e>
      return CMW_ERROR_COMPONENT_FAILURE;
    }
  }
  else
  {
    ret = HAL_DCMIPP_PIPE_DisableDecimation(hdcmipp, pipe);
34006f56:	4621      	mov	r1, r4
34006f58:	483a      	ldr	r0, [pc, #232]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006f5a:	f009 fe1d 	bl	34010b98 <HAL_DCMIPP_PIPE_DisableDecimation>
34006f5e:	e00f      	b.n	34006f80 <CMW_CAMERA_SetPipeConfig+0xb4>
    ret = HAL_DCMIPP_PIPE_DisableCrop(hdcmipp, pipe);
34006f60:	4621      	mov	r1, r4
34006f62:	4838      	ldr	r0, [pc, #224]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006f64:	f009 fd2a 	bl	340109bc <HAL_DCMIPP_PIPE_DisableCrop>
34006f68:	e7ef      	b.n	34006f4a <CMW_CAMERA_SetPipeConfig+0x7e>
    ret = HAL_DCMIPP_PIPE_SetDecimationConfig(hdcmipp, pipe, &dec_conf);
34006f6a:	464a      	mov	r2, r9
34006f6c:	4621      	mov	r1, r4
34006f6e:	4835      	ldr	r0, [pc, #212]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006f70:	f009 fda4 	bl	34010abc <HAL_DCMIPP_PIPE_SetDecimationConfig>
    if (ret != HAL_OK)
34006f74:	2800      	cmp	r0, #0
34006f76:	d1cb      	bne.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
    ret = HAL_DCMIPP_PIPE_EnableDecimation(hdcmipp, pipe);
34006f78:	4621      	mov	r1, r4
34006f7a:	4832      	ldr	r0, [pc, #200]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006f7c:	f009 fdea 	bl	34010b54 <HAL_DCMIPP_PIPE_EnableDecimation>
    if (ret != HAL_OK)
34006f80:	2800      	cmp	r0, #0
34006f82:	d1c5      	bne.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }
  }

  ret = HAL_DCMIPP_PIPE_SetDownsizeConfig(hdcmipp, pipe, &down_conf);
34006f84:	4642      	mov	r2, r8
34006f86:	4621      	mov	r1, r4
34006f88:	482e      	ldr	r0, [pc, #184]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006f8a:	f009 fe27 	bl	34010bdc <HAL_DCMIPP_PIPE_SetDownsizeConfig>
  if (ret != HAL_OK)
34006f8e:	4e2d      	ldr	r6, [pc, #180]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006f90:	2800      	cmp	r0, #0
34006f92:	d1bd      	bne.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  ret = HAL_DCMIPP_PIPE_EnableDownsize(hdcmipp, pipe);
34006f94:	4621      	mov	r1, r4
34006f96:	4630      	mov	r0, r6
34006f98:	f009 feae 	bl	34010cf8 <HAL_DCMIPP_PIPE_EnableDownsize>
  if (ret != HAL_OK)
34006f9c:	2800      	cmp	r0, #0
34006f9e:	d1b7      	bne.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  if (p_conf->enable_swap)
34006fa0:	692b      	ldr	r3, [r5, #16]
  {
    /* Config pipe */
    ret = HAL_DCMIPP_PIPE_EnableRedBlueSwap(hdcmipp, pipe);
34006fa2:	4621      	mov	r1, r4
34006fa4:	4630      	mov	r0, r6
  if (p_conf->enable_swap)
34006fa6:	2b00      	cmp	r3, #0
34006fa8:	d031      	beq.n	3400700e <CMW_CAMERA_SetPipeConfig+0x142>
    ret = HAL_DCMIPP_PIPE_EnableRedBlueSwap(hdcmipp, pipe);
34006faa:	f00a fd91 	bl	34011ad0 <HAL_DCMIPP_PIPE_EnableRedBlueSwap>
    }
  }
  else
  {
    ret = HAL_DCMIPP_PIPE_DisableRedBlueSwap(hdcmipp, pipe);
    if (ret != HAL_OK)
34006fae:	2800      	cmp	r0, #0
34006fb0:	d1ae      	bne.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
  }

  /* Ignore the configuration of gamma if -1
   * Activation is then done by the ISP Library
   */
  if (p_conf->enable_gamma_conversion > -1)
34006fb2:	696b      	ldr	r3, [r5, #20]
34006fb4:	2b00      	cmp	r3, #0
34006fb6:	da2d      	bge.n	34007014 <CMW_CAMERA_SetPipeConfig+0x148>
        return CMW_ERROR_COMPONENT_FAILURE;
      }
    }
  }

  if (pipe == DCMIPP_PIPE2)
34006fb8:	2c02      	cmp	r4, #2
34006fba:	d10f      	bne.n	34006fdc <CMW_CAMERA_SetPipeConfig+0x110>
  {
    if (!is_pipe1_2_shared)
34006fbc:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 3400704c <CMW_CAMERA_SetPipeConfig+0x180>
34006fc0:	f8d8 3000 	ldr.w	r3, [r8]
34006fc4:	b953      	cbnz	r3, 34006fdc <CMW_CAMERA_SetPipeConfig+0x110>
    {
      ret = HAL_DCMIPP_PIPE_CSI_EnableShare(hdcmipp, pipe);
34006fc6:	4621      	mov	r1, r4
34006fc8:	481e      	ldr	r0, [pc, #120]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006fca:	f00a fe4b 	bl	34011c64 <HAL_DCMIPP_PIPE_CSI_EnableShare>
      if (ret != HAL_OK)
34006fce:	2800      	cmp	r0, #0
34006fd0:	d19e      	bne.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
      {
        return CMW_ERROR_COMPONENT_FAILURE;
      }
      is_pipe1_2_shared++;
34006fd2:	f8d8 3000 	ldr.w	r3, [r8]
34006fd6:	3301      	adds	r3, #1
34006fd8:	f8c8 3000 	str.w	r3, [r8]
    }
  }

  pipe_conf.FrameRate = DCMIPP_FRAME_RATE_ALL;
34006fdc:	2300      	movs	r3, #0
  pipe_conf.PixelPipePitch = p_conf->output_width * p_conf->output_bpp;
34006fde:	68ea      	ldr	r2, [r5, #12]
  pipe_conf.FrameRate = DCMIPP_FRAME_RATE_ALL;
34006fe0:	9304      	str	r3, [sp, #16]
  pipe_conf.PixelPipePitch = p_conf->output_width * p_conf->output_bpp;
34006fe2:	682b      	ldr	r3, [r5, #0]
  /* Hardware constraint, pitch must be multiple of 16 */
  pipe_conf.PixelPipePitch = (pipe_conf.PixelPipePitch + 15) & (uint32_t) ~15;
  pipe_conf.PixelPackerFormat = p_conf->output_format;
  if (hcamera_dcmipp.PipeState[pipe] == HAL_DCMIPP_PIPE_STATE_RESET)
34006fe4:	4426      	add	r6, r4
  pipe_conf.PixelPipePitch = p_conf->output_width * p_conf->output_bpp;
34006fe6:	4353      	muls	r3, r2
  pipe_conf.PixelPipePitch = (pipe_conf.PixelPipePitch + 15) & (uint32_t) ~15;
34006fe8:	330f      	adds	r3, #15
34006fea:	f023 030f 	bic.w	r3, r3, #15
  pipe_conf.PixelPackerFormat = p_conf->output_format;
34006fee:	68aa      	ldr	r2, [r5, #8]
  pipe_conf.PixelPipePitch = (pipe_conf.PixelPipePitch + 15) & (uint32_t) ~15;
34006ff0:	9305      	str	r3, [sp, #20]
  if (hcamera_dcmipp.PipeState[pipe] == HAL_DCMIPP_PIPE_STATE_RESET)
34006ff2:	7973      	ldrb	r3, [r6, #5]
  pipe_conf.PixelPackerFormat = p_conf->output_format;
34006ff4:	9206      	str	r2, [sp, #24]
  if (hcamera_dcmipp.PipeState[pipe] == HAL_DCMIPP_PIPE_STATE_RESET)
34006ff6:	b9c3      	cbnz	r3, 3400702a <CMW_CAMERA_SetPipeConfig+0x15e>
  {
    ret = HAL_DCMIPP_PIPE_SetConfig(hdcmipp, pipe, &pipe_conf);
34006ff8:	4621      	mov	r1, r4
34006ffa:	4812      	ldr	r0, [pc, #72]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
34006ffc:	aa04      	add	r2, sp, #16
34006ffe:	f008 fdd7 	bl	3400fbb0 <HAL_DCMIPP_PIPE_SetConfig>
    if (HAL_DCMIPP_PIPE_SetPixelPackerFormat(hdcmipp, pipe, pipe_conf.PixelPackerFormat) != HAL_OK)
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }

    if (HAL_DCMIPP_PIPE_SetPitch(hdcmipp, pipe, pipe_conf.PixelPipePitch) != HAL_OK)
34007002:	2800      	cmp	r0, #0
34007004:	d184      	bne.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
    }
  }

  /* Update the pitch field so that application can use this information for
   * buffer alignement */
  *pitch = pipe_conf.PixelPipePitch;
34007006:	9b05      	ldr	r3, [sp, #20]
34007008:	603b      	str	r3, [r7, #0]
    return HAL_OK;
3400700a:	2000      	movs	r0, #0
  return CMW_CAMERA_SetPipe(&hcamera_dcmipp, pipe, p_conf, pitch);
3400700c:	e782      	b.n	34006f14 <CMW_CAMERA_SetPipeConfig+0x48>
    ret = HAL_DCMIPP_PIPE_DisableRedBlueSwap(hdcmipp, pipe);
3400700e:	f00a fd87 	bl	34011b20 <HAL_DCMIPP_PIPE_DisableRedBlueSwap>
34007012:	e7cc      	b.n	34006fae <CMW_CAMERA_SetPipeConfig+0xe2>
      ret = HAL_DCMIPP_PIPE_EnableGammaConversion(hdcmipp, pipe);
34007014:	4621      	mov	r1, r4
34007016:	480b      	ldr	r0, [pc, #44]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
    if (p_conf->enable_gamma_conversion)
34007018:	d004      	beq.n	34007024 <CMW_CAMERA_SetPipeConfig+0x158>
      ret = HAL_DCMIPP_PIPE_EnableGammaConversion(hdcmipp, pipe);
3400701a:	f009 fe8f 	bl	34010d3c <HAL_DCMIPP_PIPE_EnableGammaConversion>
      if (ret != HAL_OK)
3400701e:	2800      	cmp	r0, #0
34007020:	d0ca      	beq.n	34006fb8 <CMW_CAMERA_SetPipeConfig+0xec>
34007022:	e775      	b.n	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
      ret = HAL_DCMIPP_PIPE_DisableGammaConversion(hdcmipp, pipe);
34007024:	f009 feac 	bl	34010d80 <HAL_DCMIPP_PIPE_DisableGammaConversion>
34007028:	e7f9      	b.n	3400701e <CMW_CAMERA_SetPipeConfig+0x152>
    if (HAL_DCMIPP_PIPE_SetPixelPackerFormat(hdcmipp, pipe, pipe_conf.PixelPackerFormat) != HAL_OK)
3400702a:	4621      	mov	r1, r4
3400702c:	4805      	ldr	r0, [pc, #20]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
3400702e:	f00a fcd9 	bl	340119e4 <HAL_DCMIPP_PIPE_SetPixelPackerFormat>
34007032:	2800      	cmp	r0, #0
34007034:	f47f af6c 	bne.w	34006f10 <CMW_CAMERA_SetPipeConfig+0x44>
    if (HAL_DCMIPP_PIPE_SetPitch(hdcmipp, pipe, pipe_conf.PixelPipePitch) != HAL_OK)
34007038:	4621      	mov	r1, r4
3400703a:	9a05      	ldr	r2, [sp, #20]
3400703c:	4801      	ldr	r0, [pc, #4]	@ (34007044 <CMW_CAMERA_SetPipeConfig+0x178>)
3400703e:	f00a fc9f 	bl	34011980 <HAL_DCMIPP_PIPE_SetPitch>
34007042:	e7de      	b.n	34007002 <CMW_CAMERA_SetPipeConfig+0x136>
34007044:	340d1e2c 	.word	0x340d1e2c
34007048:	340d1e7c 	.word	0x340d1e7c
3400704c:	340d1c78 	.word	0x340d1c78

34007050 <CMW_CAMERA_Start>:
  if (pipe >= DCMIPP_NUM_OF_PIPES)
34007050:	2802      	cmp	r0, #2
{
34007052:	460b      	mov	r3, r1
34007054:	b513      	push	{r0, r1, r4, lr}
  if (pipe >= DCMIPP_NUM_OF_PIPES)
34007056:	d815      	bhi.n	34007084 <CMW_CAMERA_Start+0x34>
  ret = HAL_DCMIPP_CSI_PIPE_Start(&hcamera_dcmipp, pipe, DCMIPP_VIRTUAL_CHANNEL0, (uint32_t)pbuff, mode);
34007058:	4601      	mov	r1, r0
3400705a:	9200      	str	r2, [sp, #0]
3400705c:	480e      	ldr	r0, [pc, #56]	@ (34007098 <CMW_CAMERA_Start+0x48>)
3400705e:	2200      	movs	r2, #0
34007060:	f008 fefa 	bl	3400fe58 <HAL_DCMIPP_CSI_PIPE_Start>
  if (ret != HAL_OK)
34007064:	b988      	cbnz	r0, 3400708a <CMW_CAMERA_Start+0x3a>
  if (!is_camera_started)
34007066:	4c0d      	ldr	r4, [pc, #52]	@ (3400709c <CMW_CAMERA_Start+0x4c>)
34007068:	6823      	ldr	r3, [r4, #0]
3400706a:	b113      	cbz	r3, 34007072 <CMW_CAMERA_Start+0x22>
  return ret;
3400706c:	2000      	movs	r0, #0
}
3400706e:	b002      	add	sp, #8
34007070:	bd10      	pop	{r4, pc}
    ret = Camera_Drv.Start(&camera_bsp);
34007072:	4b0b      	ldr	r3, [pc, #44]	@ (340070a0 <CMW_CAMERA_Start+0x50>)
34007074:	480b      	ldr	r0, [pc, #44]	@ (340070a4 <CMW_CAMERA_Start+0x54>)
34007076:	689b      	ldr	r3, [r3, #8]
34007078:	4798      	blx	r3
    if (ret != CMW_ERROR_NONE)
3400707a:	b948      	cbnz	r0, 34007090 <CMW_CAMERA_Start+0x40>
    is_camera_started++;
3400707c:	6823      	ldr	r3, [r4, #0]
3400707e:	3301      	adds	r3, #1
34007080:	6023      	str	r3, [r4, #0]
34007082:	e7f3      	b.n	3400706c <CMW_CAMERA_Start+0x1c>
    return CMW_ERROR_WRONG_PARAM;
34007084:	f06f 0001 	mvn.w	r0, #1
34007088:	e7f1      	b.n	3400706e <CMW_CAMERA_Start+0x1e>
    return CMW_ERROR_PERIPH_FAILURE;
3400708a:	f06f 0003 	mvn.w	r0, #3
3400708e:	e7ee      	b.n	3400706e <CMW_CAMERA_Start+0x1e>
      return CMW_ERROR_COMPONENT_FAILURE;
34007090:	f06f 0004 	mvn.w	r0, #4
34007094:	e7eb      	b.n	3400706e <CMW_CAMERA_Start+0x1e>
34007096:	bf00      	nop
34007098:	340d1e2c 	.word	0x340d1e2c
3400709c:	340d1c7c 	.word	0x340d1c7c
340070a0:	340d1dc4 	.word	0x340d1dc4
340070a4:	340d1c84 	.word	0x340d1c84

340070a8 <CMW_CAMERA_GetSensorName>:
{
340070a8:	b530      	push	{r4, r5, lr}
340070aa:	b087      	sub	sp, #28
340070ac:	4604      	mov	r4, r0
  CMW_Sensor_Init_t initValues = {0};
340070ae:	2218      	movs	r2, #24
340070b0:	2100      	movs	r1, #0
340070b2:	4668      	mov	r0, sp
340070b4:	f01a fb2e 	bl	34021714 <memset>
  if (is_camera_init != 0)
340070b8:	4b12      	ldr	r3, [pc, #72]	@ (34007104 <CMW_CAMERA_GetSensorName+0x5c>)
340070ba:	681b      	ldr	r3, [r3, #0]
340070bc:	b123      	cbz	r3, 340070c8 <CMW_CAMERA_GetSensorName+0x20>
  *sensorName = connected_sensor;
340070be:	4b12      	ldr	r3, [pc, #72]	@ (34007108 <CMW_CAMERA_GetSensorName+0x60>)
    return CMW_ERROR_NONE;
340070c0:	2000      	movs	r0, #0
  *sensorName = connected_sensor;
340070c2:	781b      	ldrb	r3, [r3, #0]
340070c4:	7023      	strb	r3, [r4, #0]
  return CMW_ERROR_NONE;
340070c6:	e00c      	b.n	340070e2 <CMW_CAMERA_GetSensorName+0x3a>
  initValues.pixel_format = DCMIPP_PIXEL_PACKER_FORMAT_RGB565_1;
340070c8:	2301      	movs	r3, #1
340070ca:	221e      	movs	r2, #30
  hcamera_dcmipp.Instance = DCMIPP;
340070cc:	4d0f      	ldr	r5, [pc, #60]	@ (3400710c <CMW_CAMERA_GetSensorName+0x64>)
  initValues.pixel_format = DCMIPP_PIXEL_PACKER_FORMAT_RGB565_1;
340070ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
  hcamera_dcmipp.Instance = DCMIPP;
340070d2:	4b0f      	ldr	r3, [pc, #60]	@ (34007110 <CMW_CAMERA_GetSensorName+0x68>)
  ret = MX_DCMIPP_ClockConfig(&hcamera_dcmipp);
340070d4:	4628      	mov	r0, r5
  hcamera_dcmipp.Instance = DCMIPP;
340070d6:	602b      	str	r3, [r5, #0]
  ret = MX_DCMIPP_ClockConfig(&hcamera_dcmipp);
340070d8:	f018 fa59 	bl	3401f58e <MX_DCMIPP_ClockConfig>
  if (ret != HAL_OK)
340070dc:	b118      	cbz	r0, 340070e6 <CMW_CAMERA_GetSensorName+0x3e>
    return CMW_ERROR_PERIPH_FAILURE;
340070de:	f06f 0003 	mvn.w	r0, #3
}
340070e2:	b007      	add	sp, #28
340070e4:	bd30      	pop	{r4, r5, pc}
  ret = HAL_DCMIPP_Init(&hcamera_dcmipp);
340070e6:	4628      	mov	r0, r5
340070e8:	f008 fb94 	bl	3400f814 <HAL_DCMIPP_Init>
  if (ret != HAL_OK)
340070ec:	2800      	cmp	r0, #0
340070ee:	d1f6      	bne.n	340070de <CMW_CAMERA_GetSensorName+0x36>
  CMW_CAMERA_EnableGPIOs();
340070f0:	f7ff feb2 	bl	34006e58 <CMW_CAMERA_EnableGPIOs>
  ret = CMW_CAMERA_Probe_Sensor(&initValues, &connected_sensor);
340070f4:	4668      	mov	r0, sp
340070f6:	f7ff fd23 	bl	34006b40 <CMW_CAMERA_Probe_Sensor.constprop.0>
  if (ret != CMW_ERROR_NONE)
340070fa:	2800      	cmp	r0, #0
340070fc:	d0df      	beq.n	340070be <CMW_CAMERA_GetSensorName+0x16>
    return CMW_ERROR_UNKNOWN_COMPONENT;
340070fe:	f06f 0006 	mvn.w	r0, #6
34007102:	e7ee      	b.n	340070e2 <CMW_CAMERA_GetSensorName+0x3a>
34007104:	340d1c80 	.word	0x340d1c80
34007108:	340d1e78 	.word	0x340d1e78
3400710c:	340d1e2c 	.word	0x340d1e2c
34007110:	58002000 	.word	0x58002000

34007114 <CMW_CAMERA_SetGain>:
  if(Camera_Drv.SetGain == NULL)
34007114:	4b08      	ldr	r3, [pc, #32]	@ (34007138 <CMW_CAMERA_SetGain+0x24>)
{
34007116:	b510      	push	{r4, lr}
  if(Camera_Drv.SetGain == NULL)
34007118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
3400711a:	4604      	mov	r4, r0
  if(Camera_Drv.SetGain == NULL)
3400711c:	b133      	cbz	r3, 3400712c <CMW_CAMERA_SetGain+0x18>
  ret = Camera_Drv.SetGain(&camera_bsp, Gain);
3400711e:	4601      	mov	r1, r0
34007120:	4806      	ldr	r0, [pc, #24]	@ (3400713c <CMW_CAMERA_SetGain+0x28>)
34007122:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34007124:	b928      	cbnz	r0, 34007132 <CMW_CAMERA_SetGain+0x1e>
  Camera_Ctx.Gain = Gain;
34007126:	4b06      	ldr	r3, [pc, #24]	@ (34007140 <CMW_CAMERA_SetGain+0x2c>)
34007128:	621c      	str	r4, [r3, #32]
}
3400712a:	bd10      	pop	{r4, pc}
    return CMW_ERROR_FEATURE_NOT_SUPPORTED;
3400712c:	f06f 000a 	mvn.w	r0, #10
34007130:	e7fb      	b.n	3400712a <CMW_CAMERA_SetGain+0x16>
    return CMW_ERROR_COMPONENT_FAILURE;
34007132:	f06f 0004 	mvn.w	r0, #4
34007136:	e7f8      	b.n	3400712a <CMW_CAMERA_SetGain+0x16>
34007138:	340d1dc4 	.word	0x340d1dc4
3400713c:	340d1c84 	.word	0x340d1c84
34007140:	340d1e38 	.word	0x340d1e38

34007144 <CB_ISP_SetSensorGain>:
  if (CMW_CAMERA_SetGain(gain) != CMW_ERROR_NONE)
34007144:	4608      	mov	r0, r1
{
34007146:	b508      	push	{r3, lr}
  if (CMW_CAMERA_SetGain(gain) != CMW_ERROR_NONE)
34007148:	f7ff ffe4 	bl	34007114 <CMW_CAMERA_SetGain>
  return ISP_OK;
3400714c:	2800      	cmp	r0, #0
}
3400714e:	bf14      	ite	ne
34007150:	2079      	movne	r0, #121	@ 0x79
34007152:	2000      	moveq	r0, #0
34007154:	bd08      	pop	{r3, pc}
	...

34007158 <CMW_CAMERA_SetExposure>:
  if(Camera_Drv.SetExposure == NULL)
34007158:	4b08      	ldr	r3, [pc, #32]	@ (3400717c <CMW_CAMERA_SetExposure+0x24>)
{
3400715a:	b510      	push	{r4, lr}
  if(Camera_Drv.SetExposure == NULL)
3400715c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
3400715e:	4604      	mov	r4, r0
  if(Camera_Drv.SetExposure == NULL)
34007160:	b133      	cbz	r3, 34007170 <CMW_CAMERA_SetExposure+0x18>
  ret = Camera_Drv.SetExposure(&camera_bsp, exposure);
34007162:	4601      	mov	r1, r0
34007164:	4806      	ldr	r0, [pc, #24]	@ (34007180 <CMW_CAMERA_SetExposure+0x28>)
34007166:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34007168:	b928      	cbnz	r0, 34007176 <CMW_CAMERA_SetExposure+0x1e>
  Camera_Ctx.Exposure = exposure;
3400716a:	4b06      	ldr	r3, [pc, #24]	@ (34007184 <CMW_CAMERA_SetExposure+0x2c>)
3400716c:	625c      	str	r4, [r3, #36]	@ 0x24
}
3400716e:	bd10      	pop	{r4, pc}
    return CMW_ERROR_FEATURE_NOT_SUPPORTED;
34007170:	f06f 000a 	mvn.w	r0, #10
34007174:	e7fb      	b.n	3400716e <CMW_CAMERA_SetExposure+0x16>
    return CMW_ERROR_COMPONENT_FAILURE;
34007176:	f06f 0004 	mvn.w	r0, #4
3400717a:	e7f8      	b.n	3400716e <CMW_CAMERA_SetExposure+0x16>
3400717c:	340d1dc4 	.word	0x340d1dc4
34007180:	340d1c84 	.word	0x340d1c84
34007184:	340d1e38 	.word	0x340d1e38

34007188 <CB_ISP_SetSensorExposure>:
  if (CMW_CAMERA_SetExposure(exposure) != CMW_ERROR_NONE)
34007188:	4608      	mov	r0, r1
{
3400718a:	b508      	push	{r3, lr}
  if (CMW_CAMERA_SetExposure(exposure) != CMW_ERROR_NONE)
3400718c:	f7ff ffe4 	bl	34007158 <CMW_CAMERA_SetExposure>
  return ISP_OK;
34007190:	2800      	cmp	r0, #0
}
34007192:	bf14      	ite	ne
34007194:	2083      	movne	r0, #131	@ 0x83
34007196:	2000      	moveq	r0, #0
34007198:	bd08      	pop	{r3, pc}
	...

3400719c <CMW_CAMERA_GetSensorInfo>:
{
3400719c:	b508      	push	{r3, lr}
  if(Camera_Drv.GetSensorInfo == NULL)
3400719e:	4b07      	ldr	r3, [pc, #28]	@ (340071bc <CMW_CAMERA_GetSensorInfo+0x20>)
{
340071a0:	4601      	mov	r1, r0
  if(Camera_Drv.GetSensorInfo == NULL)
340071a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340071a4:	b133      	cbz	r3, 340071b4 <CMW_CAMERA_GetSensorInfo+0x18>
  ret = Camera_Drv.GetSensorInfo(&camera_bsp, info);
340071a6:	4806      	ldr	r0, [pc, #24]	@ (340071c0 <CMW_CAMERA_GetSensorInfo+0x24>)
340071a8:	4798      	blx	r3
    return CMW_ERROR_COMPONENT_FAILURE;
340071aa:	2800      	cmp	r0, #0
340071ac:	bf18      	it	ne
340071ae:	f06f 0004 	mvnne.w	r0, #4
}
340071b2:	bd08      	pop	{r3, pc}
    return CMW_ERROR_FEATURE_NOT_SUPPORTED;
340071b4:	f06f 000a 	mvn.w	r0, #10
340071b8:	e7fb      	b.n	340071b2 <CMW_CAMERA_GetSensorInfo+0x16>
340071ba:	bf00      	nop
340071bc:	340d1dc4 	.word	0x340d1dc4
340071c0:	340d1c84 	.word	0x340d1c84

340071c4 <CMW_CAMERA_Init>:
{
340071c4:	b570      	push	{r4, r5, r6, lr}
340071c6:	4604      	mov	r4, r0
340071c8:	460d      	mov	r5, r1
  CMW_Sensor_Init_t initValues = {0};
340071ca:	2100      	movs	r1, #0
{
340071cc:	b096      	sub	sp, #88	@ 0x58
  ISP_SensorInfoTypeDef info = {0};
340071ce:	223c      	movs	r2, #60	@ 0x3c
340071d0:	a807      	add	r0, sp, #28
  CMW_Sensor_Init_t initValues = {0};
340071d2:	9106      	str	r1, [sp, #24]
  ISP_SensorInfoTypeDef info = {0};
340071d4:	f01a fa9e 	bl	34021714 <memset>
  initValues.width = initConf->width;
340071d8:	6823      	ldr	r3, [r4, #0]
340071da:	9301      	str	r3, [sp, #4]
  initValues.height = initConf->height;
340071dc:	6863      	ldr	r3, [r4, #4]
340071de:	9302      	str	r3, [sp, #8]
  initValues.fps = initConf->fps;
340071e0:	68a3      	ldr	r3, [r4, #8]
340071e2:	9303      	str	r3, [sp, #12]
  initValues.pixel_format = initConf->pixel_format;
340071e4:	68e3      	ldr	r3, [r4, #12]
340071e6:	9304      	str	r3, [sp, #16]
  initValues.mirrorFlip = initConf->mirror_flip;
340071e8:	6963      	ldr	r3, [r4, #20]
340071ea:	9305      	str	r3, [sp, #20]
  if ((sensor_config != NULL) && (sensor_config->selected_sensor != CMW_NOTKNOWN_Sensor))
340071ec:	4b21      	ldr	r3, [pc, #132]	@ (34007274 <CMW_CAMERA_Init+0xb0>)
340071ee:	b185      	cbz	r5, 34007212 <CMW_CAMERA_Init+0x4e>
340071f0:	782a      	ldrb	r2, [r5, #0]
340071f2:	b172      	cbz	r2, 34007212 <CMW_CAMERA_Init+0x4e>
    initValues.sensor_config = (void *) &sensor_config->config;
340071f4:	3504      	adds	r5, #4
    connected_sensor = sensor_config->selected_sensor; // Assume The sensor is the one selected by the application. Check during probe
340071f6:	701a      	strb	r2, [r3, #0]
    initValues.sensor_config = (void *) &sensor_config->config;
340071f8:	9506      	str	r5, [sp, #24]
  hcamera_dcmipp.Instance = DCMIPP;
340071fa:	4d1f      	ldr	r5, [pc, #124]	@ (34007278 <CMW_CAMERA_Init+0xb4>)
340071fc:	4b1f      	ldr	r3, [pc, #124]	@ (3400727c <CMW_CAMERA_Init+0xb8>)
  ret = MX_DCMIPP_ClockConfig(&hcamera_dcmipp);
340071fe:	4628      	mov	r0, r5
  hcamera_dcmipp.Instance = DCMIPP;
34007200:	602b      	str	r3, [r5, #0]
  ret = MX_DCMIPP_ClockConfig(&hcamera_dcmipp);
34007202:	f018 f9c4 	bl	3401f58e <MX_DCMIPP_ClockConfig>
  if (ret != HAL_OK)
34007206:	b138      	cbz	r0, 34007218 <CMW_CAMERA_Init+0x54>
    return CMW_ERROR_PERIPH_FAILURE;
34007208:	f06f 0603 	mvn.w	r6, #3
}
3400720c:	4630      	mov	r0, r6
3400720e:	b016      	add	sp, #88	@ 0x58
34007210:	bd70      	pop	{r4, r5, r6, pc}
    connected_sensor = CMW_NOTKNOWN_Sensor;
34007212:	2200      	movs	r2, #0
34007214:	701a      	strb	r2, [r3, #0]
    initValues.sensor_config = NULL;
34007216:	e7f0      	b.n	340071fa <CMW_CAMERA_Init+0x36>
  ret = HAL_DCMIPP_Init(&hcamera_dcmipp);
34007218:	4628      	mov	r0, r5
3400721a:	f008 fafb 	bl	3400f814 <HAL_DCMIPP_Init>
  if (ret != HAL_OK)
3400721e:	2800      	cmp	r0, #0
34007220:	d1f2      	bne.n	34007208 <CMW_CAMERA_Init+0x44>
  CMW_CAMERA_EnableGPIOs();
34007222:	f7ff fe19 	bl	34006e58 <CMW_CAMERA_EnableGPIOs>
  ret = CMW_CAMERA_Probe_Sensor(&initValues, &connected_sensor);
34007226:	a801      	add	r0, sp, #4
34007228:	f7ff fc8a 	bl	34006b40 <CMW_CAMERA_Probe_Sensor.constprop.0>
  if (ret != CMW_ERROR_NONE)
3400722c:	4606      	mov	r6, r0
3400722e:	b110      	cbz	r0, 34007236 <CMW_CAMERA_Init+0x72>
    return CMW_ERROR_UNKNOWN_COMPONENT;
34007230:	f06f 0606 	mvn.w	r6, #6
34007234:	e7ea      	b.n	3400720c <CMW_CAMERA_Init+0x48>
  ret = CMW_CAMERA_GetSensorInfo(&info);
34007236:	a807      	add	r0, sp, #28
34007238:	f7ff ffb0 	bl	3400719c <CMW_CAMERA_GetSensorInfo>
  if (ret == CMW_ERROR_COMPONENT_FAILURE)
3400723c:	3005      	adds	r0, #5
3400723e:	d0f7      	beq.n	34007230 <CMW_CAMERA_Init+0x6c>
  ret = CMW_CAMERA_SetExposure(info.exposure_min);
34007240:	9814      	ldr	r0, [sp, #80]	@ 0x50
34007242:	f7ff ff89 	bl	34007158 <CMW_CAMERA_SetExposure>
  if (ret == CMW_ERROR_COMPONENT_FAILURE)
34007246:	3005      	adds	r0, #5
34007248:	d0f2      	beq.n	34007230 <CMW_CAMERA_Init+0x6c>
  ret = CMW_CAMERA_SetGain(info.gain_min);
3400724a:	9812      	ldr	r0, [sp, #72]	@ 0x48
3400724c:	f7ff ff62 	bl	34007114 <CMW_CAMERA_SetGain>
  if (ret == CMW_ERROR_COMPONENT_FAILURE)
34007250:	3005      	adds	r0, #5
34007252:	d0ed      	beq.n	34007230 <CMW_CAMERA_Init+0x6c>
  initConf->width = initValues.width;
34007254:	9b01      	ldr	r3, [sp, #4]
  camera_conf = *initConf;
34007256:	4d0a      	ldr	r5, [pc, #40]	@ (34007280 <CMW_CAMERA_Init+0xbc>)
  initConf->width = initValues.width;
34007258:	6023      	str	r3, [r4, #0]
  initConf->height = initValues.height ;
3400725a:	9b02      	ldr	r3, [sp, #8]
3400725c:	6063      	str	r3, [r4, #4]
  camera_conf = *initConf;
3400725e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34007260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  is_camera_init++;
34007262:	4a08      	ldr	r2, [pc, #32]	@ (34007284 <CMW_CAMERA_Init+0xc0>)
  camera_conf = *initConf;
34007264:	e894 0003 	ldmia.w	r4, {r0, r1}
  is_camera_init++;
34007268:	6813      	ldr	r3, [r2, #0]
  camera_conf = *initConf;
3400726a:	e885 0003 	stmia.w	r5, {r0, r1}
  is_camera_init++;
3400726e:	3301      	adds	r3, #1
34007270:	6013      	str	r3, [r2, #0]
  return ret;
34007272:	e7cb      	b.n	3400720c <CMW_CAMERA_Init+0x48>
34007274:	340d1e78 	.word	0x340d1e78
34007278:	340d1e2c 	.word	0x340d1e2c
3400727c:	58002000 	.word	0x58002000
34007280:	340d1e7c 	.word	0x340d1e7c
34007284:	340d1c80 	.word	0x340d1c80

34007288 <CMW_CAMERA_Run>:
  if(Camera_Drv.Run != NULL)
34007288:	4b03      	ldr	r3, [pc, #12]	@ (34007298 <CMW_CAMERA_Run+0x10>)
3400728a:	68db      	ldr	r3, [r3, #12]
3400728c:	b10b      	cbz	r3, 34007292 <CMW_CAMERA_Run+0xa>
      return Camera_Drv.Run(&camera_bsp);
3400728e:	4803      	ldr	r0, [pc, #12]	@ (3400729c <CMW_CAMERA_Run+0x14>)
34007290:	4718      	bx	r3
}
34007292:	4618      	mov	r0, r3
34007294:	4770      	bx	lr
34007296:	bf00      	nop
34007298:	340d1dc4 	.word	0x340d1dc4
3400729c:	340d1c84 	.word	0x340d1c84

340072a0 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
  if(Camera_Drv.VsyncEventCallback != NULL)
340072a0:	4b05      	ldr	r3, [pc, #20]	@ (340072b8 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x18>)
{
340072a2:	b510      	push	{r4, lr}
  if(Camera_Drv.VsyncEventCallback != NULL)
340072a4:	691b      	ldr	r3, [r3, #16]
{
340072a6:	460c      	mov	r4, r1
  if(Camera_Drv.VsyncEventCallback != NULL)
340072a8:	b10b      	cbz	r3, 340072ae <HAL_DCMIPP_PIPE_VsyncEventCallback+0xe>
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
340072aa:	4804      	ldr	r0, [pc, #16]	@ (340072bc <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>)
340072ac:	4798      	blx	r3
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
340072ae:	4620      	mov	r0, r4
340072b0:	f017 fc5c 	bl	3401eb6c <CMW_CAMERA_PIPE_VsyncEventCallback>
}
340072b4:	bd10      	pop	{r4, pc}
340072b6:	bf00      	nop
340072b8:	340d1dc4 	.word	0x340d1dc4
340072bc:	340d1c84 	.word	0x340d1c84

340072c0 <HAL_DCMIPP_PIPE_FrameEventCallback>:
  if(Camera_Drv.FrameEventCallback != NULL)
340072c0:	4b05      	ldr	r3, [pc, #20]	@ (340072d8 <HAL_DCMIPP_PIPE_FrameEventCallback+0x18>)
{
340072c2:	b510      	push	{r4, lr}
  if(Camera_Drv.FrameEventCallback != NULL)
340072c4:	695b      	ldr	r3, [r3, #20]
{
340072c6:	460c      	mov	r4, r1
  if(Camera_Drv.FrameEventCallback != NULL)
340072c8:	b10b      	cbz	r3, 340072ce <HAL_DCMIPP_PIPE_FrameEventCallback+0xe>
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
340072ca:	4804      	ldr	r0, [pc, #16]	@ (340072dc <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>)
340072cc:	4798      	blx	r3
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
340072ce:	4620      	mov	r0, r4
340072d0:	f017 fb86 	bl	3401e9e0 <CMW_CAMERA_PIPE_FrameEventCallback>
}
340072d4:	bd10      	pop	{r4, pc}
340072d6:	bf00      	nop
340072d8:	340d1dc4 	.word	0x340d1dc4
340072dc:	340d1c84 	.word	0x340d1c84

340072e0 <HAL_DCMIPP_MspInit>:
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5ENSR, Periphs);
340072e0:	2304      	movs	r3, #4
{
340072e2:	b530      	push	{r4, r5, lr}
340072e4:	4c1b      	ldr	r4, [pc, #108]	@ (34007354 <HAL_DCMIPP_MspInit+0x74>)
340072e6:	b085      	sub	sp, #20
340072e8:	f8c4 3a7c 	str.w	r3, [r4, #2684]	@ 0xa7c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5ENR);
340072ec:	f8d4 227c 	ldr.w	r2, [r4, #636]	@ 0x27c
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_ReleaseReset(uint32_t Periphs)
{
  WRITE_REG(RCC->APB5RSTCR, Periphs);
340072f0:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
  tmpreg = READ_REG(RCC->APB5ENR);
340072f4:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
340072f6:	9a03      	ldr	r2, [sp, #12]
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
340072f8:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
340072fc:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
  HAL_NVIC_SetPriority(DCMIPP_IRQn, 0x07, 0);
34007300:	2107      	movs	r1, #7
34007302:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
34007304:	9a02      	ldr	r2, [sp, #8]
34007306:	2030      	movs	r0, #48	@ 0x30
  WRITE_REG(RCC->APB5RSTSR, Periphs);
34007308:	f8c4 3a3c 	str.w	r3, [r4, #2620]	@ 0xa3c
3400730c:	2200      	movs	r2, #0
  WRITE_REG(RCC->APB5RSTCR, Periphs);
3400730e:	f8c5 323c 	str.w	r3, [r5, #572]	@ 0x23c
34007312:	f008 f8c5 	bl	3400f4a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMIPP_IRQn);
34007316:	2030      	movs	r0, #48	@ 0x30
34007318:	f008 f920 	bl	3400f55c <HAL_NVIC_EnableIRQ>
  WRITE_REG(RCC->APB5ENSR, Periphs);
3400731c:	2340      	movs	r3, #64	@ 0x40
3400731e:	f8c4 3a7c 	str.w	r3, [r4, #2684]	@ 0xa7c
  tmpreg = READ_REG(RCC->APB5ENR);
34007322:	f8d4 227c 	ldr.w	r2, [r4, #636]	@ 0x27c
  HAL_NVIC_SetPriority(CSI_IRQn, 0x07, 0);
34007326:	2107      	movs	r1, #7
34007328:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
3400732a:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
3400732c:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34007330:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
34007334:	202f      	movs	r0, #47	@ 0x2f
34007336:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
34007338:	9a00      	ldr	r2, [sp, #0]
  WRITE_REG(RCC->APB5RSTSR, Periphs);
3400733a:	f8c4 3a3c 	str.w	r3, [r4, #2620]	@ 0xa3c
3400733e:	2200      	movs	r2, #0
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34007340:	f8c5 323c 	str.w	r3, [r5, #572]	@ 0x23c
34007344:	f008 f8ac 	bl	3400f4a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CSI_IRQn);
34007348:	202f      	movs	r0, #47	@ 0x2f
}
3400734a:	b005      	add	sp, #20
3400734c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HAL_NVIC_EnableIRQ(CSI_IRQn);
34007350:	f008 b904 	b.w	3400f55c <HAL_NVIC_EnableIRQ>
34007354:	56028000 	.word	0x56028000

34007358 <CMW_CAMERA_SetDefaultSensorValues>:

  return HAL_OK;
}

int32_t CMW_CAMERA_SetDefaultSensorValues( CMW_Sensor_Config_t *sensor_config )
{
34007358:	b508      	push	{r3, lr}
  if (sensor_config == NULL)
3400735a:	b120      	cbz	r0, 34007366 <CMW_CAMERA_SetDefaultSensorValues+0xe>
  {
    return CMW_ERROR_WRONG_PARAM;
  }
  switch (sensor_config->selected_sensor)
3400735c:	7803      	ldrb	r3, [r0, #0]
3400735e:	2b01      	cmp	r3, #1
34007360:	d004      	beq.n	3400736c <CMW_CAMERA_SetDefaultSensorValues+0x14>
34007362:	2b03      	cmp	r3, #3
34007364:	d007      	beq.n	34007376 <CMW_CAMERA_SetDefaultSensorValues+0x1e>
34007366:	f06f 0001 	mvn.w	r0, #1
3400736a:	e003      	b.n	34007374 <CMW_CAMERA_SetDefaultSensorValues+0x1c>
  {
#if defined(USE_VD66GY_SENSOR)
  case CMW_VD66GY_Sensor:
    CMW_VD66GY_SetDefaultSensorValues(&sensor_config->config.vd66gy_config);
3400736c:	3004      	adds	r0, #4
3400736e:	f000 ff05 	bl	3400817c <CMW_VD66GY_SetDefaultSensorValues>
  default:
    return CMW_ERROR_WRONG_PARAM;
    break;
  }

  return CMW_ERROR_NONE;
34007372:	2000      	movs	r0, #0
}
34007374:	bd08      	pop	{r3, pc}
    CMW_VD55G1_SetDefaultSensorValues(&sensor_config->config.vd55g1_config);
34007376:	3004      	adds	r0, #4
34007378:	f000 fbbe 	bl	34007af8 <CMW_VD55G1_SetDefaultSensorValues>
    break;
3400737c:	e7f9      	b.n	34007372 <CMW_CAMERA_SetDefaultSensorValues+0x1a>
	...

34007380 <CMW_UTILS_get_dec_ratio_and_update>:

  return is_vertical ? DCMIPP_VDEC_ALL : DCMIPP_HDEC_ALL;
}

static uint32_t CMW_UTILS_get_dec_ratio_and_update(float *ratio, int is_vertical)
{
34007380:	b508      	push	{r3, lr}
  int dec_ratio = 1;

  while (*ratio >= 8) {
34007382:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
  int dec_ratio = 1;
34007386:	2301      	movs	r3, #1
    dec_ratio *= 2;
    *ratio /= 2;
34007388:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
  while (*ratio >= 8) {
3400738c:	edd0 7a00 	vldr	s15, [r0]
34007390:	eef4 7ac7 	vcmpe.f32	s15, s14
34007394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34007398:	da08      	bge.n	340073ac <CMW_UTILS_get_dec_ratio_and_update+0x2c>
  switch (dec_ratio) {
3400739a:	3b01      	subs	r3, #1
3400739c:	2b07      	cmp	r3, #7
3400739e:	d81a      	bhi.n	340073d6 <CMW_UTILS_get_dec_ratio_and_update+0x56>
340073a0:	e8df f003 	tbb	[pc, r3]
340073a4:	0f190a1f 	.word	0x0f190a1f
340073a8:	14191919 	.word	0x14191919
    *ratio /= 2;
340073ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
    dec_ratio *= 2;
340073b0:	005b      	lsls	r3, r3, #1
    *ratio /= 2;
340073b2:	edc0 7a00 	vstr	s15, [r0]
340073b6:	e7e9      	b.n	3400738c <CMW_UTILS_get_dec_ratio_and_update+0xc>
    return is_vertical ? DCMIPP_VDEC_1_OUT_2 : DCMIPP_HDEC_1_OUT_2;
340073b8:	2900      	cmp	r1, #0
340073ba:	bf0c      	ite	eq
340073bc:	2002      	moveq	r0, #2
340073be:	2008      	movne	r0, #8
  }

  return CMW_UTILS_get_dec_ratio_from_decimal_ratio(dec_ratio, is_vertical);
}
340073c0:	bd08      	pop	{r3, pc}
    return is_vertical ? DCMIPP_VDEC_1_OUT_4 : DCMIPP_HDEC_1_OUT_4;
340073c2:	2900      	cmp	r1, #0
340073c4:	bf0c      	ite	eq
340073c6:	2004      	moveq	r0, #4
340073c8:	2010      	movne	r0, #16
340073ca:	e7f9      	b.n	340073c0 <CMW_UTILS_get_dec_ratio_and_update+0x40>
    return is_vertical ? DCMIPP_VDEC_1_OUT_8 : DCMIPP_HDEC_1_OUT_8;
340073cc:	2900      	cmp	r1, #0
340073ce:	bf0c      	ite	eq
340073d0:	2006      	moveq	r0, #6
340073d2:	2018      	movne	r0, #24
340073d4:	e7f4      	b.n	340073c0 <CMW_UTILS_get_dec_ratio_and_update+0x40>
    assert(0);
340073d6:	2177      	movs	r1, #119	@ 0x77
340073d8:	4b03      	ldr	r3, [pc, #12]	@ (340073e8 <CMW_UTILS_get_dec_ratio_and_update+0x68>)
340073da:	4a04      	ldr	r2, [pc, #16]	@ (340073ec <CMW_UTILS_get_dec_ratio_and_update+0x6c>)
340073dc:	4804      	ldr	r0, [pc, #16]	@ (340073f0 <CMW_UTILS_get_dec_ratio_and_update+0x70>)
340073de:	f018 fb13 	bl	3401fa08 <__assert_func>
  switch (dec_ratio) {
340073e2:	2000      	movs	r0, #0
340073e4:	e7ec      	b.n	340073c0 <CMW_UTILS_get_dec_ratio_and_update+0x40>
340073e6:	bf00      	nop
340073e8:	3402b7cd 	.word	0x3402b7cd
340073ec:	34031384 	.word	0x34031384
340073f0:	3402c2dc 	.word	0x3402c2dc

340073f4 <CMW_UTILS_GetPipeConfig>:
{
340073f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
340073f6:	4614      	mov	r4, r2
340073f8:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
    CMW_UTILS_get_crop_config(cam_width, cam_height, p_conf->output_width, p_conf->output_height, crop);
340073fc:	6867      	ldr	r7, [r4, #4]
  if (p_conf->mode == CMW_Aspect_ratio_crop)
340073fe:	6992      	ldr	r2, [r2, #24]
  const float ratio_height = (float)cam_height / pipe_height;
34007400:	ee06 7a90 	vmov	s13, r7
{
34007404:	ee07 0a10 	vmov	s14, r0
34007408:	ee07 1a90 	vmov	s15, r1
  const float ratio_height = (float)cam_height / pipe_height;
3400740c:	eeb8 5a66 	vcvt.f32.u32	s10, s13
  if (p_conf->mode == CMW_Aspect_ratio_crop)
34007410:	2a00      	cmp	r2, #0
34007412:	f040 808e 	bne.w	34007532 <CMW_UTILS_GetPipeConfig+0x13e>
  const float ratio_width = (float)cam_width / pipe_width ;
34007416:	edd4 6a00 	vldr	s13, [r4]
3400741a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
3400741e:	eef8 4a66 	vcvt.f32.u32	s9, s13
  const float ratio_height = (float)cam_height / pipe_height;
34007422:	eef8 6a67 	vcvt.f32.u32	s13, s15
  const float ratio_width = (float)cam_width / pipe_width ;
34007426:	ee86 4a24 	vdiv.f32	s8, s12, s9
  const float ratio_height = (float)cam_height / pipe_height;
3400742a:	eec6 5a85 	vdiv.f32	s11, s13, s10
  const float ratio = MIN(ratio_width, ratio_height);
3400742e:	eeb4 4a65 	vcmp.f32	s8, s11
34007432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34007436:	bf48      	it	mi
34007438:	eef0 5a44 	vmovmi.f32	s11, s8
  assert(ratio >= 1);
3400743c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
34007440:	eef4 5ac4 	vcmpe.f32	s11, s8
34007444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34007448:	da05      	bge.n	34007456 <CMW_UTILS_GetPipeConfig+0x62>
3400744a:	214f      	movs	r1, #79	@ 0x4f
3400744c:	4b4f      	ldr	r3, [pc, #316]	@ (3400758c <CMW_UTILS_GetPipeConfig+0x198>)
3400744e:	4a50      	ldr	r2, [pc, #320]	@ (34007590 <CMW_UTILS_GetPipeConfig+0x19c>)
  assert(ratio < 64);
34007450:	4850      	ldr	r0, [pc, #320]	@ (34007594 <CMW_UTILS_GetPipeConfig+0x1a0>)
34007452:	f018 fad9 	bl	3401fa08 <__assert_func>
34007456:	ed9f 4a50 	vldr	s8, [pc, #320]	@ 34007598 <CMW_UTILS_GetPipeConfig+0x1a4>
3400745a:	eef4 5ac4 	vcmpe.f32	s11, s8
3400745e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34007462:	d403      	bmi.n	3400746c <CMW_UTILS_GetPipeConfig+0x78>
34007464:	2150      	movs	r1, #80	@ 0x50
34007466:	4b4d      	ldr	r3, [pc, #308]	@ (3400759c <CMW_UTILS_GetPipeConfig+0x1a8>)
34007468:	4a49      	ldr	r2, [pc, #292]	@ (34007590 <CMW_UTILS_GetPipeConfig+0x19c>)
3400746a:	e7f1      	b.n	34007450 <CMW_UTILS_GetPipeConfig+0x5c>
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
3400746c:	ee24 4aa5 	vmul.f32	s8, s9, s11
34007470:	eeb4 6ac4 	vcmpe.f32	s12, s8
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34007474:	ee65 5a25 	vmul.f32	s11, s10, s11
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
34007478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
3400747c:	eef4 6ae5 	vcmpe.f32	s13, s11
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
34007480:	bfcc      	ite	gt
34007482:	eebc 6ac4 	vcvtgt.u32.f32	s12, s8
34007486:	eebc 6ac6 	vcvtle.u32.f32	s12, s12
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
3400748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  crop->HStart = (cam_width - crop->HSize + 1) / 2;
3400748e:	4601      	mov	r1, r0
34007490:	ee16 2a10 	vmov	r2, s12
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34007494:	bfcc      	ite	gt
34007496:	eefc 6ae5 	vcvtgt.u32.f32	s13, s11
3400749a:	eefc 6ae6 	vcvtle.u32.f32	s13, s13
  crop->HStart = (cam_width - crop->HSize + 1) / 2;
3400749e:	3101      	adds	r1, #1
340074a0:	1a89      	subs	r1, r1, r2
340074a2:	0849      	lsrs	r1, r1, #1
340074a4:	6059      	str	r1, [r3, #4]
  crop->VStart = (cam_height - crop->VSize + 1) / 2;
340074a6:	ee17 1a90 	vmov	r1, s15
340074aa:	ee16 2a90 	vmov	r2, s13
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
340074ae:	ed83 6a03 	vstr	s12, [r3, #12]
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
340074b2:	edc3 6a02 	vstr	s13, [r3, #8]
    ratio_width = (float)crop->HSize / p_conf->output_width;
340074b6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    ratio_height = (float)crop->VSize / p_conf->output_height;
340074ba:	eef8 6a66 	vcvt.f32.u32	s13, s13
  crop->VStart = (cam_height - crop->VSize + 1) / 2;
340074be:	3101      	adds	r1, #1
340074c0:	1a89      	subs	r1, r1, r2
  crop->PipeArea = DCMIPP_POSITIVE_AREA;
340074c2:	2200      	movs	r2, #0
    ratio_width = (float)crop->HSize / p_conf->output_width;
340074c4:	eec6 5a24 	vdiv.f32	s11, s12, s9
    ratio_height = (float)crop->VSize / p_conf->output_height;
340074c8:	ee86 7a85 	vdiv.f32	s14, s13, s10
  crop->VStart = (cam_height - crop->VSize + 1) / 2;
340074cc:	0849      	lsrs	r1, r1, #1
340074ce:	6019      	str	r1, [r3, #0]
  crop->PipeArea = DCMIPP_POSITIVE_AREA;
340074d0:	611a      	str	r2, [r3, #16]

static void CMW_UTILS_get_scale_configs(CMW_DCMIPP_Conf_t *p_conf, float ratio_width, float ratio_height,
                                       DCMIPP_DecimationConfTypeDef *dec, DCMIPP_DownsizeTypeDef *down)
{
  dec->HRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_width, 0);
340074d2:	2100      	movs	r1, #0
340074d4:	4668      	mov	r0, sp
340074d6:	ed8d 7a01 	vstr	s14, [sp, #4]
340074da:	edcd 5a00 	vstr	s11, [sp]
340074de:	f7ff ff4f 	bl	34007380 <CMW_UTILS_get_dec_ratio_and_update>
  dec->VRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_height, 1);
340074e2:	2101      	movs	r1, #1
  dec->HRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_width, 0);
340074e4:	6068      	str	r0, [r5, #4]
  dec->VRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_height, 1);
340074e6:	a801      	add	r0, sp, #4
340074e8:	f7ff ff4a 	bl	34007380 <CMW_UTILS_get_dec_ratio_and_update>
  down->HRatio = (uint32_t) (8192 * ratio_width);
340074ec:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 340075a0 <CMW_UTILS_GetPipeConfig+0x1ac>
340074f0:	eddd 7a00 	vldr	s15, [sp]
340074f4:	ee67 7a87 	vmul.f32	s15, s15, s14
340074f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  dec->VRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_height, 1);
340074fc:	6028      	str	r0, [r5, #0]
  down->HRatio = (uint32_t) (8192 * ratio_width);
340074fe:	ee17 3a90 	vmov	r3, s15
  CMW_UTILS_get_down_config(ratio_width, ratio_height, p_conf->output_width, p_conf->output_height, down);
34007502:	6820      	ldr	r0, [r4, #0]
  down->HRatio = (uint32_t) (8192 * ratio_width);
34007504:	edc6 7a03 	vstr	s15, [r6, #12]
  down->VRatio = (uint32_t) (8192 * ratio_height);
34007508:	eddd 7a01 	vldr	s15, [sp, #4]
3400750c:	ee67 7a87 	vmul.f32	s15, s15, s14
34007510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34007514:	ee17 2a90 	vmov	r2, s15
  down->HDivFactor = (1024 * 8192 - 1) / down->HRatio;
34007518:	4922      	ldr	r1, [pc, #136]	@ (340075a4 <CMW_UTILS_GetPipeConfig+0x1b0>)
  down->VRatio = (uint32_t) (8192 * ratio_height);
3400751a:	edc6 7a02 	vstr	s15, [r6, #8]
  down->HDivFactor = (1024 * 8192 - 1) / down->HRatio;
3400751e:	fbb1 f3f3 	udiv	r3, r1, r3
  down->VDivFactor = (1024 * 8192 - 1) / down->VRatio;
34007522:	fbb1 f1f2 	udiv	r1, r1, r2
  down->VSize = height;
34007526:	e9c6 7000 	strd	r7, r0, [r6]
  down->HDivFactor = (1024 * 8192 - 1) / down->HRatio;
3400752a:	6173      	str	r3, [r6, #20]
  down->VDivFactor = (1024 * 8192 - 1) / down->VRatio;
3400752c:	6131      	str	r1, [r6, #16]
}
3400752e:	b003      	add	sp, #12
34007530:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (p_conf->mode == CMW_Aspect_ratio_fit)
34007532:	2a01      	cmp	r2, #1
34007534:	d10c      	bne.n	34007550 <CMW_UTILS_GetPipeConfig+0x15c>
    ratio_width = (float)cam_width / p_conf->output_width;
34007536:	edd4 6a00 	vldr	s13, [r4]
3400753a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
3400753e:	eef8 6a66 	vcvt.f32.u32	s13, s13
34007542:	eec7 5a26 	vdiv.f32	s11, s14, s13
    ratio_height = (float)crop->VSize / p_conf->output_height;
34007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400754a:	ee87 7a85 	vdiv.f32	s14, s15, s10
3400754e:	e7c0      	b.n	340074d2 <CMW_UTILS_GetPipeConfig+0xde>
  else if (p_conf->mode == CMW_Aspect_ratio_fullscreen)
34007550:	2a02      	cmp	r2, #2
34007552:	d106      	bne.n	34007562 <CMW_UTILS_GetPipeConfig+0x16e>
    ratio_height = (float) cam_height / p_conf->output_height;
34007554:	eef8 7a67 	vcvt.f32.u32	s15, s15
34007558:	ee87 7a85 	vdiv.f32	s14, s15, s10
    ratio_width = (float) ratio_height;
3400755c:	eef0 5a47 	vmov.f32	s11, s14
34007560:	e7b7      	b.n	340074d2 <CMW_UTILS_GetPipeConfig+0xde>
  crop->HSize = roi->width;
34007562:	69e1      	ldr	r1, [r4, #28]
    ratio_width = (float)crop->HSize / p_conf->output_width;
34007564:	ed94 7a00 	vldr	s14, [r4]
34007568:	ee07 1a90 	vmov	s15, r1
3400756c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
34007570:	eef8 7a67 	vcvt.f32.u32	s15, s15
  crop->HStart = roi->offset_x;
34007574:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  crop->VSize = roi->height;
34007576:	6a22      	ldr	r2, [r4, #32]
  crop->HStart = roi->offset_x;
34007578:	6058      	str	r0, [r3, #4]
  crop->VStart = roi->offset_y;
3400757a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    ratio_width = (float)crop->HSize / p_conf->output_width;
3400757c:	eec7 5a87 	vdiv.f32	s11, s15, s14
  crop->HSize = roi->width;
34007580:	60d9      	str	r1, [r3, #12]
    ratio_height = (float)crop->VSize / p_conf->output_height;
34007582:	ee07 2a90 	vmov	s15, r2
  crop->VSize = roi->height;
34007586:	609a      	str	r2, [r3, #8]
  crop->VStart = roi->offset_y;
34007588:	6018      	str	r0, [r3, #0]
    ratio_height = (float)crop->VSize / p_conf->output_height;
3400758a:	e7dc      	b.n	34007546 <CMW_UTILS_GetPipeConfig+0x152>
3400758c:	3402c32d 	.word	0x3402c32d
34007590:	340313af 	.word	0x340313af
34007594:	3402c2dc 	.word	0x3402c2dc
34007598:	42800000 	.word	0x42800000
3400759c:	3402c338 	.word	0x3402c338
340075a0:	46000000 	.word	0x46000000
340075a4:	007fffff 	.word	0x007fffff

340075a8 <CMW_IMX335_FrameEventCallback>:
#endif
}

static void CMW_IMX335_FrameEventCallback(void *io_ctx, uint32_t pipe)
{
}
340075a8:	4770      	bx	lr

340075aa <CMW_IMX335_SetWBRefMode>:
{
340075aa:	b508      	push	{r3, lr}
  ret = ISP_SetWBRefMode(&((CMW_IMX335_t *)io_ctx)->hIsp, Automatic, RefColorTemp);
340075ac:	3030      	adds	r0, #48	@ 0x30
340075ae:	f7fe fafe 	bl	34005bae <ISP_SetWBRefMode>
  return CMW_ERROR_NONE;
340075b2:	2800      	cmp	r0, #0
}
340075b4:	bf14      	ite	ne
340075b6:	f06f 0003 	mvnne.w	r0, #3
340075ba:	2000      	moveq	r0, #0
340075bc:	bd08      	pop	{r3, pc}

340075be <CMW_IMX335_ListWBRefModes>:
{
340075be:	b508      	push	{r3, lr}
  ret = ISP_ListWBRefModes(&((CMW_IMX335_t *)io_ctx)->hIsp, RefColorTemp);
340075c0:	3030      	adds	r0, #48	@ 0x30
340075c2:	f7fe fae1 	bl	34005b88 <ISP_ListWBRefModes>
  return CMW_ERROR_NONE;
340075c6:	2800      	cmp	r0, #0
}
340075c8:	bf14      	ite	ne
340075ca:	f06f 0003 	mvnne.w	r0, #3
340075ce:	2000      	moveq	r0, #0
340075d0:	bd08      	pop	{r3, pc}

340075d2 <CMW_IMX335_ReadID>:
  return IMX335_ReadID(&((CMW_IMX335_t *)io_ctx)->ctx_driver, Id);
340075d2:	3008      	adds	r0, #8
340075d4:	f000 bf98 	b.w	34008508 <IMX335_ReadID>

340075d8 <CMW_IMX335_SetTestPattern>:
  return IMX335_SetTestPattern(&((CMW_IMX335_t *)io_ctx)->ctx_driver, mode);
340075d8:	3008      	adds	r0, #8
340075da:	f001 b8a1 	b.w	34008720 <IMX335_SetTestPattern>
	...

340075e0 <CMW_IMX335_GetSensorInfo>:
{
340075e0:	b508      	push	{r3, lr}
340075e2:	460b      	mov	r3, r1
  if ((io_ctx ==  NULL) || (info == NULL))
340075e4:	b1c8      	cbz	r0, 3400761a <CMW_IMX335_GetSensorInfo+0x3a>
340075e6:	b1c1      	cbz	r1, 3400761a <CMW_IMX335_GetSensorInfo+0x3a>
    strcpy(info->name, IMX335_NAME);
340075e8:	4618      	mov	r0, r3
340075ea:	490d      	ldr	r1, [pc, #52]	@ (34007620 <CMW_IMX335_GetSensorInfo+0x40>)
340075ec:	f01a fb2b 	bl	34021c46 <strcpy>
  info->bayer_pattern = IMX335_BAYER_PATTERN;
340075f0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
  info->height = IMX335_HEIGHT;
340075f4:	f44f 6122 	mov.w	r1, #2592	@ 0xa20
  info->bayer_pattern = IMX335_BAYER_PATTERN;
340075f8:	8402      	strh	r2, [r0, #32]
  info->height = IMX335_HEIGHT;
340075fa:	f44f 62f3 	mov.w	r2, #1944	@ 0x798
    strcpy(info->name, IMX335_NAME);
340075fe:	4603      	mov	r3, r0
  info->height = IMX335_HEIGHT;
34007600:	e9c0 1209 	strd	r1, r2, [r0, #36]	@ 0x24
  info->gain_max = IMX335_GAIN_MAX;
34007604:	2000      	movs	r0, #0
34007606:	4a07      	ldr	r2, [pc, #28]	@ (34007624 <CMW_IMX335_GetSensorInfo+0x44>)
  info->exposure_max = IMX335_EXPOSURE_MAX;
34007608:	f04f 0c08 	mov.w	ip, #8
  info->gain_max = IMX335_GAIN_MAX;
3400760c:	e9c3 020b 	strd	r0, r2, [r3, #44]	@ 0x2c
  info->exposure_max = IMX335_EXPOSURE_MAX;
34007610:	f248 12f2 	movw	r2, #33266	@ 0x81f2
34007614:	e9c3 c20d 	strd	ip, r2, [r3, #52]	@ 0x34
}
34007618:	bd08      	pop	{r3, pc}
    return CMW_ERROR_WRONG_PARAM;
3400761a:	f06f 0001 	mvn.w	r0, #1
3400761e:	e7fb      	b.n	34007618 <CMW_IMX335_GetSensorInfo+0x38>
34007620:	3402c343 	.word	0x3402c343
34007624:	00011940 	.word	0x00011940

34007628 <CMW_IMX335_SetMirrorFlip>:
  return IMX335_MirrorFlipConfig(&((CMW_IMX335_t *)io_ctx)->ctx_driver, mirrorFlip);
34007628:	2903      	cmp	r1, #3
3400762a:	bf28      	it	cs
3400762c:	2103      	movcs	r1, #3
3400762e:	3008      	adds	r0, #8
34007630:	f001 b85c 	b.w	340086ec <IMX335_MirrorFlipConfig>

34007634 <CMW_IMX335_SetFramerate>:
{
34007634:	b4f0      	push	{r4, r5, r6, r7}
  const int32_t available_imx335_fps[] = {10, 15, 20, 25, 30};
34007636:	4d0e      	ldr	r5, [pc, #56]	@ (34007670 <CMW_IMX335_SetFramerate+0x3c>)
{
34007638:	b086      	sub	sp, #24
  const int32_t available_imx335_fps[] = {10, 15, 20, 25, 30};
3400763a:	ac01      	add	r4, sp, #4
{
3400763c:	4607      	mov	r7, r0
3400763e:	460e      	mov	r6, r1
  const int32_t available_imx335_fps[] = {10, 15, 20, 25, 30};
34007640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34007642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34007644:	682b      	ldr	r3, [r5, #0]
34007646:	aa01      	add	r2, sp, #4
34007648:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < ARRAY_SIZE(available_imx335_fps); i++)
3400764a:	2305      	movs	r3, #5
    if (framerate == available_imx335_fps[i])
3400764c:	f852 1b04 	ldr.w	r1, [r2], #4
34007650:	42b1      	cmp	r1, r6
34007652:	d106      	bne.n	34007662 <CMW_IMX335_SetFramerate+0x2e>
      return IMX335_SetFramerate(&((CMW_IMX335_t *)io_ctx)->ctx_driver, framerate);
34007654:	4631      	mov	r1, r6
34007656:	f107 0008 	add.w	r0, r7, #8
}
3400765a:	b006      	add	sp, #24
3400765c:	bcf0      	pop	{r4, r5, r6, r7}
      return IMX335_SetFramerate(&((CMW_IMX335_t *)io_ctx)->ctx_driver, framerate);
3400765e:	f001 b819 	b.w	34008694 <IMX335_SetFramerate>
  for (int i = 0; i < ARRAY_SIZE(available_imx335_fps); i++)
34007662:	3b01      	subs	r3, #1
34007664:	d1f2      	bne.n	3400764c <CMW_IMX335_SetFramerate+0x18>
}
34007666:	f06f 0001 	mvn.w	r0, #1
3400766a:	b006      	add	sp, #24
3400766c:	bcf0      	pop	{r4, r5, r6, r7}
3400766e:	4770      	bx	lr
34007670:	3402ab1c 	.word	0x3402ab1c

34007674 <CMW_IMX335_SetFrequency>:
  return IMX335_SetFrequency(&((CMW_IMX335_t *)io_ctx)->ctx_driver, frequency);
34007674:	3008      	adds	r0, #8
34007676:	f000 bfe9 	b.w	3400864c <IMX335_SetFrequency>

3400767a <CMW_IMX335_SetExposure>:
  return IMX335_SetExposure(&((CMW_IMX335_t *)io_ctx)->ctx_driver, exposure);
3400767a:	3008      	adds	r0, #8
3400767c:	f000 bf94 	b.w	340085a8 <IMX335_SetExposure>

34007680 <CMW_IMX335_SetGain>:
  return IMX335_SetGain(&((CMW_IMX335_t *)io_ctx)->ctx_driver, gain);
34007680:	3008      	adds	r0, #8
34007682:	f000 bf59 	b.w	34008538 <IMX335_SetGain>

34007686 <CMW_IMX335_Run>:
{
34007686:	b508      	push	{r3, lr}
  ret = ISP_BackgroundProcess(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007688:	3030      	adds	r0, #48	@ 0x30
3400768a:	f7fe fa6d 	bl	34005b68 <ISP_BackgroundProcess>
  return CMW_ERROR_NONE;
3400768e:	2800      	cmp	r0, #0
}
34007690:	bf14      	ite	ne
34007692:	f06f 0003 	mvnne.w	r0, #3
34007696:	2000      	moveq	r0, #0
34007698:	bd08      	pop	{r3, pc}

3400769a <CMW_IMX335_DeInit>:
{
3400769a:	b510      	push	{r4, lr}
3400769c:	4604      	mov	r4, r0
  ret = ISP_DeInit(&((CMW_IMX335_t *)io_ctx)->hIsp);
3400769e:	3030      	adds	r0, #48	@ 0x30
340076a0:	f7fe f9b0 	bl	34005a04 <ISP_DeInit>
  if (ret)
340076a4:	b110      	cbz	r0, 340076ac <CMW_IMX335_DeInit+0x12>
    return CMW_ERROR_COMPONENT_FAILURE;
340076a6:	f06f 0004 	mvn.w	r0, #4
}
340076aa:	bd10      	pop	{r4, pc}
  ret = IMX335_DeInit(&((CMW_IMX335_t *)io_ctx)->ctx_driver);
340076ac:	f104 0008 	add.w	r0, r4, #8
340076b0:	f000 ff21 	bl	340084f6 <IMX335_DeInit>
  if (ret)
340076b4:	2800      	cmp	r0, #0
340076b6:	d0f8      	beq.n	340076aa <CMW_IMX335_DeInit+0x10>
340076b8:	e7f5      	b.n	340076a6 <CMW_IMX335_DeInit+0xc>
	...

340076bc <CMW_IMX335_Start>:
{
340076bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ISP_Init(&((CMW_IMX335_t *)io_ctx)->hIsp, ((CMW_IMX335_t *)io_ctx)->hdcmipp, 0, &((CMW_IMX335_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_IMX335);
340076be:	4b10      	ldr	r3, [pc, #64]	@ (34007700 <CMW_IMX335_Start+0x44>)
340076c0:	f100 0530 	add.w	r5, r0, #48	@ 0x30
340076c4:	9300      	str	r3, [sp, #0]
{
340076c6:	4604      	mov	r4, r0
  ret = ISP_Init(&((CMW_IMX335_t *)io_ctx)->hIsp, ((CMW_IMX335_t *)io_ctx)->hdcmipp, 0, &((CMW_IMX335_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_IMX335);
340076c8:	f8d0 10dc 	ldr.w	r1, [r0, #220]	@ 0xdc
340076cc:	f100 03b8 	add.w	r3, r0, #184	@ 0xb8
340076d0:	2200      	movs	r2, #0
340076d2:	4628      	mov	r0, r5
340076d4:	f7fe f91a 	bl	3400590c <ISP_Init>
  if (ret != ISP_OK)
340076d8:	b950      	cbnz	r0, 340076f0 <CMW_IMX335_Start+0x34>
  ret = ISP_Start(&((CMW_IMX335_t *)io_ctx)->hIsp);
340076da:	4628      	mov	r0, r5
340076dc:	f7fe f9a4 	bl	34005a28 <ISP_Start>
  if (ret != ISP_OK)
340076e0:	b950      	cbnz	r0, 340076f8 <CMW_IMX335_Start+0x3c>
  return IMX335_Start(&((CMW_IMX335_t *)io_ctx)->ctx_driver);
340076e2:	f104 0008 	add.w	r0, r4, #8
}
340076e6:	b003      	add	sp, #12
340076e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return IMX335_Start(&((CMW_IMX335_t *)io_ctx)->ctx_driver);
340076ec:	f000 bee6 	b.w	340084bc <IMX335_Start>
    return CMW_ERROR_COMPONENT_FAILURE;
340076f0:	f06f 0004 	mvn.w	r0, #4
}
340076f4:	b003      	add	sp, #12
340076f6:	bd30      	pop	{r4, r5, pc}
      return CMW_ERROR_PERIPH_FAILURE;
340076f8:	f06f 0003 	mvn.w	r0, #3
340076fc:	e7fa      	b.n	340076f4 <CMW_IMX335_Start+0x38>
340076fe:	bf00      	nop
34007700:	340313cc 	.word	0x340313cc

34007704 <CMW_IMX335_Init>:
{
34007704:	b538      	push	{r3, r4, r5, lr}
  if (width == 2592 && height == 1944)
34007706:	e9d1 2300 	ldrd	r2, r3, [r1]
3400770a:	f5b2 6f22 	cmp.w	r2, #2592	@ 0xa20
{
3400770e:	4605      	mov	r5, r0
34007710:	460c      	mov	r4, r1
  if (width == 2592 && height == 1944)
34007712:	d002      	beq.n	3400771a <CMW_IMX335_Init+0x16>
    return CMW_ERROR_WRONG_PARAM;
34007714:	f06f 0001 	mvn.w	r0, #1
}
34007718:	bd38      	pop	{r3, r4, r5, pc}
  if (width == 2592 && height == 1944)
3400771a:	f5b3 6ff3 	cmp.w	r3, #1944	@ 0x798
3400771e:	d1f9      	bne.n	34007714 <CMW_IMX335_Init+0x10>
  ret = CMW_IMX335_SetMirrorFlip(io_ctx, initSensor->mirrorFlip);
34007720:	6909      	ldr	r1, [r1, #16]
34007722:	f7ff ff81 	bl	34007628 <CMW_IMX335_SetMirrorFlip>
  if (ret)
34007726:	2800      	cmp	r0, #0
34007728:	d1f4      	bne.n	34007714 <CMW_IMX335_Init+0x10>
  ret = IMX335_Init(&((CMW_IMX335_t *)io_ctx)->ctx_driver, resolution, initSensor->pixel_format);
3400772a:	2106      	movs	r1, #6
3400772c:	68e2      	ldr	r2, [r4, #12]
3400772e:	f105 0008 	add.w	r0, r5, #8
34007732:	f000 fea3 	bl	3400847c <IMX335_Init>
    return CMW_ERROR_COMPONENT_FAILURE;
34007736:	2800      	cmp	r0, #0
34007738:	bf18      	it	ne
3400773a:	f06f 0004 	mvnne.w	r0, #4
3400773e:	e7eb      	b.n	34007718 <CMW_IMX335_Init+0x14>

34007740 <CMW_IMX335_VsyncEventCallback>:
  switch (pipe)
34007740:	2901      	cmp	r1, #1
{
34007742:	b510      	push	{r4, lr}
  switch (pipe)
34007744:	d007      	beq.n	34007756 <CMW_IMX335_VsyncEventCallback+0x16>
34007746:	2902      	cmp	r1, #2
34007748:	d00f      	beq.n	3400776a <CMW_IMX335_VsyncEventCallback+0x2a>
3400774a:	b999      	cbnz	r1, 34007774 <CMW_IMX335_VsyncEventCallback+0x34>
}
3400774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncDumpFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007750:	3030      	adds	r0, #48	@ 0x30
34007752:	f7fe ba86 	b.w	34005c62 <ISP_IncDumpFrameId>
      ISP_IncMainFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007756:	f100 0430 	add.w	r4, r0, #48	@ 0x30
3400775a:	4620      	mov	r0, r4
3400775c:	f7fe fa7d 	bl	34005c5a <ISP_IncMainFrameId>
      ISP_GatherStatistics(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007760:	4620      	mov	r0, r4
}
34007762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_GatherStatistics(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007766:	f7fe ba76 	b.w	34005c56 <ISP_GatherStatistics>
      ISP_IncAncillaryFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
3400776a:	3030      	adds	r0, #48	@ 0x30
}
3400776c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncAncillaryFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007770:	f7fe ba75 	b.w	34005c5e <ISP_IncAncillaryFrameId>
}
34007774:	bd10      	pop	{r4, pc}
	...

34007778 <CMW_IMX335_Probe>:

int CMW_IMX335_Probe(CMW_IMX335_t *io_ctx, CMW_Sensor_if_t *imx335_if)
{
34007778:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400777a:	4604      	mov	r4, r0
  int ret = CMW_ERROR_NONE;
  uint32_t id;
  io_ctx->ctx_driver.IO.Address = io_ctx->Address;
3400777c:	8803      	ldrh	r3, [r0, #0]
{
3400777e:	460d      	mov	r5, r1
  io_ctx->ctx_driver.IO.Address = io_ctx->Address;
34007780:	8203      	strh	r3, [r0, #16]
  io_ctx->ctx_driver.IO.Init = io_ctx->Init;
34007782:	f8d0 30e4 	ldr.w	r3, [r0, #228]	@ 0xe4
  io_ctx->ctx_driver.IO.ReadReg = io_ctx->ReadReg;
  io_ctx->ctx_driver.IO.WriteReg = io_ctx->WriteReg;

  CMW_IMX335_PowerOn(io_ctx);

  ret = IMX335_RegisterBusIO(&io_ctx->ctx_driver, &io_ctx->ctx_driver.IO);
34007786:	3408      	adds	r4, #8
  io_ctx->ctx_driver.IO.Init = io_ctx->Init;
34007788:	6083      	str	r3, [r0, #8]
  io_ctx->ctx_driver.IO.DeInit = io_ctx->DeInit;
3400778a:	f8d0 30e8 	ldr.w	r3, [r0, #232]	@ 0xe8
3400778e:	60c3      	str	r3, [r0, #12]
  io_ctx->ctx_driver.IO.GetTick = io_ctx->GetTick;
34007790:	f8d0 30f4 	ldr.w	r3, [r0, #244]	@ 0xf4
34007794:	61c3      	str	r3, [r0, #28]
  io_ctx->ctx_driver.IO.ReadReg = io_ctx->ReadReg;
34007796:	f8d0 30f0 	ldr.w	r3, [r0, #240]	@ 0xf0
3400779a:	6183      	str	r3, [r0, #24]
  io_ctx->ctx_driver.IO.WriteReg = io_ctx->WriteReg;
3400779c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
340077a0:	6143      	str	r3, [r0, #20]
  io_ctx->ShutdownPin(0);  /* Disable MB1723 2V8 signal  */
340077a2:	f8d0 30fc 	ldr.w	r3, [r0, #252]	@ 0xfc
340077a6:	2000      	movs	r0, #0
340077a8:	4798      	blx	r3
  io_ctx->Delay(100);
340077aa:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340077ae:	2064      	movs	r0, #100	@ 0x64
340077b0:	4798      	blx	r3
  io_ctx->EnablePin(0);  /* RESET low (reset active low) */
340077b2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
340077b6:	2000      	movs	r0, #0
340077b8:	4798      	blx	r3
  io_ctx->Delay(100);
340077ba:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340077be:	2064      	movs	r0, #100	@ 0x64
340077c0:	4798      	blx	r3
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
340077c2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
340077c6:	2001      	movs	r0, #1
340077c8:	4798      	blx	r3
  io_ctx->Delay(100);
340077ca:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340077ce:	2064      	movs	r0, #100	@ 0x64
340077d0:	4798      	blx	r3
  io_ctx->EnablePin(1);  /* RESET low (reset active low) */
340077d2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
340077d6:	2001      	movs	r0, #1
340077d8:	4798      	blx	r3
  io_ctx->Delay(100);
340077da:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340077de:	2064      	movs	r0, #100	@ 0x64
340077e0:	4798      	blx	r3
  ret = IMX335_RegisterBusIO(&io_ctx->ctx_driver, &io_ctx->ctx_driver.IO);
340077e2:	4621      	mov	r1, r4
340077e4:	4620      	mov	r0, r4
340077e6:	f000 fe2d 	bl	34008444 <IMX335_RegisterBusIO>
  if (ret != IMX335_OK)
340077ea:	4606      	mov	r6, r0
340077ec:	b120      	cbz	r0, 340077f8 <CMW_IMX335_Probe+0x80>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
340077ee:	f06f 0404 	mvn.w	r4, #4
  imx335_if->SetFramerate = CMW_IMX335_SetFramerate;
  imx335_if->SetMirrorFlip = CMW_IMX335_SetMirrorFlip;
  imx335_if->GetSensorInfo = CMW_IMX335_GetSensorInfo;
  imx335_if->SetTestPattern = CMW_IMX335_SetTestPattern;
  return ret;
}
340077f2:	4620      	mov	r0, r4
340077f4:	b002      	add	sp, #8
340077f6:	bd70      	pop	{r4, r5, r6, pc}
  ret = IMX335_ReadID(&io_ctx->ctx_driver, &id);
340077f8:	4620      	mov	r0, r4
340077fa:	a901      	add	r1, sp, #4
340077fc:	f000 fe84 	bl	34008508 <IMX335_ReadID>
  if (ret != IMX335_OK)
34007800:	4604      	mov	r4, r0
34007802:	2800      	cmp	r0, #0
34007804:	d1f3      	bne.n	340077ee <CMW_IMX335_Probe+0x76>
  if (id != IMX335_CHIP_ID)
34007806:	9b01      	ldr	r3, [sp, #4]
  memset(imx335_if, 0, sizeof(*imx335_if));
34007808:	2250      	movs	r2, #80	@ 0x50
      ret = CMW_ERROR_UNKNOWN_COMPONENT;
3400780a:	2b00      	cmp	r3, #0
3400780c:	bf08      	it	eq
3400780e:	4604      	moveq	r4, r0
  memset(imx335_if, 0, sizeof(*imx335_if));
34007810:	4631      	mov	r1, r6
34007812:	f105 0018 	add.w	r0, r5, #24
      ret = CMW_ERROR_UNKNOWN_COMPONENT;
34007816:	bf18      	it	ne
34007818:	f06f 0406 	mvnne.w	r4, #6
  memset(imx335_if, 0, sizeof(*imx335_if));
3400781c:	f019 ff7a 	bl	34021714 <memset>
  imx335_if->Init = CMW_IMX335_Init;
34007820:	4b10      	ldr	r3, [pc, #64]	@ (34007864 <CMW_IMX335_Probe+0xec>)
34007822:	602b      	str	r3, [r5, #0]
  imx335_if->Start = CMW_IMX335_Start;
34007824:	4b10      	ldr	r3, [pc, #64]	@ (34007868 <CMW_IMX335_Probe+0xf0>)
34007826:	60ab      	str	r3, [r5, #8]
  imx335_if->DeInit = CMW_IMX335_DeInit;
34007828:	4b10      	ldr	r3, [pc, #64]	@ (3400786c <CMW_IMX335_Probe+0xf4>)
3400782a:	606b      	str	r3, [r5, #4]
  imx335_if->Run = CMW_IMX335_Run;
3400782c:	4b10      	ldr	r3, [pc, #64]	@ (34007870 <CMW_IMX335_Probe+0xf8>)
3400782e:	60eb      	str	r3, [r5, #12]
  imx335_if->VsyncEventCallback = CMW_IMX335_VsyncEventCallback;
34007830:	4b10      	ldr	r3, [pc, #64]	@ (34007874 <CMW_IMX335_Probe+0xfc>)
34007832:	612b      	str	r3, [r5, #16]
  imx335_if->FrameEventCallback = CMW_IMX335_FrameEventCallback;
34007834:	4b10      	ldr	r3, [pc, #64]	@ (34007878 <CMW_IMX335_Probe+0x100>)
34007836:	616b      	str	r3, [r5, #20]
  imx335_if->ReadID = CMW_IMX335_ReadID;
34007838:	4b10      	ldr	r3, [pc, #64]	@ (3400787c <CMW_IMX335_Probe+0x104>)
3400783a:	61eb      	str	r3, [r5, #28]
  imx335_if->SetGain = CMW_IMX335_SetGain;
3400783c:	4b10      	ldr	r3, [pc, #64]	@ (34007880 <CMW_IMX335_Probe+0x108>)
3400783e:	64ab      	str	r3, [r5, #72]	@ 0x48
  imx335_if->SetExposure = CMW_IMX335_SetExposure;
34007840:	4b10      	ldr	r3, [pc, #64]	@ (34007884 <CMW_IMX335_Probe+0x10c>)
34007842:	64eb      	str	r3, [r5, #76]	@ 0x4c
  imx335_if->SetWBRefMode = CMW_IMX335_SetWBRefMode;
34007844:	4b10      	ldr	r3, [pc, #64]	@ (34007888 <CMW_IMX335_Probe+0x110>)
34007846:	656b      	str	r3, [r5, #84]	@ 0x54
  imx335_if->ListWBRefModes = CMW_IMX335_ListWBRefModes;
34007848:	4b10      	ldr	r3, [pc, #64]	@ (3400788c <CMW_IMX335_Probe+0x114>)
3400784a:	65ab      	str	r3, [r5, #88]	@ 0x58
  imx335_if->SetFrequency = CMW_IMX335_SetFrequency;
3400784c:	4b10      	ldr	r3, [pc, #64]	@ (34007890 <CMW_IMX335_Probe+0x118>)
3400784e:	642b      	str	r3, [r5, #64]	@ 0x40
  imx335_if->SetFramerate = CMW_IMX335_SetFramerate;
34007850:	4b10      	ldr	r3, [pc, #64]	@ (34007894 <CMW_IMX335_Probe+0x11c>)
34007852:	646b      	str	r3, [r5, #68]	@ 0x44
  imx335_if->SetMirrorFlip = CMW_IMX335_SetMirrorFlip;
34007854:	4b10      	ldr	r3, [pc, #64]	@ (34007898 <CMW_IMX335_Probe+0x120>)
34007856:	62eb      	str	r3, [r5, #44]	@ 0x2c
  imx335_if->GetSensorInfo = CMW_IMX335_GetSensorInfo;
34007858:	4b10      	ldr	r3, [pc, #64]	@ (3400789c <CMW_IMX335_Probe+0x124>)
3400785a:	662b      	str	r3, [r5, #96]	@ 0x60
  imx335_if->SetTestPattern = CMW_IMX335_SetTestPattern;
3400785c:	4b10      	ldr	r3, [pc, #64]	@ (340078a0 <CMW_IMX335_Probe+0x128>)
3400785e:	666b      	str	r3, [r5, #100]	@ 0x64
  return ret;
34007860:	e7c7      	b.n	340077f2 <CMW_IMX335_Probe+0x7a>
34007862:	bf00      	nop
34007864:	34007705 	.word	0x34007705
34007868:	340076bd 	.word	0x340076bd
3400786c:	3400769b 	.word	0x3400769b
34007870:	34007687 	.word	0x34007687
34007874:	34007741 	.word	0x34007741
34007878:	340075a9 	.word	0x340075a9
3400787c:	340075d3 	.word	0x340075d3
34007880:	34007681 	.word	0x34007681
34007884:	3400767b 	.word	0x3400767b
34007888:	340075ab 	.word	0x340075ab
3400788c:	340075bf 	.word	0x340075bf
34007890:	34007675 	.word	0x34007675
34007894:	34007635 	.word	0x34007635
34007898:	34007629 	.word	0x34007629
3400789c:	340075e1 	.word	0x340075e1
340078a0:	340075d9 	.word	0x340075d9

340078a4 <CMW_VD55G1_Read32>:
static int CMW_VD55G1_Read32(CMW_VD55G1_t *pObj, uint16_t addr, uint32_t *value)
{
  uint8_t data[4];
  int ret;

  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
340078a4:	2304      	movs	r3, #4
{
340078a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
340078a8:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
340078aa:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
340078ac:	eb0d 0203 	add.w	r2, sp, r3
340078b0:	8800      	ldrh	r0, [r0, #0]
340078b2:	47a8      	blx	r5
  if (ret)
340078b4:	b908      	cbnz	r0, 340078ba <CMW_VD55G1_Read32+0x16>
    return ret;

  *value = (data[3] << 24) | (data[2] << 16) | (data[1] << 8) | data[0];
340078b6:	9b01      	ldr	r3, [sp, #4]
340078b8:	6023      	str	r3, [r4, #0]

  return 0;
}
340078ba:	b003      	add	sp, #12
340078bc:	bd30      	pop	{r4, r5, pc}

340078be <VD55G1_ShutdownPin>:

static void VD55G1_ShutdownPin(struct VD55G1_Ctx *ctx, int value)
{
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  p_ctx->ShutdownPin(value);
340078be:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
340078c2:	4608      	mov	r0, r1
340078c4:	4718      	bx	r3

340078c6 <VD55G1_Read8>:
}

static int VD55G1_Read8(struct VD55G1_Ctx *ctx, uint16_t addr, uint8_t *value)
{
340078c6:	b410      	push	{r4}
  return pObj->ReadReg(pObj->Address, addr, value, 1);
340078c8:	6f84      	ldr	r4, [r0, #120]	@ 0x78
340078ca:	2301      	movs	r3, #1
340078cc:	46a4      	mov	ip, r4
340078ce:	f830 0c04 	ldrh.w	r0, [r0, #-4]
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Read8(p_ctx, addr, value);
}
340078d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->ReadReg(pObj->Address, addr, value, 1);
340078d6:	4760      	bx	ip

340078d8 <VD55G1_Read16>:

static int VD55G1_Read16(struct VD55G1_Ctx *ctx, uint16_t addr, uint16_t *value)
{
340078d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
340078da:	2302      	movs	r3, #2
{
340078dc:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
340078de:	6f85      	ldr	r5, [r0, #120]	@ 0x78
340078e0:	aa01      	add	r2, sp, #4
340078e2:	f830 0c04 	ldrh.w	r0, [r0, #-4]
340078e6:	47a8      	blx	r5
  if (ret)
340078e8:	b910      	cbnz	r0, 340078f0 <VD55G1_Read16+0x18>
  *value = (data[1] << 8) | data[0];
340078ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
340078ee:	8023      	strh	r3, [r4, #0]
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Read16(p_ctx, addr, value);
}
340078f0:	b003      	add	sp, #12
340078f2:	bd30      	pop	{r4, r5, pc}

340078f4 <VD55G1_Read32>:

static int VD55G1_Read32(struct VD55G1_Ctx *ctx, uint16_t addr, uint32_t *value)
{
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Read32(p_ctx, addr, value);
340078f4:	3804      	subs	r0, #4
340078f6:	f7ff bfd5 	b.w	340078a4 <CMW_VD55G1_Read32>

340078fa <VD55G1_Write8>:
}

static int VD55G1_Write8(struct VD55G1_Ctx *ctx, uint16_t addr, uint8_t value)
{
340078fa:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, &value, 1);
340078fc:	2301      	movs	r3, #1
340078fe:	6f44      	ldr	r4, [r0, #116]	@ 0x74
34007900:	f88d 2007 	strb.w	r2, [sp, #7]
34007904:	f830 0c04 	ldrh.w	r0, [r0, #-4]
34007908:	f10d 0207 	add.w	r2, sp, #7
3400790c:	47a0      	blx	r4
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Write8(p_ctx, addr, value);
}
3400790e:	b002      	add	sp, #8
34007910:	bd10      	pop	{r4, pc}

34007912 <VD55G1_Write16>:

static int VD55G1_Write16(struct VD55G1_Ctx *ctx, uint16_t addr, uint16_t value)
{
34007912:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 2);
34007914:	2302      	movs	r3, #2
34007916:	6f44      	ldr	r4, [r0, #116]	@ 0x74
34007918:	f8ad 2006 	strh.w	r2, [sp, #6]
3400791c:	f830 0c04 	ldrh.w	r0, [r0, #-4]
34007920:	f10d 0206 	add.w	r2, sp, #6
34007924:	47a0      	blx	r4
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Write16(p_ctx, addr, value);
}
34007926:	b002      	add	sp, #8
34007928:	bd10      	pop	{r4, pc}

3400792a <VD55G1_Write32>:
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
3400792a:	2304      	movs	r3, #4

static int VD55G1_Write32(struct VD55G1_Ctx *ctx, uint16_t addr, uint32_t value)
{
3400792c:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
3400792e:	6f44      	ldr	r4, [r0, #116]	@ 0x74
34007930:	9201      	str	r2, [sp, #4]
34007932:	f830 0c04 	ldrh.w	r0, [r0, #-4]
34007936:	eb0d 0203 	add.w	r2, sp, r3
3400793a:	47a0      	blx	r4
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Write32(p_ctx, addr, value);
}
3400793c:	b002      	add	sp, #8
3400793e:	bd10      	pop	{r4, pc}

34007940 <VD55G1_WriteArray>:

static int VD55G1_WriteArray(struct VD55G1_Ctx *ctx, uint16_t addr, uint8_t *data, int data_len)
{
34007940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34007944:	4680      	mov	r8, r0
34007946:	460d      	mov	r5, r1
34007948:	4616      	mov	r6, r2
3400794a:	461c      	mov	r4, r3
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);
  const unsigned int chunk_size = 128;
  uint16_t sz;
  int ret;

  while (data_len) {
3400794c:	b914      	cbnz	r4, 34007954 <VD55G1_WriteArray+0x14>
    data_len -= sz;
    addr += sz;
    data += sz;
  }

  return 0;
3400794e:	4620      	mov	r0, r4
}
34007950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sz = MIN(data_len, chunk_size);
34007954:	2c80      	cmp	r4, #128	@ 0x80
34007956:	46a1      	mov	r9, r4
34007958:	bf28      	it	cs
3400795a:	f04f 0980 	movcs.w	r9, #128	@ 0x80
3400795e:	fa1f fa89 	uxth.w	sl, r9
    ret = p_ctx->WriteReg(p_ctx->Address, addr, data, sz);
34007962:	4653      	mov	r3, sl
34007964:	4632      	mov	r2, r6
34007966:	4629      	mov	r1, r5
34007968:	f8d8 7074 	ldr.w	r7, [r8, #116]	@ 0x74
3400796c:	f838 0c04 	ldrh.w	r0, [r8, #-4]
34007970:	47b8      	blx	r7
    if (ret)
34007972:	2800      	cmp	r0, #0
34007974:	d1ec      	bne.n	34007950 <VD55G1_WriteArray+0x10>
    addr += sz;
34007976:	44aa      	add	sl, r5
    data_len -= sz;
34007978:	eba4 0409 	sub.w	r4, r4, r9
    addr += sz;
3400797c:	fa1f f58a 	uxth.w	r5, sl
    data += sz;
34007980:	444e      	add	r6, r9
34007982:	e7e3      	b.n	3400794c <VD55G1_WriteArray+0xc>

34007984 <VD55G1_Delay>:

static void VD55G1_Delay(struct VD55G1_Ctx *ctx, uint32_t delay_in_ms)
{
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  p_ctx->Delay(delay_in_ms);
34007984:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
34007988:	4608      	mov	r0, r1
3400798a:	4718      	bx	r3

3400798c <VD55G1_Log>:
  if (lvl > current_lvl)
    return ;

  vprintf(format, ap);
#endif
}
3400798c:	4770      	bx	lr

3400798e <CMW_VD55G1_GetSensorInfo>:
  * @param  pInfo pointer to sensor info structure
  * @retval Component status
  */
static int32_t CMW_VD55G1_GetSensorInfo(void *io_ctx, ISP_SensorInfoTypeDef *info)
{
  if ((io_ctx ==  NULL) || (info == NULL))
3400798e:	b140      	cbz	r0, 340079a2 <CMW_VD55G1_GetSensorInfo+0x14>
34007990:	b139      	cbz	r1, 340079a2 <CMW_VD55G1_GetSensorInfo+0x14>
    return CMW_ERROR_WRONG_PARAM;
  }

  /* Return the default full resolution */
  info->width = VD55G1_MAX_WIDTH;
  info->height = VD55G1_MAX_HEIGHT;
34007992:	f44f 7249 	mov.w	r2, #804	@ 0x324
34007996:	f44f 7330 	mov.w	r3, #704	@ 0x2c0

  return CMW_ERROR_NONE;
3400799a:	2000      	movs	r0, #0
  info->height = VD55G1_MAX_HEIGHT;
3400799c:	e9c1 2309 	strd	r2, r3, [r1, #36]	@ 0x24
  return CMW_ERROR_NONE;
340079a0:	4770      	bx	lr
    return CMW_ERROR_WRONG_PARAM;
340079a2:	f06f 0001 	mvn.w	r0, #1
}
340079a6:	4770      	bx	lr

340079a8 <CMW_VD55G1_MirrorFlipConfig>:

static int32_t CMW_VD55G1_MirrorFlipConfig(void *io_ctx, uint32_t Config)
{
  int32_t ret = CMW_ERROR_NONE;

  switch (Config) {
340079a8:	2903      	cmp	r1, #3
340079aa:	d80d      	bhi.n	340079c8 <CMW_VD55G1_MirrorFlipConfig+0x20>
340079ac:	e8df f001 	tbb	[pc, r1]
340079b0:	0a080602 	.word	0x0a080602
    case CMW_MIRRORFLIP_NONE:
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR_FLIP_NONE);
340079b4:	2100      	movs	r1, #0
      break;
    case CMW_MIRRORFLIP_MIRROR:
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR);
      break;
    case CMW_MIRRORFLIP_FLIP_MIRROR:
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR_FLIP);
340079b6:	3004      	adds	r0, #4
340079b8:	f001 bc55 	b.w	34009266 <VD55G1_SetFlipMirrorMode>
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_FLIP);
340079bc:	2101      	movs	r1, #1
340079be:	e7fa      	b.n	340079b6 <CMW_VD55G1_MirrorFlipConfig+0xe>
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR);
340079c0:	2102      	movs	r1, #2
340079c2:	e7f8      	b.n	340079b6 <CMW_VD55G1_MirrorFlipConfig+0xe>
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR_FLIP);
340079c4:	2103      	movs	r1, #3
340079c6:	e7f6      	b.n	340079b6 <CMW_VD55G1_MirrorFlipConfig+0xe>
    default:
      ret = CMW_ERROR_PERIPH_FAILURE;
  }

  return ret;
}
340079c8:	f06f 0003 	mvn.w	r0, #3
340079cc:	4770      	bx	lr

340079ce <CMW_VD55G1_Stop>:
{
340079ce:	b508      	push	{r3, lr}
  ret = VD55G1_Stop(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340079d0:	3004      	adds	r0, #4
340079d2:	f001 fc41 	bl	34009258 <VD55G1_Stop>
    return CMW_ERROR_PERIPH_FAILURE;
340079d6:	2800      	cmp	r0, #0
}
340079d8:	bf18      	it	ne
340079da:	f06f 0003 	mvnne.w	r0, #3
340079de:	bd08      	pop	{r3, pc}

340079e0 <CMW_VD55G1_Start>:
{
340079e0:	b510      	push	{r4, lr}
  ret = VD55G1_Start(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340079e2:	1d04      	adds	r4, r0, #4
340079e4:	4620      	mov	r0, r4
340079e6:	f001 f9ab 	bl	34008d40 <VD55G1_Start>
  if (ret) {
340079ea:	b120      	cbz	r0, 340079f6 <CMW_VD55G1_Start+0x16>
    VD55G1_DeInit(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340079ec:	4620      	mov	r0, r4
340079ee:	f001 f995 	bl	34008d1c <VD55G1_DeInit>
    return CMW_ERROR_PERIPH_FAILURE;
340079f2:	f06f 0003 	mvn.w	r0, #3
}
340079f6:	bd10      	pop	{r4, pc}

340079f8 <CMW_VD55G1_DeInit>:
{
340079f8:	b538      	push	{r3, r4, r5, lr}
  ret = VD55G1_Stop(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340079fa:	1d05      	adds	r5, r0, #4
{
340079fc:	4604      	mov	r4, r0
  ret = VD55G1_Stop(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340079fe:	4628      	mov	r0, r5
34007a00:	f001 fc2a 	bl	34009258 <VD55G1_Stop>
  if (ret)
34007a04:	b110      	cbz	r0, 34007a0c <CMW_VD55G1_DeInit+0x14>
    return CMW_ERROR_PERIPH_FAILURE;
34007a06:	f06f 0003 	mvn.w	r0, #3
}
34007a0a:	bd38      	pop	{r3, r4, r5, pc}
  ret = VD55G1_DeInit(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
34007a0c:	4628      	mov	r0, r5
34007a0e:	f001 f985 	bl	34008d1c <VD55G1_DeInit>
  if (ret)
34007a12:	2800      	cmp	r0, #0
34007a14:	d1f7      	bne.n	34007a06 <CMW_VD55G1_DeInit+0xe>
  ((CMW_VD55G1_t *)io_ctx)->IsInitialized = 0;
34007a16:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
  return CMW_ERROR_NONE;
34007a1a:	e7f6      	b.n	34007a0a <CMW_VD55G1_DeInit+0x12>

34007a1c <CMW_VD55G1_Init>:
{
34007a1c:	b570      	push	{r4, r5, r6, lr}
34007a1e:	460c      	mov	r4, r1
34007a20:	b092      	sub	sp, #72	@ 0x48
34007a22:	4605      	mov	r5, r0
  VD55G1_Config_t config = { 0 };
34007a24:	2234      	movs	r2, #52	@ 0x34
34007a26:	2100      	movs	r1, #0
34007a28:	a805      	add	r0, sp, #20
34007a2a:	f019 fe73 	bl	34021714 <memset>
  assert(initSensor != NULL);
34007a2e:	b92c      	cbnz	r4, 34007a3c <CMW_VD55G1_Init+0x20>
34007a30:	21f8      	movs	r1, #248	@ 0xf8
34007a32:	4b2c      	ldr	r3, [pc, #176]	@ (34007ae4 <CMW_VD55G1_Init+0xc8>)
34007a34:	4a2c      	ldr	r2, [pc, #176]	@ (34007ae8 <CMW_VD55G1_Init+0xcc>)
34007a36:	482d      	ldr	r0, [pc, #180]	@ (34007aec <CMW_VD55G1_Init+0xd0>)
34007a38:	f017 ffe6 	bl	3401fa08 <__assert_func>
  if (((CMW_VD55G1_t *)io_ctx)->IsInitialized)
34007a3c:	f895 306c 	ldrb.w	r3, [r5, #108]	@ 0x6c
34007a40:	2b00      	cmp	r3, #0
34007a42:	d138      	bne.n	34007ab6 <CMW_VD55G1_Init+0x9a>
  config.frame_rate = initSensor->fps;
34007a44:	68a3      	ldr	r3, [r4, #8]
34007a46:	9307      	str	r3, [sp, #28]
  ret = CMW_VD55G1_GetResType(initSensor->width, initSensor->height, &config.resolution);
34007a48:	e9d4 2300 	ldrd	r2, r3, [r4]
  if (width == 320 && height == 240)
34007a4c:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
34007a50:	d104      	bne.n	34007a5c <CMW_VD55G1_Init+0x40>
34007a52:	2bf0      	cmp	r3, #240	@ 0xf0
34007a54:	d00b      	beq.n	34007a6e <CMW_VD55G1_Init+0x52>
    return CMW_ERROR_WRONG_PARAM;
34007a56:	f06f 0001 	mvn.w	r0, #1
34007a5a:	e02d      	b.n	34007ab8 <CMW_VD55G1_Init+0x9c>
  else if (width == 640 && height == 480)
34007a5c:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
34007a60:	d12c      	bne.n	34007abc <CMW_VD55G1_Init+0xa0>
34007a62:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
34007a66:	d1f6      	bne.n	34007a56 <CMW_VD55G1_Init+0x3a>
    *res = VD55G1_RES_VGA_640_480;
34007a68:	2301      	movs	r3, #1
      *res = VD55G1_RES_FULL_804_704;
34007a6a:	f88d 3018 	strb.w	r3, [sp, #24]
  vd55g1_config->csiconfig.data_rate_in_mps = VD55G1_DEFAULT_DATARATE;
34007a6e:	4a20      	ldr	r2, [pc, #128]	@ (34007af0 <CMW_VD55G1_Init+0xd4>)
34007a70:	4b20      	ldr	r3, [pc, #128]	@ (34007af4 <CMW_VD55G1_Init+0xd8>)
  vd55g1_config->csiconfig.clock_lane_swap_enable = 1;
34007a72:	2601      	movs	r6, #1
  vd55g1_config->csiconfig.data_rate_in_mps = VD55G1_DEFAULT_DATARATE;
34007a74:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sensor_config = initSensor->sensor_config ? (CMW_VD55G1_config_t*)(initSensor->sensor_config) : &default_sensor_config;
34007a78:	6963      	ldr	r3, [r4, #20]
34007a7a:	aa01      	add	r2, sp, #4
34007a7c:	2b00      	cmp	r3, #0
34007a7e:	bf08      	it	eq
34007a80:	4613      	moveq	r3, r2
  config.ext_clock_freq_in_hz = sensor_config->ext_clock_freq_in_hz;
34007a82:	681a      	ldr	r2, [r3, #0]
  vd55g1_config->csiconfig.data_lane_swap_enable = 1;
34007a84:	e9cd 6603 	strd	r6, r6, [sp, #12]
  config.ext_clock_freq_in_hz = sensor_config->ext_clock_freq_in_hz;
34007a88:	9205      	str	r2, [sp, #20]
  config.out_itf.data_rate_in_mps = sensor_config->csiconfig.data_rate_in_mps;
34007a8a:	685a      	ldr	r2, [r3, #4]
  ret = VD55G1_Init(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, &config);
34007a8c:	a905      	add	r1, sp, #20
  config.out_itf.data_rate_in_mps = sensor_config->csiconfig.data_rate_in_mps;
34007a8e:	9209      	str	r2, [sp, #36]	@ 0x24
  config.out_itf.clock_lane_swap_enable =sensor_config->csiconfig.clock_lane_swap_enable;
34007a90:	689a      	ldr	r2, [r3, #8]
  config.out_itf.data_lane_swap_enable = sensor_config->csiconfig.data_lane_swap_enable;
34007a92:	68db      	ldr	r3, [r3, #12]
  ret = VD55G1_Init(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, &config);
34007a94:	1d28      	adds	r0, r5, #4
  config.out_itf.data_lane_swap_enable = sensor_config->csiconfig.data_lane_swap_enable;
34007a96:	930b      	str	r3, [sp, #44]	@ 0x2c
  config.flip_mirror_mode = CMW_VD55G1_getMirrorFlipConfig(initSensor->mirrorFlip);
34007a98:	6923      	ldr	r3, [r4, #16]
  config.out_itf.clock_lane_swap_enable =sensor_config->csiconfig.clock_lane_swap_enable;
34007a9a:	920a      	str	r2, [sp, #40]	@ 0x28
  config.flip_mirror_mode = CMW_VD55G1_getMirrorFlipConfig(initSensor->mirrorFlip);
34007a9c:	2b03      	cmp	r3, #3
34007a9e:	bf28      	it	cs
34007aa0:	2303      	movcs	r3, #3
34007aa2:	f88d 3020 	strb.w	r3, [sp, #32]
    config.gpio_ctrl[i] = VD55G1_GPIO_GPIO_IN;
34007aa6:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
34007aaa:	9311      	str	r3, [sp, #68]	@ 0x44
  ret = VD55G1_Init(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, &config);
34007aac:	f001 f832 	bl	34008b14 <VD55G1_Init>
  if (ret)
34007ab0:	b9a0      	cbnz	r0, 34007adc <CMW_VD55G1_Init+0xc0>
  ((CMW_VD55G1_t *)io_ctx)->IsInitialized = 1;
34007ab2:	f885 606c 	strb.w	r6, [r5, #108]	@ 0x6c
    return CMW_ERROR_NONE;
34007ab6:	2000      	movs	r0, #0
}
34007ab8:	b012      	add	sp, #72	@ 0x48
34007aba:	bd70      	pop	{r4, r5, r6, pc}
  else if (width == 800 && height == 600)
34007abc:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
34007ac0:	d104      	bne.n	34007acc <CMW_VD55G1_Init+0xb0>
34007ac2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
34007ac6:	d1c6      	bne.n	34007a56 <CMW_VD55G1_Init+0x3a>
    *res = VD55G1_RES_SXGA_800_600;
34007ac8:	2302      	movs	r3, #2
34007aca:	e7ce      	b.n	34007a6a <CMW_VD55G1_Init+0x4e>
  else if (width == 804 && height == 704)
34007acc:	f5b2 7f49 	cmp.w	r2, #804	@ 0x324
34007ad0:	d1c1      	bne.n	34007a56 <CMW_VD55G1_Init+0x3a>
34007ad2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
34007ad6:	d1be      	bne.n	34007a56 <CMW_VD55G1_Init+0x3a>
      *res = VD55G1_RES_FULL_804_704;
34007ad8:	2303      	movs	r3, #3
34007ada:	e7c6      	b.n	34007a6a <CMW_VD55G1_Init+0x4e>
    return CMW_ERROR_PERIPH_FAILURE;
34007adc:	f06f 0003 	mvn.w	r0, #3
34007ae0:	e7ea      	b.n	34007ab8 <CMW_VD55G1_Init+0x9c>
34007ae2:	bf00      	nop
34007ae4:	3402c34a 	.word	0x3402c34a
34007ae8:	34031624 	.word	0x34031624
34007aec:	3402c35d 	.word	0x3402c35d
34007af0:	00b71b00 	.word	0x00b71b00
34007af4:	2fec1100 	.word	0x2fec1100

34007af8 <CMW_VD55G1_SetDefaultSensorValues>:
{
34007af8:	b508      	push	{r3, lr}
  assert(vd55g1_config != NULL);
34007afa:	b930      	cbnz	r0, 34007b0a <CMW_VD55G1_SetDefaultSensorValues+0x12>
34007afc:	f240 1127 	movw	r1, #295	@ 0x127
34007b00:	4b06      	ldr	r3, [pc, #24]	@ (34007b1c <CMW_VD55G1_SetDefaultSensorValues+0x24>)
34007b02:	4a07      	ldr	r2, [pc, #28]	@ (34007b20 <CMW_VD55G1_SetDefaultSensorValues+0x28>)
34007b04:	4807      	ldr	r0, [pc, #28]	@ (34007b24 <CMW_VD55G1_SetDefaultSensorValues+0x2c>)
34007b06:	f017 ff7f 	bl	3401fa08 <__assert_func>
  vd55g1_config->csiconfig.data_rate_in_mps = VD55G1_DEFAULT_DATARATE;
34007b0a:	4b07      	ldr	r3, [pc, #28]	@ (34007b28 <CMW_VD55G1_SetDefaultSensorValues+0x30>)
34007b0c:	4a07      	ldr	r2, [pc, #28]	@ (34007b2c <CMW_VD55G1_SetDefaultSensorValues+0x34>)
34007b0e:	e9c0 2300 	strd	r2, r3, [r0]
  vd55g1_config->csiconfig.clock_lane_swap_enable = 1;
34007b12:	2301      	movs	r3, #1
  vd55g1_config->csiconfig.data_lane_swap_enable = 1;
34007b14:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
34007b18:	bd08      	pop	{r3, pc}
34007b1a:	bf00      	nop
34007b1c:	3402c3b7 	.word	0x3402c3b7
34007b20:	34031634 	.word	0x34031634
34007b24:	3402c35d 	.word	0x3402c35d
34007b28:	2fec1100 	.word	0x2fec1100
34007b2c:	00b71b00 	.word	0x00b71b00

34007b30 <CMW_VD55G1_Probe>:
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
  io_ctx->Delay(20); /* NRST de-asserted during 20ms */
}

int CMW_VD55G1_Probe(CMW_VD55G1_t *io_ctx, CMW_Sensor_if_t *vd55g1_if)
{
34007b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
34007b32:	4604      	mov	r4, r0
  int ret = CMW_ERROR_NONE;
  uint32_t id;

  io_ctx->ctx_driver.shutdown_pin = VD55G1_ShutdownPin;
34007b34:	4b26      	ldr	r3, [pc, #152]	@ (34007bd0 <CMW_VD55G1_Probe+0xa0>)
{
34007b36:	460d      	mov	r5, r1
  io_ctx->ctx_driver.shutdown_pin = VD55G1_ShutdownPin;
34007b38:	6043      	str	r3, [r0, #4]
  io_ctx->ctx_driver.read8 = VD55G1_Read8;
34007b3a:	4b26      	ldr	r3, [pc, #152]	@ (34007bd4 <CMW_VD55G1_Probe+0xa4>)
34007b3c:	6083      	str	r3, [r0, #8]
  io_ctx->ctx_driver.read16 = VD55G1_Read16;
34007b3e:	4b26      	ldr	r3, [pc, #152]	@ (34007bd8 <CMW_VD55G1_Probe+0xa8>)
34007b40:	60c3      	str	r3, [r0, #12]
  io_ctx->ctx_driver.read32 = VD55G1_Read32;
34007b42:	4b26      	ldr	r3, [pc, #152]	@ (34007bdc <CMW_VD55G1_Probe+0xac>)
34007b44:	6103      	str	r3, [r0, #16]
  io_ctx->ctx_driver.write8 = VD55G1_Write8;
34007b46:	4b26      	ldr	r3, [pc, #152]	@ (34007be0 <CMW_VD55G1_Probe+0xb0>)
34007b48:	6143      	str	r3, [r0, #20]
  io_ctx->ctx_driver.write16 = VD55G1_Write16;
34007b4a:	4b26      	ldr	r3, [pc, #152]	@ (34007be4 <CMW_VD55G1_Probe+0xb4>)
34007b4c:	6183      	str	r3, [r0, #24]
  io_ctx->ctx_driver.write32 = VD55G1_Write32;
34007b4e:	4b26      	ldr	r3, [pc, #152]	@ (34007be8 <CMW_VD55G1_Probe+0xb8>)
34007b50:	61c3      	str	r3, [r0, #28]
  io_ctx->ctx_driver.write_array = VD55G1_WriteArray;
34007b52:	4b26      	ldr	r3, [pc, #152]	@ (34007bec <CMW_VD55G1_Probe+0xbc>)
34007b54:	6203      	str	r3, [r0, #32]
  io_ctx->ctx_driver.delay = VD55G1_Delay;
34007b56:	4b26      	ldr	r3, [pc, #152]	@ (34007bf0 <CMW_VD55G1_Probe+0xc0>)
34007b58:	6243      	str	r3, [r0, #36]	@ 0x24
  io_ctx->ctx_driver.log = VD55G1_Log;
34007b5a:	4b26      	ldr	r3, [pc, #152]	@ (34007bf4 <CMW_VD55G1_Probe+0xc4>)
34007b5c:	6283      	str	r3, [r0, #40]	@ 0x28
  io_ctx->ShutdownPin(0);  /* Disable MB1723 2V8 signal  */
34007b5e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
34007b62:	2000      	movs	r0, #0
34007b64:	4798      	blx	r3
  io_ctx->Delay(200); /* NRST signals asserted during 200ms */
34007b66:	20c8      	movs	r0, #200	@ 0xc8
34007b68:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
34007b6c:	4798      	blx	r3
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
34007b6e:	2001      	movs	r0, #1
34007b70:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34007b74:	4798      	blx	r3
  io_ctx->Delay(20); /* NRST de-asserted during 20ms */
34007b76:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
34007b7a:	2014      	movs	r0, #20
34007b7c:	4798      	blx	r3
  if (!io_ctx->Init)
34007b7e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34007b80:	b923      	cbnz	r3, 34007b8c <CMW_VD55G1_Probe+0x5c>
  CMW_VD55G1_PowerOn(io_ctx);

  ret = VD55G1_RegisterBusIO(io_ctx);
  if (ret != CMW_ERROR_NONE)
  {
    return CMW_ERROR_COMPONENT_FAILURE;
34007b82:	f06f 0404 	mvn.w	r4, #4
  vd55g1_if->Start = CMW_VD55G1_Start;
  vd55g1_if->Stop = CMW_VD55G1_Stop;
  vd55g1_if->SetMirrorFlip = CMW_VD55G1_MirrorFlipConfig;
  vd55g1_if->GetSensorInfo = CMW_VD55G1_GetSensorInfo;
  return ret;
}
34007b86:	4620      	mov	r0, r4
34007b88:	b003      	add	sp, #12
34007b8a:	bd30      	pop	{r4, r5, pc}
  ret = io_ctx->Init();
34007b8c:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34007b8e:	4601      	mov	r1, r0
34007b90:	2800      	cmp	r0, #0
34007b92:	d1f6      	bne.n	34007b82 <CMW_VD55G1_Probe+0x52>
  ret = CMW_VD55G1_Read32(io_ctx, VD55G1_REG_MODEL_ID, &reg32);
34007b94:	4620      	mov	r0, r4
34007b96:	aa01      	add	r2, sp, #4
34007b98:	f7ff fe84 	bl	340078a4 <CMW_VD55G1_Read32>
  if (ret)
34007b9c:	4604      	mov	r4, r0
34007b9e:	2800      	cmp	r0, #0
34007ba0:	d1ef      	bne.n	34007b82 <CMW_VD55G1_Probe+0x52>
  if (id != VD55G1_CHIP_ID)
34007ba2:	9a01      	ldr	r2, [sp, #4]
34007ba4:	4b14      	ldr	r3, [pc, #80]	@ (34007bf8 <CMW_VD55G1_Probe+0xc8>)
34007ba6:	429a      	cmp	r2, r3
34007ba8:	d1eb      	bne.n	34007b82 <CMW_VD55G1_Probe+0x52>
  memset(vd55g1_if, 0, sizeof(*vd55g1_if));
34007baa:	4601      	mov	r1, r0
34007bac:	225c      	movs	r2, #92	@ 0x5c
34007bae:	f105 000c 	add.w	r0, r5, #12
34007bb2:	f019 fdaf 	bl	34021714 <memset>
  vd55g1_if->Init = CMW_VD55G1_Init;
34007bb6:	4b11      	ldr	r3, [pc, #68]	@ (34007bfc <CMW_VD55G1_Probe+0xcc>)
34007bb8:	602b      	str	r3, [r5, #0]
  vd55g1_if->DeInit = CMW_VD55G1_DeInit;
34007bba:	4b11      	ldr	r3, [pc, #68]	@ (34007c00 <CMW_VD55G1_Probe+0xd0>)
34007bbc:	606b      	str	r3, [r5, #4]
  vd55g1_if->Start = CMW_VD55G1_Start;
34007bbe:	4b11      	ldr	r3, [pc, #68]	@ (34007c04 <CMW_VD55G1_Probe+0xd4>)
34007bc0:	60ab      	str	r3, [r5, #8]
  vd55g1_if->Stop = CMW_VD55G1_Stop;
34007bc2:	4b11      	ldr	r3, [pc, #68]	@ (34007c08 <CMW_VD55G1_Probe+0xd8>)
34007bc4:	61ab      	str	r3, [r5, #24]
  vd55g1_if->SetMirrorFlip = CMW_VD55G1_MirrorFlipConfig;
34007bc6:	4b11      	ldr	r3, [pc, #68]	@ (34007c0c <CMW_VD55G1_Probe+0xdc>)
34007bc8:	62eb      	str	r3, [r5, #44]	@ 0x2c
  vd55g1_if->GetSensorInfo = CMW_VD55G1_GetSensorInfo;
34007bca:	4b11      	ldr	r3, [pc, #68]	@ (34007c10 <CMW_VD55G1_Probe+0xe0>)
34007bcc:	662b      	str	r3, [r5, #96]	@ 0x60
  return ret;
34007bce:	e7da      	b.n	34007b86 <CMW_VD55G1_Probe+0x56>
34007bd0:	340078bf 	.word	0x340078bf
34007bd4:	340078c7 	.word	0x340078c7
34007bd8:	340078d9 	.word	0x340078d9
34007bdc:	340078f5 	.word	0x340078f5
34007be0:	340078fb 	.word	0x340078fb
34007be4:	34007913 	.word	0x34007913
34007be8:	3400792b 	.word	0x3400792b
34007bec:	34007941 	.word	0x34007941
34007bf0:	34007985 	.word	0x34007985
34007bf4:	3400798d 	.word	0x3400798d
34007bf8:	53354731 	.word	0x53354731
34007bfc:	34007a1d 	.word	0x34007a1d
34007c00:	340079f9 	.word	0x340079f9
34007c04:	340079e1 	.word	0x340079e1
34007c08:	340079cf 	.word	0x340079cf
34007c0c:	340079a9 	.word	0x340079a9
34007c10:	3400798f 	.word	0x3400798f

34007c14 <CMW_VD66GY_Read16>:
{
  return pObj->ReadReg(pObj->Address, addr, value, 1);
}

static int CMW_VD66GY_Read16(CMW_VD66GY_t *pObj, uint16_t addr, uint16_t *value)
{
34007c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t data[2];
  int ret;

  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
34007c16:	2302      	movs	r3, #2
{
34007c18:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
34007c1a:	f8d0 512c 	ldr.w	r5, [r0, #300]	@ 0x12c
34007c1e:	aa01      	add	r2, sp, #4
34007c20:	8800      	ldrh	r0, [r0, #0]
34007c22:	47a8      	blx	r5
  if (ret)
34007c24:	b910      	cbnz	r0, 34007c2c <CMW_VD66GY_Read16+0x18>
    return ret;

  *value = (data[1] << 8) | data[0];
34007c26:	f8bd 3004 	ldrh.w	r3, [sp, #4]
34007c2a:	8023      	strh	r3, [r4, #0]

  return CMW_ERROR_NONE;
}
34007c2c:	b003      	add	sp, #12
34007c2e:	bd30      	pop	{r4, r5, pc}

34007c30 <VD6G_ShutdownPin>:

static void VD6G_ShutdownPin(struct VD6G_Ctx *ctx, int value)
{
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  p_ctx->ShutdownPin(value);
34007c30:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
34007c34:	4608      	mov	r0, r1
34007c36:	4718      	bx	r3

34007c38 <VD6G_Read8>:
}

static int VD6G_Read8(struct VD6G_Ctx *ctx, uint16_t addr, uint8_t *value)
{
34007c38:	b410      	push	{r4}
  return pObj->ReadReg(pObj->Address, addr, value, 1);
34007c3a:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
34007c3e:	2301      	movs	r3, #1
34007c40:	46a4      	mov	ip, r4
34007c42:	f830 0c04 	ldrh.w	r0, [r0, #-4]
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Read8(p_ctx, addr, value);
}
34007c46:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->ReadReg(pObj->Address, addr, value, 1);
34007c4a:	4760      	bx	ip

34007c4c <VD6G_Read16>:

static int VD6G_Read16(struct VD6G_Ctx *ctx, uint16_t addr, uint16_t *value)
{
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Read16(p_ctx, addr, value);
34007c4c:	3804      	subs	r0, #4
34007c4e:	f7ff bfe1 	b.w	34007c14 <CMW_VD66GY_Read16>

34007c52 <VD6G_Read32>:
  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
34007c52:	2304      	movs	r3, #4
}

static int VD6G_Read32(struct VD6G_Ctx *ctx, uint16_t addr, uint32_t *value)
{
34007c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
34007c56:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
34007c58:	f8d0 5128 	ldr.w	r5, [r0, #296]	@ 0x128
34007c5c:	eb0d 0203 	add.w	r2, sp, r3
34007c60:	f830 0c04 	ldrh.w	r0, [r0, #-4]
34007c64:	47a8      	blx	r5
  if (ret)
34007c66:	b908      	cbnz	r0, 34007c6c <VD6G_Read32+0x1a>
  *value = (data[3] << 24) | (data[2] << 16) | (data[1] << 8) | data[0];
34007c68:	9b01      	ldr	r3, [sp, #4]
34007c6a:	6023      	str	r3, [r4, #0]
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Read32(p_ctx, addr, value);
}
34007c6c:	b003      	add	sp, #12
34007c6e:	bd30      	pop	{r4, r5, pc}

34007c70 <VD6G_Write8>:

static int VD6G_Write8(struct VD6G_Ctx *ctx, uint16_t addr, uint8_t value)
{
34007c70:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, &value, 1);
34007c72:	2301      	movs	r3, #1
34007c74:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
34007c78:	f88d 2007 	strb.w	r2, [sp, #7]
34007c7c:	f830 0c04 	ldrh.w	r0, [r0, #-4]
34007c80:	f10d 0207 	add.w	r2, sp, #7
34007c84:	47a0      	blx	r4
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Write8(p_ctx, addr, value);
}
34007c86:	b002      	add	sp, #8
34007c88:	bd10      	pop	{r4, pc}

34007c8a <VD6G_Write16>:

static int VD6G_Write16(struct VD6G_Ctx *ctx, uint16_t addr, uint16_t value)
{
34007c8a:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 2);
34007c8c:	2302      	movs	r3, #2
34007c8e:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
34007c92:	f8ad 2006 	strh.w	r2, [sp, #6]
34007c96:	f830 0c04 	ldrh.w	r0, [r0, #-4]
34007c9a:	f10d 0206 	add.w	r2, sp, #6
34007c9e:	47a0      	blx	r4
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Write16(p_ctx, addr, value);
}
34007ca0:	b002      	add	sp, #8
34007ca2:	bd10      	pop	{r4, pc}

34007ca4 <VD6G_Write32>:
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
34007ca4:	2304      	movs	r3, #4

static int VD6G_Write32(struct VD6G_Ctx *ctx, uint16_t addr, uint32_t value)
{
34007ca6:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
34007ca8:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
34007cac:	9201      	str	r2, [sp, #4]
34007cae:	f830 0c04 	ldrh.w	r0, [r0, #-4]
34007cb2:	eb0d 0203 	add.w	r2, sp, r3
34007cb6:	47a0      	blx	r4
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Write32(p_ctx, addr, value);
}
34007cb8:	b002      	add	sp, #8
34007cba:	bd10      	pop	{r4, pc}

34007cbc <VD6G_WriteArray>:

static int VD6G_WriteArray(struct VD6G_Ctx *ctx, uint16_t addr, uint8_t *data, int data_len)
{
34007cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34007cc0:	4680      	mov	r8, r0
34007cc2:	460d      	mov	r5, r1
34007cc4:	4616      	mov	r6, r2
34007cc6:	461c      	mov	r4, r3
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);
  const unsigned int chunk_size = 128;
  uint16_t sz;
  int ret;

  while (data_len) {
34007cc8:	b914      	cbnz	r4, 34007cd0 <VD6G_WriteArray+0x14>
    data_len -= sz;
    addr += sz;
    data += sz;
  }

  return 0;
34007cca:	4620      	mov	r0, r4
}
34007ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sz = MIN(data_len, chunk_size);
34007cd0:	2c80      	cmp	r4, #128	@ 0x80
34007cd2:	46a1      	mov	r9, r4
34007cd4:	bf28      	it	cs
34007cd6:	f04f 0980 	movcs.w	r9, #128	@ 0x80
34007cda:	fa1f fa89 	uxth.w	sl, r9
    ret = p_ctx->WriteReg(p_ctx->Address, addr, data, sz);
34007cde:	4653      	mov	r3, sl
34007ce0:	4632      	mov	r2, r6
34007ce2:	4629      	mov	r1, r5
34007ce4:	f8d8 7124 	ldr.w	r7, [r8, #292]	@ 0x124
34007ce8:	f838 0c04 	ldrh.w	r0, [r8, #-4]
34007cec:	47b8      	blx	r7
    if (ret)
34007cee:	2800      	cmp	r0, #0
34007cf0:	d1ec      	bne.n	34007ccc <VD6G_WriteArray+0x10>
    addr += sz;
34007cf2:	44aa      	add	sl, r5
    data_len -= sz;
34007cf4:	eba4 0409 	sub.w	r4, r4, r9
    addr += sz;
34007cf8:	fa1f f58a 	uxth.w	r5, sl
    data += sz;
34007cfc:	444e      	add	r6, r9
34007cfe:	e7e3      	b.n	34007cc8 <VD6G_WriteArray+0xc>

34007d00 <VD6G_Delay>:

static void VD6G_Delay(struct VD6G_Ctx *ctx, uint32_t delay_in_ms)
{
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  p_ctx->Delay(delay_in_ms);
34007d00:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
34007d04:	4608      	mov	r0, r1
34007d06:	4718      	bx	r3

34007d08 <VD6G_Log>:
  if (lvl > current_lvl)
    return ;

  vprintf(format, ap);
#endif
}
34007d08:	4770      	bx	lr

34007d0a <CMW_VD66GY_FrameEventCallback>:
#endif
}

static void CMW_VD66GY_FrameEventCallback(void *io_ctx, uint32_t pipe)
{
}
34007d0a:	4770      	bx	lr
34007d0c:	0000      	movs	r0, r0
	...

34007d10 <CMW_VD66GY_SetGain>:
{
34007d10:	b5f0      	push	{r4, r5, r6, r7, lr}
34007d12:	ed2d 8b08 	vpush	{d8-d11}
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
34007d16:	1d06      	adds	r6, r0, #4
{
34007d18:	b085      	sub	sp, #20
34007d1a:	460d      	mov	r5, r1
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
34007d1c:	4630      	mov	r0, r6
34007d1e:	f10d 020b 	add.w	r2, sp, #11
34007d22:	f10d 010a 	add.w	r1, sp, #10
34007d26:	f002 f8a5 	bl	34009e74 <VD6G_GetAnalogGainRegRange>
  if (ret)
34007d2a:	2800      	cmp	r0, #0
34007d2c:	f040 80bc 	bne.w	34007ea8 <CMW_VD66GY_SetGain+0x198>
  ret = VD6G_GetDigitalGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &dgain_regmin, &dgain_regmax);
34007d30:	4630      	mov	r0, r6
34007d32:	f10d 020e 	add.w	r2, sp, #14
34007d36:	a903      	add	r1, sp, #12
34007d38:	f002 f908 	bl	34009f4c <VD6G_GetDigitalGainRegRange>
  if (ret)
34007d3c:	2800      	cmp	r0, #0
34007d3e:	f040 80b3 	bne.w	34007ea8 <CMW_VD66GY_SetGain+0x198>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007d42:	2420      	movs	r4, #32
34007d44:	f89d 300a 	ldrb.w	r3, [sp, #10]
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007d48:	eeb3 ab04 	vmov.f64	d10, #52	@ 0x41a00000  20.0
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007d4c:	f1c3 0320 	rsb	r3, r3, #32
34007d50:	fb94 f3f3 	sdiv	r3, r4, r3
34007d54:	ee00 3a10 	vmov	s0, r3
34007d58:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
34007d5c:	f01c fb00 	bl	34024360 <log10>
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007d60:	f89d 300b 	ldrb.w	r3, [sp, #11]
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007d64:	eeb0 8b40 	vmov.f64	d8, d0
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007d68:	1ae3      	subs	r3, r4, r3
34007d6a:	fb94 f3f3 	sdiv	r3, r4, r3
34007d6e:	ee00 3a10 	vmov	s0, r3
34007d72:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
34007d76:	f01c faf3 	bl	34024360 <log10>
34007d7a:	ed9f bb59 	vldr	d11, [pc, #356]	@ 34007ee0 <CMW_VD66GY_SetGain+0x1d0>
34007d7e:	ee20 0b0a 	vmul.f64	d0, d0, d10
34007d82:	ee20 0b0b 	vmul.f64	d0, d0, d11
34007d86:	eefc 7bc0 	vcvt.u32.f64	s15, d0
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007d8a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34007d8e:	f89d 200c 	ldrb.w	r2, [sp, #12]
34007d92:	0a1b      	lsrs	r3, r3, #8
34007d94:	ee00 3a10 	vmov	s0, r3
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007d98:	ee17 7a90 	vmov	r7, s15
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007d9c:	ee07 2a90 	vmov	s15, r2
34007da0:	ed9f 9a55 	vldr	s18, [pc, #340]	@ 34007ef8 <CMW_VD66GY_SetGain+0x1e8>
34007da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34007da8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34007dac:	eea7 0a89 	vfma.f32	s0, s15, s18
34007db0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34007db4:	f01c fad4 	bl	34024360 <log10>
34007db8:	ee20 0b0a 	vmul.f64	d0, d0, d10
34007dbc:	ee20 0b0b 	vmul.f64	d0, d0, d11
34007dc0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007dc4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
34007dc8:	f89d 200e 	ldrb.w	r2, [sp, #14]
34007dcc:	0a1b      	lsrs	r3, r3, #8
34007dce:	ee00 3a10 	vmov	s0, r3
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007dd2:	ee17 4a90 	vmov	r4, s15
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007dd6:	ee07 2a90 	vmov	s15, r2
34007dda:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34007dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34007de2:	eea7 0a89 	vfma.f32	s0, s15, s18
34007de6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34007dea:	f01c fab9 	bl	34024360 <log10>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007dee:	ee28 8b0a 	vmul.f64	d8, d8, d10
34007df2:	ee28 8b0b 	vmul.f64	d8, d8, d11
34007df6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007dfa:	ee20 0b0a 	vmul.f64	d0, d0, d10
  if ((gain < dgain_min_mdB + again_min_mdB)
34007dfe:	ee18 3a10 	vmov	r3, s16
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007e02:	ee20 0b0b 	vmul.f64	d0, d0, d11
  if ((gain < dgain_min_mdB + again_min_mdB)
34007e06:	4423      	add	r3, r4
34007e08:	42ab      	cmp	r3, r5
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007e0a:	eebc 0bc0 	vcvt.u32.f64	s0, d0
  if ((gain < dgain_min_mdB + again_min_mdB)
34007e0e:	d861      	bhi.n	34007ed4 <CMW_VD66GY_SetGain+0x1c4>
      || (gain > dgain_max_mdB + again_max_mdB))
34007e10:	ee10 3a10 	vmov	r3, s0
34007e14:	443b      	add	r3, r7
34007e16:	429d      	cmp	r5, r3
34007e18:	d85c      	bhi.n	34007ed4 <CMW_VD66GY_SetGain+0x1c4>
  if (gain <= again_max_mdB)
34007e1a:	42bd      	cmp	r5, r7
34007e1c:	d848      	bhi.n	34007eb0 <CMW_VD66GY_SetGain+0x1a0>
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - dgain_min_mdB));
34007e1e:	1b2d      	subs	r5, r5, r4
34007e20:	ee07 5a90 	vmov	s15, r5
34007e24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34007e28:	ee87 1b0b 	vdiv.f64	d1, d7, d11
34007e2c:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
34007e30:	ee81 1b0a 	vdiv.f64	d1, d1, d10
34007e34:	f01c fc60 	bl	340246f8 <pow>
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)dgain_min_mdB);
34007e38:	ee07 4a90 	vmov	s15, r4
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - dgain_min_mdB));
34007e3c:	eeb0 9b40 	vmov.f64	d9, d0
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007e40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34007e44:	ee87 1b0b 	vdiv.f64	d1, d7, d11
34007e48:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
34007e4c:	ee81 1b0a 	vdiv.f64	d1, d1, d10
34007e50:	f01c fc52 	bl	340246f8 <pow>
  ret = VD6G_SetAnalogGain(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, (int) (32 - (32 / analog_linear_gain)));
34007e54:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 34007ee8 <CMW_VD66GY_SetGain+0x1d8>
34007e58:	ee87 6b09 	vdiv.f64	d6, d7, d9
34007e5c:	ee37 7b46 	vsub.f64	d7, d7, d6
34007e60:	eefd 7bc7 	vcvt.s32.f64	s15, d7
34007e64:	4630      	mov	r0, r6
34007e66:	ee17 1a90 	vmov	r1, s15
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007e6a:	eeb0 8b40 	vmov.f64	d8, d0
  ret = VD6G_SetAnalogGain(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, (int) (32 - (32 / analog_linear_gain)));
34007e6e:	f002 f83d 	bl	34009eec <VD6G_SetAnalogGain>
  if (ret)
34007e72:	b9c8      	cbnz	r0, 34007ea8 <CMW_VD66GY_SetGain+0x198>
  ret = VD6G_SetDigitalGain(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, FLOAT_TO_FP58(digital_linear_gain));
34007e74:	eefc 7bc8 	vcvt.u32.f64	s15, d8
34007e78:	ee17 3a90 	vmov	r3, s15
34007e7c:	b299      	uxth	r1, r3
34007e7e:	ee07 1a90 	vmov	s15, r1
34007e82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34007e86:	ee38 8b47 	vsub.f64	d8, d8, d7
34007e8a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 34007ef0 <CMW_VD66GY_SetGain+0x1e0>
34007e8e:	ee28 8b07 	vmul.f64	d8, d8, d7
34007e92:	eefc 7bc8 	vcvt.u32.f64	s15, d8
34007e96:	edcd 7a01 	vstr	s15, [sp, #4]
34007e9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
34007e9e:	4630      	mov	r0, r6
34007ea0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
34007ea4:	f002 f880 	bl	34009fa8 <VD6G_SetDigitalGain>
}
34007ea8:	b005      	add	sp, #20
34007eaa:	ecbd 8b08 	vpop	{d8-d11}
34007eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)again_max_mdB);
34007eb0:	ee07 7a90 	vmov	s15, r7
34007eb4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34007eb8:	ee87 1b0b 	vdiv.f64	d1, d7, d11
34007ebc:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
34007ec0:	ee81 1b0a 	vdiv.f64	d1, d1, d10
34007ec4:	f01c fc18 	bl	340246f8 <pow>
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007ec8:	1bed      	subs	r5, r5, r7
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)again_max_mdB);
34007eca:	eeb0 9b40 	vmov.f64	d9, d0
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007ece:	ee07 5a90 	vmov	s15, r5
34007ed2:	e7b5      	b.n	34007e40 <CMW_VD66GY_SetGain+0x130>
    return -1;
34007ed4:	f04f 30ff 	mov.w	r0, #4294967295
34007ed8:	e7e6      	b.n	34007ea8 <CMW_VD66GY_SetGain+0x198>
34007eda:	bf00      	nop
34007edc:	f3af 8000 	nop.w
34007ee0:	00000000 	.word	0x00000000
34007ee4:	408f4000 	.word	0x408f4000
34007ee8:	00000000 	.word	0x00000000
34007eec:	40400000 	.word	0x40400000
34007ef0:	00000000 	.word	0x00000000
34007ef4:	40700000 	.word	0x40700000
34007ef8:	3b800000 	.word	0x3b800000

34007efc <CMW_VD66GY_SetExposure>:
  return VD6G_SetExposureTime(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, exposure);
34007efc:	3004      	adds	r0, #4
34007efe:	f002 b8f5 	b.w	3400a0ec <VD6G_SetExposureTime>

34007f02 <CMW_VD66GY_SetExposureMode>:
  switch (mode)
34007f02:	2901      	cmp	r1, #1
{
34007f04:	b508      	push	{r3, lr}
34007f06:	f100 0004 	add.w	r0, r0, #4
  switch (mode)
34007f0a:	d002      	beq.n	34007f12 <CMW_VD66GY_SetExposureMode+0x10>
34007f0c:	2902      	cmp	r1, #2
      ret = VD6G_SetExposureMode(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, VD6G_EXPOSURE_AUTO);
34007f0e:	bf18      	it	ne
34007f10:	2100      	movne	r1, #0
34007f12:	f001 ffa5 	bl	34009e60 <VD6G_SetExposureMode>
  return (ret == 0) ? CMW_ERROR_NONE : CMW_ERROR_UNKNOWN_FAILURE;
34007f16:	2800      	cmp	r0, #0
}
34007f18:	bf18      	it	ne
34007f1a:	f06f 0005 	mvnne.w	r0, #5
34007f1e:	bd08      	pop	{r3, pc}

34007f20 <CMW_VD66GY_SetWBRefMode>:
{
34007f20:	b508      	push	{r3, lr}
  ret = ISP_SetWBRefMode(&((CMW_VD66GY_t *)io_ctx)->hIsp, Automatic, RefColorTemp);
34007f22:	306c      	adds	r0, #108	@ 0x6c
34007f24:	f7fd fe43 	bl	34005bae <ISP_SetWBRefMode>
  return CMW_ERROR_NONE;
34007f28:	2800      	cmp	r0, #0
}
34007f2a:	bf14      	ite	ne
34007f2c:	f06f 0003 	mvnne.w	r0, #3
34007f30:	2000      	moveq	r0, #0
34007f32:	bd08      	pop	{r3, pc}

34007f34 <CMW_VD66GY_ListWBRefModes>:
{
34007f34:	b508      	push	{r3, lr}
  ret = ISP_ListWBRefModes(&((CMW_VD66GY_t *)io_ctx)->hIsp, RefColorTemp);
34007f36:	306c      	adds	r0, #108	@ 0x6c
34007f38:	f7fd fe26 	bl	34005b88 <ISP_ListWBRefModes>
  return CMW_ERROR_NONE;
34007f3c:	2800      	cmp	r0, #0
}
34007f3e:	bf14      	ite	ne
34007f40:	f06f 0003 	mvnne.w	r0, #3
34007f44:	2000      	moveq	r0, #0
34007f46:	bd08      	pop	{r3, pc}

34007f48 <CMW_VD66GY_GetSensorInfo>:
{
34007f48:	b570      	push	{r4, r5, r6, lr}
34007f4a:	ed2d 8b08 	vpush	{d8-d11}
34007f4e:	460c      	mov	r4, r1
  if ((!io_ctx) || (info == NULL))
34007f50:	4605      	mov	r5, r0
{
34007f52:	b082      	sub	sp, #8
  if ((!io_ctx) || (info == NULL))
34007f54:	2800      	cmp	r0, #0
34007f56:	f000 80a0 	beq.w	3400809a <CMW_VD66GY_GetSensorInfo+0x152>
34007f5a:	2900      	cmp	r1, #0
34007f5c:	f000 809d 	beq.w	3400809a <CMW_VD66GY_GetSensorInfo+0x152>
    strcpy(info->name, VD66GY_NAME);
34007f60:	4951      	ldr	r1, [pc, #324]	@ (340080a8 <CMW_VD66GY_GetSensorInfo+0x160>)
34007f62:	4620      	mov	r0, r4
34007f64:	f019 fe6f 	bl	34021c46 <strcpy>
  info->bayer_pattern = ((CMW_VD66GY_t *)io_ctx)->ctx_driver.bayer - 1;
34007f68:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
  info->height = VD6G_MAX_HEIGHT;
34007f6c:	f44f 628c 	mov.w	r2, #1120	@ 0x460
  info->bayer_pattern = ((CMW_VD66GY_t *)io_ctx)->ctx_driver.bayer - 1;
34007f70:	3b01      	subs	r3, #1
34007f72:	f884 3020 	strb.w	r3, [r4, #32]
  info->color_depth = VD6G_COLOR_DEPTH_RAW8;
34007f76:	2308      	movs	r3, #8
34007f78:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  info->height = VD6G_MAX_HEIGHT;
34007f7c:	f240 5354 	movw	r3, #1364	@ 0x554
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
34007f80:	3504      	adds	r5, #4
  info->height = VD6G_MAX_HEIGHT;
34007f82:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
34007f86:	4628      	mov	r0, r5
34007f88:	f10d 0203 	add.w	r2, sp, #3
34007f8c:	f10d 0102 	add.w	r1, sp, #2
34007f90:	f001 ff70 	bl	34009e74 <VD6G_GetAnalogGainRegRange>
  if (ret)
34007f94:	2800      	cmp	r0, #0
34007f96:	d17c      	bne.n	34008092 <CMW_VD66GY_GetSensorInfo+0x14a>
  ret = VD6G_GetDigitalGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &dgain_regmin, &dgain_regmax);
34007f98:	4628      	mov	r0, r5
34007f9a:	f10d 0206 	add.w	r2, sp, #6
34007f9e:	a901      	add	r1, sp, #4
34007fa0:	f001 ffd4 	bl	34009f4c <VD6G_GetDigitalGainRegRange>
  if (ret)
34007fa4:	2800      	cmp	r0, #0
34007fa6:	d174      	bne.n	34008092 <CMW_VD66GY_GetSensorInfo+0x14a>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007fa8:	2620      	movs	r6, #32
34007faa:	f89d 3002 	ldrb.w	r3, [sp, #2]
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007fae:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 340080ac <CMW_VD66GY_GetSensorInfo+0x164>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007fb2:	f1c3 0320 	rsb	r3, r3, #32
34007fb6:	fb96 f3f3 	sdiv	r3, r6, r3
34007fba:	ee00 3a10 	vmov	s0, r3
34007fbe:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
34007fc2:	f01c f9cd 	bl	34024360 <log10>
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007fc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007fca:	eeb0 9b40 	vmov.f64	d9, d0
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007fce:	1af3      	subs	r3, r6, r3
34007fd0:	fb96 f3f3 	sdiv	r3, r6, r3
34007fd4:	ee00 3a10 	vmov	s0, r3
34007fd8:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
34007fdc:	f01c f9c0 	bl	34024360 <log10>
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007fe0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
34007fe4:	f89d 2004 	ldrb.w	r2, [sp, #4]
34007fe8:	0a1b      	lsrs	r3, r3, #8
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007fea:	eeb0 8b40 	vmov.f64	d8, d0
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007fee:	ee07 2a90 	vmov	s15, r2
34007ff2:	ee00 3a10 	vmov	s0, r3
34007ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34007ffa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34007ffe:	eea7 0a8b 	vfma.f32	s0, s15, s22
34008002:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34008006:	f01c f9ab 	bl	34024360 <log10>
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
3400800a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
3400800e:	f89d 2006 	ldrb.w	r2, [sp, #6]
34008012:	0a1b      	lsrs	r3, r3, #8
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34008014:	eeb0 ab40 	vmov.f64	d10, d0
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34008018:	ee07 2a90 	vmov	s15, r2
3400801c:	ee00 3a10 	vmov	s0, r3
34008020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34008024:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34008028:	eea7 0a8b 	vfma.f32	s0, s15, s22
3400802c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34008030:	f01c f996 	bl	34024360 <log10>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34008034:	eeb3 7b04 	vmov.f64	d7, #52	@ 0x41a00000  20.0
34008038:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 340080a0 <CMW_VD66GY_GetSensorInfo+0x158>
3400803c:	ee29 9b07 	vmul.f64	d9, d9, d7
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34008040:	ee2a ab07 	vmul.f64	d10, d10, d7
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34008044:	ee29 9b06 	vmul.f64	d9, d9, d6
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34008048:	ee2a ab06 	vmul.f64	d10, d10, d6
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
3400804c:	ee28 8b07 	vmul.f64	d8, d8, d7
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34008050:	ee20 0b07 	vmul.f64	d0, d0, d7
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34008054:	eebc 9bc9 	vcvt.u32.f64	s18, d9
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34008058:	eebc abca 	vcvt.u32.f64	s20, d10
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
3400805c:	ee28 8b06 	vmul.f64	d8, d8, d6
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34008060:	ee20 0b06 	vmul.f64	d0, d0, d6
  info->gain_min = again_min_mdB + dgain_min_mdB;
34008064:	ee1a 2a10 	vmov	r2, s20
34008068:	ee19 3a10 	vmov	r3, s18
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
3400806c:	eebc 8bc8 	vcvt.u32.f64	s16, d8
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34008070:	eebc 0bc0 	vcvt.u32.f64	s0, d0
  info->gain_min = again_min_mdB + dgain_min_mdB;
34008074:	4413      	add	r3, r2
34008076:	62e3      	str	r3, [r4, #44]	@ 0x2c
  info->gain_max = again_max_mdB + dgain_max_mdB;
34008078:	ee10 2a10 	vmov	r2, s0
3400807c:	ee18 3a10 	vmov	r3, s16
34008080:	4413      	add	r3, r2
  ret = VD6G_GetExposureRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &info->exposure_min, &info->exposure_max);
34008082:	4628      	mov	r0, r5
  info->gain_max = again_max_mdB + dgain_max_mdB;
34008084:	6323      	str	r3, [r4, #48]	@ 0x30
  ret = VD6G_GetExposureRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &info->exposure_min, &info->exposure_max);
34008086:	f104 0238 	add.w	r2, r4, #56	@ 0x38
3400808a:	f104 0134 	add.w	r1, r4, #52	@ 0x34
3400808e:	f001 ffe1 	bl	3400a054 <VD6G_GetExposureRegRange>
}
34008092:	b002      	add	sp, #8
34008094:	ecbd 8b08 	vpop	{d8-d11}
34008098:	bd70      	pop	{r4, r5, r6, pc}
    return CMW_ERROR_WRONG_PARAM;
3400809a:	f06f 0001 	mvn.w	r0, #1
3400809e:	e7f8      	b.n	34008092 <CMW_VD66GY_GetSensorInfo+0x14a>
340080a0:	00000000 	.word	0x00000000
340080a4:	408f4000 	.word	0x408f4000
340080a8:	3402c3cd 	.word	0x3402c3cd
340080ac:	3b800000 	.word	0x3b800000

340080b0 <CMW_VD66GY_Stop>:
{
340080b0:	b508      	push	{r3, lr}
  ret = VD6G_Stop(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
340080b2:	3004      	adds	r0, #4
340080b4:	f001 fea2 	bl	34009dfc <VD6G_Stop>
    return CMW_ERROR_PERIPH_FAILURE;
340080b8:	2800      	cmp	r0, #0
}
340080ba:	bf18      	it	ne
340080bc:	f06f 0003 	mvnne.w	r0, #3
340080c0:	bd08      	pop	{r3, pc}
	...

340080c4 <CMW_VD66GY_Start>:
{
340080c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ISP_Init(&((CMW_VD66GY_t *)io_ctx)->hIsp, ((CMW_VD66GY_t *)io_ctx)->hdcmipp, 0, &((CMW_VD66GY_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_VD66GY);
340080c6:	4b10      	ldr	r3, [pc, #64]	@ (34008108 <CMW_VD66GY_Start+0x44>)
340080c8:	f100 056c 	add.w	r5, r0, #108	@ 0x6c
340080cc:	9300      	str	r3, [sp, #0]
{
340080ce:	4604      	mov	r4, r0
  ret = ISP_Init(&((CMW_VD66GY_t *)io_ctx)->hIsp, ((CMW_VD66GY_t *)io_ctx)->hdcmipp, 0, &((CMW_VD66GY_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_VD66GY);
340080d0:	f8d0 1118 	ldr.w	r1, [r0, #280]	@ 0x118
340080d4:	f100 03f4 	add.w	r3, r0, #244	@ 0xf4
340080d8:	2200      	movs	r2, #0
340080da:	4628      	mov	r0, r5
340080dc:	f7fd fc16 	bl	3400590c <ISP_Init>
  if (ret != ISP_OK)
340080e0:	b978      	cbnz	r0, 34008102 <CMW_VD66GY_Start+0x3e>
  ret = ISP_Start(&((CMW_VD66GY_t *)io_ctx)->hIsp);
340080e2:	4628      	mov	r0, r5
340080e4:	f7fd fca0 	bl	34005a28 <ISP_Start>
  if (ret != ISP_OK)
340080e8:	b938      	cbnz	r0, 340080fa <CMW_VD66GY_Start+0x36>
  ret = VD6G_Start(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
340080ea:	3404      	adds	r4, #4
340080ec:	4620      	mov	r0, r4
340080ee:	f001 fd41 	bl	34009b74 <VD6G_Start>
  if (ret) {
340080f2:	b120      	cbz	r0, 340080fe <CMW_VD66GY_Start+0x3a>
    VD6G_DeInit(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
340080f4:	4620      	mov	r0, r4
340080f6:	f001 fd2d 	bl	34009b54 <VD6G_DeInit>
      return CMW_ERROR_PERIPH_FAILURE;
340080fa:	f06f 0003 	mvn.w	r0, #3
}
340080fe:	b003      	add	sp, #12
34008100:	bd30      	pop	{r4, r5, pc}
    return CMW_ERROR_COMPONENT_FAILURE;
34008102:	f06f 0004 	mvn.w	r0, #4
34008106:	e7fa      	b.n	340080fe <CMW_VD66GY_Start+0x3a>
34008108:	34031688 	.word	0x34031688

3400810c <CMW_VD66GY_DeInit>:
{
3400810c:	b538      	push	{r3, r4, r5, lr}
  ret = VD6G_Stop(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
3400810e:	1d05      	adds	r5, r0, #4
{
34008110:	4604      	mov	r4, r0
  ret = VD6G_Stop(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34008112:	4628      	mov	r0, r5
34008114:	f001 fe72 	bl	34009dfc <VD6G_Stop>
  if (ret)
34008118:	b110      	cbz	r0, 34008120 <CMW_VD66GY_DeInit+0x14>
    return CMW_ERROR_PERIPH_FAILURE;
3400811a:	f06f 0003 	mvn.w	r0, #3
}
3400811e:	bd38      	pop	{r3, r4, r5, pc}
  ret = VD6G_DeInit(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34008120:	4628      	mov	r0, r5
34008122:	f001 fd17 	bl	34009b54 <VD6G_DeInit>
  if (ret)
34008126:	2800      	cmp	r0, #0
34008128:	d1f7      	bne.n	3400811a <CMW_VD66GY_DeInit+0xe>
  ((CMW_VD66GY_t *)io_ctx)->IsInitialized = 0;
3400812a:	f884 011c 	strb.w	r0, [r4, #284]	@ 0x11c
  return CMW_ERROR_NONE;
3400812e:	e7f6      	b.n	3400811e <CMW_VD66GY_DeInit+0x12>

34008130 <CMW_VD66GY_Run>:
{
34008130:	b508      	push	{r3, lr}
  ret = ISP_BackgroundProcess(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34008132:	306c      	adds	r0, #108	@ 0x6c
34008134:	f7fd fd18 	bl	34005b68 <ISP_BackgroundProcess>
  return CMW_ERROR_NONE;
34008138:	2800      	cmp	r0, #0
}
3400813a:	bf14      	ite	ne
3400813c:	f06f 0003 	mvnne.w	r0, #3
34008140:	2000      	moveq	r0, #0
34008142:	bd08      	pop	{r3, pc}

34008144 <CMW_VD66GY_VsyncEventCallback>:
  switch (pipe)
34008144:	2901      	cmp	r1, #1
{
34008146:	b510      	push	{r4, lr}
  switch (pipe)
34008148:	d007      	beq.n	3400815a <CMW_VD66GY_VsyncEventCallback+0x16>
3400814a:	2902      	cmp	r1, #2
3400814c:	d00f      	beq.n	3400816e <CMW_VD66GY_VsyncEventCallback+0x2a>
3400814e:	b999      	cbnz	r1, 34008178 <CMW_VD66GY_VsyncEventCallback+0x34>
}
34008150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncDumpFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34008154:	306c      	adds	r0, #108	@ 0x6c
34008156:	f7fd bd84 	b.w	34005c62 <ISP_IncDumpFrameId>
      ISP_IncMainFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
3400815a:	f100 046c 	add.w	r4, r0, #108	@ 0x6c
3400815e:	4620      	mov	r0, r4
34008160:	f7fd fd7b 	bl	34005c5a <ISP_IncMainFrameId>
      ISP_GatherStatistics(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34008164:	4620      	mov	r0, r4
}
34008166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_GatherStatistics(&((CMW_VD66GY_t *)io_ctx)->hIsp);
3400816a:	f7fd bd74 	b.w	34005c56 <ISP_GatherStatistics>
      ISP_IncAncillaryFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
3400816e:	306c      	adds	r0, #108	@ 0x6c
}
34008170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncAncillaryFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34008174:	f7fd bd73 	b.w	34005c5e <ISP_IncAncillaryFrameId>
}
34008178:	bd10      	pop	{r4, pc}
	...

3400817c <CMW_VD66GY_SetDefaultSensorValues>:
{
3400817c:	b508      	push	{r3, lr}
  assert(vd66gy_config != NULL);
3400817e:	b930      	cbnz	r0, 3400818e <CMW_VD66GY_SetDefaultSensorValues+0x12>
34008180:	f240 1125 	movw	r1, #293	@ 0x125
34008184:	4b08      	ldr	r3, [pc, #32]	@ (340081a8 <CMW_VD66GY_SetDefaultSensorValues+0x2c>)
34008186:	4a09      	ldr	r2, [pc, #36]	@ (340081ac <CMW_VD66GY_SetDefaultSensorValues+0x30>)
34008188:	4809      	ldr	r0, [pc, #36]	@ (340081b0 <CMW_VD66GY_SetDefaultSensorValues+0x34>)
3400818a:	f017 fc3d 	bl	3401fa08 <__assert_func>
  vd66gy_config->line_len = 0; // Default line length
3400818e:	2200      	movs	r2, #0
34008190:	4b08      	ldr	r3, [pc, #32]	@ (340081b4 <CMW_VD66GY_SetDefaultSensorValues+0x38>)
  vd66gy_config->csiconfig.clock_lane_swap_enable = 1;
34008192:	2102      	movs	r1, #2
  vd66gy_config->line_len = 0; // Default line length
34008194:	e9c0 3200 	strd	r3, r2, [r0]
  vd66gy_config->csiconfig.clock_lane_swap_enable = 1;
34008198:	2301      	movs	r3, #1
  vd66gy_config->csiconfig.data_lanes_mapping_swap_enable = 0;
3400819a:	6182      	str	r2, [r0, #24]
  vd66gy_config->csiconfig.clock_lane_swap_enable = 1;
3400819c:	e9c0 1302 	strd	r1, r3, [r0, #8]
  vd66gy_config->csiconfig.data_lane1_swap_enable = 1;
340081a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
340081a4:	bd08      	pop	{r3, pc}
340081a6:	bf00      	nop
340081a8:	3402c3d4 	.word	0x3402c3d4
340081ac:	34031666 	.word	0x34031666
340081b0:	3402c3ea 	.word	0x3402c3ea
340081b4:	00b71b00 	.word	0x00b71b00

340081b8 <CMW_VD66GY_Init>:
{
340081b8:	b570      	push	{r4, r5, r6, lr}
340081ba:	460c      	mov	r4, r1
340081bc:	b096      	sub	sp, #88	@ 0x58
340081be:	4605      	mov	r5, r0
  VD6G_Config_t config = { 0 };
340081c0:	2238      	movs	r2, #56	@ 0x38
340081c2:	2100      	movs	r1, #0
340081c4:	a808      	add	r0, sp, #32
340081c6:	f019 faa5 	bl	34021714 <memset>
  assert(initSensor != NULL);
340081ca:	b92c      	cbnz	r4, 340081d8 <CMW_VD66GY_Init+0x20>
340081cc:	21ee      	movs	r1, #238	@ 0xee
340081ce:	4b34      	ldr	r3, [pc, #208]	@ (340082a0 <CMW_VD66GY_Init+0xe8>)
340081d0:	4a34      	ldr	r2, [pc, #208]	@ (340082a4 <CMW_VD66GY_Init+0xec>)
340081d2:	4835      	ldr	r0, [pc, #212]	@ (340082a8 <CMW_VD66GY_Init+0xf0>)
340081d4:	f017 fc18 	bl	3401fa08 <__assert_func>
  if (((CMW_VD66GY_t *)io_ctx)->IsInitialized)
340081d8:	f895 311c 	ldrb.w	r3, [r5, #284]	@ 0x11c
340081dc:	2b00      	cmp	r3, #0
340081de:	d15d      	bne.n	3400829c <CMW_VD66GY_Init+0xe4>
  config.frame_rate = initSensor->fps;
340081e0:	68a3      	ldr	r3, [r4, #8]
340081e2:	930a      	str	r3, [sp, #40]	@ 0x28
  ret = CMW_VD66GY_GetResType(initSensor->width, initSensor->height, &config.resolution);
340081e4:	e9d4 2300 	ldrd	r2, r3, [r4]
  if (width == 320 && height == 240)
340081e8:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
340081ec:	d104      	bne.n	340081f8 <CMW_VD66GY_Init+0x40>
340081ee:	2bf0      	cmp	r3, #240	@ 0xf0
340081f0:	d00b      	beq.n	3400820a <CMW_VD66GY_Init+0x52>
    return CMW_ERROR_WRONG_PARAM;
340081f2:	f06f 0001 	mvn.w	r0, #1
340081f6:	e036      	b.n	34008266 <CMW_VD66GY_Init+0xae>
  else if (width == 640 && height == 480)
340081f8:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
340081fc:	d135      	bne.n	3400826a <CMW_VD66GY_Init+0xb2>
340081fe:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
34008202:	d1f6      	bne.n	340081f2 <CMW_VD66GY_Init+0x3a>
    *res = VD6G_RES_VGA_640_480;
34008204:	2301      	movs	r3, #1
    *res = VD6G_RES_FULL_1120_1364;
34008206:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
  CMW_VD66GY_SetDefaultSensorValues(&default_sensor_config);
3400820a:	ae01      	add	r6, sp, #4
3400820c:	4630      	mov	r0, r6
3400820e:	f7ff ffb5 	bl	3400817c <CMW_VD66GY_SetDefaultSensorValues>
  sensor_config = initSensor->sensor_config ? (CMW_VD66GY_config_t*)(initSensor->sensor_config) : &default_sensor_config;
34008212:	6963      	ldr	r3, [r4, #20]
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
34008214:	a908      	add	r1, sp, #32
  sensor_config = initSensor->sensor_config ? (CMW_VD66GY_config_t*)(initSensor->sensor_config) : &default_sensor_config;
34008216:	2b00      	cmp	r3, #0
34008218:	bf08      	it	eq
3400821a:	4633      	moveq	r3, r6
  config.ext_clock_freq_in_hz = sensor_config->ext_clock_freq_in_hz;
3400821c:	681a      	ldr	r2, [r3, #0]
3400821e:	9208      	str	r2, [sp, #32]
  config.line_len = sensor_config->line_len;
34008220:	685a      	ldr	r2, [r3, #4]
34008222:	920c      	str	r2, [sp, #48]	@ 0x30
  config.out_itf.datalane_nb = sensor_config->csiconfig.datalane_nb;
34008224:	689a      	ldr	r2, [r3, #8]
34008226:	920e      	str	r2, [sp, #56]	@ 0x38
  config.out_itf.clock_lane_swap_enable = sensor_config->csiconfig.clock_lane_swap_enable;
34008228:	68da      	ldr	r2, [r3, #12]
3400822a:	920f      	str	r2, [sp, #60]	@ 0x3c
  config.out_itf.data_lane0_swap_enable = sensor_config->csiconfig.data_lane0_swap_enable;
3400822c:	691a      	ldr	r2, [r3, #16]
3400822e:	9210      	str	r2, [sp, #64]	@ 0x40
  config.out_itf.data_lane1_swap_enable = sensor_config->csiconfig.data_lane1_swap_enable;
34008230:	695a      	ldr	r2, [r3, #20]
  config.out_itf.data_lanes_mapping_swap_enable = sensor_config->csiconfig.data_lanes_mapping_swap_enable;
34008232:	699b      	ldr	r3, [r3, #24]
  config.out_itf.data_lane1_swap_enable = sensor_config->csiconfig.data_lane1_swap_enable;
34008234:	9211      	str	r2, [sp, #68]	@ 0x44
  config.out_itf.data_lanes_mapping_swap_enable = sensor_config->csiconfig.data_lanes_mapping_swap_enable;
34008236:	9312      	str	r3, [sp, #72]	@ 0x48
  config.flip_mirror_mode = CMW_VD66GY_getMirrorFlipConfig(initSensor->mirrorFlip);
34008238:	6923      	ldr	r3, [r4, #16]
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
3400823a:	1d2c      	adds	r4, r5, #4
  config.flip_mirror_mode = CMW_VD66GY_getMirrorFlipConfig(initSensor->mirrorFlip);
3400823c:	2b03      	cmp	r3, #3
3400823e:	bf28      	it	cs
34008240:	2303      	movcs	r3, #3
34008242:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    config.gpio_ctrl[i] = VD6G_GPIO_GPIO_IN;
34008246:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
3400824a:	4620      	mov	r0, r4
    config.gpio_ctrl[i] = VD6G_GPIO_GPIO_IN;
3400824c:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
34008250:	f001 f970 	bl	34009534 <VD6G_Init>
  if (ret)
34008254:	b928      	cbnz	r0, 34008262 <CMW_VD66GY_Init+0xaa>
  if (((CMW_VD66GY_t *)io_ctx)->ctx_driver.bayer == VD6G_BAYER_NONE)
34008256:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
3400825a:	b9e3      	cbnz	r3, 34008296 <CMW_VD66GY_Init+0xde>
    VD6G_DeInit(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
3400825c:	4620      	mov	r0, r4
3400825e:	f001 fc79 	bl	34009b54 <VD6G_DeInit>
    return CMW_ERROR_PERIPH_FAILURE;
34008262:	f06f 0003 	mvn.w	r0, #3
}
34008266:	b016      	add	sp, #88	@ 0x58
34008268:	bd70      	pop	{r4, r5, r6, pc}
  else if (width == 1024 && height == 768)
3400826a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
3400826e:	d104      	bne.n	3400827a <CMW_VD66GY_Init+0xc2>
34008270:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34008274:	d1bd      	bne.n	340081f2 <CMW_VD66GY_Init+0x3a>
    *res = VD6G_RES_XGA_1024_768;
34008276:	2303      	movs	r3, #3
34008278:	e7c5      	b.n	34008206 <CMW_VD66GY_Init+0x4e>
  else if (width == 1120 && height == 720)
3400827a:	f5b2 6f8c 	cmp.w	r2, #1120	@ 0x460
3400827e:	d1b8      	bne.n	340081f2 <CMW_VD66GY_Init+0x3a>
34008280:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
34008284:	d101      	bne.n	3400828a <CMW_VD66GY_Init+0xd2>
    *res = VD6G_RES_PORTRAIT_1120_720;
34008286:	2307      	movs	r3, #7
34008288:	e7bd      	b.n	34008206 <CMW_VD66GY_Init+0x4e>
  else if (width == 1120 && height == 1364)
3400828a:	f240 5254 	movw	r2, #1364	@ 0x554
3400828e:	4293      	cmp	r3, r2
34008290:	d1af      	bne.n	340081f2 <CMW_VD66GY_Init+0x3a>
    *res = VD6G_RES_FULL_1120_1364;
34008292:	2308      	movs	r3, #8
34008294:	e7b7      	b.n	34008206 <CMW_VD66GY_Init+0x4e>
  ((CMW_VD66GY_t *)io_ctx)->IsInitialized = 1;
34008296:	2301      	movs	r3, #1
34008298:	f885 311c 	strb.w	r3, [r5, #284]	@ 0x11c
    return CMW_ERROR_NONE;
3400829c:	2000      	movs	r0, #0
3400829e:	e7e2      	b.n	34008266 <CMW_VD66GY_Init+0xae>
340082a0:	3402c34a 	.word	0x3402c34a
340082a4:	34031656 	.word	0x34031656
340082a8:	3402c3ea 	.word	0x3402c3ea

340082ac <VD66GY_RegisterBusIO>:

int32_t VD66GY_RegisterBusIO(CMW_VD66GY_t *io_ctx)
{
  int ret;

  if (!io_ctx)
340082ac:	b118      	cbz	r0, 340082b6 <VD66GY_RegisterBusIO+0xa>
    return CMW_ERROR_COMPONENT_FAILURE;

  if (!io_ctx->Init)
340082ae:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
340082b2:	b103      	cbz	r3, 340082b6 <VD66GY_RegisterBusIO+0xa>
    return CMW_ERROR_COMPONENT_FAILURE;

  ret = io_ctx->Init();
340082b4:	4718      	bx	r3

  return ret;
}
340082b6:	f06f 0004 	mvn.w	r0, #4
340082ba:	4770      	bx	lr

340082bc <VD66GY_ReadID>:

int32_t VD66GY_ReadID(CMW_VD66GY_t *io_ctx, uint32_t *Id)
{
340082bc:	b513      	push	{r0, r1, r4, lr}
340082be:	460c      	mov	r4, r1
  uint16_t reg16;
  int32_t ret;

  ret = CMW_VD66GY_Read16(io_ctx, VD66GY_REG_MODEL_ID, &reg16);
340082c0:	f10d 0206 	add.w	r2, sp, #6
340082c4:	2100      	movs	r1, #0
340082c6:	f7ff fca5 	bl	34007c14 <CMW_VD66GY_Read16>
  if (ret)
340082ca:	b910      	cbnz	r0, 340082d2 <VD66GY_ReadID+0x16>
    return ret;

  *Id = reg16;
340082cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
340082d0:	6023      	str	r3, [r4, #0]

  return CMW_ERROR_NONE;
}
340082d2:	b002      	add	sp, #8
340082d4:	bd10      	pop	{r4, pc}
	...

340082d8 <CMW_VD66GY_Probe>:
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
  HAL_Delay(20);     /* NRST de-asserted during 20ms */
}

int CMW_VD66GY_Probe(CMW_VD66GY_t *io_ctx, CMW_Sensor_if_t *vd6g_if)
{
340082d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
340082da:	4604      	mov	r4, r0
  int ret = CMW_ERROR_NONE;
  uint32_t id;

  io_ctx->ctx_driver.shutdown_pin = VD6G_ShutdownPin;
340082dc:	4b2e      	ldr	r3, [pc, #184]	@ (34008398 <CMW_VD66GY_Probe+0xc0>)
{
340082de:	460d      	mov	r5, r1
  io_ctx->ctx_driver.shutdown_pin = VD6G_ShutdownPin;
340082e0:	6043      	str	r3, [r0, #4]
  io_ctx->ctx_driver.read8 = VD6G_Read8;
340082e2:	4b2e      	ldr	r3, [pc, #184]	@ (3400839c <CMW_VD66GY_Probe+0xc4>)
340082e4:	6083      	str	r3, [r0, #8]
  io_ctx->ctx_driver.read16 = VD6G_Read16;
340082e6:	4b2e      	ldr	r3, [pc, #184]	@ (340083a0 <CMW_VD66GY_Probe+0xc8>)
340082e8:	60c3      	str	r3, [r0, #12]
  io_ctx->ctx_driver.read32 = VD6G_Read32;
340082ea:	4b2e      	ldr	r3, [pc, #184]	@ (340083a4 <CMW_VD66GY_Probe+0xcc>)
340082ec:	6103      	str	r3, [r0, #16]
  io_ctx->ctx_driver.write8 = VD6G_Write8;
340082ee:	4b2e      	ldr	r3, [pc, #184]	@ (340083a8 <CMW_VD66GY_Probe+0xd0>)
340082f0:	6143      	str	r3, [r0, #20]
  io_ctx->ctx_driver.write16 = VD6G_Write16;
340082f2:	4b2e      	ldr	r3, [pc, #184]	@ (340083ac <CMW_VD66GY_Probe+0xd4>)
340082f4:	6183      	str	r3, [r0, #24]
  io_ctx->ctx_driver.write32 = VD6G_Write32;
340082f6:	4b2e      	ldr	r3, [pc, #184]	@ (340083b0 <CMW_VD66GY_Probe+0xd8>)
340082f8:	61c3      	str	r3, [r0, #28]
  io_ctx->ctx_driver.write_array = VD6G_WriteArray;
340082fa:	4b2e      	ldr	r3, [pc, #184]	@ (340083b4 <CMW_VD66GY_Probe+0xdc>)
340082fc:	6203      	str	r3, [r0, #32]
  io_ctx->ctx_driver.delay = VD6G_Delay;
340082fe:	4b2e      	ldr	r3, [pc, #184]	@ (340083b8 <CMW_VD66GY_Probe+0xe0>)
34008300:	6243      	str	r3, [r0, #36]	@ 0x24
  io_ctx->ctx_driver.log = VD6G_Log;
34008302:	4b2e      	ldr	r3, [pc, #184]	@ (340083bc <CMW_VD66GY_Probe+0xe4>)
34008304:	6283      	str	r3, [r0, #40]	@ 0x28
  io_ctx->EnablePin(1);
34008306:	f8d0 313c 	ldr.w	r3, [r0, #316]	@ 0x13c
3400830a:	2001      	movs	r0, #1
3400830c:	4798      	blx	r3
  io_ctx->ShutdownPin(0);  /* Disable MB1723 2V8 signal  */
3400830e:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34008312:	2000      	movs	r0, #0
34008314:	4798      	blx	r3
  HAL_Delay(200);   /* NRST signals asserted during 200ms */
34008316:	20c8      	movs	r0, #200	@ 0xc8
34008318:	f016 fde2 	bl	3401eee0 <HAL_Delay>
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
3400831c:	2001      	movs	r0, #1
3400831e:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34008322:	4798      	blx	r3
  HAL_Delay(20);     /* NRST de-asserted during 20ms */
34008324:	2014      	movs	r0, #20
34008326:	f016 fddb 	bl	3401eee0 <HAL_Delay>

  CMW_VD66GY_PowerOn(io_ctx);

  ret = VD66GY_RegisterBusIO(io_ctx);
3400832a:	4620      	mov	r0, r4
3400832c:	f7ff ffbe 	bl	340082ac <VD66GY_RegisterBusIO>
  if (ret != CMW_ERROR_NONE)
34008330:	b120      	cbz	r0, 3400833c <CMW_VD66GY_Probe+0x64>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
34008332:	f06f 0404 	mvn.w	r4, #4
  vd6g_if->SetExposureMode = CMW_VD66GY_SetExposureMode;
  vd6g_if->SetWBRefMode = CMW_VD66GY_SetWBRefMode;
  vd6g_if->ListWBRefModes = CMW_VD66GY_ListWBRefModes;
  vd6g_if->GetSensorInfo = CMW_VD66GY_GetSensorInfo;
  return ret;
}
34008336:	4620      	mov	r0, r4
34008338:	b003      	add	sp, #12
3400833a:	bd30      	pop	{r4, r5, pc}
  ret = VD66GY_ReadID(io_ctx, &id);
3400833c:	4620      	mov	r0, r4
3400833e:	a901      	add	r1, sp, #4
34008340:	f7ff ffbc 	bl	340082bc <VD66GY_ReadID>
  if (ret != CMW_ERROR_NONE)
34008344:	4604      	mov	r4, r0
34008346:	2800      	cmp	r0, #0
34008348:	d1f3      	bne.n	34008332 <CMW_VD66GY_Probe+0x5a>
  if (id != VD66GY_CHIP_ID)
3400834a:	f245 6303 	movw	r3, #22019	@ 0x5603
3400834e:	9a01      	ldr	r2, [sp, #4]
34008350:	429a      	cmp	r2, r3
34008352:	d1ee      	bne.n	34008332 <CMW_VD66GY_Probe+0x5a>
  memset(vd6g_if, 0, sizeof(*vd6g_if));
34008354:	4601      	mov	r1, r0
34008356:	224c      	movs	r2, #76	@ 0x4c
34008358:	f105 001c 	add.w	r0, r5, #28
3400835c:	f019 f9da 	bl	34021714 <memset>
  vd6g_if->Init = CMW_VD66GY_Init;
34008360:	4b17      	ldr	r3, [pc, #92]	@ (340083c0 <CMW_VD66GY_Probe+0xe8>)
34008362:	602b      	str	r3, [r5, #0]
  vd6g_if->DeInit = CMW_VD66GY_DeInit;
34008364:	4b17      	ldr	r3, [pc, #92]	@ (340083c4 <CMW_VD66GY_Probe+0xec>)
34008366:	606b      	str	r3, [r5, #4]
  vd6g_if->Run = CMW_VD66GY_Run;
34008368:	4b17      	ldr	r3, [pc, #92]	@ (340083c8 <CMW_VD66GY_Probe+0xf0>)
3400836a:	60eb      	str	r3, [r5, #12]
  vd6g_if->VsyncEventCallback = CMW_VD66GY_VsyncEventCallback;
3400836c:	4b17      	ldr	r3, [pc, #92]	@ (340083cc <CMW_VD66GY_Probe+0xf4>)
3400836e:	612b      	str	r3, [r5, #16]
  vd6g_if->FrameEventCallback = CMW_VD66GY_FrameEventCallback;
34008370:	4b17      	ldr	r3, [pc, #92]	@ (340083d0 <CMW_VD66GY_Probe+0xf8>)
34008372:	616b      	str	r3, [r5, #20]
  vd6g_if->Start = CMW_VD66GY_Start;
34008374:	4b17      	ldr	r3, [pc, #92]	@ (340083d4 <CMW_VD66GY_Probe+0xfc>)
34008376:	60ab      	str	r3, [r5, #8]
  vd6g_if->Stop = CMW_VD66GY_Stop;
34008378:	4b17      	ldr	r3, [pc, #92]	@ (340083d8 <CMW_VD66GY_Probe+0x100>)
3400837a:	61ab      	str	r3, [r5, #24]
  vd6g_if->SetGain = CMW_VD66GY_SetGain;
3400837c:	4b17      	ldr	r3, [pc, #92]	@ (340083dc <CMW_VD66GY_Probe+0x104>)
3400837e:	64ab      	str	r3, [r5, #72]	@ 0x48
  vd6g_if->SetExposure = CMW_VD66GY_SetExposure;
34008380:	4b17      	ldr	r3, [pc, #92]	@ (340083e0 <CMW_VD66GY_Probe+0x108>)
34008382:	64eb      	str	r3, [r5, #76]	@ 0x4c
  vd6g_if->SetExposureMode = CMW_VD66GY_SetExposureMode;
34008384:	4b17      	ldr	r3, [pc, #92]	@ (340083e4 <CMW_VD66GY_Probe+0x10c>)
34008386:	652b      	str	r3, [r5, #80]	@ 0x50
  vd6g_if->SetWBRefMode = CMW_VD66GY_SetWBRefMode;
34008388:	4b17      	ldr	r3, [pc, #92]	@ (340083e8 <CMW_VD66GY_Probe+0x110>)
3400838a:	656b      	str	r3, [r5, #84]	@ 0x54
  vd6g_if->ListWBRefModes = CMW_VD66GY_ListWBRefModes;
3400838c:	4b17      	ldr	r3, [pc, #92]	@ (340083ec <CMW_VD66GY_Probe+0x114>)
3400838e:	65ab      	str	r3, [r5, #88]	@ 0x58
  vd6g_if->GetSensorInfo = CMW_VD66GY_GetSensorInfo;
34008390:	4b17      	ldr	r3, [pc, #92]	@ (340083f0 <CMW_VD66GY_Probe+0x118>)
34008392:	662b      	str	r3, [r5, #96]	@ 0x60
  return ret;
34008394:	e7cf      	b.n	34008336 <CMW_VD66GY_Probe+0x5e>
34008396:	bf00      	nop
34008398:	34007c31 	.word	0x34007c31
3400839c:	34007c39 	.word	0x34007c39
340083a0:	34007c4d 	.word	0x34007c4d
340083a4:	34007c53 	.word	0x34007c53
340083a8:	34007c71 	.word	0x34007c71
340083ac:	34007c8b 	.word	0x34007c8b
340083b0:	34007ca5 	.word	0x34007ca5
340083b4:	34007cbd 	.word	0x34007cbd
340083b8:	34007d01 	.word	0x34007d01
340083bc:	34007d09 	.word	0x34007d09
340083c0:	340081b9 	.word	0x340081b9
340083c4:	3400810d 	.word	0x3400810d
340083c8:	34008131 	.word	0x34008131
340083cc:	34008145 	.word	0x34008145
340083d0:	34007d0b 	.word	0x34007d0b
340083d4:	340080c5 	.word	0x340080c5
340083d8:	340080b1 	.word	0x340080b1
340083dc:	34007d11 	.word	0x34007d11
340083e0:	34007efd 	.word	0x34007efd
340083e4:	34007f03 	.word	0x34007f03
340083e8:	34007f21 	.word	0x34007f21
340083ec:	34007f35 	.word	0x34007f35
340083f0:	34007f49 	.word	0x34007f49

340083f4 <IMX335_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
340083f4:	b410      	push	{r4}
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
340083f6:	6904      	ldr	r4, [r0, #16]
340083f8:	8900      	ldrh	r0, [r0, #8]
340083fa:	46a4      	mov	ip, r4
}
340083fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
34008400:	4760      	bx	ip

34008402 <IMX335_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
34008402:	b410      	push	{r4}
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
34008404:	68c4      	ldr	r4, [r0, #12]
34008406:	8900      	ldrh	r0, [r0, #8]
34008408:	46a4      	mov	ip, r4
}
3400840a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
3400840e:	4760      	bx	ip

34008410 <IMX335_WriteTable>:
{
34008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = IMX335_OK;
34008412:	2500      	movs	r5, #0
34008414:	1c8c      	adds	r4, r1, #2
34008416:	eb04 0682 	add.w	r6, r4, r2, lsl #2
      if(imx335_write_reg(&pObj->Ctx, regs[index].addr, (uint8_t *)&(regs[index].val), 1) != IMX335_OK)
3400841a:	f100 0718 	add.w	r7, r0, #24
    if(ret != IMX335_ERROR)
3400841e:	b135      	cbz	r5, 3400842e <IMX335_WriteTable+0x1e>
  int32_t ret = IMX335_OK;
34008420:	f04f 35ff 	mov.w	r5, #4294967295
  for(index=0; index<size ; index++)
34008424:	3404      	adds	r4, #4
34008426:	42b4      	cmp	r4, r6
34008428:	d1f9      	bne.n	3400841e <IMX335_WriteTable+0xe>
}
3400842a:	4628      	mov	r0, r5
3400842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(imx335_write_reg(&pObj->Ctx, regs[index].addr, (uint8_t *)&(regs[index].val), 1) != IMX335_OK)
3400842e:	2301      	movs	r3, #1
34008430:	4622      	mov	r2, r4
34008432:	4638      	mov	r0, r7
34008434:	f834 1c02 	ldrh.w	r1, [r4, #-2]
34008438:	f000 f99d 	bl	34008776 <imx335_write_reg>
3400843c:	2800      	cmp	r0, #0
3400843e:	d1ef      	bne.n	34008420 <IMX335_WriteTable+0x10>
34008440:	e7f0      	b.n	34008424 <IMX335_WriteTable+0x14>
	...

34008444 <IMX335_RegisterBusIO>:
  */
int32_t IMX335_RegisterBusIO(IMX335_Object_t *pObj, IMX335_IO_t *pIO)
{
  int32_t ret;

  if (pObj == NULL)
34008444:	b190      	cbz	r0, 3400846c <IMX335_RegisterBusIO+0x28>
    ret = IMX335_ERROR;
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
    pObj->IO.DeInit    = pIO->DeInit;
34008446:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
34008448:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
3400844a:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
3400844c:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
3400844e:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
34008450:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
34008452:	68ca      	ldr	r2, [r1, #12]
34008454:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
34008456:	690a      	ldr	r2, [r1, #16]
34008458:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
3400845a:	694a      	ldr	r2, [r1, #20]

    pObj->Ctx.ReadReg  = IMX335_ReadRegWrap;
    pObj->Ctx.WriteReg = IMX335_WriteRegWrap;
    pObj->Ctx.handle   = pObj;
3400845c:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
3400845e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = IMX335_ReadRegWrap;
34008460:	4a04      	ldr	r2, [pc, #16]	@ (34008474 <IMX335_RegisterBusIO+0x30>)
34008462:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = IMX335_WriteRegWrap;
34008464:	4a04      	ldr	r2, [pc, #16]	@ (34008478 <IMX335_RegisterBusIO+0x34>)
34008466:	6182      	str	r2, [r0, #24]

    if(pObj->IO.Init != NULL)
34008468:	b103      	cbz	r3, 3400846c <IMX335_RegisterBusIO+0x28>
    {
      ret = pObj->IO.Init();
3400846a:	4718      	bx	r3
      ret = IMX335_ERROR;
    }
  }

  return ret;
}
3400846c:	f04f 30ff 	mov.w	r0, #4294967295
34008470:	4770      	bx	lr
34008472:	bf00      	nop
34008474:	340083f5 	.word	0x340083f5
34008478:	34008403 	.word	0x34008403

3400847c <IMX335_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t IMX335_Init(IMX335_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
3400847c:	b510      	push	{r4, lr}
  int32_t ret = IMX335_OK;

  if(pObj->IsInitialized == 0U)
3400847e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
34008482:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
34008484:	b9a3      	cbnz	r3, 340084b0 <IMX335_Init+0x34>
  {
    switch (Resolution)
34008486:	2906      	cmp	r1, #6
34008488:	d002      	beq.n	34008490 <IMX335_Init+0x14>
        }
        break;
      /* Add new resolution here */
      default:
        /* Resolution not supported */
        ret = IMX335_ERROR;
3400848a:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
3400848e:	bd10      	pop	{r4, pc}
        if(IMX335_WriteTable(pObj, res_2592_1944_regs, ARRAY_SIZE(res_2592_1944_regs)) != IMX335_OK)
34008490:	2254      	movs	r2, #84	@ 0x54
34008492:	4908      	ldr	r1, [pc, #32]	@ (340084b4 <IMX335_Init+0x38>)
34008494:	f7ff ffbc 	bl	34008410 <IMX335_WriteTable>
34008498:	2800      	cmp	r0, #0
3400849a:	d1f6      	bne.n	3400848a <IMX335_Init+0xe>
      if(IMX335_WriteTable(pObj, mode_2l_10b_regs, ARRAY_SIZE(mode_2l_10b_regs)) != IMX335_OK)
3400849c:	2205      	movs	r2, #5
3400849e:	4620      	mov	r0, r4
340084a0:	4905      	ldr	r1, [pc, #20]	@ (340084b8 <IMX335_Init+0x3c>)
340084a2:	f7ff ffb5 	bl	34008410 <IMX335_WriteTable>
340084a6:	2800      	cmp	r0, #0
340084a8:	d1ef      	bne.n	3400848a <IMX335_Init+0xe>
        pObj->IsInitialized = 1U;
340084aa:	2301      	movs	r3, #1
340084ac:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  int32_t ret = IMX335_OK;
340084b0:	2000      	movs	r0, #0
  return ret;
340084b2:	e7ec      	b.n	3400848e <IMX335_Init+0x12>
340084b4:	34031a80 	.word	0x34031a80
340084b8:	34031a6c 	.word	0x34031a6c

340084bc <IMX335_Start>:
int32_t IMX335_Start(IMX335_Object_t *pObj)
{
  uint8_t tmp;
  int32_t ret = IMX335_OK;
  /* Start streaming */
  tmp = IMX335_MODE_STREAMING;
340084bc:	2300      	movs	r3, #0
{
340084be:	b573      	push	{r0, r1, r4, r5, r6, lr}
340084c0:	4605      	mov	r5, r0
  tmp = IMX335_MODE_STREAMING;
340084c2:	f88d 3007 	strb.w	r3, [sp, #7]
  ret = imx335_write_reg(&pObj->Ctx, IMX335_REG_MODE_SELECT, &tmp, 1);
340084c6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
340084ca:	2301      	movs	r3, #1
340084cc:	f10d 0207 	add.w	r2, sp, #7
340084d0:	3018      	adds	r0, #24
340084d2:	f000 f950 	bl	34008776 <imx335_write_reg>
  if (ret != IMX335_OK)
340084d6:	4604      	mov	r4, r0
340084d8:	b950      	cbnz	r0, 340084f0 <IMX335_Start+0x34>
  tickstart = pObj->IO.GetTick();
340084da:	696b      	ldr	r3, [r5, #20]
340084dc:	4798      	blx	r3
340084de:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
340084e0:	696b      	ldr	r3, [r5, #20]
340084e2:	4798      	blx	r3
340084e4:	1b83      	subs	r3, r0, r6
340084e6:	2b13      	cmp	r3, #19
340084e8:	d9fa      	bls.n	340084e0 <IMX335_Start+0x24>
  {
    return IMX335_ERROR;
  }
  IMX335_Delay(pObj, 20);
  return ret;
}
340084ea:	4620      	mov	r0, r4
340084ec:	b002      	add	sp, #8
340084ee:	bd70      	pop	{r4, r5, r6, pc}
    return IMX335_ERROR;
340084f0:	f04f 34ff 	mov.w	r4, #4294967295
340084f4:	e7f9      	b.n	340084ea <IMX335_Start+0x2e>

340084f6 <IMX335_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t IMX335_DeInit(IMX335_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
340084f6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
340084fa:	2b01      	cmp	r3, #1
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
340084fc:	bf04      	itt	eq
340084fe:	2300      	moveq	r3, #0
34008500:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }

  return IMX335_OK;
}
34008504:	2000      	movs	r0, #0
34008506:	4770      	bx	lr

34008508 <IMX335_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t IMX335_ReadID(IMX335_Object_t *pObj, uint32_t *Id)
{
34008508:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
3400850a:	4604      	mov	r4, r0
3400850c:	f854 3b18 	ldr.w	r3, [r4], #24
{
34008510:	460d      	mov	r5, r1
  pObj->IO.Init();
34008512:	4798      	blx	r3

  if(imx335_read_reg(&pObj->Ctx, IMX335_REG_ID, &tmp, 1)!= IMX335_OK)
34008514:	2301      	movs	r3, #1
34008516:	f643 1112 	movw	r1, #14610	@ 0x3912
3400851a:	4620      	mov	r0, r4
3400851c:	f10d 0207 	add.w	r2, sp, #7
34008520:	f000 f922 	bl	34008768 <imx335_read_reg>
34008524:	b920      	cbnz	r0, 34008530 <IMX335_ReadID+0x28>
  {
    ret = IMX335_ERROR;
  }
  else
  {
    *Id = tmp;
34008526:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400852a:	602b      	str	r3, [r5, #0]
    ret = IMX335_OK;
  }

  /* Component status */
  return ret;
}
3400852c:	b003      	add	sp, #12
3400852e:	bd30      	pop	{r4, r5, pc}
    ret = IMX335_ERROR;
34008530:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
34008534:	e7fa      	b.n	3400852c <IMX335_ReadID+0x24>
	...

34008538 <IMX335_SetGain>:
  * @param  pObj  pointer to component object
  * @param  Gain Gain in mdB
  * @retval Component status
  */
int32_t IMX335_SetGain(IMX335_Object_t *pObj, int32_t gain)
{
34008538:	b530      	push	{r4, r5, lr}
  int32_t ret = IMX335_OK;
  uint8_t hold;

  if ((gain > IMX335_GAIN_MAX) || (gain < IMX335_GAIN_MIN))
3400853a:	4b1a      	ldr	r3, [pc, #104]	@ (340085a4 <IMX335_SetGain+0x6c>)
{
3400853c:	b085      	sub	sp, #20
  if ((gain > IMX335_GAIN_MAX) || (gain < IMX335_GAIN_MIN))
3400853e:	4299      	cmp	r1, r3
34008540:	d903      	bls.n	3400854a <IMX335_SetGain+0x12>
  {
    ret = IMX335_ERROR;
34008542:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

return ret;
}
34008546:	b005      	add	sp, #20
34008548:	bd30      	pop	{r4, r5, pc}
    gain /= IMX335_GAIN_UNIT_MDB;
3400854a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
    hold = 1;
3400854e:	2501      	movs	r5, #1
    gain /= IMX335_GAIN_UNIT_MDB;
34008550:	fb91 f1f3 	sdiv	r1, r1, r3
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34008554:	f100 0418 	add.w	r4, r0, #24
    gain /= IMX335_GAIN_UNIT_MDB;
34008558:	9101      	str	r1, [sp, #4]
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
3400855a:	462b      	mov	r3, r5
3400855c:	f243 0101 	movw	r1, #12289	@ 0x3001
34008560:	4620      	mov	r0, r4
34008562:	f10d 020f 	add.w	r2, sp, #15
    hold = 1;
34008566:	f88d 500f 	strb.w	r5, [sp, #15]
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
3400856a:	f000 f904 	bl	34008776 <imx335_write_reg>
3400856e:	2800      	cmp	r0, #0
34008570:	d1e7      	bne.n	34008542 <IMX335_SetGain+0xa>
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_GAIN, (uint8_t *)&gain, 2) != IMX335_OK)
34008572:	2302      	movs	r3, #2
34008574:	f243 01e8 	movw	r1, #12520	@ 0x30e8
34008578:	4620      	mov	r0, r4
3400857a:	aa01      	add	r2, sp, #4
3400857c:	f000 f8fb 	bl	34008776 <imx335_write_reg>
34008580:	2800      	cmp	r0, #0
34008582:	d1de      	bne.n	34008542 <IMX335_SetGain+0xa>
        hold = 0;
34008584:	f88d 000f 	strb.w	r0, [sp, #15]
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34008588:	462b      	mov	r3, r5
3400858a:	f243 0101 	movw	r1, #12289	@ 0x3001
3400858e:	4620      	mov	r0, r4
34008590:	f10d 020f 	add.w	r2, sp, #15
34008594:	f000 f8ef 	bl	34008776 <imx335_write_reg>
34008598:	3800      	subs	r0, #0
3400859a:	bf18      	it	ne
3400859c:	2001      	movne	r0, #1
3400859e:	4240      	negs	r0, r0
return ret;
340085a0:	e7d1      	b.n	34008546 <IMX335_SetGain+0xe>
340085a2:	bf00      	nop
340085a4:	00011940 	.word	0x00011940

340085a8 <IMX335_SetExposure>:
  * @param  pObj  pointer to component object
  * @param  Exposure Exposure in micro seconds
  * @retval Component status
  */
int32_t IMX335_SetExposure(IMX335_Object_t *pObj, int32_t exposure)
{
340085a8:	b530      	push	{r4, r5, lr}
340085aa:	ed2d 8b02 	vpush	{d8}
  int32_t ret = IMX335_OK;
  uint32_t vmax, shutter;
  uint8_t hold;


  if (imx335_read_reg(&pObj->Ctx, IMX335_REG_VMAX, (uint8_t *)&vmax, 4) != IMX335_OK)
340085ae:	f100 0418 	add.w	r4, r0, #24
{
340085b2:	b085      	sub	sp, #20
340085b4:	ee08 1a10 	vmov	s16, r1
  if (imx335_read_reg(&pObj->Ctx, IMX335_REG_VMAX, (uint8_t *)&vmax, 4) != IMX335_OK)
340085b8:	2304      	movs	r3, #4
340085ba:	f243 0130 	movw	r1, #12336	@ 0x3030
340085be:	4620      	mov	r0, r4
340085c0:	aa02      	add	r2, sp, #8
340085c2:	f000 f8d1 	bl	34008768 <imx335_read_reg>
340085c6:	b128      	cbz	r0, 340085d4 <IMX335_SetExposure+0x2c>
  {
    ret = IMX335_ERROR;
340085c8:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
340085cc:	b005      	add	sp, #20
340085ce:	ecbd 8b02 	vpop	{d8}
340085d2:	bd30      	pop	{r4, r5, pc}
    shutter = (uint32_t) (vmax - (exposure / IMX335_1H_PERIOD_USEC));
340085d4:	eddd 7a02 	vldr	s15, [sp, #8]
340085d8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
340085dc:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 34008648 <IMX335_SetExposure+0xa0>
340085e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
340085e4:	ee88 7a26 	vdiv.f32	s14, s16, s13
340085e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
340085ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340085f0:	ee17 3a90 	vmov	r3, s15
    if (shutter < IMX335_SHUTTER_MIN)
340085f4:	2b08      	cmp	r3, #8
    shutter = (uint32_t) (vmax - (exposure / IMX335_1H_PERIOD_USEC));
340085f6:	edcd 7a03 	vstr	s15, [sp, #12]
    if (shutter < IMX335_SHUTTER_MIN)
340085fa:	d9e5      	bls.n	340085c8 <IMX335_SetExposure+0x20>
      hold = 1;
340085fc:	2501      	movs	r5, #1
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
340085fe:	f243 0101 	movw	r1, #12289	@ 0x3001
34008602:	462b      	mov	r3, r5
34008604:	4620      	mov	r0, r4
34008606:	f10d 0207 	add.w	r2, sp, #7
      hold = 1;
3400860a:	f88d 5007 	strb.w	r5, [sp, #7]
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
3400860e:	f000 f8b2 	bl	34008776 <imx335_write_reg>
34008612:	2800      	cmp	r0, #0
34008614:	d1d8      	bne.n	340085c8 <IMX335_SetExposure+0x20>
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_SHUTTER, (uint8_t *)&shutter, 3) != IMX335_OK)
34008616:	2303      	movs	r3, #3
34008618:	f243 0158 	movw	r1, #12376	@ 0x3058
3400861c:	4620      	mov	r0, r4
3400861e:	aa03      	add	r2, sp, #12
34008620:	f000 f8a9 	bl	34008776 <imx335_write_reg>
34008624:	2800      	cmp	r0, #0
34008626:	d1cf      	bne.n	340085c8 <IMX335_SetExposure+0x20>
          hold = 0;
34008628:	f88d 0007 	strb.w	r0, [sp, #7]
          if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
3400862c:	462b      	mov	r3, r5
3400862e:	f243 0101 	movw	r1, #12289	@ 0x3001
34008632:	4620      	mov	r0, r4
34008634:	f10d 0207 	add.w	r2, sp, #7
34008638:	f000 f89d 	bl	34008776 <imx335_write_reg>
3400863c:	3800      	subs	r0, #0
3400863e:	bf18      	it	ne
34008640:	2001      	movne	r0, #1
34008642:	4240      	negs	r0, r0
  return ret;
34008644:	e7c2      	b.n	340085cc <IMX335_SetExposure+0x24>
34008646:	bf00      	nop
34008648:	40ed097c 	.word	0x40ed097c

3400864c <IMX335_SetFrequency>:
  */
int32_t IMX335_SetFrequency(IMX335_Object_t *pObj, int32_t frequency)
{
  uint32_t ret = IMX335_OK;

  switch (frequency)
3400864c:	3901      	subs	r1, #1
        ret = IMX335_ERROR;
      }
      break;
    default:
      /* IMX335_INCK_6MHZ */
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
3400864e:	2207      	movs	r2, #7
{
34008650:	b508      	push	{r3, lr}
  switch (frequency)
34008652:	2903      	cmp	r1, #3
34008654:	d811      	bhi.n	3400867a <IMX335_SetFrequency+0x2e>
34008656:	e8df f001 	tbb	[pc, r1]
3400865a:	0c0e      	.short	0x0c0e
3400865c:	020a      	.short	0x020a
      if(IMX335_WriteTable(pObj, inck_74Mhz_regs, ARRAY_SIZE(inck_74Mhz_regs)) != IMX335_OK)
3400865e:	4908      	ldr	r1, [pc, #32]	@ (34008680 <IMX335_SetFrequency+0x34>)
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
34008660:	f7ff fed6 	bl	34008410 <IMX335_WriteTable>
34008664:	3800      	subs	r0, #0
34008666:	bf18      	it	ne
34008668:	2001      	movne	r0, #1
3400866a:	4240      	negs	r0, r0
      }
      break;
  };

  return ret;
}
3400866c:	bd08      	pop	{r3, pc}
      if(IMX335_WriteTable(pObj, inck_27Mhz_regs, ARRAY_SIZE(inck_27Mhz_regs)) != IMX335_OK)
3400866e:	4905      	ldr	r1, [pc, #20]	@ (34008684 <IMX335_SetFrequency+0x38>)
34008670:	e7f6      	b.n	34008660 <IMX335_SetFrequency+0x14>
      if(IMX335_WriteTable(pObj, inck_24Mhz_regs, ARRAY_SIZE(inck_24Mhz_regs)) != IMX335_OK)
34008672:	4905      	ldr	r1, [pc, #20]	@ (34008688 <IMX335_SetFrequency+0x3c>)
34008674:	e7f4      	b.n	34008660 <IMX335_SetFrequency+0x14>
      if(IMX335_WriteTable(pObj, inck_18Mhz_regs, ARRAY_SIZE(inck_18Mhz_regs)) != IMX335_OK)
34008676:	4905      	ldr	r1, [pc, #20]	@ (3400868c <IMX335_SetFrequency+0x40>)
34008678:	e7f2      	b.n	34008660 <IMX335_SetFrequency+0x14>
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
3400867a:	4905      	ldr	r1, [pc, #20]	@ (34008690 <IMX335_SetFrequency+0x44>)
3400867c:	e7f0      	b.n	34008660 <IMX335_SetFrequency+0x14>
3400867e:	bf00      	nop
34008680:	34031a50 	.word	0x34031a50
34008684:	34031a34 	.word	0x34031a34
34008688:	34031a18 	.word	0x34031a18
3400868c:	340319fc 	.word	0x340319fc
34008690:	340319e0 	.word	0x340319e0

34008694 <IMX335_SetFramerate>:
  * @retval Component status
  */
int32_t IMX335_SetFramerate(IMX335_Object_t *pObj, int32_t framerate)
{
  uint32_t ret = IMX335_OK;
  switch (framerate)
34008694:	2914      	cmp	r1, #20
{
34008696:	b508      	push	{r3, lr}
34008698:	4603      	mov	r3, r0
  switch (framerate)
3400869a:	d019      	beq.n	340086d0 <IMX335_SetFramerate+0x3c>
3400869c:	dc07      	bgt.n	340086ae <IMX335_SetFramerate+0x1a>
3400869e:	290a      	cmp	r1, #10
340086a0:	d00a      	beq.n	340086b8 <IMX335_SetFramerate+0x24>
340086a2:	290f      	cmp	r1, #15
340086a4:	d011      	beq.n	340086ca <IMX335_SetFramerate+0x36>
        ret = IMX335_ERROR;
      }
      break;
    default:
      /* 30fps */
      if(IMX335_WriteTable(pObj, framerate_30fps_regs, ARRAY_SIZE(framerate_30fps_regs)) != IMX335_OK)
340086a6:	2202      	movs	r2, #2
340086a8:	4618      	mov	r0, r3
340086aa:	490b      	ldr	r1, [pc, #44]	@ (340086d8 <IMX335_SetFramerate+0x44>)
340086ac:	e006      	b.n	340086bc <IMX335_SetFramerate+0x28>
  switch (framerate)
340086ae:	2919      	cmp	r1, #25
340086b0:	d1f9      	bne.n	340086a6 <IMX335_SetFramerate+0x12>
      if(IMX335_WriteTable(pObj, framerate_25fps_regs, ARRAY_SIZE(framerate_25fps_regs)) != IMX335_OK)
340086b2:	2202      	movs	r2, #2
340086b4:	4909      	ldr	r1, [pc, #36]	@ (340086dc <IMX335_SetFramerate+0x48>)
340086b6:	e001      	b.n	340086bc <IMX335_SetFramerate+0x28>
      if(IMX335_WriteTable(pObj, framerate_10fps_regs, ARRAY_SIZE(framerate_10fps_regs)) != IMX335_OK)
340086b8:	2202      	movs	r2, #2
340086ba:	4909      	ldr	r1, [pc, #36]	@ (340086e0 <IMX335_SetFramerate+0x4c>)
      if(IMX335_WriteTable(pObj, framerate_30fps_regs, ARRAY_SIZE(framerate_30fps_regs)) != IMX335_OK)
340086bc:	f7ff fea8 	bl	34008410 <IMX335_WriteTable>
340086c0:	3800      	subs	r0, #0
340086c2:	bf18      	it	ne
340086c4:	2001      	movne	r0, #1
340086c6:	4240      	negs	r0, r0
      }
      break;
  };

  return ret;
}
340086c8:	bd08      	pop	{r3, pc}
      if(IMX335_WriteTable(pObj, framerate_15fps_regs, ARRAY_SIZE(framerate_15fps_regs)) != IMX335_OK)
340086ca:	2202      	movs	r2, #2
340086cc:	4905      	ldr	r1, [pc, #20]	@ (340086e4 <IMX335_SetFramerate+0x50>)
340086ce:	e7f5      	b.n	340086bc <IMX335_SetFramerate+0x28>
      if(IMX335_WriteTable(pObj, framerate_20fps_regs, ARRAY_SIZE(framerate_20fps_regs)) != IMX335_OK)
340086d0:	2202      	movs	r2, #2
340086d2:	4905      	ldr	r1, [pc, #20]	@ (340086e8 <IMX335_SetFramerate+0x54>)
340086d4:	e7f2      	b.n	340086bc <IMX335_SetFramerate+0x28>
340086d6:	bf00      	nop
340086d8:	340319b8 	.word	0x340319b8
340086dc:	340319c0 	.word	0x340319c0
340086e0:	340319d8 	.word	0x340319d8
340086e4:	340319d0 	.word	0x340319d0
340086e8:	340319c8 	.word	0x340319c8

340086ec <IMX335_MirrorFlipConfig>:
  */
int32_t IMX335_MirrorFlipConfig(IMX335_Object_t *pObj, uint32_t Config)
{
  int32_t ret = IMX335_OK;

  switch (Config)
340086ec:	2902      	cmp	r1, #2
    case IMX335_MIRROR_FLIP:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[3], ARRAY_SIZE(mirrorflip_mode_regs[3]));
      break;
    case IMX335_MIRROR_FLIP_NONE:
    default:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
340086ee:	f04f 020a 	mov.w	r2, #10
  switch (Config)
340086f2:	d006      	beq.n	34008702 <IMX335_MirrorFlipConfig+0x16>
340086f4:	2903      	cmp	r1, #3
340086f6:	d006      	beq.n	34008706 <IMX335_MirrorFlipConfig+0x1a>
340086f8:	2901      	cmp	r1, #1
340086fa:	d106      	bne.n	3400870a <IMX335_MirrorFlipConfig+0x1e>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[1], ARRAY_SIZE(mirrorflip_mode_regs[1]));
340086fc:	4904      	ldr	r1, [pc, #16]	@ (34008710 <IMX335_MirrorFlipConfig+0x24>)
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
340086fe:	f7ff be87 	b.w	34008410 <IMX335_WriteTable>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[2], ARRAY_SIZE(mirrorflip_mode_regs[2]));
34008702:	4904      	ldr	r1, [pc, #16]	@ (34008714 <IMX335_MirrorFlipConfig+0x28>)
34008704:	e7fb      	b.n	340086fe <IMX335_MirrorFlipConfig+0x12>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[3], ARRAY_SIZE(mirrorflip_mode_regs[3]));
34008706:	4904      	ldr	r1, [pc, #16]	@ (34008718 <IMX335_MirrorFlipConfig+0x2c>)
34008708:	e7f9      	b.n	340086fe <IMX335_MirrorFlipConfig+0x12>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
3400870a:	4904      	ldr	r1, [pc, #16]	@ (3400871c <IMX335_MirrorFlipConfig+0x30>)
3400870c:	e7f7      	b.n	340086fe <IMX335_MirrorFlipConfig+0x12>
3400870e:	bf00      	nop
34008710:	34031940 	.word	0x34031940
34008714:	34031968 	.word	0x34031968
34008718:	34031990 	.word	0x34031990
3400871c:	34031918 	.word	0x34031918

34008720 <IMX335_SetTestPattern>:
  *               10: Horizontal color bars
  *               11: Vertical color bars
  * @retval Component status
  */
int32_t IMX335_SetTestPattern(IMX335_Object_t *pObj, int32_t mode)
{
34008720:	b513      	push	{r0, r1, r4, lr}
  int32_t ret = IMX335_OK;
  uint8_t val;

  if (mode >= 0)
34008722:	2900      	cmp	r1, #0
{
34008724:	4604      	mov	r4, r0
  if (mode >= 0)
34008726:	db15      	blt.n	34008754 <IMX335_SetTestPattern+0x34>
  {
    /* Enable Test Pattern #mode */
    val = mode;
34008728:	f88d 1007 	strb.w	r1, [sp, #7]
    if (imx335_write_reg(&pObj->Ctx, IMX335_REG_TPG, &val, 1) != IMX335_OK)
3400872c:	2301      	movs	r3, #1
3400872e:	f243 219e 	movw	r1, #12958	@ 0x329e
34008732:	f10d 0207 	add.w	r2, sp, #7
34008736:	3018      	adds	r0, #24
34008738:	f000 f81d 	bl	34008776 <imx335_write_reg>
3400873c:	b968      	cbnz	r0, 3400875a <IMX335_SetTestPattern+0x3a>
    {
      return IMX335_ERROR;
    }
    if (IMX335_WriteTable(pObj, test_pattern_enable_regs, ARRAY_SIZE(test_pattern_enable_regs)) != IMX335_OK)
3400873e:	2207      	movs	r2, #7
34008740:	4620      	mov	r0, r4
34008742:	4907      	ldr	r1, [pc, #28]	@ (34008760 <IMX335_SetTestPattern+0x40>)
    }
  }
  else
  {
    /* Disable Test Pattern */
    if (IMX335_WriteTable(pObj, test_pattern_disable_regs, ARRAY_SIZE(test_pattern_disable_regs)) != IMX335_OK)
34008744:	f7ff fe64 	bl	34008410 <IMX335_WriteTable>
34008748:	3800      	subs	r0, #0
3400874a:	bf18      	it	ne
3400874c:	2001      	movne	r0, #1
3400874e:	4240      	negs	r0, r0
      return IMX335_ERROR;
    }
  }

  return ret;
}
34008750:	b002      	add	sp, #8
34008752:	bd10      	pop	{r4, pc}
    if (IMX335_WriteTable(pObj, test_pattern_disable_regs, ARRAY_SIZE(test_pattern_disable_regs)) != IMX335_OK)
34008754:	2207      	movs	r2, #7
34008756:	4903      	ldr	r1, [pc, #12]	@ (34008764 <IMX335_SetTestPattern+0x44>)
34008758:	e7f4      	b.n	34008744 <IMX335_SetTestPattern+0x24>
      return IMX335_ERROR;
3400875a:	f04f 30ff 	mov.w	r0, #4294967295
3400875e:	e7f7      	b.n	34008750 <IMX335_SetTestPattern+0x30>
34008760:	340318fc 	.word	0x340318fc
34008764:	340318e0 	.word	0x340318e0

34008768 <imx335_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t imx335_read_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
34008768:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
3400876a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
3400876e:	46a4      	mov	ip, r4
}
34008770:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
34008774:	4760      	bx	ip

34008776 <imx335_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t imx335_write_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
34008776:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
34008778:	6804      	ldr	r4, [r0, #0]
3400877a:	6880      	ldr	r0, [r0, #8]
3400877c:	46a4      	mov	ip, r4
}
3400877e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
34008782:	4760      	bx	ip

34008784 <VD55G1_log_impl>:
    return NULL;
  }
}

static void VD55G1_log_impl(VD55G1_Ctx_t *ctx, int lvl, const char *format, ...)
{
34008784:	b40c      	push	{r2, r3}
34008786:	b513      	push	{r0, r1, r4, lr}
  va_list ap;

  if (!ctx->log)
34008788:	6a44      	ldr	r4, [r0, #36]	@ 0x24
3400878a:	b11c      	cbz	r4, 34008794 <VD55G1_log_impl+0x10>
    return ;

  va_start(ap, format);
3400878c:	ab05      	add	r3, sp, #20
  ctx->log(ctx, lvl, format, ap);
3400878e:	9a04      	ldr	r2, [sp, #16]
  va_start(ap, format);
34008790:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, lvl, format, ap);
34008792:	47a0      	blx	r4
  va_end(ap);
}
34008794:	b002      	add	sp, #8
34008796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400879a:	b002      	add	sp, #8
3400879c:	4770      	bx	lr
	...

340087a0 <VD55G1_PollReg8>:

  return 0;
}

static int VD55G1_PollReg8(VD55G1_Ctx_t *ctx, uint16_t addr, uint8_t poll_val)
{
340087a0:	b5f0      	push	{r4, r5, r6, r7, lr}
340087a2:	4604      	mov	r4, r0
340087a4:	460e      	mov	r6, r1
340087a6:	4617      	mov	r7, r2
340087a8:	2531      	movs	r5, #49	@ 0x31
340087aa:	b085      	sub	sp, #20
  int loop_nb = timeout_ms / loop_delay_ms;
  uint8_t val;
  int ret;

  while (--loop_nb) {
    ret = ctx->read8(ctx, addr, &val);
340087ac:	4631      	mov	r1, r6
340087ae:	4620      	mov	r0, r4
340087b0:	6863      	ldr	r3, [r4, #4]
340087b2:	f10d 020f 	add.w	r2, sp, #15
340087b6:	4798      	blx	r3
    if (ret < 0)
340087b8:	2800      	cmp	r0, #0
340087ba:	db17      	blt.n	340087ec <VD55G1_PollReg8+0x4c>
      return ret;
    if (val == poll_val)
340087bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
340087c0:	42bb      	cmp	r3, r7
340087c2:	d015      	beq.n	340087f0 <VD55G1_PollReg8+0x50>
      return 0;
    ctx->delay(ctx, loop_delay_ms);
340087c4:	210a      	movs	r1, #10
340087c6:	4620      	mov	r0, r4
340087c8:	6a23      	ldr	r3, [r4, #32]
340087ca:	4798      	blx	r3
  while (--loop_nb) {
340087cc:	3d01      	subs	r5, #1
340087ce:	d1ed      	bne.n	340087ac <VD55G1_PollReg8+0xc>
  }

  VD55G1_dbg(ctx, 0, "current state %d\n", val);
340087d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
340087d4:	4620      	mov	r0, r4
340087d6:	9301      	str	r3, [sp, #4]
340087d8:	f240 132b 	movw	r3, #299	@ 0x12b
340087dc:	2103      	movs	r1, #3
340087de:	9300      	str	r3, [sp, #0]
340087e0:	4a04      	ldr	r2, [pc, #16]	@ (340087f4 <VD55G1_PollReg8+0x54>)
340087e2:	462b      	mov	r3, r5
340087e4:	f7ff ffce 	bl	34008784 <VD55G1_log_impl>

  return -1;
340087e8:	f04f 30ff 	mov.w	r0, #4294967295
}
340087ec:	b005      	add	sp, #20
340087ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return 0;
340087f0:	2000      	movs	r0, #0
340087f2:	e7fb      	b.n	340087ec <VD55G1_PollReg8+0x4c>
340087f4:	3402c444 	.word	0x3402c444

340087f8 <VD55G1_WaitState>:

  return state == VD55G1_SYSTEM_FSM_STREAMING;
}

static int VD55G1_WaitState(VD55G1_Ctx_t *ctx, int state)
{
340087f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int ret = VD55G1_PollReg8(ctx, VD55G1_REG_SYSTEM_FSM, state);
340087fa:	b2ca      	uxtb	r2, r1
{
340087fc:	460d      	mov	r5, r1
  int ret = VD55G1_PollReg8(ctx, VD55G1_REG_SYSTEM_FSM, state);
340087fe:	211c      	movs	r1, #28
{
34008800:	4606      	mov	r6, r0
  int ret = VD55G1_PollReg8(ctx, VD55G1_REG_SYSTEM_FSM, state);
34008802:	f7ff ffcd 	bl	340087a0 <VD55G1_PollReg8>

  if (ret)
34008806:	4604      	mov	r4, r0
34008808:	b150      	cbz	r0, 34008820 <VD55G1_WaitState+0x28>
    VD55G1_warn(ctx, "Unable to reach state %d\n", state);
3400880a:	f240 1341 	movw	r3, #321	@ 0x141
3400880e:	2101      	movs	r1, #1
34008810:	4630      	mov	r0, r6
34008812:	4a09      	ldr	r2, [pc, #36]	@ (34008838 <VD55G1_WaitState+0x40>)
34008814:	9500      	str	r5, [sp, #0]
34008816:	f7ff ffb5 	bl	34008784 <VD55G1_log_impl>
  else
    VD55G1_dbg(ctx, 0, "reach state %d\n", state);

  return ret;
}
3400881a:	4620      	mov	r0, r4
3400881c:	b002      	add	sp, #8
3400881e:	bd70      	pop	{r4, r5, r6, pc}
    VD55G1_dbg(ctx, 0, "reach state %d\n", state);
34008820:	f240 1343 	movw	r3, #323	@ 0x143
34008824:	2103      	movs	r1, #3
34008826:	9300      	str	r3, [sp, #0]
34008828:	4a04      	ldr	r2, [pc, #16]	@ (3400883c <VD55G1_WaitState+0x44>)
3400882a:	4603      	mov	r3, r0
3400882c:	9501      	str	r5, [sp, #4]
3400882e:	4630      	mov	r0, r6
34008830:	f7ff ffa8 	bl	34008784 <VD55G1_log_impl>
  return ret;
34008834:	e7f1      	b.n	3400881a <VD55G1_WaitState+0x22>
34008836:	bf00      	nop
34008838:	3402c467 	.word	0x3402c467
3400883c:	3402c491 	.word	0x3402c491

34008840 <display_error>:
{
34008840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ret = ctx->read16(ctx, VD55G1_ERROR_CODE, &reg16);
34008842:	2110      	movs	r1, #16
34008844:	6883      	ldr	r3, [r0, #8]
34008846:	f10d 020e 	add.w	r2, sp, #14
{
3400884a:	4604      	mov	r4, r0
  ret = ctx->read16(ctx, VD55G1_ERROR_CODE, &reg16);
3400884c:	4798      	blx	r3
  assert(ret == 0);
3400884e:	4601      	mov	r1, r0
34008850:	b128      	cbz	r0, 3400885e <display_error+0x1e>
34008852:	21fc      	movs	r1, #252	@ 0xfc
34008854:	4b07      	ldr	r3, [pc, #28]	@ (34008874 <display_error+0x34>)
34008856:	4a08      	ldr	r2, [pc, #32]	@ (34008878 <display_error+0x38>)
34008858:	4808      	ldr	r0, [pc, #32]	@ (3400887c <display_error+0x3c>)
3400885a:	f017 f8d5 	bl	3401fa08 <__assert_func>
  VD55G1_error(ctx, "ERROR_CODE : 0x%04x\n", reg16);
3400885e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
34008862:	4620      	mov	r0, r4
34008864:	9300      	str	r3, [sp, #0]
34008866:	4a06      	ldr	r2, [pc, #24]	@ (34008880 <display_error+0x40>)
34008868:	23fd      	movs	r3, #253	@ 0xfd
3400886a:	f7ff ff8b 	bl	34008784 <VD55G1_log_impl>
}
3400886e:	b004      	add	sp, #16
34008870:	bd10      	pop	{r4, pc}
34008872:	bf00      	nop
34008874:	3402c4b2 	.word	0x3402c4b2
34008878:	34031d2b 	.word	0x34031d2b
3400887c:	3402c4bb 	.word	0x3402c4bb
34008880:	3402c518 	.word	0x3402c518

34008884 <VD55G1_ApplyPatchCommon>:
  return 0;
}

static int VD55G1_ApplyPatchCommon(VD55G1_Ctx_t *ctx, uint8_t *patch_array, int patch_len, uint8_t patch_major,
                                   uint8_t patch_minor)
{
34008884:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t reg16;
  int ret;

  ret = ctx->write_array(ctx, VD55G1_REG_FWPATCH_START_ADDR, patch_array, patch_len);
34008886:	69c4      	ldr	r4, [r0, #28]
{
34008888:	b087      	sub	sp, #28
3400888a:	461e      	mov	r6, r3
  ret = ctx->write_array(ctx, VD55G1_REG_FWPATCH_START_ADDR, patch_array, patch_len);
3400888c:	4613      	mov	r3, r2
3400888e:	460a      	mov	r2, r1
34008890:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
34008894:	4605      	mov	r5, r0
34008896:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
  ret = ctx->write_array(ctx, VD55G1_REG_FWPATCH_START_ADDR, patch_array, patch_len);
3400889a:	47a0      	blx	r4
  VD55G1_TraceError(ctx, ret);
3400889c:	4604      	mov	r4, r0
3400889e:	b958      	cbnz	r0, 340088b8 <VD55G1_ApplyPatchCommon+0x34>

  ret = ctx->write8(ctx, VD55G1_REG_BOOT, VD55G1_BOOT_PATCH_AND_BOOT);
340088a0:	2202      	movs	r2, #2
340088a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
340088a6:	4628      	mov	r0, r5
340088a8:	692b      	ldr	r3, [r5, #16]
340088aa:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340088ac:	4604      	mov	r4, r0
340088ae:	b190      	cbz	r0, 340088d6 <VD55G1_ApplyPatchCommon+0x52>
340088b0:	f240 1377 	movw	r3, #375	@ 0x177
340088b4:	9002      	str	r0, [sp, #8]
340088b6:	e002      	b.n	340088be <VD55G1_ApplyPatchCommon+0x3a>
  VD55G1_TraceError(ctx, ret);
340088b8:	f44f 73ba 	mov.w	r3, #372	@ 0x174
340088bc:	9002      	str	r0, [sp, #8]
    return -1;
  }
  VD55G1_notice(ctx, "patch %d.%d applied\n", reg16 >> 8, reg16 & 0xff);

  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
  VD55G1_TraceError(ctx, ret);
340088be:	4a32      	ldr	r2, [pc, #200]	@ (34008988 <VD55G1_ApplyPatchCommon+0x104>)
340088c0:	4628      	mov	r0, r5
340088c2:	9200      	str	r2, [sp, #0]
340088c4:	2100      	movs	r1, #0
340088c6:	4a31      	ldr	r2, [pc, #196]	@ (3400898c <VD55G1_ApplyPatchCommon+0x108>)
340088c8:	9301      	str	r3, [sp, #4]
340088ca:	f7ff ff5b 	bl	34008784 <VD55G1_log_impl>
340088ce:	4628      	mov	r0, r5
340088d0:	f7ff ffb6 	bl	34008840 <display_error>
340088d4:	e039      	b.n	3400894a <VD55G1_ApplyPatchCommon+0xc6>
  ret = VD55G1_PollReg8(ctx, VD55G1_REG_BOOT, VD55G1_CMD_ACK);
340088d6:	4602      	mov	r2, r0
340088d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
340088dc:	4628      	mov	r0, r5
340088de:	f7ff ff5f 	bl	340087a0 <VD55G1_PollReg8>
  VD55G1_TraceError(ctx, ret);
340088e2:	4604      	mov	r4, r0
340088e4:	b118      	cbz	r0, 340088ee <VD55G1_ApplyPatchCommon+0x6a>
340088e6:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
340088ea:	9002      	str	r0, [sp, #8]
340088ec:	e7e7      	b.n	340088be <VD55G1_ApplyPatchCommon+0x3a>
  ret = ctx->read16(ctx, VD55G1_REG_FWPATCH_REVISION, &reg16);
340088ee:	2112      	movs	r1, #18
340088f0:	4628      	mov	r0, r5
340088f2:	68ab      	ldr	r3, [r5, #8]
340088f4:	f10d 0216 	add.w	r2, sp, #22
340088f8:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340088fa:	4604      	mov	r4, r0
340088fc:	b118      	cbz	r0, 34008906 <VD55G1_ApplyPatchCommon+0x82>
340088fe:	f240 137d 	movw	r3, #381	@ 0x17d
34008902:	9002      	str	r0, [sp, #8]
34008904:	e7db      	b.n	340088be <VD55G1_ApplyPatchCommon+0x3a>
  VD55G1_dbg(ctx, 0, "patch = 0x%04x\n", reg16);
34008906:	f8bd 3016 	ldrh.w	r3, [sp, #22]
3400890a:	4a21      	ldr	r2, [pc, #132]	@ (34008990 <VD55G1_ApplyPatchCommon+0x10c>)
3400890c:	9301      	str	r3, [sp, #4]
3400890e:	f44f 73bf 	mov.w	r3, #382	@ 0x17e
34008912:	2103      	movs	r1, #3
34008914:	9300      	str	r3, [sp, #0]
34008916:	4603      	mov	r3, r0
34008918:	4628      	mov	r0, r5
3400891a:	f7ff ff33 	bl	34008784 <VD55G1_log_impl>
  if (reg16 != (patch_major << 8) + patch_minor) {
3400891e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
34008922:	eb07 2306 	add.w	r3, r7, r6, lsl #8
34008926:	429a      	cmp	r2, r3
34008928:	b2d3      	uxtb	r3, r2
3400892a:	ea4f 2212 	mov.w	r2, r2, lsr #8
3400892e:	d00f      	beq.n	34008950 <VD55G1_ApplyPatchCommon+0xcc>
    VD55G1_error(ctx, "bad patch version expected %d.%d got %d.%d\n", patch_major, patch_minor, reg16 >> 8, reg16 & 0xff);
34008930:	e9cd 2302 	strd	r2, r3, [sp, #8]
34008934:	4621      	mov	r1, r4
34008936:	f240 1381 	movw	r3, #385	@ 0x181
3400893a:	4628      	mov	r0, r5
3400893c:	e9cd 6700 	strd	r6, r7, [sp]
34008940:	4a14      	ldr	r2, [pc, #80]	@ (34008994 <VD55G1_ApplyPatchCommon+0x110>)
34008942:	f7ff ff1f 	bl	34008784 <VD55G1_log_impl>
    return -1;
34008946:	f04f 34ff 	mov.w	r4, #4294967295

  VD55G1_notice(ctx, "sensor boot successfully\n");

  return 0;
}
3400894a:	4620      	mov	r0, r4
3400894c:	b007      	add	sp, #28
3400894e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  VD55G1_notice(ctx, "patch %d.%d applied\n", reg16 >> 8, reg16 & 0xff);
34008950:	e9cd 2300 	strd	r2, r3, [sp]
34008954:	2102      	movs	r1, #2
34008956:	f44f 73c2 	mov.w	r3, #388	@ 0x184
3400895a:	4628      	mov	r0, r5
3400895c:	4a0e      	ldr	r2, [pc, #56]	@ (34008998 <VD55G1_ApplyPatchCommon+0x114>)
3400895e:	f7ff ff11 	bl	34008784 <VD55G1_log_impl>
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
34008962:	2102      	movs	r1, #2
34008964:	4628      	mov	r0, r5
34008966:	f7ff ff47 	bl	340087f8 <VD55G1_WaitState>
  VD55G1_TraceError(ctx, ret);
3400896a:	4604      	mov	r4, r0
3400896c:	b938      	cbnz	r0, 3400897e <VD55G1_ApplyPatchCommon+0xfa>
  VD55G1_notice(ctx, "sensor boot successfully\n");
3400896e:	f240 1389 	movw	r3, #393	@ 0x189
34008972:	2102      	movs	r1, #2
34008974:	4628      	mov	r0, r5
34008976:	4a09      	ldr	r2, [pc, #36]	@ (3400899c <VD55G1_ApplyPatchCommon+0x118>)
34008978:	f7ff ff04 	bl	34008784 <VD55G1_log_impl>
  return 0;
3400897c:	e7e5      	b.n	3400894a <VD55G1_ApplyPatchCommon+0xc6>
  VD55G1_TraceError(ctx, ret);
3400897e:	f240 1387 	movw	r3, #391	@ 0x187
34008982:	9002      	str	r0, [sp, #8]
34008984:	e79b      	b.n	340088be <VD55G1_ApplyPatchCommon+0x3a>
34008986:	bf00      	nop
34008988:	34031d01 	.word	0x34031d01
3400898c:	3402c53d 	.word	0x3402c53d
34008990:	3402c562 	.word	0x3402c562
34008994:	3402c583 	.word	0x3402c583
34008998:	3402c5bf 	.word	0x3402c5bf
3400899c:	3402c5e4 	.word	0x3402c5e4

340089a0 <VD55G1_ComputeFrameLength>:

  return 0;
}

static int VD55G1_ComputeFrameLength(VD55G1_Ctx_t *ctx, int fps, uint16_t *frame_length)
{
340089a0:	b5f0      	push	{r4, r5, r6, r7, lr}
340089a2:	b089      	sub	sp, #36	@ 0x24
340089a4:	460e      	mov	r6, r1
340089a6:	4617      	mov	r7, r2
  int req_frame_length;
  uint16_t line_length;
  uint16_t height;
  int ret;

  ret = ctx->read16(ctx, VD55G1_REG_LINE_LENGTH, &line_length);
340089a8:	f44f 7140 	mov.w	r1, #768	@ 0x300
340089ac:	6883      	ldr	r3, [r0, #8]
340089ae:	aa07      	add	r2, sp, #28
{
340089b0:	4604      	mov	r4, r0
  ret = ctx->read16(ctx, VD55G1_REG_LINE_LENGTH, &line_length);
340089b2:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340089b4:	4605      	mov	r5, r0
340089b6:	b960      	cbnz	r0, 340089d2 <VD55G1_ComputeFrameLength+0x32>

  ret = ctx->read16(ctx, VD55G1_REG_Y_HEIGHT, &height);
340089b8:	f240 5112 	movw	r1, #1298	@ 0x512
340089bc:	4620      	mov	r0, r4
340089be:	68a3      	ldr	r3, [r4, #8]
340089c0:	f10d 021e 	add.w	r2, sp, #30
340089c4:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340089c6:	4605      	mov	r5, r0
340089c8:	b190      	cbz	r0, 340089f0 <VD55G1_ComputeFrameLength+0x50>
340089ca:	f44f 7316 	mov.w	r3, #600	@ 0x258
340089ce:	9002      	str	r0, [sp, #8]
340089d0:	e002      	b.n	340089d8 <VD55G1_ComputeFrameLength+0x38>
  VD55G1_TraceError(ctx, ret);
340089d2:	f240 2355 	movw	r3, #597	@ 0x255
340089d6:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
340089d8:	4a17      	ldr	r2, [pc, #92]	@ (34008a38 <VD55G1_ComputeFrameLength+0x98>)
340089da:	4620      	mov	r0, r4
340089dc:	9200      	str	r2, [sp, #0]
340089de:	2100      	movs	r1, #0
340089e0:	4a16      	ldr	r2, [pc, #88]	@ (34008a3c <VD55G1_ComputeFrameLength+0x9c>)
340089e2:	9301      	str	r3, [sp, #4]
340089e4:	f7ff fece 	bl	34008784 <VD55G1_log_impl>
340089e8:	4620      	mov	r0, r4
340089ea:	f7ff ff29 	bl	34008840 <display_error>
340089ee:	e01f      	b.n	34008a30 <VD55G1_ComputeFrameLength+0x90>

  min_frame_length = height + VD55G1_MIN_VBLANK;
  req_frame_length = drv_ctx->pclk / (line_length * fps);
340089f0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
340089f4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
340089f6:	4372      	muls	r2, r6
340089f8:	fbb0 f0f2 	udiv	r0, r0, r2
  min_frame_length = height + VD55G1_MIN_VBLANK;
340089fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  *frame_length = MIN(MAX(min_frame_length, req_frame_length), 65535);
34008a00:	f64f 71ff 	movw	r1, #65535	@ 0xffff
  min_frame_length = height + VD55G1_MIN_VBLANK;
34008a04:	3356      	adds	r3, #86	@ 0x56
  *frame_length = MIN(MAX(min_frame_length, req_frame_length), 65535);
34008a06:	4283      	cmp	r3, r0
34008a08:	461a      	mov	r2, r3
34008a0a:	bfb8      	it	lt
34008a0c:	4602      	movlt	r2, r0
34008a0e:	428a      	cmp	r2, r1
34008a10:	bfa8      	it	ge
34008a12:	460a      	movge	r2, r1
34008a14:	803a      	strh	r2, [r7, #0]

  VD55G1_dbg(ctx, 1, "frame_length to MAX(%d, %d) = %d to reach %d fps\n", min_frame_length, req_frame_length,
34008a16:	e9cd 3001 	strd	r3, r0, [sp, #4]
34008a1a:	f240 235e 	movw	r3, #606	@ 0x25e
34008a1e:	e9cd 2603 	strd	r2, r6, [sp, #12]
34008a22:	9300      	str	r3, [sp, #0]
34008a24:	2104      	movs	r1, #4
34008a26:	2301      	movs	r3, #1
34008a28:	4620      	mov	r0, r4
34008a2a:	4a05      	ldr	r2, [pc, #20]	@ (34008a40 <VD55G1_ComputeFrameLength+0xa0>)
34008a2c:	f7ff feaa 	bl	34008784 <VD55G1_log_impl>
             *frame_length, fps);

  return 0;
}
34008a30:	4628      	mov	r0, r5
34008a32:	b009      	add	sp, #36	@ 0x24
34008a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
34008a36:	bf00      	nop
34008a38:	34031c6c 	.word	0x34031c6c
34008a3c:	3402c53d 	.word	0x3402c53d
34008a40:	3402c60e 	.word	0x3402c60e

34008a44 <VD55G1_SetFlicker>:

  return 0;
}

static int VD55G1_SetFlicker(VD55G1_Ctx_t *ctx, VD55G1_Flicker_t flicker)
{
34008a44:	b530      	push	{r4, r5, lr}
34008a46:	2902      	cmp	r1, #2
34008a48:	4605      	mov	r5, r0
34008a4a:	b085      	sub	sp, #20
34008a4c:	d818      	bhi.n	34008a80 <VD55G1_SetFlicker+0x3c>
    break;
  default:
    return -1;
  }

  ret = ctx->write16(ctx, VD55G1_REG_EXPOSURE_COMPILER_CONTROL_A, mode);
34008a4e:	4a0e      	ldr	r2, [pc, #56]	@ (34008a88 <VD55G1_SetFlicker+0x44>)
34008a50:	6943      	ldr	r3, [r0, #20]
34008a52:	5c52      	ldrb	r2, [r2, r1]
34008a54:	f240 4182 	movw	r1, #1154	@ 0x482
34008a58:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008a5a:	4604      	mov	r4, r0
34008a5c:	b168      	cbz	r0, 34008a7a <VD55G1_SetFlicker+0x36>
34008a5e:	f240 23ed 	movw	r3, #749	@ 0x2ed
34008a62:	4a0a      	ldr	r2, [pc, #40]	@ (34008a8c <VD55G1_SetFlicker+0x48>)
34008a64:	9002      	str	r0, [sp, #8]
34008a66:	9200      	str	r2, [sp, #0]
34008a68:	4628      	mov	r0, r5
34008a6a:	2100      	movs	r1, #0
34008a6c:	4a08      	ldr	r2, [pc, #32]	@ (34008a90 <VD55G1_SetFlicker+0x4c>)
34008a6e:	9301      	str	r3, [sp, #4]
34008a70:	f7ff fe88 	bl	34008784 <VD55G1_log_impl>
34008a74:	4628      	mov	r0, r5
34008a76:	f7ff fee3 	bl	34008840 <display_error>

  return 0;
}
34008a7a:	4620      	mov	r0, r4
34008a7c:	b005      	add	sp, #20
34008a7e:	bd30      	pop	{r4, r5, pc}
    return -1;
34008a80:	f04f 34ff 	mov.w	r4, #4294967295
34008a84:	e7f9      	b.n	34008a7a <VD55G1_SetFlicker+0x36>
34008a86:	bf00      	nop
34008a88:	34031bd0 	.word	0x34031bd0
34008a8c:	34031c1b 	.word	0x34031c1b
34008a90:	3402c53d 	.word	0x3402c53d

34008a94 <VD55G1_StopStreaming>:

  return 0;
}

static int VD55G1_StopStreaming(VD55G1_Ctx_t *ctx)
{
34008a94:	b530      	push	{r4, r5, lr}
  int ret;

  ret = ctx->write8(ctx, VD55G1_REG_STREAMING, VD55G1_STREAMING_STOP_STREAM);
34008a96:	2201      	movs	r2, #1
34008a98:	f240 2102 	movw	r1, #514	@ 0x202
34008a9c:	6903      	ldr	r3, [r0, #16]
{
34008a9e:	b085      	sub	sp, #20
34008aa0:	4605      	mov	r5, r0
  ret = ctx->write8(ctx, VD55G1_REG_STREAMING, VD55G1_STREAMING_STOP_STREAM);
34008aa2:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008aa4:	4604      	mov	r4, r0
34008aa6:	b958      	cbnz	r0, 34008ac0 <VD55G1_StopStreaming+0x2c>

  ret = VD55G1_PollReg8(ctx, VD55G1_REG_STREAMING, VD55G1_CMD_ACK);
34008aa8:	4602      	mov	r2, r0
34008aaa:	f240 2102 	movw	r1, #514	@ 0x202
34008aae:	4628      	mov	r0, r5
34008ab0:	f7ff fe76 	bl	340087a0 <VD55G1_PollReg8>
  VD55G1_TraceError(ctx, ret);
34008ab4:	4604      	mov	r4, r0
34008ab6:	b190      	cbz	r0, 34008ade <VD55G1_StopStreaming+0x4a>
34008ab8:	f240 3332 	movw	r3, #818	@ 0x332
34008abc:	9002      	str	r0, [sp, #8]
34008abe:	e002      	b.n	34008ac6 <VD55G1_StopStreaming+0x32>
  VD55G1_TraceError(ctx, ret);
34008ac0:	f240 332f 	movw	r3, #815	@ 0x32f
34008ac4:	9002      	str	r0, [sp, #8]

  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
  VD55G1_TraceError(ctx, ret);
34008ac6:	4a10      	ldr	r2, [pc, #64]	@ (34008b08 <VD55G1_StopStreaming+0x74>)
34008ac8:	4628      	mov	r0, r5
34008aca:	9200      	str	r2, [sp, #0]
34008acc:	2100      	movs	r1, #0
34008ace:	4a0f      	ldr	r2, [pc, #60]	@ (34008b0c <VD55G1_StopStreaming+0x78>)
34008ad0:	9301      	str	r3, [sp, #4]
34008ad2:	f7ff fe57 	bl	34008784 <VD55G1_log_impl>
34008ad6:	4628      	mov	r0, r5
34008ad8:	f7ff feb2 	bl	34008840 <display_error>
34008adc:	e010      	b.n	34008b00 <VD55G1_StopStreaming+0x6c>
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
34008ade:	2102      	movs	r1, #2
34008ae0:	4628      	mov	r0, r5
34008ae2:	f7ff fe89 	bl	340087f8 <VD55G1_WaitState>
  VD55G1_TraceError(ctx, ret);
34008ae6:	4604      	mov	r4, r0
34008ae8:	b118      	cbz	r0, 34008af2 <VD55G1_StopStreaming+0x5e>
34008aea:	f240 3335 	movw	r3, #821	@ 0x335
34008aee:	9002      	str	r0, [sp, #8]
34008af0:	e7e9      	b.n	34008ac6 <VD55G1_StopStreaming+0x32>

  VD55G1_notice(ctx, "Streaming is off\n");
34008af2:	f240 3337 	movw	r3, #823	@ 0x337
34008af6:	2102      	movs	r1, #2
34008af8:	4628      	mov	r0, r5
34008afa:	4a05      	ldr	r2, [pc, #20]	@ (34008b10 <VD55G1_StopStreaming+0x7c>)
34008afc:	f7ff fe42 	bl	34008784 <VD55G1_log_impl>

  return 0;
}
34008b00:	4620      	mov	r0, r4
34008b02:	b005      	add	sp, #20
34008b04:	bd30      	pop	{r4, r5, pc}
34008b06:	bf00      	nop
34008b08:	34031bf0 	.word	0x34031bf0
34008b0c:	3402c53d 	.word	0x3402c53d
34008b10:	3402c651 	.word	0x3402c651

34008b14 <VD55G1_Init>:

  return VD55G1_StartAWU(ctx);
}

int VD55G1_Init(VD55G1_Ctx_t *ctx, VD55G1_Config_t *config)
{
34008b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  VD55G1_AWUConfig_t *awu = &config->awu;
  struct drv_ctx *drv_ctx = &ctx->ctx;
  int ret;

  if (config->frame_rate < VD55G1_MIN_FPS)
34008b18:	688b      	ldr	r3, [r1, #8]
{
34008b1a:	4605      	mov	r5, r0
  if (config->frame_rate < VD55G1_MIN_FPS)
34008b1c:	3b02      	subs	r3, #2
34008b1e:	2ba6      	cmp	r3, #166	@ 0xa6
{
34008b20:	460c      	mov	r4, r1
34008b22:	b086      	sub	sp, #24
  if (config->frame_rate < VD55G1_MIN_FPS)
34008b24:	d802      	bhi.n	34008b2c <VD55G1_Init+0x18>
    return -1;
  if (config->frame_rate > VD55G1_MAX_FPS)
    return -1;

  if ((config->resolution != VD55G1_RES_QVGA_320_240) &&
34008b26:	790b      	ldrb	r3, [r1, #4]
34008b28:	2b03      	cmp	r3, #3
34008b2a:	d905      	bls.n	34008b38 <VD55G1_Init+0x24>
    return -1;
34008b2c:	f04f 34ff 	mov.w	r4, #4294967295
    return ret;

  drv_ctx->state = VD55G1_ST_IDLE;

  return 0;
}
34008b30:	4620      	mov	r0, r4
34008b32:	b006      	add	sp, #24
34008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (awu->is_enable && awu->threshold != VD55G1_AWU_THRESHOLD_DEFAULT) {
34008b38:	69cb      	ldr	r3, [r1, #28]
34008b3a:	b123      	cbz	r3, 34008b46 <VD55G1_Init+0x32>
34008b3c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
34008b3e:	b113      	cbz	r3, 34008b46 <VD55G1_Init+0x32>
    if (awu->threshold < VD55G1_AWU_THRESHOLD_MIN)
34008b40:	3b02      	subs	r3, #2
34008b42:	2b7e      	cmp	r3, #126	@ 0x7e
34008b44:	d8f2      	bhi.n	34008b2c <VD55G1_Init+0x18>
  drv_ctx->config_save = *config;
34008b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008b48:	f105 0634 	add.w	r6, r5, #52	@ 0x34
34008b4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008b50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008b54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008b56:	6823      	ldr	r3, [r4, #0]
  ctx->shutdown_pin(ctx, 0);
34008b58:	2100      	movs	r1, #0
34008b5a:	4628      	mov	r0, r5
  drv_ctx->config_save = *config;
34008b5c:	6033      	str	r3, [r6, #0]
  ctx->shutdown_pin(ctx, 0);
34008b5e:	682b      	ldr	r3, [r5, #0]
34008b60:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008b62:	210a      	movs	r1, #10
34008b64:	4628      	mov	r0, r5
34008b66:	6a2b      	ldr	r3, [r5, #32]
34008b68:	4798      	blx	r3
  ctx->shutdown_pin(ctx, 1);
34008b6a:	2101      	movs	r1, #1
34008b6c:	4628      	mov	r0, r5
34008b6e:	682b      	ldr	r3, [r5, #0]
34008b70:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008b72:	210a      	movs	r1, #10
34008b74:	4628      	mov	r0, r5
34008b76:	6a2b      	ldr	r3, [r5, #32]
34008b78:	4798      	blx	r3
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_READY_TO_BOOT);
34008b7a:	2101      	movs	r1, #1
34008b7c:	4628      	mov	r0, r5
34008b7e:	f7ff fe3b 	bl	340087f8 <VD55G1_WaitState>
  if (ret)
34008b82:	4604      	mov	r4, r0
34008b84:	2800      	cmp	r0, #0
34008b86:	d1d3      	bne.n	34008b30 <VD55G1_Init+0x1c>
  ret = ctx->read32(ctx, VD55G1_REG_MODEL_ID, &reg32);
34008b88:	4601      	mov	r1, r0
34008b8a:	68eb      	ldr	r3, [r5, #12]
34008b8c:	4628      	mov	r0, r5
34008b8e:	aa05      	add	r2, sp, #20
34008b90:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008b92:	4604      	mov	r4, r0
34008b94:	b9c0      	cbnz	r0, 34008bc8 <VD55G1_Init+0xb4>
  VD55G1_dbg(ctx, 0, "model_id = 0x%04x\n", reg32);
34008b96:	9b05      	ldr	r3, [sp, #20]
34008b98:	4a52      	ldr	r2, [pc, #328]	@ (34008ce4 <VD55G1_Init+0x1d0>)
34008b9a:	9301      	str	r3, [sp, #4]
34008b9c:	f240 1351 	movw	r3, #337	@ 0x151
34008ba0:	2103      	movs	r1, #3
34008ba2:	9300      	str	r3, [sp, #0]
34008ba4:	4603      	mov	r3, r0
34008ba6:	4628      	mov	r0, r5
34008ba8:	f7ff fdec 	bl	34008784 <VD55G1_log_impl>
  if (reg32 != VD55G1_MODEL_ID) {
34008bac:	9a05      	ldr	r2, [sp, #20]
34008bae:	4b4e      	ldr	r3, [pc, #312]	@ (34008ce8 <VD55G1_Init+0x1d4>)
34008bb0:	429a      	cmp	r2, r3
34008bb2:	d018      	beq.n	34008be6 <VD55G1_Init+0xd2>
    VD55G1_error(ctx, "Bad model id expected 0x%04x / got 0x%04x\n", VD55G1_MODEL_ID, reg32);
34008bb4:	e9cd 3200 	strd	r3, r2, [sp]
34008bb8:	4621      	mov	r1, r4
34008bba:	f240 1353 	movw	r3, #339	@ 0x153
34008bbe:	4628      	mov	r0, r5
34008bc0:	4a4a      	ldr	r2, [pc, #296]	@ (34008cec <VD55G1_Init+0x1d8>)
34008bc2:	f7ff fddf 	bl	34008784 <VD55G1_log_impl>
  if (ret)
34008bc6:	e7b1      	b.n	34008b2c <VD55G1_Init+0x18>
  VD55G1_TraceError(ctx, ret);
34008bc8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
34008bcc:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008bce:	4a48      	ldr	r2, [pc, #288]	@ (34008cf0 <VD55G1_Init+0x1dc>)
34008bd0:	9301      	str	r3, [sp, #4]
    VD55G1_TraceError(ctx, ret);
34008bd2:	4628      	mov	r0, r5
34008bd4:	9200      	str	r2, [sp, #0]
34008bd6:	2100      	movs	r1, #0
34008bd8:	4a46      	ldr	r2, [pc, #280]	@ (34008cf4 <VD55G1_Init+0x1e0>)
34008bda:	f7ff fdd3 	bl	34008784 <VD55G1_log_impl>
34008bde:	4628      	mov	r0, r5
34008be0:	f7ff fe2e 	bl	34008840 <display_error>
  if (ret)
34008be4:	e7a4      	b.n	34008b30 <VD55G1_Init+0x1c>
  ret = ctx->read16(ctx, VD55G1_REG_REVISION, &reg16);
34008be6:	2104      	movs	r1, #4
34008be8:	4628      	mov	r0, r5
34008bea:	68ab      	ldr	r3, [r5, #8]
34008bec:	f10d 0212 	add.w	r2, sp, #18
34008bf0:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008bf2:	4604      	mov	r4, r0
34008bf4:	b9f0      	cbnz	r0, 34008c34 <VD55G1_Init+0x120>
  VD55G1_dbg(ctx, 0, "revision = 0x%04x\n", reg16);
34008bf6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
34008bfa:	4a3f      	ldr	r2, [pc, #252]	@ (34008cf8 <VD55G1_Init+0x1e4>)
34008bfc:	9301      	str	r3, [sp, #4]
34008bfe:	f240 1359 	movw	r3, #345	@ 0x159
34008c02:	2103      	movs	r1, #3
34008c04:	9300      	str	r3, [sp, #0]
34008c06:	4603      	mov	r3, r0
34008c08:	4628      	mov	r0, r5
34008c0a:	f7ff fdbb 	bl	34008784 <VD55G1_log_impl>
  switch (reg16) {
34008c0e:	f241 0210 	movw	r2, #4112	@ 0x1010
34008c12:	f8bd 3012 	ldrh.w	r3, [sp, #18]
34008c16:	4293      	cmp	r3, r2
34008c18:	d010      	beq.n	34008c3c <VD55G1_Init+0x128>
34008c1a:	f242 0220 	movw	r2, #8224	@ 0x2020
34008c1e:	4293      	cmp	r3, r2
34008c20:	d00c      	beq.n	34008c3c <VD55G1_Init+0x128>
    VD55G1_error(ctx, "Unsupported revision0x%04x\n", reg16);
34008c22:	9300      	str	r3, [sp, #0]
34008c24:	4621      	mov	r1, r4
34008c26:	f44f 73b1 	mov.w	r3, #354	@ 0x162
34008c2a:	4628      	mov	r0, r5
34008c2c:	4a33      	ldr	r2, [pc, #204]	@ (34008cfc <VD55G1_Init+0x1e8>)
34008c2e:	f7ff fda9 	bl	34008784 <VD55G1_log_impl>
  if (ret)
34008c32:	e77b      	b.n	34008b2c <VD55G1_Init+0x18>
  VD55G1_TraceError(ctx, ret);
34008c34:	f44f 73ac 	mov.w	r3, #344	@ 0x158
34008c38:	9002      	str	r0, [sp, #8]
34008c3a:	e7c8      	b.n	34008bce <VD55G1_Init+0xba>
    drv_ctx->cut_version = VD55G1_REVISION_CUT_1;
34008c3c:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ret = ctx->read32(ctx, VD55G1_REG_ROM_REVISION, &reg32);
34008c3e:	2108      	movs	r1, #8
34008c40:	4628      	mov	r0, r5
34008c42:	68eb      	ldr	r3, [r5, #12]
34008c44:	aa05      	add	r2, sp, #20
34008c46:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008c48:	4604      	mov	r4, r0
34008c4a:	b9d0      	cbnz	r0, 34008c82 <VD55G1_Init+0x16e>
  VD55G1_dbg(ctx, 0, "rom = 0x%04x\n", reg32);
34008c4c:	9b05      	ldr	r3, [sp, #20]
34008c4e:	4a2c      	ldr	r2, [pc, #176]	@ (34008d00 <VD55G1_Init+0x1ec>)
34008c50:	9301      	str	r3, [sp, #4]
34008c52:	f44f 73b4 	mov.w	r3, #360	@ 0x168
34008c56:	2103      	movs	r1, #3
34008c58:	9300      	str	r3, [sp, #0]
34008c5a:	4603      	mov	r3, r0
34008c5c:	4628      	mov	r0, r5
34008c5e:	f7ff fd91 	bl	34008784 <VD55G1_log_impl>
  switch (drv_ctx->cut_version) {
34008c62:	f241 0210 	movw	r2, #4112	@ 0x1010
34008c66:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
34008c68:	4293      	cmp	r3, r2
34008c6a:	d00e      	beq.n	34008c8a <VD55G1_Init+0x176>
34008c6c:	f242 0220 	movw	r2, #8224	@ 0x2020
34008c70:	4293      	cmp	r3, r2
34008c72:	d02b      	beq.n	34008ccc <VD55G1_Init+0x1b8>
    assert(0);
34008c74:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
34008c78:	4b22      	ldr	r3, [pc, #136]	@ (34008d04 <VD55G1_Init+0x1f0>)
34008c7a:	4a23      	ldr	r2, [pc, #140]	@ (34008d08 <VD55G1_Init+0x1f4>)
34008c7c:	4823      	ldr	r0, [pc, #140]	@ (34008d0c <VD55G1_Init+0x1f8>)
34008c7e:	f016 fec3 	bl	3401fa08 <__assert_func>
  VD55G1_TraceError(ctx, ret);
34008c82:	f240 1367 	movw	r3, #359	@ 0x167
34008c86:	9002      	str	r0, [sp, #8]
34008c88:	e7a1      	b.n	34008bce <VD55G1_Init+0xba>
    return VD55G1_ApplyPatchCommon(ctx, (uint8_t *) patch_array_cut_1, sizeof(patch_array_cut_1),
34008c8a:	2316      	movs	r3, #22
34008c8c:	f241 22e4 	movw	r2, #4836	@ 0x12e4
34008c90:	9300      	str	r3, [sp, #0]
34008c92:	2301      	movs	r3, #1
34008c94:	491e      	ldr	r1, [pc, #120]	@ (34008d10 <VD55G1_Init+0x1fc>)
    return VD55G1_ApplyPatchCommon(ctx, (uint8_t *) patch_array_cut_2, sizeof(patch_array_cut_2),
34008c96:	4628      	mov	r0, r5
34008c98:	f7ff fdf4 	bl	34008884 <VD55G1_ApplyPatchCommon>
34008c9c:	4604      	mov	r4, r0
  if (ret)
34008c9e:	2800      	cmp	r0, #0
34008ca0:	f47f af46 	bne.w	34008b30 <VD55G1_Init+0x1c>
34008ca4:	f240 561d 	movw	r6, #1309	@ 0x51d
  for (i = 0 ; i < VD55G1_GPIO_NB; i++)
34008ca8:	f240 5821 	movw	r8, #1313	@ 0x521
34008cac:	f105 0763 	add.w	r7, r5, #99	@ 0x63
    ret = ctx->write8(ctx, VD55G1_REG_GPIO_x(i), drv_ctx->config_save.gpio_ctrl[i]);
34008cb0:	4631      	mov	r1, r6
34008cb2:	4628      	mov	r0, r5
34008cb4:	692b      	ldr	r3, [r5, #16]
34008cb6:	f817 2f01 	ldrb.w	r2, [r7, #1]!
34008cba:	4798      	blx	r3
    VD55G1_TraceError(ctx, ret);
34008cbc:	4604      	mov	r4, r0
34008cbe:	b158      	cbz	r0, 34008cd8 <VD55G1_Init+0x1c4>
34008cc0:	f240 13a9 	movw	r3, #425	@ 0x1a9
34008cc4:	4a13      	ldr	r2, [pc, #76]	@ (34008d14 <VD55G1_Init+0x200>)
34008cc6:	9002      	str	r0, [sp, #8]
34008cc8:	9301      	str	r3, [sp, #4]
34008cca:	e782      	b.n	34008bd2 <VD55G1_Init+0xbe>
    return VD55G1_ApplyPatchCommon(ctx, (uint8_t *) patch_array_cut_2, sizeof(patch_array_cut_2),
34008ccc:	2302      	movs	r3, #2
34008cce:	f44f 7272 	mov.w	r2, #968	@ 0x3c8
34008cd2:	4911      	ldr	r1, [pc, #68]	@ (34008d18 <VD55G1_Init+0x204>)
34008cd4:	9300      	str	r3, [sp, #0]
34008cd6:	e7de      	b.n	34008c96 <VD55G1_Init+0x182>
  for (i = 0 ; i < VD55G1_GPIO_NB; i++)
34008cd8:	3601      	adds	r6, #1
34008cda:	b2b6      	uxth	r6, r6
34008cdc:	4546      	cmp	r6, r8
34008cde:	d1e7      	bne.n	34008cb0 <VD55G1_Init+0x19c>
  drv_ctx->state = VD55G1_ST_IDLE;
34008ce0:	62a8      	str	r0, [r5, #40]	@ 0x28
  return 0;
34008ce2:	e725      	b.n	34008b30 <VD55G1_Init+0x1c>
34008ce4:	3402c673 	.word	0x3402c673
34008ce8:	53354731 	.word	0x53354731
34008cec:	3402c697 	.word	0x3402c697
34008cf0:	34031d39 	.word	0x34031d39
34008cf4:	3402c53d 	.word	0x3402c53d
34008cf8:	3402c6d2 	.word	0x3402c6d2
34008cfc:	3402c6f6 	.word	0x3402c6f6
34008d00:	3402c722 	.word	0x3402c722
34008d04:	3402b7cd 	.word	0x3402b7cd
34008d08:	34031d19 	.word	0x34031d19
34008d0c:	3402c4bb 	.word	0x3402c4bb
34008d10:	34032188 	.word	0x34032188
34008d14:	34031cf4 	.word	0x34031cf4
34008d18:	34031dc0 	.word	0x34031dc0

34008d1c <VD55G1_DeInit>:

int VD55G1_DeInit(VD55G1_Ctx_t *ctx)
{
  struct drv_ctx *drv_ctx = &ctx->ctx;

  if (drv_ctx->state == VD55G1_ST_STREAMING)
34008d1c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
34008d1e:	b510      	push	{r4, lr}
  if (drv_ctx->state == VD55G1_ST_STREAMING)
34008d20:	2b01      	cmp	r3, #1
{
34008d22:	4604      	mov	r4, r0
  if (drv_ctx->state == VD55G1_ST_STREAMING)
34008d24:	d008      	beq.n	34008d38 <VD55G1_DeInit+0x1c>
    return -1;

  ctx->shutdown_pin(ctx, 0);
34008d26:	6803      	ldr	r3, [r0, #0]
34008d28:	2100      	movs	r1, #0
34008d2a:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008d2c:	4620      	mov	r0, r4
34008d2e:	210a      	movs	r1, #10
34008d30:	6a23      	ldr	r3, [r4, #32]
34008d32:	4798      	blx	r3

  return 0;
34008d34:	2000      	movs	r0, #0
}
34008d36:	bd10      	pop	{r4, pc}
    return -1;
34008d38:	f04f 30ff 	mov.w	r0, #4294967295
34008d3c:	e7fb      	b.n	34008d36 <VD55G1_DeInit+0x1a>
	...

34008d40 <VD55G1_Start>:

int VD55G1_Start(VD55G1_Ctx_t *ctx)
{
34008d40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (drv_ctx->config_save.out_itf.data_rate_in_mps < VD55G1_MIN_DATARATE ||
34008d42:	6c43      	ldr	r3, [r0, #68]	@ 0x44
34008d44:	4e8a      	ldr	r6, [pc, #552]	@ (34008f70 <VD55G1_Start+0x230>)
34008d46:	4a8b      	ldr	r2, [pc, #556]	@ (34008f74 <VD55G1_Start+0x234>)
34008d48:	4433      	add	r3, r6
34008d4a:	4293      	cmp	r3, r2
{
34008d4c:	4605      	mov	r5, r0
34008d4e:	b087      	sub	sp, #28
  if (drv_ctx->config_save.out_itf.data_rate_in_mps < VD55G1_MIN_DATARATE ||
34008d50:	d87e      	bhi.n	34008e50 <VD55G1_Start+0x110>
  ret = ctx->write32(ctx, VD55G1_REG_EXT_CLOCK, drv_ctx->config_save.ext_clock_freq_in_hz);
34008d52:	f44f 7108 	mov.w	r1, #544	@ 0x220
34008d56:	6983      	ldr	r3, [r0, #24]
34008d58:	6b42      	ldr	r2, [r0, #52]	@ 0x34
34008d5a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008d5c:	4604      	mov	r4, r0
34008d5e:	b958      	cbnz	r0, 34008d78 <VD55G1_Start+0x38>
  ret = ctx->write32(ctx, VD55G1_REG_MIPI_DATA_RATE, drv_ctx->config_save.out_itf.data_rate_in_mps);
34008d60:	f44f 7109 	mov.w	r1, #548	@ 0x224
34008d64:	4628      	mov	r0, r5
34008d66:	69ab      	ldr	r3, [r5, #24]
34008d68:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
34008d6a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008d6c:	4604      	mov	r4, r0
34008d6e:	b300      	cbz	r0, 34008db2 <VD55G1_Start+0x72>
34008d70:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
34008d74:	9002      	str	r0, [sp, #8]
34008d76:	e002      	b.n	34008d7e <VD55G1_Start+0x3e>
  VD55G1_TraceError(ctx, ret);
34008d78:	f240 13f5 	movw	r3, #501	@ 0x1f5
34008d7c:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008d7e:	4a7e      	ldr	r2, [pc, #504]	@ (34008f78 <VD55G1_Start+0x238>)
34008d80:	4628      	mov	r0, r5
34008d82:	9200      	str	r2, [sp, #0]
34008d84:	2100      	movs	r1, #0
34008d86:	4a7d      	ldr	r2, [pc, #500]	@ (34008f7c <VD55G1_Start+0x23c>)
34008d88:	9301      	str	r3, [sp, #4]
34008d8a:	f7ff fcfb 	bl	34008784 <VD55G1_log_impl>
34008d8e:	4628      	mov	r0, r5
34008d90:	f7ff fd56 	bl	34008840 <display_error>
  VD55G1_TraceError(ctx, ret);
34008d94:	f240 23fe 	movw	r3, #766	@ 0x2fe
34008d98:	9402      	str	r4, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008d9a:	4a79      	ldr	r2, [pc, #484]	@ (34008f80 <VD55G1_Start+0x240>)
34008d9c:	9301      	str	r3, [sp, #4]
  VD55G1_TraceError(ctx, ret);
34008d9e:	4628      	mov	r0, r5
34008da0:	9200      	str	r2, [sp, #0]
34008da2:	2100      	movs	r1, #0
34008da4:	4a75      	ldr	r2, [pc, #468]	@ (34008f7c <VD55G1_Start+0x23c>)
34008da6:	f7ff fced 	bl	34008784 <VD55G1_log_impl>
34008daa:	4628      	mov	r0, r5
34008dac:	f7ff fd48 	bl	34008840 <display_error>
  ret = VD55G1_Setup(ctx);
  if (ret)
    return ret;

  ret = VD55G1_StartStreaming(ctx);
  if (ret)
34008db0:	e233      	b.n	3400921a <VD55G1_Start+0x4da>
  ret = ctx->read32(ctx, VD55G1_REG_MIPI_DATA_RATE, &mipi_data_rate);
34008db2:	f44f 7109 	mov.w	r1, #548	@ 0x224
34008db6:	4628      	mov	r0, r5
34008db8:	68eb      	ldr	r3, [r5, #12]
34008dba:	aa05      	add	r2, sp, #20
34008dbc:	4798      	blx	r3
  if (ret)
34008dbe:	2800      	cmp	r0, #0
34008dc0:	d144      	bne.n	34008e4c <VD55G1_Start+0x10c>
  if (mipi_data_rate <= 1200000000 && mipi_data_rate > 600000000)
34008dc2:	9b05      	ldr	r3, [sp, #20]
34008dc4:	4a6f      	ldr	r2, [pc, #444]	@ (34008f84 <VD55G1_Start+0x244>)
34008dc6:	4970      	ldr	r1, [pc, #448]	@ (34008f88 <VD55G1_Start+0x248>)
34008dc8:	441a      	add	r2, r3
34008dca:	428a      	cmp	r2, r1
34008dcc:	496f      	ldr	r1, [pc, #444]	@ (34008f8c <VD55G1_Start+0x24c>)
34008dce:	d904      	bls.n	34008dda <VD55G1_Start+0x9a>
  else if (mipi_data_rate <= 600000000 && mipi_data_rate > 300000000)
34008dd0:	4a6f      	ldr	r2, [pc, #444]	@ (34008f90 <VD55G1_Start+0x250>)
34008dd2:	441a      	add	r2, r3
34008dd4:	428a      	cmp	r2, r1
34008dd6:	d80e      	bhi.n	34008df6 <VD55G1_Start+0xb6>
    return mipi_data_rate * 2;
34008dd8:	005b      	lsls	r3, r3, #1
  if (system_clk <= 1200000000 && system_clk > 900000000)
34008dda:	4a6e      	ldr	r2, [pc, #440]	@ (34008f94 <VD55G1_Start+0x254>)
34008ddc:	441a      	add	r2, r3
34008dde:	428a      	cmp	r2, r1
34008de0:	d90e      	bls.n	34008e00 <VD55G1_Start+0xc0>
  else if (system_clk <= 900000000 && system_clk > 780000000)
34008de2:	4a6d      	ldr	r2, [pc, #436]	@ (34008f98 <VD55G1_Start+0x258>)
34008de4:	496d      	ldr	r1, [pc, #436]	@ (34008f9c <VD55G1_Start+0x25c>)
34008de6:	441a      	add	r2, r3
34008de8:	428a      	cmp	r2, r1
    return system_clk / 6;
34008dea:	bf94      	ite	ls
34008dec:	2206      	movls	r2, #6
    return system_clk / 5;
34008dee:	2205      	movhi	r2, #5
34008df0:	fbb3 f3f2 	udiv	r3, r3, r2
  if (!drv_ctx->pclk)
34008df4:	e005      	b.n	34008e02 <VD55G1_Start+0xc2>
  else if (mipi_data_rate <= 300000000 && mipi_data_rate >= 250000000)
34008df6:	4a6a      	ldr	r2, [pc, #424]	@ (34008fa0 <VD55G1_Start+0x260>)
34008df8:	441e      	add	r6, r3
34008dfa:	4296      	cmp	r6, r2
34008dfc:	d826      	bhi.n	34008e4c <VD55G1_Start+0x10c>
    return mipi_data_rate * 4;
34008dfe:	009b      	lsls	r3, r3, #2
    return system_clk / 8;
34008e00:	08db      	lsrs	r3, r3, #3
  drv_ctx->pclk = VD55G1_GetPixelClock(ctx);
34008e02:	632b      	str	r3, [r5, #48]	@ 0x30
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34008e04:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008e06:	2208      	movs	r2, #8
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34008e08:	3b00      	subs	r3, #0
34008e0a:	bf18      	it	ne
34008e0c:	2301      	movne	r3, #1
34008e0e:	64ab      	str	r3, [r5, #72]	@ 0x48
  out_itf->data_lane_swap_enable = !!out_itf->data_lane_swap_enable;
34008e10:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008e12:	f240 310a 	movw	r1, #778	@ 0x30a
  out_itf->data_lane_swap_enable = !!out_itf->data_lane_swap_enable;
34008e16:	3b00      	subs	r3, #0
34008e18:	bf18      	it	ne
34008e1a:	2301      	movne	r3, #1
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008e1c:	4628      	mov	r0, r5
  out_itf->data_lane_swap_enable = !!out_itf->data_lane_swap_enable;
34008e1e:	64eb      	str	r3, [r5, #76]	@ 0x4c
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008e20:	692b      	ldr	r3, [r5, #16]
34008e22:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008e24:	4604      	mov	r4, r0
34008e26:	b1b0      	cbz	r0, 34008e56 <VD55G1_Start+0x116>
34008e28:	f240 230d 	movw	r3, #525	@ 0x20d
34008e2c:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008e2e:	4a5d      	ldr	r2, [pc, #372]	@ (34008fa4 <VD55G1_Start+0x264>)
34008e30:	9301      	str	r3, [sp, #4]
34008e32:	2100      	movs	r1, #0
34008e34:	4628      	mov	r0, r5
34008e36:	9200      	str	r2, [sp, #0]
34008e38:	4a50      	ldr	r2, [pc, #320]	@ (34008f7c <VD55G1_Start+0x23c>)
34008e3a:	f7ff fca3 	bl	34008784 <VD55G1_log_impl>
34008e3e:	4628      	mov	r0, r5
34008e40:	f7ff fcfe 	bl	34008840 <display_error>
  VD55G1_TraceError(ctx, ret);
34008e44:	f240 3301 	movw	r3, #769	@ 0x301
34008e48:	9402      	str	r4, [sp, #8]
34008e4a:	e7a6      	b.n	34008d9a <VD55G1_Start+0x5a>
  drv_ctx->pclk = VD55G1_GetPixelClock(ctx);
34008e4c:	2300      	movs	r3, #0
34008e4e:	632b      	str	r3, [r5, #48]	@ 0x30
    return -1;
34008e50:	f04f 34ff 	mov.w	r4, #4294967295
34008e54:	e79e      	b.n	34008d94 <VD55G1_Start+0x54>
  oif_ctrl = out_itf->data_lane_swap_enable << 6 |
34008e56:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
34008e5a:	00d2      	lsls	r2, r2, #3
34008e5c:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
  ret = ctx->write16(ctx, VD55G1_REG_OIF_CTRL, oif_ctrl);
34008e60:	f44f 7143 	mov.w	r1, #780	@ 0x30c
34008e64:	4628      	mov	r0, r5
34008e66:	696b      	ldr	r3, [r5, #20]
34008e68:	b292      	uxth	r2, r2
34008e6a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008e6c:	4604      	mov	r4, r0
34008e6e:	b958      	cbnz	r0, 34008e88 <VD55G1_Start+0x148>
  ret = ctx->write8(ctx, VD55G1_REG_OIF_IMG_CTRL, 0x2a);
34008e70:	222a      	movs	r2, #42	@ 0x2a
34008e72:	f240 310f 	movw	r1, #783	@ 0x30f
34008e76:	4628      	mov	r0, r5
34008e78:	692b      	ldr	r3, [r5, #16]
34008e7a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008e7c:	4604      	mov	r4, r0
34008e7e:	b138      	cbz	r0, 34008e90 <VD55G1_Start+0x150>
34008e80:	f240 2317 	movw	r3, #535	@ 0x217
34008e84:	9002      	str	r0, [sp, #8]
34008e86:	e7d2      	b.n	34008e2e <VD55G1_Start+0xee>
  VD55G1_TraceError(ctx, ret);
34008e88:	f240 2313 	movw	r3, #531	@ 0x213
34008e8c:	9002      	str	r0, [sp, #8]
34008e8e:	e7ce      	b.n	34008e2e <VD55G1_Start+0xee>
  mode = VD55G1_Resolution2Mode(drv_ctx->config_save.resolution);
34008e90:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
  switch (resolution) {
34008e94:	2b03      	cmp	r3, #3
34008e96:	f200 8102 	bhi.w	3400909e <VD55G1_Start+0x35e>
34008e9a:	4a43      	ldr	r2, [pc, #268]	@ (34008fa8 <VD55G1_Start+0x268>)
34008e9c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
  if (!mode)
34008ea0:	2e00      	cmp	r6, #0
34008ea2:	f000 80fc 	beq.w	3400909e <VD55G1_Start+0x35e>
  ret = ctx->write8(ctx, VD55G1_REG_READOUT_CTRL, mode->bin_mode);
34008ea6:	f240 512e 	movw	r1, #1326	@ 0x52e
34008eaa:	4628      	mov	r0, r5
34008eac:	692b      	ldr	r3, [r5, #16]
34008eae:	7a32      	ldrb	r2, [r6, #8]
34008eb0:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008eb2:	4604      	mov	r4, r0
34008eb4:	b188      	cbz	r0, 34008eda <VD55G1_Start+0x19a>
34008eb6:	f240 2327 	movw	r3, #551	@ 0x227
34008eba:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008ebc:	4a3b      	ldr	r2, [pc, #236]	@ (34008fac <VD55G1_Start+0x26c>)
34008ebe:	4628      	mov	r0, r5
34008ec0:	9200      	str	r2, [sp, #0]
34008ec2:	2100      	movs	r1, #0
34008ec4:	4a2d      	ldr	r2, [pc, #180]	@ (34008f7c <VD55G1_Start+0x23c>)
34008ec6:	9301      	str	r3, [sp, #4]
34008ec8:	f7ff fc5c 	bl	34008784 <VD55G1_log_impl>
34008ecc:	4628      	mov	r0, r5
34008ece:	f7ff fcb7 	bl	34008840 <display_error>
  VD55G1_TraceError(ctx, ret);
34008ed2:	f44f 7341 	mov.w	r3, #772	@ 0x304
34008ed6:	9402      	str	r4, [sp, #8]
34008ed8:	e75f      	b.n	34008d9a <VD55G1_Start+0x5a>
  ret = ctx->write16(ctx, VD55G1_REG_X_START, mode->crop.left);
34008eda:	f240 5114 	movw	r1, #1300	@ 0x514
34008ede:	4628      	mov	r0, r5
34008ee0:	696b      	ldr	r3, [r5, #20]
34008ee2:	89b2      	ldrh	r2, [r6, #12]
34008ee4:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008ee6:	4604      	mov	r4, r0
34008ee8:	b958      	cbnz	r0, 34008f02 <VD55G1_Start+0x1c2>
  ret = ctx->write16(ctx, VD55G1_REG_X_WIDTH, mode->crop.width);
34008eea:	f240 5116 	movw	r1, #1302	@ 0x516
34008eee:	4628      	mov	r0, r5
34008ef0:	696b      	ldr	r3, [r5, #20]
34008ef2:	8ab2      	ldrh	r2, [r6, #20]
34008ef4:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008ef6:	4604      	mov	r4, r0
34008ef8:	b138      	cbz	r0, 34008f0a <VD55G1_Start+0x1ca>
34008efa:	f44f 730b 	mov.w	r3, #556	@ 0x22c
34008efe:	9002      	str	r0, [sp, #8]
34008f00:	e7dc      	b.n	34008ebc <VD55G1_Start+0x17c>
  VD55G1_TraceError(ctx, ret);
34008f02:	f240 232a 	movw	r3, #554	@ 0x22a
34008f06:	9002      	str	r0, [sp, #8]
34008f08:	e7d8      	b.n	34008ebc <VD55G1_Start+0x17c>
  ret = ctx->write16(ctx, VD55G1_REG_Y_START, mode->crop.top);
34008f0a:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
34008f0e:	4628      	mov	r0, r5
34008f10:	696b      	ldr	r3, [r5, #20]
34008f12:	8a32      	ldrh	r2, [r6, #16]
34008f14:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008f16:	4604      	mov	r4, r0
34008f18:	b118      	cbz	r0, 34008f22 <VD55G1_Start+0x1e2>
34008f1a:	f240 232e 	movw	r3, #558	@ 0x22e
34008f1e:	9002      	str	r0, [sp, #8]
34008f20:	e7cc      	b.n	34008ebc <VD55G1_Start+0x17c>
  ret = ctx->write16(ctx, VD55G1_REG_Y_HEIGHT, mode->crop.height);
34008f22:	f240 5112 	movw	r1, #1298	@ 0x512
34008f26:	4628      	mov	r0, r5
34008f28:	696b      	ldr	r3, [r5, #20]
34008f2a:	8b32      	ldrh	r2, [r6, #24]
34008f2c:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008f2e:	4604      	mov	r4, r0
34008f30:	b118      	cbz	r0, 34008f3a <VD55G1_Start+0x1fa>
34008f32:	f44f 730c 	mov.w	r3, #560	@ 0x230
34008f36:	9002      	str	r0, [sp, #8]
34008f38:	e7c0      	b.n	34008ebc <VD55G1_Start+0x17c>
  ret = ctx->read16(ctx, VD55G1_REG_X_WIDTH, &width);
34008f3a:	f240 5116 	movw	r1, #1302	@ 0x516
34008f3e:	4628      	mov	r0, r5
34008f40:	68ab      	ldr	r3, [r5, #8]
34008f42:	aa05      	add	r2, sp, #20
34008f44:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008f46:	4604      	mov	r4, r0
34008f48:	b3a0      	cbz	r0, 34008fb4 <VD55G1_Start+0x274>
34008f4a:	f240 233e 	movw	r3, #574	@ 0x23e
34008f4e:	9002      	str	r0, [sp, #8]
34008f50:	4a17      	ldr	r2, [pc, #92]	@ (34008fb0 <VD55G1_Start+0x270>)
34008f52:	9301      	str	r3, [sp, #4]
34008f54:	4628      	mov	r0, r5
34008f56:	9200      	str	r2, [sp, #0]
34008f58:	2100      	movs	r1, #0
34008f5a:	4a08      	ldr	r2, [pc, #32]	@ (34008f7c <VD55G1_Start+0x23c>)
34008f5c:	f7ff fc12 	bl	34008784 <VD55G1_log_impl>
34008f60:	4628      	mov	r0, r5
34008f62:	f7ff fc6d 	bl	34008840 <display_error>
  VD55G1_TraceError(ctx, ret);
34008f66:	f240 3307 	movw	r3, #775	@ 0x307
34008f6a:	9402      	str	r4, [sp, #8]
34008f6c:	e715      	b.n	34008d9a <VD55G1_Start+0x5a>
34008f6e:	bf00      	nop
34008f70:	f1194d80 	.word	0xf1194d80
34008f74:	389fd980 	.word	0x389fd980
34008f78:	34031cd4 	.word	0x34031cd4
34008f7c:	3402c53d 	.word	0x3402c53d
34008f80:	34031ce7 	.word	0x34031ce7
34008f84:	dc3cb9ff 	.word	0xdc3cb9ff
34008f88:	23c345ff 	.word	0x23c345ff
34008f8c:	11e1a2ff 	.word	0x11e1a2ff
34008f90:	ee1e5cff 	.word	0xee1e5cff
34008f94:	ca5b16ff 	.word	0xca5b16ff
34008f98:	d18224ff 	.word	0xd18224ff
34008f9c:	07270dff 	.word	0x07270dff
34008fa0:	02faf080 	.word	0x02faf080
34008fa4:	34031cc1 	.word	0x34031cc1
34008fa8:	34031be0 	.word	0x34031be0
34008fac:	34031cb0 	.word	0x34031cb0
34008fb0:	34031c86 	.word	0x34031c86
  min_line_len_mipi = ((width * VD55G1_MIPI_BPP + VD55G1_MIPI_MARGIN) * (uint64_t)drv_ctx->pclk)
34008fb4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
34008fb8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
34008fba:	00c9      	lsls	r1, r1, #3
34008fbc:	f501 7161 	add.w	r1, r1, #900	@ 0x384
                      / VD55G1_MIPI_DATA_RATE_HZ;
34008fc0:	a3a3      	add	r3, pc, #652	@ (adr r3, 34009250 <VD55G1_Start+0x510>)
34008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
34008fc6:	fba1 0100 	umull	r0, r1, r1, r0
34008fca:	f7f8 fdcb 	bl	34001b64 <__aeabi_uldivmod>
  line_len = MAX(VD55G1_MIN_LINE_LEN_ADC_10, min_line_len_mipi);
34008fce:	f5b0 6f8d 	cmp.w	r0, #1128	@ 0x468
34008fd2:	bfb8      	it	lt
34008fd4:	f44f 608d 	movlt.w	r0, #1128	@ 0x468
  ret = ctx->write16(ctx, VD55G1_REG_LINE_LENGTH, line_len);
34008fd8:	f44f 7140 	mov.w	r1, #768	@ 0x300
34008fdc:	b282      	uxth	r2, r0
  line_len = MAX(VD55G1_MIN_LINE_LEN_ADC_10, min_line_len_mipi);
34008fde:	4606      	mov	r6, r0
  ret = ctx->write16(ctx, VD55G1_REG_LINE_LENGTH, line_len);
34008fe0:	696b      	ldr	r3, [r5, #20]
34008fe2:	4628      	mov	r0, r5
34008fe4:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008fe6:	4604      	mov	r4, r0
34008fe8:	2800      	cmp	r0, #0
34008fea:	d14e      	bne.n	3400908a <VD55G1_Start+0x34a>
  VD55G1_dbg(ctx, 1, "line_length = %d\n", line_len);
34008fec:	f240 2346 	movw	r3, #582	@ 0x246
34008ff0:	b2b6      	uxth	r6, r6
34008ff2:	2104      	movs	r1, #4
34008ff4:	4628      	mov	r0, r5
34008ff6:	4a8a      	ldr	r2, [pc, #552]	@ (34009220 <VD55G1_Start+0x4e0>)
34008ff8:	9300      	str	r3, [sp, #0]
34008ffa:	9601      	str	r6, [sp, #4]
34008ffc:	2301      	movs	r3, #1
34008ffe:	f7ff fbc1 	bl	34008784 <VD55G1_log_impl>
  ret = VD55G1_ComputeFrameLength(ctx, drv_ctx->config_save.frame_rate, &frame_length);
34009002:	4628      	mov	r0, r5
34009004:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
34009006:	aa05      	add	r2, sp, #20
34009008:	f7ff fcca 	bl	340089a0 <VD55G1_ComputeFrameLength>
  if (ret)
3400900c:	4604      	mov	r4, r0
3400900e:	2800      	cmp	r0, #0
34009010:	d1a9      	bne.n	34008f66 <VD55G1_Start+0x226>
  VD55G1_dbg(ctx, 1, "Set frame_length to %d to reach %d fps\n", frame_length, drv_ctx->config_save.frame_rate);
34009012:	f8bd 4014 	ldrh.w	r4, [sp, #20]
34009016:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
34009018:	2104      	movs	r1, #4
3400901a:	e9cd 4301 	strd	r4, r3, [sp, #4]
3400901e:	f240 2372 	movw	r3, #626	@ 0x272
34009022:	4628      	mov	r0, r5
34009024:	4a7f      	ldr	r2, [pc, #508]	@ (34009224 <VD55G1_Start+0x4e4>)
34009026:	9300      	str	r3, [sp, #0]
34009028:	2301      	movs	r3, #1
3400902a:	f7ff fbab 	bl	34008784 <VD55G1_log_impl>
  ret = ctx->write16(ctx, VD55G1_REG_FRAME_LENGTH, frame_length);
3400902e:	4622      	mov	r2, r4
34009030:	f240 510c 	movw	r1, #1292	@ 0x50c
34009034:	4628      	mov	r0, r5
34009036:	696b      	ldr	r3, [r5, #20]
34009038:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400903a:	4604      	mov	r4, r0
3400903c:	bb48      	cbnz	r0, 34009092 <VD55G1_Start+0x352>
  if (awu->is_enable)
3400903e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
  max_fps = drv_ctx->config_save.frame_rate;
34009040:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
  if (awu->is_enable)
34009042:	bb7b      	cbnz	r3, 340090a4 <VD55G1_Start+0x364>
  ret = VD55G1_ComputeFrameLength(ctx, max_fps, &frame_length);
34009044:	4628      	mov	r0, r5
34009046:	aa05      	add	r2, sp, #20
34009048:	f7ff fcaa 	bl	340089a0 <VD55G1_ComputeFrameLength>
  if (ret)
3400904c:	4604      	mov	r4, r0
3400904e:	b9c0      	cbnz	r0, 34009082 <VD55G1_Start+0x342>
  ret = ctx->write16(ctx, VD55G1_REG_MAX_COARSE_INTEGRATION_LINES, frame_length - 10);
34009050:	f8bd 6014 	ldrh.w	r6, [sp, #20]
34009054:	f240 3172 	movw	r1, #882	@ 0x372
34009058:	3e0a      	subs	r6, #10
3400905a:	4628      	mov	r0, r5
3400905c:	696b      	ldr	r3, [r5, #20]
3400905e:	b2b2      	uxth	r2, r6
34009060:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34009062:	4604      	mov	r4, r0
34009064:	b338      	cbz	r0, 340090b6 <VD55G1_Start+0x376>
34009066:	f240 238f 	movw	r3, #655	@ 0x28f
3400906a:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
3400906c:	4a6e      	ldr	r2, [pc, #440]	@ (34009228 <VD55G1_Start+0x4e8>)
3400906e:	4628      	mov	r0, r5
34009070:	9200      	str	r2, [sp, #0]
34009072:	2100      	movs	r1, #0
34009074:	4a6d      	ldr	r2, [pc, #436]	@ (3400922c <VD55G1_Start+0x4ec>)
34009076:	9301      	str	r3, [sp, #4]
34009078:	f7ff fb84 	bl	34008784 <VD55G1_log_impl>
3400907c:	4628      	mov	r0, r5
3400907e:	f7ff fbdf 	bl	34008840 <display_error>
  VD55G1_TraceError(ctx, ret);
34009082:	f240 330a 	movw	r3, #778	@ 0x30a
34009086:	9402      	str	r4, [sp, #8]
34009088:	e687      	b.n	34008d9a <VD55G1_Start+0x5a>
  VD55G1_TraceError(ctx, ret);
3400908a:	f240 2345 	movw	r3, #581	@ 0x245
3400908e:	9002      	str	r0, [sp, #8]
34009090:	e75e      	b.n	34008f50 <VD55G1_Start+0x210>
  VD55G1_TraceError(ctx, ret);
34009092:	f44f 731d 	mov.w	r3, #628	@ 0x274
34009096:	4a66      	ldr	r2, [pc, #408]	@ (34009230 <VD55G1_Start+0x4f0>)
34009098:	9002      	str	r0, [sp, #8]
3400909a:	9301      	str	r3, [sp, #4]
3400909c:	e75a      	b.n	34008f54 <VD55G1_Start+0x214>
3400909e:	f04f 34ff 	mov.w	r4, #4294967295
340090a2:	e716      	b.n	34008ed2 <VD55G1_Start+0x192>
    max_fps = MAX(max_fps, awu->convergence_frame_rate);
340090a4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
340090a6:	4299      	cmp	r1, r3
340090a8:	bfb8      	it	lt
340090aa:	4619      	movlt	r1, r3
    max_fps = MAX(max_fps, awu->awu_frame_rate);
340090ac:	6dab      	ldr	r3, [r5, #88]	@ 0x58
340090ae:	4299      	cmp	r1, r3
340090b0:	bfb8      	it	lt
340090b2:	4619      	movlt	r1, r3
340090b4:	e7c6      	b.n	34009044 <VD55G1_Start+0x304>
  VD55G1_dbg(ctx, 1, "Max coarse lines = %d\n", frame_length - 10);
340090b6:	f44f 7324 	mov.w	r3, #656	@ 0x290
340090ba:	2104      	movs	r1, #4
340090bc:	4628      	mov	r0, r5
340090be:	4a5d      	ldr	r2, [pc, #372]	@ (34009234 <VD55G1_Start+0x4f4>)
340090c0:	9300      	str	r3, [sp, #0]
340090c2:	9601      	str	r6, [sp, #4]
340090c4:	2301      	movs	r3, #1
340090c6:	f7ff fb5d 	bl	34008784 <VD55G1_log_impl>
  reg = drv_ctx->config_save.patgen != VD55G1_PATGEN_CTRL_DISABLE ? VD55G1_EXP_MODE_MANUAL : VD55G1_EXP_MODE_AUTO;
340090ca:	f895 2041 	ldrb.w	r2, [r5, #65]	@ 0x41
  ret = ctx->write8(ctx, VD55G1_REG_EXP_MODE, reg);
340090ce:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
  reg = drv_ctx->config_save.patgen != VD55G1_PATGEN_CTRL_DISABLE ? VD55G1_EXP_MODE_MANUAL : VD55G1_EXP_MODE_AUTO;
340090d2:	3a00      	subs	r2, #0
340090d4:	bf18      	it	ne
340090d6:	2201      	movne	r2, #1
  ret = ctx->write8(ctx, VD55G1_REG_EXP_MODE, reg);
340090d8:	4628      	mov	r0, r5
340090da:	692b      	ldr	r3, [r5, #16]
340090dc:	0052      	lsls	r2, r2, #1
340090de:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340090e0:	4604      	mov	r4, r0
340090e2:	b118      	cbz	r0, 340090ec <VD55G1_Start+0x3ac>
340090e4:	f240 2395 	movw	r3, #661	@ 0x295
340090e8:	9002      	str	r0, [sp, #8]
340090ea:	e7bf      	b.n	3400906c <VD55G1_Start+0x32c>
  switch (drv_ctx->config_save.flip_mirror_mode) {
340090ec:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
340090f0:	2b03      	cmp	r3, #3
340090f2:	d905      	bls.n	34009100 <VD55G1_Start+0x3c0>
    return -1;
340090f4:	f04f 34ff 	mov.w	r4, #4294967295
  VD55G1_TraceError(ctx, ret);
340090f8:	f240 330d 	movw	r3, #781	@ 0x30d
340090fc:	9402      	str	r4, [sp, #8]
340090fe:	e64c      	b.n	34008d9a <VD55G1_Start+0x5a>
  ret = ctx->write8(ctx, VD55G1_REG_ORIENTATION, mode);
34009100:	4a4d      	ldr	r2, [pc, #308]	@ (34009238 <VD55G1_Start+0x4f8>)
34009102:	692c      	ldr	r4, [r5, #16]
34009104:	f240 3102 	movw	r1, #770	@ 0x302
34009108:	4628      	mov	r0, r5
3400910a:	5cd2      	ldrb	r2, [r2, r3]
3400910c:	47a0      	blx	r4
  VD55G1_TraceError(ctx, ret);
3400910e:	4604      	mov	r4, r0
34009110:	b948      	cbnz	r0, 34009126 <VD55G1_Start+0x3e6>
  switch (drv_ctx->config_save.patgen) {
34009112:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
34009116:	2b02      	cmp	r3, #2
34009118:	d914      	bls.n	34009144 <VD55G1_Start+0x404>
    return -1;
3400911a:	f04f 34ff 	mov.w	r4, #4294967295
  VD55G1_TraceError(ctx, ret);
3400911e:	f44f 7344 	mov.w	r3, #784	@ 0x310
34009122:	9402      	str	r4, [sp, #8]
34009124:	e639      	b.n	34008d9a <VD55G1_Start+0x5a>
  VD55G1_TraceError(ctx, ret);
34009126:	f240 23b2 	movw	r3, #690	@ 0x2b2
3400912a:	4a44      	ldr	r2, [pc, #272]	@ (3400923c <VD55G1_Start+0x4fc>)
3400912c:	9002      	str	r0, [sp, #8]
3400912e:	9200      	str	r2, [sp, #0]
34009130:	4628      	mov	r0, r5
34009132:	2100      	movs	r1, #0
34009134:	4a3d      	ldr	r2, [pc, #244]	@ (3400922c <VD55G1_Start+0x4ec>)
34009136:	9301      	str	r3, [sp, #4]
34009138:	f7ff fb24 	bl	34008784 <VD55G1_log_impl>
3400913c:	4628      	mov	r0, r5
3400913e:	f7ff fb7f 	bl	34008840 <display_error>
  VD55G1_TraceError(ctx, ret);
34009142:	e7d9      	b.n	340090f8 <VD55G1_Start+0x3b8>
34009144:	4a3e      	ldr	r2, [pc, #248]	@ (34009240 <VD55G1_Start+0x500>)
34009146:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
  if (drv_ctx->config_save.patgen != VD55G1_PATGEN_CTRL_DISABLE)
3400914a:	b313      	cbz	r3, 34009192 <VD55G1_Start+0x452>
    ret = ctx->write8(ctx, VD55G1_REG_DUSTER_CTRL, VD55G1_DUSTER_DISABLE);
3400914c:	4602      	mov	r2, r0
3400914e:	f240 31ae 	movw	r1, #942	@ 0x3ae
34009152:	4628      	mov	r0, r5
34009154:	692b      	ldr	r3, [r5, #16]
34009156:	4798      	blx	r3
    VD55G1_TraceError(ctx, ret);
34009158:	4604      	mov	r4, r0
3400915a:	b170      	cbz	r0, 3400917a <VD55G1_Start+0x43a>
3400915c:	f240 23ce 	movw	r3, #718	@ 0x2ce
34009160:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34009162:	4a38      	ldr	r2, [pc, #224]	@ (34009244 <VD55G1_Start+0x504>)
34009164:	4628      	mov	r0, r5
34009166:	9200      	str	r2, [sp, #0]
34009168:	2100      	movs	r1, #0
3400916a:	4a30      	ldr	r2, [pc, #192]	@ (3400922c <VD55G1_Start+0x4ec>)
3400916c:	9301      	str	r3, [sp, #4]
3400916e:	f7ff fb09 	bl	34008784 <VD55G1_log_impl>
34009172:	4628      	mov	r0, r5
34009174:	f7ff fb64 	bl	34008840 <display_error>
  VD55G1_TraceError(ctx, ret);
34009178:	e7d1      	b.n	3400911e <VD55G1_Start+0x3de>
    ret = ctx->write8(ctx, VD55G1_REG_DARKCAL_CTRL, VD55G1_DARKCAL_BYPASS_DARKAVG);
3400917a:	2202      	movs	r2, #2
3400917c:	f240 312a 	movw	r1, #810	@ 0x32a
34009180:	4628      	mov	r0, r5
34009182:	692b      	ldr	r3, [r5, #16]
34009184:	4798      	blx	r3
    VD55G1_TraceError(ctx, ret);
34009186:	4604      	mov	r4, r0
34009188:	b118      	cbz	r0, 34009192 <VD55G1_Start+0x452>
3400918a:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
3400918e:	9002      	str	r0, [sp, #8]
34009190:	e7e7      	b.n	34009162 <VD55G1_Start+0x422>
  ret = ctx->write16(ctx, VD55G1_REG_PATGEN_CTRL, value);
34009192:	4632      	mov	r2, r6
34009194:	f44f 7141 	mov.w	r1, #772	@ 0x304
34009198:	4628      	mov	r0, r5
3400919a:	696b      	ldr	r3, [r5, #20]
3400919c:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400919e:	4604      	mov	r4, r0
340091a0:	b118      	cbz	r0, 340091aa <VD55G1_Start+0x46a>
340091a2:	f44f 7335 	mov.w	r3, #724	@ 0x2d4
340091a6:	9002      	str	r0, [sp, #8]
340091a8:	e7db      	b.n	34009162 <VD55G1_Start+0x422>
  return VD55G1_SetFlicker(ctx, drv_ctx->config_save.flicker);
340091aa:	4628      	mov	r0, r5
340091ac:	f895 1042 	ldrb.w	r1, [r5, #66]	@ 0x42
340091b0:	f7ff fc48 	bl	34008a44 <VD55G1_SetFlicker>
  VD55G1_TraceError(ctx, ret);
340091b4:	4604      	mov	r4, r0
340091b6:	b118      	cbz	r0, 340091c0 <VD55G1_Start+0x480>
340091b8:	f240 3313 	movw	r3, #787	@ 0x313
340091bc:	9002      	str	r0, [sp, #8]
340091be:	e5ec      	b.n	34008d9a <VD55G1_Start+0x5a>
  ret = ctx->write8(ctx, VD55G1_REG_STBY, VD55G1_STBY_START_STREAM);
340091c0:	2201      	movs	r2, #1
340091c2:	f240 2101 	movw	r1, #513	@ 0x201
340091c6:	4628      	mov	r0, r5
340091c8:	692b      	ldr	r3, [r5, #16]
340091ca:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340091cc:	4604      	mov	r4, r0
340091ce:	b128      	cbz	r0, 340091dc <VD55G1_Start+0x49c>
340091d0:	f240 331d 	movw	r3, #797	@ 0x31d
340091d4:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
340091d6:	4a1c      	ldr	r2, [pc, #112]	@ (34009248 <VD55G1_Start+0x508>)
340091d8:	9301      	str	r3, [sp, #4]
340091da:	e5e0      	b.n	34008d9e <VD55G1_Start+0x5e>
  ret = VD55G1_PollReg8(ctx, VD55G1_REG_STBY, VD55G1_CMD_ACK);
340091dc:	4602      	mov	r2, r0
340091de:	f240 2101 	movw	r1, #513	@ 0x201
340091e2:	4628      	mov	r0, r5
340091e4:	f7ff fadc 	bl	340087a0 <VD55G1_PollReg8>
  VD55G1_TraceError(ctx, ret);
340091e8:	4604      	mov	r4, r0
340091ea:	b948      	cbnz	r0, 34009200 <VD55G1_Start+0x4c0>
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_STREAMING);
340091ec:	2103      	movs	r1, #3
340091ee:	4628      	mov	r0, r5
340091f0:	f7ff fb02 	bl	340087f8 <VD55G1_WaitState>
  VD55G1_TraceError(ctx, ret);
340091f4:	4604      	mov	r4, r0
340091f6:	b138      	cbz	r0, 34009208 <VD55G1_Start+0x4c8>
340091f8:	f240 3323 	movw	r3, #803	@ 0x323
340091fc:	9002      	str	r0, [sp, #8]
340091fe:	e7ea      	b.n	340091d6 <VD55G1_Start+0x496>
  VD55G1_TraceError(ctx, ret);
34009200:	f44f 7348 	mov.w	r3, #800	@ 0x320
34009204:	9002      	str	r0, [sp, #8]
34009206:	e7e6      	b.n	340091d6 <VD55G1_Start+0x496>
  VD55G1_notice(ctx, "Streaming is on\n");
34009208:	f240 3325 	movw	r3, #805	@ 0x325
3400920c:	2102      	movs	r1, #2
3400920e:	4628      	mov	r0, r5
34009210:	4a0e      	ldr	r2, [pc, #56]	@ (3400924c <VD55G1_Start+0x50c>)
34009212:	f7ff fab7 	bl	34008784 <VD55G1_log_impl>
    return ret;
  drv_ctx->state = VD55G1_ST_STREAMING;
34009216:	2301      	movs	r3, #1
34009218:	62ab      	str	r3, [r5, #40]	@ 0x28

  return 0;
}
3400921a:	4620      	mov	r0, r4
3400921c:	b007      	add	sp, #28
3400921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
34009220:	3402c741 	.word	0x3402c741
34009224:	3402c764 	.word	0x3402c764
34009228:	34031c57 	.word	0x34031c57
3400922c:	3402c53d 	.word	0x3402c53d
34009230:	34031c9a 	.word	0x34031c9a
34009234:	3402c79d 	.word	0x3402c79d
34009238:	34031bda 	.word	0x34031bda
3400923c:	34031c40 	.word	0x34031c40
34009240:	34031bd4 	.word	0x34031bd4
34009244:	34031c2d 	.word	0x34031c2d
34009248:	34031c05 	.word	0x34031c05
3400924c:	3402c7c5 	.word	0x3402c7c5
34009250:	2fec1100 	.word	0x2fec1100
34009254:	00000000 	.word	0x00000000

34009258 <VD55G1_Stop>:

int VD55G1_Stop(VD55G1_Ctx_t *ctx)
{
34009258:	b510      	push	{r4, lr}
3400925a:	4604      	mov	r4, r0
  struct drv_ctx *drv_ctx = &ctx->ctx;
  int ret;

  ret = VD55G1_StopStreaming(ctx);
3400925c:	f7ff fc1a 	bl	34008a94 <VD55G1_StopStreaming>
  if (ret)
34009260:	b900      	cbnz	r0, 34009264 <VD55G1_Stop+0xc>
    return ret;
  drv_ctx->state = VD55G1_ST_IDLE;
34009262:	62a0      	str	r0, [r4, #40]	@ 0x28

  return 0;
}
34009264:	bd10      	pop	{r4, pc}

34009266 <VD55G1_SetFlipMirrorMode>:

  return 0;
}

int VD55G1_SetFlipMirrorMode(VD55G1_Ctx_t *ctx, VD55G1_MirrorFlip_t mode)
{
34009266:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ctx->read8(ctx, VD55G1_REG_SYSTEM_FSM, &state);
34009268:	6843      	ldr	r3, [r0, #4]
{
3400926a:	460d      	mov	r5, r1
  ret = ctx->read8(ctx, VD55G1_REG_SYSTEM_FSM, &state);
3400926c:	f10d 0207 	add.w	r2, sp, #7
34009270:	211c      	movs	r1, #28
{
34009272:	4604      	mov	r4, r0
  ret = ctx->read8(ctx, VD55G1_REG_SYSTEM_FSM, &state);
34009274:	4798      	blx	r3
  if (ret)
34009276:	2800      	cmp	r0, #0
34009278:	d10f      	bne.n	3400929a <VD55G1_SetFlipMirrorMode+0x34>
  return state == VD55G1_SYSTEM_FSM_STREAMING;
3400927a:	f89d 3007 	ldrb.w	r3, [sp, #7]

  is_streaming = VD55G1_IsStreaming(ctx);
  if (is_streaming < 0)
    return is_streaming;

  if (is_streaming) {
3400927e:	2b03      	cmp	r3, #3
34009280:	d10e      	bne.n	340092a0 <VD55G1_SetFlipMirrorMode+0x3a>
    ret = VD55G1_Stop(ctx);
34009282:	4620      	mov	r0, r4
34009284:	f7ff ffe8 	bl	34009258 <VD55G1_Stop>
    if (ret)
34009288:	b940      	cbnz	r0, 3400929c <VD55G1_SetFlipMirrorMode+0x36>
  }

  drv_ctx->config_save.flip_mirror_mode = mode;

  if (is_streaming) {
    ret = VD55G1_Start(ctx);
3400928a:	4620      	mov	r0, r4
  drv_ctx->config_save.flip_mirror_mode = mode;
3400928c:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    if (ret)
      return ret;
  }

  return 0;
}
34009290:	b003      	add	sp, #12
34009292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ret = VD55G1_Start(ctx);
34009296:	f7ff bd53 	b.w	34008d40 <VD55G1_Start>
  if (is_streaming < 0)
3400929a:	daf2      	bge.n	34009282 <VD55G1_SetFlipMirrorMode+0x1c>
}
3400929c:	b003      	add	sp, #12
3400929e:	bd30      	pop	{r4, r5, pc}
  drv_ctx->config_save.flip_mirror_mode = mode;
340092a0:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
  if (is_streaming) {
340092a4:	e7fa      	b.n	3400929c <VD55G1_SetFlipMirrorMode+0x36>

340092a6 <VD6G_error>:
  ctx->log(ctx, VD6G_LVL_WARNING, format, ap);
  va_end(ap);
}

static void VD6G_error(VD6G_Ctx_t *ctx, const char *format, ...)
{
340092a6:	b40e      	push	{r1, r2, r3}
340092a8:	b517      	push	{r0, r1, r2, r4, lr}
  va_list ap;

  if (!ctx->log)
340092aa:	6a44      	ldr	r4, [r0, #36]	@ 0x24
340092ac:	b124      	cbz	r4, 340092b8 <VD6G_error+0x12>
    return ;

  va_start(ap, format);
340092ae:	ab06      	add	r3, sp, #24
  ctx->log(ctx, VD6G_LVL_ERROR, format, ap);
340092b0:	2100      	movs	r1, #0
340092b2:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, format);
340092b4:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_ERROR, format, ap);
340092b6:	47a0      	blx	r4
  va_end(ap);
}
340092b8:	b003      	add	sp, #12
340092ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340092be:	b003      	add	sp, #12
340092c0:	4770      	bx	lr

340092c2 <VD6G_notice>:
{
340092c2:	b40e      	push	{r1, r2, r3}
340092c4:	b517      	push	{r0, r1, r2, r4, lr}
  if (!ctx->log)
340092c6:	6a44      	ldr	r4, [r0, #36]	@ 0x24
340092c8:	b124      	cbz	r4, 340092d4 <VD6G_notice+0x12>
  va_start(ap, format);
340092ca:	ab06      	add	r3, sp, #24
  ctx->log(ctx, VD6G_LVL_NOTICE, format, ap);
340092cc:	2102      	movs	r1, #2
340092ce:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, format);
340092d0:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_NOTICE, format, ap);
340092d2:	47a0      	blx	r4
}
340092d4:	b003      	add	sp, #12
340092d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340092da:	b003      	add	sp, #12
340092dc:	4770      	bx	lr
	...

340092e0 <display_error>:

static void display_error(VD6G_Ctx_t *ctx)
{
340092e0:	b513      	push	{r0, r1, r4, lr}
  uint16_t reg16;
  int ret;

  ret = ctx->read16(ctx, VD6G_ERROR_CODE, &reg16);
340092e2:	6883      	ldr	r3, [r0, #8]
340092e4:	211c      	movs	r1, #28
340092e6:	f10d 0206 	add.w	r2, sp, #6
{
340092ea:	4604      	mov	r4, r0
  ret = ctx->read16(ctx, VD6G_ERROR_CODE, &reg16);
340092ec:	4798      	blx	r3
  assert(ret == 0);
340092ee:	b130      	cbz	r0, 340092fe <display_error+0x1e>
340092f0:	f240 1131 	movw	r1, #305	@ 0x131
340092f4:	4b06      	ldr	r3, [pc, #24]	@ (34009310 <display_error+0x30>)
340092f6:	4a07      	ldr	r2, [pc, #28]	@ (34009314 <display_error+0x34>)
340092f8:	4807      	ldr	r0, [pc, #28]	@ (34009318 <display_error+0x38>)
340092fa:	f016 fb85 	bl	3401fa08 <__assert_func>
  VD6G_error(ctx, "ERROR_CODE : 0x%04x\n", reg16);
340092fe:	4620      	mov	r0, r4
34009300:	f8bd 2006 	ldrh.w	r2, [sp, #6]
34009304:	4905      	ldr	r1, [pc, #20]	@ (3400931c <display_error+0x3c>)
34009306:	f7ff ffce 	bl	340092a6 <VD6G_error>
}
3400930a:	b002      	add	sp, #8
3400930c:	bd10      	pop	{r4, pc}
3400930e:	bf00      	nop
34009310:	3402c4b2 	.word	0x3402c4b2
34009314:	340336a7 	.word	0x340336a7
34009318:	3402c7e6 	.word	0x3402c7e6
3400931c:	3402c528 	.word	0x3402c528

34009320 <VD6G_PollReg8>:

static int VD6G_PollReg8(VD6G_Ctx_t *ctx, uint16_t addr, uint8_t poll_val)
{
34009320:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34009324:	4604      	mov	r4, r0
34009326:	460f      	mov	r7, r1
34009328:	4690      	mov	r8, r2
3400932a:	2631      	movs	r6, #49	@ 0x31
  int loop_nb = timeout_ms / loop_delay_ms;
  uint8_t val;
  int ret;

  while (--loop_nb) {
    ret = ctx->read8(ctx, addr, &val);
3400932c:	4639      	mov	r1, r7
3400932e:	4620      	mov	r0, r4
34009330:	6863      	ldr	r3, [r4, #4]
34009332:	f10d 020f 	add.w	r2, sp, #15
34009336:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34009338:	4605      	mov	r5, r0
3400933a:	b938      	cbnz	r0, 3400934c <VD6G_PollReg8+0x2c>
    if (val == poll_val)
3400933c:	f89d 300f 	ldrb.w	r3, [sp, #15]
34009340:	4543      	cmp	r3, r8
34009342:	d10f      	bne.n	34009364 <VD6G_PollReg8+0x44>
      return 0;
    ctx->delay(ctx, loop_delay_ms);
  }

  return -1;
}
34009344:	4628      	mov	r0, r5
34009346:	b004      	add	sp, #16
34009348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    VD6G_TraceError(ctx, ret);
3400934c:	9000      	str	r0, [sp, #0]
3400934e:	f240 133f 	movw	r3, #319	@ 0x13f
34009352:	4620      	mov	r0, r4
34009354:	4a08      	ldr	r2, [pc, #32]	@ (34009378 <VD6G_PollReg8+0x58>)
34009356:	4909      	ldr	r1, [pc, #36]	@ (3400937c <VD6G_PollReg8+0x5c>)
34009358:	f7ff ffa5 	bl	340092a6 <VD6G_error>
3400935c:	4620      	mov	r0, r4
3400935e:	f7ff ffbf 	bl	340092e0 <display_error>
34009362:	e7ef      	b.n	34009344 <VD6G_PollReg8+0x24>
    ctx->delay(ctx, loop_delay_ms);
34009364:	210a      	movs	r1, #10
34009366:	4620      	mov	r0, r4
34009368:	6a23      	ldr	r3, [r4, #32]
3400936a:	4798      	blx	r3
  while (--loop_nb) {
3400936c:	3e01      	subs	r6, #1
3400936e:	d1dd      	bne.n	3400932c <VD6G_PollReg8+0xc>
  return -1;
34009370:	f04f 35ff 	mov.w	r5, #4294967295
34009374:	e7e6      	b.n	34009344 <VD6G_PollReg8+0x24>
34009376:	bf00      	nop
34009378:	340336b5 	.word	0x340336b5
3400937c:	3402c54d 	.word	0x3402c54d

34009380 <VD6G_SetExposureModeInternal>:

static int VD6G_SetExposureModeInternal(VD6G_Ctx_t *ctx, VD6G_ExposureMode_t mode)
{
  int ret;

  if ((mode != VD6G_EXPOSURE_AUTO) &&
34009380:	2902      	cmp	r1, #2
{
34009382:	b537      	push	{r0, r1, r2, r4, r5, lr}
34009384:	4605      	mov	r5, r0
34009386:	460a      	mov	r2, r1
  if ((mode != VD6G_EXPOSURE_AUTO) &&
34009388:	d813      	bhi.n	340093b2 <VD6G_SetExposureModeInternal+0x32>
      (mode != VD6G_EXPOSURE_FREEZE_AEALGO) &&
      (mode != VD6G_EXPOSURE_MANUAL)) {
    return -1;
  }

  ret = ctx->write8(ctx, VD6G_REG_EXP_MODE, mode);
3400938a:	f240 414c 	movw	r1, #1100	@ 0x44c
3400938e:	6903      	ldr	r3, [r0, #16]
34009390:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009392:	4604      	mov	r4, r0
34009394:	b150      	cbz	r0, 340093ac <VD6G_SetExposureModeInternal+0x2c>
34009396:	9000      	str	r0, [sp, #0]
34009398:	f240 2367 	movw	r3, #615	@ 0x267
3400939c:	4628      	mov	r0, r5
3400939e:	4a06      	ldr	r2, [pc, #24]	@ (340093b8 <VD6G_SetExposureModeInternal+0x38>)
340093a0:	4906      	ldr	r1, [pc, #24]	@ (340093bc <VD6G_SetExposureModeInternal+0x3c>)
340093a2:	f7ff ff80 	bl	340092a6 <VD6G_error>
340093a6:	4628      	mov	r0, r5
340093a8:	f7ff ff9a 	bl	340092e0 <display_error>

  return 0;
}
340093ac:	4620      	mov	r0, r4
340093ae:	b003      	add	sp, #12
340093b0:	bd30      	pop	{r4, r5, pc}
    return -1;
340093b2:	f04f 34ff 	mov.w	r4, #4294967295
340093b6:	e7f9      	b.n	340093ac <VD6G_SetExposureModeInternal+0x2c>
340093b8:	340335a6 	.word	0x340335a6
340093bc:	3402c54d 	.word	0x3402c54d

340093c0 <VD6G_SetFlicker>:
static int VD6G_SetFlicker(VD6G_Ctx_t *ctx, VD6G_Flicker_t flicker)
{
  uint16_t mode;
  int ret;

  switch (flicker) {
340093c0:	2902      	cmp	r1, #2
{
340093c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
340093c4:	4605      	mov	r5, r0
340093c6:	d815      	bhi.n	340093f4 <VD6G_SetFlicker+0x34>
    break;
  default:
    return -1;
  }

  ret = ctx->write16(ctx, VD6G_REG_AE_COMPILER_CONTROL, mode);
340093c8:	4a0c      	ldr	r2, [pc, #48]	@ (340093fc <VD6G_SetFlicker+0x3c>)
340093ca:	6943      	ldr	r3, [r0, #20]
340093cc:	5c52      	ldrb	r2, [r2, r1]
340093ce:	f44f 6186 	mov.w	r1, #1072	@ 0x430
340093d2:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340093d4:	4604      	mov	r4, r0
340093d6:	b150      	cbz	r0, 340093ee <VD6G_SetFlicker+0x2e>
340093d8:	9000      	str	r0, [sp, #0]
340093da:	f240 33b1 	movw	r3, #945	@ 0x3b1
340093de:	4628      	mov	r0, r5
340093e0:	4a07      	ldr	r2, [pc, #28]	@ (34009400 <VD6G_SetFlicker+0x40>)
340093e2:	4908      	ldr	r1, [pc, #32]	@ (34009404 <VD6G_SetFlicker+0x44>)
340093e4:	f7ff ff5f 	bl	340092a6 <VD6G_error>
340093e8:	4628      	mov	r0, r5
340093ea:	f7ff ff79 	bl	340092e0 <display_error>

  return 0;
}
340093ee:	4620      	mov	r0, r4
340093f0:	b003      	add	sp, #12
340093f2:	bd30      	pop	{r4, r5, pc}
    return -1;
340093f4:	f04f 34ff 	mov.w	r4, #4294967295
340093f8:	e7f9      	b.n	340093ee <VD6G_SetFlicker+0x2e>
340093fa:	bf00      	nop
340093fc:	3403346c 	.word	0x3403346c
34009400:	34033570 	.word	0x34033570
34009404:	3402c54d 	.word	0x3402c54d

34009408 <VD6G_GetLineTimeInUs>:
{
34009408:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
3400940a:	460e      	mov	r6, r1
  ret = ctx->read16(ctx, VD6G_LINE_LENGTH, &line_len);
3400940c:	6883      	ldr	r3, [r0, #8]
3400940e:	f44f 7140 	mov.w	r1, #768	@ 0x300
34009412:	f10d 020e 	add.w	r2, sp, #14
{
34009416:	4605      	mov	r5, r0
  ret = ctx->read16(ctx, VD6G_LINE_LENGTH, &line_len);
34009418:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400941a:	4604      	mov	r4, r0
3400941c:	b968      	cbnz	r0, 3400943a <VD6G_GetLineTimeInUs+0x32>
  *line_time_in_us = ((uint64_t)line_len * 1000000) / VD6G_PIXEL_CLOCK;
3400941e:	a311      	add	r3, pc, #68	@ (adr r3, 34009464 <VD6G_GetLineTimeInUs+0x5c>)
34009420:	e9d3 2300 	ldrd	r2, r3, [r3]
34009424:	f8bd 000e 	ldrh.w	r0, [sp, #14]
34009428:	490b      	ldr	r1, [pc, #44]	@ (34009458 <VD6G_GetLineTimeInUs+0x50>)
3400942a:	fba0 0101 	umull	r0, r1, r0, r1
3400942e:	f7f8 fb99 	bl	34001b64 <__aeabi_uldivmod>
34009432:	6030      	str	r0, [r6, #0]
}
34009434:	4620      	mov	r0, r4
34009436:	b004      	add	sp, #16
34009438:	bd70      	pop	{r4, r5, r6, pc}
  VD6G_TraceError(ctx, ret);
3400943a:	9000      	str	r0, [sp, #0]
3400943c:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
34009440:	4628      	mov	r0, r5
34009442:	4a06      	ldr	r2, [pc, #24]	@ (3400945c <VD6G_GetLineTimeInUs+0x54>)
34009444:	4906      	ldr	r1, [pc, #24]	@ (34009460 <VD6G_GetLineTimeInUs+0x58>)
34009446:	f7ff ff2e 	bl	340092a6 <VD6G_error>
3400944a:	4628      	mov	r0, r5
3400944c:	f7ff ff48 	bl	340092e0 <display_error>
34009450:	e7f0      	b.n	34009434 <VD6G_GetLineTimeInUs+0x2c>
34009452:	bf00      	nop
34009454:	f3af 8000 	nop.w
34009458:	000f4240 	.word	0x000f4240
3400945c:	340334bd 	.word	0x340334bd
34009460:	3402c54d 	.word	0x3402c54d
34009464:	09959d00 	.word	0x09959d00
34009468:	00000000 	.word	0x00000000

3400946c <VD6G_warn.constprop.0>:
static void VD6G_warn(VD6G_Ctx_t *ctx, const char *format, ...)
3400946c:	b40e      	push	{r1, r2, r3}
3400946e:	b517      	push	{r0, r1, r2, r4, lr}
  if (!ctx->log)
34009470:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34009472:	b124      	cbz	r4, 3400947e <VD6G_warn.constprop.0+0x12>
  va_start(ap, format);
34009474:	ab06      	add	r3, sp, #24
  ctx->log(ctx, VD6G_LVL_WARNING, format, ap);
34009476:	2101      	movs	r1, #1
34009478:	4a03      	ldr	r2, [pc, #12]	@ (34009488 <VD6G_warn.constprop.0+0x1c>)
  va_start(ap, format);
3400947a:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_WARNING, format, ap);
3400947c:	47a0      	blx	r4
}
3400947e:	b003      	add	sp, #12
34009480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34009484:	b003      	add	sp, #12
34009486:	4770      	bx	lr
34009488:	3402c477 	.word	0x3402c477

3400948c <VD6G_dbg.constprop.0>:
static void VD6G_dbg(VD6G_Ctx_t *ctx, int lvl, const char *format, ...)
3400948c:	b40c      	push	{r2, r3}
3400948e:	b513      	push	{r0, r1, r4, lr}
  if (!ctx->log)
34009490:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34009492:	b124      	cbz	r4, 3400949e <VD6G_dbg.constprop.0+0x12>
  va_start(ap, format);
34009494:	ab05      	add	r3, sp, #20
  ctx->log(ctx, VD6G_LVL_DBG(lvl), format, ap);
34009496:	2103      	movs	r1, #3
34009498:	9a04      	ldr	r2, [sp, #16]
  va_start(ap, format);
3400949a:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_DBG(lvl), format, ap);
3400949c:	47a0      	blx	r4
}
3400949e:	b002      	add	sp, #8
340094a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340094a4:	b002      	add	sp, #8
340094a6:	4770      	bx	lr

340094a8 <VD6G_GetTopDie>:
{
340094a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
340094aa:	460e      	mov	r6, r1
  ret = ctx->read16(ctx, VD6G_REG_REVISION, &reg16);
340094ac:	6883      	ldr	r3, [r0, #8]
340094ae:	2102      	movs	r1, #2
340094b0:	f10d 020e 	add.w	r2, sp, #14
{
340094b4:	4605      	mov	r5, r0
  ret = ctx->read16(ctx, VD6G_REG_REVISION, &reg16);
340094b6:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340094b8:	4604      	mov	r4, r0
340094ba:	b968      	cbnz	r0, 340094d8 <VD6G_GetTopDie+0x30>
  VD6G_dbg(ctx, 0, "revision = 0x%04x\n", reg16);
340094bc:	4601      	mov	r1, r0
340094be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
340094c2:	4628      	mov	r0, r5
340094c4:	4a0a      	ldr	r2, [pc, #40]	@ (340094f0 <VD6G_GetTopDie+0x48>)
340094c6:	f7ff ffe1 	bl	3400948c <VD6G_dbg.constprop.0>
  *top_die = reg16 >> 8;
340094ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
340094ce:	0a1b      	lsrs	r3, r3, #8
340094d0:	7033      	strb	r3, [r6, #0]
}
340094d2:	4620      	mov	r0, r4
340094d4:	b004      	add	sp, #16
340094d6:	bd70      	pop	{r4, r5, r6, pc}
  VD6G_TraceError(ctx, ret);
340094d8:	9000      	str	r0, [sp, #0]
340094da:	f240 1373 	movw	r3, #371	@ 0x173
340094de:	4628      	mov	r0, r5
340094e0:	4a04      	ldr	r2, [pc, #16]	@ (340094f4 <VD6G_GetTopDie+0x4c>)
340094e2:	4905      	ldr	r1, [pc, #20]	@ (340094f8 <VD6G_GetTopDie+0x50>)
340094e4:	f7ff fedf 	bl	340092a6 <VD6G_error>
340094e8:	4628      	mov	r0, r5
340094ea:	f7ff fef9 	bl	340092e0 <display_error>
340094ee:	e7f0      	b.n	340094d2 <VD6G_GetTopDie+0x2a>
340094f0:	3402c6e3 	.word	0x3402c6e3
340094f4:	34033686 	.word	0x34033686
340094f8:	3402c54d 	.word	0x3402c54d

340094fc <VD6G_WaitState>:
{
340094fc:	b570      	push	{r4, r5, r6, lr}
  int ret = VD6G_PollReg8(ctx, VD6G_REG_SYSTEM_FSM, state);
340094fe:	b2ca      	uxtb	r2, r1
{
34009500:	460d      	mov	r5, r1
  int ret = VD6G_PollReg8(ctx, VD6G_REG_SYSTEM_FSM, state);
34009502:	2128      	movs	r1, #40	@ 0x28
{
34009504:	4606      	mov	r6, r0
  int ret = VD6G_PollReg8(ctx, VD6G_REG_SYSTEM_FSM, state);
34009506:	f7ff ff0b 	bl	34009320 <VD6G_PollReg8>
  if (ret)
3400950a:	4604      	mov	r4, r0
3400950c:	b130      	cbz	r0, 3400951c <VD6G_WaitState+0x20>
    VD6G_warn(ctx, "Unable to reach state %d\n", state);
3400950e:	462a      	mov	r2, r5
34009510:	4630      	mov	r0, r6
34009512:	4906      	ldr	r1, [pc, #24]	@ (3400952c <VD6G_WaitState+0x30>)
34009514:	f7ff ffaa 	bl	3400946c <VD6G_warn.constprop.0>
}
34009518:	4620      	mov	r0, r4
3400951a:	bd70      	pop	{r4, r5, r6, pc}
    VD6G_dbg(ctx, 0, "reach state %d\n", state);
3400951c:	4601      	mov	r1, r0
3400951e:	462b      	mov	r3, r5
34009520:	4630      	mov	r0, r6
34009522:	4a03      	ldr	r2, [pc, #12]	@ (34009530 <VD6G_WaitState+0x34>)
34009524:	f7ff ffb2 	bl	3400948c <VD6G_dbg.constprop.0>
  return ret;
34009528:	e7f6      	b.n	34009518 <VD6G_WaitState+0x1c>
3400952a:	bf00      	nop
3400952c:	3402c477 	.word	0x3402c477
34009530:	3402c4a2 	.word	0x3402c4a2

34009534 <VD6G_Init>:

  return 0;
}

int VD6G_Init(VD6G_Ctx_t *ctx, VD6G_Config_t *config)
{
34009534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct drv_vd6g_ctx *drv_ctx = &ctx->ctx;
  int ret;

  if (config->frame_rate < VD6G_MIN_FPS)
34009538:	688b      	ldr	r3, [r1, #8]
{
3400953a:	4605      	mov	r5, r0
  if (config->frame_rate < VD6G_MIN_FPS)
3400953c:	3b01      	subs	r3, #1
3400953e:	2b57      	cmp	r3, #87	@ 0x57
{
34009540:	460c      	mov	r4, r1
34009542:	b087      	sub	sp, #28
  if (config->frame_rate < VD6G_MIN_FPS)
34009544:	d802      	bhi.n	3400954c <VD6G_Init+0x18>
    return -1;
  if (config->frame_rate > VD6G_MAX_FPS)
    return -1;

  if ((config->resolution != VD6G_RES_QVGA_320_240) &&
34009546:	790b      	ldrb	r3, [r1, #4]
34009548:	2b08      	cmp	r3, #8
3400954a:	d905      	bls.n	34009558 <VD6G_Init+0x24>
    return -1;
3400954c:	f04f 34ff 	mov.w	r4, #4294967295
  ret = VD6G_SetupEarly(ctx);
  if (ret)
    return ret;

  return 0;
}
34009550:	4620      	mov	r0, r4
34009552:	b007      	add	sp, #28
34009554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((config->flip_mirror_mode != VD6G_MIRROR_FLIP_NONE) &&
34009558:	7b0b      	ldrb	r3, [r1, #12]
3400955a:	2b03      	cmp	r3, #3
3400955c:	d8f6      	bhi.n	3400954c <VD6G_Init+0x18>
  ctx->shutdown_pin(ctx, 0);
3400955e:	6803      	ldr	r3, [r0, #0]
34009560:	2100      	movs	r1, #0
34009562:	4798      	blx	r3
  ctx->delay(ctx, 10);
34009564:	210a      	movs	r1, #10
34009566:	4628      	mov	r0, r5
34009568:	6a2b      	ldr	r3, [r5, #32]
3400956a:	4798      	blx	r3
  ctx->shutdown_pin(ctx, 1);
3400956c:	2101      	movs	r1, #1
3400956e:	4628      	mov	r0, r5
34009570:	682b      	ldr	r3, [r5, #0]
34009572:	4798      	blx	r3
  drv_ctx->config_save = *config;
34009574:	f105 0630 	add.w	r6, r5, #48	@ 0x30
  ctx->delay(ctx, 10);
34009578:	210a      	movs	r1, #10
3400957a:	4628      	mov	r0, r5
3400957c:	6a2b      	ldr	r3, [r5, #32]
3400957e:	4798      	blx	r3
  drv_ctx->config_save = *config;
34009580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34009582:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34009584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34009586:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34009588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3400958a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  drv_ctx->is_streaming = 0;
3400958c:	2300      	movs	r3, #0
  drv_ctx->config_save = *config;
3400958e:	e894 0003 	ldmia.w	r4, {r0, r1}
34009592:	e886 0003 	stmia.w	r6, {r0, r1}
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_READY_TO_BOOT);
34009596:	2101      	movs	r1, #1
34009598:	4628      	mov	r0, r5
  drv_ctx->is_streaming = 0;
3400959a:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_READY_TO_BOOT);
3400959c:	f7ff ffae 	bl	340094fc <VD6G_WaitState>
  if (ret)
340095a0:	4604      	mov	r4, r0
340095a2:	2800      	cmp	r0, #0
340095a4:	d1d4      	bne.n	34009550 <VD6G_Init+0x1c>
  ret = ctx->read16(ctx, VD6G_REG_MODEL_ID, &reg16);
340095a6:	ae03      	add	r6, sp, #12
340095a8:	4601      	mov	r1, r0
340095aa:	4632      	mov	r2, r6
340095ac:	4628      	mov	r0, r5
340095ae:	68ab      	ldr	r3, [r5, #8]
340095b0:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340095b2:	4604      	mov	r4, r0
340095b4:	b988      	cbnz	r0, 340095da <VD6G_Init+0xa6>
  VD6G_dbg(ctx, 0, "model_id = 0x%04x\n", reg16);
340095b6:	4601      	mov	r1, r0
340095b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340095bc:	4aaf      	ldr	r2, [pc, #700]	@ (3400987c <VD6G_Init+0x348>)
340095be:	4628      	mov	r0, r5
340095c0:	f7ff ff64 	bl	3400948c <VD6G_dbg.constprop.0>
  if (reg16 != VD6G_MODEL_ID) {
340095c4:	f245 6203 	movw	r2, #22019	@ 0x5603
340095c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340095cc:	4293      	cmp	r3, r2
340095ce:	d010      	beq.n	340095f2 <VD6G_Init+0xbe>
    VD6G_error(ctx, "Bad model id expected 0x%04x / got 0x%04x\n", VD6G_MODEL_ID, reg16);
340095d0:	4628      	mov	r0, r5
340095d2:	49ab      	ldr	r1, [pc, #684]	@ (34009880 <VD6G_Init+0x34c>)
340095d4:	f7ff fe67 	bl	340092a6 <VD6G_error>
  if (ret)
340095d8:	e7b8      	b.n	3400954c <VD6G_Init+0x18>
  VD6G_TraceError(ctx, ret);
340095da:	f240 1381 	movw	r3, #385	@ 0x181
340095de:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
340095e0:	4aa8      	ldr	r2, [pc, #672]	@ (34009884 <VD6G_Init+0x350>)
  VD6G_TraceError(ctx, ret);
340095e2:	4628      	mov	r0, r5
340095e4:	49a8      	ldr	r1, [pc, #672]	@ (34009888 <VD6G_Init+0x354>)
340095e6:	f7ff fe5e 	bl	340092a6 <VD6G_error>
340095ea:	4628      	mov	r0, r5
340095ec:	f7ff fe78 	bl	340092e0 <display_error>
340095f0:	e7ae      	b.n	34009550 <VD6G_Init+0x1c>
  ret = VD6G_GetTopDie(ctx, &top_die);
340095f2:	4628      	mov	r0, r5
340095f4:	f10d 010b 	add.w	r1, sp, #11
340095f8:	f7ff ff56 	bl	340094a8 <VD6G_GetTopDie>
  if (ret)
340095fc:	4604      	mov	r4, r0
340095fe:	2800      	cmp	r0, #0
34009600:	d1a6      	bne.n	34009550 <VD6G_Init+0x1c>
  if (top_die != VD6G_TOP_DIE_SLOW_BOOT && top_die != VD6G_TOP_DIE_FAST_BOOT) {
34009602:	f89d 300b 	ldrb.w	r3, [sp, #11]
34009606:	2b20      	cmp	r3, #32
34009608:	d006      	beq.n	34009618 <VD6G_Init+0xe4>
3400960a:	2b31      	cmp	r3, #49	@ 0x31
3400960c:	d004      	beq.n	34009618 <VD6G_Init+0xe4>
    VD6G_error(ctx, "Unsupported revision\n");
3400960e:	499f      	ldr	r1, [pc, #636]	@ (3400988c <VD6G_Init+0x358>)
    VD6G_error(ctx, "External clock out of rangen\n");
34009610:	4628      	mov	r0, r5
34009612:	f7ff fe48 	bl	340092a6 <VD6G_error>
  if (ret)
34009616:	e799      	b.n	3400954c <VD6G_Init+0x18>
  ret = ctx->read16(ctx, VD6G_REG_ROM_REVISION, &reg16);
34009618:	4632      	mov	r2, r6
3400961a:	2114      	movs	r1, #20
3400961c:	4628      	mov	r0, r5
3400961e:	68ab      	ldr	r3, [r5, #8]
34009620:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009622:	4604      	mov	r4, r0
34009624:	b9d8      	cbnz	r0, 3400965e <VD6G_Init+0x12a>
  VD6G_dbg(ctx, 0, "rom = 0x%04x\n", reg16);
34009626:	4601      	mov	r1, r0
34009628:	f8bd 300c 	ldrh.w	r3, [sp, #12]
3400962c:	4628      	mov	r0, r5
3400962e:	4a98      	ldr	r2, [pc, #608]	@ (34009890 <VD6G_Init+0x35c>)
34009630:	f7ff ff2c 	bl	3400948c <VD6G_dbg.constprop.0>
  ret = VD6G_GetTopDie(ctx, &top_die);
34009634:	4628      	mov	r0, r5
34009636:	f10d 010b 	add.w	r1, sp, #11
3400963a:	f7ff ff35 	bl	340094a8 <VD6G_GetTopDie>
  if (ret)
3400963e:	4604      	mov	r4, r0
34009640:	2800      	cmp	r0, #0
34009642:	d185      	bne.n	34009550 <VD6G_Init+0x1c>
  switch (top_die) {
34009644:	f89d 300b 	ldrb.w	r3, [sp, #11]
34009648:	2b20      	cmp	r3, #32
3400964a:	d00c      	beq.n	34009666 <VD6G_Init+0x132>
3400964c:	2b31      	cmp	r3, #49	@ 0x31
3400964e:	d057      	beq.n	34009700 <VD6G_Init+0x1cc>
    assert(0);
34009650:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
34009654:	4b8f      	ldr	r3, [pc, #572]	@ (34009894 <VD6G_Init+0x360>)
34009656:	4a90      	ldr	r2, [pc, #576]	@ (34009898 <VD6G_Init+0x364>)
    assert(0);
34009658:	4890      	ldr	r0, [pc, #576]	@ (3400989c <VD6G_Init+0x368>)
3400965a:	f016 f9d5 	bl	3401fa08 <__assert_func>
  VD6G_TraceError(ctx, ret);
3400965e:	f240 1391 	movw	r3, #401	@ 0x191
34009662:	9000      	str	r0, [sp, #0]
34009664:	e7bc      	b.n	340095e0 <VD6G_Init+0xac>
  ret = ctx->write_array(ctx, 0x2000, (uint8_t *) patch_cut2, sizeof(patch_cut2));
34009666:	69ec      	ldr	r4, [r5, #28]
34009668:	f642 23f8 	movw	r3, #11000	@ 0x2af8
3400966c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
34009670:	4628      	mov	r0, r5
34009672:	4a8b      	ldr	r2, [pc, #556]	@ (340098a0 <VD6G_Init+0x36c>)
34009674:	47a0      	blx	r4
  VD6G_TraceError(ctx, ret);
34009676:	4604      	mov	r4, r0
34009678:	b120      	cbz	r0, 34009684 <VD6G_Init+0x150>
3400967a:	f44f 73d1 	mov.w	r3, #418	@ 0x1a2
3400967e:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009680:	4a88      	ldr	r2, [pc, #544]	@ (340098a4 <VD6G_Init+0x370>)
34009682:	e7ae      	b.n	340095e2 <VD6G_Init+0xae>
  ret = ctx->write8(ctx, VD6G_REG_BOOT, VD6G_CMD_PATCH_SETUP);
34009684:	2202      	movs	r2, #2
34009686:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400968a:	4628      	mov	r0, r5
3400968c:	692b      	ldr	r3, [r5, #16]
3400968e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009690:	4604      	mov	r4, r0
34009692:	bb38      	cbnz	r0, 340096e4 <VD6G_Init+0x1b0>
  ret = VD6G_PollReg8(ctx, VD6G_REG_BOOT, VD6G_CMD_ACK);
34009694:	4602      	mov	r2, r0
34009696:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400969a:	4628      	mov	r0, r5
3400969c:	f7ff fe40 	bl	34009320 <VD6G_PollReg8>
  if (ret)
340096a0:	4604      	mov	r4, r0
340096a2:	2800      	cmp	r0, #0
340096a4:	f47f af54 	bne.w	34009550 <VD6G_Init+0x1c>
  ret = ctx->read16(ctx, VD6G_REG_FWPATCH_REVISION, &reg16);
340096a8:	4632      	mov	r2, r6
340096aa:	211e      	movs	r1, #30
340096ac:	4628      	mov	r0, r5
340096ae:	68ab      	ldr	r3, [r5, #8]
340096b0:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340096b2:	4604      	mov	r4, r0
340096b4:	b9d0      	cbnz	r0, 340096ec <VD6G_Init+0x1b8>
  VD6G_dbg(ctx, 0, "patch = 0x%04x\n", reg16);
340096b6:	4601      	mov	r1, r0
340096b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340096bc:	4628      	mov	r0, r5
340096be:	4a7a      	ldr	r2, [pc, #488]	@ (340098a8 <VD6G_Init+0x374>)
340096c0:	f7ff fee4 	bl	3400948c <VD6G_dbg.constprop.0>
  if (reg16 != (patch_major << 8) + patch_minor) {
340096c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340096c8:	f5b3 7f07 	cmp.w	r3, #540	@ 0x21c
340096cc:	d012      	beq.n	340096f4 <VD6G_Init+0x1c0>
    VD6G_error(ctx, "bad patch version expected %d.%d got %d.%d\n", patch_major, patch_minor,
340096ce:	b2da      	uxtb	r2, r3
340096d0:	0a1b      	lsrs	r3, r3, #8
340096d2:	9201      	str	r2, [sp, #4]
340096d4:	9300      	str	r3, [sp, #0]
340096d6:	2202      	movs	r2, #2
340096d8:	231c      	movs	r3, #28
340096da:	4974      	ldr	r1, [pc, #464]	@ (340098ac <VD6G_Init+0x378>)
    VD6G_error(ctx, "bad vtpatch version, expected %d got rd:%d, gr:%d gt:%d\n", VT_REVISION, cur_vtpatch_rd_rev,
340096dc:	4628      	mov	r0, r5
340096de:	f7ff fde2 	bl	340092a6 <VD6G_error>
  if (ret)
340096e2:	e733      	b.n	3400954c <VD6G_Init+0x18>
  VD6G_TraceError(ctx, ret);
340096e4:	f240 13a5 	movw	r3, #421	@ 0x1a5
340096e8:	9000      	str	r0, [sp, #0]
340096ea:	e7c9      	b.n	34009680 <VD6G_Init+0x14c>
  VD6G_TraceError(ctx, ret);
340096ec:	f44f 73d6 	mov.w	r3, #428	@ 0x1ac
340096f0:	9000      	str	r0, [sp, #0]
340096f2:	e7c5      	b.n	34009680 <VD6G_Init+0x14c>
  VD6G_notice(ctx, "patch %d.%d applied\n", reg16 >> 8, reg16 & 0xff);
340096f4:	231c      	movs	r3, #28
340096f6:	2202      	movs	r2, #2
340096f8:	4628      	mov	r0, r5
340096fa:	496d      	ldr	r1, [pc, #436]	@ (340098b0 <VD6G_Init+0x37c>)
340096fc:	f7ff fde1 	bl	340092c2 <VD6G_notice>
  ret = ctx->write8(ctx, VD6G_REG_BOOT, VD6G_CMD_BOOT);
34009700:	2201      	movs	r2, #1
34009702:	f44f 7100 	mov.w	r1, #512	@ 0x200
34009706:	4628      	mov	r0, r5
34009708:	692b      	ldr	r3, [r5, #16]
3400970a:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400970c:	4604      	mov	r4, r0
3400970e:	b120      	cbz	r0, 3400971a <VD6G_Init+0x1e6>
34009710:	f240 13d5 	movw	r3, #469	@ 0x1d5
34009714:	4a67      	ldr	r2, [pc, #412]	@ (340098b4 <VD6G_Init+0x380>)
34009716:	9000      	str	r0, [sp, #0]
34009718:	e763      	b.n	340095e2 <VD6G_Init+0xae>
  ret = VD6G_PollReg8(ctx, VD6G_REG_BOOT, VD6G_CMD_ACK);
3400971a:	4602      	mov	r2, r0
3400971c:	f44f 7100 	mov.w	r1, #512	@ 0x200
34009720:	4628      	mov	r0, r5
34009722:	f7ff fdfd 	bl	34009320 <VD6G_PollReg8>
  if (ret)
34009726:	4604      	mov	r4, r0
34009728:	2800      	cmp	r0, #0
3400972a:	f47f af11 	bne.w	34009550 <VD6G_Init+0x1c>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
3400972e:	2102      	movs	r1, #2
34009730:	4628      	mov	r0, r5
34009732:	f7ff fee3 	bl	340094fc <VD6G_WaitState>
  if (ret)
34009736:	4604      	mov	r4, r0
34009738:	2800      	cmp	r0, #0
3400973a:	f47f af09 	bne.w	34009550 <VD6G_Init+0x1c>
  VD6G_notice(ctx, "sensor boot successfully\n");
3400973e:	4628      	mov	r0, r5
34009740:	495d      	ldr	r1, [pc, #372]	@ (340098b8 <VD6G_Init+0x384>)
34009742:	f7ff fdbe 	bl	340092c2 <VD6G_notice>
  ret = VD6G_GetTopDie(ctx, &top_die);
34009746:	4628      	mov	r0, r5
34009748:	f10d 0109 	add.w	r1, sp, #9
3400974c:	f7ff feac 	bl	340094a8 <VD6G_GetTopDie>
  if (ret)
34009750:	4604      	mov	r4, r0
34009752:	2800      	cmp	r0, #0
34009754:	f47f aefc 	bne.w	34009550 <VD6G_Init+0x1c>
  switch (top_die) {
34009758:	f89d 3009 	ldrb.w	r3, [sp, #9]
3400975c:	2b20      	cmp	r3, #32
3400975e:	d007      	beq.n	34009770 <VD6G_Init+0x23c>
34009760:	2b31      	cmp	r3, #49	@ 0x31
34009762:	f000 80ff 	beq.w	34009964 <VD6G_Init+0x430>
    assert(0);
34009766:	f44f 710d 	mov.w	r1, #564	@ 0x234
3400976a:	4b4a      	ldr	r3, [pc, #296]	@ (34009894 <VD6G_Init+0x360>)
3400976c:	4a53      	ldr	r2, [pc, #332]	@ (340098bc <VD6G_Init+0x388>)
3400976e:	e773      	b.n	34009658 <VD6G_Init+0x124>
  ret = ctx->write8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_START_VTRAM_UPDATE);
34009770:	2201      	movs	r2, #1
34009772:	f240 2103 	movw	r1, #515	@ 0x203
34009776:	4628      	mov	r0, r5
34009778:	692b      	ldr	r3, [r5, #16]
3400977a:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400977c:	4604      	mov	r4, r0
3400977e:	b120      	cbz	r0, 3400978a <VD6G_Init+0x256>
34009780:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
34009784:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009786:	4a4e      	ldr	r2, [pc, #312]	@ (340098c0 <VD6G_Init+0x38c>)
34009788:	e72b      	b.n	340095e2 <VD6G_Init+0xae>
  ret = VD6G_PollReg8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_ACK);
3400978a:	4602      	mov	r2, r0
3400978c:	f240 2103 	movw	r1, #515	@ 0x203
34009790:	4628      	mov	r0, r5
34009792:	f7ff fdc5 	bl	34009320 <VD6G_PollReg8>
  if (ret)
34009796:	4604      	mov	r4, r0
34009798:	2800      	cmp	r0, #0
3400979a:	f47f aed9 	bne.w	34009550 <VD6G_Init+0x1c>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
3400979e:	2102      	movs	r1, #2
340097a0:	4628      	mov	r0, r5
340097a2:	f7ff feab 	bl	340094fc <VD6G_WaitState>
  if (ret)
340097a6:	4604      	mov	r4, r0
340097a8:	2800      	cmp	r0, #0
340097aa:	f47f aed1 	bne.w	34009550 <VD6G_Init+0x1c>
  for (i = 0; i < vtpatch_area_nb; i++) {
340097ae:	4681      	mov	r9, r0
340097b0:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 340098c4 <VD6G_Init+0x390>
340097b4:	f8df a110 	ldr.w	sl, [pc, #272]	@ 340098c8 <VD6G_Init+0x394>
    ret = ctx->write_array(ctx, vtpatch_desc[i].offset, (uint8_t *) (vtpatch + vtpatch_offset),
340097b8:	f8df b110 	ldr.w	fp, [pc, #272]	@ 340098cc <VD6G_Init+0x398>
  for (i = 0; i < vtpatch_area_nb; i++) {
340097bc:	f8da 3000 	ldr.w	r3, [sl]
340097c0:	4599      	cmp	r9, r3
340097c2:	db13      	blt.n	340097ec <VD6G_Init+0x2b8>
  ret = ctx->write8(ctx, 0xd9f8, VT_REVISION);
340097c4:	2211      	movs	r2, #17
340097c6:	f64d 11f8 	movw	r1, #55800	@ 0xd9f8
340097ca:	4628      	mov	r0, r5
340097cc:	692b      	ldr	r3, [r5, #16]
340097ce:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340097d0:	4604      	mov	r4, r0
340097d2:	bb58      	cbnz	r0, 3400982c <VD6G_Init+0x2f8>
  ret = ctx->write8(ctx, 0xaffc, VT_REVISION);
340097d4:	2211      	movs	r2, #17
340097d6:	f64a 71fc 	movw	r1, #45052	@ 0xaffc
340097da:	4628      	mov	r0, r5
340097dc:	692b      	ldr	r3, [r5, #16]
340097de:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340097e0:	4604      	mov	r4, r0
340097e2:	b338      	cbz	r0, 34009834 <VD6G_Init+0x300>
340097e4:	f240 13ff 	movw	r3, #511	@ 0x1ff
340097e8:	9000      	str	r0, [sp, #0]
340097ea:	e7cc      	b.n	34009786 <VD6G_Init+0x252>
    ret = ctx->write_array(ctx, vtpatch_desc[i].offset, (uint8_t *) (vtpatch + vtpatch_offset),
340097ec:	69ef      	ldr	r7, [r5, #28]
340097ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
340097f2:	f8b8 1000 	ldrh.w	r1, [r8]
340097f6:	4628      	mov	r0, r5
340097f8:	eb0b 0204 	add.w	r2, fp, r4
340097fc:	47b8      	blx	r7
    VD6G_TraceError(ctx, ret);
340097fe:	f108 0808 	add.w	r8, r8, #8
34009802:	4607      	mov	r7, r0
34009804:	b928      	cbnz	r0, 34009812 <VD6G_Init+0x2de>
    vtpatch_offset += vtpatch_desc[i].size;
34009806:	f858 3c04 	ldr.w	r3, [r8, #-4]
  for (i = 0; i < vtpatch_area_nb; i++) {
3400980a:	f109 0901 	add.w	r9, r9, #1
    vtpatch_offset += vtpatch_desc[i].size;
3400980e:	441c      	add	r4, r3
  for (i = 0; i < vtpatch_area_nb; i++) {
34009810:	e7d4      	b.n	340097bc <VD6G_Init+0x288>
    VD6G_TraceError(ctx, ret);
34009812:	f240 13f9 	movw	r3, #505	@ 0x1f9
34009816:	4a2a      	ldr	r2, [pc, #168]	@ (340098c0 <VD6G_Init+0x38c>)
34009818:	491b      	ldr	r1, [pc, #108]	@ (34009888 <VD6G_Init+0x354>)
3400981a:	9000      	str	r0, [sp, #0]
3400981c:	4628      	mov	r0, r5
3400981e:	f7ff fd42 	bl	340092a6 <VD6G_error>
34009822:	4628      	mov	r0, r5
34009824:	f7ff fd5c 	bl	340092e0 <display_error>
    return ret;
34009828:	463c      	mov	r4, r7
3400982a:	e691      	b.n	34009550 <VD6G_Init+0x1c>
  VD6G_TraceError(ctx, ret);
3400982c:	f240 13fd 	movw	r3, #509	@ 0x1fd
34009830:	9000      	str	r0, [sp, #0]
34009832:	e7a8      	b.n	34009786 <VD6G_Init+0x252>
  ret = ctx->write8(ctx, 0xbbb4, VT_REVISION);
34009834:	2211      	movs	r2, #17
34009836:	f64b 31b4 	movw	r1, #48052	@ 0xbbb4
3400983a:	4628      	mov	r0, r5
3400983c:	692b      	ldr	r3, [r5, #16]
3400983e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009840:	4604      	mov	r4, r0
34009842:	b118      	cbz	r0, 3400984c <VD6G_Init+0x318>
34009844:	f240 2301 	movw	r3, #513	@ 0x201
34009848:	9000      	str	r0, [sp, #0]
3400984a:	e79c      	b.n	34009786 <VD6G_Init+0x252>
  ret = ctx->write8(ctx, 0xb898, VT_REVISION);
3400984c:	2211      	movs	r2, #17
3400984e:	f64b 0198 	movw	r1, #47256	@ 0xb898
34009852:	4628      	mov	r0, r5
34009854:	692b      	ldr	r3, [r5, #16]
34009856:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009858:	4604      	mov	r4, r0
3400985a:	b118      	cbz	r0, 34009864 <VD6G_Init+0x330>
3400985c:	f240 2303 	movw	r3, #515	@ 0x203
34009860:	9000      	str	r0, [sp, #0]
34009862:	e790      	b.n	34009786 <VD6G_Init+0x252>
  ret = ctx->write8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_END_VTRAM_UPDATE);
34009864:	2202      	movs	r2, #2
34009866:	f240 2103 	movw	r1, #515	@ 0x203
3400986a:	4628      	mov	r0, r5
3400986c:	692b      	ldr	r3, [r5, #16]
3400986e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009870:	4604      	mov	r4, r0
34009872:	b368      	cbz	r0, 340098d0 <VD6G_Init+0x39c>
34009874:	f240 2306 	movw	r3, #518	@ 0x206
34009878:	9000      	str	r0, [sp, #0]
3400987a:	e784      	b.n	34009786 <VD6G_Init+0x252>
3400987c:	3402c684 	.word	0x3402c684
34009880:	3402c6a7 	.word	0x3402c6a7
34009884:	34033695 	.word	0x34033695
34009888:	3402c54d 	.word	0x3402c54d
3400988c:	3402c83f 	.word	0x3402c83f
34009890:	3402c733 	.word	0x3402c733
34009894:	3402b7cd 	.word	0x3402b7cd
34009898:	34033676 	.word	0x34033676
3400989c:	3402c7e6 	.word	0x3402c7e6
340098a0:	34034f88 	.word	0x34034f88
340098a4:	3403365e 	.word	0x3403365e
340098a8:	3402c573 	.word	0x3402c573
340098ac:	3402c593 	.word	0x3402c593
340098b0:	3402c5cf 	.word	0x3402c5cf
340098b4:	34033651 	.word	0x34033651
340098b8:	3402c5f4 	.word	0x3402c5f4
340098bc:	3403363f 	.word	0x3403363f
340098c0:	34033625 	.word	0x34033625
340098c4:	340cc72c 	.word	0x340cc72c
340098c8:	340cc728 	.word	0x340cc728
340098cc:	340337c0 	.word	0x340337c0
  ret = VD6G_PollReg8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_ACK);
340098d0:	4602      	mov	r2, r0
340098d2:	f240 2103 	movw	r1, #515	@ 0x203
340098d6:	4628      	mov	r0, r5
340098d8:	f7ff fd22 	bl	34009320 <VD6G_PollReg8>
  if (ret)
340098dc:	4604      	mov	r4, r0
340098de:	2800      	cmp	r0, #0
340098e0:	f47f ae36 	bne.w	34009550 <VD6G_Init+0x1c>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
340098e4:	2102      	movs	r1, #2
340098e6:	4628      	mov	r0, r5
340098e8:	f7ff fe08 	bl	340094fc <VD6G_WaitState>
  if (ret)
340098ec:	4604      	mov	r4, r0
340098ee:	2800      	cmp	r0, #0
340098f0:	f47f ae2e 	bne.w	34009550 <VD6G_Init+0x1c>
  ret = ctx->read8(ctx, VD6G_REG_VTIMING_RD_REVISION, &cur_vtpatch_rd_rev);
340098f4:	2120      	movs	r1, #32
340098f6:	4628      	mov	r0, r5
340098f8:	686b      	ldr	r3, [r5, #4]
340098fa:	f10d 020a 	add.w	r2, sp, #10
340098fe:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009900:	4604      	mov	r4, r0
34009902:	b958      	cbnz	r0, 3400991c <VD6G_Init+0x3e8>
  ret = ctx->read8(ctx, VD6G_REG_VTIMING_GR_REVISION, &cur_vtpatch_gr_rev);
34009904:	2124      	movs	r1, #36	@ 0x24
34009906:	4628      	mov	r0, r5
34009908:	686b      	ldr	r3, [r5, #4]
3400990a:	f10d 020b 	add.w	r2, sp, #11
3400990e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009910:	4604      	mov	r4, r0
34009912:	b138      	cbz	r0, 34009924 <VD6G_Init+0x3f0>
34009914:	f240 2313 	movw	r3, #531	@ 0x213
34009918:	9000      	str	r0, [sp, #0]
3400991a:	e734      	b.n	34009786 <VD6G_Init+0x252>
  VD6G_TraceError(ctx, ret);
3400991c:	f240 2311 	movw	r3, #529	@ 0x211
34009920:	9000      	str	r0, [sp, #0]
34009922:	e730      	b.n	34009786 <VD6G_Init+0x252>
  ret = ctx->read8(ctx, VD6G_REG_VTIMING_GT_REVISION, &cur_vtpatch_gt_rev);
34009924:	4632      	mov	r2, r6
34009926:	2126      	movs	r1, #38	@ 0x26
34009928:	4628      	mov	r0, r5
3400992a:	686b      	ldr	r3, [r5, #4]
3400992c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400992e:	4604      	mov	r4, r0
34009930:	b118      	cbz	r0, 3400993a <VD6G_Init+0x406>
34009932:	f240 2315 	movw	r3, #533	@ 0x215
34009936:	9000      	str	r0, [sp, #0]
34009938:	e725      	b.n	34009786 <VD6G_Init+0x252>
  if (cur_vtpatch_rd_rev != VT_REVISION ||
3400993a:	f89d 300a 	ldrb.w	r3, [sp, #10]
      cur_vtpatch_gr_rev != VT_REVISION ||
3400993e:	f89d 100b 	ldrb.w	r1, [sp, #11]
  if (cur_vtpatch_rd_rev != VT_REVISION ||
34009942:	2b11      	cmp	r3, #17
      cur_vtpatch_gt_rev != VT_REVISION) {
34009944:	f89d 200c 	ldrb.w	r2, [sp, #12]
  if (cur_vtpatch_rd_rev != VT_REVISION ||
34009948:	d004      	beq.n	34009954 <VD6G_Init+0x420>
    VD6G_error(ctx, "bad vtpatch version, expected %d got rd:%d, gr:%d gt:%d\n", VT_REVISION, cur_vtpatch_rd_rev,
3400994a:	e9cd 1200 	strd	r1, r2, [sp]
3400994e:	2211      	movs	r2, #17
34009950:	496e      	ldr	r1, [pc, #440]	@ (34009b0c <VD6G_Init+0x5d8>)
34009952:	e6c3      	b.n	340096dc <VD6G_Init+0x1a8>
  if (cur_vtpatch_rd_rev != VT_REVISION ||
34009954:	2911      	cmp	r1, #17
34009956:	d1f8      	bne.n	3400994a <VD6G_Init+0x416>
      cur_vtpatch_gr_rev != VT_REVISION ||
34009958:	2a11      	cmp	r2, #17
3400995a:	d1f6      	bne.n	3400994a <VD6G_Init+0x416>
  VD6G_notice(ctx, "VT patch %d applied\n", VT_REVISION);
3400995c:	4628      	mov	r0, r5
3400995e:	496c      	ldr	r1, [pc, #432]	@ (34009b10 <VD6G_Init+0x5dc>)
34009960:	f7ff fcaf 	bl	340092c2 <VD6G_notice>
  ret = ctx->read8(ctx, VD6G_REG_OPTICAL_REVISION, &reg8);
34009964:	4632      	mov	r2, r6
34009966:	211a      	movs	r1, #26
34009968:	4628      	mov	r0, r5
3400996a:	686b      	ldr	r3, [r5, #4]
3400996c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400996e:	4604      	mov	r4, r0
34009970:	b120      	cbz	r0, 3400997c <VD6G_Init+0x448>
34009972:	f240 2341 	movw	r3, #577	@ 0x241
34009976:	4a67      	ldr	r2, [pc, #412]	@ (34009b14 <VD6G_Init+0x5e0>)
34009978:	9000      	str	r0, [sp, #0]
3400997a:	e632      	b.n	340095e2 <VD6G_Init+0xae>
  if (!(reg8 & 1)) {
3400997c:	f89d 300c 	ldrb.w	r3, [sp, #12]
34009980:	f013 0301 	ands.w	r3, r3, #1
34009984:	d008      	beq.n	34009998 <VD6G_Init+0x464>
  switch (drv_ctx->config_save.flip_mirror_mode) {
34009986:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
3400998a:	2a03      	cmp	r2, #3
3400998c:	d81b      	bhi.n	340099c6 <VD6G_Init+0x492>
3400998e:	e8df f002 	tbb	[pc, r2]
34009992:	021f      	.short	0x021f
34009994:	1803      	.short	0x1803
34009996:	2304      	movs	r3, #4
34009998:	f240 4767 	movw	r7, #1127	@ 0x467
  for (i = 0; i < VD6G_GPIO_NB; i++) {
3400999c:	f240 496f 	movw	r9, #1135	@ 0x46f
    ctx->bayer = VD6G_BAYER_RGGB;
340099a0:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
340099a4:	f105 085b 	add.w	r8, r5, #91	@ 0x5b
    ret = ctx->write8(ctx, VD6G_REG_GPIO_x_CTRL(i), drv_ctx->config_save.gpio_ctrl[i]);
340099a8:	4639      	mov	r1, r7
340099aa:	4628      	mov	r0, r5
340099ac:	692b      	ldr	r3, [r5, #16]
340099ae:	f818 2f01 	ldrb.w	r2, [r8, #1]!
340099b2:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
340099b4:	4604      	mov	r4, r0
340099b6:	b168      	cbz	r0, 340099d4 <VD6G_Init+0x4a0>
340099b8:	f44f 731d 	mov.w	r3, #628	@ 0x274
340099bc:	4a56      	ldr	r2, [pc, #344]	@ (34009b18 <VD6G_Init+0x5e4>)
340099be:	9000      	str	r0, [sp, #0]
340099c0:	e60f      	b.n	340095e2 <VD6G_Init+0xae>
  case VD6G_MIRROR_FLIP:
340099c2:	4613      	mov	r3, r2
340099c4:	e7e8      	b.n	34009998 <VD6G_Init+0x464>
    assert(0);
340099c6:	f240 2156 	movw	r1, #598	@ 0x256
340099ca:	4b54      	ldr	r3, [pc, #336]	@ (34009b1c <VD6G_Init+0x5e8>)
340099cc:	4a51      	ldr	r2, [pc, #324]	@ (34009b14 <VD6G_Init+0x5e0>)
340099ce:	e643      	b.n	34009658 <VD6G_Init+0x124>
  switch (drv_ctx->config_save.flip_mirror_mode) {
340099d0:	2302      	movs	r3, #2
340099d2:	e7e1      	b.n	34009998 <VD6G_Init+0x464>
  for (i = 0; i < VD6G_GPIO_NB; i++) {
340099d4:	3701      	adds	r7, #1
340099d6:	b2bf      	uxth	r7, r7
340099d8:	454f      	cmp	r7, r9
340099da:	d1e5      	bne.n	340099a8 <VD6G_Init+0x474>
  ret = VD6G_ComputeClocks(ctx, drv_ctx->config_save.ext_clock_freq_in_hz, &pll_prediv, &pll_mult);
340099dc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  const unsigned int predivs[] = { 1, 2, 4 };
340099de:	4a50      	ldr	r2, [pc, #320]	@ (34009b20 <VD6G_Init+0x5ec>)
340099e0:	ca07      	ldmia	r2, {r0, r1, r2}
340099e2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  if (ext_clock < 6 * M_HZ ||
340099e6:	484f      	ldr	r0, [pc, #316]	@ (34009b24 <VD6G_Init+0x5f0>)
340099e8:	f5a3 02b7 	sub.w	r2, r3, #5996544	@ 0x5b8000
340099ec:	f5a2 6258 	sub.w	r2, r2, #3456	@ 0xd80
340099f0:	4282      	cmp	r2, r0
340099f2:	4631      	mov	r1, r6
340099f4:	d830      	bhi.n	34009a58 <VD6G_Init+0x524>
    if (ext_clock / *pll_prediv < 12 * M_HZ)
340099f6:	4a4c      	ldr	r2, [pc, #304]	@ (34009b28 <VD6G_Init+0x5f4>)
    *pll_prediv = predivs[i];
340099f8:	f851 0b04 	ldr.w	r0, [r1], #4
    if (ext_clock / *pll_prediv < 12 * M_HZ)
340099fc:	fa5f f880 	uxtb.w	r8, r0
34009a00:	fbb3 f0f8 	udiv	r0, r3, r8
34009a04:	4290      	cmp	r0, r2
34009a06:	d302      	bcc.n	34009a0e <VD6G_Init+0x4da>
  for (i = 0; i < ARRAY_SIZE(predivs); i++) {
34009a08:	3401      	adds	r4, #1
34009a0a:	2c03      	cmp	r4, #3
34009a0c:	d1f4      	bne.n	340099f8 <VD6G_Init+0x4c4>
  *pll_mult = (VD6G_TARGET_PLL * *pll_prediv + ext_clock / 2) / ext_clock;
34009a0e:	4a47      	ldr	r2, [pc, #284]	@ (34009b2c <VD6G_Init+0x5f8>)
34009a10:	085f      	lsrs	r7, r3, #1
34009a12:	fb02 7708 	mla	r7, r2, r8, r7
34009a16:	fbb7 f7f3 	udiv	r7, r7, r3
  VD6G_dbg(ctx, 0, "Ext Clock = %d Hz\n", ext_clock);
34009a1a:	2100      	movs	r1, #0
34009a1c:	4628      	mov	r0, r5
34009a1e:	4a44      	ldr	r2, [pc, #272]	@ (34009b30 <VD6G_Init+0x5fc>)
34009a20:	f7ff fd34 	bl	3400948c <VD6G_dbg.constprop.0>
  VD6G_dbg(ctx, 0, "PLL mult = %d\n", *pll_mult);
34009a24:	b2ff      	uxtb	r7, r7
  VD6G_dbg(ctx, 0, "PLL prediv = %d\n", *pll_prediv);
34009a26:	4643      	mov	r3, r8
34009a28:	2100      	movs	r1, #0
34009a2a:	4628      	mov	r0, r5
34009a2c:	4a41      	ldr	r2, [pc, #260]	@ (34009b34 <VD6G_Init+0x600>)
34009a2e:	f7ff fd2d 	bl	3400948c <VD6G_dbg.constprop.0>
  VD6G_dbg(ctx, 0, "PLL mult = %d\n", *pll_mult);
34009a32:	463b      	mov	r3, r7
34009a34:	2100      	movs	r1, #0
34009a36:	4628      	mov	r0, r5
34009a38:	4a3f      	ldr	r2, [pc, #252]	@ (34009b38 <VD6G_Init+0x604>)
34009a3a:	f7ff fd27 	bl	3400948c <VD6G_dbg.constprop.0>
  ret = ctx->write32(ctx, VD6G_REG_EXT_CLOCK, drv_ctx->config_save.ext_clock_freq_in_hz);
34009a3e:	f44f 7108 	mov.w	r1, #544	@ 0x220
34009a42:	4628      	mov	r0, r5
34009a44:	69ab      	ldr	r3, [r5, #24]
34009a46:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
34009a48:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009a4a:	4604      	mov	r4, r0
34009a4c:	b130      	cbz	r0, 34009a5c <VD6G_Init+0x528>
34009a4e:	f44f 7331 	mov.w	r3, #708	@ 0x2c4
34009a52:	9000      	str	r0, [sp, #0]
    VD6G_TraceError(ctx, ret);
34009a54:	4a39      	ldr	r2, [pc, #228]	@ (34009b3c <VD6G_Init+0x608>)
34009a56:	e5c4      	b.n	340095e2 <VD6G_Init+0xae>
    VD6G_error(ctx, "External clock out of rangen\n");
34009a58:	4939      	ldr	r1, [pc, #228]	@ (34009b40 <VD6G_Init+0x60c>)
34009a5a:	e5d9      	b.n	34009610 <VD6G_Init+0xdc>
  ret = ctx->write8(ctx, VD6G_REG_CLK_PLL_PREDIV, pll_prediv);
34009a5c:	4642      	mov	r2, r8
34009a5e:	f44f 7109 	mov.w	r1, #548	@ 0x224
34009a62:	4628      	mov	r0, r5
34009a64:	692b      	ldr	r3, [r5, #16]
34009a66:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009a68:	4604      	mov	r4, r0
34009a6a:	b958      	cbnz	r0, 34009a84 <VD6G_Init+0x550>
  ret = ctx->write8(ctx, VD6G_REG_CLK_SYS_PLL_MULT, pll_mult);
34009a6c:	463a      	mov	r2, r7
34009a6e:	f240 2126 	movw	r1, #550	@ 0x226
34009a72:	4628      	mov	r0, r5
34009a74:	692b      	ldr	r3, [r5, #16]
34009a76:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009a78:	4604      	mov	r4, r0
34009a7a:	b138      	cbz	r0, 34009a8c <VD6G_Init+0x558>
34009a7c:	f240 23ca 	movw	r3, #714	@ 0x2ca
34009a80:	9000      	str	r0, [sp, #0]
34009a82:	e7e7      	b.n	34009a54 <VD6G_Init+0x520>
  VD6G_TraceError(ctx, ret);
34009a84:	f240 23c7 	movw	r3, #711	@ 0x2c7
34009a88:	9000      	str	r0, [sp, #0]
34009a8a:	e7e3      	b.n	34009a54 <VD6G_Init+0x520>
  if (drv_ctx->config_save.line_len) {
34009a8c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
34009a8e:	b962      	cbnz	r2, 34009aaa <VD6G_Init+0x576>
  ret = ctx->read16(ctx, VD6G_LINE_LENGTH, &line_length);
34009a90:	4632      	mov	r2, r6
34009a92:	f44f 7140 	mov.w	r1, #768	@ 0x300
34009a96:	4628      	mov	r0, r5
34009a98:	68ab      	ldr	r3, [r5, #8]
34009a9a:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009a9c:	4604      	mov	r4, r0
34009a9e:	b188      	cbz	r0, 34009ac4 <VD6G_Init+0x590>
34009aa0:	f44f 7350 	mov.w	r3, #832	@ 0x340
34009aa4:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009aa6:	4a27      	ldr	r2, [pc, #156]	@ (34009b44 <VD6G_Init+0x610>)
34009aa8:	e59b      	b.n	340095e2 <VD6G_Init+0xae>
    ret = ctx->write16(ctx, VD6G_LINE_LENGTH, drv_ctx->config_save.line_len);
34009aaa:	f44f 7140 	mov.w	r1, #768	@ 0x300
34009aae:	4628      	mov	r0, r5
34009ab0:	696b      	ldr	r3, [r5, #20]
34009ab2:	b292      	uxth	r2, r2
34009ab4:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34009ab6:	4604      	mov	r4, r0
34009ab8:	2800      	cmp	r0, #0
34009aba:	d0e9      	beq.n	34009a90 <VD6G_Init+0x55c>
34009abc:	f240 23ce 	movw	r3, #718	@ 0x2ce
34009ac0:	9000      	str	r0, [sp, #0]
34009ac2:	e7c7      	b.n	34009a54 <VD6G_Init+0x520>
  VD6G_dbg(ctx, 0, "Line len = %d\n", line_length);
34009ac4:	4601      	mov	r1, r0
34009ac6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34009aca:	4628      	mov	r0, r5
34009acc:	4a1e      	ldr	r2, [pc, #120]	@ (34009b48 <VD6G_Init+0x614>)
34009ace:	f7ff fcdd 	bl	3400948c <VD6G_dbg.constprop.0>
  frame_length = VD6G_PIXEL_CLOCK / (line_length * drv_ctx->config_save.frame_rate);
34009ad2:	6baa      	ldr	r2, [r5, #56]	@ 0x38
34009ad4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34009ad8:	4e1c      	ldr	r6, [pc, #112]	@ (34009b4c <VD6G_Init+0x618>)
34009ada:	4353      	muls	r3, r2
34009adc:	fb96 f6f3 	sdiv	r6, r6, r3
  VD6G_dbg(ctx, 0, "Set frame_length to %d to reach %d fps\n", frame_length, drv_ctx->config_save.frame_rate);
34009ae0:	4621      	mov	r1, r4
34009ae2:	4628      	mov	r0, r5
34009ae4:	9200      	str	r2, [sp, #0]
34009ae6:	b2b3      	uxth	r3, r6
34009ae8:	4a19      	ldr	r2, [pc, #100]	@ (34009b50 <VD6G_Init+0x61c>)
34009aea:	f7ff fccf 	bl	3400948c <VD6G_dbg.constprop.0>
  ret = ctx->write16(ctx, VD6G_FRAME_LENGTH, frame_length);
34009aee:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34009af2:	4628      	mov	r0, r5
34009af4:	696b      	ldr	r3, [r5, #20]
34009af6:	b2b2      	uxth	r2, r6
34009af8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009afa:	4604      	mov	r4, r0
34009afc:	2800      	cmp	r0, #0
34009afe:	f43f ad27 	beq.w	34009550 <VD6G_Init+0x1c>
34009b02:	f240 3346 	movw	r3, #838	@ 0x346
34009b06:	9000      	str	r0, [sp, #0]
34009b08:	e7cd      	b.n	34009aa6 <VD6G_Init+0x572>
34009b0a:	bf00      	nop
34009b0c:	3402c855 	.word	0x3402c855
34009b10:	3402c88e 	.word	0x3402c88e
34009b14:	34033613 	.word	0x34033613
34009b18:	34033608 	.word	0x34033608
34009b1c:	3402b7cd 	.word	0x3402b7cd
34009b20:	3402ab30 	.word	0x3402ab30
34009b24:	01406f40 	.word	0x01406f40
34009b28:	00b71b00 	.word	0x00b71b00
34009b2c:	2fec1100 	.word	0x2fec1100
34009b30:	3402c8c1 	.word	0x3402c8c1
34009b34:	3402c8d4 	.word	0x3402c8d4
34009b38:	3402c8e5 	.word	0x3402c8e5
34009b3c:	340335f7 	.word	0x340335f7
34009b40:	3402c8a3 	.word	0x3402c8a3
34009b44:	340335e3 	.word	0x340335e3
34009b48:	3402c8f4 	.word	0x3402c8f4
34009b4c:	09959d00 	.word	0x09959d00
34009b50:	3402c775 	.word	0x3402c775

34009b54 <VD6G_DeInit>:

int VD6G_DeInit(VD6G_Ctx_t *ctx)
{
34009b54:	b538      	push	{r3, r4, r5, lr}
  struct drv_vd6g_ctx *drv_ctx = &ctx->ctx;

  if (drv_ctx->is_streaming)
34009b56:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
{
34009b58:	4604      	mov	r4, r0
  if (drv_ctx->is_streaming)
34009b5a:	b945      	cbnz	r5, 34009b6e <VD6G_DeInit+0x1a>
    return -1;

  ctx->shutdown_pin(ctx, 0);
34009b5c:	6803      	ldr	r3, [r0, #0]
34009b5e:	4629      	mov	r1, r5
34009b60:	4798      	blx	r3
  ctx->delay(ctx, 10);
34009b62:	210a      	movs	r1, #10
34009b64:	4620      	mov	r0, r4
34009b66:	6a23      	ldr	r3, [r4, #32]
34009b68:	4798      	blx	r3

  return 0;
}
34009b6a:	4628      	mov	r0, r5
34009b6c:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
34009b6e:	f04f 35ff 	mov.w	r5, #4294967295
34009b72:	e7fa      	b.n	34009b6a <VD6G_DeInit+0x16>

34009b74 <VD6G_Start>:
  if (out_itf->datalane_nb != 1 && out_itf->datalane_nb != 2)
34009b74:	6c83      	ldr	r3, [r0, #72]	@ 0x48

int VD6G_Start(VD6G_Ctx_t *ctx)
{
34009b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (out_itf->datalane_nb != 1 && out_itf->datalane_nb != 2)
34009b78:	3b01      	subs	r3, #1
34009b7a:	2b01      	cmp	r3, #1
{
34009b7c:	4605      	mov	r5, r0
  if (out_itf->datalane_nb != 1 && out_itf->datalane_nb != 2)
34009b7e:	d904      	bls.n	34009b8a <VD6G_Start+0x16>
    return ret;
34009b80:	f04f 34ff 	mov.w	r4, #4294967295
  if (ret)
    return ret;
  drv_ctx->is_streaming = 1;

  return 0;
}
34009b84:	4620      	mov	r0, r4
34009b86:	b002      	add	sp, #8
34009b88:	bd70      	pop	{r4, r5, r6, pc}
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34009b8a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
  ret = ctx->write8(ctx, VD6G_REG_FORMAT_CTRL, VD6G_COLOR_DEPTH_RAW8);
34009b8c:	2208      	movs	r2, #8
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34009b8e:	3b00      	subs	r3, #0
34009b90:	bf18      	it	ne
34009b92:	2301      	movne	r3, #1
34009b94:	64c3      	str	r3, [r0, #76]	@ 0x4c
  out_itf->data_lane0_swap_enable = !!out_itf->data_lane0_swap_enable;
34009b96:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  ret = ctx->write8(ctx, VD6G_REG_FORMAT_CTRL, VD6G_COLOR_DEPTH_RAW8);
34009b98:	f240 310a 	movw	r1, #778	@ 0x30a
  out_itf->data_lane0_swap_enable = !!out_itf->data_lane0_swap_enable;
34009b9c:	3b00      	subs	r3, #0
34009b9e:	bf18      	it	ne
34009ba0:	2301      	movne	r3, #1
34009ba2:	6503      	str	r3, [r0, #80]	@ 0x50
  out_itf->data_lane1_swap_enable = !!out_itf->data_lane1_swap_enable;
34009ba4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
34009ba6:	3b00      	subs	r3, #0
34009ba8:	bf18      	it	ne
34009baa:	2301      	movne	r3, #1
34009bac:	6543      	str	r3, [r0, #84]	@ 0x54
  out_itf->data_lanes_mapping_swap_enable = !!out_itf->data_lanes_mapping_swap_enable;
34009bae:	6d83      	ldr	r3, [r0, #88]	@ 0x58
34009bb0:	3b00      	subs	r3, #0
34009bb2:	bf18      	it	ne
34009bb4:	2301      	movne	r3, #1
34009bb6:	6583      	str	r3, [r0, #88]	@ 0x58
  ret = ctx->write8(ctx, VD6G_REG_FORMAT_CTRL, VD6G_COLOR_DEPTH_RAW8);
34009bb8:	6903      	ldr	r3, [r0, #16]
34009bba:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009bbc:	4604      	mov	r4, r0
34009bbe:	b9e8      	cbnz	r0, 34009bfc <VD6G_Start+0x88>
  oif_ctrl = out_itf->data_lane1_swap_enable << 9 |
34009bc0:	e9d5 0315 	ldrd	r0, r3, [r5, #84]	@ 0x54
             !out_itf->data_lanes_mapping_swap_enable << 7 |
34009bc4:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
             out_itf->clock_lane_swap_enable << 3 |
34009bc6:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
             !out_itf->data_lanes_mapping_swap_enable << 7 |
34009bc8:	0192      	lsls	r2, r2, #6
             out_itf->clock_lane_swap_enable << 3 |
34009bca:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
34009bce:	430a      	orrs	r2, r1
34009bd0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  oif_ctrl = out_itf->data_lane1_swap_enable << 9 |
34009bd4:	fab3 f383 	clz	r3, r3
             out_itf->data_lanes_mapping_swap_enable << 4 |
34009bd8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
  oif_ctrl = out_itf->data_lane1_swap_enable << 9 |
34009bda:	095b      	lsrs	r3, r3, #5
             out_itf->clock_lane_swap_enable << 3 |
34009bdc:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
34009be0:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
  ret = ctx->write16(ctx, VD6G_REG_OIF_CTRL, oif_ctrl);
34009be4:	f44f 7143 	mov.w	r1, #780	@ 0x30c
34009be8:	4628      	mov	r0, r5
34009bea:	696b      	ldr	r3, [r5, #20]
34009bec:	b292      	uxth	r2, r2
34009bee:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009bf0:	4604      	mov	r4, r0
34009bf2:	b178      	cbz	r0, 34009c14 <VD6G_Start+0xa0>
34009bf4:	f240 23ee 	movw	r3, #750	@ 0x2ee
34009bf8:	9000      	str	r0, [sp, #0]
34009bfa:	e002      	b.n	34009c02 <VD6G_Start+0x8e>
  VD6G_TraceError(ctx, ret);
34009bfc:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
34009c00:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009c02:	4a74      	ldr	r2, [pc, #464]	@ (34009dd4 <VD6G_Start+0x260>)
34009c04:	4628      	mov	r0, r5
34009c06:	4974      	ldr	r1, [pc, #464]	@ (34009dd8 <VD6G_Start+0x264>)
34009c08:	f7ff fb4d 	bl	340092a6 <VD6G_error>
34009c0c:	4628      	mov	r0, r5
34009c0e:	f7ff fb67 	bl	340092e0 <display_error>
  if (ret)
34009c12:	e7b7      	b.n	34009b84 <VD6G_Start+0x10>
  ret = ctx->write16(ctx, VD6G_REG_OIF_CSI_BITRATE, 804);
34009c14:	f44f 7249 	mov.w	r2, #804	@ 0x324
34009c18:	f240 3112 	movw	r1, #786	@ 0x312
34009c1c:	4628      	mov	r0, r5
34009c1e:	696b      	ldr	r3, [r5, #20]
34009c20:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c22:	4604      	mov	r4, r0
34009c24:	b118      	cbz	r0, 34009c2e <VD6G_Start+0xba>
34009c26:	f240 23f2 	movw	r3, #754	@ 0x2f2
34009c2a:	9000      	str	r0, [sp, #0]
34009c2c:	e7e9      	b.n	34009c02 <VD6G_Start+0x8e>
  ret = ctx->write8(ctx, VD6G_REG_OIF_IMG_CTRL, 0x2a);
34009c2e:	222a      	movs	r2, #42	@ 0x2a
34009c30:	f240 310f 	movw	r1, #783	@ 0x30f
34009c34:	4628      	mov	r0, r5
34009c36:	692b      	ldr	r3, [r5, #16]
34009c38:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c3a:	4604      	mov	r4, r0
34009c3c:	b118      	cbz	r0, 34009c46 <VD6G_Start+0xd2>
34009c3e:	f240 23f6 	movw	r3, #758	@ 0x2f6
34009c42:	9000      	str	r0, [sp, #0]
34009c44:	e7dd      	b.n	34009c02 <VD6G_Start+0x8e>
  mode = VD6G_Resolution2Mode(drv_ctx->config_save.resolution);
34009c46:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
  switch (resolution) {
34009c4a:	2b08      	cmp	r3, #8
34009c4c:	d898      	bhi.n	34009b80 <VD6G_Start+0xc>
34009c4e:	4a63      	ldr	r2, [pc, #396]	@ (34009ddc <VD6G_Start+0x268>)
34009c50:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
  if (!mode)
34009c54:	2e00      	cmp	r6, #0
34009c56:	d093      	beq.n	34009b80 <VD6G_Start+0xc>
  ret = ctx->write8(ctx, VD6G_REG_READOUT_CTRL, mode->bin_mode);
34009c58:	f240 417e 	movw	r1, #1150	@ 0x47e
34009c5c:	4628      	mov	r0, r5
34009c5e:	692b      	ldr	r3, [r5, #16]
34009c60:	7a32      	ldrb	r2, [r6, #8]
34009c62:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c64:	4604      	mov	r4, r0
34009c66:	b120      	cbz	r0, 34009c72 <VD6G_Start+0xfe>
34009c68:	f240 3329 	movw	r3, #809	@ 0x329
34009c6c:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009c6e:	4a5c      	ldr	r2, [pc, #368]	@ (34009de0 <VD6G_Start+0x26c>)
34009c70:	e7c8      	b.n	34009c04 <VD6G_Start+0x90>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_X_START, mode->crop.left);
34009c72:	f240 415e 	movw	r1, #1118	@ 0x45e
34009c76:	4628      	mov	r0, r5
34009c78:	696b      	ldr	r3, [r5, #20]
34009c7a:	89b2      	ldrh	r2, [r6, #12]
34009c7c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c7e:	4604      	mov	r4, r0
34009c80:	b978      	cbnz	r0, 34009ca2 <VD6G_Start+0x12e>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_X_END, mode->crop.left + mode->crop.width - 1);
34009c82:	6973      	ldr	r3, [r6, #20]
34009c84:	68f2      	ldr	r2, [r6, #12]
34009c86:	f44f 618c 	mov.w	r1, #1120	@ 0x460
34009c8a:	441a      	add	r2, r3
34009c8c:	3a01      	subs	r2, #1
34009c8e:	4628      	mov	r0, r5
34009c90:	696b      	ldr	r3, [r5, #20]
34009c92:	b292      	uxth	r2, r2
34009c94:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c96:	4604      	mov	r4, r0
34009c98:	b138      	cbz	r0, 34009caa <VD6G_Start+0x136>
34009c9a:	f240 332e 	movw	r3, #814	@ 0x32e
34009c9e:	9000      	str	r0, [sp, #0]
34009ca0:	e7e5      	b.n	34009c6e <VD6G_Start+0xfa>
  VD6G_TraceError(ctx, ret);
34009ca2:	f44f 734b 	mov.w	r3, #812	@ 0x32c
34009ca6:	9000      	str	r0, [sp, #0]
34009ca8:	e7e1      	b.n	34009c6e <VD6G_Start+0xfa>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_Y_START, mode->crop.top);
34009caa:	f240 4162 	movw	r1, #1122	@ 0x462
34009cae:	4628      	mov	r0, r5
34009cb0:	696b      	ldr	r3, [r5, #20]
34009cb2:	8a32      	ldrh	r2, [r6, #16]
34009cb4:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009cb6:	4604      	mov	r4, r0
34009cb8:	b118      	cbz	r0, 34009cc2 <VD6G_Start+0x14e>
34009cba:	f240 3331 	movw	r3, #817	@ 0x331
34009cbe:	9000      	str	r0, [sp, #0]
34009cc0:	e7d5      	b.n	34009c6e <VD6G_Start+0xfa>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_Y_END, mode->crop.top + mode->crop.height - 1);
34009cc2:	69b3      	ldr	r3, [r6, #24]
34009cc4:	6932      	ldr	r2, [r6, #16]
34009cc6:	f240 4164 	movw	r1, #1124	@ 0x464
34009cca:	441a      	add	r2, r3
34009ccc:	3a01      	subs	r2, #1
34009cce:	4628      	mov	r0, r5
34009cd0:	696b      	ldr	r3, [r5, #20]
34009cd2:	b292      	uxth	r2, r2
34009cd4:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009cd6:	4604      	mov	r4, r0
34009cd8:	b118      	cbz	r0, 34009ce2 <VD6G_Start+0x16e>
34009cda:	f240 3333 	movw	r3, #819	@ 0x333
34009cde:	9000      	str	r0, [sp, #0]
34009ce0:	e7c5      	b.n	34009c6e <VD6G_Start+0xfa>
  return VD6G_SetExposureModeInternal(ctx, drv_ctx->config_save.exposure_mode);
34009ce2:	4628      	mov	r0, r5
34009ce4:	f895 1064 	ldrb.w	r1, [r5, #100]	@ 0x64
34009ce8:	f7ff fb4a 	bl	34009380 <VD6G_SetExposureModeInternal>
  if (ret)
34009cec:	4604      	mov	r4, r0
34009cee:	2800      	cmp	r0, #0
34009cf0:	f47f af48 	bne.w	34009b84 <VD6G_Start+0x10>
  switch (drv_ctx->config_save.flip_mirror_mode) {
34009cf4:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
34009cf8:	2b03      	cmp	r3, #3
34009cfa:	f63f af41 	bhi.w	34009b80 <VD6G_Start+0xc>
  ret = ctx->write8(ctx, VD6G_REG_ORIENTATION, mode);
34009cfe:	4a39      	ldr	r2, [pc, #228]	@ (34009de4 <VD6G_Start+0x270>)
34009d00:	692c      	ldr	r4, [r5, #16]
34009d02:	f240 3102 	movw	r1, #770	@ 0x302
34009d06:	4628      	mov	r0, r5
34009d08:	5cd2      	ldrb	r2, [r2, r3]
34009d0a:	47a0      	blx	r4
  VD6G_TraceError(ctx, ret);
34009d0c:	4604      	mov	r4, r0
34009d0e:	b9a8      	cbnz	r0, 34009d3c <VD6G_Start+0x1c8>
  switch (drv_ctx->config_save.patgen) {
34009d10:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
34009d14:	2b06      	cmp	r3, #6
34009d16:	f63f af33 	bhi.w	34009b80 <VD6G_Start+0xc>
34009d1a:	4a33      	ldr	r2, [pc, #204]	@ (34009de8 <VD6G_Start+0x274>)
34009d1c:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
  if (drv_ctx->config_save.patgen != VD6G_PATGEN_DISABLE)
34009d20:	b1eb      	cbz	r3, 34009d5e <VD6G_Start+0x1ea>
    ret = ctx->write8(ctx, VD6G_REG_DUSTER_CTRL, VD6G_DUSTER_CTRL_DISABLE);
34009d22:	4602      	mov	r2, r0
34009d24:	f44f 7146 	mov.w	r1, #792	@ 0x318
34009d28:	4628      	mov	r0, r5
34009d2a:	692b      	ldr	r3, [r5, #16]
34009d2c:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34009d2e:	4604      	mov	r4, r0
34009d30:	b148      	cbz	r0, 34009d46 <VD6G_Start+0x1d2>
34009d32:	f240 3392 	movw	r3, #914	@ 0x392
34009d36:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009d38:	4a2c      	ldr	r2, [pc, #176]	@ (34009dec <VD6G_Start+0x278>)
34009d3a:	e763      	b.n	34009c04 <VD6G_Start+0x90>
  VD6G_TraceError(ctx, ret);
34009d3c:	f240 336a 	movw	r3, #874	@ 0x36a
34009d40:	4a2b      	ldr	r2, [pc, #172]	@ (34009df0 <VD6G_Start+0x27c>)
34009d42:	9000      	str	r0, [sp, #0]
34009d44:	e75e      	b.n	34009c04 <VD6G_Start+0x90>
    ret = ctx->write8(ctx, VD6G_REG_DARKCAL_CTRL, VD6G_DARKCAL_CTRL_DISABLE_DARKAVG);
34009d46:	2202      	movs	r2, #2
34009d48:	f44f 7150 	mov.w	r1, #832	@ 0x340
34009d4c:	4628      	mov	r0, r5
34009d4e:	692b      	ldr	r3, [r5, #16]
34009d50:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34009d52:	4604      	mov	r4, r0
34009d54:	b118      	cbz	r0, 34009d5e <VD6G_Start+0x1ea>
34009d56:	f44f 7365 	mov.w	r3, #916	@ 0x394
34009d5a:	9000      	str	r0, [sp, #0]
34009d5c:	e7ec      	b.n	34009d38 <VD6G_Start+0x1c4>
  ret = ctx->write16(ctx, VD6G_REG_PATGEN_CTRL, value);
34009d5e:	4632      	mov	r2, r6
34009d60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34009d64:	4628      	mov	r0, r5
34009d66:	696b      	ldr	r3, [r5, #20]
34009d68:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009d6a:	4604      	mov	r4, r0
34009d6c:	b118      	cbz	r0, 34009d76 <VD6G_Start+0x202>
34009d6e:	f44f 7366 	mov.w	r3, #920	@ 0x398
34009d72:	9000      	str	r0, [sp, #0]
34009d74:	e7e0      	b.n	34009d38 <VD6G_Start+0x1c4>
  return VD6G_SetFlicker(ctx, drv_ctx->config_save.flicker);
34009d76:	4628      	mov	r0, r5
34009d78:	f895 1045 	ldrb.w	r1, [r5, #69]	@ 0x45
34009d7c:	f7ff fb20 	bl	340093c0 <VD6G_SetFlicker>
  if (ret)
34009d80:	4604      	mov	r4, r0
34009d82:	2800      	cmp	r0, #0
34009d84:	f47f aefe 	bne.w	34009b84 <VD6G_Start+0x10>
  ret = ctx->write8(ctx, VD6G_REG_STBY, VD6G_CMD_START_STREAM);
34009d88:	2201      	movs	r2, #1
34009d8a:	f240 2101 	movw	r1, #513	@ 0x201
34009d8e:	4628      	mov	r0, r5
34009d90:	692b      	ldr	r3, [r5, #16]
34009d92:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009d94:	4604      	mov	r4, r0
34009d96:	b120      	cbz	r0, 34009da2 <VD6G_Start+0x22e>
34009d98:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
34009d9c:	4a15      	ldr	r2, [pc, #84]	@ (34009df4 <VD6G_Start+0x280>)
34009d9e:	9000      	str	r0, [sp, #0]
34009da0:	e730      	b.n	34009c04 <VD6G_Start+0x90>
  ret = VD6G_PollReg8(ctx, VD6G_REG_STBY, VD6G_CMD_ACK);
34009da2:	4602      	mov	r2, r0
34009da4:	f240 2101 	movw	r1, #513	@ 0x201
34009da8:	4628      	mov	r0, r5
34009daa:	f7ff fab9 	bl	34009320 <VD6G_PollReg8>
  if (ret)
34009dae:	4604      	mov	r4, r0
34009db0:	2800      	cmp	r0, #0
34009db2:	f47f aee7 	bne.w	34009b84 <VD6G_Start+0x10>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_STREAMING);
34009db6:	2103      	movs	r1, #3
34009db8:	4628      	mov	r0, r5
34009dba:	f7ff fb9f 	bl	340094fc <VD6G_WaitState>
  if (ret)
34009dbe:	4604      	mov	r4, r0
34009dc0:	2800      	cmp	r0, #0
34009dc2:	f47f aedf 	bne.w	34009b84 <VD6G_Start+0x10>
  VD6G_notice(ctx, "Streaming is on\n");
34009dc6:	4628      	mov	r0, r5
34009dc8:	490b      	ldr	r1, [pc, #44]	@ (34009df8 <VD6G_Start+0x284>)
34009dca:	f7ff fa7a 	bl	340092c2 <VD6G_notice>
  drv_ctx->is_streaming = 1;
34009dce:	2301      	movs	r3, #1
34009dd0:	62eb      	str	r3, [r5, #44]	@ 0x2c
  return 0;
34009dd2:	e6d7      	b.n	34009b84 <VD6G_Start+0x10>
34009dd4:	340335d2 	.word	0x340335d2
34009dd8:	3402c54d 	.word	0x3402c54d
34009ddc:	34033484 	.word	0x34033484
34009de0:	340335c3 	.word	0x340335c3
34009de4:	3403347e 	.word	0x3403347e
34009de8:	34033470 	.word	0x34033470
34009dec:	34033580 	.word	0x34033580
34009df0:	34033591 	.word	0x34033591
34009df4:	3403355c 	.word	0x3403355c
34009df8:	3402c7d5 	.word	0x3402c7d5

34009dfc <VD6G_Stop>:

int VD6G_Stop(VD6G_Ctx_t *ctx)
{
34009dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ctx->write8(ctx, VD6G_REG_STREAMING, VD6G_CMD_STOP_STREAM);
34009dfe:	6903      	ldr	r3, [r0, #16]
34009e00:	2201      	movs	r2, #1
34009e02:	f240 2102 	movw	r1, #514	@ 0x202
{
34009e06:	4605      	mov	r5, r0
  ret = ctx->write8(ctx, VD6G_REG_STREAMING, VD6G_CMD_STOP_STREAM);
34009e08:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009e0a:	4604      	mov	r4, r0
34009e0c:	b998      	cbnz	r0, 34009e36 <VD6G_Stop+0x3a>
  ret = VD6G_PollReg8(ctx, VD6G_REG_STREAMING, VD6G_CMD_ACK);
34009e0e:	4602      	mov	r2, r0
34009e10:	f240 2102 	movw	r1, #514	@ 0x202
34009e14:	4628      	mov	r0, r5
34009e16:	f7ff fa83 	bl	34009320 <VD6G_PollReg8>
  if (ret)
34009e1a:	4604      	mov	r4, r0
34009e1c:	b9b0      	cbnz	r0, 34009e4c <VD6G_Stop+0x50>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
34009e1e:	2102      	movs	r1, #2
34009e20:	4628      	mov	r0, r5
34009e22:	f7ff fb6b 	bl	340094fc <VD6G_WaitState>
  if (ret)
34009e26:	4604      	mov	r4, r0
34009e28:	b980      	cbnz	r0, 34009e4c <VD6G_Stop+0x50>
  VD6G_notice(ctx, "Streaming is off\n");
34009e2a:	4628      	mov	r0, r5
34009e2c:	4909      	ldr	r1, [pc, #36]	@ (34009e54 <VD6G_Stop+0x58>)
34009e2e:	f7ff fa48 	bl	340092c2 <VD6G_notice>
  int ret;

  ret = VD6G_StopStreaming(ctx);
  if (ret)
    return ret;
  drv_ctx->is_streaming = 0;
34009e32:	62ec      	str	r4, [r5, #44]	@ 0x2c

  return 0;
34009e34:	e00a      	b.n	34009e4c <VD6G_Stop+0x50>
  VD6G_TraceError(ctx, ret);
34009e36:	9000      	str	r0, [sp, #0]
34009e38:	f240 4304 	movw	r3, #1028	@ 0x404
34009e3c:	4628      	mov	r0, r5
34009e3e:	4a06      	ldr	r2, [pc, #24]	@ (34009e58 <VD6G_Stop+0x5c>)
34009e40:	4906      	ldr	r1, [pc, #24]	@ (34009e5c <VD6G_Stop+0x60>)
34009e42:	f7ff fa30 	bl	340092a6 <VD6G_error>
34009e46:	4628      	mov	r0, r5
34009e48:	f7ff fa4a 	bl	340092e0 <display_error>
}
34009e4c:	4620      	mov	r0, r4
34009e4e:	b003      	add	sp, #12
34009e50:	bd30      	pop	{r4, r5, pc}
34009e52:	bf00      	nop
34009e54:	3402c661 	.word	0x3402c661
34009e58:	34033549 	.word	0x34033549
34009e5c:	3402c54d 	.word	0x3402c54d

34009e60 <VD6G_SetExposureMode>:

  return 0;
}

int VD6G_SetExposureMode(VD6G_Ctx_t *ctx, VD6G_ExposureMode_t mode)
{
34009e60:	b538      	push	{r3, r4, r5, lr}
34009e62:	4604      	mov	r4, r0
34009e64:	460d      	mov	r5, r1
  struct drv_vd6g_ctx *drv_ctx = &ctx->ctx;
  int ret;

  ret = VD6G_SetExposureModeInternal(ctx, mode);
34009e66:	f7ff fa8b 	bl	34009380 <VD6G_SetExposureModeInternal>
  if (ret)
34009e6a:	b908      	cbnz	r0, 34009e70 <VD6G_SetExposureMode+0x10>
    return ret;

  drv_ctx->config_save.exposure_mode = mode;
34009e6c:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64

  return 0;
}
34009e70:	bd38      	pop	{r3, r4, r5, pc}
	...

34009e74 <VD6G_GetAnalogGainRegRange>:

int VD6G_GetAnalogGainRegRange(VD6G_Ctx_t *ctx, uint8_t *AGmin, uint8_t *AGmax)
{
34009e74:	b5f0      	push	{r4, r5, r6, r7, lr}
34009e76:	4605      	mov	r5, r0
34009e78:	4616      	mov	r6, r2
  int ret;
  uint8_t value;

  if ((AGmin == NULL) || (AGmax == NULL))
34009e7a:	460f      	mov	r7, r1
{
34009e7c:	b085      	sub	sp, #20
  if ((AGmin == NULL) || (AGmax == NULL))
34009e7e:	b371      	cbz	r1, 34009ede <VD6G_GetAnalogGainRegRange+0x6a>
34009e80:	b36a      	cbz	r2, 34009ede <VD6G_GetAnalogGainRegRange+0x6a>
    return -1;

  ret = ctx->read8(ctx, VD6G_REG_MIN_AG_CODED, &value);
34009e82:	f640 117e 	movw	r1, #2430	@ 0x97e
34009e86:	6843      	ldr	r3, [r0, #4]
34009e88:	f10d 020f 	add.w	r2, sp, #15
34009e8c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009e8e:	4604      	mov	r4, r0
34009e90:	b988      	cbnz	r0, 34009eb6 <VD6G_GetAnalogGainRegRange+0x42>
  *AGmin = value & VD6G_REG_MIN_AG_CODED_MASK;
34009e92:	f89d 300f 	ldrb.w	r3, [sp, #15]

  ret = ctx->read8(ctx, VD6G_REG_MAX_AG_CODED, &value);
34009e96:	f44f 6116 	mov.w	r1, #2400	@ 0x960
  *AGmin = value & VD6G_REG_MIN_AG_CODED_MASK;
34009e9a:	f003 031f 	and.w	r3, r3, #31
34009e9e:	703b      	strb	r3, [r7, #0]
  ret = ctx->read8(ctx, VD6G_REG_MAX_AG_CODED, &value);
34009ea0:	4628      	mov	r0, r5
34009ea2:	686b      	ldr	r3, [r5, #4]
34009ea4:	f10d 020f 	add.w	r2, sp, #15
34009ea8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009eaa:	4604      	mov	r4, r0
34009eac:	b178      	cbz	r0, 34009ece <VD6G_GetAnalogGainRegRange+0x5a>
34009eae:	f240 43cc 	movw	r3, #1228	@ 0x4cc
34009eb2:	9000      	str	r0, [sp, #0]
34009eb4:	e002      	b.n	34009ebc <VD6G_GetAnalogGainRegRange+0x48>
  VD6G_TraceError(ctx, ret);
34009eb6:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
34009eba:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009ebc:	4628      	mov	r0, r5
34009ebe:	4a09      	ldr	r2, [pc, #36]	@ (34009ee4 <VD6G_GetAnalogGainRegRange+0x70>)
34009ec0:	4909      	ldr	r1, [pc, #36]	@ (34009ee8 <VD6G_GetAnalogGainRegRange+0x74>)
34009ec2:	f7ff f9f0 	bl	340092a6 <VD6G_error>
34009ec6:	4628      	mov	r0, r5
34009ec8:	f7ff fa0a 	bl	340092e0 <display_error>
34009ecc:	e004      	b.n	34009ed8 <VD6G_GetAnalogGainRegRange+0x64>
  *AGmax = value & VD6G_REG_MAX_AG_CODED_MASK;
34009ece:	f89d 300f 	ldrb.w	r3, [sp, #15]
34009ed2:	f003 031f 	and.w	r3, r3, #31
34009ed6:	7033      	strb	r3, [r6, #0]

  return 0;
}
34009ed8:	4620      	mov	r0, r4
34009eda:	b005      	add	sp, #20
34009edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return -1;
34009ede:	f04f 34ff 	mov.w	r4, #4294967295
34009ee2:	e7f9      	b.n	34009ed8 <VD6G_GetAnalogGainRegRange+0x64>
34009ee4:	3403352e 	.word	0x3403352e
34009ee8:	3402c54d 	.word	0x3402c54d

34009eec <VD6G_SetAnalogGain>:

int VD6G_SetAnalogGain(VD6G_Ctx_t *ctx, int gain)
{
34009eec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
34009eee:	460e      	mov	r6, r1
  int ret;
  uint8_t again_regmin, again_regmax;

  ret = VD6G_GetAnalogGainRegRange(ctx, &again_regmin, &again_regmax);
34009ef0:	f10d 020f 	add.w	r2, sp, #15
34009ef4:	f10d 010e 	add.w	r1, sp, #14
{
34009ef8:	4605      	mov	r5, r0
  ret = VD6G_GetAnalogGainRegRange(ctx, &again_regmin, &again_regmax);
34009efa:	f7ff ffbb 	bl	34009e74 <VD6G_GetAnalogGainRegRange>
  if (ret)
34009efe:	4604      	mov	r4, r0
34009f00:	b9d0      	cbnz	r0, 34009f38 <VD6G_SetAnalogGain+0x4c>
    return ret;

  ret = CHECK_RANGE(gain, again_regmin, again_regmax);
34009f02:	f89d 300e 	ldrb.w	r3, [sp, #14]
34009f06:	42b3      	cmp	r3, r6
34009f08:	dc19      	bgt.n	34009f3e <VD6G_SetAnalogGain+0x52>
34009f0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
34009f0e:	42b3      	cmp	r3, r6
34009f10:	db15      	blt.n	34009f3e <VD6G_SetAnalogGain+0x52>
  if (ret)
    return ret;

  ret = ctx->write8(ctx, VD6G_REG_MANUAL_ANALOG_GAIN, gain);
34009f12:	f240 414d 	movw	r1, #1101	@ 0x44d
34009f16:	4628      	mov	r0, r5
34009f18:	692b      	ldr	r3, [r5, #16]
34009f1a:	b2f2      	uxtb	r2, r6
34009f1c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009f1e:	4604      	mov	r4, r0
34009f20:	b150      	cbz	r0, 34009f38 <VD6G_SetAnalogGain+0x4c>
34009f22:	9000      	str	r0, [sp, #0]
34009f24:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
34009f28:	4628      	mov	r0, r5
34009f2a:	4a06      	ldr	r2, [pc, #24]	@ (34009f44 <VD6G_SetAnalogGain+0x58>)
34009f2c:	4906      	ldr	r1, [pc, #24]	@ (34009f48 <VD6G_SetAnalogGain+0x5c>)
34009f2e:	f7ff f9ba 	bl	340092a6 <VD6G_error>
34009f32:	4628      	mov	r0, r5
34009f34:	f7ff f9d4 	bl	340092e0 <display_error>

  return 0;
}
34009f38:	4620      	mov	r0, r4
34009f3a:	b004      	add	sp, #16
34009f3c:	bd70      	pop	{r4, r5, r6, pc}
    return ret;
34009f3e:	f04f 34ff 	mov.w	r4, #4294967295
34009f42:	e7f9      	b.n	34009f38 <VD6G_SetAnalogGain+0x4c>
34009f44:	3403351b 	.word	0x3403351b
34009f48:	3402c54d 	.word	0x3402c54d

34009f4c <VD6G_GetDigitalGainRegRange>:

int VD6G_GetDigitalGainRegRange(VD6G_Ctx_t *ctx, uint16_t *DGmin, uint16_t *DGmax)
{
34009f4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
34009f4e:	4616      	mov	r6, r2
34009f50:	4605      	mov	r5, r0
  int ret;

  if ((DGmin == NULL) && (DGmax == NULL))
34009f52:	460a      	mov	r2, r1
34009f54:	b901      	cbnz	r1, 34009f58 <VD6G_GetDigitalGainRegRange+0xc>
34009f56:	b306      	cbz	r6, 34009f9a <VD6G_GetDigitalGainRegRange+0x4e>
    return -1;

  ret = ctx->read16(ctx, VD6G_REG_MIN_DG, DGmin);
34009f58:	f640 117c 	movw	r1, #2428	@ 0x97c
34009f5c:	4628      	mov	r0, r5
34009f5e:	68ab      	ldr	r3, [r5, #8]
34009f60:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009f62:	4604      	mov	r4, r0
34009f64:	b958      	cbnz	r0, 34009f7e <VD6G_GetDigitalGainRegRange+0x32>

  ret = ctx->read16(ctx, VD6G_REG_MAX_DG, DGmax);
34009f66:	4632      	mov	r2, r6
34009f68:	f640 115e 	movw	r1, #2398	@ 0x95e
34009f6c:	4628      	mov	r0, r5
34009f6e:	68ab      	ldr	r3, [r5, #8]
34009f70:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009f72:	4604      	mov	r4, r0
34009f74:	b170      	cbz	r0, 34009f94 <VD6G_GetDigitalGainRegRange+0x48>
34009f76:	f44f 639e 	mov.w	r3, #1264	@ 0x4f0
34009f7a:	9000      	str	r0, [sp, #0]
34009f7c:	e002      	b.n	34009f84 <VD6G_GetDigitalGainRegRange+0x38>
  VD6G_TraceError(ctx, ret);
34009f7e:	f240 43ed 	movw	r3, #1261	@ 0x4ed
34009f82:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009f84:	4628      	mov	r0, r5
34009f86:	4a06      	ldr	r2, [pc, #24]	@ (34009fa0 <VD6G_GetDigitalGainRegRange+0x54>)
34009f88:	4906      	ldr	r1, [pc, #24]	@ (34009fa4 <VD6G_GetDigitalGainRegRange+0x58>)
34009f8a:	f7ff f98c 	bl	340092a6 <VD6G_error>
34009f8e:	4628      	mov	r0, r5
34009f90:	f7ff f9a6 	bl	340092e0 <display_error>

  return 0;
}
34009f94:	4620      	mov	r0, r4
34009f96:	b002      	add	sp, #8
34009f98:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
34009f9a:	f04f 34ff 	mov.w	r4, #4294967295
34009f9e:	e7f9      	b.n	34009f94 <VD6G_GetDigitalGainRegRange+0x48>
34009fa0:	340334ff 	.word	0x340334ff
34009fa4:	3402c54d 	.word	0x3402c54d

34009fa8 <VD6G_SetDigitalGain>:

int VD6G_SetDigitalGain(VD6G_Ctx_t *ctx, int gain)
{
34009fa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
34009faa:	460e      	mov	r6, r1
  int ret;
  uint16_t dgain_regmin, dgain_regmax;

  ret = VD6G_GetDigitalGainRegRange(ctx, &dgain_regmin, &dgain_regmax);
34009fac:	f10d 020e 	add.w	r2, sp, #14
34009fb0:	a903      	add	r1, sp, #12
{
34009fb2:	4605      	mov	r5, r0
  ret = VD6G_GetDigitalGainRegRange(ctx, &dgain_regmin, &dgain_regmax);
34009fb4:	f7ff ffca 	bl	34009f4c <VD6G_GetDigitalGainRegRange>
  if (ret)
34009fb8:	4604      	mov	r4, r0
34009fba:	bb38      	cbnz	r0, 3400a00c <VD6G_SetDigitalGain+0x64>
    return ret;

  ret = CHECK_RANGE(gain, dgain_regmin, dgain_regmax);
34009fbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34009fc0:	42b3      	cmp	r3, r6
34009fc2:	dc3f      	bgt.n	3400a044 <VD6G_SetDigitalGain+0x9c>
34009fc4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
34009fc8:	42b3      	cmp	r3, r6
34009fca:	db3b      	blt.n	3400a044 <VD6G_SetDigitalGain+0x9c>
  if (ret)
    return ret;

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH0_DIGITAL_GAIN, gain);
34009fcc:	b2b6      	uxth	r6, r6
34009fce:	4632      	mov	r2, r6
34009fd0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34009fd4:	4628      	mov	r0, r5
34009fd6:	696b      	ldr	r3, [r5, #20]
34009fd8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009fda:	4604      	mov	r4, r0
34009fdc:	b958      	cbnz	r0, 34009ff6 <VD6G_SetDigitalGain+0x4e>

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH1_DIGITAL_GAIN, gain);
34009fde:	4632      	mov	r2, r6
34009fe0:	f240 4152 	movw	r1, #1106	@ 0x452
34009fe4:	4628      	mov	r0, r5
34009fe6:	696b      	ldr	r3, [r5, #20]
34009fe8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009fea:	4604      	mov	r4, r0
34009fec:	b188      	cbz	r0, 3400a012 <VD6G_SetDigitalGain+0x6a>
34009fee:	f240 5306 	movw	r3, #1286	@ 0x506
34009ff2:	9000      	str	r0, [sp, #0]
34009ff4:	e002      	b.n	34009ffc <VD6G_SetDigitalGain+0x54>
  VD6G_TraceError(ctx, ret);
34009ff6:	f240 5303 	movw	r3, #1283	@ 0x503
34009ffa:	9000      	str	r0, [sp, #0]

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH2_DIGITAL_GAIN, gain);
  VD6G_TraceError(ctx, ret);

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH3_DIGITAL_GAIN, gain);
  VD6G_TraceError(ctx, ret);
34009ffc:	4628      	mov	r0, r5
34009ffe:	4a13      	ldr	r2, [pc, #76]	@ (3400a04c <VD6G_SetDigitalGain+0xa4>)
3400a000:	4913      	ldr	r1, [pc, #76]	@ (3400a050 <VD6G_SetDigitalGain+0xa8>)
3400a002:	f7ff f950 	bl	340092a6 <VD6G_error>
3400a006:	4628      	mov	r0, r5
3400a008:	f7ff f96a 	bl	340092e0 <display_error>

  return 0;
}
3400a00c:	4620      	mov	r0, r4
3400a00e:	b004      	add	sp, #16
3400a010:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH2_DIGITAL_GAIN, gain);
3400a012:	4632      	mov	r2, r6
3400a014:	f240 4154 	movw	r1, #1108	@ 0x454
3400a018:	4628      	mov	r0, r5
3400a01a:	696b      	ldr	r3, [r5, #20]
3400a01c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a01e:	4604      	mov	r4, r0
3400a020:	b118      	cbz	r0, 3400a02a <VD6G_SetDigitalGain+0x82>
3400a022:	f240 5309 	movw	r3, #1289	@ 0x509
3400a026:	9000      	str	r0, [sp, #0]
3400a028:	e7e8      	b.n	34009ffc <VD6G_SetDigitalGain+0x54>
  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH3_DIGITAL_GAIN, gain);
3400a02a:	4632      	mov	r2, r6
3400a02c:	f240 4156 	movw	r1, #1110	@ 0x456
3400a030:	4628      	mov	r0, r5
3400a032:	696b      	ldr	r3, [r5, #20]
3400a034:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a036:	4604      	mov	r4, r0
3400a038:	2800      	cmp	r0, #0
3400a03a:	d0e7      	beq.n	3400a00c <VD6G_SetDigitalGain+0x64>
3400a03c:	f240 530c 	movw	r3, #1292	@ 0x50c
3400a040:	9000      	str	r0, [sp, #0]
3400a042:	e7db      	b.n	34009ffc <VD6G_SetDigitalGain+0x54>
    return ret;
3400a044:	f04f 34ff 	mov.w	r4, #4294967295
3400a048:	e7e0      	b.n	3400a00c <VD6G_SetDigitalGain+0x64>
3400a04a:	bf00      	nop
3400a04c:	340334eb 	.word	0x340334eb
3400a050:	3402c54d 	.word	0x3402c54d

3400a054 <VD6G_GetExposureRegRange>:

int VD6G_GetExposureRegRange(VD6G_Ctx_t *ctx, uint32_t *min_us, uint32_t *max_us)
{
3400a054:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
3400a058:	4605      	mov	r5, r0
3400a05a:	4616      	mov	r6, r2
  uint16_t exp_coarse_intg_margin;
  uint32_t line_time_in_us;
  uint16_t frame_length;
  int ret;

  if ((min_us == NULL) || (max_us == NULL))
3400a05c:	460f      	mov	r7, r1
3400a05e:	b929      	cbnz	r1, 3400a06c <VD6G_GetExposureRegRange+0x18>
    return -1;
3400a060:	f04f 34ff 	mov.w	r4, #4294967295
    *max_us = (frame_length - exp_coarse_intg_margin - VD6G_MAX_MANUAL_EXP_COARSE_OFFSET) * line_time_in_us;
  else
    return -1;

  return 0;
}
3400a064:	4620      	mov	r0, r4
3400a066:	b004      	add	sp, #16
3400a068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((min_us == NULL) || (max_us == NULL))
3400a06c:	2a00      	cmp	r2, #0
3400a06e:	d0f7      	beq.n	3400a060 <VD6G_GetExposureRegRange+0xc>
  ret = VD6G_GetLineTimeInUs(ctx, &line_time_in_us);
3400a070:	a903      	add	r1, sp, #12
3400a072:	f7ff f9c9 	bl	34009408 <VD6G_GetLineTimeInUs>
  if (ret)
3400a076:	4604      	mov	r4, r0
3400a078:	2800      	cmp	r0, #0
3400a07a:	d1f3      	bne.n	3400a064 <VD6G_GetExposureRegRange+0x10>
  *min_us = VD6G_MIN_MANUAL_EXP_COARSE * line_time_in_us;
3400a07c:	2315      	movs	r3, #21
3400a07e:	f8dd 800c 	ldr.w	r8, [sp, #12]
  ret = ctx->read16(ctx, VD6G_FRAME_LENGTH, &frame_length);
3400a082:	f44f 618b 	mov.w	r1, #1112	@ 0x458
  *min_us = VD6G_MIN_MANUAL_EXP_COARSE * line_time_in_us;
3400a086:	fb03 f308 	mul.w	r3, r3, r8
  ret = ctx->read16(ctx, VD6G_FRAME_LENGTH, &frame_length);
3400a08a:	4628      	mov	r0, r5
  *min_us = VD6G_MIN_MANUAL_EXP_COARSE * line_time_in_us;
3400a08c:	603b      	str	r3, [r7, #0]
  ret = ctx->read16(ctx, VD6G_FRAME_LENGTH, &frame_length);
3400a08e:	f10d 020a 	add.w	r2, sp, #10
3400a092:	68ab      	ldr	r3, [r5, #8]
3400a094:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a096:	4604      	mov	r4, r0
3400a098:	b958      	cbnz	r0, 3400a0b2 <VD6G_GetExposureRegRange+0x5e>
  ret = ctx->read16(ctx, VD6G_REG_EXP_COARSE_INTG_MARGIN, &exp_coarse_intg_margin);
3400a09a:	f640 1146 	movw	r1, #2374	@ 0x946
3400a09e:	4628      	mov	r0, r5
3400a0a0:	68ab      	ldr	r3, [r5, #8]
3400a0a2:	aa02      	add	r2, sp, #8
3400a0a4:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a0a6:	4604      	mov	r4, r0
3400a0a8:	b178      	cbz	r0, 3400a0ca <VD6G_GetExposureRegRange+0x76>
3400a0aa:	f240 5325 	movw	r3, #1317	@ 0x525
3400a0ae:	9000      	str	r0, [sp, #0]
3400a0b0:	e002      	b.n	3400a0b8 <VD6G_GetExposureRegRange+0x64>
  VD6G_TraceError(ctx, ret);
3400a0b2:	f240 5322 	movw	r3, #1314	@ 0x522
3400a0b6:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
3400a0b8:	4628      	mov	r0, r5
3400a0ba:	4a0a      	ldr	r2, [pc, #40]	@ (3400a0e4 <VD6G_GetExposureRegRange+0x90>)
3400a0bc:	490a      	ldr	r1, [pc, #40]	@ (3400a0e8 <VD6G_GetExposureRegRange+0x94>)
3400a0be:	f7ff f8f2 	bl	340092a6 <VD6G_error>
3400a0c2:	4628      	mov	r0, r5
3400a0c4:	f7ff f90c 	bl	340092e0 <display_error>
3400a0c8:	e7cc      	b.n	3400a064 <VD6G_GetExposureRegRange+0x10>
  if (exp_coarse_intg_margin >= VD6G_MIN_EXP_COARSE_INTG_MARGIN)
3400a0ca:	f8bd 2008 	ldrh.w	r2, [sp, #8]
3400a0ce:	2a43      	cmp	r2, #67	@ 0x43
3400a0d0:	d9c6      	bls.n	3400a060 <VD6G_GetExposureRegRange+0xc>
    *max_us = (frame_length - exp_coarse_intg_margin - VD6G_MAX_MANUAL_EXP_COARSE_OFFSET) * line_time_in_us;
3400a0d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
3400a0d6:	1a9b      	subs	r3, r3, r2
3400a0d8:	3b07      	subs	r3, #7
3400a0da:	fb08 f303 	mul.w	r3, r8, r3
3400a0de:	6033      	str	r3, [r6, #0]
  return 0;
3400a0e0:	e7c0      	b.n	3400a064 <VD6G_GetExposureRegRange+0x10>
3400a0e2:	bf00      	nop
3400a0e4:	340334d2 	.word	0x340334d2
3400a0e8:	3402c54d 	.word	0x3402c54d

3400a0ec <VD6G_SetExposureTime>:

int VD6G_SetExposureTime(VD6G_Ctx_t *ctx, int exposure_us)
{
3400a0ec:	b570      	push	{r4, r5, r6, lr}
3400a0ee:	b086      	sub	sp, #24
3400a0f0:	460e      	mov	r6, r1
  int32_t ret;
  uint32_t exp_min, exp_max;
  uint32_t line_time_in_us;

  ret = VD6G_GetExposureRegRange(ctx, &exp_min, &exp_max);
3400a0f2:	aa04      	add	r2, sp, #16
3400a0f4:	a903      	add	r1, sp, #12
{
3400a0f6:	4605      	mov	r5, r0
  ret = VD6G_GetExposureRegRange(ctx, &exp_min, &exp_max);
3400a0f8:	f7ff ffac 	bl	3400a054 <VD6G_GetExposureRegRange>
  if (ret)
3400a0fc:	4604      	mov	r4, r0
3400a0fe:	bb08      	cbnz	r0, 3400a144 <VD6G_SetExposureTime+0x58>
    return ret;

  ret = CHECK_RANGE(exposure_us, exp_min, exp_max);
3400a100:	9b03      	ldr	r3, [sp, #12]
3400a102:	429e      	cmp	r6, r3
3400a104:	d321      	bcc.n	3400a14a <VD6G_SetExposureTime+0x5e>
3400a106:	9b04      	ldr	r3, [sp, #16]
3400a108:	429e      	cmp	r6, r3
3400a10a:	d81e      	bhi.n	3400a14a <VD6G_SetExposureTime+0x5e>
  if (ret)
    return ret;

  ret = VD6G_GetLineTimeInUs(ctx, &line_time_in_us);
3400a10c:	4628      	mov	r0, r5
3400a10e:	a905      	add	r1, sp, #20
3400a110:	f7ff f97a 	bl	34009408 <VD6G_GetLineTimeInUs>
  if (ret)
3400a114:	4604      	mov	r4, r0
3400a116:	b9a8      	cbnz	r0, 3400a144 <VD6G_SetExposureTime+0x58>
    return ret;

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_COARSE_EXP, CEIL(exposure_us / line_time_in_us));
3400a118:	9b05      	ldr	r3, [sp, #20]
3400a11a:	f240 414e 	movw	r1, #1102	@ 0x44e
3400a11e:	fbb6 f2f3 	udiv	r2, r6, r3
3400a122:	4628      	mov	r0, r5
3400a124:	696b      	ldr	r3, [r5, #20]
3400a126:	b292      	uxth	r2, r2
3400a128:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a12a:	4604      	mov	r4, r0
3400a12c:	b150      	cbz	r0, 3400a144 <VD6G_SetExposureTime+0x58>
3400a12e:	9000      	str	r0, [sp, #0]
3400a130:	f240 5342 	movw	r3, #1346	@ 0x542
3400a134:	4628      	mov	r0, r5
3400a136:	4a06      	ldr	r2, [pc, #24]	@ (3400a150 <VD6G_SetExposureTime+0x64>)
3400a138:	4906      	ldr	r1, [pc, #24]	@ (3400a154 <VD6G_SetExposureTime+0x68>)
3400a13a:	f7ff f8b4 	bl	340092a6 <VD6G_error>
3400a13e:	4628      	mov	r0, r5
3400a140:	f7ff f8ce 	bl	340092e0 <display_error>

  return 0;
}
3400a144:	4620      	mov	r0, r4
3400a146:	b006      	add	sp, #24
3400a148:	bd70      	pop	{r4, r5, r6, pc}
    return ret;
3400a14a:	f04f 34ff 	mov.w	r4, #4294967295
3400a14e:	e7f9      	b.n	3400a144 <VD6G_SetExposureTime+0x58>
3400a150:	340334a8 	.word	0x340334a8
3400a154:	3402c54d 	.word	0x3402c54d

3400a158 <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
3400a158:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400a15c:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400a160:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400a164:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400a166:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
3400a168:	2300      	movs	r3, #0
3400a16a:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
3400a16c:	4770      	bx	lr

3400a16e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
3400a16e:	2300      	movs	r3, #0
3400a170:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
3400a172:	4770      	bx	lr

3400a174 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
3400a174:	6843      	ldr	r3, [r0, #4]

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
3400a176:	689a      	ldr	r2, [r3, #8]
    pxNewListItem->pxNext = pxIndex;
3400a178:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
3400a17a:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
3400a17c:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
3400a17e:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
3400a180:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
3400a182:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
3400a184:	3301      	adds	r3, #1
3400a186:	6003      	str	r3, [r0, #0]
}
3400a188:	4770      	bx	lr

3400a18a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
3400a18a:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
3400a18c:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
3400a18e:	1c63      	adds	r3, r4, #1
3400a190:	d10a      	bne.n	3400a1a8 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
3400a192:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
3400a194:	685a      	ldr	r2, [r3, #4]
3400a196:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
3400a198:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
3400a19a:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
3400a19c:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
3400a19e:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
3400a1a0:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
3400a1a2:	3301      	adds	r3, #1
3400a1a4:	6003      	str	r3, [r0, #0]
}
3400a1a6:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
3400a1a8:	f100 0208 	add.w	r2, r0, #8
3400a1ac:	4613      	mov	r3, r2
3400a1ae:	6852      	ldr	r2, [r2, #4]
3400a1b0:	6815      	ldr	r5, [r2, #0]
3400a1b2:	42a5      	cmp	r5, r4
3400a1b4:	d9fa      	bls.n	3400a1ac <vListInsert+0x22>
3400a1b6:	e7ed      	b.n	3400a194 <vListInsert+0xa>

3400a1b8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
3400a1b8:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
3400a1ba:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
3400a1be:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
3400a1c0:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
3400a1c2:	6859      	ldr	r1, [r3, #4]
3400a1c4:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
3400a1c6:	bf08      	it	eq
3400a1c8:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
3400a1ca:	2200      	movs	r2, #0
3400a1cc:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
3400a1ce:	681a      	ldr	r2, [r3, #0]
3400a1d0:	3a01      	subs	r2, #1
3400a1d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
3400a1d4:	6818      	ldr	r0, [r3, #0]
}
3400a1d6:	4770      	bx	lr

3400a1d8 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
3400a1d8:	b510      	push	{r4, lr}
3400a1da:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
3400a1dc:	f001 fc3c 	bl	3400ba58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
3400a1e0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
3400a1e2:	f001 fc47 	bl	3400ba74 <vPortExitCritical>

    return xReturn;
}
3400a1e6:	fab4 f084 	clz	r0, r4
3400a1ea:	0940      	lsrs	r0, r0, #5
3400a1ec:	bd10      	pop	{r4, pc}

3400a1ee <prvCopyDataToQueue>:
{
3400a1ee:	b570      	push	{r4, r5, r6, lr}
3400a1f0:	4616      	mov	r6, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
3400a1f2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
3400a1f4:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
3400a1f6:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
3400a1f8:	b942      	cbnz	r2, 3400a20c <prvCopyDataToQueue+0x1e>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
3400a1fa:	6806      	ldr	r6, [r0, #0]
3400a1fc:	b99e      	cbnz	r6, 3400a226 <prvCopyDataToQueue+0x38>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
3400a1fe:	6880      	ldr	r0, [r0, #8]
3400a200:	f001 f9a2 	bl	3400b548 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
3400a204:	60a6      	str	r6, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
3400a206:	3501      	adds	r5, #1
3400a208:	63a5      	str	r5, [r4, #56]	@ 0x38
}
3400a20a:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
3400a20c:	b96e      	cbnz	r6, 3400a22a <prvCopyDataToQueue+0x3c>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
3400a20e:	6840      	ldr	r0, [r0, #4]
3400a210:	f017 fd2f 	bl	34021c72 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a214:	6863      	ldr	r3, [r4, #4]
3400a216:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400a218:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
3400a21a:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a21c:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
3400a21e:	4293      	cmp	r3, r2
            pxQueue->pcWriteTo = pxQueue->pcHead;
3400a220:	bf24      	itt	cs
3400a222:	6823      	ldrcs	r3, [r4, #0]
3400a224:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
3400a226:	2000      	movs	r0, #0
3400a228:	e7ed      	b.n	3400a206 <prvCopyDataToQueue+0x18>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
3400a22a:	68c0      	ldr	r0, [r0, #12]
3400a22c:	f017 fd21 	bl	34021c72 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
3400a230:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400a232:	68e3      	ldr	r3, [r4, #12]
3400a234:	4251      	negs	r1, r2
3400a236:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
3400a238:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
3400a23a:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
3400a23c:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
3400a23e:	bf3e      	ittt	cc
3400a240:	68a3      	ldrcc	r3, [r4, #8]
3400a242:	185b      	addcc	r3, r3, r1
3400a244:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
3400a246:	2e02      	cmp	r6, #2
3400a248:	d1ed      	bne.n	3400a226 <prvCopyDataToQueue+0x38>
    BaseType_t xReturn = pdFALSE;
3400a24a:	4628      	mov	r0, r5
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
3400a24c:	2d00      	cmp	r5, #0
3400a24e:	d0da      	beq.n	3400a206 <prvCopyDataToQueue+0x18>
                --uxMessagesWaiting;
3400a250:	3d01      	subs	r5, #1
3400a252:	e7e8      	b.n	3400a226 <prvCopyDataToQueue+0x38>

3400a254 <prvCopyDataFromQueue>:
{
3400a254:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
3400a256:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
3400a258:	4608      	mov	r0, r1
3400a25a:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
3400a25c:	b16a      	cbz	r2, 3400a27a <prvCopyDataFromQueue+0x26>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a25e:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
3400a260:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a262:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
3400a264:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
3400a266:	bf28      	it	cs
3400a268:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a26a:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
3400a26c:	bf28      	it	cs
3400a26e:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
3400a270:	68d9      	ldr	r1, [r3, #12]
}
3400a272:	f85d 4b04 	ldr.w	r4, [sp], #4
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
3400a276:	f017 bcfc 	b.w	34021c72 <memcpy>
}
3400a27a:	f85d 4b04 	ldr.w	r4, [sp], #4
3400a27e:	4770      	bx	lr

3400a280 <prvUnlockQueue>:
{
3400a280:	b570      	push	{r4, r5, r6, lr}
3400a282:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
3400a284:	f001 fbe8 	bl	3400ba58 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
3400a288:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
3400a28c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        int8_t cTxLock = pxQueue->cTxLock;
3400a290:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
3400a292:	2d00      	cmp	r5, #0
3400a294:	dd01      	ble.n	3400a29a <prvUnlockQueue+0x1a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
3400a296:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a298:	b9b3      	cbnz	r3, 3400a2c8 <prvUnlockQueue+0x48>
        pxQueue->cTxLock = queueUNLOCKED;
3400a29a:	23ff      	movs	r3, #255	@ 0xff
3400a29c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
3400a2a0:	f001 fbe8 	bl	3400ba74 <vPortExitCritical>
    taskENTER_CRITICAL();
3400a2a4:	f001 fbd8 	bl	3400ba58 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
3400a2a8:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a2ac:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
3400a2b0:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
3400a2b2:	2d00      	cmp	r5, #0
3400a2b4:	dd01      	ble.n	3400a2ba <prvUnlockQueue+0x3a>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
3400a2b6:	6923      	ldr	r3, [r4, #16]
3400a2b8:	b97b      	cbnz	r3, 3400a2da <prvUnlockQueue+0x5a>
        pxQueue->cRxLock = queueUNLOCKED;
3400a2ba:	23ff      	movs	r3, #255	@ 0xff
3400a2bc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
3400a2c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
3400a2c4:	f001 bbd6 	b.w	3400ba74 <vPortExitCritical>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
3400a2c8:	4630      	mov	r0, r6
3400a2ca:	f001 f82b 	bl	3400b324 <xTaskRemoveFromEventList>
3400a2ce:	b108      	cbz	r0, 3400a2d4 <prvUnlockQueue+0x54>
                        vTaskMissedYield();
3400a2d0:	f001 f8de 	bl	3400b490 <vTaskMissedYield>
            --cTxLock;
3400a2d4:	3d01      	subs	r5, #1
3400a2d6:	b26d      	sxtb	r5, r5
3400a2d8:	e7db      	b.n	3400a292 <prvUnlockQueue+0x12>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a2da:	4630      	mov	r0, r6
3400a2dc:	f001 f822 	bl	3400b324 <xTaskRemoveFromEventList>
3400a2e0:	b108      	cbz	r0, 3400a2e6 <prvUnlockQueue+0x66>
                    vTaskMissedYield();
3400a2e2:	f001 f8d5 	bl	3400b490 <vTaskMissedYield>
                --cRxLock;
3400a2e6:	3d01      	subs	r5, #1
3400a2e8:	b26d      	sxtb	r5, r5
3400a2ea:	e7e2      	b.n	3400a2b2 <prvUnlockQueue+0x32>

3400a2ec <xQueueGenericReset>:
{
3400a2ec:	b570      	push	{r4, r5, r6, lr}
3400a2ee:	460e      	mov	r6, r1
    configASSERT( pxQueue );
3400a2f0:	4604      	mov	r4, r0
3400a2f2:	b940      	cbnz	r0, 3400a306 <xQueueGenericReset+0x1a>
3400a2f4:	f001 fd2e 	bl	3400bd54 <ulSetInterruptMask>
3400a2f8:	f44f 7197 	mov.w	r1, #302	@ 0x12e
3400a2fc:	4b1d      	ldr	r3, [pc, #116]	@ (3400a374 <xQueueGenericReset+0x88>)
3400a2fe:	4a1e      	ldr	r2, [pc, #120]	@ (3400a378 <xQueueGenericReset+0x8c>)
    configASSERT( xReturn != pdFAIL );
3400a300:	481e      	ldr	r0, [pc, #120]	@ (3400a37c <xQueueGenericReset+0x90>)
3400a302:	f015 fb81 	bl	3401fa08 <__assert_func>
        ( pxQueue->uxLength >= 1U ) &&
3400a306:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
3400a308:	b365      	cbz	r5, 3400a364 <xQueueGenericReset+0x78>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
3400a30a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400a30c:	fba3 3505 	umull	r3, r5, r3, r5
3400a310:	bb45      	cbnz	r5, 3400a364 <xQueueGenericReset+0x78>
        taskENTER_CRITICAL();
3400a312:	f001 fba1 	bl	3400ba58 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a316:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
3400a31a:	434b      	muls	r3, r1
3400a31c:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
3400a31e:	63a5      	str	r5, [r4, #56]	@ 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a320:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a322:	1a5b      	subs	r3, r3, r1
            pxQueue->pcWriteTo = pxQueue->pcHead;
3400a324:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a326:	441a      	add	r2, r3
            pxQueue->cRxLock = queueUNLOCKED;
3400a328:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a32a:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
3400a32c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a330:	60e2      	str	r2, [r4, #12]
            pxQueue->cTxLock = queueUNLOCKED;
3400a332:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
3400a336:	b966      	cbnz	r6, 3400a352 <xQueueGenericReset+0x66>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
3400a338:	6923      	ldr	r3, [r4, #16]
3400a33a:	b133      	cbz	r3, 3400a34a <xQueueGenericReset+0x5e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a33c:	f104 0010 	add.w	r0, r4, #16
3400a340:	f000 fff0 	bl	3400b324 <xTaskRemoveFromEventList>
3400a344:	b108      	cbz	r0, 3400a34a <xQueueGenericReset+0x5e>
                        queueYIELD_IF_USING_PREEMPTION();
3400a346:	f001 fb7b 	bl	3400ba40 <vPortYield>
        taskEXIT_CRITICAL();
3400a34a:	f001 fb93 	bl	3400ba74 <vPortExitCritical>
}
3400a34e:	2001      	movs	r0, #1
3400a350:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
3400a352:	f104 0010 	add.w	r0, r4, #16
3400a356:	f7ff feff 	bl	3400a158 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
3400a35a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a35e:	f7ff fefb 	bl	3400a158 <vListInitialise>
3400a362:	e7f2      	b.n	3400a34a <xQueueGenericReset+0x5e>
    configASSERT( xReturn != pdFAIL );
3400a364:	f001 fcf6 	bl	3400bd54 <ulSetInterruptMask>
3400a368:	f240 1163 	movw	r1, #355	@ 0x163
3400a36c:	4b01      	ldr	r3, [pc, #4]	@ (3400a374 <xQueueGenericReset+0x88>)
3400a36e:	4a02      	ldr	r2, [pc, #8]	@ (3400a378 <xQueueGenericReset+0x8c>)
3400a370:	e7c6      	b.n	3400a300 <xQueueGenericReset+0x14>
3400a372:	bf00      	nop
3400a374:	3402b7cd 	.word	0x3402b7cd
3400a378:	34037b3b 	.word	0x34037b3b
3400a37c:	3402c903 	.word	0x3402c903

3400a380 <xQueueGenericCreateStatic>:
    {
3400a380:	b513      	push	{r0, r1, r4, lr}
        configASSERT( pxStaticQueue );
3400a382:	461c      	mov	r4, r3
3400a384:	b943      	cbnz	r3, 3400a398 <xQueueGenericCreateStatic+0x18>
3400a386:	f001 fce5 	bl	3400bd54 <ulSetInterruptMask>
3400a38a:	f240 1177 	movw	r1, #375	@ 0x177
3400a38e:	4b17      	ldr	r3, [pc, #92]	@ (3400a3ec <xQueueGenericCreateStatic+0x6c>)
3400a390:	4a17      	ldr	r2, [pc, #92]	@ (3400a3f0 <xQueueGenericCreateStatic+0x70>)
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
3400a392:	4818      	ldr	r0, [pc, #96]	@ (3400a3f4 <xQueueGenericCreateStatic+0x74>)
3400a394:	f015 fb38 	bl	3401fa08 <__assert_func>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
3400a398:	b108      	cbz	r0, 3400a39e <xQueueGenericCreateStatic+0x1e>
            ( pxStaticQueue != NULL ) &&
3400a39a:	b13a      	cbz	r2, 3400a3ac <xQueueGenericCreateStatic+0x2c>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
3400a39c:	b941      	cbnz	r1, 3400a3b0 <xQueueGenericCreateStatic+0x30>
            configASSERT( pxNewQueue );
3400a39e:	f001 fcd9 	bl	3400bd54 <ulSetInterruptMask>
3400a3a2:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
3400a3a6:	4b11      	ldr	r3, [pc, #68]	@ (3400a3ec <xQueueGenericCreateStatic+0x6c>)
3400a3a8:	4a11      	ldr	r2, [pc, #68]	@ (3400a3f0 <xQueueGenericCreateStatic+0x70>)
3400a3aa:	e7f2      	b.n	3400a392 <xQueueGenericCreateStatic+0x12>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
3400a3ac:	2900      	cmp	r1, #0
3400a3ae:	d1f6      	bne.n	3400a39e <xQueueGenericCreateStatic+0x1e>
                volatile size_t xSize = sizeof( StaticQueue_t );
3400a3b0:	2350      	movs	r3, #80	@ 0x50
3400a3b2:	9301      	str	r3, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
3400a3b4:	9b01      	ldr	r3, [sp, #4]
3400a3b6:	2b50      	cmp	r3, #80	@ 0x50
3400a3b8:	d006      	beq.n	3400a3c8 <xQueueGenericCreateStatic+0x48>
3400a3ba:	f001 fccb 	bl	3400bd54 <ulSetInterruptMask>
3400a3be:	f240 1189 	movw	r1, #393	@ 0x189
3400a3c2:	4b0a      	ldr	r3, [pc, #40]	@ (3400a3ec <xQueueGenericCreateStatic+0x6c>)
3400a3c4:	4a0a      	ldr	r2, [pc, #40]	@ (3400a3f0 <xQueueGenericCreateStatic+0x70>)
3400a3c6:	e7e4      	b.n	3400a392 <xQueueGenericCreateStatic+0x12>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
3400a3c8:	2900      	cmp	r1, #0
3400a3ca:	bf08      	it	eq
3400a3cc:	4622      	moveq	r2, r4
    pxNewQueue->uxItemSize = uxItemSize;
3400a3ce:	e9c4 010f 	strd	r0, r1, [r4, #60]	@ 0x3c
3400a3d2:	6022      	str	r2, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
3400a3d4:	2101      	movs	r1, #1
3400a3d6:	4620      	mov	r0, r4
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
3400a3d8:	9b01      	ldr	r3, [sp, #4]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
3400a3da:	f7ff ff87 	bl	3400a2ec <xQueueGenericReset>
    }
3400a3de:	4620      	mov	r0, r4
        pxNewQueue->ucQueueType = ucQueueType;
3400a3e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
3400a3e4:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    }
3400a3e8:	b002      	add	sp, #8
3400a3ea:	bd10      	pop	{r4, pc}
3400a3ec:	3402b7cd 	.word	0x3402b7cd
3400a3f0:	34037b21 	.word	0x34037b21
3400a3f4:	3402c903 	.word	0x3402c903

3400a3f8 <xQueueCreateCountingSemaphoreStatic>:
    {
3400a3f8:	b513      	push	{r0, r1, r4, lr}
3400a3fa:	4613      	mov	r3, r2
3400a3fc:	460c      	mov	r4, r1
        if( ( uxMaxCount != 0 ) &&
3400a3fe:	b158      	cbz	r0, 3400a418 <xQueueCreateCountingSemaphoreStatic+0x20>
3400a400:	4288      	cmp	r0, r1
3400a402:	d309      	bcc.n	3400a418 <xQueueCreateCountingSemaphoreStatic+0x20>
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
3400a404:	2202      	movs	r2, #2
3400a406:	9200      	str	r2, [sp, #0]
3400a408:	2200      	movs	r2, #0
3400a40a:	4611      	mov	r1, r2
3400a40c:	f7ff ffb8 	bl	3400a380 <xQueueGenericCreateStatic>
            if( xHandle != NULL )
3400a410:	b100      	cbz	r0, 3400a414 <xQueueCreateCountingSemaphoreStatic+0x1c>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
3400a412:	6384      	str	r4, [r0, #56]	@ 0x38
    }
3400a414:	b002      	add	sp, #8
3400a416:	bd10      	pop	{r4, pc}
            configASSERT( xHandle );
3400a418:	f001 fc9c 	bl	3400bd54 <ulSetInterruptMask>
3400a41c:	f240 3147 	movw	r1, #839	@ 0x347
3400a420:	4b02      	ldr	r3, [pc, #8]	@ (3400a42c <xQueueCreateCountingSemaphoreStatic+0x34>)
3400a422:	4a03      	ldr	r2, [pc, #12]	@ (3400a430 <xQueueCreateCountingSemaphoreStatic+0x38>)
3400a424:	4803      	ldr	r0, [pc, #12]	@ (3400a434 <xQueueCreateCountingSemaphoreStatic+0x3c>)
3400a426:	f015 faef 	bl	3401fa08 <__assert_func>
3400a42a:	bf00      	nop
3400a42c:	3402b7cd 	.word	0x3402b7cd
3400a430:	34037afd 	.word	0x34037afd
3400a434:	3402c903 	.word	0x3402c903

3400a438 <xQueueGenericSend>:
{
3400a438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
3400a43c:	460f      	mov	r7, r1
3400a43e:	461e      	mov	r6, r3
    configASSERT( pxQueue );
3400a440:	4604      	mov	r4, r0
{
3400a442:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
3400a444:	b940      	cbnz	r0, 3400a458 <xQueueGenericSend+0x20>
3400a446:	f001 fc85 	bl	3400bd54 <ulSetInterruptMask>
3400a44a:	f240 317d 	movw	r1, #893	@ 0x37d
3400a44e:	4b48      	ldr	r3, [pc, #288]	@ (3400a570 <xQueueGenericSend+0x138>)
3400a450:	4a48      	ldr	r2, [pc, #288]	@ (3400a574 <xQueueGenericSend+0x13c>)
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
3400a452:	4849      	ldr	r0, [pc, #292]	@ (3400a578 <xQueueGenericSend+0x140>)
3400a454:	f015 fad8 	bl	3401fa08 <__assert_func>
3400a458:	b941      	cbnz	r1, 3400a46c <xQueueGenericSend+0x34>
3400a45a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400a45c:	b133      	cbz	r3, 3400a46c <xQueueGenericSend+0x34>
3400a45e:	f001 fc79 	bl	3400bd54 <ulSetInterruptMask>
3400a462:	f240 317e 	movw	r1, #894	@ 0x37e
3400a466:	4b42      	ldr	r3, [pc, #264]	@ (3400a570 <xQueueGenericSend+0x138>)
3400a468:	4a42      	ldr	r2, [pc, #264]	@ (3400a574 <xQueueGenericSend+0x13c>)
3400a46a:	e7f2      	b.n	3400a452 <xQueueGenericSend+0x1a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
3400a46c:	2e02      	cmp	r6, #2
3400a46e:	d109      	bne.n	3400a484 <xQueueGenericSend+0x4c>
3400a470:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a472:	2b01      	cmp	r3, #1
3400a474:	d006      	beq.n	3400a484 <xQueueGenericSend+0x4c>
3400a476:	f001 fc6d 	bl	3400bd54 <ulSetInterruptMask>
3400a47a:	f240 317f 	movw	r1, #895	@ 0x37f
3400a47e:	4b3c      	ldr	r3, [pc, #240]	@ (3400a570 <xQueueGenericSend+0x138>)
3400a480:	4a3c      	ldr	r2, [pc, #240]	@ (3400a574 <xQueueGenericSend+0x13c>)
3400a482:	e7e6      	b.n	3400a452 <xQueueGenericSend+0x1a>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a484:	f001 f80a 	bl	3400b49c <xTaskGetSchedulerState>
3400a488:	4605      	mov	r5, r0
3400a48a:	b1e0      	cbz	r0, 3400a4c6 <xQueueGenericSend+0x8e>
3400a48c:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
3400a48e:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
3400a492:	f001 fae1 	bl	3400ba58 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
3400a496:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
3400a498:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a49a:	429a      	cmp	r2, r3
3400a49c:	d21d      	bcs.n	3400a4da <xQueueGenericSend+0xa2>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
3400a49e:	4632      	mov	r2, r6
3400a4a0:	4639      	mov	r1, r7
3400a4a2:	4620      	mov	r0, r4
3400a4a4:	f7ff fea3 	bl	3400a1ee <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
3400a4a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a4aa:	b11b      	cbz	r3, 3400a4b4 <xQueueGenericSend+0x7c>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
3400a4ac:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a4b0:	f000 ff38 	bl	3400b324 <xTaskRemoveFromEventList>
3400a4b4:	b108      	cbz	r0, 3400a4ba <xQueueGenericSend+0x82>
                            queueYIELD_IF_USING_PREEMPTION();
3400a4b6:	f001 fac3 	bl	3400ba40 <vPortYield>
                taskEXIT_CRITICAL();
3400a4ba:	f001 fadb 	bl	3400ba74 <vPortExitCritical>
                return pdPASS;
3400a4be:	2001      	movs	r0, #1
}
3400a4c0:	b004      	add	sp, #16
3400a4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a4c6:	9b01      	ldr	r3, [sp, #4]
3400a4c8:	2b00      	cmp	r3, #0
3400a4ca:	d0e0      	beq.n	3400a48e <xQueueGenericSend+0x56>
3400a4cc:	f001 fc42 	bl	3400bd54 <ulSetInterruptMask>
3400a4d0:	f240 3182 	movw	r1, #898	@ 0x382
3400a4d4:	4b26      	ldr	r3, [pc, #152]	@ (3400a570 <xQueueGenericSend+0x138>)
3400a4d6:	4a27      	ldr	r2, [pc, #156]	@ (3400a574 <xQueueGenericSend+0x13c>)
3400a4d8:	e7bb      	b.n	3400a452 <xQueueGenericSend+0x1a>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
3400a4da:	2e02      	cmp	r6, #2
3400a4dc:	d0df      	beq.n	3400a49e <xQueueGenericSend+0x66>
                if( xTicksToWait == ( TickType_t ) 0 )
3400a4de:	9b01      	ldr	r3, [sp, #4]
3400a4e0:	b91b      	cbnz	r3, 3400a4ea <xQueueGenericSend+0xb2>
                    taskEXIT_CRITICAL();
3400a4e2:	f001 fac7 	bl	3400ba74 <vPortExitCritical>
                    return errQUEUE_FULL;
3400a4e6:	2000      	movs	r0, #0
3400a4e8:	e7ea      	b.n	3400a4c0 <xQueueGenericSend+0x88>
                else if( xEntryTimeSet == pdFALSE )
3400a4ea:	b915      	cbnz	r5, 3400a4f2 <xQueueGenericSend+0xba>
                    vTaskInternalSetTimeOutState( &xTimeOut );
3400a4ec:	a802      	add	r0, sp, #8
3400a4ee:	f000 ff83 	bl	3400b3f8 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
3400a4f2:	f001 fabf 	bl	3400ba74 <vPortExitCritical>
        vTaskSuspendAll();
3400a4f6:	f000 fc93 	bl	3400ae20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
3400a4fa:	f001 faad 	bl	3400ba58 <vPortEnterCritical>
3400a4fe:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a502:	2bff      	cmp	r3, #255	@ 0xff
3400a504:	bf08      	it	eq
3400a506:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
3400a50a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a50e:	2bff      	cmp	r3, #255	@ 0xff
3400a510:	bf08      	it	eq
3400a512:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
3400a516:	f001 faad 	bl	3400ba74 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
3400a51a:	a901      	add	r1, sp, #4
3400a51c:	a802      	add	r0, sp, #8
3400a51e:	f000 ff77 	bl	3400b410 <xTaskCheckForTimeOut>
3400a522:	b9f0      	cbnz	r0, 3400a562 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
3400a524:	f001 fa98 	bl	3400ba58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
3400a528:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
3400a52a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a52c:	429a      	cmp	r2, r3
3400a52e:	d10f      	bne.n	3400a550 <xQueueGenericSend+0x118>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
3400a530:	f001 faa0 	bl	3400ba74 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
3400a534:	9901      	ldr	r1, [sp, #4]
3400a536:	f104 0010 	add.w	r0, r4, #16
3400a53a:	f000 fe9f 	bl	3400b27c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
3400a53e:	4620      	mov	r0, r4
3400a540:	f7ff fe9e 	bl	3400a280 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
3400a544:	f000 fd3c 	bl	3400afc0 <xTaskResumeAll>
3400a548:	b948      	cbnz	r0, 3400a55e <xQueueGenericSend+0x126>
                    portYIELD_WITHIN_API();
3400a54a:	f001 fa79 	bl	3400ba40 <vPortYield>
3400a54e:	e006      	b.n	3400a55e <xQueueGenericSend+0x126>
    taskEXIT_CRITICAL();
3400a550:	f001 fa90 	bl	3400ba74 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
3400a554:	4620      	mov	r0, r4
3400a556:	f7ff fe93 	bl	3400a280 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
3400a55a:	f000 fd31 	bl	3400afc0 <xTaskResumeAll>
3400a55e:	2501      	movs	r5, #1
3400a560:	e797      	b.n	3400a492 <xQueueGenericSend+0x5a>
            prvUnlockQueue( pxQueue );
3400a562:	4620      	mov	r0, r4
3400a564:	f7ff fe8c 	bl	3400a280 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
3400a568:	f000 fd2a 	bl	3400afc0 <xTaskResumeAll>
            return errQUEUE_FULL;
3400a56c:	e7bb      	b.n	3400a4e6 <xQueueGenericSend+0xae>
3400a56e:	bf00      	nop
3400a570:	3402b7cd 	.word	0x3402b7cd
3400a574:	34037aeb 	.word	0x34037aeb
3400a578:	3402c903 	.word	0x3402c903

3400a57c <xQueueCreateMutexStatic>:
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
3400a57c:	2200      	movs	r2, #0
    {
3400a57e:	b513      	push	{r0, r1, r4, lr}
3400a580:	460b      	mov	r3, r1
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
3400a582:	9000      	str	r0, [sp, #0]
3400a584:	4611      	mov	r1, r2
3400a586:	2001      	movs	r0, #1
3400a588:	f7ff fefa 	bl	3400a380 <xQueueGenericCreateStatic>
        if( pxNewQueue != NULL )
3400a58c:	4604      	mov	r4, r0
3400a58e:	b138      	cbz	r0, 3400a5a0 <xQueueCreateMutexStatic+0x24>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
3400a590:	2300      	movs	r3, #0
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
3400a592:	461a      	mov	r2, r3
3400a594:	4619      	mov	r1, r3
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
3400a596:	6083      	str	r3, [r0, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
3400a598:	6003      	str	r3, [r0, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
3400a59a:	60c3      	str	r3, [r0, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
3400a59c:	f7ff ff4c 	bl	3400a438 <xQueueGenericSend>
    }
3400a5a0:	4620      	mov	r0, r4
3400a5a2:	b002      	add	sp, #8
3400a5a4:	bd10      	pop	{r4, pc}
	...

3400a5a8 <xQueueGiveFromISR>:
{
3400a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400a5aa:	460e      	mov	r6, r1
    configASSERT( pxQueue );
3400a5ac:	4604      	mov	r4, r0
3400a5ae:	b940      	cbnz	r0, 3400a5c2 <xQueueGiveFromISR+0x1a>
3400a5b0:	f001 fbd0 	bl	3400bd54 <ulSetInterruptMask>
3400a5b4:	f240 41fa 	movw	r1, #1274	@ 0x4fa
3400a5b8:	4b26      	ldr	r3, [pc, #152]	@ (3400a654 <xQueueGiveFromISR+0xac>)
3400a5ba:	4a27      	ldr	r2, [pc, #156]	@ (3400a658 <xQueueGiveFromISR+0xb0>)
    configASSERT( pxQueue->uxItemSize == 0 );
3400a5bc:	4827      	ldr	r0, [pc, #156]	@ (3400a65c <xQueueGiveFromISR+0xb4>)
3400a5be:	f015 fa23 	bl	3401fa08 <__assert_func>
3400a5c2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400a5c4:	b133      	cbz	r3, 3400a5d4 <xQueueGiveFromISR+0x2c>
3400a5c6:	f001 fbc5 	bl	3400bd54 <ulSetInterruptMask>
3400a5ca:	f240 41fe 	movw	r1, #1278	@ 0x4fe
3400a5ce:	4b21      	ldr	r3, [pc, #132]	@ (3400a654 <xQueueGiveFromISR+0xac>)
3400a5d0:	4a21      	ldr	r2, [pc, #132]	@ (3400a658 <xQueueGiveFromISR+0xb0>)
3400a5d2:	e7f3      	b.n	3400a5bc <xQueueGiveFromISR+0x14>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
3400a5d4:	6803      	ldr	r3, [r0, #0]
3400a5d6:	b943      	cbnz	r3, 3400a5ea <xQueueGiveFromISR+0x42>
3400a5d8:	6883      	ldr	r3, [r0, #8]
3400a5da:	b133      	cbz	r3, 3400a5ea <xQueueGiveFromISR+0x42>
3400a5dc:	f001 fbba 	bl	3400bd54 <ulSetInterruptMask>
3400a5e0:	f240 5103 	movw	r1, #1283	@ 0x503
3400a5e4:	4b1b      	ldr	r3, [pc, #108]	@ (3400a654 <xQueueGiveFromISR+0xac>)
3400a5e6:	4a1c      	ldr	r2, [pc, #112]	@ (3400a658 <xQueueGiveFromISR+0xb0>)
3400a5e8:	e7e8      	b.n	3400a5bc <xQueueGiveFromISR+0x14>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
3400a5ea:	f001 fb4f 	bl	3400bc8c <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
3400a5ee:	f001 fbb1 	bl	3400bd54 <ulSetInterruptMask>
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
3400a5f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
3400a5f4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
3400a5f6:	4607      	mov	r7, r0
        if( uxMessagesWaiting < pxQueue->uxLength )
3400a5f8:	429a      	cmp	r2, r3
3400a5fa:	d928      	bls.n	3400a64e <xQueueGiveFromISR+0xa6>
            const int8_t cTxLock = pxQueue->cTxLock;
3400a5fc:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
3400a600:	3301      	adds	r3, #1
            if( cTxLock == queueUNLOCKED )
3400a602:	2aff      	cmp	r2, #255	@ 0xff
            const int8_t cTxLock = pxQueue->cTxLock;
3400a604:	b255      	sxtb	r5, r2
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
3400a606:	63a3      	str	r3, [r4, #56]	@ 0x38
            if( cTxLock == queueUNLOCKED )
3400a608:	d10f      	bne.n	3400a62a <xQueueGiveFromISR+0x82>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
3400a60a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a60c:	b13b      	cbz	r3, 3400a61e <xQueueGiveFromISR+0x76>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
3400a60e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a612:	f000 fe87 	bl	3400b324 <xTaskRemoveFromEventList>
3400a616:	b110      	cbz	r0, 3400a61e <xQueueGiveFromISR+0x76>
                            if( pxHigherPriorityTaskWoken != NULL )
3400a618:	b10e      	cbz	r6, 3400a61e <xQueueGiveFromISR+0x76>
                                *pxHigherPriorityTaskWoken = pdTRUE;
3400a61a:	2301      	movs	r3, #1
3400a61c:	6033      	str	r3, [r6, #0]
            xReturn = pdPASS;
3400a61e:	2401      	movs	r4, #1
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
3400a620:	4638      	mov	r0, r7
3400a622:	f001 fba2 	bl	3400bd6a <vClearInterruptMask>
}
3400a626:	4620      	mov	r0, r4
3400a628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
3400a62a:	f000 fc07 	bl	3400ae3c <uxTaskGetNumberOfTasks>
3400a62e:	4285      	cmp	r5, r0
3400a630:	d2f5      	bcs.n	3400a61e <xQueueGiveFromISR+0x76>
3400a632:	2d7f      	cmp	r5, #127	@ 0x7f
3400a634:	d106      	bne.n	3400a644 <xQueueGiveFromISR+0x9c>
3400a636:	f001 fb8d 	bl	3400bd54 <ulSetInterruptMask>
3400a63a:	f240 5182 	movw	r1, #1410	@ 0x582
3400a63e:	4b05      	ldr	r3, [pc, #20]	@ (3400a654 <xQueueGiveFromISR+0xac>)
3400a640:	4a05      	ldr	r2, [pc, #20]	@ (3400a658 <xQueueGiveFromISR+0xb0>)
3400a642:	e7bb      	b.n	3400a5bc <xQueueGiveFromISR+0x14>
3400a644:	3501      	adds	r5, #1
3400a646:	b26d      	sxtb	r5, r5
3400a648:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
3400a64c:	e7e7      	b.n	3400a61e <xQueueGiveFromISR+0x76>
            xReturn = errQUEUE_FULL;
3400a64e:	2400      	movs	r4, #0
3400a650:	e7e6      	b.n	3400a620 <xQueueGiveFromISR+0x78>
3400a652:	bf00      	nop
3400a654:	3402b7cd 	.word	0x3402b7cd
3400a658:	34037ad9 	.word	0x34037ad9
3400a65c:	3402c903 	.word	0x3402c903

3400a660 <xQueueReceive>:
{
3400a660:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
3400a664:	460e      	mov	r6, r1
    configASSERT( ( pxQueue ) );
3400a666:	4604      	mov	r4, r0
{
3400a668:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
3400a66a:	b940      	cbnz	r0, 3400a67e <xQueueReceive+0x1e>
3400a66c:	f001 fb72 	bl	3400bd54 <ulSetInterruptMask>
3400a670:	f240 519c 	movw	r1, #1436	@ 0x59c
3400a674:	4b3f      	ldr	r3, [pc, #252]	@ (3400a774 <xQueueReceive+0x114>)
3400a676:	4a40      	ldr	r2, [pc, #256]	@ (3400a778 <xQueueReceive+0x118>)
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
3400a678:	4840      	ldr	r0, [pc, #256]	@ (3400a77c <xQueueReceive+0x11c>)
3400a67a:	f015 f9c5 	bl	3401fa08 <__assert_func>
3400a67e:	b941      	cbnz	r1, 3400a692 <xQueueReceive+0x32>
3400a680:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400a682:	b133      	cbz	r3, 3400a692 <xQueueReceive+0x32>
3400a684:	f001 fb66 	bl	3400bd54 <ulSetInterruptMask>
3400a688:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
3400a68c:	4b39      	ldr	r3, [pc, #228]	@ (3400a774 <xQueueReceive+0x114>)
3400a68e:	4a3a      	ldr	r2, [pc, #232]	@ (3400a778 <xQueueReceive+0x118>)
3400a690:	e7f2      	b.n	3400a678 <xQueueReceive+0x18>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a692:	f000 ff03 	bl	3400b49c <xTaskGetSchedulerState>
3400a696:	4605      	mov	r5, r0
3400a698:	b1d8      	cbz	r0, 3400a6d2 <xQueueReceive+0x72>
3400a69a:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
3400a69c:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
3400a6a0:	f001 f9da 	bl	3400ba58 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
3400a6a4:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
3400a6a6:	b1f7      	cbz	r7, 3400a6e6 <xQueueReceive+0x86>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
3400a6a8:	4631      	mov	r1, r6
3400a6aa:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
3400a6ac:	3f01      	subs	r7, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
3400a6ae:	f7ff fdd1 	bl	3400a254 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
3400a6b2:	63a7      	str	r7, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
3400a6b4:	6923      	ldr	r3, [r4, #16]
3400a6b6:	b133      	cbz	r3, 3400a6c6 <xQueueReceive+0x66>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a6b8:	f104 0010 	add.w	r0, r4, #16
3400a6bc:	f000 fe32 	bl	3400b324 <xTaskRemoveFromEventList>
3400a6c0:	b108      	cbz	r0, 3400a6c6 <xQueueReceive+0x66>
                        queueYIELD_IF_USING_PREEMPTION();
3400a6c2:	f001 f9bd 	bl	3400ba40 <vPortYield>
                taskEXIT_CRITICAL();
3400a6c6:	f001 f9d5 	bl	3400ba74 <vPortExitCritical>
                return pdPASS;
3400a6ca:	2001      	movs	r0, #1
}
3400a6cc:	b004      	add	sp, #16
3400a6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a6d2:	9b01      	ldr	r3, [sp, #4]
3400a6d4:	2b00      	cmp	r3, #0
3400a6d6:	d0e1      	beq.n	3400a69c <xQueueReceive+0x3c>
3400a6d8:	f001 fb3c 	bl	3400bd54 <ulSetInterruptMask>
3400a6dc:	f240 51a5 	movw	r1, #1445	@ 0x5a5
3400a6e0:	4b24      	ldr	r3, [pc, #144]	@ (3400a774 <xQueueReceive+0x114>)
3400a6e2:	4a25      	ldr	r2, [pc, #148]	@ (3400a778 <xQueueReceive+0x118>)
3400a6e4:	e7c8      	b.n	3400a678 <xQueueReceive+0x18>
                if( xTicksToWait == ( TickType_t ) 0 )
3400a6e6:	9b01      	ldr	r3, [sp, #4]
3400a6e8:	b91b      	cbnz	r3, 3400a6f2 <xQueueReceive+0x92>
                    taskEXIT_CRITICAL();
3400a6ea:	f001 f9c3 	bl	3400ba74 <vPortExitCritical>
                    return errQUEUE_EMPTY;
3400a6ee:	2000      	movs	r0, #0
3400a6f0:	e7ec      	b.n	3400a6cc <xQueueReceive+0x6c>
                else if( xEntryTimeSet == pdFALSE )
3400a6f2:	b915      	cbnz	r5, 3400a6fa <xQueueReceive+0x9a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
3400a6f4:	a802      	add	r0, sp, #8
3400a6f6:	f000 fe7f 	bl	3400b3f8 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
3400a6fa:	f001 f9bb 	bl	3400ba74 <vPortExitCritical>
        vTaskSuspendAll();
3400a6fe:	f000 fb8f 	bl	3400ae20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
3400a702:	f001 f9a9 	bl	3400ba58 <vPortEnterCritical>
3400a706:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a70a:	2bff      	cmp	r3, #255	@ 0xff
3400a70c:	bf08      	it	eq
3400a70e:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
3400a712:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a716:	2bff      	cmp	r3, #255	@ 0xff
3400a718:	bf08      	it	eq
3400a71a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
3400a71e:	f001 f9a9 	bl	3400ba74 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
3400a722:	a901      	add	r1, sp, #4
3400a724:	a802      	add	r0, sp, #8
3400a726:	f000 fe73 	bl	3400b410 <xTaskCheckForTimeOut>
3400a72a:	b9c0      	cbnz	r0, 3400a75e <xQueueReceive+0xfe>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a72c:	4620      	mov	r0, r4
3400a72e:	f7ff fd53 	bl	3400a1d8 <prvIsQueueEmpty>
3400a732:	b170      	cbz	r0, 3400a752 <xQueueReceive+0xf2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
3400a734:	9901      	ldr	r1, [sp, #4]
3400a736:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a73a:	f000 fd9f 	bl	3400b27c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
3400a73e:	4620      	mov	r0, r4
3400a740:	f7ff fd9e 	bl	3400a280 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
3400a744:	f000 fc3c 	bl	3400afc0 <xTaskResumeAll>
3400a748:	b908      	cbnz	r0, 3400a74e <xQueueReceive+0xee>
                    portYIELD_WITHIN_API();
3400a74a:	f001 f979 	bl	3400ba40 <vPortYield>
3400a74e:	2501      	movs	r5, #1
3400a750:	e7a6      	b.n	3400a6a0 <xQueueReceive+0x40>
                prvUnlockQueue( pxQueue );
3400a752:	4620      	mov	r0, r4
3400a754:	f7ff fd94 	bl	3400a280 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
3400a758:	f000 fc32 	bl	3400afc0 <xTaskResumeAll>
3400a75c:	e7f7      	b.n	3400a74e <xQueueReceive+0xee>
            prvUnlockQueue( pxQueue );
3400a75e:	4620      	mov	r0, r4
3400a760:	f7ff fd8e 	bl	3400a280 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
3400a764:	f000 fc2c 	bl	3400afc0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a768:	4620      	mov	r0, r4
3400a76a:	f7ff fd35 	bl	3400a1d8 <prvIsQueueEmpty>
3400a76e:	2800      	cmp	r0, #0
3400a770:	d0ed      	beq.n	3400a74e <xQueueReceive+0xee>
3400a772:	e7bc      	b.n	3400a6ee <xQueueReceive+0x8e>
3400a774:	3402b7cd 	.word	0x3402b7cd
3400a778:	34037acb 	.word	0x34037acb
3400a77c:	3402c903 	.word	0x3402c903

3400a780 <xQueueSemaphoreTake>:
{
3400a780:	b5f0      	push	{r4, r5, r6, r7, lr}
3400a782:	b085      	sub	sp, #20
    configASSERT( ( pxQueue ) );
3400a784:	4604      	mov	r4, r0
{
3400a786:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
3400a788:	b940      	cbnz	r0, 3400a79c <xQueueSemaphoreTake+0x1c>
3400a78a:	f001 fae3 	bl	3400bd54 <ulSetInterruptMask>
3400a78e:	f240 612e 	movw	r1, #1582	@ 0x62e
3400a792:	4b4b      	ldr	r3, [pc, #300]	@ (3400a8c0 <xQueueSemaphoreTake+0x140>)
3400a794:	4a4b      	ldr	r2, [pc, #300]	@ (3400a8c4 <xQueueSemaphoreTake+0x144>)
    configASSERT( pxQueue->uxItemSize == 0 );
3400a796:	484c      	ldr	r0, [pc, #304]	@ (3400a8c8 <xQueueSemaphoreTake+0x148>)
3400a798:	f015 f936 	bl	3401fa08 <__assert_func>
3400a79c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
3400a79e:	b135      	cbz	r5, 3400a7ae <xQueueSemaphoreTake+0x2e>
3400a7a0:	f001 fad8 	bl	3400bd54 <ulSetInterruptMask>
3400a7a4:	f240 6132 	movw	r1, #1586	@ 0x632
3400a7a8:	4b45      	ldr	r3, [pc, #276]	@ (3400a8c0 <xQueueSemaphoreTake+0x140>)
3400a7aa:	4a46      	ldr	r2, [pc, #280]	@ (3400a8c4 <xQueueSemaphoreTake+0x144>)
3400a7ac:	e7f3      	b.n	3400a796 <xQueueSemaphoreTake+0x16>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a7ae:	f000 fe75 	bl	3400b49c <xTaskGetSchedulerState>
3400a7b2:	4606      	mov	r6, r0
3400a7b4:	b1d0      	cbz	r0, 3400a7ec <xQueueSemaphoreTake+0x6c>
3400a7b6:	462e      	mov	r6, r5
        prvLockQueue( pxQueue );
3400a7b8:	2700      	movs	r7, #0
        taskENTER_CRITICAL();
3400a7ba:	f001 f94d 	bl	3400ba58 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
3400a7be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
3400a7c0:	b1fb      	cbz	r3, 3400a802 <xQueueSemaphoreTake+0x82>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
3400a7c2:	3b01      	subs	r3, #1
3400a7c4:	63a3      	str	r3, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
3400a7c6:	6823      	ldr	r3, [r4, #0]
3400a7c8:	b913      	cbnz	r3, 3400a7d0 <xQueueSemaphoreTake+0x50>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
3400a7ca:	f000 ff61 	bl	3400b690 <pvTaskIncrementMutexHeldCount>
3400a7ce:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
3400a7d0:	6923      	ldr	r3, [r4, #16]
3400a7d2:	b133      	cbz	r3, 3400a7e2 <xQueueSemaphoreTake+0x62>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a7d4:	f104 0010 	add.w	r0, r4, #16
3400a7d8:	f000 fda4 	bl	3400b324 <xTaskRemoveFromEventList>
3400a7dc:	b108      	cbz	r0, 3400a7e2 <xQueueSemaphoreTake+0x62>
                        queueYIELD_IF_USING_PREEMPTION();
3400a7de:	f001 f92f 	bl	3400ba40 <vPortYield>
                taskEXIT_CRITICAL();
3400a7e2:	f001 f947 	bl	3400ba74 <vPortExitCritical>
                return pdPASS;
3400a7e6:	2001      	movs	r0, #1
}
3400a7e8:	b005      	add	sp, #20
3400a7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a7ec:	9b01      	ldr	r3, [sp, #4]
3400a7ee:	4605      	mov	r5, r0
3400a7f0:	2b00      	cmp	r3, #0
3400a7f2:	d0e1      	beq.n	3400a7b8 <xQueueSemaphoreTake+0x38>
3400a7f4:	f001 faae 	bl	3400bd54 <ulSetInterruptMask>
3400a7f8:	f240 6137 	movw	r1, #1591	@ 0x637
3400a7fc:	4b30      	ldr	r3, [pc, #192]	@ (3400a8c0 <xQueueSemaphoreTake+0x140>)
3400a7fe:	4a31      	ldr	r2, [pc, #196]	@ (3400a8c4 <xQueueSemaphoreTake+0x144>)
3400a800:	e7c9      	b.n	3400a796 <xQueueSemaphoreTake+0x16>
                if( xTicksToWait == ( TickType_t ) 0 )
3400a802:	9b01      	ldr	r3, [sp, #4]
3400a804:	b91b      	cbnz	r3, 3400a80e <xQueueSemaphoreTake+0x8e>
                        taskEXIT_CRITICAL();
3400a806:	f001 f935 	bl	3400ba74 <vPortExitCritical>
                    return errQUEUE_EMPTY;
3400a80a:	2000      	movs	r0, #0
3400a80c:	e7ec      	b.n	3400a7e8 <xQueueSemaphoreTake+0x68>
                else if( xEntryTimeSet == pdFALSE )
3400a80e:	b916      	cbnz	r6, 3400a816 <xQueueSemaphoreTake+0x96>
                    vTaskInternalSetTimeOutState( &xTimeOut );
3400a810:	a802      	add	r0, sp, #8
3400a812:	f000 fdf1 	bl	3400b3f8 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
3400a816:	f001 f92d 	bl	3400ba74 <vPortExitCritical>
        vTaskSuspendAll();
3400a81a:	f000 fb01 	bl	3400ae20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
3400a81e:	f001 f91b 	bl	3400ba58 <vPortEnterCritical>
3400a822:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a826:	2bff      	cmp	r3, #255	@ 0xff
3400a828:	bf08      	it	eq
3400a82a:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
3400a82e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a832:	2bff      	cmp	r3, #255	@ 0xff
3400a834:	bf08      	it	eq
3400a836:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
3400a83a:	f001 f91b 	bl	3400ba74 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
3400a83e:	a901      	add	r1, sp, #4
3400a840:	a802      	add	r0, sp, #8
3400a842:	f000 fde5 	bl	3400b410 <xTaskCheckForTimeOut>
3400a846:	bb10      	cbnz	r0, 3400a88e <xQueueSemaphoreTake+0x10e>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a848:	4620      	mov	r0, r4
3400a84a:	f7ff fcc5 	bl	3400a1d8 <prvIsQueueEmpty>
3400a84e:	b1c0      	cbz	r0, 3400a882 <xQueueSemaphoreTake+0x102>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
3400a850:	6823      	ldr	r3, [r4, #0]
3400a852:	b93b      	cbnz	r3, 3400a864 <xQueueSemaphoreTake+0xe4>
                        taskENTER_CRITICAL();
3400a854:	f001 f900 	bl	3400ba58 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
3400a858:	68a0      	ldr	r0, [r4, #8]
3400a85a:	f000 fe2f 	bl	3400b4bc <xTaskPriorityInherit>
3400a85e:	4605      	mov	r5, r0
                        taskEXIT_CRITICAL();
3400a860:	f001 f908 	bl	3400ba74 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
3400a864:	9901      	ldr	r1, [sp, #4]
3400a866:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a86a:	f000 fd07 	bl	3400b27c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
3400a86e:	4620      	mov	r0, r4
3400a870:	f7ff fd06 	bl	3400a280 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
3400a874:	f000 fba4 	bl	3400afc0 <xTaskResumeAll>
3400a878:	b908      	cbnz	r0, 3400a87e <xQueueSemaphoreTake+0xfe>
                    portYIELD_WITHIN_API();
3400a87a:	f001 f8e1 	bl	3400ba40 <vPortYield>
3400a87e:	2601      	movs	r6, #1
3400a880:	e79b      	b.n	3400a7ba <xQueueSemaphoreTake+0x3a>
                prvUnlockQueue( pxQueue );
3400a882:	4620      	mov	r0, r4
3400a884:	f7ff fcfc 	bl	3400a280 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
3400a888:	f000 fb9a 	bl	3400afc0 <xTaskResumeAll>
3400a88c:	e7f7      	b.n	3400a87e <xQueueSemaphoreTake+0xfe>
            prvUnlockQueue( pxQueue );
3400a88e:	4620      	mov	r0, r4
3400a890:	f7ff fcf6 	bl	3400a280 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
3400a894:	f000 fb94 	bl	3400afc0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a898:	4620      	mov	r0, r4
3400a89a:	f7ff fc9d 	bl	3400a1d8 <prvIsQueueEmpty>
3400a89e:	2800      	cmp	r0, #0
3400a8a0:	d0ed      	beq.n	3400a87e <xQueueSemaphoreTake+0xfe>
                    if( xInheritanceOccurred != pdFALSE )
3400a8a2:	2d00      	cmp	r5, #0
3400a8a4:	d0b1      	beq.n	3400a80a <xQueueSemaphoreTake+0x8a>
                        taskENTER_CRITICAL();
3400a8a6:	f001 f8d7 	bl	3400ba58 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
3400a8aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a8ac:	b119      	cbz	r1, 3400a8b6 <xQueueSemaphoreTake+0x136>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
3400a8ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a8b0:	6819      	ldr	r1, [r3, #0]
3400a8b2:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
3400a8b6:	68a0      	ldr	r0, [r4, #8]
3400a8b8:	f000 fe94 	bl	3400b5e4 <vTaskPriorityDisinheritAfterTimeout>
3400a8bc:	e7a3      	b.n	3400a806 <xQueueSemaphoreTake+0x86>
3400a8be:	bf00      	nop
3400a8c0:	3402b7cd 	.word	0x3402b7cd
3400a8c4:	34037ab7 	.word	0x34037ab7
3400a8c8:	3402c903 	.word	0x3402c903

3400a8cc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
3400a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        configASSERT( xQueue );
3400a8ce:	b940      	cbnz	r0, 3400a8e2 <vQueueAddToRegistry+0x16>
3400a8d0:	f001 fa40 	bl	3400bd54 <ulSetInterruptMask>
3400a8d4:	f640 3115 	movw	r1, #2837	@ 0xb15
3400a8d8:	4b10      	ldr	r3, [pc, #64]	@ (3400a91c <vQueueAddToRegistry+0x50>)
3400a8da:	4a11      	ldr	r2, [pc, #68]	@ (3400a920 <vQueueAddToRegistry+0x54>)
3400a8dc:	4811      	ldr	r0, [pc, #68]	@ (3400a924 <vQueueAddToRegistry+0x58>)
3400a8de:	f015 f893 	bl	3401fa08 <__assert_func>

        if( pcQueueName != NULL )
3400a8e2:	b1c9      	cbz	r1, 3400a918 <vQueueAddToRegistry+0x4c>
        QueueRegistryItem_t * pxEntryToWrite = NULL;
3400a8e4:	2300      	movs	r3, #0
3400a8e6:	4a10      	ldr	r2, [pc, #64]	@ (3400a928 <vQueueAddToRegistry+0x5c>)
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a8e8:	461d      	mov	r5, r3
3400a8ea:	4616      	mov	r6, r2
3400a8ec:	2408      	movs	r4, #8
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
3400a8ee:	6857      	ldr	r7, [r2, #4]
3400a8f0:	4287      	cmp	r7, r0
3400a8f2:	d104      	bne.n	3400a8fe <vQueueAddToRegistry+0x32>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
3400a8f4:	eb06 03c5 	add.w	r3, r6, r5, lsl #3

        if( pxEntryToWrite != NULL )
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
            pxEntryToWrite->xHandle = xQueue;
3400a8f8:	e9c3 1000 	strd	r1, r0, [r3]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
3400a8fc:	e00c      	b.n	3400a918 <vQueueAddToRegistry+0x4c>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
3400a8fe:	b91b      	cbnz	r3, 3400a908 <vQueueAddToRegistry+0x3c>
3400a900:	6817      	ldr	r7, [r2, #0]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
3400a902:	2f00      	cmp	r7, #0
3400a904:	bf08      	it	eq
3400a906:	4613      	moveq	r3, r2
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a908:	3c01      	subs	r4, #1
3400a90a:	f105 0501 	add.w	r5, r5, #1
3400a90e:	f102 0208 	add.w	r2, r2, #8
3400a912:	d1ec      	bne.n	3400a8ee <vQueueAddToRegistry+0x22>
        if( pxEntryToWrite != NULL )
3400a914:	2b00      	cmp	r3, #0
3400a916:	d1ef      	bne.n	3400a8f8 <vQueueAddToRegistry+0x2c>
    }
3400a918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400a91a:	bf00      	nop
3400a91c:	3402b7cd 	.word	0x3402b7cd
3400a920:	34037a96 	.word	0x34037a96
3400a924:	3402c903 	.word	0x3402c903
3400a928:	340d1e94 	.word	0x340d1e94

3400a92c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
3400a92c:	b538      	push	{r3, r4, r5, lr}

        configASSERT( xQueue );

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a92e:	2300      	movs	r3, #0
        configASSERT( xQueue );
3400a930:	b168      	cbz	r0, 3400a94e <vQueueUnregisterQueue+0x22>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
3400a932:	2208      	movs	r2, #8
3400a934:	490d      	ldr	r1, [pc, #52]	@ (3400a96c <vQueueUnregisterQueue+0x40>)
3400a936:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
3400a93a:	00dc      	lsls	r4, r3, #3
3400a93c:	4285      	cmp	r5, r0
3400a93e:	d10f      	bne.n	3400a960 <vQueueUnregisterQueue+0x34>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
3400a940:	2100      	movs	r1, #0
3400a942:	4a0b      	ldr	r2, [pc, #44]	@ (3400a970 <vQueueUnregisterQueue+0x44>)
3400a944:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
3400a948:	4422      	add	r2, r4
3400a94a:	6051      	str	r1, [r2, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
3400a94c:	bd38      	pop	{r3, r4, r5, pc}
        configASSERT( xQueue );
3400a94e:	f001 fa01 	bl	3400bd54 <ulSetInterruptMask>
3400a952:	f640 3161 	movw	r1, #2913	@ 0xb61
3400a956:	4b07      	ldr	r3, [pc, #28]	@ (3400a974 <vQueueUnregisterQueue+0x48>)
3400a958:	4a07      	ldr	r2, [pc, #28]	@ (3400a978 <vQueueUnregisterQueue+0x4c>)
3400a95a:	4808      	ldr	r0, [pc, #32]	@ (3400a97c <vQueueUnregisterQueue+0x50>)
3400a95c:	f015 f854 	bl	3401fa08 <__assert_func>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a960:	3a01      	subs	r2, #1
3400a962:	f103 0301 	add.w	r3, r3, #1
3400a966:	d1e6      	bne.n	3400a936 <vQueueUnregisterQueue+0xa>
3400a968:	e7f0      	b.n	3400a94c <vQueueUnregisterQueue+0x20>
3400a96a:	bf00      	nop
3400a96c:	340d1e98 	.word	0x340d1e98
3400a970:	340d1e94 	.word	0x340d1e94
3400a974:	3402b7cd 	.word	0x3402b7cd
3400a978:	34037a80 	.word	0x34037a80
3400a97c:	3402c903 	.word	0x3402c903

3400a980 <vQueueDelete>:
{
3400a980:	b508      	push	{r3, lr}
    configASSERT( pxQueue );
3400a982:	b940      	cbnz	r0, 3400a996 <vQueueDelete+0x16>
3400a984:	f001 f9e6 	bl	3400bd54 <ulSetInterruptMask>
3400a988:	f44f 6105 	mov.w	r1, #2128	@ 0x850
3400a98c:	4b04      	ldr	r3, [pc, #16]	@ (3400a9a0 <vQueueDelete+0x20>)
3400a98e:	4a05      	ldr	r2, [pc, #20]	@ (3400a9a4 <vQueueDelete+0x24>)
3400a990:	4805      	ldr	r0, [pc, #20]	@ (3400a9a8 <vQueueDelete+0x28>)
3400a992:	f015 f839 	bl	3401fa08 <__assert_func>
}
3400a996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        vQueueUnregisterQueue( pxQueue );
3400a99a:	f7ff bfc7 	b.w	3400a92c <vQueueUnregisterQueue>
3400a99e:	bf00      	nop
3400a9a0:	3402b7cd 	.word	0x3402b7cd
3400a9a4:	34037aaa 	.word	0x34037aaa
3400a9a8:	3402c903 	.word	0x3402c903

3400a9ac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
3400a9ac:	b570      	push	{r4, r5, r6, lr}
3400a9ae:	4604      	mov	r4, r0
3400a9b0:	460d      	mov	r5, r1
3400a9b2:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
3400a9b4:	f001 f850 	bl	3400ba58 <vPortEnterCritical>
3400a9b8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a9bc:	2bff      	cmp	r3, #255	@ 0xff
3400a9be:	bf04      	itt	eq
3400a9c0:	2300      	moveq	r3, #0
3400a9c2:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
3400a9c6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a9ca:	2bff      	cmp	r3, #255	@ 0xff
3400a9cc:	bf04      	itt	eq
3400a9ce:	2300      	moveq	r3, #0
3400a9d0:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
3400a9d4:	f001 f84e 	bl	3400ba74 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
3400a9d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400a9da:	b92b      	cbnz	r3, 3400a9e8 <vQueueWaitForMessageRestricted+0x3c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
3400a9dc:	4632      	mov	r2, r6
3400a9de:	4629      	mov	r1, r5
3400a9e0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a9e4:	f000 fc6a 	bl	3400b2bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
3400a9e8:	4620      	mov	r0, r4
    }
3400a9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
3400a9ee:	f7ff bc47 	b.w	3400a280 <prvUnlockQueue>
	...

3400a9f4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
3400a9f4:	b508      	push	{r3, lr}
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3400a9f6:	4c0e      	ldr	r4, [pc, #56]	@ (3400aa30 <prvIdleTask+0x3c>)
        {
            taskENTER_CRITICAL();
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a9f8:	4e0e      	ldr	r6, [pc, #56]	@ (3400aa34 <prvIdleTask+0x40>)
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
                --uxCurrentNumberOfTasks;
3400a9fa:	4d0f      	ldr	r5, [pc, #60]	@ (3400aa38 <prvIdleTask+0x44>)
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3400a9fc:	6823      	ldr	r3, [r4, #0]
3400a9fe:	b933      	cbnz	r3, 3400aa0e <prvIdleTask+0x1a>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3400aa00:	4b0e      	ldr	r3, [pc, #56]	@ (3400aa3c <prvIdleTask+0x48>)
3400aa02:	681b      	ldr	r3, [r3, #0]
3400aa04:	2b01      	cmp	r3, #1
3400aa06:	d9f8      	bls.n	3400a9fa <prvIdleTask+0x6>
                taskYIELD();
3400aa08:	f001 f81a 	bl	3400ba40 <vPortYield>
3400aa0c:	e7f5      	b.n	3400a9fa <prvIdleTask+0x6>
            taskENTER_CRITICAL();
3400aa0e:	f001 f823 	bl	3400ba58 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400aa12:	68f3      	ldr	r3, [r6, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3400aa14:	68d8      	ldr	r0, [r3, #12]
3400aa16:	3004      	adds	r0, #4
3400aa18:	f7ff fbce 	bl	3400a1b8 <uxListRemove>
                --uxCurrentNumberOfTasks;
3400aa1c:	682b      	ldr	r3, [r5, #0]
3400aa1e:	3b01      	subs	r3, #1
3400aa20:	602b      	str	r3, [r5, #0]
                --uxDeletedTasksWaitingCleanUp;
3400aa22:	6823      	ldr	r3, [r4, #0]
3400aa24:	3b01      	subs	r3, #1
3400aa26:	6023      	str	r3, [r4, #0]
            }
            taskEXIT_CRITICAL();
3400aa28:	f001 f824 	bl	3400ba74 <vPortExitCritical>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
3400aa2c:	e7e6      	b.n	3400a9fc <prvIdleTask+0x8>
3400aa2e:	bf00      	nop
3400aa30:	340d1f1c 	.word	0x340d1f1c
3400aa34:	340d1f20 	.word	0x340d1f20
3400aa38:	340d1f04 	.word	0x340d1f04
3400aa3c:	340d1f78 	.word	0x340d1f78

3400aa40 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
3400aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400aa42:	4606      	mov	r6, r0
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
3400aa44:	4b1a      	ldr	r3, [pc, #104]	@ (3400aab0 <prvAddCurrentTaskToDelayedList+0x70>)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400aa46:	4c1b      	ldr	r4, [pc, #108]	@ (3400aab4 <prvAddCurrentTaskToDelayedList+0x74>)
    const TickType_t xConstTickCount = xTickCount;
3400aa48:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400aa4a:	6820      	ldr	r0, [r4, #0]
{
3400aa4c:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400aa4e:	3004      	adds	r0, #4
3400aa50:	f7ff fbb2 	bl	3400a1b8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
3400aa54:	1c73      	adds	r3, r6, #1
3400aa56:	d113      	bne.n	3400aa80 <prvAddCurrentTaskToDelayedList+0x40>
3400aa58:	b197      	cbz	r7, 3400aa80 <prvAddCurrentTaskToDelayedList+0x40>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400aa5a:	4b17      	ldr	r3, [pc, #92]	@ (3400aab8 <prvAddCurrentTaskToDelayedList+0x78>)
3400aa5c:	6821      	ldr	r1, [r4, #0]
3400aa5e:	685a      	ldr	r2, [r3, #4]
3400aa60:	608a      	str	r2, [r1, #8]
3400aa62:	6890      	ldr	r0, [r2, #8]
3400aa64:	6821      	ldr	r1, [r4, #0]
3400aa66:	60c8      	str	r0, [r1, #12]
3400aa68:	6821      	ldr	r1, [r4, #0]
3400aa6a:	3104      	adds	r1, #4
3400aa6c:	6041      	str	r1, [r0, #4]
3400aa6e:	6821      	ldr	r1, [r4, #0]
3400aa70:	3104      	adds	r1, #4
3400aa72:	6091      	str	r1, [r2, #8]
3400aa74:	6822      	ldr	r2, [r4, #0]
3400aa76:	6153      	str	r3, [r2, #20]
3400aa78:	681a      	ldr	r2, [r3, #0]
3400aa7a:	3201      	adds	r2, #1
3400aa7c:	601a      	str	r2, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
3400aa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
3400aa80:	6823      	ldr	r3, [r4, #0]
3400aa82:	19ad      	adds	r5, r5, r6
3400aa84:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
3400aa86:	d307      	bcc.n	3400aa98 <prvAddCurrentTaskToDelayedList+0x58>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400aa88:	4b0c      	ldr	r3, [pc, #48]	@ (3400aabc <prvAddCurrentTaskToDelayedList+0x7c>)
3400aa8a:	6818      	ldr	r0, [r3, #0]
3400aa8c:	6821      	ldr	r1, [r4, #0]
}
3400aa8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400aa92:	3104      	adds	r1, #4
3400aa94:	f7ff bb79 	b.w	3400a18a <vListInsert>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400aa98:	4b09      	ldr	r3, [pc, #36]	@ (3400aac0 <prvAddCurrentTaskToDelayedList+0x80>)
3400aa9a:	6818      	ldr	r0, [r3, #0]
3400aa9c:	6821      	ldr	r1, [r4, #0]
3400aa9e:	3104      	adds	r1, #4
3400aaa0:	f7ff fb73 	bl	3400a18a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
3400aaa4:	4b07      	ldr	r3, [pc, #28]	@ (3400aac4 <prvAddCurrentTaskToDelayedList+0x84>)
3400aaa6:	681a      	ldr	r2, [r3, #0]
3400aaa8:	42aa      	cmp	r2, r5
                    xNextTaskUnblockTime = xTimeToWake;
3400aaaa:	bf88      	it	hi
3400aaac:	601d      	strhi	r5, [r3, #0]
}
3400aaae:	e7e6      	b.n	3400aa7e <prvAddCurrentTaskToDelayedList+0x3e>
3400aab0:	340d1f00 	.word	0x340d1f00
3400aab4:	340d23d8 	.word	0x340d23d8
3400aab8:	340d1f08 	.word	0x340d1f08
3400aabc:	340d1f48 	.word	0x340d1f48
3400aac0:	340d1f4c 	.word	0x340d1f4c
3400aac4:	340d1ee4 	.word	0x340d1ee4

3400aac8 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3400aac8:	4a06      	ldr	r2, [pc, #24]	@ (3400aae4 <prvResetNextTaskUnblockTime+0x1c>)
3400aaca:	6813      	ldr	r3, [r2, #0]
3400aacc:	6819      	ldr	r1, [r3, #0]
3400aace:	4b06      	ldr	r3, [pc, #24]	@ (3400aae8 <prvResetNextTaskUnblockTime+0x20>)
3400aad0:	b919      	cbnz	r1, 3400aada <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
3400aad2:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
3400aad6:	601a      	str	r2, [r3, #0]
}
3400aad8:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
3400aada:	6812      	ldr	r2, [r2, #0]
3400aadc:	68d2      	ldr	r2, [r2, #12]
3400aade:	6812      	ldr	r2, [r2, #0]
3400aae0:	e7f9      	b.n	3400aad6 <prvResetNextTaskUnblockTime+0xe>
3400aae2:	bf00      	nop
3400aae4:	340d1f4c 	.word	0x340d1f4c
3400aae8:	340d1ee4 	.word	0x340d1ee4

3400aaec <xTaskCreateStatic>:
    {
3400aaec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3400aaf0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
3400aaf2:	4607      	mov	r7, r0
3400aaf4:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	@ 0x28
3400aaf8:	460e      	mov	r6, r1
3400aafa:	4615      	mov	r5, r2
3400aafc:	4698      	mov	r8, r3
        configASSERT( puxStackBuffer != NULL );
3400aafe:	f1ba 0f00 	cmp.w	sl, #0
3400ab02:	d108      	bne.n	3400ab16 <xTaskCreateStatic+0x2a>
3400ab04:	f001 f926 	bl	3400bd54 <ulSetInterruptMask>
3400ab08:	f240 2143 	movw	r1, #579	@ 0x243
3400ab0c:	4b60      	ldr	r3, [pc, #384]	@ (3400ac90 <xTaskCreateStatic+0x1a4>)
3400ab0e:	4a61      	ldr	r2, [pc, #388]	@ (3400ac94 <xTaskCreateStatic+0x1a8>)
        configASSERT( pxTaskBuffer != NULL );
3400ab10:	4861      	ldr	r0, [pc, #388]	@ (3400ac98 <xTaskCreateStatic+0x1ac>)
3400ab12:	f014 ff79 	bl	3401fa08 <__assert_func>
3400ab16:	b934      	cbnz	r4, 3400ab26 <xTaskCreateStatic+0x3a>
3400ab18:	f001 f91c 	bl	3400bd54 <ulSetInterruptMask>
3400ab1c:	f44f 7111 	mov.w	r1, #580	@ 0x244
3400ab20:	4b5b      	ldr	r3, [pc, #364]	@ (3400ac90 <xTaskCreateStatic+0x1a4>)
3400ab22:	4a5c      	ldr	r2, [pc, #368]	@ (3400ac94 <xTaskCreateStatic+0x1a8>)
3400ab24:	e7f4      	b.n	3400ab10 <xTaskCreateStatic+0x24>
            volatile size_t xSize = sizeof( StaticTask_t );
3400ab26:	2360      	movs	r3, #96	@ 0x60
3400ab28:	9301      	str	r3, [sp, #4]
            configASSERT( xSize == sizeof( TCB_t ) );
3400ab2a:	9a01      	ldr	r2, [sp, #4]
3400ab2c:	429a      	cmp	r2, r3
3400ab2e:	d006      	beq.n	3400ab3e <xTaskCreateStatic+0x52>
3400ab30:	f001 f910 	bl	3400bd54 <ulSetInterruptMask>
3400ab34:	f44f 7113 	mov.w	r1, #588	@ 0x24c
3400ab38:	4b55      	ldr	r3, [pc, #340]	@ (3400ac90 <xTaskCreateStatic+0x1a4>)
3400ab3a:	4a56      	ldr	r2, [pc, #344]	@ (3400ac94 <xTaskCreateStatic+0x1a8>)
3400ab3c:	e7e8      	b.n	3400ab10 <xTaskCreateStatic+0x24>
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
3400ab3e:	2100      	movs	r1, #0
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
3400ab40:	00ad      	lsls	r5, r5, #2
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
3400ab42:	4620      	mov	r0, r4
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
3400ab44:	9b01      	ldr	r3, [sp, #4]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
3400ab46:	f016 fde5 	bl	34021714 <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
3400ab4a:	462a      	mov	r2, r5
3400ab4c:	21a5      	movs	r1, #165	@ 0xa5
3400ab4e:	4650      	mov	r0, sl
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
3400ab50:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
3400ab54:	f016 fdde 	bl	34021714 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
3400ab58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400ab5a:	3d04      	subs	r5, #4
3400ab5c:	441d      	add	r5, r3
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
3400ab5e:	f025 0507 	bic.w	r5, r5, #7
    if( pcName != NULL )
3400ab62:	b16e      	cbz	r6, 3400ab80 <xTaskCreateStatic+0x94>
3400ab64:	2310      	movs	r3, #16
3400ab66:	3e01      	subs	r6, #1
3400ab68:	f104 0233 	add.w	r2, r4, #51	@ 0x33
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
3400ab6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400ab70:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
3400ab74:	b109      	cbz	r1, 3400ab7a <xTaskCreateStatic+0x8e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
3400ab76:	3b01      	subs	r3, #1
3400ab78:	d1f8      	bne.n	3400ab6c <xTaskCreateStatic+0x80>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
3400ab7a:	2300      	movs	r3, #0
3400ab7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
3400ab80:	f1b9 0f37 	cmp.w	r9, #55	@ 0x37
3400ab84:	d906      	bls.n	3400ab94 <xTaskCreateStatic+0xa8>
3400ab86:	f001 f8e5 	bl	3400bd54 <ulSetInterruptMask>
3400ab8a:	f240 3196 	movw	r1, #918	@ 0x396
3400ab8e:	4b40      	ldr	r3, [pc, #256]	@ (3400ac90 <xTaskCreateStatic+0x1a4>)
3400ab90:	4a42      	ldr	r2, [pc, #264]	@ (3400ac9c <xTaskCreateStatic+0x1b0>)
3400ab92:	e7bd      	b.n	3400ab10 <xTaskCreateStatic+0x24>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
3400ab94:	1d26      	adds	r6, r4, #4
3400ab96:	4630      	mov	r0, r6
    pxNewTCB->uxPriority = uxPriority;
3400ab98:	f8c4 902c 	str.w	r9, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
3400ab9c:	f8c4 904c 	str.w	r9, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
3400aba0:	f7ff fae5 	bl	3400a16e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
3400aba4:	f104 0018 	add.w	r0, r4, #24
3400aba8:	f7ff fae1 	bl	3400a16e <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400abac:	f1c9 0138 	rsb	r1, r9, #56	@ 0x38
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
3400abb0:	4643      	mov	r3, r8
3400abb2:	463a      	mov	r2, r7
3400abb4:	4628      	mov	r0, r5
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400abb6:	61a1      	str	r1, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
3400abb8:	6124      	str	r4, [r4, #16]
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
3400abba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
3400abbc:	6264      	str	r4, [r4, #36]	@ 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
3400abbe:	f000 ffb3 	bl	3400bb28 <pxPortInitialiseStack>
3400abc2:	6020      	str	r0, [r4, #0]
    taskENTER_CRITICAL();
3400abc4:	f000 ff48 	bl	3400ba58 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
3400abc8:	4b35      	ldr	r3, [pc, #212]	@ (3400aca0 <xTaskCreateStatic+0x1b4>)
        if( pxCurrentTCB == NULL )
3400abca:	4f36      	ldr	r7, [pc, #216]	@ (3400aca4 <xTaskCreateStatic+0x1b8>)
        uxCurrentNumberOfTasks++;
3400abcc:	681a      	ldr	r2, [r3, #0]
3400abce:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 3400accc <xTaskCreateStatic+0x1e0>
3400abd2:	3201      	adds	r2, #1
3400abd4:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
3400abd6:	683d      	ldr	r5, [r7, #0]
3400abd8:	2d00      	cmp	r5, #0
3400abda:	d14e      	bne.n	3400ac7a <xTaskCreateStatic+0x18e>
            pxCurrentTCB = pxNewTCB;
3400abdc:	603c      	str	r4, [r7, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
3400abde:	681b      	ldr	r3, [r3, #0]
3400abe0:	2b01      	cmp	r3, #1
3400abe2:	d11f      	bne.n	3400ac24 <xTaskCreateStatic+0x138>
3400abe4:	46c1      	mov	r9, r8
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3400abe6:	4648      	mov	r0, r9
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
3400abe8:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3400abea:	f7ff fab5 	bl	3400a158 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
3400abee:	2d38      	cmp	r5, #56	@ 0x38
3400abf0:	f109 0914 	add.w	r9, r9, #20
3400abf4:	d1f7      	bne.n	3400abe6 <xTaskCreateStatic+0xfa>
    vListInitialise( &xDelayedTaskList1 );
3400abf6:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 3400acd0 <xTaskCreateStatic+0x1e4>
    vListInitialise( &xDelayedTaskList2 );
3400abfa:	4d2b      	ldr	r5, [pc, #172]	@ (3400aca8 <xTaskCreateStatic+0x1bc>)
    vListInitialise( &xDelayedTaskList1 );
3400abfc:	4648      	mov	r0, r9
3400abfe:	f7ff faab 	bl	3400a158 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
3400ac02:	4628      	mov	r0, r5
3400ac04:	f7ff faa8 	bl	3400a158 <vListInitialise>
    vListInitialise( &xPendingReadyList );
3400ac08:	4828      	ldr	r0, [pc, #160]	@ (3400acac <xTaskCreateStatic+0x1c0>)
3400ac0a:	f7ff faa5 	bl	3400a158 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
3400ac0e:	4828      	ldr	r0, [pc, #160]	@ (3400acb0 <xTaskCreateStatic+0x1c4>)
3400ac10:	f7ff faa2 	bl	3400a158 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
3400ac14:	4827      	ldr	r0, [pc, #156]	@ (3400acb4 <xTaskCreateStatic+0x1c8>)
3400ac16:	f7ff fa9f 	bl	3400a158 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
3400ac1a:	4b27      	ldr	r3, [pc, #156]	@ (3400acb8 <xTaskCreateStatic+0x1cc>)
3400ac1c:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
3400ac20:	4b26      	ldr	r3, [pc, #152]	@ (3400acbc <xTaskCreateStatic+0x1d0>)
3400ac22:	601d      	str	r5, [r3, #0]
        uxTaskNumber++;
3400ac24:	4a26      	ldr	r2, [pc, #152]	@ (3400acc0 <xTaskCreateStatic+0x1d4>)
3400ac26:	6813      	ldr	r3, [r2, #0]
3400ac28:	3301      	adds	r3, #1
3400ac2a:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
3400ac2c:	4a25      	ldr	r2, [pc, #148]	@ (3400acc4 <xTaskCreateStatic+0x1d8>)
            pxNewTCB->uxTCBNumber = uxTaskNumber;
3400ac2e:	6463      	str	r3, [r4, #68]	@ 0x44
        prvAddTaskToReadyList( pxNewTCB );
3400ac30:	6811      	ldr	r1, [r2, #0]
3400ac32:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ac34:	428b      	cmp	r3, r1
3400ac36:	bf88      	it	hi
3400ac38:	6013      	strhi	r3, [r2, #0]
3400ac3a:	2214      	movs	r2, #20
3400ac3c:	4353      	muls	r3, r2
3400ac3e:	eb08 0103 	add.w	r1, r8, r3
3400ac42:	684a      	ldr	r2, [r1, #4]
3400ac44:	6890      	ldr	r0, [r2, #8]
3400ac46:	60a2      	str	r2, [r4, #8]
3400ac48:	60e0      	str	r0, [r4, #12]
3400ac4a:	6046      	str	r6, [r0, #4]
3400ac4c:	6096      	str	r6, [r2, #8]
3400ac4e:	f858 2003 	ldr.w	r2, [r8, r3]
3400ac52:	6161      	str	r1, [r4, #20]
3400ac54:	3201      	adds	r2, #1
3400ac56:	f848 2003 	str.w	r2, [r8, r3]
    taskEXIT_CRITICAL();
3400ac5a:	f000 ff0b 	bl	3400ba74 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
3400ac5e:	4b1a      	ldr	r3, [pc, #104]	@ (3400acc8 <xTaskCreateStatic+0x1dc>)
3400ac60:	681b      	ldr	r3, [r3, #0]
3400ac62:	b133      	cbz	r3, 3400ac72 <xTaskCreateStatic+0x186>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
3400ac64:	683b      	ldr	r3, [r7, #0]
3400ac66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400ac68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ac6a:	429a      	cmp	r2, r3
3400ac6c:	d201      	bcs.n	3400ac72 <xTaskCreateStatic+0x186>
            taskYIELD_IF_USING_PREEMPTION();
3400ac6e:	f000 fee7 	bl	3400ba40 <vPortYield>
    }
3400ac72:	4620      	mov	r0, r4
3400ac74:	b002      	add	sp, #8
3400ac76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( xSchedulerRunning == pdFALSE )
3400ac7a:	4b13      	ldr	r3, [pc, #76]	@ (3400acc8 <xTaskCreateStatic+0x1dc>)
3400ac7c:	681a      	ldr	r2, [r3, #0]
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
3400ac7e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            if( xSchedulerRunning == pdFALSE )
3400ac80:	2a00      	cmp	r2, #0
3400ac82:	d1cf      	bne.n	3400ac24 <xTaskCreateStatic+0x138>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
3400ac84:	683a      	ldr	r2, [r7, #0]
3400ac86:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400ac88:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
3400ac8a:	bf98      	it	ls
3400ac8c:	603c      	strls	r4, [r7, #0]
3400ac8e:	e7c9      	b.n	3400ac24 <xTaskCreateStatic+0x138>
3400ac90:	3402b7cd 	.word	0x3402b7cd
3400ac94:	34037c73 	.word	0x34037c73
3400ac98:	3402c94e 	.word	0x3402c94e
3400ac9c:	34037c5e 	.word	0x34037c5e
3400aca0:	340d1f04 	.word	0x340d1f04
3400aca4:	340d23d8 	.word	0x340d23d8
3400aca8:	340d1f50 	.word	0x340d1f50
3400acac:	340d1f34 	.word	0x340d1f34
3400acb0:	340d1f20 	.word	0x340d1f20
3400acb4:	340d1f08 	.word	0x340d1f08
3400acb8:	340d1f4c 	.word	0x340d1f4c
3400acbc:	340d1f48 	.word	0x340d1f48
3400acc0:	340d1ee8 	.word	0x340d1ee8
3400acc4:	340d1efc 	.word	0x340d1efc
3400acc8:	340d1ef8 	.word	0x340d1ef8
3400accc:	340d1f78 	.word	0x340d1f78
3400acd0:	340d1f64 	.word	0x340d1f64

3400acd4 <vTaskDelete>:
    {
3400acd4:	b570      	push	{r4, r5, r6, lr}
3400acd6:	4604      	mov	r4, r0
3400acd8:	4d1f      	ldr	r5, [pc, #124]	@ (3400ad58 <vTaskDelete+0x84>)
        taskENTER_CRITICAL();
3400acda:	f000 febd 	bl	3400ba58 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
3400acde:	b904      	cbnz	r4, 3400ace2 <vTaskDelete+0xe>
3400ace0:	682c      	ldr	r4, [r5, #0]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400ace2:	1d26      	adds	r6, r4, #4
3400ace4:	4630      	mov	r0, r6
3400ace6:	f7ff fa67 	bl	3400a1b8 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3400acea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400acec:	b11b      	cbz	r3, 3400acf6 <vTaskDelete+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
3400acee:	f104 0018 	add.w	r0, r4, #24
3400acf2:	f7ff fa61 	bl	3400a1b8 <uxListRemove>
            uxTaskNumber++;
3400acf6:	4a19      	ldr	r2, [pc, #100]	@ (3400ad5c <vTaskDelete+0x88>)
3400acf8:	6813      	ldr	r3, [r2, #0]
3400acfa:	3301      	adds	r3, #1
3400acfc:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
3400acfe:	682b      	ldr	r3, [r5, #0]
3400ad00:	42a3      	cmp	r3, r4
3400ad02:	d11c      	bne.n	3400ad3e <vTaskDelete+0x6a>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
3400ad04:	4631      	mov	r1, r6
3400ad06:	4816      	ldr	r0, [pc, #88]	@ (3400ad60 <vTaskDelete+0x8c>)
3400ad08:	f7ff fa34 	bl	3400a174 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
3400ad0c:	4a15      	ldr	r2, [pc, #84]	@ (3400ad64 <vTaskDelete+0x90>)
3400ad0e:	6813      	ldr	r3, [r2, #0]
3400ad10:	3301      	adds	r3, #1
3400ad12:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
3400ad14:	f000 feae 	bl	3400ba74 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
3400ad18:	682b      	ldr	r3, [r5, #0]
        if( xSchedulerRunning != pdFALSE )
3400ad1a:	4b13      	ldr	r3, [pc, #76]	@ (3400ad68 <vTaskDelete+0x94>)
3400ad1c:	681b      	ldr	r3, [r3, #0]
3400ad1e:	b1cb      	cbz	r3, 3400ad54 <vTaskDelete+0x80>
            if( pxTCB == pxCurrentTCB )
3400ad20:	682b      	ldr	r3, [r5, #0]
3400ad22:	42a3      	cmp	r3, r4
3400ad24:	d116      	bne.n	3400ad54 <vTaskDelete+0x80>
                configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
3400ad26:	4b11      	ldr	r3, [pc, #68]	@ (3400ad6c <vTaskDelete+0x98>)
3400ad28:	681b      	ldr	r3, [r3, #0]
3400ad2a:	b17b      	cbz	r3, 3400ad4c <vTaskDelete+0x78>
3400ad2c:	f001 f812 	bl	3400bd54 <ulSetInterruptMask>
3400ad30:	f240 41b3 	movw	r1, #1203	@ 0x4b3
3400ad34:	4b0e      	ldr	r3, [pc, #56]	@ (3400ad70 <vTaskDelete+0x9c>)
3400ad36:	4a0f      	ldr	r2, [pc, #60]	@ (3400ad74 <vTaskDelete+0xa0>)
3400ad38:	480f      	ldr	r0, [pc, #60]	@ (3400ad78 <vTaskDelete+0xa4>)
3400ad3a:	f014 fe65 	bl	3401fa08 <__assert_func>
                --uxCurrentNumberOfTasks;
3400ad3e:	4a0f      	ldr	r2, [pc, #60]	@ (3400ad7c <vTaskDelete+0xa8>)
3400ad40:	6813      	ldr	r3, [r2, #0]
3400ad42:	3b01      	subs	r3, #1
3400ad44:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
3400ad46:	f7ff febf 	bl	3400aac8 <prvResetNextTaskUnblockTime>
3400ad4a:	e7e3      	b.n	3400ad14 <vTaskDelete+0x40>
    }
3400ad4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                portYIELD_WITHIN_API();
3400ad50:	f000 be76 	b.w	3400ba40 <vPortYield>
    }
3400ad54:	bd70      	pop	{r4, r5, r6, pc}
3400ad56:	bf00      	nop
3400ad58:	340d23d8 	.word	0x340d23d8
3400ad5c:	340d1ee8 	.word	0x340d1ee8
3400ad60:	340d1f20 	.word	0x340d1f20
3400ad64:	340d1f1c 	.word	0x340d1f1c
3400ad68:	340d1ef8 	.word	0x340d1ef8
3400ad6c:	340d1edc 	.word	0x340d1edc
3400ad70:	3402b7cd 	.word	0x3402b7cd
3400ad74:	34037c52 	.word	0x34037c52
3400ad78:	3402c94e 	.word	0x3402c94e
3400ad7c:	340d1f04 	.word	0x340d1f04

3400ad80 <vTaskStartScheduler>:
{
3400ad80:	b530      	push	{r4, r5, lr}
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
3400ad82:	2500      	movs	r5, #0
{
3400ad84:	b089      	sub	sp, #36	@ 0x24
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
3400ad86:	aa07      	add	r2, sp, #28
3400ad88:	a906      	add	r1, sp, #24
3400ad8a:	a805      	add	r0, sp, #20
        StackType_t * pxIdleTaskStackBuffer = NULL;
3400ad8c:	e9cd 5505 	strd	r5, r5, [sp, #20]
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
3400ad90:	f014 f8fe 	bl	3401ef90 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
3400ad94:	9b05      	ldr	r3, [sp, #20]
3400ad96:	9a07      	ldr	r2, [sp, #28]
3400ad98:	9302      	str	r3, [sp, #8]
3400ad9a:	9b06      	ldr	r3, [sp, #24]
3400ad9c:	4916      	ldr	r1, [pc, #88]	@ (3400adf8 <vTaskStartScheduler+0x78>)
3400ad9e:	e9cd 5300 	strd	r5, r3, [sp]
3400ada2:	4816      	ldr	r0, [pc, #88]	@ (3400adfc <vTaskStartScheduler+0x7c>)
3400ada4:	462b      	mov	r3, r5
3400ada6:	f7ff fea1 	bl	3400aaec <xTaskCreateStatic>
3400adaa:	4b15      	ldr	r3, [pc, #84]	@ (3400ae00 <vTaskStartScheduler+0x80>)
3400adac:	6018      	str	r0, [r3, #0]
        if( xIdleTaskHandle != NULL )
3400adae:	b1a0      	cbz	r0, 3400adda <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
3400adb0:	f000 fddc 	bl	3400b96c <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
3400adb4:	2801      	cmp	r0, #1
            xReturn = xTimerCreateTimerTask();
3400adb6:	4604      	mov	r4, r0
    if( xReturn == pdPASS )
3400adb8:	d113      	bne.n	3400ade2 <vTaskStartScheduler+0x62>
    #include "freertos_tasks_c_additions.h"

    #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
        static void freertos_tasks_c_additions_init( void )
        {
            FREERTOS_TASKS_C_ADDITIONS_INIT();
3400adba:	f7f7 f8e5 	bl	34001f88 <freertos_libc_init>
        portDISABLE_INTERRUPTS();
3400adbe:	f000 ffc9 	bl	3400bd54 <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
3400adc2:	f04f 32ff 	mov.w	r2, #4294967295
3400adc6:	4b0f      	ldr	r3, [pc, #60]	@ (3400ae04 <vTaskStartScheduler+0x84>)
3400adc8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
3400adca:	4b0f      	ldr	r3, [pc, #60]	@ (3400ae08 <vTaskStartScheduler+0x88>)
3400adcc:	601c      	str	r4, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
3400adce:	4b0f      	ldr	r3, [pc, #60]	@ (3400ae0c <vTaskStartScheduler+0x8c>)
3400add0:	601d      	str	r5, [r3, #0]
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
3400add2:	f014 f89b 	bl	3401ef0c <TIM4_Config>
        xPortStartScheduler();
3400add6:	f000 fedf 	bl	3400bb98 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
3400adda:	4b0d      	ldr	r3, [pc, #52]	@ (3400ae10 <vTaskStartScheduler+0x90>)
3400addc:	681b      	ldr	r3, [r3, #0]
}
3400adde:	b009      	add	sp, #36	@ 0x24
3400ade0:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
3400ade2:	3401      	adds	r4, #1
3400ade4:	d1f9      	bne.n	3400adda <vTaskStartScheduler+0x5a>
3400ade6:	f000 ffb5 	bl	3400bd54 <ulSetInterruptMask>
3400adea:	f44f 6102 	mov.w	r1, #2080	@ 0x820
3400adee:	4b09      	ldr	r3, [pc, #36]	@ (3400ae14 <vTaskStartScheduler+0x94>)
3400adf0:	4a09      	ldr	r2, [pc, #36]	@ (3400ae18 <vTaskStartScheduler+0x98>)
3400adf2:	480a      	ldr	r0, [pc, #40]	@ (3400ae1c <vTaskStartScheduler+0x9c>)
3400adf4:	f014 fe08 	bl	3401fa08 <__assert_func>
3400adf8:	3402c999 	.word	0x3402c999
3400adfc:	3400a9f5 	.word	0x3400a9f5
3400ae00:	340d1ee0 	.word	0x340d1ee0
3400ae04:	340d1ee4 	.word	0x340d1ee4
3400ae08:	340d1ef8 	.word	0x340d1ef8
3400ae0c:	340d1f00 	.word	0x340d1f00
3400ae10:	34037c88 	.word	0x34037c88
3400ae14:	3402b7cd 	.word	0x3402b7cd
3400ae18:	34037c23 	.word	0x34037c23
3400ae1c:	3402c94e 	.word	0x3402c94e

3400ae20 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
3400ae20:	4a02      	ldr	r2, [pc, #8]	@ (3400ae2c <vTaskSuspendAll+0xc>)
3400ae22:	6813      	ldr	r3, [r2, #0]
3400ae24:	3301      	adds	r3, #1
3400ae26:	6013      	str	r3, [r2, #0]
}
3400ae28:	4770      	bx	lr
3400ae2a:	bf00      	nop
3400ae2c:	340d1edc 	.word	0x340d1edc

3400ae30 <xTaskGetTickCount>:
        xTicks = xTickCount;
3400ae30:	4b01      	ldr	r3, [pc, #4]	@ (3400ae38 <xTaskGetTickCount+0x8>)
3400ae32:	6818      	ldr	r0, [r3, #0]
}
3400ae34:	4770      	bx	lr
3400ae36:	bf00      	nop
3400ae38:	340d1f00 	.word	0x340d1f00

3400ae3c <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
3400ae3c:	4b01      	ldr	r3, [pc, #4]	@ (3400ae44 <uxTaskGetNumberOfTasks+0x8>)
3400ae3e:	6818      	ldr	r0, [r3, #0]
}
3400ae40:	4770      	bx	lr
3400ae42:	bf00      	nop
3400ae44:	340d1f04 	.word	0x340d1f04

3400ae48 <xTaskIncrementTick>:
{
3400ae48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400ae4c:	4b4e      	ldr	r3, [pc, #312]	@ (3400af88 <xTaskIncrementTick+0x140>)
3400ae4e:	681b      	ldr	r3, [r3, #0]
3400ae50:	2b00      	cmp	r3, #0
3400ae52:	f040 8093 	bne.w	3400af7c <xTaskIncrementTick+0x134>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
3400ae56:	4b4d      	ldr	r3, [pc, #308]	@ (3400af8c <xTaskIncrementTick+0x144>)
3400ae58:	681c      	ldr	r4, [r3, #0]
3400ae5a:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
3400ae5c:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
3400ae5e:	b9bc      	cbnz	r4, 3400ae90 <xTaskIncrementTick+0x48>
            taskSWITCH_DELAYED_LISTS();
3400ae60:	4b4b      	ldr	r3, [pc, #300]	@ (3400af90 <xTaskIncrementTick+0x148>)
3400ae62:	681a      	ldr	r2, [r3, #0]
3400ae64:	6812      	ldr	r2, [r2, #0]
3400ae66:	b142      	cbz	r2, 3400ae7a <xTaskIncrementTick+0x32>
3400ae68:	f000 ff74 	bl	3400bd54 <ulSetInterruptMask>
3400ae6c:	f640 21f4 	movw	r1, #2804	@ 0xaf4
3400ae70:	4b48      	ldr	r3, [pc, #288]	@ (3400af94 <xTaskIncrementTick+0x14c>)
3400ae72:	4a49      	ldr	r2, [pc, #292]	@ (3400af98 <xTaskIncrementTick+0x150>)
3400ae74:	4849      	ldr	r0, [pc, #292]	@ (3400af9c <xTaskIncrementTick+0x154>)
3400ae76:	f014 fdc7 	bl	3401fa08 <__assert_func>
3400ae7a:	4a49      	ldr	r2, [pc, #292]	@ (3400afa0 <xTaskIncrementTick+0x158>)
3400ae7c:	6819      	ldr	r1, [r3, #0]
3400ae7e:	6810      	ldr	r0, [r2, #0]
3400ae80:	6018      	str	r0, [r3, #0]
3400ae82:	6011      	str	r1, [r2, #0]
3400ae84:	4a47      	ldr	r2, [pc, #284]	@ (3400afa4 <xTaskIncrementTick+0x15c>)
3400ae86:	6813      	ldr	r3, [r2, #0]
3400ae88:	3301      	adds	r3, #1
3400ae8a:	6013      	str	r3, [r2, #0]
3400ae8c:	f7ff fe1c 	bl	3400aac8 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
3400ae90:	f8df c120 	ldr.w	ip, [pc, #288]	@ 3400afb4 <xTaskIncrementTick+0x16c>
    BaseType_t xSwitchRequired = pdFALSE;
3400ae94:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
3400ae96:	f8dc 3000 	ldr.w	r3, [ip]
3400ae9a:	4a43      	ldr	r2, [pc, #268]	@ (3400afa8 <xTaskIncrementTick+0x160>)
3400ae9c:	429c      	cmp	r4, r3
3400ae9e:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 3400afb8 <xTaskIncrementTick+0x170>
3400aea2:	d20f      	bcs.n	3400aec4 <xTaskIncrementTick+0x7c>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
3400aea4:	2114      	movs	r1, #20
3400aea6:	f8d8 3000 	ldr.w	r3, [r8]
3400aeaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400aeac:	434b      	muls	r3, r1
3400aeae:	58d3      	ldr	r3, [r2, r3]
                xSwitchRequired = pdTRUE;
3400aeb0:	2b02      	cmp	r3, #2
            if( xYieldPending != pdFALSE )
3400aeb2:	4b3e      	ldr	r3, [pc, #248]	@ (3400afac <xTaskIncrementTick+0x164>)
                xSwitchRequired = pdTRUE;
3400aeb4:	bf28      	it	cs
3400aeb6:	2001      	movcs	r0, #1
            if( xYieldPending != pdFALSE )
3400aeb8:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
3400aeba:	2b00      	cmp	r3, #0
3400aebc:	bf18      	it	ne
3400aebe:	2001      	movne	r0, #1
}
3400aec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3400aec4:	f8df e0c8 	ldr.w	lr, [pc, #200]	@ 3400af90 <xTaskIncrementTick+0x148>
                    prvAddTaskToReadyList( pxTCB );
3400aec8:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 3400afbc <xTaskIncrementTick+0x174>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3400aecc:	f8de 3000 	ldr.w	r3, [lr]
3400aed0:	681b      	ldr	r3, [r3, #0]
3400aed2:	b923      	cbnz	r3, 3400aede <xTaskIncrementTick+0x96>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400aed4:	f04f 33ff 	mov.w	r3, #4294967295
3400aed8:	f8cc 3000 	str.w	r3, [ip]
                    break;
3400aedc:	e7e2      	b.n	3400aea4 <xTaskIncrementTick+0x5c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400aede:	f8de 3000 	ldr.w	r3, [lr]
3400aee2:	68db      	ldr	r3, [r3, #12]
3400aee4:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
3400aee6:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
3400aee8:	428c      	cmp	r4, r1
3400aeea:	d202      	bcs.n	3400aef2 <xTaskIncrementTick+0xaa>
                        xNextTaskUnblockTime = xItemValue;
3400aeec:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
3400aef0:	e7d8      	b.n	3400aea4 <xTaskIncrementTick+0x5c>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
3400aef2:	695d      	ldr	r5, [r3, #20]
3400aef4:	e9d3 1602 	ldrd	r1, r6, [r3, #8]
3400aef8:	608e      	str	r6, [r1, #8]
3400aefa:	6071      	str	r1, [r6, #4]
3400aefc:	6869      	ldr	r1, [r5, #4]
3400aefe:	1d1f      	adds	r7, r3, #4
3400af00:	42b9      	cmp	r1, r7
3400af02:	f04f 0100 	mov.w	r1, #0
3400af06:	bf08      	it	eq
3400af08:	606e      	streq	r6, [r5, #4]
3400af0a:	6159      	str	r1, [r3, #20]
3400af0c:	6829      	ldr	r1, [r5, #0]
3400af0e:	3901      	subs	r1, #1
3400af10:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3400af12:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
3400af14:	b17d      	cbz	r5, 3400af36 <xTaskIncrementTick+0xee>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
3400af16:	e9d3 1607 	ldrd	r1, r6, [r3, #28]
3400af1a:	608e      	str	r6, [r1, #8]
3400af1c:	6071      	str	r1, [r6, #4]
3400af1e:	6869      	ldr	r1, [r5, #4]
3400af20:	f103 0a18 	add.w	sl, r3, #24
3400af24:	4551      	cmp	r1, sl
3400af26:	f04f 0100 	mov.w	r1, #0
3400af2a:	bf08      	it	eq
3400af2c:	606e      	streq	r6, [r5, #4]
3400af2e:	6299      	str	r1, [r3, #40]	@ 0x28
3400af30:	6829      	ldr	r1, [r5, #0]
3400af32:	3901      	subs	r1, #1
3400af34:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
3400af36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3400af38:	f8d9 5000 	ldr.w	r5, [r9]
3400af3c:	42a9      	cmp	r1, r5
3400af3e:	f04f 0514 	mov.w	r5, #20
3400af42:	fb05 f501 	mul.w	r5, r5, r1
3400af46:	eb02 0a05 	add.w	sl, r2, r5
3400af4a:	f8da 6004 	ldr.w	r6, [sl, #4]
3400af4e:	bf88      	it	hi
3400af50:	f8c9 1000 	strhi.w	r1, [r9]
3400af54:	f8d6 b008 	ldr.w	fp, [r6, #8]
3400af58:	609e      	str	r6, [r3, #8]
3400af5a:	f8c3 b00c 	str.w	fp, [r3, #12]
3400af5e:	f8cb 7004 	str.w	r7, [fp, #4]
3400af62:	60b7      	str	r7, [r6, #8]
3400af64:	f8c3 a014 	str.w	sl, [r3, #20]
3400af68:	5953      	ldr	r3, [r2, r5]
3400af6a:	3301      	adds	r3, #1
3400af6c:	5153      	str	r3, [r2, r5]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3400af6e:	f8d8 3000 	ldr.w	r3, [r8]
3400af72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            xSwitchRequired = pdTRUE;
3400af74:	4299      	cmp	r1, r3
3400af76:	bf88      	it	hi
3400af78:	2001      	movhi	r0, #1
3400af7a:	e7a7      	b.n	3400aecc <xTaskIncrementTick+0x84>
        ++xPendedTicks;
3400af7c:	4a0c      	ldr	r2, [pc, #48]	@ (3400afb0 <xTaskIncrementTick+0x168>)
    BaseType_t xSwitchRequired = pdFALSE;
3400af7e:	2000      	movs	r0, #0
        ++xPendedTicks;
3400af80:	6813      	ldr	r3, [r2, #0]
3400af82:	3301      	adds	r3, #1
3400af84:	6013      	str	r3, [r2, #0]
3400af86:	e79b      	b.n	3400aec0 <xTaskIncrementTick+0x78>
3400af88:	340d1edc 	.word	0x340d1edc
3400af8c:	340d1f00 	.word	0x340d1f00
3400af90:	340d1f4c 	.word	0x340d1f4c
3400af94:	3402b7cd 	.word	0x3402b7cd
3400af98:	34037c01 	.word	0x34037c01
3400af9c:	3402c94e 	.word	0x3402c94e
3400afa0:	340d1f48 	.word	0x340d1f48
3400afa4:	340d1eec 	.word	0x340d1eec
3400afa8:	340d1f78 	.word	0x340d1f78
3400afac:	340d1ef0 	.word	0x340d1ef0
3400afb0:	340d1ef4 	.word	0x340d1ef4
3400afb4:	340d1ee4 	.word	0x340d1ee4
3400afb8:	340d23d8 	.word	0x340d23d8
3400afbc:	340d1efc 	.word	0x340d1efc

3400afc0 <xTaskResumeAll>:
{
3400afc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
3400afc4:	4c40      	ldr	r4, [pc, #256]	@ (3400b0c8 <xTaskResumeAll+0x108>)
3400afc6:	6823      	ldr	r3, [r4, #0]
3400afc8:	b943      	cbnz	r3, 3400afdc <xTaskResumeAll+0x1c>
3400afca:	f000 fec3 	bl	3400bd54 <ulSetInterruptMask>
3400afce:	f640 0193 	movw	r1, #2195	@ 0x893
3400afd2:	4b3e      	ldr	r3, [pc, #248]	@ (3400b0cc <xTaskResumeAll+0x10c>)
3400afd4:	4a3e      	ldr	r2, [pc, #248]	@ (3400b0d0 <xTaskResumeAll+0x110>)
3400afd6:	483f      	ldr	r0, [pc, #252]	@ (3400b0d4 <xTaskResumeAll+0x114>)
3400afd8:	f014 fd16 	bl	3401fa08 <__assert_func>
    taskENTER_CRITICAL();
3400afdc:	f000 fd3c 	bl	3400ba58 <vPortEnterCritical>
        --uxSchedulerSuspended;
3400afe0:	6823      	ldr	r3, [r4, #0]
3400afe2:	3b01      	subs	r3, #1
3400afe4:	6023      	str	r3, [r4, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400afe6:	6823      	ldr	r3, [r4, #0]
3400afe8:	b12b      	cbz	r3, 3400aff6 <xTaskResumeAll+0x36>
    BaseType_t xAlreadyYielded = pdFALSE;
3400afea:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
3400afec:	f000 fd42 	bl	3400ba74 <vPortExitCritical>
}
3400aff0:	4620      	mov	r0, r4
3400aff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
3400aff6:	4a38      	ldr	r2, [pc, #224]	@ (3400b0d8 <xTaskResumeAll+0x118>)
3400aff8:	6812      	ldr	r2, [r2, #0]
3400affa:	2a00      	cmp	r2, #0
3400affc:	d0f5      	beq.n	3400afea <xTaskResumeAll+0x2a>
                    prvAddTaskToReadyList( pxTCB );
3400affe:	f04f 0c14 	mov.w	ip, #20
                        xYieldPending = pdTRUE;
3400b002:	f04f 0901 	mov.w	r9, #1
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
3400b006:	4e35      	ldr	r6, [pc, #212]	@ (3400b0dc <xTaskResumeAll+0x11c>)
                    prvAddTaskToReadyList( pxTCB );
3400b008:	4f35      	ldr	r7, [pc, #212]	@ (3400b0e0 <xTaskResumeAll+0x120>)
3400b00a:	4936      	ldr	r1, [pc, #216]	@ (3400b0e4 <xTaskResumeAll+0x124>)
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3400b00c:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 3400b0f0 <xTaskResumeAll+0x130>
                        xYieldPending = pdTRUE;
3400b010:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 3400b0ec <xTaskResumeAll+0x12c>
3400b014:	e03e      	b.n	3400b094 <xTaskResumeAll+0xd4>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b016:	68f3      	ldr	r3, [r6, #12]
3400b018:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
3400b01a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
3400b01c:	e9d3 2407 	ldrd	r2, r4, [r3, #28]
3400b020:	6094      	str	r4, [r2, #8]
3400b022:	6062      	str	r2, [r4, #4]
3400b024:	6842      	ldr	r2, [r0, #4]
3400b026:	f103 0518 	add.w	r5, r3, #24
3400b02a:	42aa      	cmp	r2, r5
3400b02c:	f04f 0200 	mov.w	r2, #0
3400b030:	bf08      	it	eq
3400b032:	6044      	streq	r4, [r0, #4]
3400b034:	629a      	str	r2, [r3, #40]	@ 0x28
3400b036:	6802      	ldr	r2, [r0, #0]
3400b038:	3a01      	subs	r2, #1
3400b03a:	6002      	str	r2, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
3400b03c:	6958      	ldr	r0, [r3, #20]
3400b03e:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
3400b042:	6094      	str	r4, [r2, #8]
3400b044:	6062      	str	r2, [r4, #4]
3400b046:	6842      	ldr	r2, [r0, #4]
3400b048:	1d1d      	adds	r5, r3, #4
3400b04a:	42aa      	cmp	r2, r5
3400b04c:	6802      	ldr	r2, [r0, #0]
3400b04e:	bf08      	it	eq
3400b050:	6044      	streq	r4, [r0, #4]
3400b052:	3a01      	subs	r2, #1
3400b054:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
3400b056:	6838      	ldr	r0, [r7, #0]
3400b058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400b05a:	4282      	cmp	r2, r0
3400b05c:	fb0c f002 	mul.w	r0, ip, r2
3400b060:	eb01 0a00 	add.w	sl, r1, r0
3400b064:	f8da 4004 	ldr.w	r4, [sl, #4]
3400b068:	bf88      	it	hi
3400b06a:	603a      	strhi	r2, [r7, #0]
3400b06c:	f8d4 b008 	ldr.w	fp, [r4, #8]
3400b070:	609c      	str	r4, [r3, #8]
3400b072:	f8c3 b00c 	str.w	fp, [r3, #12]
3400b076:	f8cb 5004 	str.w	r5, [fp, #4]
3400b07a:	60a5      	str	r5, [r4, #8]
3400b07c:	580c      	ldr	r4, [r1, r0]
3400b07e:	f8c3 a014 	str.w	sl, [r3, #20]
3400b082:	3401      	adds	r4, #1
3400b084:	500c      	str	r4, [r1, r0]
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3400b086:	f8de 0000 	ldr.w	r0, [lr]
3400b08a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
3400b08c:	4282      	cmp	r2, r0
3400b08e:	d901      	bls.n	3400b094 <xTaskResumeAll+0xd4>
                        xYieldPending = pdTRUE;
3400b090:	f8c8 9000 	str.w	r9, [r8]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
3400b094:	6832      	ldr	r2, [r6, #0]
3400b096:	2a00      	cmp	r2, #0
3400b098:	d1bd      	bne.n	3400b016 <xTaskResumeAll+0x56>
                if( pxTCB != NULL )
3400b09a:	b10b      	cbz	r3, 3400b0a0 <xTaskResumeAll+0xe0>
                    prvResetNextTaskUnblockTime();
3400b09c:	f7ff fd14 	bl	3400aac8 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
3400b0a0:	4d11      	ldr	r5, [pc, #68]	@ (3400b0e8 <xTaskResumeAll+0x128>)
3400b0a2:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
3400b0a4:	b144      	cbz	r4, 3400b0b8 <xTaskResumeAll+0xf8>
                                xYieldPending = pdTRUE;
3400b0a6:	2701      	movs	r7, #1
3400b0a8:	4e10      	ldr	r6, [pc, #64]	@ (3400b0ec <xTaskResumeAll+0x12c>)
                            if( xTaskIncrementTick() != pdFALSE )
3400b0aa:	f7ff fecd 	bl	3400ae48 <xTaskIncrementTick>
3400b0ae:	b100      	cbz	r0, 3400b0b2 <xTaskResumeAll+0xf2>
                                xYieldPending = pdTRUE;
3400b0b0:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
3400b0b2:	3c01      	subs	r4, #1
3400b0b4:	d1f9      	bne.n	3400b0aa <xTaskResumeAll+0xea>
                        xPendedTicks = 0;
3400b0b6:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
3400b0b8:	4b0c      	ldr	r3, [pc, #48]	@ (3400b0ec <xTaskResumeAll+0x12c>)
3400b0ba:	681b      	ldr	r3, [r3, #0]
3400b0bc:	2b00      	cmp	r3, #0
3400b0be:	d094      	beq.n	3400afea <xTaskResumeAll+0x2a>
                    taskYIELD_IF_USING_PREEMPTION();
3400b0c0:	f000 fcbe 	bl	3400ba40 <vPortYield>
                        xAlreadyYielded = pdTRUE;
3400b0c4:	2401      	movs	r4, #1
3400b0c6:	e791      	b.n	3400afec <xTaskResumeAll+0x2c>
3400b0c8:	340d1edc 	.word	0x340d1edc
3400b0cc:	3402b7cd 	.word	0x3402b7cd
3400b0d0:	34037c14 	.word	0x34037c14
3400b0d4:	3402c94e 	.word	0x3402c94e
3400b0d8:	340d1f04 	.word	0x340d1f04
3400b0dc:	340d1f34 	.word	0x340d1f34
3400b0e0:	340d1efc 	.word	0x340d1efc
3400b0e4:	340d1f78 	.word	0x340d1f78
3400b0e8:	340d1ef4 	.word	0x340d1ef4
3400b0ec:	340d1ef0 	.word	0x340d1ef0
3400b0f0:	340d23d8 	.word	0x340d23d8

3400b0f4 <xTaskDelayUntil>:
    {
3400b0f4:	b510      	push	{r4, lr}
        configASSERT( pxPreviousWakeTime );
3400b0f6:	b940      	cbnz	r0, 3400b10a <xTaskDelayUntil+0x16>
3400b0f8:	f000 fe2c 	bl	3400bd54 <ulSetInterruptMask>
3400b0fc:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
3400b100:	4b1a      	ldr	r3, [pc, #104]	@ (3400b16c <xTaskDelayUntil+0x78>)
3400b102:	4a1b      	ldr	r2, [pc, #108]	@ (3400b170 <xTaskDelayUntil+0x7c>)
        configASSERT( ( xTimeIncrement > 0U ) );
3400b104:	481b      	ldr	r0, [pc, #108]	@ (3400b174 <xTaskDelayUntil+0x80>)
3400b106:	f014 fc7f 	bl	3401fa08 <__assert_func>
3400b10a:	b931      	cbnz	r1, 3400b11a <xTaskDelayUntil+0x26>
3400b10c:	f000 fe22 	bl	3400bd54 <ulSetInterruptMask>
3400b110:	f240 41c9 	movw	r1, #1225	@ 0x4c9
3400b114:	4b15      	ldr	r3, [pc, #84]	@ (3400b16c <xTaskDelayUntil+0x78>)
3400b116:	4a16      	ldr	r2, [pc, #88]	@ (3400b170 <xTaskDelayUntil+0x7c>)
3400b118:	e7f4      	b.n	3400b104 <xTaskDelayUntil+0x10>
        configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
3400b11a:	4b17      	ldr	r3, [pc, #92]	@ (3400b178 <xTaskDelayUntil+0x84>)
3400b11c:	681b      	ldr	r3, [r3, #0]
3400b11e:	b133      	cbz	r3, 3400b12e <xTaskDelayUntil+0x3a>
3400b120:	f000 fe18 	bl	3400bd54 <ulSetInterruptMask>
3400b124:	f240 41ca 	movw	r1, #1226	@ 0x4ca
3400b128:	4b10      	ldr	r3, [pc, #64]	@ (3400b16c <xTaskDelayUntil+0x78>)
3400b12a:	4a11      	ldr	r2, [pc, #68]	@ (3400b170 <xTaskDelayUntil+0x7c>)
3400b12c:	e7ea      	b.n	3400b104 <xTaskDelayUntil+0x10>
        vTaskSuspendAll();
3400b12e:	f7ff fe77 	bl	3400ae20 <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
3400b132:	4b12      	ldr	r3, [pc, #72]	@ (3400b17c <xTaskDelayUntil+0x88>)
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
3400b134:	6804      	ldr	r4, [r0, #0]
            const TickType_t xConstTickCount = xTickCount;
3400b136:	681a      	ldr	r2, [r3, #0]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
3400b138:	1863      	adds	r3, r4, r1
3400b13a:	bf2c      	ite	cs
3400b13c:	2101      	movcs	r1, #1
3400b13e:	2100      	movcc	r1, #0
            if( xConstTickCount < *pxPreviousWakeTime )
3400b140:	4294      	cmp	r4, r2
3400b142:	d909      	bls.n	3400b158 <xTaskDelayUntil+0x64>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
3400b144:	b949      	cbnz	r1, 3400b15a <xTaskDelayUntil+0x66>
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
3400b146:	2400      	movs	r4, #0
            *pxPreviousWakeTime = xTimeToWake;
3400b148:	6003      	str	r3, [r0, #0]
        xAlreadyYielded = xTaskResumeAll();
3400b14a:	f7ff ff39 	bl	3400afc0 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
3400b14e:	b908      	cbnz	r0, 3400b154 <xTaskDelayUntil+0x60>
            portYIELD_WITHIN_API();
3400b150:	f000 fc76 	bl	3400ba40 <vPortYield>
    }
3400b154:	4620      	mov	r0, r4
3400b156:	bd10      	pop	{r4, pc}
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
3400b158:	b909      	cbnz	r1, 3400b15e <xTaskDelayUntil+0x6a>
3400b15a:	429a      	cmp	r2, r3
3400b15c:	d2f3      	bcs.n	3400b146 <xTaskDelayUntil+0x52>
            *pxPreviousWakeTime = xTimeToWake;
3400b15e:	6003      	str	r3, [r0, #0]
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
3400b160:	2100      	movs	r1, #0
3400b162:	1a98      	subs	r0, r3, r2
3400b164:	f7ff fc6c 	bl	3400aa40 <prvAddCurrentTaskToDelayedList>
3400b168:	2401      	movs	r4, #1
3400b16a:	e7ee      	b.n	3400b14a <xTaskDelayUntil+0x56>
3400b16c:	3402b7cd 	.word	0x3402b7cd
3400b170:	34037c42 	.word	0x34037c42
3400b174:	3402c94e 	.word	0x3402c94e
3400b178:	340d1edc 	.word	0x340d1edc
3400b17c:	340d1f00 	.word	0x340d1f00

3400b180 <vTaskDelay>:
    {
3400b180:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
3400b182:	b918      	cbnz	r0, 3400b18c <vTaskDelay+0xc>
    }
3400b184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            portYIELD_WITHIN_API();
3400b188:	f000 bc5a 	b.w	3400ba40 <vPortYield>
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
3400b18c:	4b0a      	ldr	r3, [pc, #40]	@ (3400b1b8 <vTaskDelay+0x38>)
3400b18e:	6819      	ldr	r1, [r3, #0]
3400b190:	b141      	cbz	r1, 3400b1a4 <vTaskDelay+0x24>
3400b192:	f000 fddf 	bl	3400bd54 <ulSetInterruptMask>
3400b196:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
3400b19a:	4b08      	ldr	r3, [pc, #32]	@ (3400b1bc <vTaskDelay+0x3c>)
3400b19c:	4a08      	ldr	r2, [pc, #32]	@ (3400b1c0 <vTaskDelay+0x40>)
3400b19e:	4809      	ldr	r0, [pc, #36]	@ (3400b1c4 <vTaskDelay+0x44>)
3400b1a0:	f014 fc32 	bl	3401fa08 <__assert_func>
            vTaskSuspendAll();
3400b1a4:	f7ff fe3c 	bl	3400ae20 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
3400b1a8:	f7ff fc4a 	bl	3400aa40 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
3400b1ac:	f7ff ff08 	bl	3400afc0 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
3400b1b0:	2800      	cmp	r0, #0
3400b1b2:	d0e7      	beq.n	3400b184 <vTaskDelay+0x4>
    }
3400b1b4:	bd08      	pop	{r3, pc}
3400b1b6:	bf00      	nop
3400b1b8:	340d1edc 	.word	0x340d1edc
3400b1bc:	3402b7cd 	.word	0x3402b7cd
3400b1c0:	34037c37 	.word	0x34037c37
3400b1c4:	3402c94e 	.word	0x3402c94e

3400b1c8 <vTaskSwitchContext>:
{
3400b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
3400b1ca:	4b22      	ldr	r3, [pc, #136]	@ (3400b254 <vTaskSwitchContext+0x8c>)
3400b1cc:	681a      	ldr	r2, [r3, #0]
3400b1ce:	4b22      	ldr	r3, [pc, #136]	@ (3400b258 <vTaskSwitchContext+0x90>)
3400b1d0:	b112      	cbz	r2, 3400b1d8 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
3400b1d2:	2201      	movs	r2, #1
3400b1d4:	601a      	str	r2, [r3, #0]
}
3400b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        xYieldPending = pdFALSE;
3400b1d8:	601a      	str	r2, [r3, #0]
                ulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
3400b1da:	f013 fed3 	bl	3401ef84 <TIM4_Get_Value>
3400b1de:	4a1f      	ldr	r2, [pc, #124]	@ (3400b25c <vTaskSwitchContext+0x94>)
            if( ulTotalRunTime > ulTaskSwitchedInTime )
3400b1e0:	491f      	ldr	r1, [pc, #124]	@ (3400b260 <vTaskSwitchContext+0x98>)
                ulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
3400b1e2:	6010      	str	r0, [r2, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
3400b1e4:	6813      	ldr	r3, [r2, #0]
3400b1e6:	680c      	ldr	r4, [r1, #0]
3400b1e8:	42a3      	cmp	r3, r4
3400b1ea:	d906      	bls.n	3400b1fa <vTaskSwitchContext+0x32>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3400b1ec:	4b1d      	ldr	r3, [pc, #116]	@ (3400b264 <vTaskSwitchContext+0x9c>)
3400b1ee:	6815      	ldr	r5, [r2, #0]
3400b1f0:	6818      	ldr	r0, [r3, #0]
3400b1f2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
3400b1f4:	1b1b      	subs	r3, r3, r4
3400b1f6:	442b      	add	r3, r5
3400b1f8:	6543      	str	r3, [r0, #84]	@ 0x54
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b1fa:	2714      	movs	r7, #20
3400b1fc:	4d1a      	ldr	r5, [pc, #104]	@ (3400b268 <vTaskSwitchContext+0xa0>)
            ulTaskSwitchedInTime = ulTotalRunTime;
3400b1fe:	6813      	ldr	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b200:	682a      	ldr	r2, [r5, #0]
            ulTaskSwitchedInTime = ulTotalRunTime;
3400b202:	600b      	str	r3, [r1, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b204:	4919      	ldr	r1, [pc, #100]	@ (3400b26c <vTaskSwitchContext+0xa4>)
3400b206:	1c54      	adds	r4, r2, #1
3400b208:	fb07 f302 	mul.w	r3, r7, r2
3400b20c:	58ce      	ldr	r6, [r1, r3]
3400b20e:	18c8      	adds	r0, r1, r3
3400b210:	b196      	cbz	r6, 3400b238 <vTaskSwitchContext+0x70>
3400b212:	6844      	ldr	r4, [r0, #4]
3400b214:	3308      	adds	r3, #8
3400b216:	6864      	ldr	r4, [r4, #4]
3400b218:	440b      	add	r3, r1
3400b21a:	429c      	cmp	r4, r3
3400b21c:	bf08      	it	eq
3400b21e:	68c3      	ldreq	r3, [r0, #12]
3400b220:	6044      	str	r4, [r0, #4]
3400b222:	bf08      	it	eq
3400b224:	6043      	streq	r3, [r0, #4]
3400b226:	2314      	movs	r3, #20
3400b228:	fb03 1102 	mla	r1, r3, r2, r1
3400b22c:	684b      	ldr	r3, [r1, #4]
3400b22e:	68d9      	ldr	r1, [r3, #12]
3400b230:	4b0c      	ldr	r3, [pc, #48]	@ (3400b264 <vTaskSwitchContext+0x9c>)
3400b232:	6019      	str	r1, [r3, #0]
3400b234:	602a      	str	r2, [r5, #0]
}
3400b236:	e7ce      	b.n	3400b1d6 <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b238:	3c01      	subs	r4, #1
3400b23a:	d108      	bne.n	3400b24e <vTaskSwitchContext+0x86>
3400b23c:	f000 fd8a 	bl	3400bd54 <ulSetInterruptMask>
3400b240:	f640 4133 	movw	r1, #3123	@ 0xc33
3400b244:	4b0a      	ldr	r3, [pc, #40]	@ (3400b270 <vTaskSwitchContext+0xa8>)
3400b246:	4a0b      	ldr	r2, [pc, #44]	@ (3400b274 <vTaskSwitchContext+0xac>)
3400b248:	480b      	ldr	r0, [pc, #44]	@ (3400b278 <vTaskSwitchContext+0xb0>)
3400b24a:	f014 fbdd 	bl	3401fa08 <__assert_func>
3400b24e:	3a01      	subs	r2, #1
3400b250:	e7da      	b.n	3400b208 <vTaskSwitchContext+0x40>
3400b252:	bf00      	nop
3400b254:	340d1edc 	.word	0x340d1edc
3400b258:	340d1ef0 	.word	0x340d1ef0
3400b25c:	340d1ed4 	.word	0x340d1ed4
3400b260:	340d1ed8 	.word	0x340d1ed8
3400b264:	340d23d8 	.word	0x340d23d8
3400b268:	340d1efc 	.word	0x340d1efc
3400b26c:	340d1f78 	.word	0x340d1f78
3400b270:	3402b7cd 	.word	0x3402b7cd
3400b274:	34037bee 	.word	0x34037bee
3400b278:	3402c94e 	.word	0x3402c94e

3400b27c <vTaskPlaceOnEventList>:
{
3400b27c:	b510      	push	{r4, lr}
3400b27e:	460c      	mov	r4, r1
    configASSERT( pxEventList );
3400b280:	b940      	cbnz	r0, 3400b294 <vTaskPlaceOnEventList+0x18>
3400b282:	f000 fd67 	bl	3400bd54 <ulSetInterruptMask>
3400b286:	f640 414b 	movw	r1, #3147	@ 0xc4b
3400b28a:	4b08      	ldr	r3, [pc, #32]	@ (3400b2ac <vTaskPlaceOnEventList+0x30>)
3400b28c:	4a08      	ldr	r2, [pc, #32]	@ (3400b2b0 <vTaskPlaceOnEventList+0x34>)
3400b28e:	4809      	ldr	r0, [pc, #36]	@ (3400b2b4 <vTaskPlaceOnEventList+0x38>)
3400b290:	f014 fbba 	bl	3401fa08 <__assert_func>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3400b294:	4b08      	ldr	r3, [pc, #32]	@ (3400b2b8 <vTaskPlaceOnEventList+0x3c>)
3400b296:	6819      	ldr	r1, [r3, #0]
3400b298:	3118      	adds	r1, #24
3400b29a:	f7fe ff76 	bl	3400a18a <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3400b29e:	4620      	mov	r0, r4
}
3400b2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3400b2a4:	2101      	movs	r1, #1
3400b2a6:	f7ff bbcb 	b.w	3400aa40 <prvAddCurrentTaskToDelayedList>
3400b2aa:	bf00      	nop
3400b2ac:	3402b7cd 	.word	0x3402b7cd
3400b2b0:	34037bd8 	.word	0x34037bd8
3400b2b4:	3402c94e 	.word	0x3402c94e
3400b2b8:	340d23d8 	.word	0x340d23d8

3400b2bc <vTaskPlaceOnEventListRestricted>:
    {
3400b2bc:	b570      	push	{r4, r5, r6, lr}
3400b2be:	460c      	mov	r4, r1
3400b2c0:	4611      	mov	r1, r2
        configASSERT( pxEventList );
3400b2c2:	b940      	cbnz	r0, 3400b2d6 <vTaskPlaceOnEventListRestricted+0x1a>
3400b2c4:	f000 fd46 	bl	3400bd54 <ulSetInterruptMask>
3400b2c8:	f640 4181 	movw	r1, #3201	@ 0xc81
3400b2cc:	4b11      	ldr	r3, [pc, #68]	@ (3400b314 <vTaskPlaceOnEventListRestricted+0x58>)
3400b2ce:	4a12      	ldr	r2, [pc, #72]	@ (3400b318 <vTaskPlaceOnEventListRestricted+0x5c>)
3400b2d0:	4812      	ldr	r0, [pc, #72]	@ (3400b31c <vTaskPlaceOnEventListRestricted+0x60>)
3400b2d2:	f014 fb99 	bl	3401fa08 <__assert_func>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3400b2d6:	4b12      	ldr	r3, [pc, #72]	@ (3400b320 <vTaskPlaceOnEventListRestricted+0x64>)
3400b2d8:	6842      	ldr	r2, [r0, #4]
3400b2da:	681d      	ldr	r5, [r3, #0]
3400b2dc:	6896      	ldr	r6, [r2, #8]
3400b2de:	61ea      	str	r2, [r5, #28]
3400b2e0:	681d      	ldr	r5, [r3, #0]
            xTicksToWait = portMAX_DELAY;
3400b2e2:	2900      	cmp	r1, #0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3400b2e4:	622e      	str	r6, [r5, #32]
3400b2e6:	681d      	ldr	r5, [r3, #0]
3400b2e8:	f105 0518 	add.w	r5, r5, #24
3400b2ec:	6075      	str	r5, [r6, #4]
3400b2ee:	681d      	ldr	r5, [r3, #0]
3400b2f0:	681b      	ldr	r3, [r3, #0]
3400b2f2:	f105 0518 	add.w	r5, r5, #24
3400b2f6:	6095      	str	r5, [r2, #8]
3400b2f8:	6298      	str	r0, [r3, #40]	@ 0x28
3400b2fa:	6803      	ldr	r3, [r0, #0]
3400b2fc:	f103 0301 	add.w	r3, r3, #1
3400b300:	6003      	str	r3, [r0, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3400b302:	bf08      	it	eq
3400b304:	4620      	moveq	r0, r4
    }
3400b306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3400b30a:	bf18      	it	ne
3400b30c:	f04f 30ff 	movne.w	r0, #4294967295
3400b310:	f7ff bb96 	b.w	3400aa40 <prvAddCurrentTaskToDelayedList>
3400b314:	3402b7cd 	.word	0x3402b7cd
3400b318:	34037bb8 	.word	0x34037bb8
3400b31c:	3402c94e 	.word	0x3402c94e
3400b320:	340d23d8 	.word	0x340d23d8

3400b324 <xTaskRemoveFromEventList>:
{
3400b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b326:	68c3      	ldr	r3, [r0, #12]
3400b328:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
3400b32a:	b943      	cbnz	r3, 3400b33e <xTaskRemoveFromEventList+0x1a>
3400b32c:	f000 fd12 	bl	3400bd54 <ulSetInterruptMask>
3400b330:	f640 41b1 	movw	r1, #3249	@ 0xcb1
3400b334:	4b27      	ldr	r3, [pc, #156]	@ (3400b3d4 <xTaskRemoveFromEventList+0xb0>)
3400b336:	4a28      	ldr	r2, [pc, #160]	@ (3400b3d8 <xTaskRemoveFromEventList+0xb4>)
3400b338:	4828      	ldr	r0, [pc, #160]	@ (3400b3dc <xTaskRemoveFromEventList+0xb8>)
3400b33a:	f014 fb65 	bl	3401fa08 <__assert_func>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3400b33e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400b340:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
3400b344:	6081      	str	r1, [r0, #8]
3400b346:	6048      	str	r0, [r1, #4]
3400b348:	6850      	ldr	r0, [r2, #4]
3400b34a:	f103 0418 	add.w	r4, r3, #24
3400b34e:	42a0      	cmp	r0, r4
3400b350:	bf08      	it	eq
3400b352:	6051      	streq	r1, [r2, #4]
3400b354:	2100      	movs	r1, #0
3400b356:	6299      	str	r1, [r3, #40]	@ 0x28
3400b358:	6811      	ldr	r1, [r2, #0]
3400b35a:	3901      	subs	r1, #1
3400b35c:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400b35e:	4a20      	ldr	r2, [pc, #128]	@ (3400b3e0 <xTaskRemoveFromEventList+0xbc>)
3400b360:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3400b362:	6812      	ldr	r2, [r2, #0]
3400b364:	2a00      	cmp	r2, #0
3400b366:	d129      	bne.n	3400b3bc <xTaskRemoveFromEventList+0x98>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3400b368:	e9d3 4002 	ldrd	r4, r0, [r3, #8]
3400b36c:	695a      	ldr	r2, [r3, #20]
3400b36e:	60a0      	str	r0, [r4, #8]
3400b370:	6044      	str	r4, [r0, #4]
3400b372:	6854      	ldr	r4, [r2, #4]
3400b374:	1d1d      	adds	r5, r3, #4
3400b376:	42ac      	cmp	r4, r5
3400b378:	bf08      	it	eq
3400b37a:	6050      	streq	r0, [r2, #4]
3400b37c:	6810      	ldr	r0, [r2, #0]
3400b37e:	3801      	subs	r0, #1
3400b380:	6010      	str	r0, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
3400b382:	4a18      	ldr	r2, [pc, #96]	@ (3400b3e4 <xTaskRemoveFromEventList+0xc0>)
3400b384:	6810      	ldr	r0, [r2, #0]
3400b386:	4281      	cmp	r1, r0
3400b388:	bf88      	it	hi
3400b38a:	6011      	strhi	r1, [r2, #0]
3400b38c:	2214      	movs	r2, #20
3400b38e:	434a      	muls	r2, r1
3400b390:	4815      	ldr	r0, [pc, #84]	@ (3400b3e8 <xTaskRemoveFromEventList+0xc4>)
3400b392:	1886      	adds	r6, r0, r2
3400b394:	6874      	ldr	r4, [r6, #4]
3400b396:	68a7      	ldr	r7, [r4, #8]
3400b398:	609c      	str	r4, [r3, #8]
3400b39a:	60df      	str	r7, [r3, #12]
3400b39c:	607d      	str	r5, [r7, #4]
3400b39e:	60a5      	str	r5, [r4, #8]
3400b3a0:	615e      	str	r6, [r3, #20]
3400b3a2:	5883      	ldr	r3, [r0, r2]
3400b3a4:	3301      	adds	r3, #1
3400b3a6:	5083      	str	r3, [r0, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3400b3a8:	4b10      	ldr	r3, [pc, #64]	@ (3400b3ec <xTaskRemoveFromEventList+0xc8>)
3400b3aa:	681b      	ldr	r3, [r3, #0]
3400b3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b3ae:	4299      	cmp	r1, r3
        xYieldPending = pdTRUE;
3400b3b0:	bf85      	ittet	hi
3400b3b2:	2001      	movhi	r0, #1
3400b3b4:	4b0e      	ldrhi	r3, [pc, #56]	@ (3400b3f0 <xTaskRemoveFromEventList+0xcc>)
        xReturn = pdFALSE;
3400b3b6:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
3400b3b8:	6018      	strhi	r0, [r3, #0]
}
3400b3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3400b3bc:	4a0d      	ldr	r2, [pc, #52]	@ (3400b3f4 <xTaskRemoveFromEventList+0xd0>)
3400b3be:	6850      	ldr	r0, [r2, #4]
3400b3c0:	6885      	ldr	r5, [r0, #8]
3400b3c2:	61d8      	str	r0, [r3, #28]
3400b3c4:	621d      	str	r5, [r3, #32]
3400b3c6:	606c      	str	r4, [r5, #4]
3400b3c8:	6084      	str	r4, [r0, #8]
3400b3ca:	629a      	str	r2, [r3, #40]	@ 0x28
3400b3cc:	6813      	ldr	r3, [r2, #0]
3400b3ce:	3301      	adds	r3, #1
3400b3d0:	6013      	str	r3, [r2, #0]
3400b3d2:	e7e9      	b.n	3400b3a8 <xTaskRemoveFromEventList+0x84>
3400b3d4:	3402b7cd 	.word	0x3402b7cd
3400b3d8:	34037b9f 	.word	0x34037b9f
3400b3dc:	3402c94e 	.word	0x3402c94e
3400b3e0:	340d1edc 	.word	0x340d1edc
3400b3e4:	340d1efc 	.word	0x340d1efc
3400b3e8:	340d1f78 	.word	0x340d1f78
3400b3ec:	340d23d8 	.word	0x340d23d8
3400b3f0:	340d1ef0 	.word	0x340d1ef0
3400b3f4:	340d1f34 	.word	0x340d1f34

3400b3f8 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
3400b3f8:	4b03      	ldr	r3, [pc, #12]	@ (3400b408 <vTaskInternalSetTimeOutState+0x10>)
3400b3fa:	681b      	ldr	r3, [r3, #0]
3400b3fc:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
3400b3fe:	4b03      	ldr	r3, [pc, #12]	@ (3400b40c <vTaskInternalSetTimeOutState+0x14>)
3400b400:	681b      	ldr	r3, [r3, #0]
3400b402:	6043      	str	r3, [r0, #4]
}
3400b404:	4770      	bx	lr
3400b406:	bf00      	nop
3400b408:	340d1eec 	.word	0x340d1eec
3400b40c:	340d1f00 	.word	0x340d1f00

3400b410 <xTaskCheckForTimeOut>:
{
3400b410:	b570      	push	{r4, r5, r6, lr}
3400b412:	460d      	mov	r5, r1
    configASSERT( pxTimeOut );
3400b414:	4604      	mov	r4, r0
3400b416:	b940      	cbnz	r0, 3400b42a <xTaskCheckForTimeOut+0x1a>
3400b418:	f000 fc9c 	bl	3400bd54 <ulSetInterruptMask>
3400b41c:	f640 512c 	movw	r1, #3372	@ 0xd2c
3400b420:	4b16      	ldr	r3, [pc, #88]	@ (3400b47c <xTaskCheckForTimeOut+0x6c>)
3400b422:	4a17      	ldr	r2, [pc, #92]	@ (3400b480 <xTaskCheckForTimeOut+0x70>)
    configASSERT( pxTicksToWait );
3400b424:	4817      	ldr	r0, [pc, #92]	@ (3400b484 <xTaskCheckForTimeOut+0x74>)
3400b426:	f014 faef 	bl	3401fa08 <__assert_func>
3400b42a:	b931      	cbnz	r1, 3400b43a <xTaskCheckForTimeOut+0x2a>
3400b42c:	f000 fc92 	bl	3400bd54 <ulSetInterruptMask>
3400b430:	f640 512d 	movw	r1, #3373	@ 0xd2d
3400b434:	4b11      	ldr	r3, [pc, #68]	@ (3400b47c <xTaskCheckForTimeOut+0x6c>)
3400b436:	4a12      	ldr	r2, [pc, #72]	@ (3400b480 <xTaskCheckForTimeOut+0x70>)
3400b438:	e7f4      	b.n	3400b424 <xTaskCheckForTimeOut+0x14>
    taskENTER_CRITICAL();
3400b43a:	f000 fb0d 	bl	3400ba58 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
3400b43e:	4b12      	ldr	r3, [pc, #72]	@ (3400b488 <xTaskCheckForTimeOut+0x78>)
3400b440:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
3400b442:	682b      	ldr	r3, [r5, #0]
3400b444:	1c5a      	adds	r2, r3, #1
3400b446:	d017      	beq.n	3400b478 <xTaskCheckForTimeOut+0x68>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
3400b448:	4810      	ldr	r0, [pc, #64]	@ (3400b48c <xTaskCheckForTimeOut+0x7c>)
3400b44a:	6826      	ldr	r6, [r4, #0]
3400b44c:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3400b44e:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
3400b450:	4286      	cmp	r6, r0
3400b452:	d008      	beq.n	3400b466 <xTaskCheckForTimeOut+0x56>
3400b454:	428a      	cmp	r2, r1
3400b456:	d806      	bhi.n	3400b466 <xTaskCheckForTimeOut+0x56>
            *pxTicksToWait = ( TickType_t ) 0;
3400b458:	2300      	movs	r3, #0
            xReturn = pdTRUE;
3400b45a:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
3400b45c:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
3400b45e:	f000 fb09 	bl	3400ba74 <vPortExitCritical>
}
3400b462:	4620      	mov	r0, r4
3400b464:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3400b466:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
3400b468:	4283      	cmp	r3, r0
3400b46a:	d9f5      	bls.n	3400b458 <xTaskCheckForTimeOut+0x48>
            *pxTicksToWait -= xElapsedTime;
3400b46c:	1a5b      	subs	r3, r3, r1
3400b46e:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
3400b470:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
3400b472:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
3400b474:	f7ff ffc0 	bl	3400b3f8 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
3400b478:	2400      	movs	r4, #0
3400b47a:	e7f0      	b.n	3400b45e <xTaskCheckForTimeOut+0x4e>
3400b47c:	3402b7cd 	.word	0x3402b7cd
3400b480:	34037b8a 	.word	0x34037b8a
3400b484:	3402c94e 	.word	0x3402c94e
3400b488:	340d1f00 	.word	0x340d1f00
3400b48c:	340d1eec 	.word	0x340d1eec

3400b490 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
3400b490:	2201      	movs	r2, #1
3400b492:	4b01      	ldr	r3, [pc, #4]	@ (3400b498 <vTaskMissedYield+0x8>)
3400b494:	601a      	str	r2, [r3, #0]
}
3400b496:	4770      	bx	lr
3400b498:	340d1ef0 	.word	0x340d1ef0

3400b49c <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
3400b49c:	4b05      	ldr	r3, [pc, #20]	@ (3400b4b4 <xTaskGetSchedulerState+0x18>)
3400b49e:	681b      	ldr	r3, [r3, #0]
3400b4a0:	b133      	cbz	r3, 3400b4b0 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400b4a2:	4b05      	ldr	r3, [pc, #20]	@ (3400b4b8 <xTaskGetSchedulerState+0x1c>)
3400b4a4:	6818      	ldr	r0, [r3, #0]
3400b4a6:	fab0 f080 	clz	r0, r0
3400b4aa:	0940      	lsrs	r0, r0, #5
3400b4ac:	0040      	lsls	r0, r0, #1
3400b4ae:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
3400b4b0:	2001      	movs	r0, #1
    }
3400b4b2:	4770      	bx	lr
3400b4b4:	340d1ef8 	.word	0x340d1ef8
3400b4b8:	340d1edc 	.word	0x340d1edc

3400b4bc <xTaskPriorityInherit>:
    {
3400b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
3400b4be:	4604      	mov	r4, r0
3400b4c0:	2800      	cmp	r0, #0
3400b4c2:	d02e      	beq.n	3400b522 <xTaskPriorityInherit+0x66>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3400b4c4:	4d1d      	ldr	r5, [pc, #116]	@ (3400b53c <xTaskPriorityInherit+0x80>)
3400b4c6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400b4c8:	682a      	ldr	r2, [r5, #0]
3400b4ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400b4cc:	4293      	cmp	r3, r2
3400b4ce:	d22d      	bcs.n	3400b52c <xTaskPriorityInherit+0x70>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400b4d0:	6982      	ldr	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
3400b4d2:	4e1b      	ldr	r6, [pc, #108]	@ (3400b540 <xTaskPriorityInherit+0x84>)
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400b4d4:	2a00      	cmp	r2, #0
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400b4d6:	bfa1      	itttt	ge
3400b4d8:	682a      	ldrge	r2, [r5, #0]
3400b4da:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
3400b4dc:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
3400b4e0:	6182      	strge	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
3400b4e2:	2214      	movs	r2, #20
3400b4e4:	fb02 6303 	mla	r3, r2, r3, r6
3400b4e8:	6942      	ldr	r2, [r0, #20]
3400b4ea:	429a      	cmp	r2, r3
3400b4ec:	d11a      	bne.n	3400b524 <xTaskPriorityInherit+0x68>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400b4ee:	1d07      	adds	r7, r0, #4
3400b4f0:	4638      	mov	r0, r7
3400b4f2:	f7fe fe61 	bl	3400a1b8 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400b4f6:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
3400b4f8:	4a12      	ldr	r2, [pc, #72]	@ (3400b544 <xTaskPriorityInherit+0x88>)
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400b4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
3400b4fc:	6811      	ldr	r1, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400b4fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
3400b500:	428b      	cmp	r3, r1
3400b502:	bf88      	it	hi
3400b504:	6013      	strhi	r3, [r2, #0]
3400b506:	2214      	movs	r2, #20
3400b508:	4353      	muls	r3, r2
3400b50a:	18f1      	adds	r1, r6, r3
3400b50c:	684a      	ldr	r2, [r1, #4]
3400b50e:	6890      	ldr	r0, [r2, #8]
3400b510:	60a2      	str	r2, [r4, #8]
3400b512:	60e0      	str	r0, [r4, #12]
3400b514:	6047      	str	r7, [r0, #4]
3400b516:	6097      	str	r7, [r2, #8]
3400b518:	58f2      	ldr	r2, [r6, r3]
3400b51a:	6161      	str	r1, [r4, #20]
3400b51c:	3201      	adds	r2, #1
3400b51e:	50f2      	str	r2, [r6, r3]
                xReturn = pdTRUE;
3400b520:	2001      	movs	r0, #1
    }
3400b522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400b524:	682b      	ldr	r3, [r5, #0]
3400b526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b528:	62c3      	str	r3, [r0, #44]	@ 0x2c
3400b52a:	e7f9      	b.n	3400b520 <xTaskPriorityInherit+0x64>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3400b52c:	682b      	ldr	r3, [r5, #0]
3400b52e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
3400b530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b532:	4298      	cmp	r0, r3
3400b534:	bf2c      	ite	cs
3400b536:	2000      	movcs	r0, #0
3400b538:	2001      	movcc	r0, #1
3400b53a:	e7f2      	b.n	3400b522 <xTaskPriorityInherit+0x66>
3400b53c:	340d23d8 	.word	0x340d23d8
3400b540:	340d1f78 	.word	0x340d1f78
3400b544:	340d1efc 	.word	0x340d1efc

3400b548 <xTaskPriorityDisinherit>:
    {
3400b548:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
3400b54a:	4604      	mov	r4, r0
3400b54c:	b908      	cbnz	r0, 3400b552 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
3400b54e:	2000      	movs	r0, #0
    }
3400b550:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB == pxCurrentTCB );
3400b552:	4b1e      	ldr	r3, [pc, #120]	@ (3400b5cc <xTaskPriorityDisinherit+0x84>)
3400b554:	681b      	ldr	r3, [r3, #0]
3400b556:	4283      	cmp	r3, r0
3400b558:	d008      	beq.n	3400b56c <xTaskPriorityDisinherit+0x24>
3400b55a:	f000 fbfb 	bl	3400bd54 <ulSetInterruptMask>
3400b55e:	f241 018c 	movw	r1, #4236	@ 0x108c
3400b562:	4b1b      	ldr	r3, [pc, #108]	@ (3400b5d0 <xTaskPriorityDisinherit+0x88>)
3400b564:	4a1b      	ldr	r2, [pc, #108]	@ (3400b5d4 <xTaskPriorityDisinherit+0x8c>)
            configASSERT( pxTCB->uxMutexesHeld );
3400b566:	481c      	ldr	r0, [pc, #112]	@ (3400b5d8 <xTaskPriorityDisinherit+0x90>)
3400b568:	f014 fa4e 	bl	3401fa08 <__assert_func>
3400b56c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400b56e:	b933      	cbnz	r3, 3400b57e <xTaskPriorityDisinherit+0x36>
3400b570:	f000 fbf0 	bl	3400bd54 <ulSetInterruptMask>
3400b574:	f241 018d 	movw	r1, #4237	@ 0x108d
3400b578:	4b15      	ldr	r3, [pc, #84]	@ (3400b5d0 <xTaskPriorityDisinherit+0x88>)
3400b57a:	4a16      	ldr	r2, [pc, #88]	@ (3400b5d4 <xTaskPriorityDisinherit+0x8c>)
3400b57c:	e7f3      	b.n	3400b566 <xTaskPriorityDisinherit+0x1e>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3400b57e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
3400b580:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
            ( pxTCB->uxMutexesHeld )--;
3400b582:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3400b584:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
3400b586:	6503      	str	r3, [r0, #80]	@ 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3400b588:	d0e1      	beq.n	3400b54e <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3400b58a:	2b00      	cmp	r3, #0
3400b58c:	d1df      	bne.n	3400b54e <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400b58e:	1d05      	adds	r5, r0, #4
3400b590:	4628      	mov	r0, r5
3400b592:	f7fe fe11 	bl	3400a1b8 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
3400b596:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400b598:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
3400b59c:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
3400b59e:	4a0f      	ldr	r2, [pc, #60]	@ (3400b5dc <xTaskPriorityDisinherit+0x94>)
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
3400b5a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxTCB );
3400b5a2:	6811      	ldr	r1, [r2, #0]
3400b5a4:	428b      	cmp	r3, r1
3400b5a6:	f04f 0114 	mov.w	r1, #20
3400b5aa:	bf88      	it	hi
3400b5ac:	6013      	strhi	r3, [r2, #0]
3400b5ae:	434b      	muls	r3, r1
3400b5b0:	4a0b      	ldr	r2, [pc, #44]	@ (3400b5e0 <xTaskPriorityDisinherit+0x98>)
3400b5b2:	18d0      	adds	r0, r2, r3
3400b5b4:	6841      	ldr	r1, [r0, #4]
3400b5b6:	688e      	ldr	r6, [r1, #8]
3400b5b8:	60a1      	str	r1, [r4, #8]
3400b5ba:	60e6      	str	r6, [r4, #12]
3400b5bc:	6075      	str	r5, [r6, #4]
3400b5be:	608d      	str	r5, [r1, #8]
3400b5c0:	58d1      	ldr	r1, [r2, r3]
3400b5c2:	6160      	str	r0, [r4, #20]
3400b5c4:	3101      	adds	r1, #1
                    xReturn = pdTRUE;
3400b5c6:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxTCB );
3400b5c8:	50d1      	str	r1, [r2, r3]
        return xReturn;
3400b5ca:	e7c1      	b.n	3400b550 <xTaskPriorityDisinherit+0x8>
3400b5cc:	340d23d8 	.word	0x340d23d8
3400b5d0:	3402b7cd 	.word	0x3402b7cd
3400b5d4:	34037b72 	.word	0x34037b72
3400b5d8:	3402c94e 	.word	0x3402c94e
3400b5dc:	340d1efc 	.word	0x340d1efc
3400b5e0:	340d1f78 	.word	0x340d1f78

3400b5e4 <vTaskPriorityDisinheritAfterTimeout>:
    {
3400b5e4:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
3400b5e6:	4604      	mov	r4, r0
3400b5e8:	2800      	cmp	r0, #0
3400b5ea:	d044      	beq.n	3400b676 <vTaskPriorityDisinheritAfterTimeout+0x92>
            configASSERT( pxTCB->uxMutexesHeld );
3400b5ec:	6d02      	ldr	r2, [r0, #80]	@ 0x50
3400b5ee:	b942      	cbnz	r2, 3400b602 <vTaskPriorityDisinheritAfterTimeout+0x1e>
3400b5f0:	f000 fbb0 	bl	3400bd54 <ulSetInterruptMask>
3400b5f4:	f241 01dc 	movw	r1, #4316	@ 0x10dc
3400b5f8:	4b1f      	ldr	r3, [pc, #124]	@ (3400b678 <vTaskPriorityDisinheritAfterTimeout+0x94>)
3400b5fa:	4a20      	ldr	r2, [pc, #128]	@ (3400b67c <vTaskPriorityDisinheritAfterTimeout+0x98>)
                    configASSERT( pxTCB != pxCurrentTCB );
3400b5fc:	4820      	ldr	r0, [pc, #128]	@ (3400b680 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
3400b5fe:	f014 fa03 	bl	3401fa08 <__assert_func>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3400b602:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
3400b604:	4299      	cmp	r1, r3
3400b606:	bf38      	it	cc
3400b608:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
3400b60a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400b60c:	428b      	cmp	r3, r1
3400b60e:	d032      	beq.n	3400b676 <vTaskPriorityDisinheritAfterTimeout+0x92>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3400b610:	2a01      	cmp	r2, #1
3400b612:	d130      	bne.n	3400b676 <vTaskPriorityDisinheritAfterTimeout+0x92>
                    configASSERT( pxTCB != pxCurrentTCB );
3400b614:	4a1b      	ldr	r2, [pc, #108]	@ (3400b684 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
3400b616:	6812      	ldr	r2, [r2, #0]
3400b618:	4282      	cmp	r2, r0
3400b61a:	d106      	bne.n	3400b62a <vTaskPriorityDisinheritAfterTimeout+0x46>
3400b61c:	f000 fb9a 	bl	3400bd54 <ulSetInterruptMask>
3400b620:	f241 01f7 	movw	r1, #4343	@ 0x10f7
3400b624:	4b14      	ldr	r3, [pc, #80]	@ (3400b678 <vTaskPriorityDisinheritAfterTimeout+0x94>)
3400b626:	4a15      	ldr	r2, [pc, #84]	@ (3400b67c <vTaskPriorityDisinheritAfterTimeout+0x98>)
3400b628:	e7e8      	b.n	3400b5fc <vTaskPriorityDisinheritAfterTimeout+0x18>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400b62a:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
3400b62c:	4d16      	ldr	r5, [pc, #88]	@ (3400b688 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400b62e:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
3400b630:	f04f 0214 	mov.w	r2, #20
3400b634:	fb02 5303 	mla	r3, r2, r3, r5
3400b638:	6942      	ldr	r2, [r0, #20]
                    pxTCB->uxPriority = uxPriorityToUse;
3400b63a:	62c1      	str	r1, [r0, #44]	@ 0x2c
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400b63c:	bfa4      	itt	ge
3400b63e:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
3400b642:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
3400b644:	429a      	cmp	r2, r3
3400b646:	d116      	bne.n	3400b676 <vTaskPriorityDisinheritAfterTimeout+0x92>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400b648:	1d06      	adds	r6, r0, #4
3400b64a:	4630      	mov	r0, r6
3400b64c:	f7fe fdb4 	bl	3400a1b8 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
3400b650:	4a0e      	ldr	r2, [pc, #56]	@ (3400b68c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
3400b652:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400b654:	6811      	ldr	r1, [r2, #0]
3400b656:	428b      	cmp	r3, r1
3400b658:	bf88      	it	hi
3400b65a:	6013      	strhi	r3, [r2, #0]
3400b65c:	2214      	movs	r2, #20
3400b65e:	4353      	muls	r3, r2
3400b660:	18e9      	adds	r1, r5, r3
3400b662:	684a      	ldr	r2, [r1, #4]
3400b664:	6890      	ldr	r0, [r2, #8]
3400b666:	60a2      	str	r2, [r4, #8]
3400b668:	60e0      	str	r0, [r4, #12]
3400b66a:	6046      	str	r6, [r0, #4]
3400b66c:	6096      	str	r6, [r2, #8]
3400b66e:	58ea      	ldr	r2, [r5, r3]
3400b670:	6161      	str	r1, [r4, #20]
3400b672:	3201      	adds	r2, #1
3400b674:	50ea      	str	r2, [r5, r3]
    }
3400b676:	bd70      	pop	{r4, r5, r6, pc}
3400b678:	3402b7cd 	.word	0x3402b7cd
3400b67c:	34037b4e 	.word	0x34037b4e
3400b680:	3402c94e 	.word	0x3402c94e
3400b684:	340d23d8 	.word	0x340d23d8
3400b688:	340d1f78 	.word	0x340d1f78
3400b68c:	340d1efc 	.word	0x340d1efc

3400b690 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
3400b690:	4b04      	ldr	r3, [pc, #16]	@ (3400b6a4 <pvTaskIncrementMutexHeldCount+0x14>)
3400b692:	681a      	ldr	r2, [r3, #0]
3400b694:	b11a      	cbz	r2, 3400b69e <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
3400b696:	6819      	ldr	r1, [r3, #0]
3400b698:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
3400b69a:	3201      	adds	r2, #1
3400b69c:	650a      	str	r2, [r1, #80]	@ 0x50
        return pxCurrentTCB;
3400b69e:	6818      	ldr	r0, [r3, #0]
    }
3400b6a0:	4770      	bx	lr
3400b6a2:	bf00      	nop
3400b6a4:	340d23d8 	.word	0x340d23d8

3400b6a8 <ulTaskGetIdleRunTimeCounter>:
        return xTask->ulRunTimeCounter;
3400b6a8:	4b01      	ldr	r3, [pc, #4]	@ (3400b6b0 <ulTaskGetIdleRunTimeCounter+0x8>)
3400b6aa:	681b      	ldr	r3, [r3, #0]
    }
3400b6ac:	6d58      	ldr	r0, [r3, #84]	@ 0x54
3400b6ae:	4770      	bx	lr
3400b6b0:	340d1ee0 	.word	0x340d1ee0

3400b6b4 <prvInsertTimerInActiveList>:
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

        if( xNextExpiryTime <= xTimeNow )
3400b6b4:	4291      	cmp	r1, r2
    {
3400b6b6:	b508      	push	{r3, lr}
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
3400b6b8:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
3400b6ba:	6100      	str	r0, [r0, #16]
        if( xNextExpiryTime <= xTimeNow )
3400b6bc:	d80a      	bhi.n	3400b6d4 <prvInsertTimerInActiveList+0x20>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400b6be:	1ad2      	subs	r2, r2, r3
3400b6c0:	6983      	ldr	r3, [r0, #24]
3400b6c2:	429a      	cmp	r2, r3
3400b6c4:	d20d      	bcs.n	3400b6e2 <prvInsertTimerInActiveList+0x2e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
3400b6c6:	4b08      	ldr	r3, [pc, #32]	@ (3400b6e8 <prvInsertTimerInActiveList+0x34>)
3400b6c8:	1d01      	adds	r1, r0, #4
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
3400b6ca:	6818      	ldr	r0, [r3, #0]
3400b6cc:	f7fe fd5d 	bl	3400a18a <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
3400b6d0:	2000      	movs	r0, #0
            }
        }

        return xProcessTimerNow;
    }
3400b6d2:	bd08      	pop	{r3, pc}
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
3400b6d4:	429a      	cmp	r2, r3
3400b6d6:	d201      	bcs.n	3400b6dc <prvInsertTimerInActiveList+0x28>
3400b6d8:	4299      	cmp	r1, r3
3400b6da:	d202      	bcs.n	3400b6e2 <prvInsertTimerInActiveList+0x2e>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
3400b6dc:	4b03      	ldr	r3, [pc, #12]	@ (3400b6ec <prvInsertTimerInActiveList+0x38>)
3400b6de:	1d01      	adds	r1, r0, #4
3400b6e0:	e7f3      	b.n	3400b6ca <prvInsertTimerInActiveList+0x16>
                xProcessTimerNow = pdTRUE;
3400b6e2:	2001      	movs	r0, #1
        return xProcessTimerNow;
3400b6e4:	e7f5      	b.n	3400b6d2 <prvInsertTimerInActiveList+0x1e>
3400b6e6:	bf00      	nop
3400b6e8:	340d24d8 	.word	0x340d24d8
3400b6ec:	340d24dc 	.word	0x340d24dc

3400b6f0 <prvReloadTimer>:
    {
3400b6f0:	b570      	push	{r4, r5, r6, lr}
3400b6f2:	4604      	mov	r4, r0
3400b6f4:	460d      	mov	r5, r1
3400b6f6:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
3400b6f8:	69a1      	ldr	r1, [r4, #24]
3400b6fa:	462b      	mov	r3, r5
3400b6fc:	4632      	mov	r2, r6
3400b6fe:	4620      	mov	r0, r4
3400b700:	4429      	add	r1, r5
3400b702:	f7ff ffd7 	bl	3400b6b4 <prvInsertTimerInActiveList>
3400b706:	b900      	cbnz	r0, 3400b70a <prvReloadTimer+0x1a>
    }
3400b708:	bd70      	pop	{r4, r5, r6, pc}
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
3400b70a:	69a3      	ldr	r3, [r4, #24]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b70c:	4620      	mov	r0, r4
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
3400b70e:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b710:	6a23      	ldr	r3, [r4, #32]
3400b712:	4798      	blx	r3
3400b714:	e7f0      	b.n	3400b6f8 <prvReloadTimer+0x8>
	...

3400b718 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b718:	4b0e      	ldr	r3, [pc, #56]	@ (3400b754 <prvProcessExpiredTimer+0x3c>)
    {
3400b71a:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b71c:	681b      	ldr	r3, [r3, #0]
    {
3400b71e:	4605      	mov	r5, r0
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b720:	68db      	ldr	r3, [r3, #12]
    {
3400b722:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b724:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
3400b726:	1d20      	adds	r0, r4, #4
3400b728:	f7fe fd46 	bl	3400a1b8 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
3400b72c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b730:	075a      	lsls	r2, r3, #29
3400b732:	d509      	bpl.n	3400b748 <prvProcessExpiredTimer+0x30>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
3400b734:	4632      	mov	r2, r6
3400b736:	4629      	mov	r1, r5
3400b738:	4620      	mov	r0, r4
3400b73a:	f7ff ffd9 	bl	3400b6f0 <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b73e:	4620      	mov	r0, r4
3400b740:	6a23      	ldr	r3, [r4, #32]
    }
3400b742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b746:	4718      	bx	r3
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
3400b748:	f023 0301 	bic.w	r3, r3, #1
3400b74c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
3400b750:	e7f5      	b.n	3400b73e <prvProcessExpiredTimer+0x26>
3400b752:	bf00      	nop
3400b754:	340d24dc 	.word	0x340d24dc

3400b758 <prvSampleTimeNow>:
    {
3400b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400b75a:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
3400b75c:	f7ff fb68 	bl	3400ae30 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
3400b760:	4e0d      	ldr	r6, [pc, #52]	@ (3400b798 <prvSampleTimeNow+0x40>)
        xTimeNow = xTaskGetTickCount();
3400b762:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
3400b764:	6833      	ldr	r3, [r6, #0]
3400b766:	4283      	cmp	r3, r0
3400b768:	d909      	bls.n	3400b77e <prvSampleTimeNow+0x26>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
3400b76a:	4f0c      	ldr	r7, [pc, #48]	@ (3400b79c <prvSampleTimeNow+0x44>)
3400b76c:	683b      	ldr	r3, [r7, #0]
3400b76e:	681a      	ldr	r2, [r3, #0]
3400b770:	b952      	cbnz	r2, 3400b788 <prvSampleTimeNow+0x30>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
3400b772:	4a0b      	ldr	r2, [pc, #44]	@ (3400b7a0 <prvSampleTimeNow+0x48>)
3400b774:	6811      	ldr	r1, [r2, #0]
        pxOverflowTimerList = pxTemp;
3400b776:	6013      	str	r3, [r2, #0]
        pxCurrentTimerList = pxOverflowTimerList;
3400b778:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
3400b77a:	2301      	movs	r3, #1
3400b77c:	e000      	b.n	3400b780 <prvSampleTimeNow+0x28>
3400b77e:	2300      	movs	r3, #0
    }
3400b780:	4620      	mov	r0, r4
            *pxTimerListsWereSwitched = pdTRUE;
3400b782:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
3400b784:	6034      	str	r4, [r6, #0]
    }
3400b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
3400b788:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
3400b78a:	f04f 31ff 	mov.w	r1, #4294967295
3400b78e:	6818      	ldr	r0, [r3, #0]
3400b790:	f7ff ffc2 	bl	3400b718 <prvProcessExpiredTimer>
3400b794:	e7ea      	b.n	3400b76c <prvSampleTimeNow+0x14>
3400b796:	bf00      	nop
3400b798:	340d24cc 	.word	0x340d24cc
3400b79c:	340d24dc 	.word	0x340d24dc
3400b7a0:	340d24d8 	.word	0x340d24d8

3400b7a4 <prvTimerTask>:
    {
3400b7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
3400b7a8:	4f50      	ldr	r7, [pc, #320]	@ (3400b8ec <prvTimerTask+0x148>)
3400b7aa:	4e51      	ldr	r6, [pc, #324]	@ (3400b8f0 <prvTimerTask+0x14c>)
    {
3400b7ac:	b086      	sub	sp, #24
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
3400b7ae:	683b      	ldr	r3, [r7, #0]
3400b7b0:	f8d3 8000 	ldr.w	r8, [r3]
3400b7b4:	f1b8 0f00 	cmp.w	r8, #0
3400b7b8:	d032      	beq.n	3400b820 <prvTimerTask+0x7c>
3400b7ba:	2400      	movs	r4, #0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
3400b7bc:	68db      	ldr	r3, [r3, #12]
3400b7be:	f8d3 8000 	ldr.w	r8, [r3]
        vTaskSuspendAll();
3400b7c2:	f7ff fb2d 	bl	3400ae20 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400b7c6:	a802      	add	r0, sp, #8
3400b7c8:	f7ff ffc6 	bl	3400b758 <prvSampleTimeNow>
            if( xTimerListsWereSwitched == pdFALSE )
3400b7cc:	9b02      	ldr	r3, [sp, #8]
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400b7ce:	4605      	mov	r5, r0
            if( xTimerListsWereSwitched == pdFALSE )
3400b7d0:	2b00      	cmp	r3, #0
3400b7d2:	d13a      	bne.n	3400b84a <prvTimerTask+0xa6>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
3400b7d4:	bb34      	cbnz	r4, 3400b824 <prvTimerTask+0x80>
3400b7d6:	4540      	cmp	r0, r8
3400b7d8:	d32a      	bcc.n	3400b830 <prvTimerTask+0x8c>
                    ( void ) xTaskResumeAll();
3400b7da:	f7ff fbf1 	bl	3400afc0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
3400b7de:	4629      	mov	r1, r5
3400b7e0:	4640      	mov	r0, r8
3400b7e2:	f7ff ff99 	bl	3400b718 <prvProcessExpiredTimer>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
3400b7e6:	2200      	movs	r2, #0
3400b7e8:	6830      	ldr	r0, [r6, #0]
3400b7ea:	a902      	add	r1, sp, #8
3400b7ec:	f7fe ff38 	bl	3400a660 <xQueueReceive>
3400b7f0:	2800      	cmp	r0, #0
3400b7f2:	d0dc      	beq.n	3400b7ae <prvTimerTask+0xa>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
3400b7f4:	9b02      	ldr	r3, [sp, #8]
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
3400b7f6:	9804      	ldr	r0, [sp, #16]
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
3400b7f8:	2b00      	cmp	r3, #0
3400b7fa:	db29      	blt.n	3400b850 <prvTimerTask+0xac>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
3400b7fc:	9c04      	ldr	r4, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
3400b7fe:	6963      	ldr	r3, [r4, #20]
3400b800:	bb6b      	cbnz	r3, 3400b85e <prvTimerTask+0xba>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400b802:	a801      	add	r0, sp, #4
3400b804:	f7ff ffa8 	bl	3400b758 <prvSampleTimeNow>
                switch( xMessage.xMessageID )
3400b808:	9b02      	ldr	r3, [sp, #8]
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400b80a:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
3400b80c:	3b01      	subs	r3, #1
3400b80e:	2b08      	cmp	r3, #8
3400b810:	d8e9      	bhi.n	3400b7e6 <prvTimerTask+0x42>
3400b812:	e8df f003 	tbb	[pc, r3]
3400b816:	2828      	.short	0x2828
3400b818:	28644b64 	.word	0x28644b64
3400b81c:	6428      	.short	0x6428
3400b81e:	4b          	.byte	0x4b
3400b81f:	00          	.byte	0x00
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
3400b820:	2401      	movs	r4, #1
3400b822:	e7ce      	b.n	3400b7c2 <prvTimerTask+0x1e>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
3400b824:	4b33      	ldr	r3, [pc, #204]	@ (3400b8f4 <prvTimerTask+0x150>)
3400b826:	681b      	ldr	r3, [r3, #0]
3400b828:	681c      	ldr	r4, [r3, #0]
3400b82a:	fab4 f484 	clz	r4, r4
3400b82e:	0964      	lsrs	r4, r4, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
3400b830:	4622      	mov	r2, r4
3400b832:	6830      	ldr	r0, [r6, #0]
3400b834:	eba8 0105 	sub.w	r1, r8, r5
3400b838:	f7ff f8b8 	bl	3400a9ac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
3400b83c:	f7ff fbc0 	bl	3400afc0 <xTaskResumeAll>
3400b840:	2800      	cmp	r0, #0
3400b842:	d1d0      	bne.n	3400b7e6 <prvTimerTask+0x42>
                        portYIELD_WITHIN_API();
3400b844:	f000 f8fc 	bl	3400ba40 <vPortYield>
3400b848:	e7cd      	b.n	3400b7e6 <prvTimerTask+0x42>
                ( void ) xTaskResumeAll();
3400b84a:	f7ff fbb9 	bl	3400afc0 <xTaskResumeAll>
    }
3400b84e:	e7ca      	b.n	3400b7e6 <prvTimerTask+0x42>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
3400b850:	9b03      	ldr	r3, [sp, #12]
3400b852:	9905      	ldr	r1, [sp, #20]
3400b854:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
3400b856:	9b02      	ldr	r3, [sp, #8]
3400b858:	2b00      	cmp	r3, #0
3400b85a:	dbc4      	blt.n	3400b7e6 <prvTimerTask+0x42>
3400b85c:	e7ce      	b.n	3400b7fc <prvTimerTask+0x58>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
3400b85e:	1d20      	adds	r0, r4, #4
3400b860:	f7fe fcaa 	bl	3400a1b8 <uxListRemove>
3400b864:	e7cd      	b.n	3400b802 <prvTimerTask+0x5e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
3400b866:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
3400b86a:	69a1      	ldr	r1, [r4, #24]
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
3400b86c:	f043 0301 	orr.w	r3, r3, #1
3400b870:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
3400b874:	9b03      	ldr	r3, [sp, #12]
3400b876:	4602      	mov	r2, r0
3400b878:	4419      	add	r1, r3
3400b87a:	4620      	mov	r0, r4
3400b87c:	f7ff ff1a 	bl	3400b6b4 <prvInsertTimerInActiveList>
3400b880:	2800      	cmp	r0, #0
3400b882:	d0b0      	beq.n	3400b7e6 <prvTimerTask+0x42>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
3400b884:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b888:	075a      	lsls	r2, r3, #29
3400b88a:	d50a      	bpl.n	3400b8a2 <prvTimerTask+0xfe>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
3400b88c:	69a3      	ldr	r3, [r4, #24]
3400b88e:	9903      	ldr	r1, [sp, #12]
3400b890:	462a      	mov	r2, r5
3400b892:	4620      	mov	r0, r4
3400b894:	4419      	add	r1, r3
3400b896:	f7ff ff2b 	bl	3400b6f0 <prvReloadTimer>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b89a:	4620      	mov	r0, r4
3400b89c:	6a23      	ldr	r3, [r4, #32]
3400b89e:	4798      	blx	r3
3400b8a0:	e7a1      	b.n	3400b7e6 <prvTimerTask+0x42>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
3400b8a2:	f023 0301 	bic.w	r3, r3, #1
3400b8a6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
3400b8aa:	e7f6      	b.n	3400b89a <prvTimerTask+0xf6>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
3400b8ac:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b8b0:	f043 0301 	orr.w	r3, r3, #1
3400b8b4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
3400b8b8:	9903      	ldr	r1, [sp, #12]
3400b8ba:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
3400b8bc:	b941      	cbnz	r1, 3400b8d0 <prvTimerTask+0x12c>
3400b8be:	f000 fa49 	bl	3400bd54 <ulSetInterruptMask>
3400b8c2:	f44f 715d 	mov.w	r1, #884	@ 0x374
3400b8c6:	4b0c      	ldr	r3, [pc, #48]	@ (3400b8f8 <prvTimerTask+0x154>)
3400b8c8:	4a0c      	ldr	r2, [pc, #48]	@ (3400b8fc <prvTimerTask+0x158>)
3400b8ca:	480d      	ldr	r0, [pc, #52]	@ (3400b900 <prvTimerTask+0x15c>)
3400b8cc:	f014 f89c 	bl	3401fa08 <__assert_func>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
3400b8d0:	4603      	mov	r3, r0
3400b8d2:	4602      	mov	r2, r0
3400b8d4:	4401      	add	r1, r0
3400b8d6:	4620      	mov	r0, r4
3400b8d8:	f7ff feec 	bl	3400b6b4 <prvInsertTimerInActiveList>
                        break;
3400b8dc:	e783      	b.n	3400b7e6 <prvTimerTask+0x42>
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
3400b8de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b8e2:	f023 0301 	bic.w	r3, r3, #1
3400b8e6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        break;
3400b8ea:	e77c      	b.n	3400b7e6 <prvTimerTask+0x42>
3400b8ec:	340d24dc 	.word	0x340d24dc
3400b8f0:	340d24d4 	.word	0x340d24d4
3400b8f4:	340d24d8 	.word	0x340d24d8
3400b8f8:	3402b7cd 	.word	0x3402b7cd
3400b8fc:	34037c8c 	.word	0x34037c8c
3400b900:	3402c99e 	.word	0x3402c99e

3400b904 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
3400b904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
3400b906:	4c11      	ldr	r4, [pc, #68]	@ (3400b94c <prvCheckForValidListAndQueue+0x48>)
        taskENTER_CRITICAL();
3400b908:	f000 f8a6 	bl	3400ba58 <vPortEnterCritical>
            if( xTimerQueue == NULL )
3400b90c:	6825      	ldr	r5, [r4, #0]
3400b90e:	b9bd      	cbnz	r5, 3400b940 <prvCheckForValidListAndQueue+0x3c>
            {
                vListInitialise( &xActiveTimerList1 );
3400b910:	4f0f      	ldr	r7, [pc, #60]	@ (3400b950 <prvCheckForValidListAndQueue+0x4c>)
                vListInitialise( &xActiveTimerList2 );
3400b912:	4e10      	ldr	r6, [pc, #64]	@ (3400b954 <prvCheckForValidListAndQueue+0x50>)
                vListInitialise( &xActiveTimerList1 );
3400b914:	4638      	mov	r0, r7
3400b916:	f7fe fc1f 	bl	3400a158 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
3400b91a:	4630      	mov	r0, r6
3400b91c:	f7fe fc1c 	bl	3400a158 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
3400b920:	4b0d      	ldr	r3, [pc, #52]	@ (3400b958 <prvCheckForValidListAndQueue+0x54>)
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
3400b922:	2110      	movs	r1, #16
                pxCurrentTimerList = &xActiveTimerList1;
3400b924:	601f      	str	r7, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
3400b926:	4b0d      	ldr	r3, [pc, #52]	@ (3400b95c <prvCheckForValidListAndQueue+0x58>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
3400b928:	200a      	movs	r0, #10
                pxOverflowTimerList = &xActiveTimerList2;
3400b92a:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
3400b92c:	4a0c      	ldr	r2, [pc, #48]	@ (3400b960 <prvCheckForValidListAndQueue+0x5c>)
3400b92e:	4b0d      	ldr	r3, [pc, #52]	@ (3400b964 <prvCheckForValidListAndQueue+0x60>)
3400b930:	9500      	str	r5, [sp, #0]
3400b932:	f7fe fd25 	bl	3400a380 <xQueueGenericCreateStatic>
3400b936:	6020      	str	r0, [r4, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
3400b938:	b110      	cbz	r0, 3400b940 <prvCheckForValidListAndQueue+0x3c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
3400b93a:	490b      	ldr	r1, [pc, #44]	@ (3400b968 <prvCheckForValidListAndQueue+0x64>)
3400b93c:	f7fe ffc6 	bl	3400a8cc <vQueueAddToRegistry>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
3400b940:	b003      	add	sp, #12
3400b942:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
3400b946:	f000 b895 	b.w	3400ba74 <vPortExitCritical>
3400b94a:	bf00      	nop
3400b94c:	340d24d4 	.word	0x340d24d4
3400b950:	340d24f4 	.word	0x340d24f4
3400b954:	340d24e0 	.word	0x340d24e0
3400b958:	340d24dc 	.word	0x340d24dc
3400b95c:	340d24d8 	.word	0x340d24d8
3400b960:	340d242c 	.word	0x340d242c
3400b964:	340d23dc 	.word	0x340d23dc
3400b968:	3402c9ea 	.word	0x3402c9ea

3400b96c <xTimerCreateTimerTask>:
    {
3400b96c:	b510      	push	{r4, lr}
3400b96e:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
3400b970:	f7ff ffc8 	bl	3400b904 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
3400b974:	4b12      	ldr	r3, [pc, #72]	@ (3400b9c0 <xTimerCreateTimerTask+0x54>)
3400b976:	681b      	ldr	r3, [r3, #0]
3400b978:	b1b3      	cbz	r3, 3400b9a8 <xTimerCreateTimerTask+0x3c>
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
3400b97a:	2400      	movs	r4, #0
                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
3400b97c:	aa07      	add	r2, sp, #28
3400b97e:	a906      	add	r1, sp, #24
3400b980:	a805      	add	r0, sp, #20
                StackType_t * pxTimerTaskStackBuffer = NULL;
3400b982:	e9cd 4405 	strd	r4, r4, [sp, #20]
                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
3400b986:	f013 fb0f 	bl	3401efa8 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
3400b98a:	9b05      	ldr	r3, [sp, #20]
3400b98c:	9a07      	ldr	r2, [sp, #28]
3400b98e:	9302      	str	r3, [sp, #8]
3400b990:	9b06      	ldr	r3, [sp, #24]
3400b992:	490c      	ldr	r1, [pc, #48]	@ (3400b9c4 <xTimerCreateTimerTask+0x58>)
3400b994:	9301      	str	r3, [sp, #4]
3400b996:	2302      	movs	r3, #2
3400b998:	480b      	ldr	r0, [pc, #44]	@ (3400b9c8 <xTimerCreateTimerTask+0x5c>)
3400b99a:	9300      	str	r3, [sp, #0]
3400b99c:	4623      	mov	r3, r4
3400b99e:	f7ff f8a5 	bl	3400aaec <xTaskCreateStatic>
3400b9a2:	4b0a      	ldr	r3, [pc, #40]	@ (3400b9cc <xTimerCreateTimerTask+0x60>)
3400b9a4:	6018      	str	r0, [r3, #0]
                if( xTimerTaskHandle != NULL )
3400b9a6:	b940      	cbnz	r0, 3400b9ba <xTimerCreateTimerTask+0x4e>
        configASSERT( xReturn );
3400b9a8:	f000 f9d4 	bl	3400bd54 <ulSetInterruptMask>
3400b9ac:	f240 1119 	movw	r1, #281	@ 0x119
3400b9b0:	4b07      	ldr	r3, [pc, #28]	@ (3400b9d0 <xTimerCreateTimerTask+0x64>)
3400b9b2:	4a08      	ldr	r2, [pc, #32]	@ (3400b9d4 <xTimerCreateTimerTask+0x68>)
3400b9b4:	4808      	ldr	r0, [pc, #32]	@ (3400b9d8 <xTimerCreateTimerTask+0x6c>)
3400b9b6:	f014 f827 	bl	3401fa08 <__assert_func>
    }
3400b9ba:	2001      	movs	r0, #1
3400b9bc:	b008      	add	sp, #32
3400b9be:	bd10      	pop	{r4, pc}
3400b9c0:	340d24d4 	.word	0x340d24d4
3400b9c4:	3402c9ef 	.word	0x3402c9ef
3400b9c8:	3400b7a5 	.word	0x3400b7a5
3400b9cc:	340d24d0 	.word	0x340d24d0
3400b9d0:	3402b7cd 	.word	0x3402b7cd
3400b9d4:	34037ca7 	.word	0x34037ca7
3400b9d8:	3402c99e 	.word	0x3402c99e

3400b9dc <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
3400b9dc:	2300      	movs	r3, #0
{
3400b9de:	b507      	push	{r0, r1, r2, lr}
    volatile uint32_t ulDummy = 0UL;
3400b9e0:	9301      	str	r3, [sp, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
3400b9e2:	4b0a      	ldr	r3, [pc, #40]	@ (3400ba0c <prvTaskExitError+0x30>)
3400b9e4:	681b      	ldr	r3, [r3, #0]
3400b9e6:	3301      	adds	r3, #1
3400b9e8:	d008      	beq.n	3400b9fc <prvTaskExitError+0x20>
3400b9ea:	f000 f9b3 	bl	3400bd54 <ulSetInterruptMask>
3400b9ee:	f240 310e 	movw	r1, #782	@ 0x30e
3400b9f2:	4b07      	ldr	r3, [pc, #28]	@ (3400ba10 <prvTaskExitError+0x34>)
3400b9f4:	4a07      	ldr	r2, [pc, #28]	@ (3400ba14 <prvTaskExitError+0x38>)
3400b9f6:	4808      	ldr	r0, [pc, #32]	@ (3400ba18 <prvTaskExitError+0x3c>)
3400b9f8:	f014 f806 	bl	3401fa08 <__assert_func>
    portDISABLE_INTERRUPTS();
3400b9fc:	f000 f9aa 	bl	3400bd54 <ulSetInterruptMask>

    while( ulDummy == 0 )
3400ba00:	9b01      	ldr	r3, [sp, #4]
3400ba02:	2b00      	cmp	r3, #0
3400ba04:	d0fc      	beq.n	3400ba00 <prvTaskExitError+0x24>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
3400ba06:	b003      	add	sp, #12
3400ba08:	f85d fb04 	ldr.w	pc, [sp], #4
3400ba0c:	340cc764 	.word	0x340cc764
3400ba10:	3402b7cd 	.word	0x3402b7cd
3400ba14:	34037cf0 	.word	0x34037cf0
3400ba18:	3402c9f7 	.word	0x3402c9f7

3400ba1c <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
3400ba1c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
3400ba20:	2300      	movs	r3, #0
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
3400ba22:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
3400ba26:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
3400ba28:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
3400ba2a:	4b04      	ldr	r3, [pc, #16]	@ (3400ba3c <vPortSetupTimerInterrupt+0x20>)
3400ba2c:	681b      	ldr	r3, [r3, #0]
3400ba2e:	fbb3 f3f1 	udiv	r3, r3, r1
3400ba32:	3b01      	subs	r3, #1
3400ba34:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
3400ba36:	2307      	movs	r3, #7
3400ba38:	6113      	str	r3, [r2, #16]
}
3400ba3a:	4770      	bx	lr
3400ba3c:	340d0670 	.word	0x340d0670

3400ba40 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
3400ba40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400ba44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400ba48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
3400ba4c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
3400ba50:	f3bf 8f6f 	isb	sy
}
3400ba54:	4770      	bx	lr
	...

3400ba58 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
3400ba58:	b508      	push	{r3, lr}
    portDISABLE_INTERRUPTS();
3400ba5a:	f000 f97b 	bl	3400bd54 <ulSetInterruptMask>
    ulCriticalNesting++;
3400ba5e:	4a04      	ldr	r2, [pc, #16]	@ (3400ba70 <vPortEnterCritical+0x18>)
3400ba60:	6813      	ldr	r3, [r2, #0]
3400ba62:	3301      	adds	r3, #1
3400ba64:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
3400ba66:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
3400ba6a:	f3bf 8f6f 	isb	sy
}
3400ba6e:	bd08      	pop	{r3, pc}
3400ba70:	340cc764 	.word	0x340cc764

3400ba74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
3400ba74:	b508      	push	{r3, lr}
    configASSERT( ulCriticalNesting );
3400ba76:	4b0b      	ldr	r3, [pc, #44]	@ (3400baa4 <vPortExitCritical+0x30>)
3400ba78:	681a      	ldr	r2, [r3, #0]
3400ba7a:	b942      	cbnz	r2, 3400ba8e <vPortExitCritical+0x1a>
3400ba7c:	f000 f96a 	bl	3400bd54 <ulSetInterruptMask>
3400ba80:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
3400ba84:	4b08      	ldr	r3, [pc, #32]	@ (3400baa8 <vPortExitCritical+0x34>)
3400ba86:	4a09      	ldr	r2, [pc, #36]	@ (3400baac <vPortExitCritical+0x38>)
3400ba88:	4809      	ldr	r0, [pc, #36]	@ (3400bab0 <vPortExitCritical+0x3c>)
3400ba8a:	f013 ffbd 	bl	3401fa08 <__assert_func>
    ulCriticalNesting--;
3400ba8e:	681a      	ldr	r2, [r3, #0]
3400ba90:	3a01      	subs	r2, #1
3400ba92:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
3400ba94:	6818      	ldr	r0, [r3, #0]
3400ba96:	b918      	cbnz	r0, 3400baa0 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
    }
}
3400ba98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portENABLE_INTERRUPTS();
3400ba9c:	f000 b965 	b.w	3400bd6a <vClearInterruptMask>
}
3400baa0:	bd08      	pop	{r3, pc}
3400baa2:	bf00      	nop
3400baa4:	340cc764 	.word	0x340cc764
3400baa8:	3402b7cd 	.word	0x3402b7cd
3400baac:	34037d13 	.word	0x34037d13
3400bab0:	3402c9f7 	.word	0x3402c9f7

3400bab4 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
3400bab4:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
3400bab6:	f000 f94d 	bl	3400bd54 <ulSetInterruptMask>
3400baba:	4604      	mov	r4, r0
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
3400babc:	f7ff f9c4 	bl	3400ae48 <xTaskIncrementTick>
3400bac0:	b128      	cbz	r0, 3400bace <SysTick_Handler+0x1a>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
3400bac2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400bac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400baca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
3400bace:	4620      	mov	r0, r4
}
3400bad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
3400bad4:	f000 b949 	b.w	3400bd6a <vClearInterruptMask>

3400bad8 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
3400bad8:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
3400bada:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
3400badc:	f813 3c02 	ldrb.w	r3, [r3, #-2]
3400bae0:	2b66      	cmp	r3, #102	@ 0x66
3400bae2:	d111      	bne.n	3400bb08 <vPortSVCHandler_C+0x30>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
3400bae4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400bae8:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	@ 0xd88
3400baec:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
3400baf0:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
3400baf4:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	@ 0xf34
3400baf8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
3400bafc:	f8c3 2f34 	str.w	r2, [r3, #3892]	@ 0xf34

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
    }
}
3400bb00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
3400bb04:	f000 b8f4 	b.w	3400bcf0 <vRestoreContextOfFirstTask>
            configASSERT( pdFALSE );
3400bb08:	f000 f924 	bl	3400bd54 <ulSetInterruptMask>
3400bb0c:	f240 414d 	movw	r1, #1101	@ 0x44d
3400bb10:	4b02      	ldr	r3, [pc, #8]	@ (3400bb1c <vPortSVCHandler_C+0x44>)
3400bb12:	4a03      	ldr	r2, [pc, #12]	@ (3400bb20 <vPortSVCHandler_C+0x48>)
3400bb14:	4803      	ldr	r0, [pc, #12]	@ (3400bb24 <vPortSVCHandler_C+0x4c>)
3400bb16:	f013 ff77 	bl	3401fa08 <__assert_func>
3400bb1a:	bf00      	nop
3400bb1c:	3402b7cd 	.word	0x3402b7cd
3400bb20:	34037d01 	.word	0x34037d01
3400bb24:	3402c9f7 	.word	0x3402c9f7

3400bb28 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
3400bb28:	b510      	push	{r4, lr}
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
3400bb2a:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
3400bb2e:	e940 2402 	strd	r2, r4, [r0, #-8]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
3400bb32:	4a18      	ldr	r2, [pc, #96]	@ (3400bb94 <pxPortInitialiseStack+0x6c>)
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
3400bb34:	f04f 3412 	mov.w	r4, #303174162	@ 0x12121212
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
3400bb38:	f840 2c0c 	str.w	r2, [r0, #-12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
3400bb3c:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
3400bb40:	f04f 3c02 	mov.w	ip, #33686018	@ 0x2020202
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
3400bb44:	e940 2405 	strd	r2, r4, [r0, #-20]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
3400bb48:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
3400bb4c:	f840 3c20 	str.w	r3, [r0, #-32]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
3400bb50:	e940 2c07 	strd	r2, ip, [r0, #-28]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
3400bb54:	f04f 3310 	mov.w	r3, #269488144	@ 0x10101010
3400bb58:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
3400bb5c:	f04f 3409 	mov.w	r4, #151587081	@ 0x9090909
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
3400bb60:	e940 320a 	strd	r3, r2, [r0, #-40]	@ 0x28
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
3400bb64:	f04f 3308 	mov.w	r3, #134744072	@ 0x8080808
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
3400bb68:	f04f 3c07 	mov.w	ip, #117901063	@ 0x7070707
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
3400bb6c:	e940 340c 	strd	r3, r4, [r0, #-48]	@ 0x30
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
3400bb70:	f04f 3306 	mov.w	r3, #101058054	@ 0x6060606
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
3400bb74:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
3400bb78:	e940 3c0e 	strd	r3, ip, [r0, #-56]	@ 0x38
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
3400bb7c:	f04f 3304 	mov.w	r3, #67372036	@ 0x4040404
3400bb80:	e940 3210 	strd	r3, r2, [r0, #-64]	@ 0x40
            pxTopOfStack--;
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
3400bb84:	f06f 0302 	mvn.w	r3, #2
3400bb88:	f840 3c44 	str.w	r3, [r0, #-68]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
3400bb8c:	f840 1d48 	str.w	r1, [r0, #-72]!
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
    }
3400bb90:	bd10      	pop	{r4, pc}
3400bb92:	bf00      	nop
3400bb94:	3400b9dd 	.word	0x3400b9dd

3400bb98 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
3400bb98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
3400bb9a:	2300      	movs	r3, #0
3400bb9c:	9303      	str	r3, [sp, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
3400bb9e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400bba2:	f8d3 2d1c 	ldr.w	r2, [r3, #3356]	@ 0xd1c
3400bba6:	9202      	str	r2, [sp, #8]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
3400bba8:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
3400bbac:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
3400bbb0:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
3400bbb4:	4a2c      	ldr	r2, [pc, #176]	@ (3400bc68 <xPortStartScheduler+0xd0>)
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
3400bbb6:	0e1b      	lsrs	r3, r3, #24
3400bbb8:	f88d 3007 	strb.w	r3, [sp, #7]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
3400bbbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400bbc0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
3400bbc4:	7013      	strb	r3, [r2, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
3400bbc6:	b943      	cbnz	r3, 3400bbda <xPortStartScheduler+0x42>
3400bbc8:	f000 f8c4 	bl	3400bd54 <ulSetInterruptMask>
3400bbcc:	f44f 61c7 	mov.w	r1, #1592	@ 0x638
3400bbd0:	4b26      	ldr	r3, [pc, #152]	@ (3400bc6c <xPortStartScheduler+0xd4>)
3400bbd2:	4a27      	ldr	r2, [pc, #156]	@ (3400bc70 <xPortStartScheduler+0xd8>)

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
3400bbd4:	4827      	ldr	r0, [pc, #156]	@ (3400bc74 <xPortStartScheduler+0xdc>)
3400bbd6:	f013 ff17 	bl	3401fa08 <__assert_func>
3400bbda:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400bbde:	43db      	mvns	r3, r3
3400bbe0:	f013 0f50 	tst.w	r3, #80	@ 0x50
3400bbe4:	d00e      	beq.n	3400bc04 <xPortStartScheduler+0x6c>
3400bbe6:	f000 f8b5 	bl	3400bd54 <ulSetInterruptMask>
3400bbea:	f240 613c 	movw	r1, #1596	@ 0x63c
3400bbee:	4b1f      	ldr	r3, [pc, #124]	@ (3400bc6c <xPortStartScheduler+0xd4>)
3400bbf0:	4a1f      	ldr	r2, [pc, #124]	@ (3400bc70 <xPortStartScheduler+0xd8>)
3400bbf2:	e7ef      	b.n	3400bbd4 <xPortStartScheduler+0x3c>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
3400bbf4:	3301      	adds	r3, #1
3400bbf6:	9303      	str	r3, [sp, #12]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
3400bbf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400bbfc:	005b      	lsls	r3, r3, #1
3400bbfe:	b2db      	uxtb	r3, r3
3400bc00:	f88d 3007 	strb.w	r3, [sp, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
3400bc04:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400bc08:	f013 0f80 	tst.w	r3, #128	@ 0x80
            ulImplementedPrioBits++;
3400bc0c:	9b03      	ldr	r3, [sp, #12]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
3400bc0e:	d1f1      	bne.n	3400bbf4 <xPortStartScheduler+0x5c>
        }

        if( ulImplementedPrioBits == 8 )
3400bc10:	2b08      	cmp	r3, #8
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
3400bc12:	bf0c      	ite	eq
3400bc14:	2300      	moveq	r3, #0
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
3400bc16:	9b03      	ldrne	r3, [sp, #12]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
3400bc18:	4a17      	ldr	r2, [pc, #92]	@ (3400bc78 <xPortStartScheduler+0xe0>)
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
3400bc1a:	bf18      	it	ne
3400bc1c:	f1c3 0307 	rsbne	r3, r3, #7
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
3400bc20:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
3400bc22:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3400bc26:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
3400bc28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
3400bc2c:	2400      	movs	r4, #0
        portNVIC_SHPR2_REG = ulOriginalPriority;
3400bc2e:	9a02      	ldr	r2, [sp, #8]
3400bc30:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
3400bc34:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
3400bc38:	f442 027f 	orr.w	r2, r2, #16711680	@ 0xff0000
3400bc3c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
3400bc40:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
3400bc44:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
3400bc48:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    vPortSetupTimerInterrupt();
3400bc4c:	f7ff fee6 	bl	3400ba1c <vPortSetupTimerInterrupt>
    ulCriticalNesting = 0;
3400bc50:	4b0a      	ldr	r3, [pc, #40]	@ (3400bc7c <xPortStartScheduler+0xe4>)
3400bc52:	601c      	str	r4, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
3400bc54:	f000 f86c 	bl	3400bd30 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
3400bc58:	f7ff fab6 	bl	3400b1c8 <vTaskSwitchContext>
    prvTaskExitError();
3400bc5c:	f7ff febe 	bl	3400b9dc <prvTaskExitError>

    /* Should not get here. */
    return 0;
}
3400bc60:	4620      	mov	r0, r4
3400bc62:	b004      	add	sp, #16
3400bc64:	bd10      	pop	{r4, pc}
3400bc66:	bf00      	nop
3400bc68:	340d250c 	.word	0x340d250c
3400bc6c:	3402b7cd 	.word	0x3402b7cd
3400bc70:	34037cdc 	.word	0x34037cdc
3400bc74:	3402c9f7 	.word	0x3402c9f7
3400bc78:	340d2508 	.word	0x340d2508
3400bc7c:	340cc764 	.word	0x340cc764

3400bc80 <xPortIsInsideInterrupt>:
    BaseType_t xReturn;

    /* Obtain the number of the currently executing interrupt. Interrupt Program
     * Status Register (IPSR) holds the exception number of the currently-executing
     * exception or zero for Thread mode.*/
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
3400bc80:	f3ef 8005 	mrs	r0, IPSR
    {
        xReturn = pdTRUE;
    }

    return xReturn;
}
3400bc84:	3800      	subs	r0, #0
3400bc86:	bf18      	it	ne
3400bc88:	2001      	movne	r0, #1
3400bc8a:	4770      	bx	lr

3400bc8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
3400bc8c:	b508      	push	{r3, lr}
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
3400bc8e:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
3400bc92:	2b0f      	cmp	r3, #15
3400bc94:	d90e      	bls.n	3400bcb4 <vPortValidateInterruptPriority+0x28>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
3400bc96:	4a10      	ldr	r2, [pc, #64]	@ (3400bcd8 <vPortValidateInterruptPriority+0x4c>)
3400bc98:	5c9b      	ldrb	r3, [r3, r2]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
3400bc9a:	4a10      	ldr	r2, [pc, #64]	@ (3400bcdc <vPortValidateInterruptPriority+0x50>)
3400bc9c:	7812      	ldrb	r2, [r2, #0]
3400bc9e:	429a      	cmp	r2, r3
3400bca0:	d908      	bls.n	3400bcb4 <vPortValidateInterruptPriority+0x28>
3400bca2:	f000 f857 	bl	3400bd54 <ulSetInterruptMask>
3400bca6:	f44f 61f1 	mov.w	r1, #1928	@ 0x788
3400bcaa:	4b0d      	ldr	r3, [pc, #52]	@ (3400bce0 <vPortValidateInterruptPriority+0x54>)
3400bcac:	4a0d      	ldr	r2, [pc, #52]	@ (3400bce4 <vPortValidateInterruptPriority+0x58>)
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
3400bcae:	480e      	ldr	r0, [pc, #56]	@ (3400bce8 <vPortValidateInterruptPriority+0x5c>)
3400bcb0:	f013 feaa 	bl	3401fa08 <__assert_func>
3400bcb4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400bcb8:	4a0c      	ldr	r2, [pc, #48]	@ (3400bcec <vPortValidateInterruptPriority+0x60>)
3400bcba:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
3400bcbe:	6812      	ldr	r2, [r2, #0]
3400bcc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3400bcc4:	4293      	cmp	r3, r2
3400bcc6:	d906      	bls.n	3400bcd6 <vPortValidateInterruptPriority+0x4a>
3400bcc8:	f000 f844 	bl	3400bd54 <ulSetInterruptMask>
3400bccc:	f44f 61f3 	mov.w	r1, #1944	@ 0x798
3400bcd0:	4b03      	ldr	r3, [pc, #12]	@ (3400bce0 <vPortValidateInterruptPriority+0x54>)
3400bcd2:	4a04      	ldr	r2, [pc, #16]	@ (3400bce4 <vPortValidateInterruptPriority+0x58>)
3400bcd4:	e7eb      	b.n	3400bcae <vPortValidateInterruptPriority+0x22>
    }
3400bcd6:	bd08      	pop	{r3, pc}
3400bcd8:	e000e3f0 	.word	0xe000e3f0
3400bcdc:	340d250c 	.word	0x340d250c
3400bce0:	3402b7cd 	.word	0x3402b7cd
3400bce4:	34037cbd 	.word	0x34037cbd
3400bce8:	3402c9f7 	.word	0x3402c9f7
3400bcec:	340d2508 	.word	0x340d2508

3400bcf0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
3400bcf0:	4a0b      	ldr	r2, [pc, #44]	@ (3400bd20 <pxCurrentTCBConst2>)
3400bcf2:	6811      	ldr	r1, [r2, #0]
3400bcf4:	6808      	ldr	r0, [r1, #0]
3400bcf6:	c806      	ldmia	r0!, {r1, r2}
3400bcf8:	f381 880b 	msr	PSPLIM, r1
3400bcfc:	2102      	movs	r1, #2
3400bcfe:	f381 8814 	msr	CONTROL, r1
3400bd02:	3020      	adds	r0, #32
3400bd04:	f380 8809 	msr	PSP, r0
3400bd08:	f3bf 8f6f 	isb	sy
3400bd0c:	f04f 0000 	mov.w	r0, #0
3400bd10:	f380 8811 	msr	BASEPRI, r0
3400bd14:	4710      	bx	r2
3400bd16:	bf00      	nop
3400bd18:	f3af 8000 	nop.w
3400bd1c:	f3af 8000 	nop.w

3400bd20 <pxCurrentTCBConst2>:
3400bd20:	340d23d8 	.word	0x340d23d8
	...

3400bd30 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
3400bd30:	4807      	ldr	r0, [pc, #28]	@ (3400bd50 <xVTORConst>)
3400bd32:	6800      	ldr	r0, [r0, #0]
3400bd34:	6800      	ldr	r0, [r0, #0]
3400bd36:	f380 8808 	msr	MSP, r0
3400bd3a:	b662      	cpsie	i
3400bd3c:	b661      	cpsie	f
3400bd3e:	f3bf 8f4f 	dsb	sy
3400bd42:	f3bf 8f6f 	isb	sy
3400bd46:	df66      	svc	102	@ 0x66
3400bd48:	bf00      	nop
3400bd4a:	bf00      	nop
3400bd4c:	f3af 8000 	nop.w

3400bd50 <xVTORConst>:
3400bd50:	e000ed08 	.word	0xe000ed08

3400bd54 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
3400bd54:	f3ef 8011 	mrs	r0, BASEPRI
3400bd58:	f04f 0150 	mov.w	r1, #80	@ 0x50
3400bd5c:	f381 8811 	msr	BASEPRI, r1
3400bd60:	f3bf 8f4f 	dsb	sy
3400bd64:	f3bf 8f6f 	isb	sy
3400bd68:	4770      	bx	lr

3400bd6a <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
3400bd6a:	f380 8811 	msr	BASEPRI, r0
3400bd6e:	f3bf 8f4f 	dsb	sy
3400bd72:	f3bf 8f6f 	isb	sy
3400bd76:	4770      	bx	lr
	...

3400bd80 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
3400bd80:	f3ef 8009 	mrs	r0, PSP
3400bd84:	f01e 0f10 	tst.w	lr, #16
3400bd88:	bf08      	it	eq
3400bd8a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
3400bd8e:	f3ef 820b 	mrs	r2, PSPLIM
3400bd92:	4673      	mov	r3, lr
3400bd94:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
3400bd98:	4a11      	ldr	r2, [pc, #68]	@ (3400bde0 <pxCurrentTCBConst>)
3400bd9a:	6811      	ldr	r1, [r2, #0]
3400bd9c:	6008      	str	r0, [r1, #0]
3400bd9e:	f04f 0050 	mov.w	r0, #80	@ 0x50
3400bda2:	f380 8811 	msr	BASEPRI, r0
3400bda6:	f3bf 8f4f 	dsb	sy
3400bdaa:	f3bf 8f6f 	isb	sy
3400bdae:	f7ff fa0b 	bl	3400b1c8 <vTaskSwitchContext>
3400bdb2:	f04f 0000 	mov.w	r0, #0
3400bdb6:	f380 8811 	msr	BASEPRI, r0
3400bdba:	4a09      	ldr	r2, [pc, #36]	@ (3400bde0 <pxCurrentTCBConst>)
3400bdbc:	6811      	ldr	r1, [r2, #0]
3400bdbe:	6808      	ldr	r0, [r1, #0]
3400bdc0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
3400bdc4:	f013 0f10 	tst.w	r3, #16
3400bdc8:	bf08      	it	eq
3400bdca:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
3400bdce:	f382 880b 	msr	PSPLIM, r2
3400bdd2:	f380 8809 	msr	PSP, r0
3400bdd6:	4718      	bx	r3
3400bdd8:	f3af 8000 	nop.w
3400bddc:	f3af 8000 	nop.w

3400bde0 <pxCurrentTCBConst>:
3400bde0:	340d23d8 	.word	0x340d23d8
	...

3400bdf0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
3400bdf0:	f01e 0f04 	tst.w	lr, #4
3400bdf4:	bf0c      	ite	eq
3400bdf6:	f3ef 8008 	mrseq	r0, MSP
3400bdfa:	f3ef 8009 	mrsne	r0, PSP
3400bdfe:	4904      	ldr	r1, [pc, #16]	@ (3400be10 <svchandler_address_const>)
3400be00:	4708      	bx	r1
3400be02:	bf00      	nop
3400be04:	f3af 8000 	nop.w
3400be08:	f3af 8000 	nop.w
3400be0c:	f3af 8000 	nop.w

3400be10 <svchandler_address_const>:
3400be10:	3400bad9 	.word	0x3400bad9

3400be14 <app_postprocess_init>:

int32_t app_postprocess_init(void *params_postprocess, NN_Instance_TypeDef *NN_Instance)
{
  int32_t error;
  pd_model_pp_static_param_t *params = (pd_model_pp_static_param_t *) params_postprocess;
  params->width = AI_PD_MODEL_PP_WIDTH;
3400be14:	23c0      	movs	r3, #192	@ 0xc0
{
3400be16:	b500      	push	{lr}
  params->height = AI_PD_MODEL_PP_HEIGHT;
3400be18:	e9c0 3300 	strd	r3, r3, [r0]
  params->nb_keypoints = AI_PD_MODEL_PP_NB_KEYPOINTS;
3400be1c:	2307      	movs	r3, #7
3400be1e:	6083      	str	r3, [r0, #8]
  params->conf_threshold = AI_PD_MODEL_PP_CONF_THRESHOLD;
3400be20:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
  params->iou_threshold = AI_PD_MODEL_PP_IOU_THRESHOLD;
  params->nb_total_boxes = AI_PD_MODEL_PP_TOTAL_DETECTIONS;
  params->max_boxes_limit = AI_PD_MODEL_PP_MAX_BOXES_LIMIT;
3400be24:	2114      	movs	r1, #20
  params->conf_threshold = AI_PD_MODEL_PP_CONF_THRESHOLD;
3400be26:	60c3      	str	r3, [r0, #12]
  params->iou_threshold = AI_PD_MODEL_PP_IOU_THRESHOLD;
3400be28:	4b0a      	ldr	r3, [pc, #40]	@ (3400be54 <app_postprocess_init+0x40>)
  params->pAnchors = g_Anchors;
  for (int i = 0; i < AI_PD_MODEL_PP_MAX_BOXES_LIMIT; i++) {
3400be2a:	f041 e001 	dls	lr, r1
  params->iou_threshold = AI_PD_MODEL_PP_IOU_THRESHOLD;
3400be2e:	6103      	str	r3, [r0, #16]
  params->max_boxes_limit = AI_PD_MODEL_PP_MAX_BOXES_LIMIT;
3400be30:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
3400be34:	e9c0 3105 	strd	r3, r1, [r0, #20]
  params->pAnchors = g_Anchors;
3400be38:	4b07      	ldr	r3, [pc, #28]	@ (3400be58 <app_postprocess_init+0x44>)
3400be3a:	4a08      	ldr	r2, [pc, #32]	@ (3400be5c <app_postprocess_init+0x48>)
3400be3c:	61c3      	str	r3, [r0, #28]
  for (int i = 0; i < AI_PD_MODEL_PP_MAX_BOXES_LIMIT; i++) {
3400be3e:	4b08      	ldr	r3, [pc, #32]	@ (3400be60 <app_postprocess_init+0x4c>)
    out_detections[i].pKps = &out_keyPoints[i][0];
3400be40:	615a      	str	r2, [r3, #20]
  for (int i = 0; i < AI_PD_MODEL_PP_MAX_BOXES_LIMIT; i++) {
3400be42:	3238      	adds	r2, #56	@ 0x38
3400be44:	3318      	adds	r3, #24
3400be46:	f00f c805 	le	lr, 3400be40 <app_postprocess_init+0x2c>
  }
  error = pd_model_pp_reset(params);
  return error;
}
3400be4a:	f85d eb04 	ldr.w	lr, [sp], #4
  error = pd_model_pp_reset(params);
3400be4e:	f000 b949 	b.w	3400c0e4 <pd_model_pp_reset>
3400be52:	bf00      	nop
3400be54:	3ecccccd 	.word	0x3ecccccd
3400be58:	340cc768 	.word	0x340cc768
3400be5c:	340d2510 	.word	0x340d2510
3400be60:	340d2970 	.word	0x340d2970

3400be64 <app_postprocess_run>:

int32_t app_postprocess_run(void *pInput[], int nb_input, void *pOutput, void *pInput_param)
{
3400be64:	b513      	push	{r0, r1, r4, lr}
3400be66:	460c      	mov	r4, r1
  assert(nb_input == 2);
3400be68:	2c02      	cmp	r4, #2
{
3400be6a:	4611      	mov	r1, r2
3400be6c:	461a      	mov	r2, r3
  assert(nb_input == 2);
3400be6e:	d005      	beq.n	3400be7c <app_postprocess_run+0x18>
3400be70:	2134      	movs	r1, #52	@ 0x34
3400be72:	4b08      	ldr	r3, [pc, #32]	@ (3400be94 <app_postprocess_run+0x30>)
3400be74:	4a08      	ldr	r2, [pc, #32]	@ (3400be98 <app_postprocess_run+0x34>)
3400be76:	4809      	ldr	r0, [pc, #36]	@ (3400be9c <app_postprocess_run+0x38>)
3400be78:	f013 fdc6 	bl	3401fa08 <__assert_func>
  pd_pp_out_t *pPdOutput = (pd_pp_out_t *) pOutput;
  pd_model_pp_in_t pp_input = {
3400be7c:	6803      	ldr	r3, [r0, #0]
3400be7e:	9300      	str	r3, [sp, #0]
3400be80:	6843      	ldr	r3, [r0, #4]
    .pProbs = (float32_t *) pInput[0],
    .pBoxes = (float32_t *) pInput[1],
  };
  int32_t error;
  pPdOutput->pOutData = out_detections;
  error = pd_model_pp_process(&pp_input, pPdOutput, 
3400be82:	4668      	mov	r0, sp
  pd_model_pp_in_t pp_input = {
3400be84:	9301      	str	r3, [sp, #4]
  pPdOutput->pOutData = out_detections;
3400be86:	4b06      	ldr	r3, [pc, #24]	@ (3400bea0 <app_postprocess_run+0x3c>)
3400be88:	600b      	str	r3, [r1, #0]
  error = pd_model_pp_process(&pp_input, pPdOutput, 
3400be8a:	f000 f92d 	bl	3400c0e8 <pd_model_pp_process>
                              (pd_model_pp_static_param_t *) pInput_param);

  return error;
}
3400be8e:	b002      	add	sp, #8
3400be90:	bd10      	pop	{r4, pc}
3400be92:	bf00      	nop
3400be94:	3402ca66 	.word	0x3402ca66
3400be98:	34037d25 	.word	0x34037d25
3400be9c:	3402ca74 	.word	0x3402ca74
3400bea0:	340d2970 	.word	0x340d2970

3400bea4 <pd_pp_nms_comparator>:
static int32_t pd_pp_nms_comparator(const void *arg1, const void *arg2)
{
  const pd_pp_box_t *box1 = arg1;
  const pd_pp_box_t *box2 = arg2;

  if (box1->prob < box2->prob)
3400bea4:	ed90 7a00 	vldr	s14, [r0]
3400bea8:	edd1 7a00 	vldr	s15, [r1]
3400beac:	eeb4 7ae7 	vcmpe.f32	s14, s15
3400beb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return 1;

  if (box1->prob > box2->prob)
3400beb4:	eeb4 7a67 	vcmp.f32	s14, s15
3400beb8:	bfcc      	ite	gt
3400beba:	f04f 30ff 	movgt.w	r0, #4294967295
3400bebe:	2000      	movle	r0, #0
3400bec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return -1;

  return 0;
}
3400bec4:	bf48      	it	mi
3400bec6:	2001      	movmi	r0, #1
3400bec8:	4770      	bx	lr
	...

3400becc <pd_pp_nms.isra.0>:

  pOutput->box_nb = box_nb;
  return AI_PD_POSTPROCESS_ERROR_NO;
}

static int pd_pp_nms(pd_pp_out_t *pOutput,
3400becc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  int hand_nb = 0;
  int skip_box;
  float iou;
  pd_pp_box_t *pd_boxes = (pd_pp_box_t *)pOutput->pOutData;
  size_t box_nb =  pOutput->box_nb;
3400bed0:	e9d0 7400 	ldrd	r7, r4, [r0]

  /* first sort boxes by higher probability */
  qsort(pd_boxes, box_nb, sizeof(pd_pp_box_t), pd_pp_nms_comparator);
3400bed4:	4b81      	ldr	r3, [pc, #516]	@ (3400c0dc <pd_pp_nms.isra.0+0x210>)
static int pd_pp_nms(pd_pp_out_t *pOutput,
3400bed6:	4688      	mov	r8, r1
  qsort(pd_boxes, box_nb, sizeof(pd_pp_box_t), pd_pp_nms_comparator);
3400bed8:	2218      	movs	r2, #24
3400beda:	4621      	mov	r1, r4
3400bedc:	4638      	mov	r0, r7
static int pd_pp_nms(pd_pp_out_t *pOutput,
3400bede:	b091      	sub	sp, #68	@ 0x44
  qsort(pd_boxes, box_nb, sizeof(pd_pp_box_t), pd_pp_nms_comparator);
3400bee0:	f014 fbf1 	bl	340206c6 <qsort>

  /* then apply iou to filter them */
  for (size_t i = 0; i < box_nb; i++) {
3400bee4:	2318      	movs	r3, #24
3400bee6:	463e      	mov	r6, r7
  int hand_nb = 0;
3400bee8:	f04f 0c00 	mov.w	ip, #0
  corners[0].x = box->x_center - box->width / 2;
3400beec:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
    return 0;
3400bef0:	ed9f 4a7b 	vldr	s8, [pc, #492]	@ 3400c0e0 <pd_pp_nms.isra.0+0x214>
3400bef4:	fb03 7e04 	mla	lr, r3, r4, r7
  for (size_t i = 0; i < box_nb; i++) {
3400bef8:	4576      	cmp	r6, lr
3400befa:	f040 80eb 	bne.w	3400c0d4 <pd_pp_nms.isra.0+0x208>

    pd_boxes[hand_nb++] = pd_boxes[i];
  }

  return hand_nb;
}
3400befe:	b011      	add	sp, #68	@ 0x44
3400bf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  corners[0].x = box->x_center - box->width / 2;
3400bf04:	ed96 7a01 	vldr	s14, [r6, #4]
3400bf08:	edd6 5a03 	vldr	s11, [r6, #12]
3400bf0c:	eef0 7a47 	vmov.f32	s15, s14
3400bf10:	eee5 7ae6 	vfms.f32	s15, s11, s13
  corners[0].y = box->y_center - box->height / 2;
3400bf14:	ed96 6a04 	vldr	s12, [r6, #16]
  corners[1].x = box->x_center + box->width / 2;
3400bf18:	eea5 7aa6 	vfma.f32	s14, s11, s13
  corners[0].x = box->x_center - box->width / 2;
3400bf1c:	edcd 7a08 	vstr	s15, [sp, #32]
  corners[0].y = box->y_center - box->height / 2;
3400bf20:	edd6 7a02 	vldr	s15, [r6, #8]
  corners[1].x = box->x_center + box->width / 2;
3400bf24:	ed8d 7a0a 	vstr	s14, [sp, #40]	@ 0x28
  corners[0].y = box->y_center - box->height / 2;
3400bf28:	eeb0 5a67 	vmov.f32	s10, s15
  corners[0].x = box->x_center - box->width / 2;
3400bf2c:	ed93 7a01 	vldr	s14, [r3, #4]
  corners[1].y = box->y_center + box->height / 2;
3400bf30:	eee6 7a26 	vfma.f32	s15, s12, s13
  corners[0].x = box->x_center - box->width / 2;
3400bf34:	edd3 5a03 	vldr	s11, [r3, #12]
  corners[1].y = box->y_center + box->height / 2;
3400bf38:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
  corners[0].x = box->x_center - box->width / 2;
3400bf3c:	eef0 7a47 	vmov.f32	s15, s14
3400bf40:	eee5 7ae6 	vfms.f32	s15, s11, s13
  corners[0].y = box->y_center - box->height / 2;
3400bf44:	eea6 5a66 	vfms.f32	s10, s12, s13
  corners[0].x = box->x_center - box->width / 2;
3400bf48:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
  corners[0].y = box->y_center - box->height / 2;
3400bf4c:	edd3 7a02 	vldr	s15, [r3, #8]
3400bf50:	ed93 6a04 	vldr	s12, [r3, #16]
3400bf54:	ed8d 5a09 	vstr	s10, [sp, #36]	@ 0x24
3400bf58:	eeb0 5a67 	vmov.f32	s10, s15
  corners[1].x = box->x_center + box->width / 2;
3400bf5c:	eea5 7aa6 	vfma.f32	s14, s11, s13
  corners[0].y = box->y_center - box->height / 2;
3400bf60:	eea6 5a66 	vfms.f32	s10, s12, s13
  corners[1].y = box->y_center + box->height / 2;
3400bf64:	eee6 7a26 	vfma.f32	s15, s12, s13
  corners[0].y = box->y_center - box->height / 2;
3400bf68:	ed8d 5a0d 	vstr	s10, [sp, #52]	@ 0x34
  corners[1].x = box->x_center + box->width / 2;
3400bf6c:	ed8d 7a0e 	vstr	s14, [sp, #56]	@ 0x38
  corners[1].y = box->y_center + box->height / 2;
3400bf70:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
  for (i = 0; i < 2; i++) {
3400bf74:	46ea      	mov	sl, sp
3400bf76:	2000      	movs	r0, #0
3400bf78:	aa08      	add	r2, sp, #32
3400bf7a:	ad04      	add	r5, sp, #16
3400bf7c:	ac06      	add	r4, sp, #24
3400bf7e:	f10d 0908 	add.w	r9, sp, #8
    xmin[i] = MIN(corners[i][0].x, corners[i][1].x);
3400bf82:	ed92 7a00 	vldr	s14, [r2]
3400bf86:	edd2 7a02 	vldr	s15, [r2, #8]
3400bf8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
3400bf8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400bf92:	d408      	bmi.n	3400bfa6 <pd_pp_nms.isra.0+0xda>
    xmax[i] = MAX(corners[i][0].x, corners[i][1].x);
3400bf94:	bfc9      	itett	gt
3400bf96:	ee17 ba90 	vmovgt	fp, s15
3400bf9a:	eeb0 7a67 	vmovle.f32	s14, s15
3400bf9e:	eef0 7a47 	vmovgt.f32	s15, s14
3400bfa2:	ee07 ba10 	vmovgt	s14, fp
    xmin[i] = MIN(corners[i][0].x, corners[i][1].x);
3400bfa6:	ecaa 7a01 	vstmia	sl!, {s14}
    xmax[i] = MAX(corners[i][0].x, corners[i][1].x);
3400bfaa:	ece9 7a01 	vstmia	r9!, {s15}
    ymin[i] = MIN(corners[i][0].y, corners[i][1].y);
3400bfae:	ed92 7a01 	vldr	s14, [r2, #4]
3400bfb2:	edd2 7a03 	vldr	s15, [r2, #12]
3400bfb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
3400bfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400bfbe:	d408      	bmi.n	3400bfd2 <pd_pp_nms.isra.0+0x106>
    ymax[i] = MAX(corners[i][0].y, corners[i][1].y);
3400bfc0:	bfc9      	itett	gt
3400bfc2:	ee17 ba90 	vmovgt	fp, s15
3400bfc6:	eeb0 7a67 	vmovle.f32	s14, s15
3400bfca:	eef0 7a47 	vmovgt.f32	s15, s14
3400bfce:	ee07 ba10 	vmovgt	s14, fp
    ymin[i] = MIN(corners[i][0].y, corners[i][1].y);
3400bfd2:	eca5 7a01 	vstmia	r5!, {s14}
    ymax[i] = MAX(corners[i][0].y, corners[i][1].y);
3400bfd6:	ece4 7a01 	vstmia	r4!, {s15}
  for (i = 0; i < 2; i++) {
3400bfda:	3210      	adds	r2, #16
3400bfdc:	2800      	cmp	r0, #0
3400bfde:	d074      	beq.n	3400c0ca <pd_pp_nms.isra.0+0x1fe>
    area[i] = (ymax[i] - ymin[i]) * (xmax[i] - xmin[i]);
3400bfe0:	eddd 3a06 	vldr	s7, [sp, #24]
3400bfe4:	eddd 2a04 	vldr	s5, [sp, #16]
3400bfe8:	ed9d 3a02 	vldr	s6, [sp, #8]
3400bfec:	ed9d 2a00 	vldr	s4, [sp]
3400bff0:	ee33 6ae2 	vsub.f32	s12, s7, s5
3400bff4:	ee73 7a42 	vsub.f32	s15, s6, s4
3400bff8:	ee26 6a27 	vmul.f32	s12, s12, s15
  if (area[0] <= 0 || area[1] <= 0)
3400bffc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
3400c000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    area[i] = (ymax[i] - ymin[i]) * (xmax[i] - xmin[i]);
3400c004:	eddd 7a07 	vldr	s15, [sp, #28]
3400c008:	eddd 4a05 	vldr	s9, [sp, #20]
3400c00c:	ed9d 7a03 	vldr	s14, [sp, #12]
3400c010:	ed9d 5a01 	vldr	s10, [sp, #4]
    return 0;
3400c014:	eef0 5a44 	vmov.f32	s11, s8
  if (area[0] <= 0 || area[1] <= 0)
3400c018:	d93c      	bls.n	3400c094 <pd_pp_nms.isra.0+0x1c8>
    area[i] = (ymax[i] - ymin[i]) * (xmax[i] - xmin[i]);
3400c01a:	ee77 5ae4 	vsub.f32	s11, s15, s9
3400c01e:	ee77 1a45 	vsub.f32	s3, s14, s10
3400c022:	ee65 5aa1 	vmul.f32	s11, s11, s3
  if (area[0] <= 0 || area[1] <= 0)
3400c026:	eef5 5ac0 	vcmpe.f32	s11, #0.0
3400c02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c02e:	d94e      	bls.n	3400c0ce <pd_pp_nms.isra.0+0x202>
  intersect_xmin = MAX(xmin[0], xmin[1]);
3400c030:	eeb4 2a45 	vcmp.f32	s4, s10
3400c034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  intersect_ymin = MAX(ymin[0], ymin[1]);
3400c038:	eef4 2a64 	vcmp.f32	s5, s9
  intersect_xmin = MAX(xmin[0], xmin[1]);
3400c03c:	fe32 5a05 	vselgt.f32	s10, s4, s10
  intersect_ymin = MAX(ymin[0], ymin[1]);
3400c040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  intersect_xmax = MIN(xmax[0], xmax[1]);
3400c044:	eeb4 3a47 	vcmp.f32	s6, s14
  intersect_ymin = MAX(ymin[0], ymin[1]);
3400c048:	fe72 4aa4 	vselgt.f32	s9, s5, s9
  intersect_xmax = MIN(xmax[0], xmax[1]);
3400c04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  intersect_ymax = MIN(ymax[0], ymax[1]);
3400c050:	eef4 3a67 	vcmp.f32	s7, s15
  intersect_xmax = MIN(xmax[0], xmax[1]);
3400c054:	bf48      	it	mi
3400c056:	eeb0 7a43 	vmovmi.f32	s14, s6
  intersect_ymax = MIN(ymax[0], ymax[1]);
3400c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c05e:	bf48      	it	mi
3400c060:	eef0 7a63 	vmovmi.f32	s15, s7
  intersect_area = MAX(intersect_ymax - intersect_ymin, 0.0f) * MAX(intersect_xmax - intersect_xmin, 0.0f);
3400c064:	ee77 7ae4 	vsub.f32	s15, s15, s9
3400c068:	ee37 7a45 	vsub.f32	s14, s14, s10
3400c06c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400c070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c074:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
3400c078:	fe77 7a84 	vselgt.f32	s15, s15, s8
3400c07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c080:	fe37 7a04 	vselgt.f32	s14, s14, s8
3400c084:	ee67 7a87 	vmul.f32	s15, s15, s14
  return intersect_area / (area[0] + area[1] - intersect_area);
3400c088:	ee36 6a25 	vadd.f32	s12, s12, s11
3400c08c:	ee36 6a67 	vsub.f32	s12, s12, s15
3400c090:	eec7 5a86 	vdiv.f32	s11, s15, s12
      if (iou >= pInput_static_param->iou_threshold) {
3400c094:	edd8 7a04 	vldr	s15, [r8, #16]
3400c098:	eef4 7ae5 	vcmpe.f32	s15, s11
3400c09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c0a0:	f103 0318 	add.w	r3, r3, #24
3400c0a4:	d90f      	bls.n	3400c0c6 <pd_pp_nms.isra.0+0x1fa>
    for (int j = 0; j < hand_nb; j++) {
3400c0a6:	3101      	adds	r1, #1
3400c0a8:	4561      	cmp	r1, ip
3400c0aa:	f6ff af2b 	blt.w	3400bf04 <pd_pp_nms.isra.0+0x38>
    pd_boxes[hand_nb++] = pd_boxes[i];
3400c0ae:	2418      	movs	r4, #24
3400c0b0:	4635      	mov	r5, r6
3400c0b2:	fb04 740c 	mla	r4, r4, ip, r7
3400c0b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400c0b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3400c0ba:	e895 0003 	ldmia.w	r5, {r0, r1}
3400c0be:	e884 0003 	stmia.w	r4, {r0, r1}
3400c0c2:	f10c 0c01 	add.w	ip, ip, #1
  for (size_t i = 0; i < box_nb; i++) {
3400c0c6:	3618      	adds	r6, #24
3400c0c8:	e716      	b.n	3400bef8 <pd_pp_nms.isra.0+0x2c>
3400c0ca:	2001      	movs	r0, #1
3400c0cc:	e759      	b.n	3400bf82 <pd_pp_nms.isra.0+0xb6>
    return 0;
3400c0ce:	eef0 5a44 	vmov.f32	s11, s8
3400c0d2:	e7df      	b.n	3400c094 <pd_pp_nms.isra.0+0x1c8>
3400c0d4:	463b      	mov	r3, r7
    for (int j = 0; j < hand_nb; j++) {
3400c0d6:	2100      	movs	r1, #0
3400c0d8:	e7e6      	b.n	3400c0a8 <pd_pp_nms.isra.0+0x1dc>
3400c0da:	bf00      	nop
3400c0dc:	3400bea5 	.word	0x3400bea5
3400c0e0:	00000000 	.word	0x00000000

3400c0e4 <pd_model_pp_reset>:
int32_t pd_model_pp_reset(pd_model_pp_static_param_t *pInput_static_param)
{
  return AI_PD_POSTPROCESS_ERROR_NO;
}
3400c0e4:	2000      	movs	r0, #0
3400c0e6:	4770      	bx	lr

3400c0e8 <pd_model_pp_process>:
  float32_t width  = pInput_static_param->width;
3400c0e8:	edd2 7a00 	vldr	s15, [r2]


int32_t pd_model_pp_process(pd_model_pp_in_t *pInput,
                            pd_pp_out_t *pOutput,
                            pd_model_pp_static_param_t *pInput_static_param)
{
3400c0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float32_t *pRawProbs = (float32_t *)pInput->pProbs;
3400c0f0:	e9d0 b500 	ldrd	fp, r5, [r0]
{
3400c0f4:	ed2d 8b04 	vpush	{d8-d9}
  float32_t width  = pInput_static_param->width;
3400c0f8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  float32_t height = pInput_static_param->height;
3400c0fc:	edd2 7a01 	vldr	s15, [r2, #4]
  float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400c100:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
  float32_t height = pInput_static_param->height;
3400c104:	eef8 8a67 	vcvt.f32.u32	s17, s15
  float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400c108:	edd2 7a03 	vldr	s15, [r2, #12]
  pOutput->box_nb = 0;
3400c10c:	2700      	movs	r7, #0
  float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400c10e:	ee89 0a27 	vdiv.f32	s0, s18, s15
  pd_pp_box_t *pBoxes = (pd_pp_box_t *)pOutput->pOutData;
3400c112:	680b      	ldr	r3, [r1, #0]
{
3400c114:	b085      	sub	sp, #20
  float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400c116:	ee30 0a49 	vsub.f32	s0, s0, s18
  pOutput->box_nb = 0;
3400c11a:	604f      	str	r7, [r1, #4]
  const size_t in_struct_size = (2 * pInput_static_param->nb_keypoints) + AI_PD_MODEL_PP_KEYPOINTS;// CEN TBD
3400c11c:	f8d2 a008 	ldr.w	sl, [r2, #8]
{
3400c120:	4614      	mov	r4, r2
  float32_t *pAnchors = (float32_t *)pInput_static_param->pAnchors;
3400c122:	69d6      	ldr	r6, [r2, #28]
  pd_pp_box_t *pBoxes = (pd_pp_box_t *)pOutput->pOutData;
3400c124:	9301      	str	r3, [sp, #4]
{
3400c126:	4688      	mov	r8, r1
  float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400c128:	f018 fdaa 	bl	34024c80 <logf>
  size_t box_nb = 0;
3400c12c:	46b9      	mov	r9, r7
  float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400c12e:	eef1 9a40 	vneg.f32	s19, s0
    pd_pp_box_t *pBox = &pBoxes[box_nb]; //&pd_boxes[box_nb];
3400c132:	2218      	movs	r2, #24
  const size_t in_struct_size = (2 * pInput_static_param->nb_keypoints) + AI_PD_MODEL_PP_KEYPOINTS;// CEN TBD
3400c134:	f10a 0302 	add.w	r3, sl, #2
3400c138:	00db      	lsls	r3, r3, #3
3400c13a:	9302      	str	r3, [sp, #8]
  for (uint32_t i = 0; i < pInput_static_param->nb_total_boxes; i++) {
3400c13c:	6963      	ldr	r3, [r4, #20]
3400c13e:	429f      	cmp	r7, r3
3400c140:	d30b      	bcc.n	3400c15a <pd_model_pp_process+0x72>
                     pInput_static_param);

  if (AI_PD_POSTPROCESS_ERROR_NO != ret) {
    return ret;
  }
  pd_pp_nms(pOutput,
3400c142:	4640      	mov	r0, r8
3400c144:	4621      	mov	r1, r4
  pOutput->box_nb = box_nb;
3400c146:	f8c8 9004 	str.w	r9, [r8, #4]
  pd_pp_nms(pOutput,
3400c14a:	f7ff febf 	bl	3400becc <pd_pp_nms.isra.0>
            pInput_static_param);

  return ret;
}
3400c14e:	2000      	movs	r0, #0
3400c150:	b005      	add	sp, #20
3400c152:	ecbd 8b04 	vpop	{d8-d9}
3400c156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pRawProbs[i] >= computedThreshold) {
3400c15a:	ecbb 0a01 	vldmia	fp!, {s0}
3400c15e:	eef4 9ac0 	vcmpe.f32	s19, s0
3400c162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c166:	d83e      	bhi.n	3400c1e6 <pd_model_pp_process+0xfe>
    pd_pp_box_t *pBox = &pBoxes[box_nb]; //&pd_boxes[box_nb];
3400c168:	9b01      	ldr	r3, [sp, #4]
      pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c16a:	eeb1 0a40 	vneg.f32	s0, s0
    pd_pp_box_t *pBox = &pBoxes[box_nb]; //&pd_boxes[box_nb];
3400c16e:	fb02 3109 	mla	r1, r2, r9, r3
3400c172:	9103      	str	r1, [sp, #12]
      pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c174:	f018 fd10 	bl	34024b98 <expf>
3400c178:	ee30 0a09 	vadd.f32	s0, s0, s18
3400c17c:	eec9 7a00 	vdiv.f32	s15, s18, s0
3400c180:	9903      	ldr	r1, [sp, #12]
      for (uint32_t j = 0; j < pInput_static_param->nb_keypoints; j++) {
3400c182:	4628      	mov	r0, r5
      pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c184:	edc1 7a00 	vstr	s15, [r1]
      pBox->x_center = (pAnchors[i*2+0] * width  + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_XCENTER]) / width;
3400c188:	ed96 7a00 	vldr	s14, [r6]
3400c18c:	edd5 7a00 	vldr	s15, [r5]
3400c190:	eee8 7a07 	vfma.f32	s15, s16, s14
3400c194:	ee87 7a88 	vdiv.f32	s14, s15, s16
3400c198:	ed81 7a01 	vstr	s14, [r1, #4]
      pBox->y_center = (pAnchors[i*2+1] * height + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_YCENTER]) / height;
3400c19c:	ed96 7a01 	vldr	s14, [r6, #4]
3400c1a0:	edd5 7a01 	vldr	s15, [r5, #4]
3400c1a4:	eee8 7a87 	vfma.f32	s15, s17, s14
3400c1a8:	ee87 7aa8 	vdiv.f32	s14, s15, s17
3400c1ac:	ed81 7a02 	vstr	s14, [r1, #8]
      pBox->width = pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_WIDTHREL]  / width;
3400c1b0:	ed95 7a02 	vldr	s14, [r5, #8]
3400c1b4:	eec7 7a08 	vdiv.f32	s15, s14, s16
3400c1b8:	edc1 7a03 	vstr	s15, [r1, #12]
      pBox->height = pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_HEIGHTREL] / height;
3400c1bc:	ed95 7a03 	vldr	s14, [r5, #12]
3400c1c0:	eec7 7a28 	vdiv.f32	s15, s14, s17
      for (uint32_t j = 0; j < pInput_static_param->nb_keypoints; j++) {
3400c1c4:	f04f 0e00 	mov.w	lr, #0
      pBox->height = pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_HEIGHTREL] / height;
3400c1c8:	edc1 7a04 	vstr	s15, [r1, #16]
      for (uint32_t j = 0; j < pInput_static_param->nb_keypoints; j++) {
3400c1cc:	2218      	movs	r2, #24
3400c1ce:	f10a 0c01 	add.w	ip, sl, #1
3400c1d2:	f1bc 0c01 	subs.w	ip, ip, #1
3400c1d6:	f100 0008 	add.w	r0, r0, #8
3400c1da:	d109      	bne.n	3400c1f0 <pd_model_pp_process+0x108>
      if (box_nb >= pInput_static_param->max_boxes_limit) {
3400c1dc:	69a3      	ldr	r3, [r4, #24]
      box_nb++;
3400c1de:	f109 0901 	add.w	r9, r9, #1
      if (box_nb >= pInput_static_param->max_boxes_limit) {
3400c1e2:	4599      	cmp	r9, r3
3400c1e4:	d2ad      	bcs.n	3400c142 <pd_model_pp_process+0x5a>
  for (uint32_t i = 0; i < pInput_static_param->nb_total_boxes; i++) {
3400c1e6:	9b02      	ldr	r3, [sp, #8]
3400c1e8:	3701      	adds	r7, #1
3400c1ea:	441d      	add	r5, r3
3400c1ec:	3608      	adds	r6, #8
3400c1ee:	e7a5      	b.n	3400c13c <pd_model_pp_process+0x54>
        pBox->pKps[j].x = (pAnchors[i*2+0] * width  + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_KEYPOINTS + (2 * j) + 0]) / width;
3400c1f0:	ed96 7a00 	vldr	s14, [r6]
3400c1f4:	edd0 7a02 	vldr	s15, [r0, #8]
3400c1f8:	eee8 7a07 	vfma.f32	s15, s16, s14
3400c1fc:	ee87 7a88 	vdiv.f32	s14, s15, s16
3400c200:	694b      	ldr	r3, [r1, #20]
3400c202:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
3400c206:	ed83 7a00 	vstr	s14, [r3]
        pBox->pKps[j].y = (pAnchors[i*2+1] * height + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_KEYPOINTS + (2 * j) + 1]) / height;
3400c20a:	ed96 7a01 	vldr	s14, [r6, #4]
3400c20e:	edd0 7a03 	vldr	s15, [r0, #12]
3400c212:	eee8 7a87 	vfma.f32	s15, s17, s14
3400c216:	ee87 7aa8 	vdiv.f32	s14, s15, s17
      for (uint32_t j = 0; j < pInput_static_param->nb_keypoints; j++) {
3400c21a:	f10e 0e01 	add.w	lr, lr, #1
        pBox->pKps[j].y = (pAnchors[i*2+1] * height + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_KEYPOINTS + (2 * j) + 1]) / height;
3400c21e:	ed83 7a01 	vstr	s14, [r3, #4]
      for (uint32_t j = 0; j < pInput_static_param->nb_keypoints; j++) {
3400c222:	e7d6      	b.n	3400c1d2 <pd_model_pp_process+0xea>

3400c224 <LTDC_FillRectRgb888>:
  return 0;
}

static int32_t LTDC_FillRectRgb888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                                   uint32_t Color)
{
3400c224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  r = (Color >> 16) & 0xff;
  g = (Color >> 8) & 0xff;
  b = (Color >> 0) & 0xff;

  layer_width = Lcd_Ctx[Instance].XSize;
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c228:	f04f 0834 	mov.w	r8, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400c22c:	4e18      	ldr	r6, [pc, #96]	@ (3400c290 <LTDC_FillRectRgb888+0x6c>)
3400c22e:	ea4f 1e40 	mov.w	lr, r0, lsl #5
3400c232:	eb06 1040 	add.w	r0, r6, r0, lsl #5
3400c236:	f856 600e 	ldr.w	r6, [r6, lr]
  pel += (Ypos * layer_width * 3) + Xpos * 3;
  for (h = 0; h < Height; h++) {
3400c23a:	f04f 0e00 	mov.w	lr, #0
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c23e:	6885      	ldr	r5, [r0, #8]
3400c240:	4814      	ldr	r0, [pc, #80]	@ (3400c294 <LTDC_FillRectRgb888+0x70>)
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400c242:	fb02 1206 	mla	r2, r2, r6, r1
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c246:	fb08 0005 	mla	r0, r8, r5, r0
{
3400c24a:	9c07      	ldr	r4, [sp, #28]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c24c:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400c24e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  r = (Color >> 16) & 0xff;
3400c252:	f3c4 4707 	ubfx	r7, r4, #16, #8
  g = (Color >> 8) & 0xff;
3400c256:	f3c4 2c07 	ubfx	ip, r4, #8, #8
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400c25a:	1881      	adds	r1, r0, r2
  b = (Color >> 0) & 0xff;
3400c25c:	b2e4      	uxtb	r4, r4
      /* FIXME */
      pel[3 * w + 0] = b;
      pel[3 * w + 1] = g;
      pel[3 * w + 2] = r;
    }
    pel += layer_width * 3;
3400c25e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  for (h = 0; h < Height; h++) {
3400c262:	9a06      	ldr	r2, [sp, #24]
3400c264:	4596      	cmp	lr, r2
3400c266:	d010      	beq.n	3400c28a <LTDC_FillRectRgb888+0x66>
3400c268:	460a      	mov	r2, r1
    for (w = 0; w < Width; w++) {
3400c26a:	1c58      	adds	r0, r3, #1
3400c26c:	e005      	b.n	3400c27a <LTDC_FillRectRgb888+0x56>
      pel[3 * w + 0] = b;
3400c26e:	f802 4c03 	strb.w	r4, [r2, #-3]
      pel[3 * w + 1] = g;
3400c272:	f802 cc02 	strb.w	ip, [r2, #-2]
      pel[3 * w + 2] = r;
3400c276:	f802 7c01 	strb.w	r7, [r2, #-1]
    for (w = 0; w < Width; w++) {
3400c27a:	3801      	subs	r0, #1
3400c27c:	f102 0203 	add.w	r2, r2, #3
3400c280:	d1f5      	bne.n	3400c26e <LTDC_FillRectRgb888+0x4a>
    pel += layer_width * 3;
3400c282:	4431      	add	r1, r6
  for (h = 0; h < Height; h++) {
3400c284:	f10e 0e01 	add.w	lr, lr, #1
3400c288:	e7eb      	b.n	3400c262 <LTDC_FillRectRgb888+0x3e>
  }

  return 0;
}
3400c28a:	2000      	movs	r0, #0
3400c28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400c290:	340dad80 	.word	0x340dad80
3400c294:	340dada0 	.word	0x340dada0

3400c298 <LTDC_FillRectArgb8888>:

static int32_t LTDC_FillRectArgb8888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                                     uint32_t Color)
{
3400c298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  r = (Color >> 16) & 0xff;
  g = (Color >> 8) & 0xff;
  b = (Color >> 0) & 0xff;

  layer_width = Lcd_Ctx[Instance].XSize;
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c29c:	f04f 0834 	mov.w	r8, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400c2a0:	4c19      	ldr	r4, [pc, #100]	@ (3400c308 <LTDC_FillRectArgb8888+0x70>)
3400c2a2:	ea4f 1e40 	mov.w	lr, r0, lsl #5
3400c2a6:	eb04 1040 	add.w	r0, r4, r0, lsl #5
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c2aa:	6886      	ldr	r6, [r0, #8]
3400c2ac:	4817      	ldr	r0, [pc, #92]	@ (3400c30c <LTDC_FillRectArgb8888+0x74>)
  layer_width = Lcd_Ctx[Instance].XSize;
3400c2ae:	f854 400e 	ldr.w	r4, [r4, lr]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c2b2:	fb08 0006 	mla	r0, r8, r6, r0
  pel += (Ypos * layer_width * 4) + Xpos * 4;
  for (h = 0; h < Height; h++) {
3400c2b6:	f04f 0e00 	mov.w	lr, #0
    for (w = 0; w < Width; w++) {
      /* FIXME */
      pel[4 * w + 0] = r;
      pel[4 * w + 1] = g;
      pel[4 * w + 2] = b;
      pel[4 * w + 3] = 0xff;
3400c2ba:	f04f 08ff 	mov.w	r8, #255	@ 0xff
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400c2be:	fb02 1104 	mla	r1, r2, r4, r1
{
3400c2c2:	9d07      	ldr	r5, [sp, #28]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c2c4:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  r = (Color >> 16) & 0xff;
3400c2c6:	f3c5 4707 	ubfx	r7, r5, #16, #8
  g = (Color >> 8) & 0xff;
3400c2ca:	f3c5 2c07 	ubfx	ip, r5, #8, #8
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400c2ce:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  b = (Color >> 0) & 0xff;
3400c2d2:	b2ed      	uxtb	r5, r5
    }
    pel += layer_width * 4;
3400c2d4:	00a1      	lsls	r1, r4, #2
3400c2d6:	009b      	lsls	r3, r3, #2
  for (h = 0; h < Height; h++) {
3400c2d8:	9806      	ldr	r0, [sp, #24]
3400c2da:	4586      	cmp	lr, r0
3400c2dc:	d010      	beq.n	3400c300 <LTDC_FillRectArgb8888+0x68>
      pel[4 * w + 3] = 0xff;
3400c2de:	089c      	lsrs	r4, r3, #2
3400c2e0:	4610      	mov	r0, r2
3400c2e2:	3401      	adds	r4, #1
3400c2e4:	e006      	b.n	3400c2f4 <LTDC_FillRectArgb8888+0x5c>
      pel[4 * w + 0] = r;
3400c2e6:	7007      	strb	r7, [r0, #0]
      pel[4 * w + 1] = g;
3400c2e8:	f880 c001 	strb.w	ip, [r0, #1]
      pel[4 * w + 2] = b;
3400c2ec:	7085      	strb	r5, [r0, #2]
      pel[4 * w + 3] = 0xff;
3400c2ee:	f880 8003 	strb.w	r8, [r0, #3]
    for (w = 0; w < Width; w++) {
3400c2f2:	3004      	adds	r0, #4
3400c2f4:	3c01      	subs	r4, #1
3400c2f6:	d1f6      	bne.n	3400c2e6 <LTDC_FillRectArgb8888+0x4e>
    pel += layer_width * 4;
3400c2f8:	440a      	add	r2, r1
  for (h = 0; h < Height; h++) {
3400c2fa:	f10e 0e01 	add.w	lr, lr, #1
3400c2fe:	e7eb      	b.n	3400c2d8 <LTDC_FillRectArgb8888+0x40>
  }

  return 0;
}
3400c300:	2000      	movs	r0, #0
3400c302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400c306:	bf00      	nop
3400c308:	340dad80 	.word	0x340dad80
3400c30c:	340dada0 	.word	0x340dada0

3400c310 <LTDC_GetFormat>:
  return res;
}

static int32_t LTDC_GetFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  return BSP_LCD_GetPixelFormat(Instance, PixelFormat);
3400c310:	f001 bdbe 	b.w	3400de90 <BSP_LCD_GetPixelFormat>

3400c314 <LTDC_SetLayer>:
{
3400c314:	b538      	push	{r3, r4, r5, lr}
3400c316:	460c      	mov	r4, r1
  current_layer = LayerIndex;
3400c318:	4b08      	ldr	r3, [pc, #32]	@ (3400c33c <LTDC_SetLayer+0x28>)
{
3400c31a:	4605      	mov	r5, r0
  current_layer = LayerIndex;
3400c31c:	7019      	strb	r1, [r3, #0]
  res = BSP_LCD_SetActiveLayer(Instance, LayerIndex);
3400c31e:	f001 fdc1 	bl	3400dea4 <BSP_LCD_SetActiveLayer>
  if (is_layer_rgb888[LayerIndex]) {
3400c322:	4b07      	ldr	r3, [pc, #28]	@ (3400c340 <LTDC_SetLayer+0x2c>)
3400c324:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
3400c328:	b133      	cbz	r3, 3400c338 <LTDC_SetLayer+0x24>
    Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3400c32a:	2201      	movs	r2, #1
3400c32c:	2103      	movs	r1, #3
    Lcd_Ctx[Instance].BppFactor = 3;
3400c32e:	4b05      	ldr	r3, [pc, #20]	@ (3400c344 <LTDC_SetLayer+0x30>)
3400c330:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3400c334:	e9c3 2103 	strd	r2, r1, [r3, #12]
}
3400c338:	bd38      	pop	{r3, r4, r5, pc}
3400c33a:	bf00      	nop
3400c33c:	340d2b60 	.word	0x340d2b60
3400c340:	340d2b58 	.word	0x340d2b58
3400c344:	340dad80 	.word	0x340dad80

3400c348 <LTDC_GetYSize>:
  return BSP_LCD_GetYSize(Instance, YSize);
3400c348:	f001 bde2 	b.w	3400df10 <BSP_LCD_GetYSize>

3400c34c <LTDC_GetXSize>:
  return BSP_LCD_GetXSize(Instance, YSize);
3400c34c:	f001 bdd6 	b.w	3400defc <BSP_LCD_GetXSize>

3400c350 <LTDC_GetPixel>:
  return BSP_LCD_ReadPixel(Instance, Xpos, Ypos, Color);
3400c350:	f001 bde8 	b.w	3400df24 <BSP_LCD_ReadPixel>

3400c354 <LTDC_FillRect>:
{
3400c354:	b4f0      	push	{r4, r5, r6, r7}
  if (is_layer_rgb888[current_layer])
3400c356:	4e0c      	ldr	r6, [pc, #48]	@ (3400c388 <LTDC_FillRect+0x34>)
3400c358:	4f0c      	ldr	r7, [pc, #48]	@ (3400c38c <LTDC_FillRect+0x38>)
3400c35a:	7836      	ldrb	r6, [r6, #0]
{
3400c35c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  if (is_layer_rgb888[current_layer])
3400c360:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
3400c364:	b127      	cbz	r7, 3400c370 <LTDC_FillRect+0x1c>
    return LTDC_FillRectRgb888(Instance, Xpos, Ypos, Width, Height, Color);
3400c366:	e9cd 4504 	strd	r4, r5, [sp, #16]
}
3400c36a:	bcf0      	pop	{r4, r5, r6, r7}
    return LTDC_FillRectRgb888(Instance, Xpos, Ypos, Width, Height, Color);
3400c36c:	f7ff bf5a 	b.w	3400c224 <LTDC_FillRectRgb888>
  if (is_layer_argb8888[current_layer])
3400c370:	4f07      	ldr	r7, [pc, #28]	@ (3400c390 <LTDC_FillRect+0x3c>)
3400c372:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    return LTDC_FillRectArgb8888(Instance, Xpos, Ypos, Width, Height, Color);
3400c376:	e9cd 4504 	strd	r4, r5, [sp, #16]
  if (is_layer_argb8888[current_layer])
3400c37a:	b116      	cbz	r6, 3400c382 <LTDC_FillRect+0x2e>
}
3400c37c:	bcf0      	pop	{r4, r5, r6, r7}
    return LTDC_FillRectArgb8888(Instance, Xpos, Ypos, Width, Height, Color);
3400c37e:	f7ff bf8b 	b.w	3400c298 <LTDC_FillRectArgb8888>
}
3400c382:	bcf0      	pop	{r4, r5, r6, r7}
  return BSP_LCD_FillRect(Instance, Xpos, Ypos, Width, Height, Color);
3400c384:	f001 bfa0 	b.w	3400e2c8 <BSP_LCD_FillRect>
3400c388:	340d2b60 	.word	0x340d2b60
3400c38c:	340d2b58 	.word	0x340d2b58
3400c390:	340d2b50 	.word	0x340d2b50

3400c394 <LTDC_FillRGBRect>:
{
3400c394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (is_layer_rgb888[current_layer])
3400c398:	4f3f      	ldr	r7, [pc, #252]	@ (3400c498 <LTDC_FillRGBRect+0x104>)
{
3400c39a:	4688      	mov	r8, r1
3400c39c:	e9dd 6c08 	ldrd	r6, ip, [sp, #32]
  if (is_layer_rgb888[current_layer])
3400c3a0:	f897 9000 	ldrb.w	r9, [r7]
3400c3a4:	4f3d      	ldr	r7, [pc, #244]	@ (3400c49c <LTDC_FillRGBRect+0x108>)
{
3400c3a6:	4615      	mov	r5, r2
  if (is_layer_rgb888[current_layer])
3400c3a8:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
{
3400c3ac:	469e      	mov	lr, r3
  if (is_layer_rgb888[current_layer])
3400c3ae:	b37f      	cbz	r7, 3400c410 <LTDC_FillRGBRect+0x7c>
  layer_width = Lcd_Ctx[Instance].XSize;
3400c3b0:	4b3b      	ldr	r3, [pc, #236]	@ (3400c4a0 <LTDC_FillRGBRect+0x10c>)
3400c3b2:	0142      	lsls	r2, r0, #5
3400c3b4:	eb03 1440 	add.w	r4, r3, r0, lsl #5
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c3b8:	2034      	movs	r0, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400c3ba:	589a      	ldr	r2, [r3, r2]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c3bc:	68a1      	ldr	r1, [r4, #8]
3400c3be:	4b39      	ldr	r3, [pc, #228]	@ (3400c4a4 <LTDC_FillRGBRect+0x110>)
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400c3c0:	fb02 8505 	mla	r5, r2, r5, r8
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c3c4:	fb00 3301 	mla	r3, r0, r1, r3
3400c3c8:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400c3ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3400c3ce:	4429      	add	r1, r5
  for (h = 0; h < Height; h++) {
3400c3d0:	2500      	movs	r5, #0
3400c3d2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    pel += layer_width + 3;
3400c3d6:	1cd0      	adds	r0, r2, #3
  for (h = 0; h < Height; h++) {
3400c3d8:	4565      	cmp	r5, ip
3400c3da:	d05a      	beq.n	3400c492 <LTDC_FillRGBRect+0xfe>
3400c3dc:	4672      	mov	r2, lr
3400c3de:	460b      	mov	r3, r1
    for (w = 0; w < Width; w++) {
3400c3e0:	1c74      	adds	r4, r6, #1
3400c3e2:	e00b      	b.n	3400c3fc <LTDC_FillRGBRect+0x68>
      pel[3 * w + 0] = *pData++;
3400c3e4:	f812 8c03 	ldrb.w	r8, [r2, #-3]
3400c3e8:	f803 8c03 	strb.w	r8, [r3, #-3]
      pel[3 * w + 1] = *pData++;
3400c3ec:	f812 8c02 	ldrb.w	r8, [r2, #-2]
3400c3f0:	f803 8c02 	strb.w	r8, [r3, #-2]
      pel[3 * w + 2] = *pData++;
3400c3f4:	f812 8c01 	ldrb.w	r8, [r2, #-1]
3400c3f8:	f803 8c01 	strb.w	r8, [r3, #-1]
    for (w = 0; w < Width; w++) {
3400c3fc:	3c01      	subs	r4, #1
3400c3fe:	f102 0203 	add.w	r2, r2, #3
3400c402:	f103 0303 	add.w	r3, r3, #3
3400c406:	d1ed      	bne.n	3400c3e4 <LTDC_FillRGBRect+0x50>
3400c408:	44be      	add	lr, r7
    pel += layer_width + 3;
3400c40a:	4401      	add	r1, r0
  for (h = 0; h < Height; h++) {
3400c40c:	3501      	adds	r5, #1
3400c40e:	e7e3      	b.n	3400c3d8 <LTDC_FillRGBRect+0x44>
  if (is_layer_argb8888[current_layer])
3400c410:	f8df a094 	ldr.w	sl, [pc, #148]	@ 3400c4a8 <LTDC_FillRGBRect+0x114>
3400c414:	f85a 9029 	ldr.w	r9, [sl, r9, lsl #2]
3400c418:	f1b9 0f00 	cmp.w	r9, #0
3400c41c:	d033      	beq.n	3400c486 <LTDC_FillRGBRect+0xf2>
  layer_width = Lcd_Ctx[Instance].XSize;
3400c41e:	4b20      	ldr	r3, [pc, #128]	@ (3400c4a0 <LTDC_FillRGBRect+0x10c>)
3400c420:	0142      	lsls	r2, r0, #5
3400c422:	eb03 1440 	add.w	r4, r3, r0, lsl #5
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c426:	2034      	movs	r0, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400c428:	589a      	ldr	r2, [r3, r2]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c42a:	68a1      	ldr	r1, [r4, #8]
3400c42c:	4b1d      	ldr	r3, [pc, #116]	@ (3400c4a4 <LTDC_FillRGBRect+0x110>)
3400c42e:	00b6      	lsls	r6, r6, #2
3400c430:	fb00 3301 	mla	r3, r0, r1, r3
3400c434:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400c436:	fb02 8305 	mla	r3, r2, r5, r8
    pel += layer_width + 4;
3400c43a:	1d15      	adds	r5, r2, #4
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400c43c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  for (h = 0; h < Height; h++) {
3400c440:	4567      	cmp	r7, ip
3400c442:	d026      	beq.n	3400c492 <LTDC_FillRGBRect+0xfe>
3400c444:	4673      	mov	r3, lr
3400c446:	eb0e 0406 	add.w	r4, lr, r6
3400c44a:	1ae0      	subs	r0, r4, r3
3400c44c:	0880      	lsrs	r0, r0, #2
3400c44e:	460a      	mov	r2, r1
3400c450:	3001      	adds	r0, #1
3400c452:	e010      	b.n	3400c476 <LTDC_FillRGBRect+0xe2>
      pel[4 * w + 2] = *pData++;
3400c454:	f893 e000 	ldrb.w	lr, [r3]
      pel[4 * w + 3] = *pData++;
3400c458:	3304      	adds	r3, #4
      pel[4 * w + 2] = *pData++;
3400c45a:	f802 ec02 	strb.w	lr, [r2, #-2]
      pel[4 * w + 1] = *pData++;
3400c45e:	f813 ec03 	ldrb.w	lr, [r3, #-3]
3400c462:	f802 ec03 	strb.w	lr, [r2, #-3]
      pel[4 * w + 0] = *pData++;
3400c466:	f813 ec02 	ldrb.w	lr, [r3, #-2]
3400c46a:	f802 ec04 	strb.w	lr, [r2, #-4]
      pel[4 * w + 3] = *pData++;
3400c46e:	f813 ec01 	ldrb.w	lr, [r3, #-1]
3400c472:	f802 ec01 	strb.w	lr, [r2, #-1]
    for (w = 0; w < Width; w++) {
3400c476:	3801      	subs	r0, #1
3400c478:	f102 0204 	add.w	r2, r2, #4
3400c47c:	d1ea      	bne.n	3400c454 <LTDC_FillRGBRect+0xc0>
3400c47e:	46a6      	mov	lr, r4
    pel += layer_width + 4;
3400c480:	4429      	add	r1, r5
  for (h = 0; h < Height; h++) {
3400c482:	3701      	adds	r7, #1
3400c484:	e7dc      	b.n	3400c440 <LTDC_FillRGBRect+0xac>
  return BSP_LCD_FillRGBRect(Instance, Xpos, Ypos, pData, Width, Height);
3400c486:	e9cd 6c08 	strd	r6, ip, [sp, #32]
}
3400c48a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return BSP_LCD_FillRGBRect(Instance, Xpos, Ypos, pData, Width, Height);
3400c48e:	f001 bdbf 	b.w	3400e010 <BSP_LCD_FillRGBRect>
}
3400c492:	2000      	movs	r0, #0
3400c494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400c498:	340d2b60 	.word	0x340d2b60
3400c49c:	340d2b58 	.word	0x340d2b58
3400c4a0:	340dad80 	.word	0x340dad80
3400c4a4:	340dada0 	.word	0x340dada0
3400c4a8:	340d2b50 	.word	0x340d2b50

3400c4ac <LTDC_DrawBitmap>:
  return BSP_LCD_DrawBitmap(Instance, Xpos, Ypos, pBmp);
3400c4ac:	f001 bdd6 	b.w	3400e05c <BSP_LCD_DrawBitmap>

3400c4b0 <fill_lcd_layer_config_from_scrl_layer_config>:
{
3400c4b0:	b510      	push	{r4, lr}
  layer_config->X1 = layer_config->X0 + l->size.width;
3400c4b2:	8883      	ldrh	r3, [r0, #4]
  layer_config->X0 = l->origin.x;
3400c4b4:	8804      	ldrh	r4, [r0, #0]
  layer_config->Y0 = l->origin.y;
3400c4b6:	8842      	ldrh	r2, [r0, #2]
  layer_config->X1 = layer_config->X0 + l->size.width;
3400c4b8:	4423      	add	r3, r4
3400c4ba:	604b      	str	r3, [r1, #4]
  layer_config->Y1 = layer_config->Y0 + l->size.height;
3400c4bc:	88c3      	ldrh	r3, [r0, #6]
  layer_config->X0 = l->origin.x;
3400c4be:	600c      	str	r4, [r1, #0]
  layer_config->Y1 = layer_config->Y0 + l->size.height;
3400c4c0:	4413      	add	r3, r2
  layer_config->Y0 = l->origin.y;
3400c4c2:	608a      	str	r2, [r1, #8]
  layer_config->Y1 = layer_config->Y0 + l->size.height;
3400c4c4:	60cb      	str	r3, [r1, #12]
  switch (fmt) {
3400c4c6:	7a03      	ldrb	r3, [r0, #8]
3400c4c8:	2b05      	cmp	r3, #5
3400c4ca:	d80b      	bhi.n	3400c4e4 <fill_lcd_layer_config_from_scrl_layer_config+0x34>
3400c4cc:	e8df f003 	tbb	[pc, r3]
3400c4d0:	080a1203 	.word	0x080a1203
3400c4d4:	1010      	.short	0x1010
    res = LCD_PIXEL_FORMAT_RGB565;
3400c4d6:	2302      	movs	r3, #2
  layer_config->PixelFormat = pixel_format_from_scrl_format(l->format);
3400c4d8:	610b      	str	r3, [r1, #16]
  layer_config->Address = (uint32_t) l->address;
3400c4da:	68c3      	ldr	r3, [r0, #12]
3400c4dc:	614b      	str	r3, [r1, #20]
}
3400c4de:	bd10      	pop	{r4, pc}
    res = LCD_PIXEL_FORMAT_ARGB8888;
3400c4e0:	2300      	movs	r3, #0
    break;
3400c4e2:	e7f9      	b.n	3400c4d8 <fill_lcd_layer_config_from_scrl_layer_config+0x28>
    assert(0);
3400c4e4:	2179      	movs	r1, #121	@ 0x79
3400c4e6:	4b04      	ldr	r3, [pc, #16]	@ (3400c4f8 <fill_lcd_layer_config_from_scrl_layer_config+0x48>)
3400c4e8:	4a04      	ldr	r2, [pc, #16]	@ (3400c4fc <fill_lcd_layer_config_from_scrl_layer_config+0x4c>)
3400c4ea:	4805      	ldr	r0, [pc, #20]	@ (3400c500 <fill_lcd_layer_config_from_scrl_layer_config+0x50>)
3400c4ec:	f013 fa8c 	bl	3401fa08 <__assert_func>
    res = LCD_PIXEL_FORMAT_RGB888;
3400c4f0:	2301      	movs	r3, #1
3400c4f2:	e7f1      	b.n	3400c4d8 <fill_lcd_layer_config_from_scrl_layer_config+0x28>
  switch (fmt) {
3400c4f4:	2304      	movs	r3, #4
3400c4f6:	e7ef      	b.n	3400c4d8 <fill_lcd_layer_config_from_scrl_layer_config+0x28>
3400c4f8:	3402b7cd 	.word	0x3402b7cd
3400c4fc:	34037d4d 	.word	0x34037d4d
3400c500:	3402cadd 	.word	0x3402cadd

3400c504 <LTDC_SetPixel>:
{
3400c504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (is_layer_rgb888[current_layer])
3400c506:	4d0f      	ldr	r5, [pc, #60]	@ (3400c544 <LTDC_SetPixel+0x40>)
3400c508:	782e      	ldrb	r6, [r5, #0]
3400c50a:	4d0f      	ldr	r5, [pc, #60]	@ (3400c548 <LTDC_SetPixel+0x44>)
3400c50c:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
3400c510:	b13d      	cbz	r5, 3400c522 <LTDC_SetPixel+0x1e>
  return LTDC_FillRectRgb888(0, Xpos, Ypos, 1 , 1, Color);
3400c512:	9301      	str	r3, [sp, #4]
3400c514:	2301      	movs	r3, #1
3400c516:	2000      	movs	r0, #0
3400c518:	9300      	str	r3, [sp, #0]
3400c51a:	f7ff fe83 	bl	3400c224 <LTDC_FillRectRgb888>
}
3400c51e:	b003      	add	sp, #12
3400c520:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (is_layer_argb8888[current_layer])
3400c522:	4f0a      	ldr	r7, [pc, #40]	@ (3400c54c <LTDC_SetPixel+0x48>)
3400c524:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
3400c528:	b136      	cbz	r6, 3400c538 <LTDC_SetPixel+0x34>
  return LTDC_FillRectArgb8888(0, Xpos, Ypos, 1 , 1, Color);
3400c52a:	9301      	str	r3, [sp, #4]
3400c52c:	2301      	movs	r3, #1
3400c52e:	4628      	mov	r0, r5
3400c530:	9300      	str	r3, [sp, #0]
3400c532:	f7ff feb1 	bl	3400c298 <LTDC_FillRectArgb8888>
    return LTDC_SetPixelArgb8888(Instance, Xpos, Ypos, Color);
3400c536:	e7f2      	b.n	3400c51e <LTDC_SetPixel+0x1a>
}
3400c538:	b003      	add	sp, #12
3400c53a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return BSP_LCD_WritePixel(Instance, Xpos, Ypos, Color);
3400c53e:	f001 bd17 	b.w	3400df70 <BSP_LCD_WritePixel>
3400c542:	bf00      	nop
3400c544:	340d2b60 	.word	0x340d2b60
3400c548:	340d2b58 	.word	0x340d2b58
3400c54c:	340d2b50 	.word	0x340d2b50

3400c550 <LTDC_DrawVLine>:
{
3400c550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (is_layer_rgb888[current_layer])
3400c552:	4e10      	ldr	r6, [pc, #64]	@ (3400c594 <LTDC_DrawVLine+0x44>)
{
3400c554:	9d08      	ldr	r5, [sp, #32]
  if (is_layer_rgb888[current_layer])
3400c556:	7837      	ldrb	r7, [r6, #0]
3400c558:	4e0f      	ldr	r6, [pc, #60]	@ (3400c598 <LTDC_DrawVLine+0x48>)
3400c55a:	f856 6027 	ldr.w	r6, [r6, r7, lsl #2]
3400c55e:	b13e      	cbz	r6, 3400c570 <LTDC_DrawVLine+0x20>
  return LTDC_FillRectRgb888(0, Xpos, Ypos, 1 , Length, Color);
3400c560:	e9cd 3500 	strd	r3, r5, [sp]
3400c564:	2000      	movs	r0, #0
3400c566:	2301      	movs	r3, #1
3400c568:	f7ff fe5c 	bl	3400c224 <LTDC_FillRectRgb888>
}
3400c56c:	b003      	add	sp, #12
3400c56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (is_layer_argb8888[current_layer])
3400c570:	f8df c028 	ldr.w	ip, [pc, #40]	@ 3400c59c <LTDC_DrawVLine+0x4c>
3400c574:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
3400c578:	b137      	cbz	r7, 3400c588 <LTDC_DrawVLine+0x38>
  return LTDC_FillRectArgb8888(0, Xpos, Ypos, 1 , Length, Color);
3400c57a:	e9cd 3500 	strd	r3, r5, [sp]
3400c57e:	4630      	mov	r0, r6
3400c580:	2301      	movs	r3, #1
3400c582:	f7ff fe89 	bl	3400c298 <LTDC_FillRectArgb8888>
    return LTDC_DrawVLineArgb8888(Instance, Xpos, Ypos, Length, Color);
3400c586:	e7f1      	b.n	3400c56c <LTDC_DrawVLine+0x1c>
  return BSP_LCD_DrawVLine(Instance, Xpos, Ypos, Length, Color);
3400c588:	9508      	str	r5, [sp, #32]
}
3400c58a:	b003      	add	sp, #12
3400c58c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return BSP_LCD_DrawVLine(Instance, Xpos, Ypos, Length, Color);
3400c590:	f001 be7a 	b.w	3400e288 <BSP_LCD_DrawVLine>
3400c594:	340d2b60 	.word	0x340d2b60
3400c598:	340d2b58 	.word	0x340d2b58
3400c59c:	340d2b50 	.word	0x340d2b50

3400c5a0 <LTDC_DrawHLine>:
{
3400c5a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (is_layer_rgb888[current_layer])
3400c5a2:	4d10      	ldr	r5, [pc, #64]	@ (3400c5e4 <LTDC_DrawHLine+0x44>)
{
3400c5a4:	9c08      	ldr	r4, [sp, #32]
  if (is_layer_rgb888[current_layer])
3400c5a6:	782e      	ldrb	r6, [r5, #0]
3400c5a8:	4d0f      	ldr	r5, [pc, #60]	@ (3400c5e8 <LTDC_DrawHLine+0x48>)
3400c5aa:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
3400c5ae:	b13d      	cbz	r5, 3400c5c0 <LTDC_DrawHLine+0x20>
  return LTDC_FillRectRgb888(0, Xpos, Ypos, Length , 1, Color);
3400c5b0:	2001      	movs	r0, #1
3400c5b2:	9401      	str	r4, [sp, #4]
3400c5b4:	9000      	str	r0, [sp, #0]
3400c5b6:	2000      	movs	r0, #0
3400c5b8:	f7ff fe34 	bl	3400c224 <LTDC_FillRectRgb888>
}
3400c5bc:	b003      	add	sp, #12
3400c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (is_layer_argb8888[current_layer])
3400c5c0:	4f0a      	ldr	r7, [pc, #40]	@ (3400c5ec <LTDC_DrawHLine+0x4c>)
3400c5c2:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
3400c5c6:	b136      	cbz	r6, 3400c5d6 <LTDC_DrawHLine+0x36>
  return LTDC_FillRectArgb8888(0, Xpos, Ypos, Length , 1, Color);
3400c5c8:	2001      	movs	r0, #1
3400c5ca:	9401      	str	r4, [sp, #4]
3400c5cc:	9000      	str	r0, [sp, #0]
3400c5ce:	4628      	mov	r0, r5
3400c5d0:	f7ff fe62 	bl	3400c298 <LTDC_FillRectArgb8888>
    return LTDC_DrawHLineArgb8888(Instance, Xpos, Ypos, Length, Color);
3400c5d4:	e7f2      	b.n	3400c5bc <LTDC_DrawHLine+0x1c>
  return BSP_LCD_DrawHLine(Instance, Xpos, Ypos, Length, Color);
3400c5d6:	9408      	str	r4, [sp, #32]
}
3400c5d8:	b003      	add	sp, #12
3400c5da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return BSP_LCD_DrawHLine(Instance, Xpos, Ypos, Length, Color);
3400c5de:	f001 be31 	b.w	3400e244 <BSP_LCD_DrawHLine>
3400c5e2:	bf00      	nop
3400c5e4:	340d2b60 	.word	0x340d2b60
3400c5e8:	340d2b58 	.word	0x340d2b58
3400c5ec:	340d2b50 	.word	0x340d2b50

3400c5f0 <SCRL_Init>:
  .SetLayer = LTDC_SetLayer,
  .GetFormat = LTDC_GetFormat,
};

int SCRL_Init(SCRL_LayerConfig *layers_config[SCRL_LAYER_NB], SCRL_ScreenConfig *screen_config)
{
3400c5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
3400c5f2:	4605      	mov	r5, r0
3400c5f4:	b087      	sub	sp, #28
  BSP_LCD_LayerConfig_t LayerConfig = {0};
3400c5f6:	2218      	movs	r2, #24
3400c5f8:	2100      	movs	r1, #0
3400c5fa:	4668      	mov	r0, sp
3400c5fc:	f015 f88a 	bl	34021714 <memset>
    if (!layers_config[i])
3400c600:	682a      	ldr	r2, [r5, #0]
3400c602:	2a00      	cmp	r2, #0
3400c604:	d044      	beq.n	3400c690 <SCRL_Init+0xa0>
3400c606:	686b      	ldr	r3, [r5, #4]
3400c608:	2b00      	cmp	r3, #0
3400c60a:	d041      	beq.n	3400c690 <SCRL_Init+0xa0>
    if (!layers_config[i]->address)
3400c60c:	68d1      	ldr	r1, [r2, #12]
3400c60e:	2900      	cmp	r1, #0
3400c610:	d03e      	beq.n	3400c690 <SCRL_Init+0xa0>
3400c612:	68d9      	ldr	r1, [r3, #12]
3400c614:	2900      	cmp	r1, #0
3400c616:	d03b      	beq.n	3400c690 <SCRL_Init+0xa0>
    if (layers_config[i]->format == SCRL_YUV422)
3400c618:	7a12      	ldrb	r2, [r2, #8]
3400c61a:	2a02      	cmp	r2, #2
3400c61c:	d038      	beq.n	3400c690 <SCRL_Init+0xa0>
3400c61e:	7a1b      	ldrb	r3, [r3, #8]
3400c620:	2b02      	cmp	r3, #2
3400c622:	d035      	beq.n	3400c690 <SCRL_Init+0xa0>

  ret = SCRL_validate_parameters(layers_config, screen_config);
  if (ret)
    return ret;

  current_layer = SCRL_LAYER_0;
3400c624:	2400      	movs	r4, #0
3400c626:	4b1c      	ldr	r3, [pc, #112]	@ (3400c698 <SCRL_Init+0xa8>)

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
3400c628:	2101      	movs	r1, #1
3400c62a:	4620      	mov	r0, r4
  current_layer = SCRL_LAYER_0;
3400c62c:	701c      	strb	r4, [r3, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
3400c62e:	f001 ffb5 	bl	3400e59c <BSP_LCD_Init>

  fill_lcd_layer_config_from_scrl_layer_config(layers_config[SCRL_LAYER_0], &LayerConfig);
3400c632:	682e      	ldr	r6, [r5, #0]
3400c634:	4669      	mov	r1, sp
3400c636:	4630      	mov	r0, r6
3400c638:	f7ff ff3a 	bl	3400c4b0 <fill_lcd_layer_config_from_scrl_layer_config>
  is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
3400c63c:	7a33      	ldrb	r3, [r6, #8]
3400c63e:	4f17      	ldr	r7, [pc, #92]	@ (3400c69c <SCRL_Init+0xac>)
3400c640:	1f19      	subs	r1, r3, #4
3400c642:	424a      	negs	r2, r1
  is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
3400c644:	f1a3 0003 	sub.w	r0, r3, #3
  is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
3400c648:	414a      	adcs	r2, r1
  is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
3400c64a:	4e15      	ldr	r6, [pc, #84]	@ (3400c6a0 <SCRL_Init+0xb0>)
3400c64c:	4243      	negs	r3, r0
3400c64e:	4143      	adcs	r3, r0
  is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
3400c650:	603a      	str	r2, [r7, #0]
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_1, &LayerConfig);
3400c652:	4621      	mov	r1, r4
3400c654:	466a      	mov	r2, sp
3400c656:	4620      	mov	r0, r4
  is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
3400c658:	6033      	str	r3, [r6, #0]
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_1, &LayerConfig);
3400c65a:	f001 ffab 	bl	3400e5b4 <BSP_LCD_ConfigLayer>

  fill_lcd_layer_config_from_scrl_layer_config(layers_config[SCRL_LAYER_1], &LayerConfig);
3400c65e:	686d      	ldr	r5, [r5, #4]
3400c660:	4669      	mov	r1, sp
3400c662:	4628      	mov	r0, r5
3400c664:	f7ff ff24 	bl	3400c4b0 <fill_lcd_layer_config_from_scrl_layer_config>
  is_layer_rgb888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_RGB888;
3400c668:	7a2b      	ldrb	r3, [r5, #8]
  is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
3400c66a:	2101      	movs	r1, #1
  is_layer_rgb888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_RGB888;
3400c66c:	1f1d      	subs	r5, r3, #4
3400c66e:	426a      	negs	r2, r5
3400c670:	416a      	adcs	r2, r5
3400c672:	607a      	str	r2, [r7, #4]
  is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
3400c674:	1edf      	subs	r7, r3, #3
3400c676:	427b      	negs	r3, r7
3400c678:	417b      	adcs	r3, r7
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
3400c67a:	466a      	mov	r2, sp
3400c67c:	4620      	mov	r0, r4
  is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
3400c67e:	6073      	str	r3, [r6, #4]
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
3400c680:	f001 ff98 	bl	3400e5b4 <BSP_LCD_ConfigLayer>

  UTIL_LCD_SetFuncDriver(&Dummy_Driver);
3400c684:	4807      	ldr	r0, [pc, #28]	@ (3400c6a4 <SCRL_Init+0xb4>)
3400c686:	f00f fc6b 	bl	3401bf60 <UTIL_LCD_SetFuncDriver>
  return 0;
3400c68a:	4620      	mov	r0, r4

  return 0;
}
3400c68c:	b007      	add	sp, #28
3400c68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return -1;
3400c690:	f04f 30ff 	mov.w	r0, #4294967295
3400c694:	e7fa      	b.n	3400c68c <SCRL_Init+0x9c>
3400c696:	bf00      	nop
3400c698:	340d2b60 	.word	0x340d2b60
3400c69c:	340d2b58 	.word	0x340d2b58
3400c6a0:	340d2b50 	.word	0x340d2b50
3400c6a4:	34037d6c 	.word	0x34037d6c

3400c6a8 <SCRL_SetAddress_NoReload>:

int SCRL_SetAddress_NoReload(void *address, SCRL_Layer layer)
{
3400c6a8:	b508      	push	{r3, lr}
3400c6aa:	460a      	mov	r2, r1
  return HAL_LTDC_SetAddress_NoReload(&hlcd_ltdc, (uint32_t) address, layer);
3400c6ac:	4601      	mov	r1, r0
3400c6ae:	4802      	ldr	r0, [pc, #8]	@ (3400c6b8 <SCRL_SetAddress_NoReload+0x10>)
3400c6b0:	f007 fda0 	bl	340141f4 <HAL_LTDC_SetAddress_NoReload>
}
3400c6b4:	bd08      	pop	{r3, pc}
3400c6b6:	bf00      	nop
3400c6b8:	340dada0 	.word	0x340dada0

3400c6bc <SCRL_ReloadLayer>:

int SCRL_ReloadLayer(SCRL_Layer layer)
{
3400c6bc:	b508      	push	{r3, lr}
3400c6be:	4602      	mov	r2, r0
  return HAL_LTDC_ReloadLayer(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING, layer);
3400c6c0:	2102      	movs	r1, #2
3400c6c2:	4802      	ldr	r0, [pc, #8]	@ (3400c6cc <SCRL_ReloadLayer+0x10>)
3400c6c4:	f007 fd6e 	bl	340141a4 <HAL_LTDC_ReloadLayer>
}
3400c6c8:	bd08      	pop	{r3, pc}
3400c6ca:	bf00      	nop
3400c6cc:	340dada0 	.word	0x340dada0

3400c6d0 <SRCL_Update>:

int SRCL_Update(void)
{
  /* Nothing to do */
  return 0;
}
3400c6d0:	2000      	movs	r0, #0
3400c6d2:	4770      	bx	lr

3400c6d4 <MX_LTDC_ConfigLayer>:

HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
3400c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert(LayerIndex < SCRL_LAYER_NB);
3400c6d8:	2901      	cmp	r1, #1
{
3400c6da:	b099      	sub	sp, #100	@ 0x64
3400c6dc:	460c      	mov	r4, r1
3400c6de:	4613      	mov	r3, r2
3400c6e0:	9000      	str	r0, [sp, #0]
  assert(LayerIndex < SCRL_LAYER_NB);
3400c6e2:	d906      	bls.n	3400c6f2 <MX_LTDC_ConfigLayer+0x1e>
3400c6e4:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
3400c6e8:	4b34      	ldr	r3, [pc, #208]	@ (3400c7bc <MX_LTDC_ConfigLayer+0xe8>)
3400c6ea:	4a35      	ldr	r2, [pc, #212]	@ (3400c7c0 <MX_LTDC_ConfigLayer+0xec>)
3400c6ec:	4835      	ldr	r0, [pc, #212]	@ (3400c7c4 <MX_LTDC_ConfigLayer+0xf0>)
3400c6ee:	f013 f98b 	bl	3401fa08 <__assert_func>
  pLayerCfg.Layer.WindowX1 = Config->X1;
3400c6f2:	e9d2 9800 	ldrd	r9, r8, [r2]
  pLayerCfg.Layer.WindowY1 = Config->Y1;
3400c6f6:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
  pLayerCfg.ARGBAddress = Config->Address;
3400c6fa:	f8d2 b014 	ldr.w	fp, [r2, #20]

  if (is_layer_rgb888[LayerIndex])
3400c6fe:	4a32      	ldr	r2, [pc, #200]	@ (3400c7c8 <MX_LTDC_ConfigLayer+0xf4>)
  pLayerCfg.Layer.ImageWidth = (Config->X1 - Config->X0);
3400c700:	eba8 0a09 	sub.w	sl, r8, r9
  if (is_layer_rgb888[LayerIndex])
3400c704:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
3400c708:	1bf5      	subs	r5, r6, r7
  if (is_layer_rgb888[LayerIndex])
3400c70a:	b318      	cbz	r0, 3400c754 <MX_LTDC_ConfigLayer+0x80>
  LTDC_LayerFlexARGBTypeDef pLayerCfg ={0};
3400c70c:	2230      	movs	r2, #48	@ 0x30
3400c70e:	2100      	movs	r1, #0
3400c710:	a808      	add	r0, sp, #32
3400c712:	f014 ffff 	bl	34021714 <memset>
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400c716:	23ff      	movs	r3, #255	@ 0xff
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c718:	f44f 6cc0 	mov.w	ip, #1536	@ 0x600
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400c71c:	9307      	str	r3, [sp, #28]
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c71e:	2307      	movs	r3, #7
3400c720:	e9cd c309 	strd	ip, r3, [sp, #36]	@ 0x24
  pLayerCfg.FlexARGB.PixelSize = 3;/*LTDC_ARGB_PIXEL_SIZE_3_BYTES;*/
3400c724:	2303      	movs	r3, #3
  pLayerCfg.Layer.WindowX1 = Config->X1;
3400c726:	e9cd 9803 	strd	r9, r8, [sp, #12]
  pLayerCfg.Layer.WindowY1 = Config->Y1;
3400c72a:	e9cd 7605 	strd	r7, r6, [sp, #20]
  pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
3400c72e:	e9cd a50b 	strd	sl, r5, [sp, #44]	@ 0x2c
  pLayerCfg.FlexARGB.BluePos = 16;
3400c732:	2210      	movs	r2, #16
  pLayerCfg.FlexARGB.PixelSize = 4;/*LTDC_ARGB_PIXEL_SIZE_4_BYTES;*/
3400c734:	930e      	str	r3, [sp, #56]	@ 0x38
  pLayerCfg.FlexARGB.BluePos = 16;
3400c736:	2308      	movs	r3, #8
  return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
3400c738:	9800      	ldr	r0, [sp, #0]
  pLayerCfg.FlexARGB.BluePos = 16;
3400c73a:	e9cd 3211 	strd	r3, r2, [sp, #68]	@ 0x44
  return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
3400c73e:	a903      	add	r1, sp, #12
3400c740:	4622      	mov	r2, r4
  pLayerCfg.FlexARGB.GreenWidth = 8;
3400c742:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  pLayerCfg.ARGBAddress = Config->Address;
3400c746:	e9cd 3b16 	strd	r3, fp, [sp, #88]	@ 0x58
  return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
3400c74a:	f007 fd87 	bl	3401425c <HAL_LTDC_ConfigLayerFlexARGB>
    return SCRL_ConfigLayer_Layer_rgb888(hltdc, LayerIndex, Config);
  else if (is_layer_argb8888[LayerIndex])
    return SCRL_ConfigLayer_Layer_argb888(hltdc, LayerIndex, Config);
  else
    return SCRL_ConfigLayer_Layer_default(hltdc, LayerIndex, Config);
}
3400c74e:	b019      	add	sp, #100	@ 0x64
3400c750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (is_layer_argb8888[LayerIndex])
3400c754:	4a1d      	ldr	r2, [pc, #116]	@ (3400c7cc <MX_LTDC_ConfigLayer+0xf8>)
3400c756:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
3400c75a:	b199      	cbz	r1, 3400c784 <MX_LTDC_ConfigLayer+0xb0>
  LTDC_LayerFlexARGBTypeDef pLayerCfg ={0};
3400c75c:	4601      	mov	r1, r0
3400c75e:	2230      	movs	r2, #48	@ 0x30
3400c760:	a808      	add	r0, sp, #32
3400c762:	f014 ffd7 	bl	34021714 <memset>
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400c766:	23ff      	movs	r3, #255	@ 0xff
  pLayerCfg.Layer.WindowY1 = Config->Y1;
3400c768:	e9cd 7605 	strd	r7, r6, [sp, #20]
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400c76c:	9307      	str	r3, [sp, #28]
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c76e:	f44f 66c0 	mov.w	r6, #1536	@ 0x600
3400c772:	2307      	movs	r3, #7
  pLayerCfg.Layer.WindowX1 = Config->X1;
3400c774:	e9cd 9803 	strd	r9, r8, [sp, #12]
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c778:	e9cd 6309 	strd	r6, r3, [sp, #36]	@ 0x24
  pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
3400c77c:	e9cd a50b 	strd	sl, r5, [sp, #44]	@ 0x2c
  pLayerCfg.FlexARGB.PixelSize = 4;/*LTDC_ARGB_PIXEL_SIZE_4_BYTES;*/
3400c780:	2304      	movs	r3, #4
3400c782:	e7d6      	b.n	3400c732 <MX_LTDC_ConfigLayer+0x5e>
  LTDC_LayerCfgTypeDef pLayerCfg ={0};
3400c784:	221c      	movs	r2, #28
3400c786:	a809      	add	r0, sp, #36	@ 0x24
3400c788:	9301      	str	r3, [sp, #4]
3400c78a:	f014 ffc3 	bl	34021714 <memset>
  pLayerCfg.PixelFormat = Config->PixelFormat;
3400c78e:	9b01      	ldr	r3, [sp, #4]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c790:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
  pLayerCfg.PixelFormat = Config->PixelFormat;
3400c794:	691b      	ldr	r3, [r3, #16]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400c796:	4622      	mov	r2, r4
  pLayerCfg.PixelFormat = Config->PixelFormat;
3400c798:	9307      	str	r3, [sp, #28]
  pLayerCfg.Alpha = LTDC_LxCACR_CONSTA;
3400c79a:	23ff      	movs	r3, #255	@ 0xff
3400c79c:	9308      	str	r3, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c79e:	2307      	movs	r3, #7
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400c7a0:	9800      	ldr	r0, [sp, #0]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c7a2:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400c7a6:	a903      	add	r1, sp, #12
  pLayerCfg.WindowX1 = Config->X1;
3400c7a8:	e9cd 9803 	strd	r9, r8, [sp, #12]
  pLayerCfg.WindowY1 = Config->Y1;
3400c7ac:	e9cd 7605 	strd	r7, r6, [sp, #20]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
3400c7b0:	e9cd ba0c 	strd	fp, sl, [sp, #48]	@ 0x30
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
3400c7b4:	950e      	str	r5, [sp, #56]	@ 0x38
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400c7b6:	f007 fc4f 	bl	34014058 <HAL_LTDC_ConfigLayer>
    return SCRL_ConfigLayer_Layer_default(hltdc, LayerIndex, Config);
3400c7ba:	e7c8      	b.n	3400c74e <MX_LTDC_ConfigLayer+0x7a>
3400c7bc:	3402cb27 	.word	0x3402cb27
3400c7c0:	34037d39 	.word	0x34037d39
3400c7c4:	3402cadd 	.word	0x3402cadd
3400c7c8:	340d2b58 	.word	0x340d2b58
3400c7cc:	340d2b50 	.word	0x340d2b50

3400c7d0 <_ec_blob_cache_start_func_68>:
   *       cache (e.g. using a DMA) and should be called BEFORE the buffer gets filled
   */
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400c7d0:	4901      	ldr	r1, [pc, #4]	@ (3400c7d8 <_ec_blob_cache_start_func_68+0x8>)
3400c7d2:	4802      	ldr	r0, [pc, #8]	@ (3400c7dc <_ec_blob_cache_start_func_68+0xc>)
3400c7d4:	f7f5 bc6c 	b.w	340020b0 <mcu_cache_invalidate_range>
3400c7d8:	34200240 	.word	0x34200240
3400c7dc:	34200220 	.word	0x34200220

3400c7e0 <_ec_blob_cache_start_func_65>:


// Epoch Controller Blob (name='_ec_blob_hand_landmark_65') micro instructions needed

// Epoch Controller Blob (name='_ec_blob_hand_landmark_65') start function
static void _ec_blob_cache_start_func_65(const void *epoch_block) {
3400c7e0:	b508      	push	{r3, lr}
3400c7e2:	4905      	ldr	r1, [pc, #20]	@ (3400c7f8 <_ec_blob_cache_start_func_65+0x18>)
3400c7e4:	4805      	ldr	r0, [pc, #20]	@ (3400c7fc <_ec_blob_cache_start_func_65+0x1c>)
3400c7e6:	f7f5 fc63 	bl	340020b0 <mcu_cache_invalidate_range>
  /*     memory pool: 8 */
  /*     start: ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 4736))) */
  /*     end:   ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 4768))) */
  LL_ATON_Cache_MCU_Invalidate_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 4736))) /* Equivalent hex address = 0x34201280UL */, 32);

};
3400c7ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
3400c7ee:	4904      	ldr	r1, [pc, #16]	@ (3400c800 <_ec_blob_cache_start_func_65+0x20>)
3400c7f0:	4804      	ldr	r0, [pc, #16]	@ (3400c804 <_ec_blob_cache_start_func_65+0x24>)
3400c7f2:	f7f5 bc5d 	b.w	340020b0 <mcu_cache_invalidate_range>
3400c7f6:	bf00      	nop
3400c7f8:	34200240 	.word	0x34200240
3400c7fc:	34200200 	.word	0x34200200
3400c800:	342012a0 	.word	0x342012a0
3400c804:	34201280 	.word	0x34201280

3400c808 <_ec_blob_cache_start_func_1>:
3400c808:	4901      	ldr	r1, [pc, #4]	@ (3400c810 <_ec_blob_cache_start_func_1+0x8>)
3400c80a:	4802      	ldr	r0, [pc, #8]	@ (3400c814 <_ec_blob_cache_start_func_1+0xc>)
3400c80c:	f7f5 bc50 	b.w	340020b0 <mcu_cache_invalidate_range>
3400c810:	342012c0 	.word	0x342012c0
3400c814:	34201280 	.word	0x34201280

3400c818 <LL_ATON_End_EpochBlock_69>:


/* scheduling epoch=69   nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_69(const void *epoch_block)
{
3400c818:	b530      	push	{r4, r5, lr}
3400c81a:	4c1e      	ldr	r4, [pc, #120]	@ (3400c894 <LL_ATON_End_EpochBlock_69+0x7c>)
3400c81c:	4d1e      	ldr	r5, [pc, #120]	@ (3400c898 <LL_ATON_End_EpochBlock_69+0x80>)
3400c81e:	b0af      	sub	sp, #188	@ 0xbc
3400c820:	4621      	mov	r1, r4
3400c822:	4628      	mov	r0, r5
3400c824:	f7f5 fc44 	bl	340020b0 <mcu_cache_invalidate_range>
  LL_ATON_Cache_MCU_Invalidate_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 512))) /* Equivalent hex address = 0x34200200UL */, 32);


/* Unit= 27 [PROCESSOR 0] */
/* kind=DequantizeLinear node=Dequantize_223 */
  Dequantizelinear_sw_info dequantizelinear4_sw_info = {
3400c828:	2100      	movs	r1, #0
3400c82a:	22b4      	movs	r2, #180	@ 0xb4
3400c82c:	a801      	add	r0, sp, #4
3400c82e:	f014 ff71 	bl	34021714 <memset>
3400c832:	232a      	movs	r3, #42	@ 0x2a
3400c834:	2204      	movs	r2, #4
3400c836:	f88d 3004 	strb.w	r3, [sp, #4]
3400c83a:	2301      	movs	r3, #1
3400c83c:	e9cd 2212 	strd	r2, r2, [sp, #72]	@ 0x48
3400c840:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
3400c844:	4a15      	ldr	r2, [pc, #84]	@ (3400c89c <LL_ATON_End_EpochBlock_69+0x84>)
    .general.type = LL_SW_DEQUANTIZELINEAR,
  };

  /* Low Level SW Layer function invocation. This will exploit EmbedNets libs) */
  /* Node Dequantize_223 mapped on EmbedNets (INTEGER) as DequantizeLinear | Category: Format-Converter */
  ll_sw_forward_dequantizelinear(&dequantizelinear4_sw_info);
3400c846:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear4_sw_info = {
3400c848:	9216      	str	r2, [sp, #88]	@ 0x58
3400c84a:	4a15      	ldr	r2, [pc, #84]	@ (3400c8a0 <LL_ATON_End_EpochBlock_69+0x88>)
3400c84c:	e9cd 3302 	strd	r3, r3, [sp, #8]
3400c850:	9221      	str	r2, [sp, #132]	@ 0x84
3400c852:	3240      	adds	r2, #64	@ 0x40
3400c854:	e9cd 3304 	strd	r3, r3, [sp, #16]
3400c858:	e9cd 3306 	strd	r3, r3, [sp, #24]
3400c85c:	e9cd 3308 	strd	r3, r3, [sp, #32]
3400c860:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
3400c864:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
3400c868:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
3400c86c:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400c870:	9311      	str	r3, [sp, #68]	@ 0x44
3400c872:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400c876:	931c      	str	r3, [sp, #112]	@ 0x70
3400c878:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400c87c:	9327      	str	r3, [sp, #156]	@ 0x9c
3400c87e:	922c      	str	r2, [sp, #176]	@ 0xb0
3400c880:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
  ll_sw_forward_dequantizelinear(&dequantizelinear4_sw_info);
3400c884:	f7f8 f920 	bl	34004ac8 <ll_sw_forward_dequantizelinear>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400c888:	4621      	mov	r1, r4
3400c88a:	4628      	mov	r0, r5
3400c88c:	f7f5 fc3a 	bl	34002104 <mcu_cache_clean_range>
  /*     memory pool: 8 */
  /*     start: ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 512))) */
  /*     end:   ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 544))) */
  LL_ATON_Cache_MCU_Clean_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 512))) /* Equivalent hex address = 0x34200200UL */, 32);

}
3400c890:	b02f      	add	sp, #188	@ 0xbc
3400c892:	bd30      	pop	{r4, r5, pc}
3400c894:	34200220 	.word	0x34200220
3400c898:	34200200 	.word	0x34200200
3400c89c:	34200210 	.word	0x34200210
3400c8a0:	708ab990 	.word	0x708ab990

3400c8a4 <LL_ATON_End_EpochBlock_67>:
{
3400c8a4:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400c8a6:	4c1e      	ldr	r4, [pc, #120]	@ (3400c920 <LL_ATON_End_EpochBlock_67+0x7c>)
3400c8a8:	4d1e      	ldr	r5, [pc, #120]	@ (3400c924 <LL_ATON_End_EpochBlock_67+0x80>)
3400c8aa:	b0af      	sub	sp, #188	@ 0xbc
3400c8ac:	4629      	mov	r1, r5
3400c8ae:	4620      	mov	r0, r4
3400c8b0:	f7f5 fbfe 	bl	340020b0 <mcu_cache_invalidate_range>
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400c8b4:	2100      	movs	r1, #0
3400c8b6:	22b4      	movs	r2, #180	@ 0xb4
3400c8b8:	a801      	add	r0, sp, #4
3400c8ba:	f014 ff2b 	bl	34021714 <memset>
3400c8be:	232a      	movs	r3, #42	@ 0x2a
3400c8c0:	4a19      	ldr	r2, [pc, #100]	@ (3400c928 <LL_ATON_End_EpochBlock_67+0x84>)
3400c8c2:	f88d 3004 	strb.w	r3, [sp, #4]
3400c8c6:	920b      	str	r2, [sp, #44]	@ 0x2c
3400c8c8:	2204      	movs	r2, #4
3400c8ca:	2301      	movs	r3, #1
3400c8cc:	e9cd 2212 	strd	r2, r2, [sp, #72]	@ 0x48
3400c8d0:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
3400c8d4:	4a15      	ldr	r2, [pc, #84]	@ (3400c92c <LL_ATON_End_EpochBlock_67+0x88>)
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400c8d6:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400c8d8:	9221      	str	r2, [sp, #132]	@ 0x84
3400c8da:	3240      	adds	r2, #64	@ 0x40
3400c8dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
3400c8e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
3400c8e4:	e9cd 3306 	strd	r3, r3, [sp, #24]
3400c8e8:	e9cd 3308 	strd	r3, r3, [sp, #32]
3400c8ec:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
3400c8f0:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
3400c8f4:	930a      	str	r3, [sp, #40]	@ 0x28
3400c8f6:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400c8fa:	9311      	str	r3, [sp, #68]	@ 0x44
3400c8fc:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400c900:	931c      	str	r3, [sp, #112]	@ 0x70
3400c902:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400c906:	9327      	str	r3, [sp, #156]	@ 0x9c
3400c908:	922c      	str	r2, [sp, #176]	@ 0xb0
3400c90a:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
3400c90e:	9416      	str	r4, [sp, #88]	@ 0x58
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400c910:	f7f8 f8da 	bl	34004ac8 <ll_sw_forward_dequantizelinear>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400c914:	4629      	mov	r1, r5
3400c916:	4620      	mov	r0, r4
3400c918:	f7f5 fbf4 	bl	34002104 <mcu_cache_clean_range>
}
3400c91c:	b02f      	add	sp, #188	@ 0xbc
3400c91e:	bd30      	pop	{r4, r5, pc}
3400c920:	34200200 	.word	0x34200200
3400c924:	34200220 	.word	0x34200220
3400c928:	34201280 	.word	0x34201280
3400c92c:	708ab9a0 	.word	0x708ab9a0

3400c930 <LL_ATON_End_EpochBlock_66>:
{
3400c930:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400c932:	4c1f      	ldr	r4, [pc, #124]	@ (3400c9b0 <LL_ATON_End_EpochBlock_66+0x80>)
3400c934:	b0af      	sub	sp, #188	@ 0xbc
3400c936:	4621      	mov	r1, r4
3400c938:	481e      	ldr	r0, [pc, #120]	@ (3400c9b4 <LL_ATON_End_EpochBlock_66+0x84>)
3400c93a:	f7f5 fbb9 	bl	340020b0 <mcu_cache_invalidate_range>
  Dequantizelinear_sw_info dequantizelinear2_sw_info = {
3400c93e:	22b4      	movs	r2, #180	@ 0xb4
3400c940:	2100      	movs	r1, #0
3400c942:	a801      	add	r0, sp, #4
3400c944:	f014 fee6 	bl	34021714 <memset>
3400c948:	232a      	movs	r3, #42	@ 0x2a
3400c94a:	223f      	movs	r2, #63	@ 0x3f
3400c94c:	f88d 3004 	strb.w	r3, [sp, #4]
3400c950:	2301      	movs	r3, #1
3400c952:	2104      	movs	r1, #4
3400c954:	e9cd 2304 	strd	r2, r3, [sp, #16]
3400c958:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
3400c95c:	e9cd 2206 	strd	r2, r2, [sp, #24]
3400c960:	e9cd 240a 	strd	r2, r4, [sp, #40]	@ 0x28
3400c964:	9211      	str	r2, [sp, #68]	@ 0x44
3400c966:	22fc      	movs	r2, #252	@ 0xfc
3400c968:	e9cd 2112 	strd	r2, r1, [sp, #72]	@ 0x48
3400c96c:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
3400c970:	4a11      	ldr	r2, [pc, #68]	@ (3400c9b8 <LL_ATON_End_EpochBlock_66+0x88>)
3400c972:	4d12      	ldr	r5, [pc, #72]	@ (3400c9bc <LL_ATON_End_EpochBlock_66+0x8c>)
  ll_sw_forward_dequantizelinear(&dequantizelinear2_sw_info);
3400c974:	eb0d 0001 	add.w	r0, sp, r1
  Dequantizelinear_sw_info dequantizelinear2_sw_info = {
3400c978:	9221      	str	r2, [sp, #132]	@ 0x84
3400c97a:	3240      	adds	r2, #64	@ 0x40
3400c97c:	e9cd 3302 	strd	r3, r3, [sp, #8]
3400c980:	e9cd 3308 	strd	r3, r3, [sp, #32]
3400c984:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
3400c988:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400c98c:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400c990:	931c      	str	r3, [sp, #112]	@ 0x70
3400c992:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400c996:	9327      	str	r3, [sp, #156]	@ 0x9c
3400c998:	922c      	str	r2, [sp, #176]	@ 0xb0
3400c99a:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
3400c99e:	9516      	str	r5, [sp, #88]	@ 0x58
  ll_sw_forward_dequantizelinear(&dequantizelinear2_sw_info);
3400c9a0:	f7f8 f892 	bl	34004ac8 <ll_sw_forward_dequantizelinear>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400c9a4:	4621      	mov	r1, r4
3400c9a6:	4628      	mov	r0, r5
3400c9a8:	f7f5 fbac 	bl	34002104 <mcu_cache_clean_range>
}
3400c9ac:	b02f      	add	sp, #188	@ 0xbc
3400c9ae:	bd30      	pop	{r4, r5, pc}
3400c9b0:	34200200 	.word	0x34200200
3400c9b4:	342001e0 	.word	0x342001e0
3400c9b8:	708ab980 	.word	0x708ab980
3400c9bc:	34200100 	.word	0x34200100

3400c9c0 <LL_ATON_End_EpochBlock_64>:
{
3400c9c0:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400c9c2:	4d20      	ldr	r5, [pc, #128]	@ (3400ca44 <LL_ATON_End_EpochBlock_64+0x84>)
3400c9c4:	b0af      	sub	sp, #188	@ 0xbc
3400c9c6:	4629      	mov	r1, r5
3400c9c8:	481f      	ldr	r0, [pc, #124]	@ (3400ca48 <LL_ATON_End_EpochBlock_64+0x88>)
3400c9ca:	f7f5 fb71 	bl	340020b0 <mcu_cache_invalidate_range>
  Dequantizelinear_sw_info dequantizelinear1_sw_info = {
3400c9ce:	22b4      	movs	r2, #180	@ 0xb4
3400c9d0:	2100      	movs	r1, #0
3400c9d2:	a801      	add	r0, sp, #4
3400c9d4:	f014 fe9e 	bl	34021714 <memset>
3400c9d8:	232a      	movs	r3, #42	@ 0x2a
3400c9da:	223f      	movs	r2, #63	@ 0x3f
3400c9dc:	f88d 3004 	strb.w	r3, [sp, #4]
3400c9e0:	2301      	movs	r3, #1
3400c9e2:	491a      	ldr	r1, [pc, #104]	@ (3400ca4c <LL_ATON_End_EpochBlock_64+0x8c>)
3400c9e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
3400c9e8:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
3400c9ec:	e9cd 2206 	strd	r2, r2, [sp, #24]
3400c9f0:	920a      	str	r2, [sp, #40]	@ 0x28
3400c9f2:	910b      	str	r1, [sp, #44]	@ 0x2c
3400c9f4:	9211      	str	r2, [sp, #68]	@ 0x44
3400c9f6:	2104      	movs	r1, #4
3400c9f8:	22fc      	movs	r2, #252	@ 0xfc
3400c9fa:	e9cd 2112 	strd	r2, r1, [sp, #72]	@ 0x48
3400c9fe:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
3400ca02:	4a13      	ldr	r2, [pc, #76]	@ (3400ca50 <LL_ATON_End_EpochBlock_64+0x90>)
3400ca04:	4c13      	ldr	r4, [pc, #76]	@ (3400ca54 <LL_ATON_End_EpochBlock_64+0x94>)
  ll_sw_forward_dequantizelinear(&dequantizelinear1_sw_info);
3400ca06:	eb0d 0001 	add.w	r0, sp, r1
  Dequantizelinear_sw_info dequantizelinear1_sw_info = {
3400ca0a:	9221      	str	r2, [sp, #132]	@ 0x84
3400ca0c:	3240      	adds	r2, #64	@ 0x40
3400ca0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
3400ca12:	e9cd 3308 	strd	r3, r3, [sp, #32]
3400ca16:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
3400ca1a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400ca1e:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400ca22:	931c      	str	r3, [sp, #112]	@ 0x70
3400ca24:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400ca28:	9327      	str	r3, [sp, #156]	@ 0x9c
3400ca2a:	922c      	str	r2, [sp, #176]	@ 0xb0
3400ca2c:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
3400ca30:	9416      	str	r4, [sp, #88]	@ 0x58
  ll_sw_forward_dequantizelinear(&dequantizelinear1_sw_info);
3400ca32:	f7f8 f849 	bl	34004ac8 <ll_sw_forward_dequantizelinear>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400ca36:	4629      	mov	r1, r5
3400ca38:	4620      	mov	r0, r4
3400ca3a:	f7f5 fb63 	bl	34002104 <mcu_cache_clean_range>
}
3400ca3e:	b02f      	add	sp, #188	@ 0xbc
3400ca40:	bd30      	pop	{r4, r5, pc}
3400ca42:	bf00      	nop
3400ca44:	34200100 	.word	0x34200100
3400ca48:	342000e0 	.word	0x342000e0
3400ca4c:	34201280 	.word	0x34201280
3400ca50:	708ab970 	.word	0x708ab970
3400ca54:	34200000 	.word	0x34200000

3400ca58 <LL_ATON_Set_User_Input_Buffer_hand_landmark>:
}
3400ca58:	2003      	movs	r0, #3
3400ca5a:	4770      	bx	lr

3400ca5c <LL_ATON_Get_User_Input_Buffer_hand_landmark>:
}
3400ca5c:	2000      	movs	r0, #0
3400ca5e:	4770      	bx	lr

3400ca60 <LL_ATON_Set_User_Output_Buffer_hand_landmark>:
LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_hand_landmark(uint32_t num, void* buffer, uint32_t size)
3400ca60:	2003      	movs	r0, #3
3400ca62:	4770      	bx	lr

3400ca64 <LL_ATON_Get_User_Output_Buffer_hand_landmark>:
void *LL_ATON_Get_User_Output_Buffer_hand_landmark(uint32_t num)
3400ca64:	2000      	movs	r0, #0
3400ca66:	4770      	bx	lr

3400ca68 <LL_ATON_EC_Network_Init_hand_landmark>:

// this function MUST be called ONLY ONCE once for initializing the network
bool LL_ATON_EC_Network_Init_hand_landmark(void)
{
  return true;
}
3400ca68:	2001      	movs	r0, #1
3400ca6a:	4770      	bx	lr

3400ca6c <LL_ATON_EC_Inference_Init_hand_landmark>:

// this function should be called before each inference
bool LL_ATON_EC_Inference_Init_hand_landmark(void)
3400ca6c:	2001      	movs	r0, #1
3400ca6e:	4770      	bx	lr

3400ca70 <LL_ATON_EpochBlockItems_hand_landmark>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
3400ca70:	4800      	ldr	r0, [pc, #0]	@ (3400ca74 <LL_ATON_EpochBlockItems_hand_landmark+0x4>)
3400ca72:	4770      	bx	lr
3400ca74:	340399e4 	.word	0x340399e4

3400ca78 <LL_ATON_Input_Buffers_Info_hand_landmark>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400ca78:	4800      	ldr	r0, [pc, #0]	@ (3400ca7c <LL_ATON_Input_Buffers_Info_hand_landmark+0x4>)
3400ca7a:	4770      	bx	lr
3400ca7c:	34039974 	.word	0x34039974

3400ca80 <LL_ATON_Output_Buffers_Info_hand_landmark>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400ca80:	4800      	ldr	r0, [pc, #0]	@ (3400ca84 <LL_ATON_Output_Buffers_Info_hand_landmark+0x4>)
3400ca82:	4770      	bx	lr
3400ca84:	34039834 	.word	0x34039834

3400ca88 <LL_ATON_Internal_Buffers_Info_hand_landmark>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400ca88:	4800      	ldr	r0, [pc, #0]	@ (3400ca8c <LL_ATON_Internal_Buffers_Info_hand_landmark+0x4>)
3400ca8a:	4770      	bx	lr
3400ca8c:	340383ac 	.word	0x340383ac

3400ca90 <_ec_blob_cache_start_func_154>:
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400ca90:	4901      	ldr	r1, [pc, #4]	@ (3400ca98 <_ec_blob_cache_start_func_154+0x8>)
3400ca92:	4802      	ldr	r0, [pc, #8]	@ (3400ca9c <_ec_blob_cache_start_func_154+0xc>)
3400ca94:	f7f5 bb0c 	b.w	340020b0 <mcu_cache_invalidate_range>
3400ca98:	34246e00 	.word	0x34246e00
3400ca9c:	34223700 	.word	0x34223700

3400caa0 <_ec_blob_cache_start_func_135>:


// Epoch Controller Blob (name='_ec_blob_palm_detector_135') micro instructions needed

// Epoch Controller Blob (name='_ec_blob_palm_detector_135') start function
static void _ec_blob_cache_start_func_135(const void *epoch_block) {
3400caa0:	b508      	push	{r3, lr}
3400caa2:	4905      	ldr	r1, [pc, #20]	@ (3400cab8 <_ec_blob_cache_start_func_135+0x18>)
3400caa4:	4805      	ldr	r0, [pc, #20]	@ (3400cabc <_ec_blob_cache_start_func_135+0x1c>)
3400caa6:	f7f5 fb03 	bl	340020b0 <mcu_cache_invalidate_range>
  /*     memory pool: 8 */
  /*     start: ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 550080))) */
  /*     end:   ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 565632))) */
  LL_ATON_Cache_MCU_Invalidate_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 550080))) /* Equivalent hex address = 0x342864c0UL */, 15552);

};
3400caaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
3400caae:	4904      	ldr	r1, [pc, #16]	@ (3400cac0 <_ec_blob_cache_start_func_135+0x20>)
3400cab0:	4804      	ldr	r0, [pc, #16]	@ (3400cac4 <_ec_blob_cache_start_func_135+0x24>)
3400cab2:	f7f5 bafd 	b.w	340020b0 <mcu_cache_invalidate_range>
3400cab6:	bf00      	nop
3400cab8:	3420fae0 	.word	0x3420fae0
3400cabc:	3420a200 	.word	0x3420a200
3400cac0:	3428a180 	.word	0x3428a180
3400cac4:	342864c0 	.word	0x342864c0

3400cac8 <_ec_blob_cache_start_func_71>:
3400cac8:	4901      	ldr	r1, [pc, #4]	@ (3400cad0 <_ec_blob_cache_start_func_71+0x8>)
3400caca:	4802      	ldr	r0, [pc, #8]	@ (3400cad4 <_ec_blob_cache_start_func_71+0xc>)
3400cacc:	f7f5 baf0 	b.w	340020b0 <mcu_cache_invalidate_range>
3400cad0:	34233c00 	.word	0x34233c00
3400cad4:	34231800 	.word	0x34231800

3400cad8 <_ec_blob_cache_start_func_50>:
3400cad8:	4901      	ldr	r1, [pc, #4]	@ (3400cae0 <_ec_blob_cache_start_func_50+0x8>)
3400cada:	4802      	ldr	r0, [pc, #8]	@ (3400cae4 <_ec_blob_cache_start_func_50+0xc>)
3400cadc:	f7f5 bae8 	b.w	340020b0 <mcu_cache_invalidate_range>
3400cae0:	3421b000 	.word	0x3421b000
3400cae4:	34212000 	.word	0x34212000

3400cae8 <_ec_blob_cache_start_func_120>:
static void _ec_blob_cache_start_func_120(const void *epoch_block) {
3400cae8:	f7ff bff6 	b.w	3400cad8 <_ec_blob_cache_start_func_50>

3400caec <_ec_blob_cache_start_func_29>:
3400caec:	4901      	ldr	r1, [pc, #4]	@ (3400caf4 <_ec_blob_cache_start_func_29+0x8>)
3400caee:	4802      	ldr	r0, [pc, #8]	@ (3400caf8 <_ec_blob_cache_start_func_29+0xc>)
3400caf0:	f7f5 bade 	b.w	340020b0 <mcu_cache_invalidate_range>
3400caf4:	34212000 	.word	0x34212000
3400caf8:	34200000 	.word	0x34200000

3400cafc <_ec_blob_cache_start_func_26>:
3400cafc:	4901      	ldr	r1, [pc, #4]	@ (3400cb04 <_ec_blob_cache_start_func_26+0x8>)
3400cafe:	4802      	ldr	r0, [pc, #8]	@ (3400cb08 <_ec_blob_cache_start_func_26+0xc>)
3400cb00:	f7f5 bad6 	b.w	340020b0 <mcu_cache_invalidate_range>
3400cb04:	34224000 	.word	0x34224000
3400cb08:	34200000 	.word	0x34200000

3400cb0c <_ec_blob_cache_start_func_1>:
3400cb0c:	4901      	ldr	r1, [pc, #4]	@ (3400cb14 <_ec_blob_cache_start_func_1+0x8>)
3400cb0e:	4802      	ldr	r0, [pc, #8]	@ (3400cb18 <_ec_blob_cache_start_func_1+0xc>)
3400cb10:	f7f5 bace 	b.w	340020b0 <mcu_cache_invalidate_range>
3400cb14:	3425a000 	.word	0x3425a000
3400cb18:	34248000 	.word	0x34248000

3400cb1c <LL_ATON_End_EpochBlock_153>:


/* scheduling epoch=153  nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_153(const void *epoch_block)
{
3400cb1c:	b530      	push	{r4, r5, lr}
3400cb1e:	b0af      	sub	sp, #188	@ 0xbc
  LL_ATON_LIB_UNUSED(epoch_block);


/* Unit= 27 [PROCESSOR 0] */
/* kind=DequantizeLinear node=Dequantize_340 */
  Dequantizelinear_sw_info dequantizelinear4_sw_info = {
3400cb20:	22b4      	movs	r2, #180	@ 0xb4
3400cb22:	2100      	movs	r1, #0
3400cb24:	a801      	add	r0, sp, #4
3400cb26:	f014 fdf5 	bl	34021714 <memset>
3400cb2a:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
3400cb2e:	f648 52c0 	movw	r2, #36288	@ 0x8dc0
3400cb32:	2112      	movs	r1, #18
3400cb34:	232a      	movs	r3, #42	@ 0x2a
3400cb36:	e9cd 1002 	strd	r1, r0, [sp, #8]
3400cb3a:	e9cd 2006 	strd	r2, r0, [sp, #24]
3400cb3e:	e9cd 100d 	strd	r1, r0, [sp, #52]	@ 0x34
3400cb42:	920a      	str	r2, [sp, #40]	@ 0x28
3400cb44:	f44f 51fc 	mov.w	r1, #8064	@ 0x1f80
3400cb48:	9211      	str	r2, [sp, #68]	@ 0x44
3400cb4a:	2204      	movs	r2, #4
3400cb4c:	f88d 3004 	strb.w	r3, [sp, #4]
3400cb50:	2301      	movs	r3, #1
3400cb52:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
3400cb56:	4c12      	ldr	r4, [pc, #72]	@ (3400cba0 <LL_ATON_End_EpochBlock_153+0x84>)
3400cb58:	9214      	str	r2, [sp, #80]	@ 0x50
3400cb5a:	4a12      	ldr	r2, [pc, #72]	@ (3400cba4 <LL_ATON_End_EpochBlock_153+0x88>)
3400cb5c:	4d12      	ldr	r5, [pc, #72]	@ (3400cba8 <LL_ATON_End_EpochBlock_153+0x8c>)
3400cb5e:	e9cd 2415 	strd	r2, r4, [sp, #84]	@ 0x54
3400cb62:	4a12      	ldr	r2, [pc, #72]	@ (3400cbac <LL_ATON_End_EpochBlock_153+0x90>)
    .general.type = LL_SW_DEQUANTIZELINEAR,
  };

  /* Low Level SW Layer function invocation. This will exploit EmbedNets libs) */
  /* Node Dequantize_340 mapped on EmbedNets (INTEGER) as DequantizeLinear | Category: Format-Converter */
  ll_sw_forward_dequantizelinear(&dequantizelinear4_sw_info);
3400cb64:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear4_sw_info = {
3400cb66:	9221      	str	r2, [sp, #132]	@ 0x84
3400cb68:	3260      	adds	r2, #96	@ 0x60
3400cb6a:	e9cd 3304 	strd	r3, r3, [sp, #16]
3400cb6e:	e9cd 3308 	strd	r3, r3, [sp, #32]
3400cb72:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
3400cb76:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400cb7a:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400cb7e:	931c      	str	r3, [sp, #112]	@ 0x70
3400cb80:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400cb84:	9327      	str	r3, [sp, #156]	@ 0x9c
3400cb86:	922c      	str	r2, [sp, #176]	@ 0xb0
3400cb88:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
3400cb8c:	950b      	str	r5, [sp, #44]	@ 0x2c
  ll_sw_forward_dequantizelinear(&dequantizelinear4_sw_info);
3400cb8e:	f7f7 ff9b 	bl	34004ac8 <ll_sw_forward_dequantizelinear>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400cb92:	4629      	mov	r1, r5
3400cb94:	4620      	mov	r0, r4
3400cb96:	f7f5 fab5 	bl	34002104 <mcu_cache_clean_range>
  /*     memory pool: 8 */
  /*     start: ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 0))) */
  /*     end:   ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 145152))) */
  LL_ATON_Cache_MCU_Clean_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 0))) /* Equivalent hex address = 0x34200000UL */, 145152);

}
3400cb9a:	b02f      	add	sp, #188	@ 0xbc
3400cb9c:	bd30      	pop	{r4, r5, pc}
3400cb9e:	bf00      	nop
3400cba0:	34200000 	.word	0x34200000
3400cba4:	00023700 	.word	0x00023700
3400cba8:	34223700 	.word	0x34223700
3400cbac:	70492100 	.word	0x70492100

3400cbb0 <LL_ATON_End_EpochBlock_151>:
{
3400cbb0:	b510      	push	{r4, lr}
3400cbb2:	b0ae      	sub	sp, #184	@ 0xb8
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400cbb4:	22b4      	movs	r2, #180	@ 0xb4
3400cbb6:	2100      	movs	r1, #0
3400cbb8:	a801      	add	r0, sp, #4
3400cbba:	f014 fdab 	bl	34021714 <memset>
3400cbbe:	232a      	movs	r3, #42	@ 0x2a
3400cbc0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
3400cbc4:	f88d 3004 	strb.w	r3, [sp, #4]
3400cbc8:	2301      	movs	r3, #1
3400cbca:	491b      	ldr	r1, [pc, #108]	@ (3400cc38 <LL_ATON_End_EpochBlock_151+0x88>)
3400cbcc:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400cbd0:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
3400cbd4:	e9cd 2206 	strd	r2, r2, [sp, #24]
3400cbd8:	920a      	str	r2, [sp, #40]	@ 0x28
3400cbda:	910b      	str	r1, [sp, #44]	@ 0x2c
3400cbdc:	9211      	str	r2, [sp, #68]	@ 0x44
3400cbde:	2104      	movs	r1, #4
3400cbe0:	f44f 52fc 	mov.w	r2, #8064	@ 0x1f80
3400cbe4:	e9cd 2112 	strd	r2, r1, [sp, #72]	@ 0x48
3400cbe8:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
3400cbec:	f102 42e0 	add.w	r2, r2, #1879048192	@ 0x70000000
3400cbf0:	f502 0292 	add.w	r2, r2, #4784128	@ 0x490000
3400cbf4:	4c11      	ldr	r4, [pc, #68]	@ (3400cc3c <LL_ATON_End_EpochBlock_151+0x8c>)
3400cbf6:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400cbfa:	eb0d 0001 	add.w	r0, sp, r1
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400cbfe:	9221      	str	r2, [sp, #132]	@ 0x84
3400cc00:	3260      	adds	r2, #96	@ 0x60
3400cc02:	e9cd 3304 	strd	r3, r3, [sp, #16]
3400cc06:	e9cd 3308 	strd	r3, r3, [sp, #32]
3400cc0a:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
3400cc0e:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400cc12:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400cc16:	931c      	str	r3, [sp, #112]	@ 0x70
3400cc18:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400cc1c:	9327      	str	r3, [sp, #156]	@ 0x9c
3400cc1e:	922c      	str	r2, [sp, #176]	@ 0xb0
3400cc20:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
3400cc24:	9416      	str	r4, [sp, #88]	@ 0x58
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400cc26:	f7f7 ff4f 	bl	34004ac8 <ll_sw_forward_dequantizelinear>
3400cc2a:	4620      	mov	r0, r4
3400cc2c:	4904      	ldr	r1, [pc, #16]	@ (3400cc40 <LL_ATON_End_EpochBlock_151+0x90>)
3400cc2e:	f7f5 fa69 	bl	34002104 <mcu_cache_clean_range>
}
3400cc32:	b02e      	add	sp, #184	@ 0xb8
3400cc34:	bd10      	pop	{r4, pc}
3400cc36:	bf00      	nop
3400cc38:	3420f300 	.word	0x3420f300
3400cc3c:	34246e00 	.word	0x34246e00
3400cc40:	34248d80 	.word	0x34248d80

3400cc44 <LL_ATON_End_EpochBlock_152>:
{
3400cc44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400cc46:	4d0d      	ldr	r5, [pc, #52]	@ (3400cc7c <LL_ATON_End_EpochBlock_152+0x38>)
3400cc48:	4c0d      	ldr	r4, [pc, #52]	@ (3400cc80 <LL_ATON_End_EpochBlock_152+0x3c>)
3400cc4a:	4629      	mov	r1, r5
3400cc4c:	4620      	mov	r0, r4
3400cc4e:	f7f5 fa2f 	bl	340020b0 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400cc52:	2100      	movs	r1, #0
3400cc54:	4608      	mov	r0, r1
3400cc56:	f7f5 ffa7 	bl	34002ba8 <LL_Switch_Init>
  LL_ATON_LIB_Concat(Concat_338_tensor_info_in_152, 2, Concat_338_tensor_info_out_152, 3, 4, 5);
3400cc5a:	2304      	movs	r3, #4
3400cc5c:	2205      	movs	r2, #5
3400cc5e:	2102      	movs	r1, #2
3400cc60:	e9cd 3200 	strd	r3, r2, [sp]
3400cc64:	4807      	ldr	r0, [pc, #28]	@ (3400cc84 <LL_ATON_End_EpochBlock_152+0x40>)
3400cc66:	2303      	movs	r3, #3
3400cc68:	4a07      	ldr	r2, [pc, #28]	@ (3400cc88 <LL_ATON_End_EpochBlock_152+0x44>)
3400cc6a:	f7f6 fdc7 	bl	340037fc <LL_ATON_LIB_Concat>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400cc6e:	4629      	mov	r1, r5
3400cc70:	4620      	mov	r0, r4
}
3400cc72:	b003      	add	sp, #12
3400cc74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400cc78:	f7f5 ba44 	b.w	34002104 <mcu_cache_clean_range>
3400cc7c:	3422c4c0 	.word	0x3422c4c0
3400cc80:	34223700 	.word	0x34223700
3400cc84:	3406be48 	.word	0x3406be48
3400cc88:	3406bdd8 	.word	0x3406bdd8

3400cc8c <LL_ATON_End_EpochBlock_134>:
{
3400cc8c:	b510      	push	{r4, lr}
3400cc8e:	b0e8      	sub	sp, #416	@ 0x1a0
  Resize_integer_sw_info resize_integer2_sw_info = {
3400cc90:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
3400cc94:	2100      	movs	r1, #0
3400cc96:	4668      	mov	r0, sp
3400cc98:	f014 fd3c 	bl	34021714 <memset>
3400cc9c:	232d      	movs	r3, #45	@ 0x2d
3400cc9e:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
3400cca2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
3400cca6:	f88d 3000 	strb.w	r3, [sp]
3400ccaa:	230c      	movs	r3, #12
3400ccac:	e9cd 1005 	strd	r1, r0, [sp, #20]
3400ccb0:	9109      	str	r1, [sp, #36]	@ 0x24
3400ccb2:	4936      	ldr	r1, [pc, #216]	@ (3400cd8c <LL_ATON_End_EpochBlock_134+0x100>)
3400ccb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400ccb8:	910a      	str	r1, [sp, #40]	@ 0x28
3400ccba:	2118      	movs	r1, #24
3400ccbc:	e9cd 3301 	strd	r3, r3, [sp, #4]
3400ccc0:	2301      	movs	r3, #1
3400ccc2:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
3400ccc6:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
3400ccca:	f44f 3110 	mov.w	r1, #147456	@ 0x24000
3400ccce:	e9cd 2303 	strd	r2, r3, [sp, #12]
3400ccd2:	e9cd 2307 	strd	r2, r3, [sp, #28]
3400ccd6:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
3400ccda:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
3400ccde:	f102 42e0 	add.w	r2, r2, #1879048192	@ 0x70000000
3400cce2:	f502 0292 	add.w	r2, r2, #4784128	@ 0x490000
3400cce6:	f502 52ff 	add.w	r2, r2, #8160	@ 0x1fe0
3400ccea:	e9cd 1010 	strd	r1, r0, [sp, #64]	@ 0x40
3400ccee:	9220      	str	r2, [sp, #128]	@ 0x80
3400ccf0:	f100 40e0 	add.w	r0, r0, #1879048192	@ 0x70000000
3400ccf4:	3260      	adds	r2, #96	@ 0x60
3400ccf6:	4c26      	ldr	r4, [pc, #152]	@ (3400cd90 <LL_ATON_End_EpochBlock_134+0x104>)
3400ccf8:	922b      	str	r2, [sp, #172]	@ 0xac
3400ccfa:	f500 0092 	add.w	r0, r0, #4784128	@ 0x490000
3400ccfe:	3a50      	subs	r2, #80	@ 0x50
3400cd00:	9236      	str	r2, [sp, #216]	@ 0xd8
3400cd02:	f500 600b 	add.w	r0, r0, #2224	@ 0x8b0
3400cd06:	3260      	adds	r2, #96	@ 0x60
3400cd08:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
3400cd0c:	9114      	str	r1, [sp, #80]	@ 0x50
3400cd0e:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
3400cd12:	931b      	str	r3, [sp, #108]	@ 0x6c
3400cd14:	9326      	str	r3, [sp, #152]	@ 0x98
3400cd16:	f88d 30b0 	strb.w	r3, [sp, #176]	@ 0xb0
3400cd1a:	9331      	str	r3, [sp, #196]	@ 0xc4
3400cd1c:	933c      	str	r3, [sp, #240]	@ 0xf0
3400cd1e:	9241      	str	r2, [sp, #260]	@ 0x104
3400cd20:	9415      	str	r4, [sp, #84]	@ 0x54
3400cd22:	2204      	movs	r2, #4
3400cd24:	f88d 3108 	strb.w	r3, [sp, #264]	@ 0x108
3400cd28:	904c      	str	r0, [sp, #304]	@ 0x130
3400cd2a:	2008      	movs	r0, #8
3400cd2c:	e9cd 2345 	strd	r2, r3, [sp, #276]	@ 0x114
3400cd30:	e9cd 0350 	strd	r0, r3, [sp, #320]	@ 0x140
3400cd34:	e9cd 235b 	strd	r2, r3, [sp, #364]	@ 0x16c
3400cd38:	e9cd 3343 	strd	r3, r3, [sp, #268]	@ 0x10c
3400cd3c:	e9cd 334e 	strd	r3, r3, [sp, #312]	@ 0x138
3400cd40:	e9cd 3359 	strd	r3, r3, [sp, #356]	@ 0x164
3400cd44:	4b13      	ldr	r3, [pc, #76]	@ (3400cd94 <LL_ATON_End_EpochBlock_134+0x108>)
3400cd46:	9052      	str	r0, [sp, #328]	@ 0x148
3400cd48:	2020      	movs	r0, #32
3400cd4a:	9362      	str	r3, [sp, #392]	@ 0x188
3400cd4c:	4b12      	ldr	r3, [pc, #72]	@ (3400cd98 <LL_ATON_End_EpochBlock_134+0x10c>)
3400cd4e:	2110      	movs	r1, #16
3400cd50:	9364      	str	r3, [sp, #400]	@ 0x190
3400cd52:	f240 3302 	movw	r3, #770	@ 0x302
3400cd56:	e9cd 2055 	strd	r2, r0, [sp, #340]	@ 0x154
3400cd5a:	e9cd 0053 	strd	r0, r0, [sp, #332]	@ 0x14c
3400cd5e:	480f      	ldr	r0, [pc, #60]	@ (3400cd9c <LL_ATON_End_EpochBlock_134+0x110>)
3400cd60:	e9cd 214a 	strd	r2, r1, [sp, #296]	@ 0x128
3400cd64:	9057      	str	r0, [sp, #348]	@ 0x15c
  ll_sw_forward_resize_integer(&resize_integer2_sw_info);
3400cd66:	4668      	mov	r0, sp
  Resize_integer_sw_info resize_integer2_sw_info = {
3400cd68:	e9cd 215d 	strd	r2, r1, [sp, #372]	@ 0x174
3400cd6c:	e9cd 1148 	strd	r1, r1, [sp, #288]	@ 0x120
3400cd70:	e9cd 225f 	strd	r2, r2, [sp, #380]	@ 0x17c
3400cd74:	9247      	str	r2, [sp, #284]	@ 0x11c
3400cd76:	9161      	str	r1, [sp, #388]	@ 0x184
3400cd78:	f8ad 319c 	strh.w	r3, [sp, #412]	@ 0x19c
  ll_sw_forward_resize_integer(&resize_integer2_sw_info);
3400cd7c:	f7f7 ff40 	bl	34004c00 <ll_sw_forward_resize_integer>
3400cd80:	4620      	mov	r0, r4
3400cd82:	4907      	ldr	r1, [pc, #28]	@ (3400cda0 <LL_ATON_End_EpochBlock_134+0x114>)
3400cd84:	f7f5 f9be 	bl	34002104 <mcu_cache_clean_range>
}
3400cd88:	b068      	add	sp, #416	@ 0x1a0
3400cd8a:	bd10      	pop	{r4, pc}
3400cd8c:	34212000 	.word	0x34212000
3400cd90:	34224000 	.word	0x34224000
3400cd94:	70492030 	.word	0x70492030
3400cd98:	bf400000 	.word	0xbf400000
3400cd9c:	70492010 	.word	0x70492010
3400cda0:	34248000 	.word	0x34248000

3400cda4 <LL_ATON_End_EpochBlock_119>:
{
3400cda4:	b510      	push	{r4, lr}
3400cda6:	b0e8      	sub	sp, #416	@ 0x1a0
  Resize_integer_sw_info resize_integer1_sw_info = {
3400cda8:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
3400cdac:	2100      	movs	r1, #0
3400cdae:	4668      	mov	r0, sp
3400cdb0:	f014 fcb0 	bl	34021714 <memset>
3400cdb4:	232d      	movs	r3, #45	@ 0x2d
3400cdb6:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
3400cdba:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
3400cdbe:	f88d 3000 	strb.w	r3, [sp]
3400cdc2:	2306      	movs	r3, #6
3400cdc4:	e9cd 1005 	strd	r1, r0, [sp, #20]
3400cdc8:	9109      	str	r1, [sp, #36]	@ 0x24
3400cdca:	4931      	ldr	r1, [pc, #196]	@ (3400ce90 <LL_ATON_End_EpochBlock_119+0xec>)
3400cdcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400cdd0:	910a      	str	r1, [sp, #40]	@ 0x28
3400cdd2:	210c      	movs	r1, #12
3400cdd4:	e9cd 3301 	strd	r3, r3, [sp, #4]
3400cdd8:	2301      	movs	r3, #1
3400cdda:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
3400cdde:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
3400cde2:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
3400cde6:	e9cd 2303 	strd	r2, r3, [sp, #12]
3400cdea:	e9cd 2307 	strd	r2, r3, [sp, #28]
3400cdee:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
3400cdf2:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
3400cdf6:	4a27      	ldr	r2, [pc, #156]	@ (3400ce94 <LL_ATON_End_EpochBlock_119+0xf0>)
3400cdf8:	e9cd 1010 	strd	r1, r0, [sp, #64]	@ 0x40
3400cdfc:	9220      	str	r2, [sp, #128]	@ 0x80
3400cdfe:	3260      	adds	r2, #96	@ 0x60
3400ce00:	4c25      	ldr	r4, [pc, #148]	@ (3400ce98 <LL_ATON_End_EpochBlock_119+0xf4>)
3400ce02:	922b      	str	r2, [sp, #172]	@ 0xac
3400ce04:	4825      	ldr	r0, [pc, #148]	@ (3400ce9c <LL_ATON_End_EpochBlock_119+0xf8>)
3400ce06:	3a50      	subs	r2, #80	@ 0x50
3400ce08:	9236      	str	r2, [sp, #216]	@ 0xd8
3400ce0a:	3260      	adds	r2, #96	@ 0x60
3400ce0c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
3400ce10:	9114      	str	r1, [sp, #80]	@ 0x50
3400ce12:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
3400ce16:	931b      	str	r3, [sp, #108]	@ 0x6c
3400ce18:	9326      	str	r3, [sp, #152]	@ 0x98
3400ce1a:	f88d 30b0 	strb.w	r3, [sp, #176]	@ 0xb0
3400ce1e:	9331      	str	r3, [sp, #196]	@ 0xc4
3400ce20:	933c      	str	r3, [sp, #240]	@ 0xf0
3400ce22:	9241      	str	r2, [sp, #260]	@ 0x104
3400ce24:	9415      	str	r4, [sp, #84]	@ 0x54
3400ce26:	2204      	movs	r2, #4
3400ce28:	f88d 3108 	strb.w	r3, [sp, #264]	@ 0x108
3400ce2c:	904c      	str	r0, [sp, #304]	@ 0x130
3400ce2e:	2008      	movs	r0, #8
3400ce30:	e9cd 2345 	strd	r2, r3, [sp, #276]	@ 0x114
3400ce34:	e9cd 0350 	strd	r0, r3, [sp, #320]	@ 0x140
3400ce38:	e9cd 235b 	strd	r2, r3, [sp, #364]	@ 0x16c
3400ce3c:	e9cd 3343 	strd	r3, r3, [sp, #268]	@ 0x10c
3400ce40:	e9cd 334e 	strd	r3, r3, [sp, #312]	@ 0x138
3400ce44:	e9cd 3359 	strd	r3, r3, [sp, #356]	@ 0x164
3400ce48:	4b15      	ldr	r3, [pc, #84]	@ (3400cea0 <LL_ATON_End_EpochBlock_119+0xfc>)
3400ce4a:	9052      	str	r0, [sp, #328]	@ 0x148
3400ce4c:	2020      	movs	r0, #32
3400ce4e:	9362      	str	r3, [sp, #392]	@ 0x188
3400ce50:	4b14      	ldr	r3, [pc, #80]	@ (3400cea4 <LL_ATON_End_EpochBlock_119+0x100>)
3400ce52:	2110      	movs	r1, #16
3400ce54:	9364      	str	r3, [sp, #400]	@ 0x190
3400ce56:	f240 3302 	movw	r3, #770	@ 0x302
3400ce5a:	e9cd 2055 	strd	r2, r0, [sp, #340]	@ 0x154
3400ce5e:	e9cd 0053 	strd	r0, r0, [sp, #332]	@ 0x14c
3400ce62:	4811      	ldr	r0, [pc, #68]	@ (3400cea8 <LL_ATON_End_EpochBlock_119+0x104>)
3400ce64:	e9cd 214a 	strd	r2, r1, [sp, #296]	@ 0x128
3400ce68:	9057      	str	r0, [sp, #348]	@ 0x15c
  ll_sw_forward_resize_integer(&resize_integer1_sw_info);
3400ce6a:	4668      	mov	r0, sp
  Resize_integer_sw_info resize_integer1_sw_info = {
3400ce6c:	e9cd 215d 	strd	r2, r1, [sp, #372]	@ 0x174
3400ce70:	e9cd 1148 	strd	r1, r1, [sp, #288]	@ 0x120
3400ce74:	e9cd 225f 	strd	r2, r2, [sp, #380]	@ 0x17c
3400ce78:	9247      	str	r2, [sp, #284]	@ 0x11c
3400ce7a:	9161      	str	r1, [sp, #388]	@ 0x184
3400ce7c:	f8ad 319c 	strh.w	r3, [sp, #412]	@ 0x19c
  ll_sw_forward_resize_integer(&resize_integer1_sw_info);
3400ce80:	f7f7 febe 	bl	34004c00 <ll_sw_forward_resize_integer>
3400ce84:	4620      	mov	r0, r4
3400ce86:	4909      	ldr	r1, [pc, #36]	@ (3400ceac <LL_ATON_End_EpochBlock_119+0x108>)
3400ce88:	f7f5 f93c 	bl	34002104 <mcu_cache_clean_range>
}
3400ce8c:	b068      	add	sp, #416	@ 0x1a0
3400ce8e:	bd10      	pop	{r4, pc}
3400ce90:	34231800 	.word	0x34231800
3400ce94:	70492110 	.word	0x70492110
3400ce98:	3421b000 	.word	0x3421b000
3400ce9c:	704920c0 	.word	0x704920c0
3400cea0:	70492070 	.word	0x70492070
3400cea4:	bf400000 	.word	0xbf400000
3400cea8:	70492050 	.word	0x70492050
3400ceac:	34224000 	.word	0x34224000

3400ceb0 <LL_ATON_End_EpochBlock_70>:
{
3400ceb0:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400ceb2:	4d10      	ldr	r5, [pc, #64]	@ (3400cef4 <LL_ATON_End_EpochBlock_70+0x44>)
3400ceb4:	4c10      	ldr	r4, [pc, #64]	@ (3400cef8 <LL_ATON_End_EpochBlock_70+0x48>)
3400ceb6:	b085      	sub	sp, #20
3400ceb8:	4629      	mov	r1, r5
3400ceba:	4620      	mov	r0, r4
3400cebc:	f7f5 f8f8 	bl	340020b0 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400cec0:	2100      	movs	r1, #0
3400cec2:	4608      	mov	r0, r1
3400cec4:	f7f5 fe70 	bl	34002ba8 <LL_Switch_Init>
  LL_ATON_LIB_DMA_Transpose(&Transpose_162_tensor_shape_in_70[0], Transpose_162_tensor_axes_offsets_in_70[0], &Transpose_162_tensor_shape_out_70[0], Transpose_162_tensor_axes_offsets_out_70[0], Transpose_162_target_pos_array_in_70, Transpose_162_perm_to_use_array_in_70, 4, 5);
3400cec8:	2304      	movs	r3, #4
3400ceca:	2205      	movs	r2, #5
3400cecc:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400ced0:	4b0a      	ldr	r3, [pc, #40]	@ (3400cefc <LL_ATON_End_EpochBlock_70+0x4c>)
3400ced2:	4a0b      	ldr	r2, [pc, #44]	@ (3400cf00 <LL_ATON_End_EpochBlock_70+0x50>)
3400ced4:	9301      	str	r3, [sp, #4]
3400ced6:	4b0b      	ldr	r3, [pc, #44]	@ (3400cf04 <LL_ATON_End_EpochBlock_70+0x54>)
3400ced8:	490b      	ldr	r1, [pc, #44]	@ (3400cf08 <LL_ATON_End_EpochBlock_70+0x58>)
3400ceda:	9300      	str	r3, [sp, #0]
3400cedc:	480b      	ldr	r0, [pc, #44]	@ (3400cf0c <LL_ATON_End_EpochBlock_70+0x5c>)
3400cede:	4b0c      	ldr	r3, [pc, #48]	@ (3400cf10 <LL_ATON_End_EpochBlock_70+0x60>)
3400cee0:	f7f6 fba2 	bl	34003628 <LL_ATON_LIB_DMA_Transpose>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400cee4:	4629      	mov	r1, r5
3400cee6:	4620      	mov	r0, r4
}
3400cee8:	b005      	add	sp, #20
3400ceea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400ceee:	f7f5 b909 	b.w	34002104 <mcu_cache_clean_range>
3400cef2:	bf00      	nop
3400cef4:	34209000 	.word	0x34209000
3400cef8:	34200000 	.word	0x34200000
3400cefc:	3406bcf4 	.word	0x3406bcf4
3400cf00:	3406bcfc 	.word	0x3406bcfc
3400cf04:	3406bcf8 	.word	0x3406bcf8
3400cf08:	3406bcc4 	.word	0x3406bcc4
3400cf0c:	3406bd34 	.word	0x3406bd34
3400cf10:	3406bce4 	.word	0x3406bce4

3400cf14 <LL_ATON_End_EpochBlock_49>:
{
3400cf14:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400cf16:	4d10      	ldr	r5, [pc, #64]	@ (3400cf58 <LL_ATON_End_EpochBlock_49+0x44>)
3400cf18:	4c10      	ldr	r4, [pc, #64]	@ (3400cf5c <LL_ATON_End_EpochBlock_49+0x48>)
3400cf1a:	b085      	sub	sp, #20
3400cf1c:	4629      	mov	r1, r5
3400cf1e:	4620      	mov	r0, r4
3400cf20:	f7f5 f8c6 	bl	340020b0 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400cf24:	2100      	movs	r1, #0
3400cf26:	4608      	mov	r0, r1
3400cf28:	f7f5 fe3e 	bl	34002ba8 <LL_Switch_Init>
  LL_ATON_LIB_DMA_Transpose(&Transpose_108_tensor_shape_in_49[0], Transpose_108_tensor_axes_offsets_in_49[0], &Transpose_108_tensor_shape_out_49[0], Transpose_108_tensor_axes_offsets_out_49[0], Transpose_108_target_pos_array_in_49, Transpose_108_perm_to_use_array_in_49, 3, 4);
3400cf2c:	2303      	movs	r3, #3
3400cf2e:	2204      	movs	r2, #4
3400cf30:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400cf34:	4b0a      	ldr	r3, [pc, #40]	@ (3400cf60 <LL_ATON_End_EpochBlock_49+0x4c>)
3400cf36:	4a0b      	ldr	r2, [pc, #44]	@ (3400cf64 <LL_ATON_End_EpochBlock_49+0x50>)
3400cf38:	9301      	str	r3, [sp, #4]
3400cf3a:	4b0b      	ldr	r3, [pc, #44]	@ (3400cf68 <LL_ATON_End_EpochBlock_49+0x54>)
3400cf3c:	490b      	ldr	r1, [pc, #44]	@ (3400cf6c <LL_ATON_End_EpochBlock_49+0x58>)
3400cf3e:	9300      	str	r3, [sp, #0]
3400cf40:	480b      	ldr	r0, [pc, #44]	@ (3400cf70 <LL_ATON_End_EpochBlock_49+0x5c>)
3400cf42:	4b0c      	ldr	r3, [pc, #48]	@ (3400cf74 <LL_ATON_End_EpochBlock_49+0x60>)
3400cf44:	f7f6 fb70 	bl	34003628 <LL_ATON_LIB_DMA_Transpose>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400cf48:	4629      	mov	r1, r5
3400cf4a:	4620      	mov	r0, r4
}
3400cf4c:	b005      	add	sp, #20
3400cf4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400cf52:	f7f5 b8d7 	b.w	34002104 <mcu_cache_clean_range>
3400cf56:	bf00      	nop
3400cf58:	34224000 	.word	0x34224000
3400cf5c:	34212000 	.word	0x34212000
3400cf60:	3406bc3c 	.word	0x3406bc3c
3400cf64:	3406bc44 	.word	0x3406bc44
3400cf68:	3406bc40 	.word	0x3406bc40
3400cf6c:	3406bc0c 	.word	0x3406bc0c
3400cf70:	3406bc7c 	.word	0x3406bc7c
3400cf74:	3406bc2c 	.word	0x3406bc2c

3400cf78 <LL_ATON_End_EpochBlock_28>:
{
3400cf78:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400cf7a:	4d10      	ldr	r5, [pc, #64]	@ (3400cfbc <LL_ATON_End_EpochBlock_28+0x44>)
3400cf7c:	4c10      	ldr	r4, [pc, #64]	@ (3400cfc0 <LL_ATON_End_EpochBlock_28+0x48>)
3400cf7e:	b085      	sub	sp, #20
3400cf80:	4629      	mov	r1, r5
3400cf82:	4620      	mov	r0, r4
3400cf84:	f7f5 f894 	bl	340020b0 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400cf88:	2100      	movs	r1, #0
3400cf8a:	4608      	mov	r0, r1
3400cf8c:	f7f5 fe0c 	bl	34002ba8 <LL_Switch_Init>
  LL_ATON_LIB_DMA_Transpose(&Transpose_54_tensor_shape_in_28[0], Transpose_54_tensor_axes_offsets_in_28[0], &Transpose_54_tensor_shape_out_28[0], Transpose_54_tensor_axes_offsets_out_28[0], Transpose_54_target_pos_array_in_28, Transpose_54_perm_to_use_array_in_28, 4, 5);
3400cf90:	2304      	movs	r3, #4
3400cf92:	2205      	movs	r2, #5
3400cf94:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400cf98:	4b0a      	ldr	r3, [pc, #40]	@ (3400cfc4 <LL_ATON_End_EpochBlock_28+0x4c>)
3400cf9a:	4a0b      	ldr	r2, [pc, #44]	@ (3400cfc8 <LL_ATON_End_EpochBlock_28+0x50>)
3400cf9c:	9301      	str	r3, [sp, #4]
3400cf9e:	4b0b      	ldr	r3, [pc, #44]	@ (3400cfcc <LL_ATON_End_EpochBlock_28+0x54>)
3400cfa0:	490b      	ldr	r1, [pc, #44]	@ (3400cfd0 <LL_ATON_End_EpochBlock_28+0x58>)
3400cfa2:	9300      	str	r3, [sp, #0]
3400cfa4:	480b      	ldr	r0, [pc, #44]	@ (3400cfd4 <LL_ATON_End_EpochBlock_28+0x5c>)
3400cfa6:	4b0c      	ldr	r3, [pc, #48]	@ (3400cfd8 <LL_ATON_End_EpochBlock_28+0x60>)
3400cfa8:	f7f6 fb3e 	bl	34003628 <LL_ATON_LIB_DMA_Transpose>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400cfac:	4629      	mov	r1, r5
3400cfae:	4620      	mov	r0, r4
}
3400cfb0:	b005      	add	sp, #20
3400cfb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400cfb6:	f7f5 b8a5 	b.w	34002104 <mcu_cache_clean_range>
3400cfba:	bf00      	nop
3400cfbc:	34248000 	.word	0x34248000
3400cfc0:	34224000 	.word	0x34224000
3400cfc4:	3406bb84 	.word	0x3406bb84
3400cfc8:	3406bb8c 	.word	0x3406bb8c
3400cfcc:	3406bb88 	.word	0x3406bb88
3400cfd0:	3406bb54 	.word	0x3406bb54
3400cfd4:	3406bbc4 	.word	0x3406bbc4
3400cfd8:	3406bb74 	.word	0x3406bb74

3400cfdc <LL_ATON_End_EpochBlock_25>:
{
3400cfdc:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400cfde:	4d10      	ldr	r5, [pc, #64]	@ (3400d020 <LL_ATON_End_EpochBlock_25+0x44>)
3400cfe0:	4c10      	ldr	r4, [pc, #64]	@ (3400d024 <LL_ATON_End_EpochBlock_25+0x48>)
3400cfe2:	b085      	sub	sp, #20
3400cfe4:	4629      	mov	r1, r5
3400cfe6:	4620      	mov	r0, r4
3400cfe8:	f7f5 f862 	bl	340020b0 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400cfec:	2100      	movs	r1, #0
3400cfee:	4608      	mov	r0, r1
3400cff0:	f7f5 fdda 	bl	34002ba8 <LL_Switch_Init>
  LL_ATON_LIB_DMA_Transpose(&Transpose_52_tensor_shape_in_25[0], Transpose_52_tensor_axes_offsets_in_25[0], &Transpose_52_tensor_shape_out_25[0], Transpose_52_tensor_axes_offsets_out_25[0], Transpose_52_target_pos_array_in_25, Transpose_52_perm_to_use_array_in_25, 7, 8);
3400cff4:	2307      	movs	r3, #7
3400cff6:	2208      	movs	r2, #8
3400cff8:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400cffc:	4b0a      	ldr	r3, [pc, #40]	@ (3400d028 <LL_ATON_End_EpochBlock_25+0x4c>)
3400cffe:	4a0b      	ldr	r2, [pc, #44]	@ (3400d02c <LL_ATON_End_EpochBlock_25+0x50>)
3400d000:	9301      	str	r3, [sp, #4]
3400d002:	4b0b      	ldr	r3, [pc, #44]	@ (3400d030 <LL_ATON_End_EpochBlock_25+0x54>)
3400d004:	490b      	ldr	r1, [pc, #44]	@ (3400d034 <LL_ATON_End_EpochBlock_25+0x58>)
3400d006:	9300      	str	r3, [sp, #0]
3400d008:	480b      	ldr	r0, [pc, #44]	@ (3400d038 <LL_ATON_End_EpochBlock_25+0x5c>)
3400d00a:	4b0c      	ldr	r3, [pc, #48]	@ (3400d03c <LL_ATON_End_EpochBlock_25+0x60>)
3400d00c:	f7f6 fb0c 	bl	34003628 <LL_ATON_LIB_DMA_Transpose>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d010:	4629      	mov	r1, r5
3400d012:	4620      	mov	r0, r4
}
3400d014:	b005      	add	sp, #20
3400d016:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400d01a:	f7f5 b873 	b.w	34002104 <mcu_cache_clean_range>
3400d01e:	bf00      	nop
3400d020:	342a2000 	.word	0x342a2000
3400d024:	34290000 	.word	0x34290000
3400d028:	3406bacc 	.word	0x3406bacc
3400d02c:	3406bad4 	.word	0x3406bad4
3400d030:	3406bad0 	.word	0x3406bad0
3400d034:	3406ba9c 	.word	0x3406ba9c
3400d038:	3406bb0c 	.word	0x3406bb0c
3400d03c:	3406babc 	.word	0x3406babc

3400d040 <LL_ATON_Set_User_Input_Buffer_palm_detector>:
  if (num == 0) {
3400d040:	b940      	cbnz	r0, 3400d054 <LL_ATON_Set_User_Input_Buffer_palm_detector+0x14>
    if (((uintptr_t)buffer % 32) != 0)
3400d042:	f011 001f 	ands.w	r0, r1, #31
3400d046:	d107      	bne.n	3400d058 <LL_ATON_Set_User_Input_Buffer_palm_detector+0x18>
    if (size < 110592)
3400d048:	f5b2 3fd8 	cmp.w	r2, #110592	@ 0x1b000
3400d04c:	d306      	bcc.n	3400d05c <LL_ATON_Set_User_Input_Buffer_palm_detector+0x1c>
    _mem_pool__user_io_input_0_palm_detector = buffer;
3400d04e:	4b04      	ldr	r3, [pc, #16]	@ (3400d060 <LL_ATON_Set_User_Input_Buffer_palm_detector+0x20>)
3400d050:	6019      	str	r1, [r3, #0]
    return LL_ATON_User_IO_NOERROR;
3400d052:	4770      	bx	lr
    return LL_ATON_User_IO_WRONG_INDEX;
3400d054:	2003      	movs	r0, #3
3400d056:	4770      	bx	lr
      return LL_ATON_User_IO_WRONG_ALIGN; /* enforce MCU cacheline alignment */
3400d058:	2001      	movs	r0, #1
3400d05a:	4770      	bx	lr
      return LL_ATON_User_IO_WRONG_SIZE; /* enforce size needed */
3400d05c:	2002      	movs	r0, #2
}
3400d05e:	4770      	bx	lr
3400d060:	340da1e0 	.word	0x340da1e0

3400d064 <LL_ATON_Get_User_Input_Buffer_palm_detector>:
  if (num == 0) {
3400d064:	b910      	cbnz	r0, 3400d06c <LL_ATON_Get_User_Input_Buffer_palm_detector+0x8>
    return _mem_pool__user_io_input_0_palm_detector;
3400d066:	4b02      	ldr	r3, [pc, #8]	@ (3400d070 <LL_ATON_Get_User_Input_Buffer_palm_detector+0xc>)
3400d068:	6818      	ldr	r0, [r3, #0]
3400d06a:	4770      	bx	lr
    return NULL;
3400d06c:	2000      	movs	r0, #0
}
3400d06e:	4770      	bx	lr
3400d070:	340da1e0 	.word	0x340da1e0

3400d074 <LL_ATON_Set_User_Output_Buffer_palm_detector>:
}
3400d074:	2003      	movs	r0, #3
3400d076:	4770      	bx	lr

3400d078 <LL_ATON_Get_User_Output_Buffer_palm_detector>:
}
3400d078:	2000      	movs	r0, #0
3400d07a:	4770      	bx	lr

3400d07c <LL_ATON_EC_Network_Init_palm_detector>:
#define LL_ATON_EC_MustDecryptBlob_palm_detector__ec_blob_palm_detector_154 false

// this function MUST be called ONLY ONCE once for initializing the network
bool LL_ATON_EC_Network_Init_palm_detector(void)
{
  memset(_ec_blob_palm_detector_1_prev_base_addrs, 0, 1 * sizeof(ECAddr));
3400d07c:	2200      	movs	r2, #0
3400d07e:	4b0e      	ldr	r3, [pc, #56]	@ (3400d0b8 <LL_ATON_EC_Network_Init_palm_detector+0x3c>)
{
3400d080:	b513      	push	{r0, r1, r4, lr}
  memset(_ec_blob_palm_detector_1_prev_base_addrs, 0, 1 * sizeof(ECAddr));
3400d082:	601a      	str	r2, [r3, #0]
   */
  static inline void LL_ATON_Cache_NPU_Clean_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    /* NOTE: The ATON NPU cache does not provide a pure invalidate-range function, but only a clean-invalidate range
       function! One has to take this into account when using `stai_ext_cache_npu_clean_invalidate_range`. */
    LL_ATON_OSAL_LOCK_NPU_CACHE();
3400d084:	f7f7 f83a 	bl	340040fc <aton_osal_freertos_lock>
    npu_cache_clean_invalidate_range(ATON_LIB_VIRTUAL_TO_PHYSICAL_ADDR(virtual_addr),
3400d088:	490c      	ldr	r1, [pc, #48]	@ (3400d0bc <LL_ATON_EC_Network_Init_palm_detector+0x40>)
3400d08a:	480d      	ldr	r0, [pc, #52]	@ (3400d0c0 <LL_ATON_EC_Network_Init_palm_detector+0x44>)
3400d08c:	f7f5 f8a2 	bl	340021d4 <npu_cache_clean_invalidate_range>
                                     ATON_LIB_VIRTUAL_TO_PHYSICAL_ADDR(virtual_addr + size));
    LL_ATON_OSAL_UNLOCK_NPU_CACHE();
3400d090:	f7f7 f84c 	bl	3400412c <aton_osal_freertos_unlock>

  LL_ATON_Cache_NPU_Clean_Invalidate_Range((uintptr_t)_ec_blob_palm_detector_1, 30324);

  unsigned int size;
  size = 7581;
3400d094:	f641 539d 	movw	r3, #7581	@ 0x1d9d

  if (!ec_copy_blob((ECInstr *)_ec_blob_palm_detector_1, (const uint8_t *)_ec_blob_palm_detector_1_binary, &size))
3400d098:	490a      	ldr	r1, [pc, #40]	@ (3400d0c4 <LL_ATON_EC_Network_Init_palm_detector+0x48>)
3400d09a:	4809      	ldr	r0, [pc, #36]	@ (3400d0c0 <LL_ATON_EC_Network_Init_palm_detector+0x44>)
3400d09c:	aa01      	add	r2, sp, #4
  size = 7581;
3400d09e:	9301      	str	r3, [sp, #4]
  if (!ec_copy_blob((ECInstr *)_ec_blob_palm_detector_1, (const uint8_t *)_ec_blob_palm_detector_1_binary, &size))
3400d0a0:	f7f5 f8b6 	bl	34002210 <ec_copy_blob>
3400d0a4:	4604      	mov	r4, r0
3400d0a6:	b118      	cbz	r0, 3400d0b0 <LL_ATON_EC_Network_Init_palm_detector+0x34>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d0a8:	4904      	ldr	r1, [pc, #16]	@ (3400d0bc <LL_ATON_EC_Network_Init_palm_detector+0x40>)
3400d0aa:	4805      	ldr	r0, [pc, #20]	@ (3400d0c0 <LL_ATON_EC_Network_Init_palm_detector+0x44>)
3400d0ac:	f7f5 f82a 	bl	34002104 <mcu_cache_clean_range>
  }

  LL_ATON_Cache_MCU_Clean_Range((uintptr_t)_ec_blob_palm_detector_1, 30324);

  return true;
}
3400d0b0:	4620      	mov	r0, r4
3400d0b2:	b002      	add	sp, #8
3400d0b4:	bd10      	pop	{r4, pc}
3400d0b6:	bf00      	nop
3400d0b8:	340d2b64 	.word	0x340d2b64
3400d0bc:	340da1dc 	.word	0x340da1dc
3400d0c0:	340d2b68 	.word	0x340d2b68
3400d0c4:	340c1000 	.word	0x340c1000

3400d0c8 <LL_ATON_EC_Inference_Init_palm_detector>:

// this function should be called before each inference
bool LL_ATON_EC_Inference_Init_palm_detector(void)
{
3400d0c8:	b513      	push	{r0, r1, r4, lr}
    LL_ATON_OSAL_LOCK_NPU_CACHE();
3400d0ca:	f7f7 f817 	bl	340040fc <aton_osal_freertos_lock>
    npu_cache_clean_invalidate_range(ATON_LIB_VIRTUAL_TO_PHYSICAL_ADDR(virtual_addr),
3400d0ce:	490c      	ldr	r1, [pc, #48]	@ (3400d100 <LL_ATON_EC_Inference_Init_palm_detector+0x38>)
3400d0d0:	480c      	ldr	r0, [pc, #48]	@ (3400d104 <LL_ATON_EC_Inference_Init_palm_detector+0x3c>)
3400d0d2:	f7f5 f87f 	bl	340021d4 <npu_cache_clean_invalidate_range>
    LL_ATON_OSAL_UNLOCK_NPU_CACHE();
3400d0d6:	f7f7 f829 	bl	3400412c <aton_osal_freertos_unlock>
  LL_ATON_Cache_NPU_Clean_Invalidate_Range((uintptr_t)_ec_blob_palm_detector_1, 30324);

  if (!ec_reloc(_ec_blob_palm_detector_1_reloc_table_ptr, (ECInstr *)_ec_blob_palm_detector_1, _ec_blob_palm_detector_1__user_io_input_0_RELOC_IDX, (ECAddr)(uintptr_t)_ec_blob_palm_detector_1__user_io_input_0_BASE_SYMBOL, _ec_blob_palm_detector_1_prev_base_addrs + _ec_blob_palm_detector_1__user_io_input_0_RELOC_IDX))
3400d0da:	4b0b      	ldr	r3, [pc, #44]	@ (3400d108 <LL_ATON_EC_Inference_Init_palm_detector+0x40>)
3400d0dc:	2200      	movs	r2, #0
3400d0de:	9300      	str	r3, [sp, #0]
3400d0e0:	4b0a      	ldr	r3, [pc, #40]	@ (3400d10c <LL_ATON_EC_Inference_Init_palm_detector+0x44>)
3400d0e2:	4908      	ldr	r1, [pc, #32]	@ (3400d104 <LL_ATON_EC_Inference_Init_palm_detector+0x3c>)
3400d0e4:	681b      	ldr	r3, [r3, #0]
3400d0e6:	480a      	ldr	r0, [pc, #40]	@ (3400d110 <LL_ATON_EC_Inference_Init_palm_detector+0x48>)
3400d0e8:	f7f5 f8cc 	bl	34002284 <ec_reloc>
3400d0ec:	4604      	mov	r4, r0
3400d0ee:	b118      	cbz	r0, 3400d0f8 <LL_ATON_EC_Inference_Init_palm_detector+0x30>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d0f0:	4903      	ldr	r1, [pc, #12]	@ (3400d100 <LL_ATON_EC_Inference_Init_palm_detector+0x38>)
3400d0f2:	4804      	ldr	r0, [pc, #16]	@ (3400d104 <LL_ATON_EC_Inference_Init_palm_detector+0x3c>)
3400d0f4:	f7f5 f806 	bl	34002104 <mcu_cache_clean_range>
  }

  LL_ATON_Cache_MCU_Clean_Range((uintptr_t)_ec_blob_palm_detector_1, 30324);

  return true;
}
3400d0f8:	4620      	mov	r0, r4
3400d0fa:	b002      	add	sp, #8
3400d0fc:	bd10      	pop	{r4, pc}
3400d0fe:	bf00      	nop
3400d100:	340da1dc 	.word	0x340da1dc
3400d104:	340d2b68 	.word	0x340d2b68
3400d108:	340d2b64 	.word	0x340d2b64
3400d10c:	340da1e0 	.word	0x340da1e0
3400d110:	340c1018 	.word	0x340c1018

3400d114 <LL_ATON_EpochBlockItems_palm_detector>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
3400d114:	4800      	ldr	r0, [pc, #0]	@ (3400d118 <LL_ATON_EpochBlockItems_palm_detector+0x4>)
3400d116:	4770      	bx	lr
3400d118:	3406bef0 	.word	0x3406bef0

3400d11c <LL_ATON_Input_Buffers_Info_palm_detector>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400d11c:	4800      	ldr	r0, [pc, #0]	@ (3400d120 <LL_ATON_Input_Buffers_Info_palm_detector+0x4>)
3400d11e:	4770      	bx	lr
3400d120:	3406ba1c 	.word	0x3406ba1c

3400d124 <LL_ATON_Output_Buffers_Info_palm_detector>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400d124:	4800      	ldr	r0, [pc, #0]	@ (3400d128 <LL_ATON_Output_Buffers_Info_palm_detector+0x4>)
3400d126:	4770      	bx	lr
3400d128:	3406b94c 	.word	0x3406b94c

3400d12c <LL_ATON_Internal_Buffers_Info_palm_detector>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400d12c:	4800      	ldr	r0, [pc, #0]	@ (3400d130 <LL_ATON_Internal_Buffers_Info_palm_detector+0x4>)
3400d12e:	4770      	bx	lr
3400d130:	34067bd4 	.word	0x34067bd4

3400d134 <APS256XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS256XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
3400d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400d138:	b098      	sub	sp, #96	@ 0x60
3400d13a:	4605      	mov	r5, r0
3400d13c:	4617      	mov	r7, r2
3400d13e:	460e      	mov	r6, r1
  XSPI_RegularCmdTypeDef   sCommand = {0};
3400d140:	223c      	movs	r2, #60	@ 0x3c
3400d142:	2100      	movs	r1, #0
3400d144:	a806      	add	r0, sp, #24
{
3400d146:	4698      	mov	r8, r3
3400d148:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
  XSPI_RegularCmdTypeDef   sCommand = {0};
3400d14a:	f014 fae3 	bl	34021714 <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
3400d14e:	2210      	movs	r2, #16
3400d150:	2100      	movs	r1, #0
3400d152:	a801      	add	r0, sp, #4
3400d154:	f014 fade 	bl	34021714 <memset>

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
3400d158:	2302      	movs	r3, #2
3400d15a:	9305      	str	r3, [sp, #20]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
3400d15c:	2304      	movs	r3, #4
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
3400d15e:	2c00      	cmp	r4, #0
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
3400d160:	9308      	str	r3, [sp, #32]
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
3400d162:	bf14      	ite	ne
3400d164:	2380      	movne	r3, #128	@ 0x80
3400d166:	23a0      	moveq	r3, #160	@ 0xa0
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400d168:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
3400d16c:	9307      	str	r3, [sp, #28]
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400d16e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400d172:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400d176:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
3400d17a:	f1b8 0f00 	cmp.w	r8, #0
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400d17e:	930e      	str	r3, [sp, #56]	@ 0x38
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
3400d180:	bf14      	ite	ne
3400d182:	f04f 63a0 	movne.w	r3, #83886080	@ 0x5000000
3400d186:	f04f 6380 	moveq.w	r3, #67108864	@ 0x4000000
3400d18a:	9313      	str	r3, [sp, #76]	@ 0x4c
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
3400d18c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3400d190:	9315      	str	r3, [sp, #84]	@ 0x54
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
3400d192:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
3400d196:	3f01      	subs	r7, #1
 #if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d198:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d19c:	4628      	mov	r0, r5
3400d19e:	a905      	add	r1, sp, #20
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
3400d1a0:	9716      	str	r7, [sp, #88]	@ 0x58
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
3400d1a2:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d1a4:	f00e fc24 	bl	3401b9f0 <HAL_XSPI_Command>
3400d1a8:	b120      	cbz	r0, 3400d1b4 <APS256XX_EnableMemoryMappedMode+0x80>
  {
    return APS256XX_ERROR;
3400d1aa:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return APS256XX_ERROR;
  }

  return APS256XX_OK;
}
3400d1ae:	b018      	add	sp, #96	@ 0x60
3400d1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400d1b4:	2301      	movs	r3, #1
3400d1b6:	9305      	str	r3, [sp, #20]
  sCommand.Instruction   = ((BurstType == 0U) ? APS256XX_READ_LINEAR_BURST_CMD : APS256XX_READ_CMD);
3400d1b8:	fab4 f384 	clz	r3, r4
3400d1bc:	095b      	lsrs	r3, r3, #5
3400d1be:	015b      	lsls	r3, r3, #5
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
3400d1c0:	3e01      	subs	r6, #1
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d1c2:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d1c6:	4628      	mov	r0, r5
3400d1c8:	a905      	add	r1, sp, #20
  sCommand.Instruction   = ((BurstType == 0U) ? APS256XX_READ_LINEAR_BURST_CMD : APS256XX_READ_CMD);
3400d1ca:	9307      	str	r3, [sp, #28]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
3400d1cc:	9616      	str	r6, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d1ce:	f00e fc0f 	bl	3401b9f0 <HAL_XSPI_Command>
3400d1d2:	2800      	cmp	r0, #0
3400d1d4:	d1e9      	bne.n	3400d1aa <APS256XX_EnableMemoryMappedMode+0x76>
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400d1d6:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
3400d1d8:	a901      	add	r1, sp, #4
3400d1da:	4628      	mov	r0, r5
3400d1dc:	f00e fe36 	bl	3401be4c <HAL_XSPI_MemoryMapped>
3400d1e0:	3800      	subs	r0, #0
3400d1e2:	bf18      	it	ne
3400d1e4:	2001      	movne	r0, #1
3400d1e6:	4240      	negs	r0, r0
3400d1e8:	e7e1      	b.n	3400d1ae <APS256XX_EnableMemoryMappedMode+0x7a>

3400d1ea <APS256XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS256XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
3400d1ea:	b530      	push	{r4, r5, lr}
3400d1ec:	b097      	sub	sp, #92	@ 0x5c
3400d1ee:	460d      	mov	r5, r1
3400d1f0:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef sCommand = {0};
3400d1f2:	2100      	movs	r1, #0
{
3400d1f4:	f88d 2007 	strb.w	r2, [sp, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
3400d1f8:	a803      	add	r0, sp, #12
3400d1fa:	224c      	movs	r2, #76	@ 0x4c
3400d1fc:	f014 fa8a 	bl	34021714 <memset>
  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
  sCommand.Instruction         = APS256XX_WRITE_REG_CMD;
3400d200:	23c0      	movs	r3, #192	@ 0xc0
3400d202:	2204      	movs	r2, #4
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400d204:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  sCommand.Instruction         = APS256XX_WRITE_REG_CMD;
3400d208:	e9cd 3205 	strd	r3, r2, [sp, #20]
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400d20c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400d210:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400d214:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400d218:	930c      	str	r3, [sp, #48]	@ 0x30
  sCommand.Address             = Address;
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
3400d21a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  sCommand.Address             = Address;
3400d21e:	9509      	str	r5, [sp, #36]	@ 0x24
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
3400d220:	9311      	str	r3, [sp, #68]	@ 0x44
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
  sCommand.DataLength          = 2;
3400d222:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
3400d226:	2302      	movs	r3, #2
 #if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d228:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d22c:	4620      	mov	r0, r4
3400d22e:	a903      	add	r1, sp, #12
  sCommand.DataLength          = 2;
3400d230:	e9cd 3512 	strd	r3, r5, [sp, #72]	@ 0x48
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d234:	f00e fbdc 	bl	3401b9f0 <HAL_XSPI_Command>
3400d238:	b960      	cbnz	r0, 3400d254 <APS256XX_WriteReg+0x6a>
  {
    return APS256XX_ERROR;
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d23a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d23e:	4620      	mov	r0, r4
3400d240:	f10d 0107 	add.w	r1, sp, #7
3400d244:	f00e fcec 	bl	3401bc20 <HAL_XSPI_Transmit>
3400d248:	3800      	subs	r0, #0
3400d24a:	bf18      	it	ne
3400d24c:	2001      	movne	r0, #1
3400d24e:	4240      	negs	r0, r0
  {
    return APS256XX_ERROR;
  }

  return APS256XX_OK;
}
3400d250:	b017      	add	sp, #92	@ 0x5c
3400d252:	bd30      	pop	{r4, r5, pc}
    return APS256XX_ERROR;
3400d254:	f04f 30ff 	mov.w	r0, #4294967295
3400d258:	e7fa      	b.n	3400d250 <APS256XX_WriteReg+0x66>

3400d25a <MX66UW1G45G_GetFlashInfo>:
  */
int32_t MX66UW1G45G_GetFlashInfo(MX66UW1G45G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize = MX66UW1G45G_FLASH_SIZE;
  pInfo->EraseSectorSize = MX66UW1G45G_BLOCK_64K;
3400d25a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
3400d25e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3400d262:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_64K);
  pInfo->EraseSubSectorSize = MX66UW1G45G_BLOCK_4K;
3400d266:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400d26a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400d26e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
3400d272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  pInfo->EraseSubSector1Size = MX66UW1G45G_BLOCK_4K;
  pInfo->EraseSubSector1Number = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
  pInfo->ProgPageSize = MX66UW1G45G_PAGE_SIZE;
  pInfo->ProgPagesNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_PAGE_SIZE);
3400d276:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size = MX66UW1G45G_BLOCK_4K;
3400d27a:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
3400d27e:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_PAGE_SIZE);
3400d280:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
3400d284:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX66UW1G45G_OK;
};
3400d288:	2000      	movs	r0, #0
3400d28a:	4770      	bx	lr

3400d28c <MX66UW1G45G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX66UW1G45G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                        MX66UW1G45G_Transfer_t Rate)
{
3400d28c:	b570      	push	{r4, r5, r6, lr}
3400d28e:	460d      	mov	r5, r1
3400d290:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef s_command = {0};
3400d292:	2100      	movs	r1, #0
{
3400d294:	4606      	mov	r6, r0
3400d296:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d298:	a805      	add	r0, sp, #20
3400d29a:	224c      	movs	r2, #76	@ 0x4c
3400d29c:	f014 fa3a 	bl	34021714 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
3400d2a0:	2214      	movs	r2, #20
3400d2a2:	2100      	movs	r1, #0
3400d2a4:	4668      	mov	r0, sp
3400d2a6:	f014 fa35 	bl	34021714 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400d2aa:	b92d      	cbnz	r5, 3400d2b8 <MX66UW1G45G_AutoPollingMemReady+0x2c>
3400d2ac:	2c01      	cmp	r4, #1
3400d2ae:	d14d      	bne.n	3400d34c <MX66UW1G45G_AutoPollingMemReady+0xc0>
  {
    return MX66UW1G45G_ERROR;
3400d2b0:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d2b4:	b018      	add	sp, #96	@ 0x60
3400d2b6:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d2b8:	2204      	movs	r2, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d2ba:	f104 3cff 	add.w	ip, r4, #4294967295
3400d2be:	f1dc 0300 	rsbs	r3, ip, #0
3400d2c2:	eb43 030c 	adc.w	r3, r3, ip
3400d2c6:	00db      	lsls	r3, r3, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d2c8:	9208      	str	r2, [sp, #32]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d2ca:	930a      	str	r3, [sp, #40]	@ 0x28
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400d2cc:	2d00      	cmp	r5, #0
3400d2ce:	d040      	beq.n	3400d352 <MX66UW1G45G_AutoPollingMemReady+0xc6>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d2d0:	2310      	movs	r3, #16
3400d2d2:	f240 52fa 	movw	r2, #1530	@ 0x5fa
3400d2d6:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400d2d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d2dc:	1e60      	subs	r0, r4, #1
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400d2de:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d2e0:	4243      	negs	r3, r0
3400d2e2:	4143      	adcs	r3, r0
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d2e4:	9207      	str	r2, [sp, #28]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d2e6:	02da      	lsls	r2, r3, #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d2e8:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d2ea:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d2ee:	2d00      	cmp	r5, #0
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d2f0:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d2f2:	bf14      	ite	ne
3400d2f4:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
3400d2f8:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
3400d2fc:	ea4f 63c3 	mov.w	r3, r3, lsl #27
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d300:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d302:	9315      	str	r3, [sp, #84]	@ 0x54
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400d304:	d02d      	beq.n	3400d362 <MX66UW1G45G_AutoPollingMemReady+0xd6>
3400d306:	2c01      	cmp	r4, #1
3400d308:	d126      	bne.n	3400d358 <MX66UW1G45G_AutoPollingMemReady+0xcc>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400d30a:	2305      	movs	r3, #5
3400d30c:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d30e:	2202      	movs	r2, #2
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d310:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400d314:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask = MX66UW1G45G_SR_WIP;
3400d316:	2301      	movs	r3, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400d318:	2110      	movs	r1, #16
  s_config.MatchMask = MX66UW1G45G_SR_WIP;
3400d31a:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400d31c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3400d320:	9214      	str	r2, [sp, #80]	@ 0x50
3400d322:	e9cd 3103 	strd	r3, r1, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d326:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d32a:	4630      	mov	r0, r6
3400d32c:	a905      	add	r1, sp, #20
3400d32e:	f00e fb5f 	bl	3401b9f0 <HAL_XSPI_Command>
3400d332:	2800      	cmp	r0, #0
3400d334:	d1bc      	bne.n	3400d2b0 <MX66UW1G45G_AutoPollingMemReady+0x24>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d336:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d33a:	4669      	mov	r1, sp
3400d33c:	4630      	mov	r0, r6
3400d33e:	f00e fd09 	bl	3401bd54 <HAL_XSPI_AutoPolling>
3400d342:	3800      	subs	r0, #0
3400d344:	bf18      	it	ne
3400d346:	2001      	movne	r0, #1
3400d348:	4240      	negs	r0, r0
3400d34a:	e7b3      	b.n	3400d2b4 <MX66UW1G45G_AutoPollingMemReady+0x28>
3400d34c:	2201      	movs	r2, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d34e:	462b      	mov	r3, r5
3400d350:	e7ba      	b.n	3400d2c8 <MX66UW1G45G_AutoPollingMemReady+0x3c>
3400d352:	2205      	movs	r2, #5
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400d354:	462b      	mov	r3, r5
3400d356:	e7c1      	b.n	3400d2dc <MX66UW1G45G_AutoPollingMemReady+0x50>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400d358:	2304      	movs	r3, #4
3400d35a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d35c:	2201      	movs	r2, #1
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d35e:	2300      	movs	r3, #0
3400d360:	e7d8      	b.n	3400d314 <MX66UW1G45G_AutoPollingMemReady+0x88>
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d362:	2c01      	cmp	r4, #1
3400d364:	d1fa      	bne.n	3400d35c <MX66UW1G45G_AutoPollingMemReady+0xd0>
3400d366:	e7d2      	b.n	3400d30e <MX66UW1G45G_AutoPollingMemReady+0x82>

3400d368 <MX66UW1G45G_EnableSTRMemoryMappedMode>:
  * @param  AddressWidth Address size
  * @retval XSPI memory status
  */
int32_t MX66UW1G45G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                              MX66UW1G45G_AddressWidth_t AddressWidth)
{
3400d368:	b570      	push	{r4, r5, r6, lr}
3400d36a:	460c      	mov	r4, r1
3400d36c:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef s_command = {0};
3400d36e:	2100      	movs	r1, #0
{
3400d370:	4606      	mov	r6, r0
3400d372:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d374:	a805      	add	r0, sp, #20
3400d376:	224c      	movs	r2, #76	@ 0x4c
3400d378:	f014 f9cc 	bl	34021714 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400d37c:	2210      	movs	r2, #16
3400d37e:	2100      	movs	r1, #0
3400d380:	a801      	add	r0, sp, #4
3400d382:	f014 f9c7 	bl	34021714 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX66UW1G45G_OPI_MODE) && (AddressWidth == MX66UW1G45G_3BYTES_SIZE))
3400d386:	2c01      	cmp	r4, #1
3400d388:	d144      	bne.n	3400d414 <MX66UW1G45G_EnableSTRMemoryMappedMode+0xac>
3400d38a:	b91d      	cbnz	r5, 3400d394 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x2c>
  {
    return MX66UW1G45G_ERROR;
3400d38c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d390:	b018      	add	sp, #96	@ 0x60
3400d392:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400d394:	9405      	str	r4, [sp, #20]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d396:	2204      	movs	r2, #4
3400d398:	2310      	movs	r3, #16
3400d39a:	e9cd 2308 	strd	r2, r3, [sp, #32]
3400d39e:	f64e 4213 	movw	r2, #60435	@ 0xec13
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d3a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                               : HAL_XSPI_ADDRESS_32_BITS;
3400d3a6:	2d00      	cmp	r5, #0
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d3a8:	930c      	str	r3, [sp, #48]	@ 0x30
                               : HAL_XSPI_ADDRESS_32_BITS;
3400d3aa:	bf14      	ite	ne
3400d3ac:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
3400d3b0:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d3b4:	2c00      	cmp	r4, #0
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d3b6:	9207      	str	r2, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d3b8:	bf0c      	ite	eq
3400d3ba:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
3400d3be:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.AddressWidth = (AddressWidth == MX66UW1G45G_3BYTES_SIZE)
3400d3c2:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d3c4:	bf0c      	ite	eq
3400d3c6:	2308      	moveq	r3, #8
3400d3c8:	230a      	movne	r3, #10
3400d3ca:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d3cc:	4630      	mov	r0, r6
3400d3ce:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d3d2:	a905      	add	r1, sp, #20
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
3400d3d4:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d3d6:	f00e fb0b 	bl	3401b9f0 <HAL_XSPI_Command>
3400d3da:	2800      	cmp	r0, #0
3400d3dc:	d1d6      	bne.n	3400d38c <MX66UW1G45G_EnableSTRMemoryMappedMode+0x24>
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
3400d3de:	2302      	movs	r3, #2
3400d3e0:	9305      	str	r3, [sp, #20]
                              : MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400d3e2:	bb1c      	cbnz	r4, 3400d42c <MX66UW1G45G_EnableSTRMemoryMappedMode+0xc4>
3400d3e4:	2d00      	cmp	r5, #0
3400d3e6:	bf18      	it	ne
3400d3e8:	2312      	movne	r3, #18
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d3ea:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles = 0U;
3400d3ec:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d3ee:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d3f2:	4630      	mov	r0, r6
3400d3f4:	a905      	add	r1, sp, #20
  s_command.DummyCycles = 0U;
3400d3f6:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d3f8:	f00e fafa 	bl	3401b9f0 <HAL_XSPI_Command>
3400d3fc:	2800      	cmp	r0, #0
3400d3fe:	d1c5      	bne.n	3400d38c <MX66UW1G45G_EnableSTRMemoryMappedMode+0x24>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400d400:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
3400d402:	a901      	add	r1, sp, #4
3400d404:	4630      	mov	r0, r6
3400d406:	f00e fd21 	bl	3401be4c <HAL_XSPI_MemoryMapped>
3400d40a:	3800      	subs	r0, #0
3400d40c:	bf18      	it	ne
3400d40e:	2001      	movne	r0, #1
3400d410:	4240      	negs	r0, r0
3400d412:	e7bd      	b.n	3400d390 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x28>
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400d414:	2301      	movs	r3, #1
3400d416:	9305      	str	r3, [sp, #20]
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400d418:	2c00      	cmp	r4, #0
3400d41a:	d1bc      	bne.n	3400d396 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x2e>
                              : MX66UW1G45G_OCTA_READ_CMD;
3400d41c:	2d00      	cmp	r5, #0
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d41e:	9308      	str	r3, [sp, #32]
                              : MX66UW1G45G_OCTA_READ_CMD;
3400d420:	bf14      	ite	ne
3400d422:	220c      	movne	r2, #12
3400d424:	220b      	moveq	r2, #11
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d426:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400d42a:	e7bc      	b.n	3400d3a6 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x3e>
                              : MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400d42c:	f241 23ed 	movw	r3, #4845	@ 0x12ed
3400d430:	e7db      	b.n	3400d3ea <MX66UW1G45G_EnableSTRMemoryMappedMode+0x82>

3400d432 <MX66UW1G45G_EnableDTRMemoryMappedMode>:
  * @param  AddressWidth Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval XSPI memory status
  */
int32_t MX66UW1G45G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode)
{
3400d432:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400d434:	2510      	movs	r5, #16
{
3400d436:	b099      	sub	sp, #100	@ 0x64
3400d438:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef s_command = {0};
3400d43a:	223c      	movs	r2, #60	@ 0x3c
3400d43c:	2100      	movs	r1, #0
3400d43e:	a806      	add	r0, sp, #24
3400d440:	f014 f968 	bl	34021714 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400d444:	462a      	mov	r2, r5
3400d446:	2100      	movs	r1, #0
3400d448:	a801      	add	r0, sp, #4
3400d44a:	f014 f963 	bl	34021714 <memset>

  /* Initialize the read command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400d44e:	2301      	movs	r3, #1
3400d450:	9305      	str	r3, [sp, #20]
  s_command.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3400d452:	2304      	movs	r3, #4
3400d454:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3400d456:	2308      	movs	r3, #8
  s_command.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
3400d458:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction = MX66UW1G45G_OCTA_READ_DTR_CMD;
3400d45c:	f64e 6311 	movw	r3, #60945	@ 0xee11
3400d460:	9307      	str	r3, [sp, #28]
  s_command.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3400d462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d466:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3400d46a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d46c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400d470:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode = HAL_XSPI_DATA_8_LINES;
3400d474:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles = DUMMY_CYCLES_READ_OCTAL_DTR;
3400d478:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode = HAL_XSPI_DATA_8_LINES;
3400d47c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles = DUMMY_CYCLES_READ_OCTAL_DTR;
3400d47e:	230a      	movs	r3, #10
3400d480:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3400d484:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 #if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d488:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d48c:	4620      	mov	r0, r4
3400d48e:	a905      	add	r1, sp, #20
  s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3400d490:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d492:	f00e faad 	bl	3401b9f0 <HAL_XSPI_Command>
3400d496:	b118      	cbz	r0, 3400d4a0 <MX66UW1G45G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX66UW1G45G_ERROR;
3400d498:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d49c:	b019      	add	sp, #100	@ 0x64
3400d49e:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
3400d4a0:	2302      	movs	r3, #2
3400d4a2:	9305      	str	r3, [sp, #20]
  s_command.Instruction = MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400d4a4:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
3400d4a8:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d4ac:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d4b0:	4620      	mov	r0, r4
3400d4b2:	a905      	add	r1, sp, #20
  s_command.Instruction = MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400d4b4:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d4b6:	f00e fa9b 	bl	3401b9f0 <HAL_XSPI_Command>
3400d4ba:	2800      	cmp	r0, #0
3400d4bc:	d1ec      	bne.n	3400d498 <MX66UW1G45G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400d4be:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
3400d4c0:	a901      	add	r1, sp, #4
3400d4c2:	4620      	mov	r0, r4
3400d4c4:	f00e fcc2 	bl	3401be4c <HAL_XSPI_MemoryMapped>
3400d4c8:	3800      	subs	r0, #0
3400d4ca:	bf18      	it	ne
3400d4cc:	2001      	movne	r0, #1
3400d4ce:	4240      	negs	r0, r0
3400d4d0:	e7e4      	b.n	3400d49c <MX66UW1G45G_EnableDTRMemoryMappedMode+0x6a>

3400d4d2 <MX66UW1G45G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
3400d4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
3400d4d4:	460c      	mov	r4, r1
3400d4d6:	b099      	sub	sp, #100	@ 0x64
  XSPI_RegularCmdTypeDef s_command = {0};
3400d4d8:	2100      	movs	r1, #0
{
3400d4da:	4606      	mov	r6, r0
3400d4dc:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d4de:	a805      	add	r0, sp, #20
3400d4e0:	224c      	movs	r2, #76	@ 0x4c
3400d4e2:	f014 f917 	bl	34021714 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
3400d4e6:	2214      	movs	r2, #20
3400d4e8:	2100      	movs	r1, #0
3400d4ea:	4668      	mov	r0, sp
3400d4ec:	f014 f912 	bl	34021714 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400d4f0:	b92c      	cbnz	r4, 3400d4fe <MX66UW1G45G_WriteEnable+0x2c>
3400d4f2:	2d01      	cmp	r5, #1
3400d4f4:	d15d      	bne.n	3400d5b2 <MX66UW1G45G_WriteEnable+0xe0>
  {
    return MX66UW1G45G_ERROR;
3400d4f6:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d4fa:	b019      	add	sp, #100	@ 0x64
3400d4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d4fe:	2204      	movs	r2, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d500:	1e69      	subs	r1, r5, #1
3400d502:	424b      	negs	r3, r1
3400d504:	414b      	adcs	r3, r1
3400d506:	00db      	lsls	r3, r3, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d508:	9208      	str	r2, [sp, #32]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d50a:	930a      	str	r3, [sp, #40]	@ 0x28
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400d50c:	2c00      	cmp	r4, #0
3400d50e:	d053      	beq.n	3400d5b8 <MX66UW1G45G_WriteEnable+0xe6>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d510:	2310      	movs	r3, #16
3400d512:	9309      	str	r3, [sp, #36]	@ 0x24
                              : MX66UW1G45G_OCTA_WRITE_ENABLE_CMD;
3400d514:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d518:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d51c:	4630      	mov	r0, r6
3400d51e:	a905      	add	r1, sp, #20
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d520:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d522:	f00e fa65 	bl	3401b9f0 <HAL_XSPI_Command>
3400d526:	4603      	mov	r3, r0
3400d528:	2800      	cmp	r0, #0
3400d52a:	d1e4      	bne.n	3400d4f6 <MX66UW1G45G_WriteEnable+0x24>
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d52c:	2c00      	cmp	r4, #0
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d52e:	f105 32ff 	add.w	r2, r5, #4294967295
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d532:	f240 5cfa 	movw	ip, #1530	@ 0x5fa
3400d536:	bf12      	itee	ne
3400d538:	f44f 6e80 	movne.w	lr, #1024	@ 0x400
3400d53c:	f04f 0c05 	moveq.w	ip, #5
3400d540:	f04f 0e00 	moveq.w	lr, #0
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d544:	4257      	negs	r7, r2
3400d546:	4157      	adcs	r7, r2
3400d548:	02ff      	lsls	r7, r7, #11
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d54a:	2c00      	cmp	r4, #0
3400d54c:	d036      	beq.n	3400d5bc <MX66UW1G45G_WriteEnable+0xea>
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400d54e:	2d01      	cmp	r5, #1
3400d550:	d03a      	beq.n	3400d5c8 <MX66UW1G45G_WriteEnable+0xf6>
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d552:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400d556:	2404      	movs	r4, #4
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d558:	2101      	movs	r1, #1
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d55a:	461a      	mov	r2, r3
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d55c:	f44f 5540 	mov.w	r5, #12288	@ 0x3000
3400d560:	950d      	str	r5, [sp, #52]	@ 0x34
  s_command.Address = 0U;
3400d562:	2500      	movs	r5, #0
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d564:	9013      	str	r0, [sp, #76]	@ 0x4c
3400d566:	9114      	str	r1, [sp, #80]	@ 0x50
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d568:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d56a:	4630      	mov	r0, r6
3400d56c:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d570:	a905      	add	r1, sp, #20
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400d572:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
3400d576:	f8cd c01c 	str.w	ip, [sp, #28]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400d57a:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d57e:	970e      	str	r7, [sp, #56]	@ 0x38
  s_command.Address = 0U;
3400d580:	950b      	str	r5, [sp, #44]	@ 0x2c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d582:	f00e fa35 	bl	3401b9f0 <HAL_XSPI_Command>
3400d586:	2800      	cmp	r0, #0
3400d588:	d1b5      	bne.n	3400d4f6 <MX66UW1G45G_WriteEnable+0x24>
  s_config.MatchValue = 2U;
3400d58a:	2302      	movs	r3, #2
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400d58c:	2210      	movs	r2, #16
  s_config.MatchMask = 2U;
3400d58e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400d592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode = HAL_XSPI_MATCH_MODE_AND;
3400d596:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400d598:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d59c:	4669      	mov	r1, sp
3400d59e:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d5a2:	4630      	mov	r0, r6
3400d5a4:	f00e fbd6 	bl	3401bd54 <HAL_XSPI_AutoPolling>
3400d5a8:	1b40      	subs	r0, r0, r5
3400d5aa:	bf18      	it	ne
3400d5ac:	2001      	movne	r0, #1
3400d5ae:	4240      	negs	r0, r0
3400d5b0:	e7a3      	b.n	3400d4fa <MX66UW1G45G_WriteEnable+0x28>
3400d5b2:	2201      	movs	r2, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d5b4:	4623      	mov	r3, r4
3400d5b6:	e7a7      	b.n	3400d508 <MX66UW1G45G_WriteEnable+0x36>
                              : MX66UW1G45G_OCTA_WRITE_ENABLE_CMD;
3400d5b8:	2306      	movs	r3, #6
3400d5ba:	e7ad      	b.n	3400d518 <MX66UW1G45G_WriteEnable+0x46>
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d5bc:	2d01      	cmp	r5, #1
3400d5be:	d00c      	beq.n	3400d5da <MX66UW1G45G_WriteEnable+0x108>
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400d5c0:	4623      	mov	r3, r4
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d5c2:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
3400d5c6:	e7c7      	b.n	3400d558 <MX66UW1G45G_WriteEnable+0x86>
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400d5c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d5cc:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
3400d5d0:	2405      	movs	r4, #5
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d5d2:	2102      	movs	r1, #2
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d5d4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
3400d5d8:	e7c0      	b.n	3400d55c <MX66UW1G45G_WriteEnable+0x8a>
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400d5da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d5de:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
3400d5e2:	e7f6      	b.n	3400d5d2 <MX66UW1G45G_WriteEnable+0x100>

3400d5e4 <MX66UW1G45G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX66UW1G45G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                      MX66UW1G45G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
3400d5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
3400d5e6:	460d      	mov	r5, r1
3400d5e8:	b095      	sub	sp, #84	@ 0x54
3400d5ea:	4606      	mov	r6, r0
3400d5ec:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d5ee:	2100      	movs	r1, #0
3400d5f0:	224c      	movs	r2, #76	@ 0x4c
3400d5f2:	a801      	add	r0, sp, #4
{
3400d5f4:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
3400d5f6:	f014 f88d 	bl	34021714 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400d5fa:	b92d      	cbnz	r5, 3400d608 <MX66UW1G45G_WriteCfg2Register+0x24>
3400d5fc:	2c01      	cmp	r4, #1
3400d5fe:	d140      	bne.n	3400d682 <MX66UW1G45G_WriteCfg2Register+0x9e>
  {
    return MX66UW1G45G_ERROR;
3400d600:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d604:	b015      	add	sp, #84	@ 0x54
3400d606:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d608:	2304      	movs	r3, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d60a:	1e61      	subs	r1, r4, #1
3400d60c:	424a      	negs	r2, r1
3400d60e:	414a      	adcs	r2, r1
3400d610:	00d2      	lsls	r2, r2, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d612:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d614:	9206      	str	r2, [sp, #24]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400d616:	2d00      	cmp	r5, #0
3400d618:	d036      	beq.n	3400d688 <MX66UW1G45G_WriteCfg2Register+0xa4>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d61a:	2310      	movs	r3, #16
3400d61c:	f247 228d 	movw	r2, #29325	@ 0x728d
3400d620:	9305      	str	r3, [sp, #20]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400d626:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d628:	1e63      	subs	r3, r4, #1
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d62a:	9203      	str	r2, [sp, #12]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d62c:	425a      	negs	r2, r3
3400d62e:	415a      	adcs	r2, r3
3400d630:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d632:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d634:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d638:	2d00      	cmp	r5, #0
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d63a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d63c:	bf14      	ite	ne
3400d63e:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
3400d642:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
3400d646:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Address = WriteAddr;
3400d64a:	9707      	str	r7, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d64c:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d64e:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
3400d650:	d01e      	beq.n	3400d690 <MX66UW1G45G_WriteCfg2Register+0xac>
3400d652:	2c01      	cmp	r4, #1
3400d654:	bf0c      	ite	eq
3400d656:	2302      	moveq	r3, #2
3400d658:	2301      	movne	r3, #1
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d65a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d65e:	4630      	mov	r0, r6
3400d660:	a901      	add	r1, sp, #4
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
3400d662:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d664:	f00e f9c4 	bl	3401b9f0 <HAL_XSPI_Command>
3400d668:	2800      	cmp	r0, #0
3400d66a:	d1c9      	bne.n	3400d600 <MX66UW1G45G_WriteCfg2Register+0x1c>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d66c:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d670:	4630      	mov	r0, r6
3400d672:	a91a      	add	r1, sp, #104	@ 0x68
3400d674:	f00e fad4 	bl	3401bc20 <HAL_XSPI_Transmit>
3400d678:	3800      	subs	r0, #0
3400d67a:	bf18      	it	ne
3400d67c:	2001      	movne	r0, #1
3400d67e:	4240      	negs	r0, r0
3400d680:	e7c0      	b.n	3400d604 <MX66UW1G45G_WriteCfg2Register+0x20>
3400d682:	2301      	movs	r3, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d684:	462a      	mov	r2, r5
3400d686:	e7c4      	b.n	3400d612 <MX66UW1G45G_WriteCfg2Register+0x2e>
3400d688:	2272      	movs	r2, #114	@ 0x72
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d68a:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400d68e:	e7ca      	b.n	3400d626 <MX66UW1G45G_WriteCfg2Register+0x42>
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
3400d690:	2301      	movs	r3, #1
3400d692:	e7e2      	b.n	3400d65a <MX66UW1G45G_WriteCfg2Register+0x76>

3400d694 <MX66UW1G45G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX66UW1G45G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                     MX66UW1G45G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
3400d694:	b5f0      	push	{r4, r5, r6, r7, lr}
3400d696:	460d      	mov	r5, r1
3400d698:	b095      	sub	sp, #84	@ 0x54
3400d69a:	4606      	mov	r6, r0
3400d69c:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d69e:	2100      	movs	r1, #0
3400d6a0:	224c      	movs	r2, #76	@ 0x4c
3400d6a2:	a801      	add	r0, sp, #4
{
3400d6a4:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
3400d6a6:	f014 f835 	bl	34021714 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400d6aa:	b92d      	cbnz	r5, 3400d6b8 <MX66UW1G45G_ReadCfg2Register+0x24>
3400d6ac:	2c01      	cmp	r4, #1
3400d6ae:	d144      	bne.n	3400d73a <MX66UW1G45G_ReadCfg2Register+0xa6>
  {
    return MX66UW1G45G_ERROR;
3400d6b0:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d6b4:	b015      	add	sp, #84	@ 0x54
3400d6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d6b8:	2304      	movs	r3, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d6ba:	1e61      	subs	r1, r4, #1
3400d6bc:	424a      	negs	r2, r1
3400d6be:	414a      	adcs	r2, r1
3400d6c0:	00d2      	lsls	r2, r2, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d6c2:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d6c4:	9206      	str	r2, [sp, #24]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400d6c6:	2d00      	cmp	r5, #0
3400d6c8:	d03a      	beq.n	3400d740 <MX66UW1G45G_ReadCfg2Register+0xac>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d6ca:	2310      	movs	r3, #16
3400d6cc:	f247 128e 	movw	r2, #29070	@ 0x718e
3400d6d0:	9305      	str	r3, [sp, #20]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d6d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400d6d6:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d6d8:	1e63      	subs	r3, r4, #1
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d6da:	9203      	str	r2, [sp, #12]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d6dc:	425a      	negs	r2, r3
3400d6de:	415a      	adcs	r2, r3
3400d6e0:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d6e2:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d6e4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d6e8:	2d00      	cmp	r5, #0
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d6ea:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d6ec:	bf14      	ite	ne
3400d6ee:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
3400d6f2:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
3400d6f6:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Address = ReadAddr;
3400d6fa:	9707      	str	r7, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d6fc:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d6fe:	9211      	str	r2, [sp, #68]	@ 0x44
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400d700:	d027      	beq.n	3400d752 <MX66UW1G45G_ReadCfg2Register+0xbe>
3400d702:	2c01      	cmp	r4, #1
3400d704:	d120      	bne.n	3400d748 <MX66UW1G45G_ReadCfg2Register+0xb4>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400d706:	2305      	movs	r3, #5
3400d708:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d70a:	2202      	movs	r2, #2
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d70c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400d710:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d712:	4630      	mov	r0, r6
3400d714:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d718:	a901      	add	r1, sp, #4
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d71a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d71c:	f00e f968 	bl	3401b9f0 <HAL_XSPI_Command>
3400d720:	2800      	cmp	r0, #0
3400d722:	d1c5      	bne.n	3400d6b0 <MX66UW1G45G_ReadCfg2Register+0x1c>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d724:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d728:	4630      	mov	r0, r6
3400d72a:	991a      	ldr	r1, [sp, #104]	@ 0x68
3400d72c:	f00e fabc 	bl	3401bca8 <HAL_XSPI_Receive>
3400d730:	3800      	subs	r0, #0
3400d732:	bf18      	it	ne
3400d734:	2001      	movne	r0, #1
3400d736:	4240      	negs	r0, r0
3400d738:	e7bc      	b.n	3400d6b4 <MX66UW1G45G_ReadCfg2Register+0x20>
3400d73a:	2301      	movs	r3, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d73c:	462a      	mov	r2, r5
3400d73e:	e7c0      	b.n	3400d6c2 <MX66UW1G45G_ReadCfg2Register+0x2e>
3400d740:	2271      	movs	r2, #113	@ 0x71
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d742:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400d746:	e7c6      	b.n	3400d6d6 <MX66UW1G45G_ReadCfg2Register+0x42>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400d748:	2304      	movs	r3, #4
3400d74a:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d74c:	2201      	movs	r2, #1
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d74e:	2300      	movs	r3, #0
3400d750:	e7de      	b.n	3400d710 <MX66UW1G45G_ReadCfg2Register+0x7c>
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d752:	2c01      	cmp	r4, #1
3400d754:	d1fa      	bne.n	3400d74c <MX66UW1G45G_ReadCfg2Register+0xb8>
3400d756:	e7d8      	b.n	3400d70a <MX66UW1G45G_ReadCfg2Register+0x76>

3400d758 <MX66UW1G45G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
3400d758:	b570      	push	{r4, r5, r6, lr}
3400d75a:	460d      	mov	r5, r1
3400d75c:	b094      	sub	sp, #80	@ 0x50
3400d75e:	4606      	mov	r6, r0
3400d760:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d762:	2100      	movs	r1, #0
3400d764:	224c      	movs	r2, #76	@ 0x4c
3400d766:	a801      	add	r0, sp, #4
3400d768:	f013 ffd4 	bl	34021714 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400d76c:	b9d5      	cbnz	r5, 3400d7a4 <MX66UW1G45G_ResetEnable+0x4c>
3400d76e:	2c01      	cmp	r4, #1
3400d770:	d01c      	beq.n	3400d7ac <MX66UW1G45G_ResetEnable+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect =  HAL_XSPI_SELECT_IO_3_0;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400d772:	2301      	movs	r3, #1
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d774:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
                                     ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d776:	1e63      	subs	r3, r4, #1
3400d778:	425c      	negs	r4, r3
3400d77a:	415c      	adcs	r4, r3
3400d77c:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d77e:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
                                   ? HAL_XSPI_INSTRUCTION_8_BITS
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400d780:	b195      	cbz	r5, 3400d7a8 <MX66UW1G45G_ResetEnable+0x50>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d782:	2310      	movs	r3, #16
3400d784:	9305      	str	r3, [sp, #20]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
                              ? MX66UW1G45G_RESET_ENABLE_CMD
                              : MX66UW1G45G_OCTA_RESET_ENABLE_CMD;
3400d786:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.DummyCycles = 0U;
  s_command.DQSMode = HAL_XSPI_DQS_DISABLE;


  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d78a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d78e:	4630      	mov	r0, r6
3400d790:	a901      	add	r1, sp, #4
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d792:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d794:	f00e f92c 	bl	3401b9f0 <HAL_XSPI_Command>
3400d798:	3800      	subs	r0, #0
3400d79a:	bf18      	it	ne
3400d79c:	2001      	movne	r0, #1
3400d79e:	4240      	negs	r0, r0
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d7a0:	b014      	add	sp, #80	@ 0x50
3400d7a2:	bd70      	pop	{r4, r5, r6, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400d7a4:	2304      	movs	r3, #4
3400d7a6:	e7e5      	b.n	3400d774 <MX66UW1G45G_ResetEnable+0x1c>
                              : MX66UW1G45G_OCTA_RESET_ENABLE_CMD;
3400d7a8:	2366      	movs	r3, #102	@ 0x66
3400d7aa:	e7ee      	b.n	3400d78a <MX66UW1G45G_ResetEnable+0x32>
    return MX66UW1G45G_ERROR;
3400d7ac:	f04f 30ff 	mov.w	r0, #4294967295
3400d7b0:	e7f6      	b.n	3400d7a0 <MX66UW1G45G_ResetEnable+0x48>

3400d7b2 <MX66UW1G45G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
3400d7b2:	b570      	push	{r4, r5, r6, lr}
3400d7b4:	460d      	mov	r5, r1
3400d7b6:	b094      	sub	sp, #80	@ 0x50
3400d7b8:	4606      	mov	r6, r0
3400d7ba:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d7bc:	2100      	movs	r1, #0
3400d7be:	224c      	movs	r2, #76	@ 0x4c
3400d7c0:	a801      	add	r0, sp, #4
3400d7c2:	f013 ffa7 	bl	34021714 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400d7c6:	b9bd      	cbnz	r5, 3400d7f8 <MX66UW1G45G_ResetMemory+0x46>
3400d7c8:	2c01      	cmp	r4, #1
3400d7ca:	d01d      	beq.n	3400d808 <MX66UW1G45G_ResetMemory+0x56>
3400d7cc:	2301      	movs	r3, #1
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
                                     ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d7ce:	462c      	mov	r4, r5
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d7d0:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d7d2:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
                                   ? HAL_XSPI_INSTRUCTION_8_BITS
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400d7d4:	b1b5      	cbz	r5, 3400d804 <MX66UW1G45G_ResetMemory+0x52>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d7d6:	2310      	movs	r3, #16
3400d7d8:	9305      	str	r3, [sp, #20]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
                              ? MX66UW1G45G_RESET_MEMORY_CMD
                              : MX66UW1G45G_OCTA_RESET_MEMORY_CMD;
3400d7da:	f649 1366 	movw	r3, #39270	@ 0x9966
 #if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d7de:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d7e2:	4630      	mov	r0, r6
3400d7e4:	a901      	add	r1, sp, #4
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d7e6:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d7e8:	f00e f902 	bl	3401b9f0 <HAL_XSPI_Command>
3400d7ec:	3800      	subs	r0, #0
3400d7ee:	bf18      	it	ne
3400d7f0:	2001      	movne	r0, #1
3400d7f2:	4240      	negs	r0, r0
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d7f4:	b014      	add	sp, #80	@ 0x50
3400d7f6:	bd70      	pop	{r4, r5, r6, pc}
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d7f8:	1e63      	subs	r3, r4, #1
3400d7fa:	425c      	negs	r4, r3
3400d7fc:	415c      	adcs	r4, r3
3400d7fe:	00e4      	lsls	r4, r4, #3
3400d800:	2304      	movs	r3, #4
3400d802:	e7e5      	b.n	3400d7d0 <MX66UW1G45G_ResetMemory+0x1e>
                              : MX66UW1G45G_OCTA_RESET_MEMORY_CMD;
3400d804:	2399      	movs	r3, #153	@ 0x99
3400d806:	e7ea      	b.n	3400d7de <MX66UW1G45G_ResetMemory+0x2c>
    return MX66UW1G45G_ERROR;
3400d808:	f04f 30ff 	mov.w	r0, #4294967295
3400d80c:	e7f2      	b.n	3400d7f4 <MX66UW1G45G_ResetMemory+0x42>
	...

3400d810 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400d810:	4b04      	ldr	r3, [pc, #16]	@ (3400d824 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400d812:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400d814:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400d818:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400d81c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400d81e:	9b01      	ldr	r3, [sp, #4]
}
3400d820:	b002      	add	sp, #8
3400d822:	4770      	bx	lr
3400d824:	56028000 	.word	0x56028000

3400d828 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
3400d828:	b570      	push	{r4, r5, r6, lr}
3400d82a:	4604      	mov	r4, r0
3400d82c:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
3400d82e:	2020      	movs	r0, #32
3400d830:	f7ff ffee 	bl	3400d810 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
3400d834:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3400d836:	2610      	movs	r6, #16
  GPIO_InitTypeDef  gpio_init_structure = {0};
3400d838:	9303      	str	r3, [sp, #12]
3400d83a:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3400d83c:	2301      	movs	r3, #1
3400d83e:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3400d842:	2303      	movs	r3, #3
  HAL_GPIO_Init (SMPS_GPIO_PORT, &gpio_init_structure);
3400d844:	4d06      	ldr	r5, [pc, #24]	@ (3400d860 <BSP_SMPS_Init+0x38>)
3400d846:	a901      	add	r1, sp, #4
3400d848:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3400d84a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init (SMPS_GPIO_PORT, &gpio_init_structure);
3400d84c:	f004 ff28 	bl	340126a0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
3400d850:	4622      	mov	r2, r4
3400d852:	4631      	mov	r1, r6
3400d854:	4628      	mov	r0, r5
3400d856:	f005 fa7b 	bl	34012d50 <HAL_GPIO_WritePin>
}
3400d85a:	b006      	add	sp, #24
3400d85c:	bd70      	pop	{r4, r5, r6, pc}
3400d85e:	bf00      	nop
3400d860:	56021400 	.word	0x56021400

3400d864 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
3400d864:	b570      	push	{r4, r5, r6, lr}
3400d866:	4604      	mov	r4, r0
3400d868:	b086      	sub	sp, #24
3400d86a:	460d      	mov	r5, r1
  GPIO_InitTypeDef             gpio_init_structure       = {0};
3400d86c:	2214      	movs	r2, #20
3400d86e:	2100      	movs	r1, #0
3400d870:	a801      	add	r0, sp, #4
3400d872:	f013 ff4f 	bl	34021714 <memset>
                                                            BSP_BUTTON_TAMP_IT_PRIORITY};
  static const uint32_t        BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER1_EXTI_LINE,
                                                            BUTTON_TAMP_EXTI_LINE};

  /* Enable the BUTTON clock */
  if (Button == BUTTON_USER1)
3400d876:	b9ac      	cbnz	r4, 3400d8a4 <BSP_PB_Init+0x40>
  {
    BUTTON_USER1_GPIO_CLK_ENABLE();
3400d878:	2004      	movs	r0, #4
  }
  else /* BUTTON_TAMP */
  {
    BUTTON_TAMP_GPIO_CLK_ENABLE();
3400d87a:	f7ff ffc9 	bl	3400d810 <LL_AHB4_GRP1_EnableClock>
  }
  gpio_init_structure.Pin   = BUTTON_PIN [Button];
3400d87e:	4b21      	ldr	r3, [pc, #132]	@ (3400d904 <BSP_PB_Init+0xa0>)
  gpio_init_structure.Pull  = GPIO_PULLDOWN;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
3400d880:	2600      	movs	r6, #0
  gpio_init_structure.Pin   = BUTTON_PIN [Button];
3400d882:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
3400d886:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
3400d888:	2302      	movs	r3, #2
3400d88a:	e9cd 3603 	strd	r3, r6, [sp, #12]

  if(ButtonMode == BUTTON_MODE_GPIO)
3400d88e:	b95d      	cbnz	r5, 3400d8a8 <BSP_PB_Init+0x44>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
3400d890:	4b1d      	ldr	r3, [pc, #116]	@ (3400d908 <BSP_PB_Init+0xa4>)
3400d892:	a901      	add	r1, sp, #4
3400d894:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
3400d898:	9502      	str	r5, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
3400d89a:	f004 ff01 	bl	340126a0 <HAL_GPIO_Init>
  {
    /* Bad value of ButtonMode parameter */
    return BSP_ERROR_WRONG_PARAM;
  }

  return BSP_ERROR_NONE;
3400d89e:	2000      	movs	r0, #0
}
3400d8a0:	b006      	add	sp, #24
3400d8a2:	bd70      	pop	{r4, r5, r6, pc}
    BUTTON_TAMP_GPIO_CLK_ENABLE();
3400d8a4:	2010      	movs	r0, #16
3400d8a6:	e7e8      	b.n	3400d87a <BSP_PB_Init+0x16>
  else if(ButtonMode == BUTTON_MODE_EXTI)
3400d8a8:	2d01      	cmp	r5, #1
3400d8aa:	d127      	bne.n	3400d8fc <BSP_PB_Init+0x98>
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
3400d8ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
3400d8b0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
3400d8b2:	4b15      	ldr	r3, [pc, #84]	@ (3400d908 <BSP_PB_Init+0xa4>)
3400d8b4:	a901      	add	r1, sp, #4
3400d8b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
3400d8ba:	f004 fef1 	bl	340126a0 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
3400d8be:	230c      	movs	r3, #12
3400d8c0:	4d12      	ldr	r5, [pc, #72]	@ (3400d90c <BSP_PB_Init+0xa8>)
3400d8c2:	fb03 5504 	mla	r5, r3, r4, r5
3400d8c6:	4b12      	ldr	r3, [pc, #72]	@ (3400d910 <BSP_PB_Init+0xac>)
3400d8c8:	4628      	mov	r0, r5
3400d8ca:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
3400d8ce:	f004 fd67 	bl	340123a0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
3400d8d2:	4b10      	ldr	r3, [pc, #64]	@ (3400d914 <BSP_PB_Init+0xb0>)
3400d8d4:	4631      	mov	r1, r6
3400d8d6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
3400d8da:	4628      	mov	r0, r5
3400d8dc:	f004 fd52 	bl	34012384 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
3400d8e0:	4b0d      	ldr	r3, [pc, #52]	@ (3400d918 <BSP_PB_Init+0xb4>)
3400d8e2:	4632      	mov	r2, r6
3400d8e4:	f933 5014 	ldrsh.w	r5, [r3, r4, lsl #1]
3400d8e8:	4b0c      	ldr	r3, [pc, #48]	@ (3400d91c <BSP_PB_Init+0xb8>)
3400d8ea:	4628      	mov	r0, r5
3400d8ec:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
3400d8f0:	f001 fdd6 	bl	3400f4a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
3400d8f4:	4628      	mov	r0, r5
3400d8f6:	f001 fe31 	bl	3400f55c <HAL_NVIC_EnableIRQ>
3400d8fa:	e7d0      	b.n	3400d89e <BSP_PB_Init+0x3a>
    return BSP_ERROR_WRONG_PARAM;
3400d8fc:	f06f 0001 	mvn.w	r0, #1
3400d900:	e7ce      	b.n	3400d8a0 <BSP_PB_Init+0x3c>
3400d902:	bf00      	nop
3400d904:	340c86dc 	.word	0x340c86dc
3400d908:	340c86e0 	.word	0x340c86e0
3400d90c:	340da30c 	.word	0x340da30c
3400d910:	340c86d0 	.word	0x340c86d0
3400d914:	340c86c8 	.word	0x340c86c8
3400d918:	340c86d8 	.word	0x340c86d8
3400d91c:	340c86c0 	.word	0x340c86c0

3400d920 <BSP_PB_GetState>:
  *            @arg  BUTTON_USER2: User2 Push Button
  *            @arg  BUTTON_TAMP : TAMP Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
3400d920:	b508      	push	{r3, lr}
  return (uint32_t) HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
3400d922:	4b04      	ldr	r3, [pc, #16]	@ (3400d934 <BSP_PB_GetState+0x14>)
3400d924:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
3400d928:	4b03      	ldr	r3, [pc, #12]	@ (3400d938 <BSP_PB_GetState+0x18>)
3400d92a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
3400d92e:	f005 f9fd 	bl	34012d2c <HAL_GPIO_ReadPin>
}
3400d932:	bd08      	pop	{r3, pc}
3400d934:	340c86dc 	.word	0x340c86dc
3400d938:	340c86e0 	.word	0x340c86e0

3400d93c <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
3400d93c:	4770      	bx	lr

3400d93e <BUTTON_TAMP_EXTI_Callback>:
{
3400d93e:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_TAMP);
3400d940:	2001      	movs	r0, #1
3400d942:	f7ff fffb 	bl	3400d93c <BSP_PB_Callback>
}
3400d946:	bd08      	pop	{r3, pc}

3400d948 <BUTTON_USER1_EXTI_Callback>:
{
3400d948:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER1);
3400d94a:	2000      	movs	r0, #0
3400d94c:	f7ff fff6 	bl	3400d93c <BSP_PB_Callback>
}
3400d950:	bd08      	pop	{r3, pc}
	...

3400d954 <MX_USART1_Init>:
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
  /* USART configuration */
  huart->Instance          = COM_UART[COM1];
3400d954:	4a09      	ldr	r2, [pc, #36]	@ (3400d97c <MX_USART1_Init+0x28>)
3400d956:	6812      	ldr	r2, [r2, #0]
3400d958:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate     = COM_Init->BaudRate;
3400d95a:	680a      	ldr	r2, [r1, #0]
3400d95c:	6042      	str	r2, [r0, #4]
  huart->Init.Mode         = UART_MODE_TX_RX;
3400d95e:	220c      	movs	r2, #12
3400d960:	6142      	str	r2, [r0, #20]
  huart->Init.Parity       = (uint32_t)COM_Init->Parity;
3400d962:	894a      	ldrh	r2, [r1, #10]
3400d964:	6102      	str	r2, [r0, #16]
  huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
3400d966:	684a      	ldr	r2, [r1, #4]
3400d968:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
3400d96a:	890a      	ldrh	r2, [r1, #8]
3400d96c:	60c2      	str	r2, [r0, #12]
  huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
3400d96e:	898a      	ldrh	r2, [r1, #12]
3400d970:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_8;
3400d972:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400d976:	61c2      	str	r2, [r0, #28]

  return HAL_UART_Init(huart);
3400d978:	f00d bccc 	b.w	3401b314 <HAL_UART_Init>
3400d97c:	340d0668 	.word	0x340d0668

3400d980 <MX_USART2_Init>:
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
  /* USART configuration */
  huart->Instance          = COM_UART[COM2];
3400d980:	4a09      	ldr	r2, [pc, #36]	@ (3400d9a8 <MX_USART2_Init+0x28>)
3400d982:	6852      	ldr	r2, [r2, #4]
3400d984:	6002      	str	r2, [r0, #0]
  huart->Init.BaudRate     = COM_Init->BaudRate;
3400d986:	680a      	ldr	r2, [r1, #0]
3400d988:	6042      	str	r2, [r0, #4]
  huart->Init.Mode         = UART_MODE_TX_RX;
3400d98a:	220c      	movs	r2, #12
3400d98c:	6142      	str	r2, [r0, #20]
  huart->Init.Parity       = (uint32_t)COM_Init->Parity;
3400d98e:	894a      	ldrh	r2, [r1, #10]
3400d990:	6102      	str	r2, [r0, #16]
  huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
3400d992:	684a      	ldr	r2, [r1, #4]
3400d994:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
3400d996:	890a      	ldrh	r2, [r1, #8]
3400d998:	60c2      	str	r2, [r0, #12]
  huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
3400d99a:	898a      	ldrh	r2, [r1, #12]
3400d99c:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_8;
3400d99e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400d9a2:	61c2      	str	r2, [r0, #28]

  return HAL_UART_Init(huart);
3400d9a4:	f00d bcb6 	b.w	3401b314 <HAL_UART_Init>
3400d9a8:	340d0668 	.word	0x340d0668

3400d9ac <BSP_COM_Init>:
{
3400d9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(COM >= COMn)
3400d9b0:	2801      	cmp	r0, #1
{
3400d9b2:	4604      	mov	r4, r0
3400d9b4:	460f      	mov	r7, r1
3400d9b6:	b08e      	sub	sp, #56	@ 0x38
  if(COM >= COMn)
3400d9b8:	d870      	bhi.n	3400da9c <BSP_COM_Init+0xf0>
    hcom_uart[COM].Instance = COM_UART[COM];
3400d9ba:	2294      	movs	r2, #148	@ 0x94
3400d9bc:	4b39      	ldr	r3, [pc, #228]	@ (3400daa4 <BSP_COM_Init+0xf8>)
3400d9be:	4342      	muls	r2, r0
3400d9c0:	4939      	ldr	r1, [pc, #228]	@ (3400daa8 <BSP_COM_Init+0xfc>)
3400d9c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    UART_MspInit(&hcom_uart[COM]);
3400d9c6:	4245      	negs	r5, r0
3400d9c8:	f005 0594 	and.w	r5, r5, #148	@ 0x94
    hcom_uart[COM].Instance = COM_UART[COM];
3400d9cc:	508b      	str	r3, [r1, r2]
    UART_MspInit(&hcom_uart[COM]);
3400d9ce:	440d      	add	r5, r1
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
3400d9d0:	4a36      	ldr	r2, [pc, #216]	@ (3400daac <BSP_COM_Init+0x100>)
3400d9d2:	4937      	ldr	r1, [pc, #220]	@ (3400dab0 <BSP_COM_Init+0x104>)
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
3400d9d4:	9207      	str	r2, [sp, #28]
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
3400d9d6:	e9cd 2105 	strd	r2, r1, [sp, #20]
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
3400d9da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3400d9de:	9208      	str	r2, [sp, #32]
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
3400d9e0:	f04f 1240 	mov.w	r2, #4194368	@ 0x400040
3400d9e4:	9202      	str	r2, [sp, #8]
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
3400d9e6:	f240 7207 	movw	r2, #1799	@ 0x707
3400d9ea:	f8ad 2004 	strh.w	r2, [sp, #4]
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
3400d9ee:	4a31      	ldr	r2, [pc, #196]	@ (3400dab4 <BSP_COM_Init+0x108>)
3400d9f0:	4293      	cmp	r3, r2
3400d9f2:	d13a      	bne.n	3400da6a <BSP_COM_Init+0xbe>
  {
    COM = COM1;
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
3400d9f4:	2010      	movs	r0, #16
    COM = COM1;
3400d9f6:	2600      	movs	r6, #0
    COM1_TX_GPIO_CLK_ENABLE();
3400d9f8:	f7ff ff0a 	bl	3400d810 <LL_AHB4_GRP1_EnableClock>
    COM1_RX_GPIO_CLK_ENABLE();
3400d9fc:	f7ff ff08 	bl	3400d810 <LL_AHB4_GRP1_EnableClock>
  WRITE_REG(RCC->APB2ENSR, Periphs);
3400da00:	4b2d      	ldr	r3, [pc, #180]	@ (3400dab8 <BSP_COM_Init+0x10c>)
3400da02:	f8c3 0a6c 	str.w	r0, [r3, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
3400da06:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
3400da0a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
3400da0c:	9b03      	ldr	r3, [sp, #12]
      return;
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
3400da0e:	2302      	movs	r3, #2
3400da10:	2220      	movs	r2, #32
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
3400da12:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
3400da14:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  GPIO_Init.Pull      = GPIO_PULLUP;
3400da18:	2301      	movs	r3, #1
3400da1a:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_Init.Alternate = COM_TX_AF[COM];
3400da1c:	2307      	movs	r3, #7
3400da1e:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
3400da20:	ab0e      	add	r3, sp, #56	@ 0x38
3400da22:	eb03 0886 	add.w	r8, r3, r6, lsl #2
3400da26:	f858 0c24 	ldr.w	r0, [r8, #-36]
3400da2a:	a909      	add	r1, sp, #36	@ 0x24
3400da2c:	f004 fe38 	bl	340126a0 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
3400da30:	ab0e      	add	r3, sp, #56	@ 0x38
3400da32:	eb03 0346 	add.w	r3, r3, r6, lsl #1
3400da36:	f833 3c30 	ldrh.w	r3, [r3, #-48]
  GPIO_Init.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
3400da3a:	f858 0c1c 	ldr.w	r0, [r8, #-28]
  GPIO_Init.Pin       = COM_RX_PIN[COM];
3400da3e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_Init.Alternate = COM_RX_AF[COM];
3400da40:	f106 0338 	add.w	r3, r6, #56	@ 0x38
3400da44:	eb0d 0603 	add.w	r6, sp, r3
3400da48:	f816 3c34 	ldrb.w	r3, [r6, #-52]
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
3400da4c:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_Init.Alternate = COM_RX_AF[COM];
3400da4e:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
3400da50:	f004 fe26 	bl	340126a0 <HAL_GPIO_Init>
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
3400da54:	4639      	mov	r1, r7
3400da56:	4628      	mov	r0, r5
      if (COM == COM1)
3400da58:	b9ec      	cbnz	r4, 3400da96 <BSP_COM_Init+0xea>
        if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
3400da5a:	f7ff ff7b 	bl	3400d954 <MX_USART1_Init>
3400da5e:	b1c0      	cbz	r0, 3400da92 <BSP_COM_Init+0xe6>
          ret = BSP_ERROR_PERIPH_FAILURE;
3400da60:	f06f 0003 	mvn.w	r0, #3
}
3400da64:	b00e      	add	sp, #56	@ 0x38
3400da66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (huart->Instance == COM2_UART)
3400da6a:	4a14      	ldr	r2, [pc, #80]	@ (3400dabc <BSP_COM_Init+0x110>)
3400da6c:	4293      	cmp	r3, r2
3400da6e:	d1f1      	bne.n	3400da54 <BSP_COM_Init+0xa8>
  WRITE_REG(RCC->APB1ENSR1, Periphs);
3400da70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    COM2_TX_GPIO_CLK_ENABLE();
3400da74:	2008      	movs	r0, #8
3400da76:	f7ff fecb 	bl	3400d810 <LL_AHB4_GRP1_EnableClock>
    COM2_RX_GPIO_CLK_ENABLE();
3400da7a:	2020      	movs	r0, #32
3400da7c:	f7ff fec8 	bl	3400d810 <LL_AHB4_GRP1_EnableClock>
3400da80:	4b0d      	ldr	r3, [pc, #52]	@ (3400dab8 <BSP_COM_Init+0x10c>)
    COM = COM2;
3400da82:	2601      	movs	r6, #1
3400da84:	f8c3 2a64 	str.w	r2, [r3, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
3400da88:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
3400da8c:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
3400da8e:	9b04      	ldr	r3, [sp, #16]
}
3400da90:	e7bd      	b.n	3400da0e <BSP_COM_Init+0x62>
  int32_t ret = BSP_ERROR_NONE;
3400da92:	2000      	movs	r0, #0
3400da94:	e7e6      	b.n	3400da64 <BSP_COM_Init+0xb8>
        if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
3400da96:	f7ff ff73 	bl	3400d980 <MX_USART2_Init>
3400da9a:	e7e0      	b.n	3400da5e <BSP_COM_Init+0xb2>
    ret = BSP_ERROR_WRONG_PARAM;
3400da9c:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400daa0:	e7e0      	b.n	3400da64 <BSP_COM_Init+0xb8>
3400daa2:	bf00      	nop
3400daa4:	340d0668 	.word	0x340d0668
3400daa8:	340da1e4 	.word	0x340da1e4
3400daac:	56021000 	.word	0x56021000
3400dab0:	56020c00 	.word	0x56020c00
3400dab4:	52001000 	.word	0x52001000
3400dab8:	56028000 	.word	0x56028000
3400dabc:	50004400 	.word	0x50004400

3400dac0 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400dac0:	4b04      	ldr	r3, [pc, #16]	@ (3400dad4 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400dac2:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400dac4:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400dac8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400dacc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400dace:	9b01      	ldr	r3, [sp, #4]
}
3400dad0:	b002      	add	sp, #8
3400dad2:	4770      	bx	lr
3400dad4:	56028000 	.word	0x56028000

3400dad8 <I2C_GetTiming.constprop.0>:
  * @brief  Compute I2C timing according current I2C clock source and required I2C clock.
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
3400dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400dadc:	b08b      	sub	sp, #44	@ 0x2c
{
  uint32_t ret = 0;
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
3400dade:	b918      	cbnz	r0, 3400dae8 <I2C_GetTiming.constprop.0+0x10>
  uint32_t ret = 0;
3400dae0:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
3400dae2:	b00b      	add	sp, #44	@ 0x2c
3400dae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
3400dae8:	4b6f      	ldr	r3, [pc, #444]	@ (3400dca8 <I2C_GetTiming.constprop.0+0x1d0>)
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
3400daea:	f640 15f6 	movw	r5, #2550	@ 0x9f6
  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
3400daee:	eb03 0350 	add.w	r3, r3, r0, lsr #1
3400daf2:	fbb3 f3f0 	udiv	r3, r3, r0
3400daf6:	9300      	str	r3, [sp, #0]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
3400daf8:	005b      	lsls	r3, r3, #1
3400dafa:	9301      	str	r3, [sp, #4]
3400dafc:	9b00      	ldr	r3, [sp, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
3400dafe:	f04f 0b10 	mov.w	fp, #16
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
3400db02:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
3400db06:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
  if (tsdadel_min <= 0)
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
3400db0a:	4619      	mov	r1, r3
3400db0c:	2300      	movs	r3, #0
3400db0e:	469a      	mov	sl, r3
3400db10:	f8df c19c 	ldr.w	ip, [pc, #412]	@ 3400dcb0 <I2C_GetTiming.constprop.0+0x1d8>
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
3400db14:	f1c4 24ff 	rsb	r4, r4, #4278255360	@ 0xff00ff00
3400db18:	f504 047f 	add.w	r4, r4, #16711680	@ 0xff0000
3400db1c:	34e2      	adds	r4, #226	@ 0xe2
3400db1e:	f8dc 2000 	ldr.w	r2, [ip]
  if (tsdadel_min <= 0)
3400db22:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  if (tsdadel_max <= 0)
3400db26:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
3400db2a:	468e      	mov	lr, r1
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
3400db2c:	2700      	movs	r7, #0
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
3400db2e:	f240 3079 	movw	r0, #889	@ 0x379
3400db32:	4586      	cmp	lr, r0
3400db34:	9702      	str	r7, [sp, #8]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
3400db36:	f107 0701 	add.w	r7, r7, #1
      if (tscldel >= (uint32_t)tscldel_min)
3400db3a:	d950      	bls.n	3400dbde <I2C_GetTiming.constprop.0+0x106>
3400db3c:	2600      	movs	r6, #0
3400db3e:	f04f 0810 	mov.w	r8, #16
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
3400db42:	46b1      	mov	r9, r6
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
3400db44:	42b4      	cmp	r4, r6
3400db46:	d844      	bhi.n	3400dbd2 <I2C_GetTiming.constprop.0+0xfa>
3400db48:	42b5      	cmp	r5, r6
3400db4a:	d342      	bcc.n	3400dbd2 <I2C_GetTiming.constprop.0+0xfa>
          {
            if (presc != prev_presc)
3400db4c:	459b      	cmp	fp, r3
3400db4e:	d040      	beq.n	3400dbd2 <I2C_GetTiming.constprop.0+0xfa>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
3400db50:	2014      	movs	r0, #20
3400db52:	fb00 fb02 	mul.w	fp, r0, r2
3400db56:	4855      	ldr	r0, [pc, #340]	@ (3400dcac <I2C_GetTiming.constprop.0+0x1d4>)
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
3400db58:	3201      	adds	r2, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
3400db5a:	eb00 0a0b 	add.w	sl, r0, fp
3400db5e:	f840 300b 	str.w	r3, [r0, fp]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
3400db62:	9802      	ldr	r0, [sp, #8]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
3400db64:	2a7f      	cmp	r2, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
3400db66:	e9ca 0901 	strd	r0, r9, [sl, #4]
              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
3400db6a:	d92f      	bls.n	3400dbcc <I2C_GetTiming.constprop.0+0xf4>
3400db6c:	f8cc 2000 	str.w	r2, [ip]
  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;

  prev_error = ti2cspeed;

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400db70:	f8dc 3000 	ldr.w	r3, [ip]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400db74:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400db76:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400db78:	f242 7310 	movw	r3, #10000	@ 0x2710
3400db7c:	f04f 32ff 	mov.w	r2, #4294967295
3400db80:	9304      	str	r3, [sp, #16]
3400db82:	9b01      	ldr	r3, [sp, #4]
3400db84:	4949      	ldr	r1, [pc, #292]	@ (3400dcac <I2C_GetTiming.constprop.0+0x1d4>)
3400db86:	3332      	adds	r3, #50	@ 0x32
3400db88:	9309      	str	r3, [sp, #36]	@ 0x24
3400db8a:	9b01      	ldr	r3, [sp, #4]
3400db8c:	f5c3 5e90 	rsb	lr, r3, #4608	@ 0x1200
3400db90:	f10e 0e0c 	add.w	lr, lr, #12
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400db94:	9b06      	ldr	r3, [sp, #24]
3400db96:	429e      	cmp	r6, r3
3400db98:	d12d      	bne.n	3400dbf6 <I2C_GetTiming.constprop.0+0x11e>
        if (idx < I2C_VALID_TIMING_NBR)
3400db9a:	2a7f      	cmp	r2, #127	@ 0x7f
3400db9c:	d8a0      	bhi.n	3400dae0 <I2C_GetTiming.constprop.0+0x8>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400db9e:	2114      	movs	r1, #20
3400dba0:	434a      	muls	r2, r1
3400dba2:	4b42      	ldr	r3, [pc, #264]	@ (3400dcac <I2C_GetTiming.constprop.0+0x1d4>)
3400dba4:	1899      	adds	r1, r3, r2
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
3400dba6:	7c08      	ldrb	r0, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400dba8:	589b      	ldr	r3, [r3, r2]
3400dbaa:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
3400dbae:	684b      	ldr	r3, [r1, #4]
3400dbb0:	051b      	lsls	r3, r3, #20
3400dbb2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400dbb6:	4318      	orrs	r0, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
3400dbb8:	688b      	ldr	r3, [r1, #8]
3400dbba:	041b      	lsls	r3, r3, #16
3400dbbc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400dbc0:	4318      	orrs	r0, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
3400dbc2:	68cb      	ldr	r3, [r1, #12]
3400dbc4:	021b      	lsls	r3, r3, #8
3400dbc6:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400dbc8:	4318      	orrs	r0, r3
  return ret;
3400dbca:	e78a      	b.n	3400dae2 <I2C_GetTiming.constprop.0+0xa>
              prev_presc = presc;
3400dbcc:	469b      	mov	fp, r3
3400dbce:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
3400dbd2:	f1b8 0801 	subs.w	r8, r8, #1
3400dbd6:	f109 0901 	add.w	r9, r9, #1
3400dbda:	440e      	add	r6, r1
3400dbdc:	d1b2      	bne.n	3400db44 <I2C_GetTiming.constprop.0+0x6c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
3400dbde:	2f10      	cmp	r7, #16
3400dbe0:	448e      	add	lr, r1
3400dbe2:	d1a4      	bne.n	3400db2e <I2C_GetTiming.constprop.0+0x56>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
3400dbe4:	9800      	ldr	r0, [sp, #0]
3400dbe6:	3301      	adds	r3, #1
3400dbe8:	2b10      	cmp	r3, #16
3400dbea:	4401      	add	r1, r0
3400dbec:	d19d      	bne.n	3400db2a <I2C_GetTiming.constprop.0+0x52>
3400dbee:	f1ba 0f00 	cmp.w	sl, #0
3400dbf2:	d1bb      	bne.n	3400db6c <I2C_GetTiming.constprop.0+0x94>
3400dbf4:	e7bc      	b.n	3400db70 <I2C_GetTiming.constprop.0+0x98>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3400dbf6:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
3400dbf8:	9800      	ldr	r0, [sp, #0]
3400dbfa:	680b      	ldr	r3, [r1, #0]
3400dbfc:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3400dc00:	9809      	ldr	r0, [sp, #36]	@ 0x24
3400dc02:	ebae 0403 	sub.w	r4, lr, r3
3400dc06:	4418      	add	r0, r3
3400dc08:	9003      	str	r0, [sp, #12]
3400dc0a:	9801      	ldr	r0, [sp, #4]
3400dc0c:	ea4f 0b44 	mov.w	fp, r4, lsl #1
3400dc10:	181d      	adds	r5, r3, r0
3400dc12:	f5a5 5011 	sub.w	r0, r5, #9280	@ 0x2440
3400dc16:	380a      	subs	r0, #10
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
3400dc18:	9c03      	ldr	r4, [sp, #12]
3400dc1a:	9002      	str	r0, [sp, #8]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400dc1c:	f241 205c 	movw	r0, #4700	@ 0x125c
3400dc20:	4284      	cmp	r4, r0
3400dc22:	9708      	str	r7, [sp, #32]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400dc24:	f107 0701 	add.w	r7, r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400dc28:	d935      	bls.n	3400dc96 <I2C_GetTiming.constprop.0+0x1be>
3400dc2a:	9800      	ldr	r0, [sp, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400dc2c:	f1a4 0532 	sub.w	r5, r4, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400dc30:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
3400dc34:	d22f      	bcs.n	3400dc96 <I2C_GetTiming.constprop.0+0x1be>
3400dc36:	9802      	ldr	r0, [sp, #8]
3400dc38:	46d8      	mov	r8, fp
3400dc3a:	1905      	adds	r5, r0, r4
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
3400dc3c:	f44f 7080 	mov.w	r0, #256	@ 0x100
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
3400dc40:	f04f 0900 	mov.w	r9, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400dc44:	f8dd c00c 	ldr.w	ip, [sp, #12]
              ret = count;
3400dc48:	9005      	str	r0, [sp, #20]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
3400dc4a:	f241 0047 	movw	r0, #4167	@ 0x1047
3400dc4e:	f205 6a83 	addw	sl, r5, #1667	@ 0x683
3400dc52:	4582      	cmp	sl, r0
3400dc54:	f8cd 901c 	str.w	r9, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
3400dc58:	f109 0901 	add.w	r9, r9, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
3400dc5c:	d813      	bhi.n	3400dc86 <I2C_GetTiming.constprop.0+0x1ae>
3400dc5e:	f5bc 6f7a 	cmp.w	ip, #4000	@ 0xfa0
3400dc62:	d310      	bcc.n	3400dc86 <I2C_GetTiming.constprop.0+0x1ae>
3400dc64:	9800      	ldr	r0, [sp, #0]
3400dc66:	4560      	cmp	r0, ip
3400dc68:	d20d      	bcs.n	3400dc86 <I2C_GetTiming.constprop.0+0x1ae>
              error = -error;
3400dc6a:	2d00      	cmp	r5, #0
3400dc6c:	bfac      	ite	ge
3400dc6e:	46aa      	movge	sl, r5
3400dc70:	46c2      	movlt	sl, r8
            if ((uint32_t)error < prev_error)
3400dc72:	9804      	ldr	r0, [sp, #16]
3400dc74:	4582      	cmp	sl, r0
3400dc76:	d206      	bcs.n	3400dc86 <I2C_GetTiming.constprop.0+0x1ae>
              I2c_valid_timing[count].scll = scll;
3400dc78:	9a08      	ldr	r2, [sp, #32]
              prev_error = (uint32_t)error;
3400dc7a:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
3400dc7e:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
3400dc80:	9a07      	ldr	r2, [sp, #28]
3400dc82:	60ca      	str	r2, [r1, #12]
              ret = count;
3400dc84:	4632      	mov	r2, r6
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
3400dc86:	9805      	ldr	r0, [sp, #20]
3400dc88:	449c      	add	ip, r3
3400dc8a:	3801      	subs	r0, #1
3400dc8c:	441d      	add	r5, r3
3400dc8e:	eba8 0803 	sub.w	r8, r8, r3
3400dc92:	9005      	str	r0, [sp, #20]
3400dc94:	d1d9      	bne.n	3400dc4a <I2C_GetTiming.constprop.0+0x172>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3400dc96:	f5b7 7f80 	cmp.w	r7, #256	@ 0x100
3400dc9a:	441c      	add	r4, r3
3400dc9c:	ebab 0b03 	sub.w	fp, fp, r3
3400dca0:	d1bc      	bne.n	3400dc1c <I2C_GetTiming.constprop.0+0x144>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400dca2:	3601      	adds	r6, #1
3400dca4:	3114      	adds	r1, #20
3400dca6:	e775      	b.n	3400db94 <I2C_GetTiming.constprop.0+0xbc>
3400dca8:	3b9aca00 	.word	0x3b9aca00
3400dcac:	340da37c 	.word	0x340da37c
3400dcb0:	340da378 	.word	0x340da378

3400dcb4 <BSP_I2C1_DeInit>:
  I2c1InitCounter--;
3400dcb4:	4a0e      	ldr	r2, [pc, #56]	@ (3400dcf0 <BSP_I2C1_DeInit+0x3c>)
{
3400dcb6:	b508      	push	{r3, lr}
  I2c1InitCounter--;
3400dcb8:	6813      	ldr	r3, [r2, #0]
3400dcba:	3b01      	subs	r3, #1
3400dcbc:	6013      	str	r3, [r2, #0]
  if (I2c1InitCounter == 0U)
3400dcbe:	b10b      	cbz	r3, 3400dcc4 <BSP_I2C1_DeInit+0x10>
  int32_t ret = BSP_ERROR_NONE;
3400dcc0:	2000      	movs	r0, #0
}
3400dcc2:	bd08      	pop	{r3, pc}
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
3400dcc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400dcc8:	480a      	ldr	r0, [pc, #40]	@ (3400dcf4 <BSP_I2C1_DeInit+0x40>)
3400dcca:	f004 ff01 	bl	34012ad0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
3400dcce:	480a      	ldr	r0, [pc, #40]	@ (3400dcf8 <BSP_I2C1_DeInit+0x44>)
3400dcd0:	2102      	movs	r1, #2
3400dcd2:	f004 fefd 	bl	34012ad0 <HAL_GPIO_DeInit>
  WRITE_REG(RCC->APB1ENCR1, Periphs);
3400dcd6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400dcda:	4b08      	ldr	r3, [pc, #32]	@ (3400dcfc <BSP_I2C1_DeInit+0x48>)
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
3400dcdc:	4808      	ldr	r0, [pc, #32]	@ (3400dd00 <BSP_I2C1_DeInit+0x4c>)
3400dcde:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
3400dce2:	f005 fb1b 	bl	3401331c <HAL_I2C_DeInit>
3400dce6:	2800      	cmp	r0, #0
3400dce8:	d0ea      	beq.n	3400dcc0 <BSP_I2C1_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
3400dcea:	f06f 0007 	mvn.w	r0, #7
  return ret;
3400dcee:	e7e8      	b.n	3400dcc2 <BSP_I2C1_DeInit+0xe>
3400dcf0:	340dad7c 	.word	0x340dad7c
3400dcf4:	56021c00 	.word	0x56021c00
3400dcf8:	56020800 	.word	0x56020800
3400dcfc:	56029000 	.word	0x56029000
3400dd00:	340da324 	.word	0x340da324

3400dd04 <MX_I2C1_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
3400dd04:	2300      	movs	r3, #0
3400dd06:	2201      	movs	r2, #1
{
3400dd08:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
3400dd0a:	6041      	str	r1, [r0, #4]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
3400dd0c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
3400dd10:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
3400dd14:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
3400dd18:	6203      	str	r3, [r0, #32]
{
3400dd1a:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
3400dd1c:	f005 fa3c 	bl	34013198 <HAL_I2C_Init>
3400dd20:	4601      	mov	r1, r0
3400dd22:	b108      	cbz	r0, 3400dd28 <MX_I2C1_Init+0x24>
    status = HAL_ERROR;
3400dd24:	2001      	movs	r0, #1
}
3400dd26:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
3400dd28:	4620      	mov	r0, r4
3400dd2a:	f005 fd11 	bl	34013750 <HAL_I2CEx_ConfigAnalogFilter>
3400dd2e:	4601      	mov	r1, r0
3400dd30:	2800      	cmp	r0, #0
3400dd32:	d1f7      	bne.n	3400dd24 <MX_I2C1_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
3400dd34:	4620      	mov	r0, r4
3400dd36:	f005 fd65 	bl	34013804 <HAL_I2CEx_ConfigDigitalFilter>
3400dd3a:	3800      	subs	r0, #0
3400dd3c:	bf18      	it	ne
3400dd3e:	2001      	movne	r0, #1
3400dd40:	e7f1      	b.n	3400dd26 <MX_I2C1_Init+0x22>
	...

3400dd44 <BSP_I2C1_Init>:
{
3400dd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hbus_i2c1.Instance = BUS_I2C1;
3400dd48:	4b28      	ldr	r3, [pc, #160]	@ (3400ddec <BSP_I2C1_Init+0xa8>)
3400dd4a:	4e29      	ldr	r6, [pc, #164]	@ (3400ddf0 <BSP_I2C1_Init+0xac>)
{
3400dd4c:	b086      	sub	sp, #24
  hbus_i2c1.Instance = BUS_I2C1;
3400dd4e:	6033      	str	r3, [r6, #0]
  if (I2c1InitCounter == 0U)
3400dd50:	4b28      	ldr	r3, [pc, #160]	@ (3400ddf4 <BSP_I2C1_Init+0xb0>)
3400dd52:	681a      	ldr	r2, [r3, #0]
3400dd54:	b11a      	cbz	r2, 3400dd5e <BSP_I2C1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
3400dd56:	2000      	movs	r0, #0
}
3400dd58:	b006      	add	sp, #24
3400dd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    I2c1InitCounter++;
3400dd5e:	2201      	movs	r2, #1
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
3400dd60:	4630      	mov	r0, r6
    I2c1InitCounter++;
3400dd62:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
3400dd64:	f005 fcee 	bl	34013744 <HAL_I2C_GetState>
3400dd68:	4604      	mov	r4, r0
3400dd6a:	2800      	cmp	r0, #0
3400dd6c:	d1f3      	bne.n	3400dd56 <BSP_I2C1_Init+0x12>
  HAL_PWREx_EnableVddIO4();
3400dd6e:	f006 fb65 	bl	3401443c <HAL_PWREx_EnableVddIO4>
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
3400dd72:	2080      	movs	r0, #128	@ 0x80
3400dd74:	f7ff fea4 	bl	3400dac0 <LL_AHB4_GRP1_EnableClock>
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
3400dd78:	2004      	movs	r0, #4
3400dd7a:	f7ff fea1 	bl	3400dac0 <LL_AHB4_GRP1_EnableClock>
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400dd7e:	2702      	movs	r7, #2
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400dd80:	f44f 7300 	mov.w	r3, #512	@ 0x200
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
3400dd84:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400dd86:	f04f 0812 	mov.w	r8, #18
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
3400dd8a:	eb0d 0100 	add.w	r1, sp, r0
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
3400dd8e:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
3400dd90:	4819      	ldr	r0, [pc, #100]	@ (3400ddf8 <BSP_I2C1_Init+0xb4>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400dd92:	e9cd 3801 	strd	r3, r8, [sp, #4]
  gpio_init_structure.Pull      = GPIO_NOPULL;
3400dd96:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400dd98:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
3400dd9a:	f004 fc81 	bl	340126a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
3400dd9e:	4817      	ldr	r0, [pc, #92]	@ (3400ddfc <BSP_I2C1_Init+0xb8>)
3400dda0:	eb0d 0105 	add.w	r1, sp, r5
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400dda4:	e9cd 7801 	strd	r7, r8, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400dda8:	e9cd 4703 	strd	r4, r7, [sp, #12]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
3400ddac:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
3400ddae:	f004 fc77 	bl	340126a0 <HAL_GPIO_Init>
  WRITE_REG(RCC->APB1ENSR1, Periphs);
3400ddb2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
3400ddb6:	4a12      	ldr	r2, [pc, #72]	@ (3400de00 <BSP_I2C1_Init+0xbc>)
3400ddb8:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
3400ddbc:	f8d2 1264 	ldr.w	r1, [r2, #612]	@ 0x264
3400ddc0:	9100      	str	r1, [sp, #0]
  (void)tmpreg;
3400ddc2:	9900      	ldr	r1, [sp, #0]
  WRITE_REG(RCC->APB1RSTSR1, Periphs);
3400ddc4:	f8c2 3a24 	str.w	r3, [r2, #2596]	@ 0xa24
  WRITE_REG(RCC->APB1RSTCR1, Periphs);
3400ddc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3400ddcc:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
3400ddd0:	f007 fbea 	bl	340155a8 <HAL_RCC_GetPCLK1Freq>
3400ddd4:	f7ff fe80 	bl	3400dad8 <I2C_GetTiming.constprop.0>
3400ddd8:	4601      	mov	r1, r0
3400ddda:	4630      	mov	r0, r6
3400dddc:	f7ff ff92 	bl	3400dd04 <MX_I2C1_Init>
3400dde0:	2800      	cmp	r0, #0
3400dde2:	d0b8      	beq.n	3400dd56 <BSP_I2C1_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
3400dde4:	f06f 0007 	mvn.w	r0, #7
  return ret;
3400dde8:	e7b6      	b.n	3400dd58 <BSP_I2C1_Init+0x14>
3400ddea:	bf00      	nop
3400ddec:	50005400 	.word	0x50005400
3400ddf0:	340da324 	.word	0x340da324
3400ddf4:	340dad7c 	.word	0x340dad7c
3400ddf8:	56021c00 	.word	0x56021c00
3400ddfc:	56020800 	.word	0x56020800
3400de00:	56028000 	.word	0x56028000

3400de04 <BSP_I2C1_WriteReg16>:
{
3400de04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400de06:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3400de0a:	9200      	str	r2, [sp, #0]
3400de0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400de10:	460a      	mov	r2, r1
3400de12:	2302      	movs	r3, #2
3400de14:	4601      	mov	r1, r0
3400de16:	4808      	ldr	r0, [pc, #32]	@ (3400de38 <BSP_I2C1_WriteReg16+0x34>)
3400de18:	f005 fac8 	bl	340133ac <HAL_I2C_Mem_Write>
    ret = BSP_ERROR_NONE;
3400de1c:	2300      	movs	r3, #0
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400de1e:	b140      	cbz	r0, 3400de32 <BSP_I2C1_WriteReg16+0x2e>
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
3400de20:	4805      	ldr	r0, [pc, #20]	@ (3400de38 <BSP_I2C1_WriteReg16+0x34>)
3400de22:	f005 fc92 	bl	3401374a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
3400de26:	2804      	cmp	r0, #4
3400de28:	bf14      	ite	ne
3400de2a:	f06f 0303 	mvnne.w	r3, #3
3400de2e:	f06f 0365 	mvneq.w	r3, #101	@ 0x65
}
3400de32:	4618      	mov	r0, r3
3400de34:	b004      	add	sp, #16
3400de36:	bd10      	pop	{r4, pc}
3400de38:	340da324 	.word	0x340da324

3400de3c <BSP_I2C1_ReadReg16>:
{
3400de3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400de3e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3400de42:	9200      	str	r2, [sp, #0]
3400de44:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400de48:	460a      	mov	r2, r1
3400de4a:	2302      	movs	r3, #2
3400de4c:	4601      	mov	r1, r0
3400de4e:	4808      	ldr	r0, [pc, #32]	@ (3400de70 <BSP_I2C1_ReadReg16+0x34>)
3400de50:	f005 fb90 	bl	34013574 <HAL_I2C_Mem_Read>
    ret = BSP_ERROR_NONE;
3400de54:	2300      	movs	r3, #0
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400de56:	b140      	cbz	r0, 3400de6a <BSP_I2C1_ReadReg16+0x2e>
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
3400de58:	4805      	ldr	r0, [pc, #20]	@ (3400de70 <BSP_I2C1_ReadReg16+0x34>)
3400de5a:	f005 fc76 	bl	3401374a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
3400de5e:	2804      	cmp	r0, #4
3400de60:	bf14      	ite	ne
3400de62:	f06f 0303 	mvnne.w	r3, #3
3400de66:	f06f 0365 	mvneq.w	r3, #101	@ 0x65
}
3400de6a:	4618      	mov	r0, r3
3400de6c:	b004      	add	sp, #16
3400de6e:	bd10      	pop	{r4, pc}
3400de70:	340da324 	.word	0x340da324

3400de74 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
3400de74:	f011 b832 	b.w	3401eedc <HAL_GetTick>

3400de78 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400de78:	4b04      	ldr	r3, [pc, #16]	@ (3400de8c <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400de7a:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400de7c:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400de80:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400de84:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400de86:	9b01      	ldr	r3, [sp, #4]
}
3400de88:	b002      	add	sp, #8
3400de8a:	4770      	bx	lr
3400de8c:	56028000 	.word	0x56028000

3400de90 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
3400de90:	b918      	cbnz	r0, 3400de9a <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat =  Lcd_Ctx[Instance].PixelFormat;
3400de92:	4b03      	ldr	r3, [pc, #12]	@ (3400dea0 <BSP_LCD_GetPixelFormat+0x10>)
3400de94:	68db      	ldr	r3, [r3, #12]
3400de96:	600b      	str	r3, [r1, #0]
3400de98:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
3400de9a:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
3400de9e:	4770      	bx	lr
3400dea0:	340dad80 	.word	0x340dad80

3400dea4 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
3400dea4:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;
  LTDC_LayerCfgTypeDef *pLayerCfg;

  if(Instance >= LCD_INSTANCES_NBR)
3400dea6:	bb08      	cbnz	r0, 3400deec <BSP_LCD_SetActiveLayer+0x48>
  else
  {
    pLayerCfg = &hlcd_ltdc.LayerCfg[LayerIndex];

    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3400dea8:	2434      	movs	r4, #52	@ 0x34
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
3400deaa:	4b12      	ldr	r3, [pc, #72]	@ (3400def4 <BSP_LCD_SetActiveLayer+0x50>)
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3400deac:	4a12      	ldr	r2, [pc, #72]	@ (3400def8 <BSP_LCD_SetActiveLayer+0x54>)
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
3400deae:	6099      	str	r1, [r3, #8]
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3400deb0:	fb04 2101 	mla	r1, r4, r1, r2
3400deb4:	6e0a      	ldr	r2, [r1, #96]	@ 0x60
3400deb6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize = pLayerCfg->ImageHeight;
3400deb8:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
3400deba:	605a      	str	r2, [r3, #4]

    if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_RGB565)
3400debc:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
3400debe:	2a04      	cmp	r2, #4
3400dec0:	d104      	bne.n	3400decc <BSP_LCD_SetActiveLayer+0x28>
    {
      Lcd_Ctx[Instance].BppFactor = 2;
3400dec2:	2202      	movs	r2, #2
3400dec4:	611a      	str	r2, [r3, #16]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB565;
    }
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_ARGB4444)
    {
      Lcd_Ctx[Instance].BppFactor = 2;
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB4444;
3400dec6:	60da      	str	r2, [r3, #12]
  int32_t ret = BSP_ERROR_NONE;
3400dec8:	2000      	movs	r0, #0
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB8888;
    }
  }

  return ret;
}
3400deca:	bd10      	pop	{r4, pc}
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_ARGB4444)
3400decc:	2a08      	cmp	r2, #8
3400dece:	d103      	bne.n	3400ded8 <BSP_LCD_SetActiveLayer+0x34>
      Lcd_Ctx[Instance].BppFactor = 2;
3400ded0:	2202      	movs	r2, #2
3400ded2:	611a      	str	r2, [r3, #16]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB4444;
3400ded4:	2204      	movs	r2, #4
3400ded6:	e7f6      	b.n	3400dec6 <BSP_LCD_SetActiveLayer+0x22>
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_RGB888)
3400ded8:	2a06      	cmp	r2, #6
3400deda:	d103      	bne.n	3400dee4 <BSP_LCD_SetActiveLayer+0x40>
      Lcd_Ctx[Instance].BppFactor = 3;
3400dedc:	2203      	movs	r2, #3
3400dede:	611a      	str	r2, [r3, #16]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3400dee0:	2201      	movs	r2, #1
3400dee2:	e7f0      	b.n	3400dec6 <BSP_LCD_SetActiveLayer+0x22>
      Lcd_Ctx[Instance].BppFactor = 4;
3400dee4:	2204      	movs	r2, #4
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB8888;
3400dee6:	e9c3 0203 	strd	r0, r2, [r3, #12]
3400deea:	e7ed      	b.n	3400dec8 <BSP_LCD_SetActiveLayer+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
3400deec:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400def0:	e7eb      	b.n	3400deca <BSP_LCD_SetActiveLayer+0x26>
3400def2:	bf00      	nop
3400def4:	340dad80 	.word	0x340dad80
3400def8:	340dada0 	.word	0x340dada0

3400defc <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
3400defc:	b918      	cbnz	r0, 3400df06 <BSP_LCD_GetXSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
3400defe:	4b03      	ldr	r3, [pc, #12]	@ (3400df0c <BSP_LCD_GetXSize+0x10>)
3400df00:	681b      	ldr	r3, [r3, #0]
3400df02:	600b      	str	r3, [r1, #0]
3400df04:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
3400df06:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
3400df0a:	4770      	bx	lr
3400df0c:	340dad80 	.word	0x340dad80

3400df10 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
3400df10:	b918      	cbnz	r0, 3400df1a <BSP_LCD_GetYSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
3400df12:	4b03      	ldr	r3, [pc, #12]	@ (3400df20 <BSP_LCD_GetYSize+0x10>)
3400df14:	685b      	ldr	r3, [r3, #4]
3400df16:	600b      	str	r3, [r1, #0]
3400df18:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
3400df1a:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
3400df1e:	4770      	bx	lr
3400df20:	340dad80 	.word	0x340dad80

3400df24 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
3400df24:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400df26:	2734      	movs	r7, #52	@ 0x34
3400df28:	4d0f      	ldr	r5, [pc, #60]	@ (3400df68 <BSP_LCD_ReadPixel+0x44>)
3400df2a:	0146      	lsls	r6, r0, #5
3400df2c:	eb05 1040 	add.w	r0, r5, r0, lsl #5
3400df30:	6884      	ldr	r4, [r0, #8]
3400df32:	480e      	ldr	r0, [pc, #56]	@ (3400df6c <BSP_LCD_ReadPixel+0x48>)
  {
    /* Read data value from RAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400df34:	59ad      	ldr	r5, [r5, r6]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400df36:	fb07 0004 	mla	r0, r7, r4, r0
3400df3a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400df3c:	fb05 1202 	mla	r2, r5, r2, r1
3400df40:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400df42:	b924      	cbnz	r4, 3400df4e <BSP_LCD_ReadPixel+0x2a>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400df44:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    /* Read data value from RAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
  }

  return BSP_ERROR_NONE;
}
3400df48:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400df4a:	601a      	str	r2, [r3, #0]
}
3400df4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
3400df4e:	2c06      	cmp	r4, #6
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400df50:	bf05      	ittet	eq
3400df52:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
3400df56:	5812      	ldreq	r2, [r2, r0]
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400df58:	f830 2012 	ldrhne.w	r2, [r0, r2, lsl #1]
    *Color = CONVERTARGB88882RGB888(*Color);
3400df5c:	f022 427f 	biceq.w	r2, r2, #4278190080	@ 0xff000000
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400df60:	bf18      	it	ne
3400df62:	b292      	uxthne	r2, r2
3400df64:	e7f0      	b.n	3400df48 <BSP_LCD_ReadPixel+0x24>
3400df66:	bf00      	nop
3400df68:	340dad80 	.word	0x340dad80
3400df6c:	340dada0 	.word	0x340dada0

3400df70 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
3400df70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400df74:	2734      	movs	r7, #52	@ 0x34
3400df76:	4e24      	ldr	r6, [pc, #144]	@ (3400e008 <BSP_LCD_WritePixel+0x98>)
3400df78:	ea4f 1c40 	mov.w	ip, r0, lsl #5
3400df7c:	eb06 1040 	add.w	r0, r6, r0, lsl #5
3400df80:	6884      	ldr	r4, [r0, #8]
3400df82:	4d22      	ldr	r5, [pc, #136]	@ (3400e00c <BSP_LCD_WritePixel+0x9c>)
3400df84:	fb07 5404 	mla	r4, r7, r4, r5
3400df88:	f8d4 8048 	ldr.w	r8, [r4, #72]	@ 0x48
  {
    /* Write data value to RAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
3400df8c:	f8d4 e05c 	ldr.w	lr, [r4, #92]	@ 0x5c
3400df90:	f856 400c 	ldr.w	r4, [r6, ip]
3400df94:	fb04 1402 	mla	r4, r4, r2, r1
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400df98:	f1b8 0f00 	cmp.w	r8, #0
3400df9c:	d104      	bne.n	3400dfa8 <BSP_LCD_WritePixel+0x38>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
3400df9e:	f84e 3024 	str.w	r3, [lr, r4, lsl #2]
    /* Write data value to RAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
  }

  return BSP_ERROR_NONE;
}
3400dfa2:	2000      	movs	r0, #0
3400dfa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
3400dfa8:	f1b8 0f06 	cmp.w	r8, #6
3400dfac:	d127      	bne.n	3400dffe <BSP_LCD_WritePixel+0x8e>
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-3U)) = (uint8_t) (Color);
3400dfae:	fa5f f883 	uxtb.w	r8, r3
3400dfb2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
3400dfb6:	f1ae 0e03 	sub.w	lr, lr, #3
3400dfba:	f804 800e 	strb.w	r8, [r4, lr]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-2U)) = (uint8_t) (Color>>8U);
3400dfbe:	f856 400c 	ldr.w	r4, [r6, ip]
3400dfc2:	f3c3 2807 	ubfx	r8, r3, #8, #8
3400dfc6:	fb04 1402 	mla	r4, r4, r2, r1
3400dfca:	eb04 0944 	add.w	r9, r4, r4, lsl #1
3400dfce:	6884      	ldr	r4, [r0, #8]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-1U)) = (uint8_t) (Color>>16U);
3400dfd0:	f3c3 4307 	ubfx	r3, r3, #16, #8
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-2U)) = (uint8_t) (Color>>8U);
3400dfd4:	fb07 5e04 	mla	lr, r7, r4, r5
3400dfd8:	f8de e05c 	ldr.w	lr, [lr, #92]	@ 0x5c
3400dfdc:	f1ae 0e02 	sub.w	lr, lr, #2
3400dfe0:	f809 800e 	strb.w	r8, [r9, lr]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-1U)) = (uint8_t) (Color>>16U);
3400dfe4:	f856 400c 	ldr.w	r4, [r6, ip]
3400dfe8:	fb04 1202 	mla	r2, r4, r2, r1
3400dfec:	6881      	ldr	r1, [r0, #8]
3400dfee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
3400dff2:	fb07 5501 	mla	r5, r7, r1, r5
3400dff6:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
3400dff8:	3901      	subs	r1, #1
3400dffa:	5453      	strb	r3, [r2, r1]
3400dffc:	e7d1      	b.n	3400dfa2 <BSP_LCD_WritePixel+0x32>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
3400dffe:	b29b      	uxth	r3, r3
3400e000:	f82e 3014 	strh.w	r3, [lr, r4, lsl #1]
3400e004:	e7cd      	b.n	3400dfa2 <BSP_LCD_WritePixel+0x32>
3400e006:	bf00      	nop
3400e008:	340dad80 	.word	0x340dad80
3400e00c:	340dada0 	.word	0x340dada0

3400e010 <BSP_LCD_FillRGBRect>:
{
3400e010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e014:	4680      	mov	r8, r0
3400e016:	460e      	mov	r6, r1
3400e018:	4614      	mov	r4, r2
3400e01a:	461d      	mov	r5, r3
  for(i = 0; i < Height; i++)
3400e01c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400e01e:	eb03 0902 	add.w	r9, r3, r2
      pdata += Lcd_Ctx[Instance].BppFactor;
3400e022:	4b0d      	ldr	r3, [pc, #52]	@ (3400e058 <BSP_LCD_FillRGBRect+0x48>)
3400e024:	eb03 1a40 	add.w	sl, r3, r0, lsl #5
  for(i = 0; i < Height; i++)
3400e028:	454c      	cmp	r4, r9
3400e02a:	d012      	beq.n	3400e052 <BSP_LCD_FillRGBRect+0x42>
3400e02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400e02e:	4637      	mov	r7, r6
3400e030:	eb03 0b06 	add.w	fp, r3, r6
3400e034:	e009      	b.n	3400e04a <BSP_LCD_FillRGBRect+0x3a>
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
3400e036:	682b      	ldr	r3, [r5, #0]
3400e038:	4639      	mov	r1, r7
3400e03a:	4622      	mov	r2, r4
3400e03c:	4640      	mov	r0, r8
3400e03e:	f7ff ff97 	bl	3400df70 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
3400e042:	f8da 3010 	ldr.w	r3, [sl, #16]
3400e046:	3701      	adds	r7, #1
3400e048:	441d      	add	r5, r3
    for(j = 0; j < Width; j++)
3400e04a:	455f      	cmp	r7, fp
3400e04c:	d1f3      	bne.n	3400e036 <BSP_LCD_FillRGBRect+0x26>
  for(i = 0; i < Height; i++)
3400e04e:	3401      	adds	r4, #1
3400e050:	e7ea      	b.n	3400e028 <BSP_LCD_FillRGBRect+0x18>
}
3400e052:	2000      	movs	r0, #0
3400e054:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400e058:	340dad80 	.word	0x340dad80

3400e05c <BSP_LCD_DrawBitmap>:
{
3400e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e060:	2634      	movs	r6, #52	@ 0x34
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
3400e062:	f8d3 4012 	ldr.w	r4, [r3, #18]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e066:	4f39      	ldr	r7, [pc, #228]	@ (3400e14c <BSP_LCD_DrawBitmap+0xf0>)
3400e068:	ea4f 1840 	mov.w	r8, r0, lsl #5
{
3400e06c:	b085      	sub	sp, #20
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
3400e06e:	9402      	str	r4, [sp, #8]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e070:	f857 4008 	ldr.w	r4, [r7, r8]
3400e074:	eb07 1040 	add.w	r0, r7, r0, lsl #5
3400e078:	fb04 1202 	mla	r2, r4, r2, r1
3400e07c:	6904      	ldr	r4, [r0, #16]
3400e07e:	4934      	ldr	r1, [pc, #208]	@ (3400e150 <BSP_LCD_DrawBitmap+0xf4>)
3400e080:	6880      	ldr	r0, [r0, #8]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
3400e082:	8b9d      	ldrh	r5, [r3, #28]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e084:	fb06 1100 	mla	r1, r6, r0, r1
3400e088:	6dce      	ldr	r6, [r1, #92]	@ 0x5c
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
3400e08a:	f8d3 c00a 	ldr.w	ip, [r3, #10]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e08e:	fb04 6602 	mla	r6, r4, r2, r6
  if ((bit_pixel/8U) == 4U)
3400e092:	f1a5 0220 	sub.w	r2, r5, #32
3400e096:	2a07      	cmp	r2, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
3400e098:	f8d3 a016 	ldr.w	sl, [r3, #22]
  if ((bit_pixel/8U) == 4U)
3400e09c:	d91b      	bls.n	3400e0d6 <BSP_LCD_DrawBitmap+0x7a>
  else if ((bit_pixel/8U) == 2U)
3400e09e:	f1a5 0210 	sub.w	r2, r5, #16
    input_color_mode = DMA2D_INPUT_RGB565;
3400e0a2:	2a07      	cmp	r2, #7
3400e0a4:	bf8c      	ite	hi
3400e0a6:	f04f 0b01 	movhi.w	fp, #1
3400e0aa:	f04f 0b02 	movls.w	fp, #2
  for(index=0; index < height; index++)
3400e0ae:	f04f 0900 	mov.w	r9, #0
3400e0b2:	9a02      	ldr	r2, [sp, #8]
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
3400e0b4:	08ed      	lsrs	r5, r5, #3
3400e0b6:	4355      	muls	r5, r2
3400e0b8:	f10a 32ff 	add.w	r2, sl, #4294967295
3400e0bc:	fb05 cc02 	mla	ip, r5, r2, ip
3400e0c0:	eb03 040c 	add.w	r4, r3, ip
    pbmp -= width*(bit_pixel/8U);
3400e0c4:	426b      	negs	r3, r5
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
    break;
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
3400e0c6:	4d23      	ldr	r5, [pc, #140]	@ (3400e154 <BSP_LCD_DrawBitmap+0xf8>)
    pbmp -= width*(bit_pixel/8U);
3400e0c8:	9303      	str	r3, [sp, #12]
  for(index=0; index < height; index++)
3400e0ca:	45d1      	cmp	r9, sl
3400e0cc:	d106      	bne.n	3400e0dc <BSP_LCD_DrawBitmap+0x80>
}
3400e0ce:	2000      	movs	r0, #0
3400e0d0:	b005      	add	sp, #20
3400e0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
3400e0d6:	f04f 0b00 	mov.w	fp, #0
3400e0da:	e7e8      	b.n	3400e0ae <BSP_LCD_DrawBitmap+0x52>
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e0dc:	eb07 0308 	add.w	r3, r7, r8
3400e0e0:	68db      	ldr	r3, [r3, #12]
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;

  hlcd_dma2d.Instance = DMA2D;

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400e0e2:	481c      	ldr	r0, [pc, #112]	@ (3400e154 <BSP_LCD_DrawBitmap+0xf8>)
3400e0e4:	3b01      	subs	r3, #1
3400e0e6:	2b03      	cmp	r3, #3
3400e0e8:	bf96      	itet	ls
3400e0ea:	4a1b      	ldrls	r2, [pc, #108]	@ (3400e158 <BSP_LCD_DrawBitmap+0xfc>)
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e0ec:	2300      	movhi	r3, #0
3400e0ee:	5cd3      	ldrbls	r3, [r2, r3]
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
3400e0f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
3400e0f4:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hlcd_dma2d.Init.OutputOffset = 0;
3400e0f8:	2300      	movs	r3, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
3400e0fa:	22ff      	movs	r2, #255	@ 0xff
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
3400e0fc:	e9c5 3b11 	strd	r3, fp, [r5, #68]	@ 0x44
  hlcd_dma2d.Init.OutputOffset = 0;
3400e100:	60eb      	str	r3, [r5, #12]
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
3400e102:	64eb      	str	r3, [r5, #76]	@ 0x4c
  hlcd_dma2d.Instance = DMA2D;
3400e104:	4b15      	ldr	r3, [pc, #84]	@ (3400e15c <BSP_LCD_DrawBitmap+0x100>)
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
3400e106:	652a      	str	r2, [r5, #80]	@ 0x50
  hlcd_dma2d.Instance = DMA2D;
3400e108:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400e10a:	f003 ff4f 	bl	34011fac <HAL_DMA2D_Init>
3400e10e:	b988      	cbnz	r0, 3400e134 <BSP_LCD_DrawBitmap+0xd8>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
3400e110:	2101      	movs	r1, #1
3400e112:	4628      	mov	r0, r5
3400e114:	f004 f886 	bl	34012224 <HAL_DMA2D_ConfigLayer>
3400e118:	b960      	cbnz	r0, 3400e134 <BSP_LCD_DrawBitmap+0xd8>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
3400e11a:	2301      	movs	r3, #1
3400e11c:	4632      	mov	r2, r6
3400e11e:	9300      	str	r3, [sp, #0]
3400e120:	4621      	mov	r1, r4
3400e122:	9b02      	ldr	r3, [sp, #8]
3400e124:	480b      	ldr	r0, [pc, #44]	@ (3400e154 <BSP_LCD_DrawBitmap+0xf8>)
3400e126:	f003 ffc9 	bl	340120bc <HAL_DMA2D_Start>
3400e12a:	b918      	cbnz	r0, 3400e134 <BSP_LCD_DrawBitmap+0xd8>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
3400e12c:	2132      	movs	r1, #50	@ 0x32
3400e12e:	4809      	ldr	r0, [pc, #36]	@ (3400e154 <BSP_LCD_DrawBitmap+0xf8>)
3400e130:	f003 fffa 	bl	34012128 <HAL_DMA2D_PollForTransfer>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
3400e134:	eb07 0308 	add.w	r3, r7, r8
3400e138:	691b      	ldr	r3, [r3, #16]
3400e13a:	f857 2008 	ldr.w	r2, [r7, r8]
  for(index=0; index < height; index++)
3400e13e:	f109 0901 	add.w	r9, r9, #1
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
3400e142:	fb03 6602 	mla	r6, r3, r2, r6
    pbmp -= width*(bit_pixel/8U);
3400e146:	9b03      	ldr	r3, [sp, #12]
3400e148:	441c      	add	r4, r3
  for(index=0; index < height; index++)
3400e14a:	e7be      	b.n	3400e0ca <BSP_LCD_DrawBitmap+0x6e>
3400e14c:	340dad80 	.word	0x340dad80
3400e150:	340dada0 	.word	0x340dada0
3400e154:	340dae48 	.word	0x340dae48
3400e158:	340c86e8 	.word	0x340c86e8
3400e15c:	58021000 	.word	0x58021000

3400e160 <LL_FillBuffer>:
{
3400e160:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400e164:	461f      	mov	r7, r3
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e166:	4b34      	ldr	r3, [pc, #208]	@ (3400e238 <LL_FillBuffer+0xd8>)
{
3400e168:	4616      	mov	r6, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e16a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
3400e16e:	68da      	ldr	r2, [r3, #12]
{
3400e170:	460d      	mov	r5, r1
3400e172:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e176:	2a02      	cmp	r2, #2
3400e178:	d023      	beq.n	3400e1c2 <LL_FillBuffer+0x62>
3400e17a:	2a04      	cmp	r2, #4
3400e17c:	d03e      	beq.n	3400e1fc <LL_FillBuffer+0x9c>
3400e17e:	2a01      	cmp	r2, #1
3400e180:	d054      	beq.n	3400e22c <LL_FillBuffer+0xcc>
3400e182:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
3400e184:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
3400e188:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 3400e240 <LL_FillBuffer+0xe0>
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
3400e18c:	e9c8 3201 	strd	r3, r2, [r8, #4]
  hlcd_dma2d.Instance = DMA2D;
3400e190:	4b2a      	ldr	r3, [pc, #168]	@ (3400e23c <LL_FillBuffer+0xdc>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400e192:	4640      	mov	r0, r8
  hlcd_dma2d.Init.OutputOffset = OffLine;
3400e194:	f8c8 100c 	str.w	r1, [r8, #12]
  hlcd_dma2d.Instance = DMA2D;
3400e198:	f8c8 3000 	str.w	r3, [r8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400e19c:	f003 ff06 	bl	34011fac <HAL_DMA2D_Init>
3400e1a0:	2800      	cmp	r0, #0
3400e1a2:	d146      	bne.n	3400e232 <LL_FillBuffer+0xd2>
    if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
3400e1a4:	4633      	mov	r3, r6
3400e1a6:	462a      	mov	r2, r5
3400e1a8:	4621      	mov	r1, r4
3400e1aa:	4640      	mov	r0, r8
3400e1ac:	9700      	str	r7, [sp, #0]
3400e1ae:	f003 ff85 	bl	340120bc <HAL_DMA2D_Start>
3400e1b2:	bbf0      	cbnz	r0, 3400e232 <LL_FillBuffer+0xd2>
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
3400e1b4:	2132      	movs	r1, #50	@ 0x32
3400e1b6:	4640      	mov	r0, r8
}
3400e1b8:	b002      	add	sp, #8
3400e1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
3400e1be:	f003 bfb3 	b.w	34012128 <HAL_DMA2D_PollForTransfer>
    input_color = CONVERTRGB5652ARGB8888(Color);
3400e1c2:	f240 1e03 	movw	lr, #259	@ 0x103
3400e1c6:	f240 2c0f 	movw	ip, #527	@ 0x20f
3400e1ca:	f3c4 1045 	ubfx	r0, r4, #5, #6
3400e1ce:	f3c4 23c4 	ubfx	r3, r4, #11, #5
3400e1d2:	fb0e f000 	mul.w	r0, lr, r0
3400e1d6:	fb0c f303 	mul.w	r3, ip, r3
3400e1da:	f004 041f 	and.w	r4, r4, #31
3400e1de:	fb0c f404 	mul.w	r4, ip, r4
3400e1e2:	3021      	adds	r0, #33	@ 0x21
3400e1e4:	3317      	adds	r3, #23
3400e1e6:	0980      	lsrs	r0, r0, #6
3400e1e8:	099b      	lsrs	r3, r3, #6
3400e1ea:	0200      	lsls	r0, r0, #8
3400e1ec:	3417      	adds	r4, #23
3400e1ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
3400e1f2:	ea40 1094 	orr.w	r0, r0, r4, lsr #6
3400e1f6:	f040 447f 	orr.w	r4, r0, #4278190080	@ 0xff000000
    break;
3400e1fa:	e7c3      	b.n	3400e184 <LL_FillBuffer+0x24>
    input_color = CONVERTARGB44442ARGB8888(Color);
3400e1fc:	f3c4 3303 	ubfx	r3, r4, #12, #4
3400e200:	eb03 1003 	add.w	r0, r3, r3, lsl #4
3400e204:	f3c4 2303 	ubfx	r3, r4, #8, #4
3400e208:	eb03 1303 	add.w	r3, r3, r3, lsl #4
3400e20c:	041b      	lsls	r3, r3, #16
3400e20e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
3400e212:	f004 000f 	and.w	r0, r4, #15
3400e216:	eb00 1000 	add.w	r0, r0, r0, lsl #4
3400e21a:	4303      	orrs	r3, r0
3400e21c:	f3c4 1003 	ubfx	r0, r4, #4, #4
3400e220:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
3400e224:	4404      	add	r4, r0
3400e226:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    break;
3400e22a:	e7ab      	b.n	3400e184 <LL_FillBuffer+0x24>
    input_color = CONVERTRGB8882ARGB8888(Color);
3400e22c:	f044 447f 	orr.w	r4, r4, #4278190080	@ 0xff000000
    break;
3400e230:	e7a8      	b.n	3400e184 <LL_FillBuffer+0x24>
}
3400e232:	b002      	add	sp, #8
3400e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400e238:	340dad80 	.word	0x340dad80
3400e23c:	58021000 	.word	0x58021000
3400e240:	340dae48 	.word	0x340dae48

3400e244 <BSP_LCD_DrawHLine>:
{
3400e244:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400e246:	4615      	mov	r5, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e248:	4c0d      	ldr	r4, [pc, #52]	@ (3400e280 <BSP_LCD_DrawHLine+0x3c>)
3400e24a:	0146      	lsls	r6, r0, #5
{
3400e24c:	461a      	mov	r2, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e24e:	eb04 1340 	add.w	r3, r4, r0, lsl #5
3400e252:	59a4      	ldr	r4, [r4, r6]
3400e254:	691e      	ldr	r6, [r3, #16]
3400e256:	fb04 1105 	mla	r1, r4, r5, r1
3400e25a:	2534      	movs	r5, #52	@ 0x34
3400e25c:	689c      	ldr	r4, [r3, #8]
3400e25e:	4b09      	ldr	r3, [pc, #36]	@ (3400e284 <BSP_LCD_DrawHLine+0x40>)
3400e260:	fb05 3304 	mla	r3, r5, r4, r3
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
3400e264:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e266:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
3400e268:	9b06      	ldr	r3, [sp, #24]
3400e26a:	fb06 5101 	mla	r1, r6, r1, r5
3400e26e:	9301      	str	r3, [sp, #4]
3400e270:	9400      	str	r4, [sp, #0]
3400e272:	2301      	movs	r3, #1
3400e274:	f7ff ff74 	bl	3400e160 <LL_FillBuffer>
}
3400e278:	4620      	mov	r0, r4
3400e27a:	b002      	add	sp, #8
3400e27c:	bd70      	pop	{r4, r5, r6, pc}
3400e27e:	bf00      	nop
3400e280:	340dad80 	.word	0x340dad80
3400e284:	340dada0 	.word	0x340dada0

3400e288 <BSP_LCD_DrawVLine>:
{
3400e288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e28a:	2734      	movs	r7, #52	@ 0x34
3400e28c:	4d0c      	ldr	r5, [pc, #48]	@ (3400e2c0 <BSP_LCD_DrawVLine+0x38>)
3400e28e:	0146      	lsls	r6, r0, #5
3400e290:	eb05 1440 	add.w	r4, r5, r0, lsl #5
3400e294:	59ad      	ldr	r5, [r5, r6]
3400e296:	6926      	ldr	r6, [r4, #16]
3400e298:	fb02 1105 	mla	r1, r2, r5, r1
3400e29c:	68a4      	ldr	r4, [r4, #8]
3400e29e:	4a09      	ldr	r2, [pc, #36]	@ (3400e2c4 <BSP_LCD_DrawVLine+0x3c>)
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
3400e2a0:	3d01      	subs	r5, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e2a2:	fb07 2204 	mla	r2, r7, r4, r2
3400e2a6:	6dd4      	ldr	r4, [r2, #92]	@ 0x5c
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
3400e2a8:	9a08      	ldr	r2, [sp, #32]
3400e2aa:	fb06 4101 	mla	r1, r6, r1, r4
3400e2ae:	9201      	str	r2, [sp, #4]
3400e2b0:	9500      	str	r5, [sp, #0]
3400e2b2:	2201      	movs	r2, #1
3400e2b4:	f7ff ff54 	bl	3400e160 <LL_FillBuffer>
}
3400e2b8:	2000      	movs	r0, #0
3400e2ba:	b003      	add	sp, #12
3400e2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400e2be:	bf00      	nop
3400e2c0:	340dad80 	.word	0x340dad80
3400e2c4:	340dada0 	.word	0x340dada0

3400e2c8 <BSP_LCD_FillRect>:
{
3400e2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400e2ca:	4615      	mov	r5, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e2cc:	2734      	movs	r7, #52	@ 0x34
{
3400e2ce:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e2d0:	4b0c      	ldr	r3, [pc, #48]	@ (3400e304 <BSP_LCD_FillRect+0x3c>)
3400e2d2:	0146      	lsls	r6, r0, #5
3400e2d4:	eb03 1440 	add.w	r4, r3, r0, lsl #5
3400e2d8:	599b      	ldr	r3, [r3, r6]
3400e2da:	6926      	ldr	r6, [r4, #16]
3400e2dc:	fb05 1503 	mla	r5, r5, r3, r1
3400e2e0:	68a1      	ldr	r1, [r4, #8]
3400e2e2:	4c09      	ldr	r4, [pc, #36]	@ (3400e308 <BSP_LCD_FillRect+0x40>)
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
3400e2e4:	1a9b      	subs	r3, r3, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e2e6:	fb07 4401 	mla	r4, r7, r1, r4
3400e2ea:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
3400e2ec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
3400e2ee:	9300      	str	r3, [sp, #0]
3400e2f0:	fb06 1105 	mla	r1, r6, r5, r1
3400e2f4:	9b08      	ldr	r3, [sp, #32]
3400e2f6:	9401      	str	r4, [sp, #4]
3400e2f8:	f7ff ff32 	bl	3400e160 <LL_FillBuffer>
}
3400e2fc:	2000      	movs	r0, #0
3400e2fe:	b003      	add	sp, #12
3400e300:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400e302:	bf00      	nop
3400e304:	340dad80 	.word	0x340dad80
3400e308:	340dada0 	.word	0x340dada0

3400e30c <MX_LTDC_Init>:
{
3400e30c:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
3400e30e:	2400      	movs	r4, #0
3400e310:	4d0c      	ldr	r5, [pc, #48]	@ (3400e344 <MX_LTDC_Init+0x38>)
  hltdc->Init.HorizontalSync     = (uint32_t)RK050HR18_HSYNC - 1U;
3400e312:	2603      	movs	r6, #3
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
3400e314:	e9c0 5400 	strd	r5, r4, [r0]
  hltdc->Init.AccumulatedHBP     = (uint32_t)RK050HR18_HSYNC + (uint32_t)RK050HR18_HBP - 1U;
3400e318:	2507      	movs	r5, #7
  hltdc->Init.AccumulatedActiveW = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP -1U;
3400e31a:	194f      	adds	r7, r1, r5
  hltdc->Init.TotalWidth         = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP + RK050HR18_HFP - 1U;
3400e31c:	310b      	adds	r1, #11
3400e31e:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hltdc->Init.Backcolor.Blue  = 0x0;
3400e320:	8684      	strh	r4, [r0, #52]	@ 0x34
  hltdc->Init.AccumulatedActiveH = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP -1U;
3400e322:	1951      	adds	r1, r2, r5
  hltdc->Init.Backcolor.Red   = 0x0;
3400e324:	f880 4036 	strb.w	r4, [r0, #54]	@ 0x36
  hltdc->Init.TotalHeigh         = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP + RK050HR18_VFP - 1U;
3400e328:	320b      	adds	r2, #11
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
3400e32a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
3400e32e:	6104      	str	r4, [r0, #16]
  hltdc->Init.HorizontalSync     = (uint32_t)RK050HR18_HSYNC - 1U;
3400e330:	6146      	str	r6, [r0, #20]
  hltdc->Init.AccumulatedHBP     = (uint32_t)RK050HR18_HSYNC + (uint32_t)RK050HR18_HBP - 1U;
3400e332:	61c5      	str	r5, [r0, #28]
  hltdc->Init.AccumulatedActiveW = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP -1U;
3400e334:	6247      	str	r7, [r0, #36]	@ 0x24
  hltdc->Init.VerticalSync       = (uint32_t)RK050HR18_VSYNC - 1U;
3400e336:	6186      	str	r6, [r0, #24]
  hltdc->Init.AccumulatedVBP     = (uint32_t)RK050HR18_VSYNC + (uint32_t)RK050HR18_VBP - 1U;
3400e338:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP -1U;
3400e33a:	6281      	str	r1, [r0, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP + RK050HR18_VFP - 1U;
3400e33c:	6302      	str	r2, [r0, #48]	@ 0x30
}
3400e33e:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_LTDC_Init(hltdc);
3400e340:	f005 bdb8 	b.w	34013eb4 <HAL_LTDC_Init>
3400e344:	58001000 	.word	0x58001000

3400e348 <MX_LTDC_ClockConfig>:
{
3400e348:	b500      	push	{lr}
3400e34a:	b0e5      	sub	sp, #404	@ 0x194
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3400e34c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
3400e350:	2100      	movs	r1, #0
3400e352:	4668      	mov	r0, sp
3400e354:	f013 f9de 	bl	34021714 <memset>
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
3400e358:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400e35c:	2300      	movs	r3, #0
3400e35e:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_PeriphCLKInitStruct.LtdcClockSelection = RCC_LTDCCLKSOURCE_IC16;
3400e362:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 2;
3400e366:	f04f 5140 	mov.w	r1, #805306368	@ 0x30000000
  RCC_PeriphCLKInitStruct.LtdcClockSelection = RCC_LTDCCLKSOURCE_IC16;
3400e36a:	9346      	str	r3, [sp, #280]	@ 0x118
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 2;
3400e36c:	2302      	movs	r3, #2
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3400e36e:	4668      	mov	r0, sp
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 2;
3400e370:	e9cd 1320 	strd	r1, r3, [sp, #128]	@ 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3400e374:	f007 fa44 	bl	34015800 <HAL_RCCEx_PeriphCLKConfig>
}
3400e378:	3800      	subs	r0, #0
3400e37a:	bf18      	it	ne
3400e37c:	2001      	movne	r0, #1
3400e37e:	b065      	add	sp, #404	@ 0x194
3400e380:	f85d fb04 	ldr.w	pc, [sp], #4

3400e384 <BSP_LCD_InitEx>:
{
3400e384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e388:	4614      	mov	r4, r2
  MX_LTDC_LayerConfig_t config = {0};
3400e38a:	2218      	movs	r2, #24
{
3400e38c:	460e      	mov	r6, r1
3400e38e:	b08d      	sub	sp, #52	@ 0x34
3400e390:	4605      	mov	r5, r0
  MX_LTDC_LayerConfig_t config = {0};
3400e392:	2100      	movs	r1, #0
3400e394:	eb0d 0002 	add.w	r0, sp, r2
{
3400e398:	4699      	mov	r9, r3
  MX_LTDC_LayerConfig_t config = {0};
3400e39a:	f013 f9bb 	bl	34021714 <memset>
  if ((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
3400e39e:	2e01      	cmp	r6, #1
3400e3a0:	f200 80da 	bhi.w	3400e558 <BSP_LCD_InitEx+0x1d4>
3400e3a4:	2d00      	cmp	r5, #0
3400e3a6:	f040 80d7 	bne.w	3400e558 <BSP_LCD_InitEx+0x1d4>
3400e3aa:	2c02      	cmp	r4, #2
3400e3ac:	f240 80ad 	bls.w	3400e50a <BSP_LCD_InitEx+0x186>
      (PixelFormat != LCD_PIXEL_FORMAT_ARGB8888) &&  (PixelFormat != LCD_PIXEL_FORMAT_ARGB4444)))
3400e3b0:	2c04      	cmp	r4, #4
3400e3b2:	f040 80d1 	bne.w	3400e558 <BSP_LCD_InitEx+0x1d4>
3400e3b6:	2302      	movs	r3, #2
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB4444;
3400e3b8:	2508      	movs	r5, #8
      Lcd_Ctx[Instance].BppFactor = 2U;
3400e3ba:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 3400e590 <BSP_LCD_InitEx+0x20c>
    hlcd_ltdc.Instance = LTDC;
3400e3be:	4a68      	ldr	r2, [pc, #416]	@ (3400e560 <BSP_LCD_InitEx+0x1dc>)
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
3400e3c0:	e9c8 4303 	strd	r4, r3, [r8, #12]
  WRITE_REG(RCC->APB5ENSR, Periphs);
3400e3c4:	2402      	movs	r4, #2
    Lcd_Ctx[Instance].YSize  = Height;
3400e3c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
3400e3c8:	4e66      	ldr	r6, [pc, #408]	@ (3400e564 <BSP_LCD_InitEx+0x1e0>)
3400e3ca:	f8c8 3004 	str.w	r3, [r8, #4]
    hlcd_ltdc.Instance = LTDC;
3400e3ce:	4b66      	ldr	r3, [pc, #408]	@ (3400e568 <BSP_LCD_InitEx+0x1e4>)
    hlcd_dma2d.Instance = DMA2D;
3400e3d0:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 3400e594 <BSP_LCD_InitEx+0x210>
    hlcd_ltdc.Instance = LTDC;
3400e3d4:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
3400e3d6:	4b65      	ldr	r3, [pc, #404]	@ (3400e56c <BSP_LCD_InitEx+0x1e8>)
    Lcd_Ctx[Instance].XSize  = Width;
3400e3d8:	f8c8 9000 	str.w	r9, [r8]
    hlcd_dma2d.Instance = DMA2D;
3400e3dc:	f8cb 3000 	str.w	r3, [fp]
3400e3e0:	f8c6 4a7c 	str.w	r4, [r6, #2684]	@ 0xa7c
  tmpreg = READ_REG(RCC->APB5ENR);
3400e3e4:	f8d6 327c 	ldr.w	r3, [r6, #636]	@ 0x27c
  WRITE_REG(RCC->APB5RSTCR, Periphs);
3400e3e8:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 3400e598 <BSP_LCD_InitEx+0x214>
  tmpreg = READ_REG(RCC->APB5ENR);
3400e3ec:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
3400e3ee:	9b00      	ldr	r3, [sp, #0]
    /* PB13 LCD_CLK     */
    /* PQ4  LCD_INT     */
    /* PQ6  LCD_BL_CTRL */
    /* PE1  NRST        */

    __HAL_RCC_GPIOA_CLK_ENABLE();
3400e3f0:	2001      	movs	r0, #1
  WRITE_REG(RCC->APB5RSTSR, Periphs);
3400e3f2:	f8c6 4a3c 	str.w	r4, [r6, #2620]	@ 0xa3c
  WRITE_REG(RCC->APB5RSTCR, Periphs);
3400e3f6:	f8ca 423c 	str.w	r4, [sl, #572]	@ 0x23c
3400e3fa:	f7ff fd3d 	bl	3400de78 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
3400e3fe:	4620      	mov	r0, r4
3400e400:	f7ff fd3a 	bl	3400de78 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
3400e404:	2008      	movs	r0, #8
3400e406:	f7ff fd37 	bl	3400de78 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
3400e40a:	2010      	movs	r0, #16
3400e40c:	f7ff fd34 	bl	3400de78 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOG_CLK_ENABLE();
3400e410:	2040      	movs	r0, #64	@ 0x40
3400e412:	f7ff fd31 	bl	3400de78 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOH_CLK_ENABLE();
3400e416:	2080      	movs	r0, #128	@ 0x80
3400e418:	f7ff fd2e 	bl	3400de78 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOQ_CLK_ENABLE();
3400e41c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
3400e420:	f7ff fd2a 	bl	3400de78 <LL_AHB4_GRP1_EnableClock>

    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
    gpio_init_structure.Pull      = GPIO_NOPULL;
3400e424:	2300      	movs	r3, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;

    /* G3, G2, B7, B1, B6, R5 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e426:	270e      	movs	r7, #14
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400e428:	e9cd 3403 	strd	r3, r4, [sp, #12]
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
3400e42c:	f248 1387 	movw	r3, #33159	@ 0x8187
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
3400e430:	484f      	ldr	r0, [pc, #316]	@ (3400e570 <BSP_LCD_InitEx+0x1ec>)
3400e432:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
3400e434:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e436:	9705      	str	r7, [sp, #20]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
3400e438:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
3400e43a:	f004 f931 	bl	340126a0 <HAL_GPIO_Init>

    /* LCD_CLK, LCD_HSYNC B2, R3, G6, G5, G4 */
    gpio_init_structure.Pin       = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
3400e43e:	f64f 0314 	movw	r3, #63508	@ 0xf814
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
3400e442:	484c      	ldr	r0, [pc, #304]	@ (3400e574 <BSP_LCD_InitEx+0x1f0>)
3400e444:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
3400e446:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e448:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
3400e44a:	f004 f929 	bl	340126a0 <HAL_GPIO_Init>

    /* R7, R1, R2 */
    gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_15;
3400e44e:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
3400e452:	4849      	ldr	r0, [pc, #292]	@ (3400e578 <BSP_LCD_InitEx+0x1f4>)
3400e454:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_15;
3400e456:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e458:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
3400e45a:	f004 f921 	bl	340126a0 <HAL_GPIO_Init>

    /* LCD_VSYNC */
    gpio_init_structure.Pin       = GPIO_PIN_11;
3400e45e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400e462:	4846      	ldr	r0, [pc, #280]	@ (3400e57c <BSP_LCD_InitEx+0x1f8>)
3400e464:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_11;
3400e466:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e468:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400e46a:	f004 f919 	bl	340126a0 <HAL_GPIO_Init>

    /* R0, G1, B3, G7, R6, G0 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 ;
3400e46e:	f641 1343 	movw	r3, #6467	@ 0x1943
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400e472:	4843      	ldr	r0, [pc, #268]	@ (3400e580 <BSP_LCD_InitEx+0x1fc>)
3400e474:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 ;
3400e476:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e478:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400e47a:	f004 f911 	bl	340126a0 <HAL_GPIO_Init>

    /* B4, R4, B5 */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
3400e47e:	2358      	movs	r3, #88	@ 0x58
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e480:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);

    /* NRST */
    gpio_init_structure.Pin       = GPIO_PIN_1;
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400e482:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
3400e484:	483f      	ldr	r0, [pc, #252]	@ (3400e584 <BSP_LCD_InitEx+0x200>)
3400e486:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
3400e488:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
3400e48a:	f004 f909 	bl	340126a0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400e48e:	483b      	ldr	r0, [pc, #236]	@ (3400e57c <BSP_LCD_InitEx+0x1f8>)
3400e490:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_1;
3400e492:	9401      	str	r4, [sp, #4]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400e494:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400e496:	f004 f903 	bl	340126a0 <HAL_GPIO_Init>

    /* LCD_ONOFF, LCD_BL_CTRL */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_6;
3400e49a:	2348      	movs	r3, #72	@ 0x48
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
    HAL_GPIO_Init(GPIOQ, &gpio_init_structure);
3400e49c:	483a      	ldr	r0, [pc, #232]	@ (3400e588 <BSP_LCD_InitEx+0x204>)
3400e49e:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400e4a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
    HAL_GPIO_Init(GPIOQ, &gpio_init_structure);
3400e4a4:	f004 f8fc 	bl	340126a0 <HAL_GPIO_Init>

    /* LCD_DE */
    gpio_init_structure.Pin       = GPIO_PIN_13;
3400e4a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400e4ac:	4834      	ldr	r0, [pc, #208]	@ (3400e580 <BSP_LCD_InitEx+0x1fc>)
3400e4ae:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400e4b0:	e9cd 3701 	strd	r3, r7, [sp, #4]
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400e4b4:	f004 f8f4 	bl	340126a0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_3, GPIO_PIN_SET); /* LCD On */ /* PQ3  LCD_ONOFF   */
3400e4b8:	463a      	mov	r2, r7
3400e4ba:	2108      	movs	r1, #8
3400e4bc:	4832      	ldr	r0, [pc, #200]	@ (3400e588 <BSP_LCD_InitEx+0x204>)
3400e4be:	f004 fc47 	bl	34012d50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET); /* Display Enable */ /* PG13 LCD_DE      */
3400e4c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400e4c6:	463a      	mov	r2, r7
3400e4c8:	4619      	mov	r1, r3
3400e4ca:	482d      	ldr	r0, [pc, #180]	@ (3400e580 <BSP_LCD_InitEx+0x1fc>)
3400e4cc:	f004 fc40 	bl	34012d50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_6, GPIO_PIN_SET); /* 100% Brightness */ /* PQ6  LCD_BL_CTRL */
3400e4d0:	463a      	mov	r2, r7
3400e4d2:	2140      	movs	r1, #64	@ 0x40
3400e4d4:	482c      	ldr	r0, [pc, #176]	@ (3400e588 <BSP_LCD_InitEx+0x204>)
3400e4d6:	f004 fc3b 	bl	34012d50 <HAL_GPIO_WritePin>
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  if(hdma2d->Instance == DMA2D)
3400e4da:	f8db 3000 	ldr.w	r3, [fp]
3400e4de:	4a23      	ldr	r2, [pc, #140]	@ (3400e56c <BSP_LCD_InitEx+0x1e8>)
3400e4e0:	4293      	cmp	r3, r2
3400e4e2:	d109      	bne.n	3400e4f8 <BSP_LCD_InitEx+0x174>
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400e4e4:	f8c6 4a60 	str.w	r4, [r6, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400e4e8:	f8d6 3260 	ldr.w	r3, [r6, #608]	@ 0x260
3400e4ec:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400e4ee:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400e4f0:	f8c6 4a20 	str.w	r4, [r6, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400e4f4:	f8ca 4220 	str.w	r4, [sl, #544]	@ 0x220
    if (MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
3400e4f8:	481b      	ldr	r0, [pc, #108]	@ (3400e568 <BSP_LCD_InitEx+0x1e4>)
3400e4fa:	f7ff ff25 	bl	3400e348 <MX_LTDC_ClockConfig>
3400e4fe:	b170      	cbz	r0, 3400e51e <BSP_LCD_InitEx+0x19a>
      ret = BSP_ERROR_PERIPH_FAILURE;
3400e500:	f06f 0003 	mvn.w	r0, #3
}
3400e504:	b00d      	add	sp, #52	@ 0x34
3400e506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (PixelFormat == LCD_PIXEL_FORMAT_RGB565)
3400e50a:	d005      	beq.n	3400e518 <BSP_LCD_InitEx+0x194>
    else if  (PixelFormat == LCD_PIXEL_FORMAT_RGB888)
3400e50c:	2c01      	cmp	r4, #1
3400e50e:	bf0a      	itet	eq
3400e510:	2303      	moveq	r3, #3
3400e512:	2304      	movne	r3, #4
3400e514:	2506      	moveq	r5, #6
3400e516:	e750      	b.n	3400e3ba <BSP_LCD_InitEx+0x36>
3400e518:	4623      	mov	r3, r4
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
3400e51a:	2504      	movs	r5, #4
3400e51c:	e74d      	b.n	3400e3ba <BSP_LCD_InitEx+0x36>
      if (MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
3400e51e:	4649      	mov	r1, r9
3400e520:	9a16      	ldr	r2, [sp, #88]	@ 0x58
3400e522:	4811      	ldr	r0, [pc, #68]	@ (3400e568 <BSP_LCD_InitEx+0x1e4>)
3400e524:	f7ff fef2 	bl	3400e30c <MX_LTDC_Init>
3400e528:	4601      	mov	r1, r0
3400e52a:	2800      	cmp	r0, #0
3400e52c:	d1e8      	bne.n	3400e500 <BSP_LCD_InitEx+0x17c>
        config.Y1          = Height;
3400e52e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
        config.X1          = Width;
3400e530:	e9cd 0906 	strd	r0, r9, [sp, #24]
        config.PixelFormat = ltdc_pixel_format;
3400e534:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
        config.Address     = LCD_LAYER_0_ADDRESS;
3400e538:	4b14      	ldr	r3, [pc, #80]	@ (3400e58c <BSP_LCD_InitEx+0x208>)
        config.Y0          = 0;
3400e53a:	9008      	str	r0, [sp, #32]
        if (MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
3400e53c:	aa06      	add	r2, sp, #24
3400e53e:	480a      	ldr	r0, [pc, #40]	@ (3400e568 <BSP_LCD_InitEx+0x1e4>)
        config.Address     = LCD_LAYER_0_ADDRESS;
3400e540:	930b      	str	r3, [sp, #44]	@ 0x2c
        if (MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
3400e542:	f7fe f8c7 	bl	3400c6d4 <MX_LTDC_ConfigLayer>
        Lcd_Ctx[Instance].ReloadEnable = 1U;
3400e546:	2301      	movs	r3, #1
  int32_t ret = BSP_ERROR_NONE;
3400e548:	2800      	cmp	r0, #0
3400e54a:	bf14      	ite	ne
3400e54c:	f06f 0003 	mvnne.w	r0, #3
3400e550:	2000      	moveq	r0, #0
        Lcd_Ctx[Instance].ReloadEnable = 1U;
3400e552:	f8c8 3018 	str.w	r3, [r8, #24]
3400e556:	e7d5      	b.n	3400e504 <BSP_LCD_InitEx+0x180>
    ret = BSP_ERROR_WRONG_PARAM;
3400e558:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400e55c:	e7d2      	b.n	3400e504 <BSP_LCD_InitEx+0x180>
3400e55e:	bf00      	nop
3400e560:	58001000 	.word	0x58001000
3400e564:	56028000 	.word	0x56028000
3400e568:	340dada0 	.word	0x340dada0
3400e56c:	58021000 	.word	0x58021000
3400e570:	56020000 	.word	0x56020000
3400e574:	56020400 	.word	0x56020400
3400e578:	56020c00 	.word	0x56020c00
3400e57c:	56021000 	.word	0x56021000
3400e580:	56021800 	.word	0x56021800
3400e584:	56021c00 	.word	0x56021c00
3400e588:	56024000 	.word	0x56024000
3400e58c:	34200000 	.word	0x34200000
3400e590:	340dad80 	.word	0x340dad80
3400e594:	340dae48 	.word	0x340dae48
3400e598:	56029000 	.word	0x56029000

3400e59c <BSP_LCD_Init>:
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB565, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
3400e59c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
{
3400e5a0:	b507      	push	{r0, r1, r2, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB565, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
3400e5a2:	2202      	movs	r2, #2
3400e5a4:	9300      	str	r3, [sp, #0]
3400e5a6:	f44f 7348 	mov.w	r3, #800	@ 0x320
3400e5aa:	f7ff feeb 	bl	3400e384 <BSP_LCD_InitEx>
}
3400e5ae:	b003      	add	sp, #12
3400e5b0:	f85d fb04 	ldr.w	pc, [sp], #4

3400e5b4 <BSP_LCD_ConfigLayer>:
{
3400e5b4:	b508      	push	{r3, lr}
  if(Instance >= LCD_INSTANCES_NBR)
3400e5b6:	b9a8      	cbnz	r0, 3400e5e4 <BSP_LCD_ConfigLayer+0x30>
    if (Config->PixelFormat ==  LCD_PIXEL_FORMAT_RGB565)
3400e5b8:	6913      	ldr	r3, [r2, #16]
3400e5ba:	2b02      	cmp	r3, #2
3400e5bc:	d10a      	bne.n	3400e5d4 <BSP_LCD_ConfigLayer+0x20>
      Config->PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
3400e5be:	2304      	movs	r3, #4
      Config->PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
3400e5c0:	6113      	str	r3, [r2, #16]
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
3400e5c2:	480a      	ldr	r0, [pc, #40]	@ (3400e5ec <BSP_LCD_ConfigLayer+0x38>)
3400e5c4:	f7fe f886 	bl	3400c6d4 <MX_LTDC_ConfigLayer>
  int32_t ret = BSP_ERROR_NONE;
3400e5c8:	2800      	cmp	r0, #0
3400e5ca:	bf14      	ite	ne
3400e5cc:	f06f 0003 	mvnne.w	r0, #3
3400e5d0:	2000      	moveq	r0, #0
}
3400e5d2:	bd08      	pop	{r3, pc}
    else if (Config->PixelFormat ==  LCD_PIXEL_FORMAT_ARGB4444)
3400e5d4:	2b04      	cmp	r3, #4
3400e5d6:	d101      	bne.n	3400e5dc <BSP_LCD_ConfigLayer+0x28>
      Config->PixelFormat = LTDC_PIXEL_FORMAT_ARGB4444;
3400e5d8:	2308      	movs	r3, #8
3400e5da:	e7f1      	b.n	3400e5c0 <BSP_LCD_ConfigLayer+0xc>
    else if (Config->PixelFormat ==  LCD_PIXEL_FORMAT_ARGB8888)
3400e5dc:	2b00      	cmp	r3, #0
3400e5de:	d0f0      	beq.n	3400e5c2 <BSP_LCD_ConfigLayer+0xe>
      Config->PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
3400e5e0:	2306      	movs	r3, #6
3400e5e2:	e7ed      	b.n	3400e5c0 <BSP_LCD_ConfigLayer+0xc>
    ret = BSP_ERROR_WRONG_PARAM;
3400e5e4:	f06f 0001 	mvn.w	r0, #1
3400e5e8:	e7f3      	b.n	3400e5d2 <BSP_LCD_ConfigLayer+0x1e>
3400e5ea:	bf00      	nop
3400e5ec:	340dada0 	.word	0x340dada0

3400e5f0 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400e5f0:	4b04      	ldr	r3, [pc, #16]	@ (3400e604 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400e5f2:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400e5f4:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400e5f8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400e5fc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400e5fe:	9b01      	ldr	r3, [sp, #4]
}
3400e600:	b002      	add	sp, #8
3400e602:	4770      	bx	lr
3400e604:	56028000 	.word	0x56028000

3400e608 <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
3400e608:	b530      	push	{r4, r5, lr}
{
  int32_t ret;
  uint8_t reg[2];

  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e60a:	4c20      	ldr	r4, [pc, #128]	@ (3400e68c <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
3400e60c:	b085      	sub	sp, #20
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e60e:	78a2      	ldrb	r2, [r4, #2]
3400e610:	7861      	ldrb	r1, [r4, #1]
3400e612:	481f      	ldr	r0, [pc, #124]	@ (3400e690 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e614:	f7fe ff5d 	bl	3400d4d2 <MX66UW1G45G_WriteEnable>
3400e618:	b118      	cbz	r0, 3400e622 <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    XSPI_Nor_Ctx[Instance].TransferRate) != MX66UW1G45G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400e61a:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
3400e61e:	b005      	add	sp, #20
3400e620:	bd30      	pop	{r4, r5, pc}
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e622:	9000      	str	r0, [sp, #0]
3400e624:	f44f 7340 	mov.w	r3, #768	@ 0x300
3400e628:	78a2      	ldrb	r2, [r4, #2]
3400e62a:	7861      	ldrb	r1, [r4, #1]
3400e62c:	4818      	ldr	r0, [pc, #96]	@ (3400e690 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e62e:	f7fe ffd9 	bl	3400d5e4 <MX66UW1G45G_WriteCfg2Register>
3400e632:	2800      	cmp	r0, #0
3400e634:	d1f1      	bne.n	3400e61a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e636:	78a2      	ldrb	r2, [r4, #2]
3400e638:	7861      	ldrb	r1, [r4, #1]
3400e63a:	4815      	ldr	r0, [pc, #84]	@ (3400e690 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e63c:	f7fe ff49 	bl	3400d4d2 <MX66UW1G45G_WriteEnable>
3400e640:	4603      	mov	r3, r0
3400e642:	2800      	cmp	r0, #0
3400e644:	d1e9      	bne.n	3400e61a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e646:	2501      	movs	r5, #1
3400e648:	9500      	str	r5, [sp, #0]
3400e64a:	78a2      	ldrb	r2, [r4, #2]
3400e64c:	7861      	ldrb	r1, [r4, #1]
3400e64e:	4810      	ldr	r0, [pc, #64]	@ (3400e690 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e650:	f7fe ffc8 	bl	3400d5e4 <MX66UW1G45G_WriteCfg2Register>
3400e654:	4604      	mov	r4, r0
3400e656:	2800      	cmp	r0, #0
3400e658:	d1df      	bne.n	3400e61a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
3400e65a:	2028      	movs	r0, #40	@ 0x28
3400e65c:	f010 fc40 	bl	3401eee0 <HAL_Delay>
    if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400e660:	4622      	mov	r2, r4
3400e662:	4629      	mov	r1, r5
3400e664:	480a      	ldr	r0, [pc, #40]	@ (3400e690 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e666:	f7fe fe11 	bl	3400d28c <MX66UW1G45G_AutoPollingMemReady>
3400e66a:	4603      	mov	r3, r0
3400e66c:	2800      	cmp	r0, #0
3400e66e:	d1d4      	bne.n	3400e61a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
3400e670:	aa03      	add	r2, sp, #12
3400e672:	9200      	str	r2, [sp, #0]
3400e674:	4629      	mov	r1, r5
3400e676:	4602      	mov	r2, r0
3400e678:	4805      	ldr	r0, [pc, #20]	@ (3400e690 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e67a:	f7ff f80b 	bl	3400d694 <MX66UW1G45G_ReadCfg2Register>
3400e67e:	2800      	cmp	r0, #0
3400e680:	d1cb      	bne.n	3400e61a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX66UW1G45G_CR2_SOPI)
3400e682:	f89d 300c 	ldrb.w	r3, [sp, #12]
3400e686:	42ab      	cmp	r3, r5
3400e688:	d0c9      	beq.n	3400e61e <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
3400e68a:	e7c6      	b.n	3400e61a <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
3400e68c:	340daf18 	.word	0x340daf18
3400e690:	340daf1c 	.word	0x340daf1c

3400e694 <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
3400e694:	b530      	push	{r4, r5, lr}
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e696:	4d27      	ldr	r5, [pc, #156]	@ (3400e734 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
3400e698:	4c27      	ldr	r4, [pc, #156]	@ (3400e738 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
3400e69a:	b085      	sub	sp, #20
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e69c:	4620      	mov	r0, r4
3400e69e:	78aa      	ldrb	r2, [r5, #2]
3400e6a0:	7869      	ldrb	r1, [r5, #1]
3400e6a2:	f7fe ff16 	bl	3400d4d2 <MX66UW1G45G_WriteEnable>
3400e6a6:	b118      	cbz	r0, 3400e6b0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400e6a8:	f06f 0004 	mvn.w	r0, #4
}
3400e6ac:	b005      	add	sp, #20
3400e6ae:	bd30      	pop	{r4, r5, pc}
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e6b0:	9000      	str	r0, [sp, #0]
3400e6b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
3400e6b6:	4620      	mov	r0, r4
3400e6b8:	78aa      	ldrb	r2, [r5, #2]
3400e6ba:	7869      	ldrb	r1, [r5, #1]
3400e6bc:	f7fe ff92 	bl	3400d5e4 <MX66UW1G45G_WriteCfg2Register>
3400e6c0:	2800      	cmp	r0, #0
3400e6c2:	d1f1      	bne.n	3400e6a8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e6c4:	4620      	mov	r0, r4
3400e6c6:	78aa      	ldrb	r2, [r5, #2]
3400e6c8:	7869      	ldrb	r1, [r5, #1]
3400e6ca:	f7fe ff02 	bl	3400d4d2 <MX66UW1G45G_WriteEnable>
3400e6ce:	4603      	mov	r3, r0
3400e6d0:	2800      	cmp	r0, #0
3400e6d2:	d1e9      	bne.n	3400e6a8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e6d4:	2202      	movs	r2, #2
3400e6d6:	9200      	str	r2, [sp, #0]
3400e6d8:	4620      	mov	r0, r4
3400e6da:	78aa      	ldrb	r2, [r5, #2]
3400e6dc:	7869      	ldrb	r1, [r5, #1]
3400e6de:	f7fe ff81 	bl	3400d5e4 <MX66UW1G45G_WriteCfg2Register>
3400e6e2:	2800      	cmp	r0, #0
3400e6e4:	d1e0      	bne.n	3400e6a8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
3400e6e6:	2028      	movs	r0, #40	@ 0x28
3400e6e8:	f010 fbfa 	bl	3401eee0 <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400e6ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3400e6f0:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400e6f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400e6f6:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400e6f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400e6fa:	f00d f845 	bl	3401b788 <HAL_XSPI_Init>
3400e6fe:	b9a8      	cbnz	r0, 3400e72c <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400e700:	2201      	movs	r2, #1
3400e702:	4620      	mov	r0, r4
3400e704:	4611      	mov	r1, r2
3400e706:	f7fe fdc1 	bl	3400d28c <MX66UW1G45G_AutoPollingMemReady>
3400e70a:	4603      	mov	r3, r0
3400e70c:	2800      	cmp	r0, #0
3400e70e:	d1cb      	bne.n	3400e6a8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
3400e710:	aa03      	add	r2, sp, #12
3400e712:	9200      	str	r2, [sp, #0]
3400e714:	2201      	movs	r2, #1
3400e716:	4620      	mov	r0, r4
3400e718:	4611      	mov	r1, r2
3400e71a:	f7fe ffbb 	bl	3400d694 <MX66UW1G45G_ReadCfg2Register>
3400e71e:	2800      	cmp	r0, #0
3400e720:	d1c2      	bne.n	3400e6a8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX66UW1G45G_CR2_DOPI)
3400e722:	f89d 300c 	ldrb.w	r3, [sp, #12]
3400e726:	2b02      	cmp	r3, #2
3400e728:	d0c0      	beq.n	3400e6ac <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
3400e72a:	e7bd      	b.n	3400e6a8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
3400e72c:	f06f 0003 	mvn.w	r0, #3
  return ret;
3400e730:	e7bc      	b.n	3400e6ac <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
3400e732:	bf00      	nop
3400e734:	340daf18 	.word	0x340daf18
3400e738:	340daf1c 	.word	0x340daf1c

3400e73c <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 1;
3400e73c:	2301      	movs	r3, #1
3400e73e:	4a0f      	ldr	r2, [pc, #60]	@ (3400e77c <MX_XSPI_NOR_Init+0x40>)
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400e740:	f04f 0c02 	mov.w	ip, #2
  hxspi->Init.FifoThresholdByte       = 1;
3400e744:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 1 GBits */
3400e748:	680b      	ldr	r3, [r1, #0]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
3400e74a:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 1 GBits */
3400e74c:	6103      	str	r3, [r0, #16]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400e74e:	2300      	movs	r3, #0
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
3400e750:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
3400e752:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hxspi->Init.SampleShifting          = Init->SampleShifting;
3400e754:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400e756:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hxspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
3400e75a:	61c3      	str	r3, [r0, #28]
  hxspi->Init.ChipSelectBoundary      = HAL_XSPI_BONDARYOF_NONE;
3400e75c:	6303      	str	r3, [r0, #48]	@ 0x30
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
3400e75e:	6083      	str	r3, [r0, #8]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
3400e760:	6203      	str	r3, [r0, #32]
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
3400e762:	68cb      	ldr	r3, [r1, #12]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
3400e764:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
3400e766:	2b01      	cmp	r3, #1
3400e768:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400e76c:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400e76e:	bf04      	itt	eq
3400e770:	f04f 5380 	moveq.w	r3, #268435456	@ 0x10000000
3400e774:	62c3      	streq	r3, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
3400e776:	f00d b807 	b.w	3401b788 <HAL_XSPI_Init>
3400e77a:	bf00      	nop
3400e77c:	5802a000 	.word	0x5802a000

3400e780 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400e780:	4601      	mov	r1, r0
{
3400e782:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400e784:	b9b0      	cbnz	r0, 3400e7b4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>
    if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400e786:	4c0d      	ldr	r4, [pc, #52]	@ (3400e7bc <BSP_XSPI_NOR_EnableMemoryMappedMode+0x3c>)
    (void) (HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0));
3400e788:	480d      	ldr	r0, [pc, #52]	@ (3400e7c0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
3400e78a:	f00d fbcd 	bl	3401bf28 <HAL_XSPI_SetClockPrescaler>
    if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400e78e:	78a3      	ldrb	r3, [r4, #2]
3400e790:	7861      	ldrb	r1, [r4, #1]
3400e792:	b95b      	cbnz	r3, 3400e7ac <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX66UW1G45G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e794:	2201      	movs	r2, #1
3400e796:	480a      	ldr	r0, [pc, #40]	@ (3400e7c0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
3400e798:	f7fe fde6 	bl	3400d368 <MX66UW1G45G_EnableSTRMemoryMappedMode>
3400e79c:	b110      	cbz	r0, 3400e7a4 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
        ret = BSP_ERROR_COMPONENT_FAILURE;
3400e79e:	f06f 0004 	mvn.w	r0, #4
}
3400e7a2:	bd10      	pop	{r4, pc}
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
3400e7a4:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
3400e7a6:	2000      	movs	r0, #0
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
3400e7a8:	7023      	strb	r3, [r4, #0]
3400e7aa:	e7fa      	b.n	3400e7a2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x22>
      if (MX66UW1G45G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
3400e7ac:	4804      	ldr	r0, [pc, #16]	@ (3400e7c0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
3400e7ae:	f7fe fe40 	bl	3400d432 <MX66UW1G45G_EnableDTRMemoryMappedMode>
3400e7b2:	e7f3      	b.n	3400e79c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
    ret = BSP_ERROR_WRONG_PARAM;
3400e7b4:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400e7b8:	e7f3      	b.n	3400e7a2 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x22>
3400e7ba:	bf00      	nop
3400e7bc:	340daf18 	.word	0x340daf18
3400e7c0:	340daf1c 	.word	0x340daf1c

3400e7c4 <BSP_XSPI_NOR_ConfigFlash>:
{
3400e7c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
3400e7c8:	460d      	mov	r5, r1
3400e7ca:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400e7cc:	2800      	cmp	r0, #0
3400e7ce:	d15f      	bne.n	3400e890 <BSP_XSPI_NOR_ConfigFlash+0xcc>
    if (XSPI_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
3400e7d0:	4c32      	ldr	r4, [pc, #200]	@ (3400e89c <BSP_XSPI_NOR_ConfigFlash+0xd8>)
3400e7d2:	7823      	ldrb	r3, [r4, #0]
3400e7d4:	2b02      	cmp	r3, #2
3400e7d6:	d05e      	beq.n	3400e896 <BSP_XSPI_NOR_ConfigFlash+0xd2>
      switch (XSPI_Nor_Ctx[Instance].InterfaceMode)
3400e7d8:	7863      	ldrb	r3, [r4, #1]
3400e7da:	2b01      	cmp	r3, #1
3400e7dc:	d14f      	bne.n	3400e87e <BSP_XSPI_NOR_ConfigFlash+0xba>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != XSPI_Nor_Ctx[Instance].TransferRate))
3400e7de:	2901      	cmp	r1, #1
3400e7e0:	78a2      	ldrb	r2, [r4, #2]
3400e7e2:	d109      	bne.n	3400e7f8 <BSP_XSPI_NOR_ConfigFlash+0x34>
3400e7e4:	4296      	cmp	r6, r2
3400e7e6:	d107      	bne.n	3400e7f8 <BSP_XSPI_NOR_ConfigFlash+0x34>
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
3400e7e8:	2301      	movs	r3, #1
        XSPI_Nor_Ctx[Instance].TransferRate  = Rate;
3400e7ea:	2000      	movs	r0, #0
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
3400e7ec:	7023      	strb	r3, [r4, #0]
        XSPI_Nor_Ctx[Instance].InterfaceMode = Mode;
3400e7ee:	7065      	strb	r5, [r4, #1]
        XSPI_Nor_Ctx[Instance].TransferRate  = Rate;
3400e7f0:	70a6      	strb	r6, [r4, #2]
}
3400e7f2:	b004      	add	sp, #16
3400e7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static int32_t XSPI_NOR_ExitOPIMode(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e7f8:	4f29      	ldr	r7, [pc, #164]	@ (3400e8a0 <BSP_XSPI_NOR_ConfigFlash+0xdc>)
3400e7fa:	2101      	movs	r1, #1
3400e7fc:	4638      	mov	r0, r7
3400e7fe:	f7fe fe68 	bl	3400d4d2 <MX66UW1G45G_WriteEnable>
3400e802:	4603      	mov	r3, r0
3400e804:	b110      	cbz	r0, 3400e80c <BSP_XSPI_NOR_ConfigFlash+0x48>
            ret = XSPI_NOR_ExitOPIMode(Instance);
3400e806:	f06f 0004 	mvn.w	r0, #4
3400e80a:	e7f2      	b.n	3400e7f2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e80c:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
3400e80e:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e812:	78a2      	ldrb	r2, [r4, #2]
3400e814:	4638      	mov	r0, r7
3400e816:	7861      	ldrb	r1, [r4, #1]
3400e818:	f7fe fee4 	bl	3400d5e4 <MX66UW1G45G_WriteCfg2Register>
3400e81c:	4680      	mov	r8, r0
3400e81e:	2800      	cmp	r0, #0
3400e820:	d1f1      	bne.n	3400e806 <BSP_XSPI_NOR_ConfigFlash+0x42>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
3400e822:	2028      	movs	r0, #40	@ 0x28
3400e824:	f010 fb5c 	bl	3401eee0 <HAL_Delay>

      if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
3400e828:	78a3      	ldrb	r3, [r4, #2]
3400e82a:	2b01      	cmp	r3, #1
3400e82c:	d01b      	beq.n	3400e866 <BSP_XSPI_NOR_ConfigFlash+0xa2>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
3400e82e:	2200      	movs	r2, #0
3400e830:	481b      	ldr	r0, [pc, #108]	@ (3400e8a0 <BSP_XSPI_NOR_ConfigFlash+0xdc>)
3400e832:	4611      	mov	r1, r2
3400e834:	f7fe fd2a 	bl	3400d28c <MX66UW1G45G_AutoPollingMemReady>
3400e838:	4603      	mov	r3, r0
3400e83a:	2800      	cmp	r0, #0
3400e83c:	d1e3      	bne.n	3400e806 <BSP_XSPI_NOR_ConfigFlash+0x42>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX66UW1G45G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
3400e83e:	aa03      	add	r2, sp, #12
3400e840:	4601      	mov	r1, r0
3400e842:	9200      	str	r2, [sp, #0]
3400e844:	4602      	mov	r2, r0
3400e846:	4816      	ldr	r0, [pc, #88]	@ (3400e8a0 <BSP_XSPI_NOR_ConfigFlash+0xdc>)
3400e848:	f7fe ff24 	bl	3400d694 <MX66UW1G45G_ReadCfg2Register>
3400e84c:	2800      	cmp	r0, #0
3400e84e:	d1da      	bne.n	3400e806 <BSP_XSPI_NOR_ConfigFlash+0x42>
                                               MX66UW1G45G_CR2_REG1_ADDR, reg) != MX66UW1G45G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
3400e850:	f89d 300c 	ldrb.w	r3, [sp, #12]
3400e854:	2b00      	cmp	r3, #0
3400e856:	d1d6      	bne.n	3400e806 <BSP_XSPI_NOR_ConfigFlash+0x42>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
3400e858:	2d01      	cmp	r5, #1
3400e85a:	d1c5      	bne.n	3400e7e8 <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400e85c:	78a3      	ldrb	r3, [r4, #2]
3400e85e:	b993      	cbnz	r3, 3400e886 <BSP_XSPI_NOR_ConfigFlash+0xc2>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
3400e860:	f7ff ff18 	bl	3400e694 <XSPI_NOR_EnterDOPIMode.constprop.0>
3400e864:	e011      	b.n	3400e88a <BSP_XSPI_NOR_ConfigFlash+0xc6>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400e866:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
3400e868:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
3400e86c:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400e870:	f00c ff8a 	bl	3401b788 <HAL_XSPI_Init>
3400e874:	2800      	cmp	r0, #0
3400e876:	d0da      	beq.n	3400e82e <BSP_XSPI_NOR_ConfigFlash+0x6a>
            ret = XSPI_NOR_ExitOPIMode(Instance);
3400e878:	f06f 0003 	mvn.w	r0, #3
3400e87c:	e7b9      	b.n	3400e7f2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
3400e87e:	2901      	cmp	r1, #1
3400e880:	d1b2      	bne.n	3400e7e8 <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
3400e882:	2a00      	cmp	r2, #0
3400e884:	d1ec      	bne.n	3400e860 <BSP_XSPI_NOR_ConfigFlash+0x9c>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
3400e886:	f7ff febf 	bl	3400e608 <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
3400e88a:	2800      	cmp	r0, #0
3400e88c:	d1b1      	bne.n	3400e7f2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
3400e88e:	e7ab      	b.n	3400e7e8 <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
3400e890:	f06f 0001 	mvn.w	r0, #1
3400e894:	e7ad      	b.n	3400e7f2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
3400e896:	f06f 0019 	mvn.w	r0, #25
  return ret;
3400e89a:	e7aa      	b.n	3400e7f2 <BSP_XSPI_NOR_ConfigFlash+0x2e>
3400e89c:	340daf18 	.word	0x340daf18
3400e8a0:	340daf1c 	.word	0x340daf1c

3400e8a4 <BSP_XSPI_NOR_Init>:
{
3400e8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e8a8:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400e8aa:	4604      	mov	r4, r0
3400e8ac:	4e82      	ldr	r6, [pc, #520]	@ (3400eab8 <BSP_XSPI_NOR_Init+0x214>)
{
3400e8ae:	b08f      	sub	sp, #60	@ 0x3c
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400e8b0:	2800      	cmp	r0, #0
3400e8b2:	f040 80fa 	bne.w	3400eaaa <BSP_XSPI_NOR_Init+0x206>
    if (XSPI_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
3400e8b6:	f8df 820c 	ldr.w	r8, [pc, #524]	@ 3400eac4 <BSP_XSPI_NOR_Init+0x220>
3400e8ba:	f898 3000 	ldrb.w	r3, [r8]
3400e8be:	b153      	cbz	r3, 3400e8d6 <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
3400e8c0:	2500      	movs	r5, #0
 (void) (HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0));
3400e8c2:	2064      	movs	r0, #100	@ 0x64
3400e8c4:	2100      	movs	r1, #0
3400e8c6:	fb00 6004 	mla	r0, r0, r4, r6
3400e8ca:	f00d fb2d 	bl	3401bf28 <HAL_XSPI_SetClockPrescaler>
}
3400e8ce:	4628      	mov	r0, r5
3400e8d0:	b00f      	add	sp, #60	@ 0x3c
3400e8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400e8d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3400e8da:	4a78      	ldr	r2, [pc, #480]	@ (3400eabc <BSP_XSPI_NOR_Init+0x218>)
  __HAL_RCC_PWR_CLK_ENABLE();
3400e8dc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
3400e8e0:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400e8e4:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
  GPIO_InitStruct.Alternate = XSPI_NOR_CS_PIN_AF;
3400e8e8:	2509      	movs	r5, #9
3400e8ea:	9100      	str	r1, [sp, #0]
  (void)tmpreg;
3400e8ec:	9900      	ldr	r1, [sp, #0]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400e8ee:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400e8f2:	441a      	add	r2, r3
3400e8f4:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
  __HAL_RCC_PWR_CLK_ENABLE();
3400e8f8:	f7ff fe7a 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
3400e8fc:	f005 fd96 	bl	3401442c <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
3400e900:	2101      	movs	r1, #1
3400e902:	2002      	movs	r0, #2
3400e904:	f005 fd44 	bl	34014390 <HAL_PWREx_ConfigVddIORange>
  XSPI_NOR_CLK_GPIO_CLK_ENABLE();
3400e908:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3400e90c:	f7ff fe70 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400e910:	2701      	movs	r7, #1
  XSPI_NOR_DQS_GPIO_CLK_ENABLE();
3400e912:	f7ff fe6d 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400e916:	f04f 0b03 	mov.w	fp, #3
  XSPI_NOR_CS_GPIO_CLK_ENABLE();
3400e91a:	f7ff fe69 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D0_GPIO_CLK_ENABLE();
3400e91e:	f7ff fe67 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D1_GPIO_CLK_ENABLE();
3400e922:	f7ff fe65 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D2_GPIO_CLK_ENABLE();
3400e926:	f7ff fe63 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D3_GPIO_CLK_ENABLE();
3400e92a:	f7ff fe61 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D4_GPIO_CLK_ENABLE();
3400e92e:	f7ff fe5f 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D5_GPIO_CLK_ENABLE();
3400e932:	f7ff fe5d 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D6_GPIO_CLK_ENABLE();
3400e936:	f7ff fe5b 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D7_GPIO_CLK_ENABLE();
3400e93a:	f7ff fe59 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_NOR_CS_PIN;
3400e93e:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
3400e940:	485f      	ldr	r0, [pc, #380]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e942:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
3400e944:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400e948:	e9cd 7b07 	strd	r7, fp, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_NOR_CS_PIN_AF;
3400e94c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
3400e94e:	f003 fea7 	bl	340126a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
3400e952:	485b      	ldr	r0, [pc, #364]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e954:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_DQS_PIN;
3400e956:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_DQS_PIN_AF;
3400e958:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
3400e95a:	f003 fea1 	bl	340126a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_CLK_PIN;
3400e95e:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
3400e960:	4857      	ldr	r0, [pc, #348]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e962:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_CLK_PIN;
3400e964:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
3400e966:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_NOR_CLK_PIN_AF;
3400e968:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
3400e96a:	f003 fe99 	bl	340126a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D0_PIN;
3400e96e:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
3400e970:	4853      	ldr	r0, [pc, #332]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e972:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D0_PIN;
3400e974:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D0_PIN_AF;
3400e976:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
3400e978:	f003 fe92 	bl	340126a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D1_PIN;
3400e97c:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
3400e97e:	4850      	ldr	r0, [pc, #320]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e980:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D1_PIN;
3400e982:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D1_PIN_AF;
3400e984:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
3400e986:	f003 fe8b 	bl	340126a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D2_PIN;
3400e98a:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_NOR_D3_PIN;
3400e98c:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
3400e990:	484b      	ldr	r0, [pc, #300]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e992:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D2_PIN;
3400e994:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D2_PIN_AF;
3400e996:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
3400e998:	f003 fe82 	bl	340126a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
3400e99c:	4848      	ldr	r0, [pc, #288]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e99e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D3_PIN;
3400e9a0:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D3_PIN_AF;
3400e9a4:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
3400e9a6:	f003 fe7b 	bl	340126a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D4_PIN;
3400e9aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
3400e9ae:	4844      	ldr	r0, [pc, #272]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e9b0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D4_PIN;
3400e9b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D4_PIN_AF;
3400e9b4:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
3400e9b6:	f003 fe73 	bl	340126a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D5_PIN;
3400e9ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
3400e9be:	4840      	ldr	r0, [pc, #256]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e9c0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D5_PIN;
3400e9c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D5_PIN_AF;
3400e9c4:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
3400e9c6:	f003 fe6b 	bl	340126a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D6_PIN;
3400e9ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
3400e9ce:	483c      	ldr	r0, [pc, #240]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
3400e9d0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D6_PIN;
3400e9d2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D6_PIN_AF;
3400e9d4:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
3400e9d6:	f003 fe63 	bl	340126a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D7_PIN;
3400e9da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
3400e9de:	a905      	add	r1, sp, #20
3400e9e0:	4837      	ldr	r0, [pc, #220]	@ (3400eac0 <BSP_XSPI_NOR_Init+0x21c>)
  GPIO_InitStruct.Pin       = XSPI_NOR_D7_PIN;
3400e9e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D7_PIN_AF;
3400e9e4:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
3400e9e6:	f003 fe5b 	bl	340126a0 <HAL_GPIO_Init>
      (void)MX66UW1G45G_GetFlashInfo(&pInfo);
3400e9ea:	a805      	add	r0, sp, #20
3400e9ec:	f7fe fc35 	bl	3400d25a <MX66UW1G45G_GetFlashInfo>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3400e9f0:	9b05      	ldr	r3, [sp, #20]
3400e9f2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
3400e9f6:	2b00      	cmp	r3, #0
3400e9f8:	fab3 f283 	clz	r2, r3
3400e9fc:	bf08      	it	eq
3400e9fe:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t)Init->TransferRate;
3400ea00:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
3400ea04:	4630      	mov	r0, r6
3400ea06:	a901      	add	r1, sp, #4
      xspi_init.ClockPrescaler = 0x03; /* XSPI clock = 200MHz / ClockPrescaler = 50MHz, then switch to 200MHz*/
3400ea08:	f8cd b008 	str.w	fp, [sp, #8]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
3400ea0c:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3400ea0e:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t)Init->TransferRate;
3400ea10:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
3400ea12:	f7ff fe93 	bl	3400e73c <MX_XSPI_NOR_Init>
3400ea16:	2800      	cmp	r0, #0
3400ea18:	d14a      	bne.n	3400eab0 <BSP_XSPI_NOR_Init+0x20c>
  if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
3400ea1a:	4622      	mov	r2, r4
3400ea1c:	4621      	mov	r1, r4
3400ea1e:	4630      	mov	r0, r6
3400ea20:	f7fe fe9a 	bl	3400d758 <MX66UW1G45G_ResetEnable>
3400ea24:	b110      	cbz	r0, 3400ea2c <BSP_XSPI_NOR_Init+0x188>
        ret = BSP_ERROR_COMPONENT_FAILURE;
3400ea26:	f06f 0504 	mvn.w	r5, #4
3400ea2a:	e74a      	b.n	3400e8c2 <BSP_XSPI_NOR_Init+0x1e>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
3400ea2c:	4622      	mov	r2, r4
3400ea2e:	4621      	mov	r1, r4
3400ea30:	4630      	mov	r0, r6
3400ea32:	f7fe febe 	bl	3400d7b2 <MX66UW1G45G_ResetMemory>
3400ea36:	2800      	cmp	r0, #0
3400ea38:	d1f5      	bne.n	3400ea26 <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400ea3a:	4622      	mov	r2, r4
3400ea3c:	4639      	mov	r1, r7
3400ea3e:	4630      	mov	r0, r6
3400ea40:	f7fe fe8a 	bl	3400d758 <MX66UW1G45G_ResetEnable>
3400ea44:	2800      	cmp	r0, #0
3400ea46:	d1ee      	bne.n	3400ea26 <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400ea48:	4622      	mov	r2, r4
3400ea4a:	4639      	mov	r1, r7
3400ea4c:	4630      	mov	r0, r6
3400ea4e:	f7fe feb0 	bl	3400d7b2 <MX66UW1G45G_ResetMemory>
3400ea52:	2800      	cmp	r0, #0
3400ea54:	d1e7      	bne.n	3400ea26 <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400ea56:	463a      	mov	r2, r7
3400ea58:	4639      	mov	r1, r7
3400ea5a:	4630      	mov	r0, r6
3400ea5c:	f7fe fe7c 	bl	3400d758 <MX66UW1G45G_ResetEnable>
3400ea60:	2800      	cmp	r0, #0
3400ea62:	d1e0      	bne.n	3400ea26 <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400ea64:	463a      	mov	r2, r7
3400ea66:	4639      	mov	r1, r7
3400ea68:	4630      	mov	r0, r6
3400ea6a:	f7fe fea2 	bl	3400d7b2 <MX66UW1G45G_ResetMemory>
3400ea6e:	2800      	cmp	r0, #0
3400ea70:	d1d9      	bne.n	3400ea26 <BSP_XSPI_NOR_Init+0x182>
    HAL_Delay(MX66UW1G45G_RESET_MAX_TIME);
3400ea72:	2064      	movs	r0, #100	@ 0x64
    XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;     /* After reset S/W setting to indirect access  */
3400ea74:	f888 7000 	strb.w	r7, [r8]
    XSPI_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;    /* After reset H/W back to SPI mode by default */
3400ea78:	f888 4001 	strb.w	r4, [r8, #1]
    XSPI_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode        */
3400ea7c:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX66UW1G45G_RESET_MAX_TIME);
3400ea80:	f010 fa2e 	bl	3401eee0 <HAL_Delay>
      else if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400ea84:	4630      	mov	r0, r6
3400ea86:	f898 2002 	ldrb.w	r2, [r8, #2]
3400ea8a:	f898 1001 	ldrb.w	r1, [r8, #1]
3400ea8e:	f7fe fbfd 	bl	3400d28c <MX66UW1G45G_AutoPollingMemReady>
3400ea92:	2800      	cmp	r0, #0
3400ea94:	d1c7      	bne.n	3400ea26 <BSP_XSPI_NOR_Init+0x182>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
3400ea96:	f899 2001 	ldrb.w	r2, [r9, #1]
3400ea9a:	f899 1000 	ldrb.w	r1, [r9]
3400ea9e:	f7ff fe91 	bl	3400e7c4 <BSP_XSPI_NOR_ConfigFlash>
3400eaa2:	2800      	cmp	r0, #0
3400eaa4:	f43f af0c 	beq.w	3400e8c0 <BSP_XSPI_NOR_Init+0x1c>
3400eaa8:	e7bd      	b.n	3400ea26 <BSP_XSPI_NOR_Init+0x182>
    ret = BSP_ERROR_WRONG_PARAM;
3400eaaa:	f06f 0501 	mvn.w	r5, #1
3400eaae:	e708      	b.n	3400e8c2 <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
3400eab0:	f06f 0503 	mvn.w	r5, #3
3400eab4:	e705      	b.n	3400e8c2 <BSP_XSPI_NOR_Init+0x1e>
3400eab6:	bf00      	nop
3400eab8:	340daf1c 	.word	0x340daf1c
3400eabc:	56028000 	.word	0x56028000
3400eac0:	56023400 	.word	0x56023400
3400eac4:	340daf18 	.word	0x340daf18

3400eac8 <MX_XSPI_RAM_Init>:
{
3400eac8:	b538      	push	{r3, r4, r5, lr}
3400eaca:	4604      	mov	r4, r0
3400eacc:	460d      	mov	r5, r1
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI1);
3400eace:	2000      	movs	r0, #0
3400ead0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400ead4:	f00b f802 	bl	34019adc <HAL_RCCEx_GetPeriphCLKFreq>
  hxspi->Init.FifoThresholdByte          = 8;
3400ead8:	2308      	movs	r3, #8
3400eada:	4a13      	ldr	r2, [pc, #76]	@ (3400eb28 <MX_XSPI_RAM_Init+0x60>)
  hxspi->Init.SampleShifting             = Init->SampleShifting;
3400eadc:	68a9      	ldr	r1, [r5, #8]
  hxspi->Init.FifoThresholdByte          = 8;
3400eade:	e9c4 2300 	strd	r2, r3, [r4]
  hxspi->Init.MemoryMode                 = HAL_XSPI_SINGLE_MEM;
3400eae2:	2200      	movs	r2, #0
3400eae4:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
3400eae8:	e9c4 2302 	strd	r2, r3, [r4, #8]
  hxspi->Init.MemorySize                 = Init->MemorySize;
3400eaec:	682b      	ldr	r3, [r5, #0]
  hxspi->Init.MemorySelect               = HAL_XSPI_CSSEL_NCS1;
3400eaee:	63e2      	str	r2, [r4, #60]	@ 0x3c
  hxspi->Init.MemorySize                 = Init->MemorySize;
3400eaf0:	6123      	str	r3, [r4, #16]
  hxspi->Init.ChipSelectHighTimeCycle    = 5;
3400eaf2:	2305      	movs	r3, #5
3400eaf4:	6163      	str	r3, [r4, #20]
  hxspi->Init.ClockPrescaler             = Init->ClockPrescaler;
3400eaf6:	686b      	ldr	r3, [r5, #4]
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
3400eaf8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
  hxspi->Init.SampleShifting             = Init->SampleShifting;
3400eafc:	62a1      	str	r1, [r4, #40]	@ 0x28
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
3400eafe:	210b      	movs	r1, #11
  hxspi->Init.ClockPrescaler             = Init->ClockPrescaler;
3400eb00:	6263      	str	r3, [r4, #36]	@ 0x24
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
3400eb02:	fbb0 f3f3 	udiv	r3, r0, r3
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
3400eb06:	e9c4 510b 	strd	r5, r1, [r4, #44]	@ 0x2c
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
3400eb0a:	4908      	ldr	r1, [pc, #32]	@ (3400eb2c <MX_XSPI_RAM_Init+0x64>)
3400eb0c:	005b      	lsls	r3, r3, #1
3400eb0e:	fbb3 f3f1 	udiv	r3, r3, r1
3400eb12:	3b04      	subs	r3, #4
  return HAL_XSPI_Init(hxspi);
3400eb14:	4620      	mov	r0, r4
  hxspi->Init.ClockMode                  = HAL_XSPI_CLOCK_MODE_0;
3400eb16:	61e2      	str	r2, [r4, #28]
  hxspi->Init.FreeRunningClock           = HAL_XSPI_FREERUNCLK_DISABLE;
3400eb18:	61a2      	str	r2, [r4, #24]
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
3400eb1a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hxspi->Init.WrapSize                   = HAL_XSPI_WRAP_NOT_SUPPORTED;
3400eb1c:	6222      	str	r2, [r4, #32]
}
3400eb1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HAL_XSPI_Init(hxspi);
3400eb22:	f00c be31 	b.w	3401b788 <HAL_XSPI_Init>
3400eb26:	bf00      	nop
3400eb28:	58025000 	.word	0x58025000
3400eb2c:	000f4240 	.word	0x000f4240

3400eb30 <BSP_XSPI_RAM_Init>:
{
3400eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
3400eb34:	4604      	mov	r4, r0
{
3400eb36:	b08b      	sub	sp, #44	@ 0x2c
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
3400eb38:	2800      	cmp	r0, #0
3400eb3a:	f040 810d 	bne.w	3400ed58 <BSP_XSPI_RAM_Init+0x228>
    if (XSPI_Ram_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
3400eb3e:	4e88      	ldr	r6, [pc, #544]	@ (3400ed60 <BSP_XSPI_RAM_Init+0x230>)
3400eb40:	7833      	ldrb	r3, [r6, #0]
3400eb42:	9301      	str	r3, [sp, #4]
3400eb44:	2b00      	cmp	r3, #0
3400eb46:	f040 80f0 	bne.w	3400ed2a <BSP_XSPI_RAM_Init+0x1fa>

  /* hxspi unused argument(s) compilation warning */
  UNUSED(hxspi);

 /* XSPI power enable */
  __HAL_RCC_PWR_CLK_ENABLE();
3400eb4a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
3400eb4e:	f7ff fd4f 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO2();
3400eb52:	f005 fc63 	bl	3401441c <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO2, PWR_VDDIO_RANGE_1V8);
3400eb56:	2101      	movs	r1, #1
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400eb58:	f04f 0820 	mov.w	r8, #32
3400eb5c:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
3400eb60:	4608      	mov	r0, r1
3400eb62:	f005 fc15 	bl	34014390 <HAL_PWREx_ConfigVddIORange>
3400eb66:	4b7f      	ldr	r3, [pc, #508]	@ (3400ed64 <BSP_XSPI_RAM_Init+0x234>)
  /* XSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_CS_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
3400eb68:	2409      	movs	r4, #9
3400eb6a:	f8c3 8a60 	str.w	r8, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400eb6e:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
3400eb72:	2501      	movs	r5, #1
3400eb74:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
3400eb76:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400eb78:	4a7b      	ldr	r2, [pc, #492]	@ (3400ed68 <BSP_XSPI_RAM_Init+0x238>)
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400eb7a:	f8c3 8a20 	str.w	r8, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400eb7e:	f8c2 8220 	str.w	r8, [r2, #544]	@ 0x220
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400eb82:	f8c3 7a60 	str.w	r7, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400eb86:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
3400eb8a:	f04f 0903 	mov.w	r9, #3
3400eb8e:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
3400eb90:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400eb92:	f8c3 7a20 	str.w	r7, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400eb96:	f8c2 7220 	str.w	r7, [r2, #544]	@ 0x220
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
3400eb9a:	2202      	movs	r2, #2
  XSPI_RAM_CLK_GPIO_CLK_ENABLE();
3400eb9c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
3400eba0:	f7ff fd26 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_DQS_GPIO_CLK_ENABLE();
3400eba4:	f7ff fd24 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_CS_GPIO_CLK_ENABLE();
3400eba8:	f7ff fd22 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D0_GPIO_CLK_ENABLE();
3400ebac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
3400ebb0:	f7ff fd1e 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
3400ebb4:	a905      	add	r1, sp, #20
  XSPI_RAM_D1_GPIO_CLK_ENABLE();
3400ebb6:	f7ff fd1b 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D2_GPIO_CLK_ENABLE();
3400ebba:	f7ff fd19 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D3_GPIO_CLK_ENABLE();
3400ebbe:	f7ff fd17 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D4_GPIO_CLK_ENABLE();
3400ebc2:	f7ff fd15 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D5_GPIO_CLK_ENABLE();
3400ebc6:	f7ff fd13 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D6_GPIO_CLK_ENABLE();
3400ebca:	f7ff fd11 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D7_GPIO_CLK_ENABLE();
3400ebce:	f7ff fd0f 	bl	3400e5f0 <LL_AHB4_GRP1_EnableClock>
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
3400ebd2:	4866      	ldr	r0, [pc, #408]	@ (3400ed6c <BSP_XSPI_RAM_Init+0x23c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
3400ebd4:	e9cd 5205 	strd	r5, r2, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
3400ebd8:	e9cd 9408 	strd	r9, r4, [sp, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ebdc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
3400ebde:	f003 fd5f 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS0_PIN;
3400ebe2:	2304      	movs	r3, #4
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS0_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);

  /* XSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS1_PIN;
3400ebe4:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS1_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);

  /* XSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_CLK_PIN;
3400ebe8:	f04f 0a10 	mov.w	sl, #16
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);
3400ebec:	485f      	ldr	r0, [pc, #380]	@ (3400ed6c <BSP_XSPI_RAM_Init+0x23c>)
3400ebee:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS0_PIN;
3400ebf0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS0_PIN_AF;
3400ebf2:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ebf4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);
3400ebf6:	f003 fd53 	bl	340126a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);
3400ebfa:	485c      	ldr	r0, [pc, #368]	@ (3400ed6c <BSP_XSPI_RAM_Init+0x23c>)
3400ebfc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS1_PIN_AF;
3400ebfe:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS1_PIN;
3400ec00:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ec04:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);
3400ec06:	f003 fd4b 	bl	340126a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = XSPI_RAM_CLK_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
3400ec0a:	4858      	ldr	r0, [pc, #352]	@ (3400ed6c <BSP_XSPI_RAM_Init+0x23c>)
3400ec0c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_CLK_PIN_AF;
3400ec0e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_CLK_PIN;
3400ec10:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ec14:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
3400ec16:	f003 fd43 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D0_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D0_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
3400ec1a:	4855      	ldr	r0, [pc, #340]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ec1c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D0_PIN_AF;
3400ec1e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D0_PIN;
3400ec20:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ec22:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
3400ec24:	f003 fd3c 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D1_PIN;
3400ec28:	2202      	movs	r2, #2
  GPIO_InitStruct.Alternate = XSPI_RAM_D1_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
3400ec2a:	4851      	ldr	r0, [pc, #324]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ec2c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D1_PIN;
3400ec2e:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D1_PIN_AF;
3400ec30:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
3400ec32:	f003 fd35 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D2_PIN;
3400ec36:	2304      	movs	r3, #4
  GPIO_InitStruct.Alternate = XSPI_RAM_D2_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
3400ec38:	484d      	ldr	r0, [pc, #308]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ec3a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D2_PIN;
3400ec3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D2_PIN_AF;
3400ec3e:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
3400ec40:	f003 fd2e 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D3_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D3_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
3400ec44:	484a      	ldr	r0, [pc, #296]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ec46:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D3_PIN_AF;
3400ec48:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D3_PIN;
3400ec4a:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
3400ec4e:	f003 fd27 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D4_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D4_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
3400ec52:	4847      	ldr	r0, [pc, #284]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ec54:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D4_PIN_AF;
3400ec56:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D4_PIN;
3400ec58:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
3400ec5c:	f003 fd20 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D5_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D5_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
3400ec60:	4843      	ldr	r0, [pc, #268]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ec62:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D5_PIN_AF;
3400ec64:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D5_PIN;
3400ec66:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
3400ec6a:	f003 fd19 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D6_PIN;
3400ec6e:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Alternate = XSPI_RAM_D6_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
3400ec70:	483f      	ldr	r0, [pc, #252]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ec72:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D6_PIN_AF;
3400ec74:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D6_PIN;
3400ec76:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
3400ec78:	f003 fd12 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D7_PIN;
3400ec7c:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Alternate = XSPI_RAM_D7_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
3400ec7e:	483c      	ldr	r0, [pc, #240]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ec80:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D7_PIN_AF;
3400ec82:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D7_PIN;
3400ec84:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
3400ec86:	f003 fd0b 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D8_PIN;
3400ec8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  GPIO_InitStruct.Alternate = XSPI_RAM_D8_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D8_GPIO_PORT, &GPIO_InitStruct);
3400ec8e:	4838      	ldr	r0, [pc, #224]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ec90:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D8_PIN_AF;
3400ec92:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D8_PIN;
3400ec94:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D8_GPIO_PORT, &GPIO_InitStruct);
3400ec96:	f003 fd03 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D9_PIN;
3400ec9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  GPIO_InitStruct.Alternate = XSPI_RAM_D9_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D9_GPIO_PORT, &GPIO_InitStruct);
3400ec9e:	4834      	ldr	r0, [pc, #208]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400eca0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D9_PIN_AF;
3400eca2:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D9_PIN;
3400eca4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D9_GPIO_PORT, &GPIO_InitStruct);
3400eca6:	f003 fcfb 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D10_PIN;
3400ecaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  GPIO_InitStruct.Alternate = XSPI_RAM_D10_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D10_GPIO_PORT, &GPIO_InitStruct);
3400ecae:	4830      	ldr	r0, [pc, #192]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ecb0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D10_PIN_AF;
3400ecb2:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D10_PIN;
3400ecb4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D10_GPIO_PORT, &GPIO_InitStruct);
3400ecb6:	f003 fcf3 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D11_PIN;
3400ecba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Alternate = XSPI_RAM_D11_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D11_GPIO_PORT, &GPIO_InitStruct);
3400ecbe:	482c      	ldr	r0, [pc, #176]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ecc0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D11_PIN_AF;
3400ecc2:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D11_PIN;
3400ecc4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D11_GPIO_PORT, &GPIO_InitStruct);
3400ecc6:	f003 fceb 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D12_PIN;
3400ecca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  GPIO_InitStruct.Alternate = XSPI_RAM_D12_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D12_GPIO_PORT, &GPIO_InitStruct);
3400ecce:	4828      	ldr	r0, [pc, #160]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ecd0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D12_PIN;
3400ecd2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D12_PIN_AF;
3400ecd4:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D12_GPIO_PORT, &GPIO_InitStruct);
3400ecd6:	f003 fce3 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D13_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D13_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D13_GPIO_PORT, &GPIO_InitStruct);
3400ecda:	4825      	ldr	r0, [pc, #148]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ecdc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D13_PIN_AF;
3400ecde:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D13_PIN;
3400ece0:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D13_GPIO_PORT, &GPIO_InitStruct);
3400ece2:	f003 fcdd 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D14_PIN;
3400ece6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  GPIO_InitStruct.Alternate = XSPI_RAM_D14_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D14_GPIO_PORT, &GPIO_InitStruct);
3400ecea:	4821      	ldr	r0, [pc, #132]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ecec:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D14_PIN_AF;
3400ecee:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D14_PIN;
3400ecf0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D14_GPIO_PORT, &GPIO_InitStruct);
3400ecf2:	f003 fcd5 	bl	340126a0 <HAL_GPIO_Init>

  /* XSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D15_PIN;
3400ecf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  GPIO_InitStruct.Alternate = XSPI_RAM_D15_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D15_GPIO_PORT, &GPIO_InitStruct);
3400ecfa:	481d      	ldr	r0, [pc, #116]	@ (3400ed70 <BSP_XSPI_RAM_Init+0x240>)
3400ecfc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D15_PIN_AF;
3400ecfe:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D15_PIN;
3400ed00:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D15_GPIO_PORT, &GPIO_InitStruct);
3400ed02:	f003 fccd 	bl	340126a0 <HAL_GPIO_Init>
      xspi_init.MemorySize     = HAL_XSPI_SIZE_256MB;
3400ed06:	2318      	movs	r3, #24
3400ed08:	9305      	str	r3, [sp, #20]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3400ed0a:	9b01      	ldr	r3, [sp, #4]
      if (MX_XSPI_RAM_Init(&hxspi_ram[Instance], &xspi_init) != HAL_OK)
3400ed0c:	4819      	ldr	r0, [pc, #100]	@ (3400ed74 <BSP_XSPI_RAM_Init+0x244>)
3400ed0e:	a905      	add	r1, sp, #20
      xspi_init.ClockPrescaler = 3;
3400ed10:	f8cd 9018 	str.w	r9, [sp, #24]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3400ed14:	9307      	str	r3, [sp, #28]
      if (MX_XSPI_RAM_Init(&hxspi_ram[Instance], &xspi_init) != HAL_OK)
3400ed16:	f7ff fed7 	bl	3400eac8 <MX_XSPI_RAM_Init>
  int32_t ret = BSP_ERROR_NONE;
3400ed1a:	2800      	cmp	r0, #0
3400ed1c:	bf14      	ite	ne
3400ed1e:	f06f 0403 	mvnne.w	r4, #3
3400ed22:	2400      	moveq	r4, #0
      XSPI_Ram_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
3400ed24:	7035      	strb	r5, [r6, #0]
      XSPI_Ram_Ctx[Instance].LatencyType   = BSP_XSPI_RAM_FIXED_LATENCY;
3400ed26:	7075      	strb	r5, [r6, #1]
      XSPI_Ram_Ctx[Instance].BurstType     = BSP_XSPI_RAM_LINEAR_BURST;
3400ed28:	70b5      	strb	r5, [r6, #2]
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 0, 0x30));
3400ed2a:	2230      	movs	r2, #48	@ 0x30
3400ed2c:	2100      	movs	r1, #0
3400ed2e:	4811      	ldr	r0, [pc, #68]	@ (3400ed74 <BSP_XSPI_RAM_Init+0x244>)
3400ed30:	f7fe fa5b 	bl	3400d1ea <APS256XX_WriteReg>
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 4, 0x20));
3400ed34:	2220      	movs	r2, #32
3400ed36:	2104      	movs	r1, #4
3400ed38:	480e      	ldr	r0, [pc, #56]	@ (3400ed74 <BSP_XSPI_RAM_Init+0x244>)
3400ed3a:	f7fe fa56 	bl	3400d1ea <APS256XX_WriteReg>
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 8, 0x40));
3400ed3e:	2108      	movs	r1, #8
3400ed40:	2240      	movs	r2, #64	@ 0x40
3400ed42:	480c      	ldr	r0, [pc, #48]	@ (3400ed74 <BSP_XSPI_RAM_Init+0x244>)
3400ed44:	f7fe fa51 	bl	3400d1ea <APS256XX_WriteReg>
    (void) (HAL_XSPI_SetClockPrescaler(&hxspi_ram[Instance], 0));
3400ed48:	2100      	movs	r1, #0
3400ed4a:	480a      	ldr	r0, [pc, #40]	@ (3400ed74 <BSP_XSPI_RAM_Init+0x244>)
3400ed4c:	f00d f8ec 	bl	3401bf28 <HAL_XSPI_SetClockPrescaler>
}
3400ed50:	4620      	mov	r0, r4
3400ed52:	b00b      	add	sp, #44	@ 0x2c
3400ed54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
3400ed58:	f06f 0401 	mvn.w	r4, #1
  return ret;
3400ed5c:	e7f8      	b.n	3400ed50 <BSP_XSPI_RAM_Init+0x220>
3400ed5e:	bf00      	nop
3400ed60:	340daeb0 	.word	0x340daeb0
3400ed64:	56028000 	.word	0x56028000
3400ed68:	56029000 	.word	0x56029000
3400ed6c:	56023800 	.word	0x56023800
3400ed70:	56023c00 	.word	0x56023c00
3400ed74:	340daeb4 	.word	0x340daeb4

3400ed78 <BSP_XSPI_RAM_EnableMemoryMappedMode>:
{
3400ed78:	b507      	push	{r0, r1, r2, lr}
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
3400ed7a:	b968      	cbnz	r0, 3400ed98 <BSP_XSPI_RAM_EnableMemoryMappedMode+0x20>
    if (APS256XX_EnableMemoryMappedMode(&hxspi_ram[Instance], 7, 7, 1, 0) != APS256XX_OK)
3400ed7c:	2207      	movs	r2, #7
3400ed7e:	9000      	str	r0, [sp, #0]
3400ed80:	2301      	movs	r3, #1
3400ed82:	4611      	mov	r1, r2
3400ed84:	4806      	ldr	r0, [pc, #24]	@ (3400eda0 <BSP_XSPI_RAM_EnableMemoryMappedMode+0x28>)
3400ed86:	f7fe f9d5 	bl	3400d134 <APS256XX_EnableMemoryMappedMode>
      ret = BSP_ERROR_PERIPH_FAILURE;
3400ed8a:	2800      	cmp	r0, #0
3400ed8c:	bf18      	it	ne
3400ed8e:	f06f 0003 	mvnne.w	r0, #3
}
3400ed92:	b003      	add	sp, #12
3400ed94:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = BSP_ERROR_WRONG_PARAM;
3400ed98:	f06f 0001 	mvn.w	r0, #1
3400ed9c:	e7f9      	b.n	3400ed92 <BSP_XSPI_RAM_EnableMemoryMappedMode+0x1a>
3400ed9e:	bf00      	nop
3400eda0:	340daeb4 	.word	0x340daeb4

3400eda4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3400eda4:	480f      	ldr	r0, [pc, #60]	@ (3400ede4 <LoopForever+0x4>)
  msr   MSPLIM, r0
3400eda6:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3400edaa:	480f      	ldr	r0, [pc, #60]	@ (3400ede8 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3400edac:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3400edae:	f000 f829 	bl	3400ee04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3400edb2:	480e      	ldr	r0, [pc, #56]	@ (3400edec <LoopForever+0xc>)
  ldr r1, =_edata
3400edb4:	490e      	ldr	r1, [pc, #56]	@ (3400edf0 <LoopForever+0x10>)
  ldr r2, =_sidata
3400edb6:	4a0f      	ldr	r2, [pc, #60]	@ (3400edf4 <LoopForever+0x14>)
  movs r3, #0
3400edb8:	2300      	movs	r3, #0
  b LoopCopyDataInit
3400edba:	e002      	b.n	3400edc2 <LoopCopyDataInit>

3400edbc <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3400edbc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3400edbe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3400edc0:	3304      	adds	r3, #4

3400edc2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3400edc2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3400edc4:	428c      	cmp	r4, r1
  bcc CopyDataInit
3400edc6:	d3f9      	bcc.n	3400edbc <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3400edc8:	4a0b      	ldr	r2, [pc, #44]	@ (3400edf8 <LoopForever+0x18>)
  ldr r4, =_ebss
3400edca:	4c0c      	ldr	r4, [pc, #48]	@ (3400edfc <LoopForever+0x1c>)
  movs r3, #0
3400edcc:	2300      	movs	r3, #0
  b LoopFillZerobss
3400edce:	e001      	b.n	3400edd4 <LoopFillZerobss>

3400edd0 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3400edd0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3400edd2:	3204      	adds	r2, #4

3400edd4 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3400edd4:	42a2      	cmp	r2, r4
  bcc FillZerobss
3400edd6:	d3fb      	bcc.n	3400edd0 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3400edd8:	f012 ff0e 	bl	34021bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3400eddc:	f010 fb48 	bl	3401f470 <main>

3400ede0 <LoopForever>:

LoopForever:
  b LoopForever
3400ede0:	e7fe      	b.n	3400ede0 <LoopForever>
3400ede2:	0000      	.short	0x0000
  ldr   r0, =_sstack
3400ede4:	3417f000 	.word	0x3417f000
  ldr   r0, =_estack
3400ede8:	34180000 	.word	0x34180000
  ldr r0, =_sdata
3400edec:	340cc5a0 	.word	0x340cc5a0
  ldr r1, =_edata
3400edf0:	340d0a94 	.word	0x340d0a94
  ldr r2, =_sidata
3400edf4:	340cc5a0 	.word	0x340cc5a0
  ldr r2, =_sbss
3400edf8:	340d0a98 	.word	0x340d0a98
  ldr r4, =_ebss
3400edfc:	340e5f1c 	.word	0x340e5f1c

3400ee00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3400ee00:	e7fe      	b.n	3400ee00 <ADC1_2_IRQHandler>
	...

3400ee04 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
3400ee04:	4b44      	ldr	r3, [pc, #272]	@ (3400ef18 <SystemInit+0x114>)
3400ee06:	4a45      	ldr	r2, [pc, #276]	@ (3400ef1c <SystemInit+0x118>)
{
3400ee08:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400ee0a:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
3400ee0c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
3400ee0e:	2502      	movs	r5, #2
  SAU->RNR = 0;
3400ee10:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400ee12:	4943      	ldr	r1, [pc, #268]	@ (3400ef20 <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
3400ee14:	4e43      	ldr	r6, [pc, #268]	@ (3400ef24 <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3400ee16:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400ee1a:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3400ee1e:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
3400ee22:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
3400ee26:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
3400ee2a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400ee2e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
3400ee32:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
3400ee36:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400ee3a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
3400ee3e:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
3400ee42:	2503      	movs	r5, #3
  SAU->RBAR = 0;
3400ee44:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400ee48:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
3400ee4c:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
3400ee50:	2504      	movs	r5, #4
  SAU->RBAR = 0;
3400ee52:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400ee56:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
3400ee5a:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
3400ee5e:	2505      	movs	r5, #5
  SAU->RBAR = 0;
3400ee60:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400ee64:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
3400ee68:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
3400ee6c:	2506      	movs	r5, #6
  SAU->RBAR = 0;
3400ee6e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400ee72:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
3400ee76:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
3400ee7a:	2507      	movs	r5, #7
  SAU->RBAR = 0;
3400ee7c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400ee80:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
3400ee84:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
3400ee88:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400ee8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
3400ee90:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
3400ee94:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
3400ee98:	689a      	ldr	r2, [r3, #8]
3400ee9a:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
3400ee9c:	4a22      	ldr	r2, [pc, #136]	@ (3400ef28 <SystemInit+0x124>)
3400ee9e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
3400eea0:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
3400eea4:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
3400eea6:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
3400eea8:	f045 0510 	orr.w	r5, r5, #16
3400eeac:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
3400eeae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
3400eeb0:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
3400eeb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
3400eeb8:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
3400eebc:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
3400eec0:	f042 0210 	orr.w	r2, r2, #16
3400eec4:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
3400eec8:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
3400eecc:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
3400eed0:	f022 0210 	bic.w	r2, r2, #16
3400eed4:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
3400eed8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
3400eedc:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
3400eee0:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3400eee4:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
3400eee6:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
3400eeea:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
3400eeee:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3400eef2:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3400eef6:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
3400eef8:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3400eefc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3400ef00:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
3400ef04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3400ef08:	4a08      	ldr	r2, [pc, #32]	@ (3400ef2c <SystemInit+0x128>)
3400ef0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
3400ef0e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3400ef12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
3400ef16:	bd70      	pop	{r4, r5, r6, pc}
3400ef18:	e000ed00 	.word	0xe000ed00
3400ef1c:	34000400 	.word	0x34000400
3400ef20:	56028000 	.word	0x56028000
3400ef24:	56008000 	.word	0x56008000
3400ef28:	56024800 	.word	0x56024800
3400ef2c:	e002ed00 	.word	0xe002ed00

3400ef30 <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400ef30:	4b6e      	ldr	r3, [pc, #440]	@ (3400f0ec <SystemCoreClockUpdate+0x1bc>)
{
3400ef32:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400ef34:	6a1a      	ldr	r2, [r3, #32]
3400ef36:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
3400ef3a:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
3400ef3e:	f000 80b8 	beq.w	3400f0b2 <SystemCoreClockUpdate+0x182>
3400ef42:	d806      	bhi.n	3400ef52 <SystemCoreClockUpdate+0x22>
3400ef44:	b962      	cbnz	r2, 3400ef60 <SystemCoreClockUpdate+0x30>
  {
  case 0:  /* HSI used as system clock source (default after reset) */
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3400ef46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400ef48:	4b69      	ldr	r3, [pc, #420]	@ (3400f0f0 <SystemCoreClockUpdate+0x1c0>)
3400ef4a:	f3c2 12c1 	ubfx	r2, r2, #7, #2
3400ef4e:	40d3      	lsrs	r3, r2
    break;
3400ef50:	e003      	b.n	3400ef5a <SystemCoreClockUpdate+0x2a>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400ef52:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
3400ef56:	d00b      	beq.n	3400ef70 <SystemCoreClockUpdate+0x40>
  uint32_t sysclk = 0;
3400ef58:	2300      	movs	r3, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
3400ef5a:	4a66      	ldr	r2, [pc, #408]	@ (3400f0f4 <SystemCoreClockUpdate+0x1c4>)
3400ef5c:	6013      	str	r3, [r2, #0]
}
3400ef5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400ef60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
3400ef62:	4a65      	ldr	r2, [pc, #404]	@ (3400f0f8 <SystemCoreClockUpdate+0x1c8>)
3400ef64:	f413 7f00 	tst.w	r3, #512	@ 0x200
3400ef68:	4b64      	ldr	r3, [pc, #400]	@ (3400f0fc <SystemCoreClockUpdate+0x1cc>)
3400ef6a:	bf08      	it	eq
3400ef6c:	4613      	moveq	r3, r2
3400ef6e:	e7f4      	b.n	3400ef5a <SystemCoreClockUpdate+0x2a>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
3400ef70:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
3400ef74:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
3400ef78:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
3400ef7c:	d02a      	beq.n	3400efd4 <SystemCoreClockUpdate+0xa4>
3400ef7e:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
3400ef82:	d036      	beq.n	3400eff2 <SystemCoreClockUpdate+0xc2>
3400ef84:	2a00      	cmp	r2, #0
3400ef86:	d143      	bne.n	3400f010 <SystemCoreClockUpdate+0xe0>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
3400ef88:	f8d3 7080 	ldr.w	r7, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
3400ef8c:	013d      	lsls	r5, r7, #4
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
3400ef8e:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400ef92:	f100 8096 	bmi.w	3400f0c2 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400ef96:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
3400ef9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3400ef9e:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400efa2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400efa6:	460e      	mov	r6, r1
    switch (pllsource)
3400efa8:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
3400efac:	f3c2 65c2 	ubfx	r5, r2, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
3400efb0:	f3c7 5105 	ubfx	r1, r7, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
3400efb4:	f3c2 6202 	ubfx	r2, r2, #24, #3
    switch (pllsource)
3400efb8:	d04f      	beq.n	3400f05a <SystemCoreClockUpdate+0x12a>
3400efba:	d87c      	bhi.n	3400f0b6 <SystemCoreClockUpdate+0x186>
3400efbc:	2e00      	cmp	r6, #0
3400efbe:	d03c      	beq.n	3400f03a <SystemCoreClockUpdate+0x10a>
3400efc0:	2600      	movs	r6, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400efc2:	4b4a      	ldr	r3, [pc, #296]	@ (3400f0ec <SystemCoreClockUpdate+0x1bc>)
        sysclk = MSI_VALUE;
3400efc4:	4f4c      	ldr	r7, [pc, #304]	@ (3400f0f8 <SystemCoreClockUpdate+0x1c8>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400efc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        sysclk = MSI_VALUE;
3400efc8:	f413 7f00 	tst.w	r3, #512	@ 0x200
3400efcc:	4b4b      	ldr	r3, [pc, #300]	@ (3400f0fc <SystemCoreClockUpdate+0x1cc>)
3400efce:	bf08      	it	eq
3400efd0:	463b      	moveq	r3, r7
3400efd2:	e038      	b.n	3400f046 <SystemCoreClockUpdate+0x116>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
3400efd4:	f8d3 7090 	ldr.w	r7, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
3400efd8:	013c      	lsls	r4, r7, #4
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
3400efda:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400efde:	d470      	bmi.n	3400f0c2 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
3400efe0:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
3400efe4:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
3400efe8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
3400efec:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
3400eff0:	e7d9      	b.n	3400efa6 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
3400eff2:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
3400eff6:	0138      	lsls	r0, r7, #4
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
3400eff8:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400effc:	d461      	bmi.n	3400f0c2 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
3400effe:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
3400f002:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
3400f006:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
3400f00a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
3400f00e:	e7ca      	b.n	3400efa6 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
3400f010:	f8d3 70b0 	ldr.w	r7, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
3400f014:	013a      	lsls	r2, r7, #4
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400f016:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400f01a:	d452      	bmi.n	3400f0c2 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
3400f01c:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
3400f020:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
3400f024:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
3400f028:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
3400f02c:	e7bb      	b.n	3400efa6 <SystemCoreClockUpdate+0x76>
    switch (pllsource)
3400f02e:	460a      	mov	r2, r1
3400f030:	460d      	mov	r5, r1
3400f032:	4608      	mov	r0, r1
3400f034:	460c      	mov	r4, r1
3400f036:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3400f03a:	4b2c      	ldr	r3, [pc, #176]	@ (3400f0ec <SystemCoreClockUpdate+0x1bc>)
3400f03c:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
3400f03e:	4b2c      	ldr	r3, [pc, #176]	@ (3400f0f0 <SystemCoreClockUpdate+0x1c0>)
3400f040:	f3c7 17c1 	ubfx	r7, r7, #7, #2
3400f044:	40fb      	lsrs	r3, r7
    if (pllbypass == 0U)
3400f046:	b14e      	cbz	r6, 3400f05c <SystemCoreClockUpdate+0x12c>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
3400f048:	4a28      	ldr	r2, [pc, #160]	@ (3400f0ec <SystemCoreClockUpdate+0x1bc>)
3400f04a:	f8d2 20c4 	ldr.w	r2, [r2, #196]	@ 0xc4
3400f04e:	f3c2 4207 	ubfx	r2, r2, #16, #8
3400f052:	3201      	adds	r2, #1
    sysclk = sysclk / ic_divider;
3400f054:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
3400f058:	e77f      	b.n	3400ef5a <SystemCoreClockUpdate+0x2a>
      sysclk = HSE_VALUE;
3400f05a:	4b29      	ldr	r3, [pc, #164]	@ (3400f100 <SystemCoreClockUpdate+0x1d0>)
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
3400f05c:	ee07 0a10 	vmov	s14, r0
3400f060:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
3400f064:	ee07 4a10 	vmov	s14, r4
3400f068:	ee07 3a90 	vmov	s15, r3
3400f06c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 3400f104 <SystemCoreClockUpdate+0x1d4>
3400f070:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
3400f074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400f078:	eea6 7a26 	vfma.f32	s14, s12, s13
3400f07c:	ee67 7a87 	vmul.f32	s15, s15, s14
3400f080:	ee07 1a10 	vmov	s14, r1
3400f084:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
3400f088:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
3400f08c:	ee07 5a90 	vmov	s15, r5
3400f090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3400f094:	ee07 2a90 	vmov	s15, r2
3400f098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400f09c:	ee27 7a27 	vmul.f32	s14, s14, s15
3400f0a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
3400f0a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3400f0a8:	ee17 3a90 	vmov	r3, s15
3400f0ac:	e7cc      	b.n	3400f048 <SystemCoreClockUpdate+0x118>
      sysclk = HSE_VALUE;
3400f0ae:	4b14      	ldr	r3, [pc, #80]	@ (3400f100 <SystemCoreClockUpdate+0x1d0>)
3400f0b0:	e7ca      	b.n	3400f048 <SystemCoreClockUpdate+0x118>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400f0b2:	4b13      	ldr	r3, [pc, #76]	@ (3400f100 <SystemCoreClockUpdate+0x1d0>)
3400f0b4:	e751      	b.n	3400ef5a <SystemCoreClockUpdate+0x2a>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3400f0b6:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
3400f0ba:	4b13      	ldr	r3, [pc, #76]	@ (3400f108 <SystemCoreClockUpdate+0x1d8>)
3400f0bc:	bf18      	it	ne
3400f0be:	2300      	movne	r3, #0
3400f0c0:	e7cc      	b.n	3400f05c <SystemCoreClockUpdate+0x12c>
    switch (pllsource)
3400f0c2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3400f0c6:	d0f2      	beq.n	3400f0ae <SystemCoreClockUpdate+0x17e>
3400f0c8:	d809      	bhi.n	3400f0de <SystemCoreClockUpdate+0x1ae>
3400f0ca:	2900      	cmp	r1, #0
3400f0cc:	d0af      	beq.n	3400f02e <SystemCoreClockUpdate+0xfe>
3400f0ce:	2200      	movs	r2, #0
3400f0d0:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
3400f0d4:	4615      	mov	r5, r2
3400f0d6:	4610      	mov	r0, r2
3400f0d8:	4614      	mov	r4, r2
3400f0da:	4611      	mov	r1, r2
3400f0dc:	e771      	b.n	3400efc2 <SystemCoreClockUpdate+0x92>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3400f0de:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
3400f0e2:	4b09      	ldr	r3, [pc, #36]	@ (3400f108 <SystemCoreClockUpdate+0x1d8>)
3400f0e4:	bf18      	it	ne
3400f0e6:	2300      	movne	r3, #0
3400f0e8:	e7ae      	b.n	3400f048 <SystemCoreClockUpdate+0x118>
3400f0ea:	bf00      	nop
3400f0ec:	56028000 	.word	0x56028000
3400f0f0:	03d09000 	.word	0x03d09000
3400f0f4:	340d0670 	.word	0x340d0670
3400f0f8:	003d0900 	.word	0x003d0900
3400f0fc:	00f42400 	.word	0x00f42400
3400f100:	02dc6c00 	.word	0x02dc6c00
3400f104:	33800000 	.word	0x33800000
3400f108:	00bb8000 	.word	0x00bb8000

3400f10c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
3400f10c:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
3400f110:	b500      	push	{lr}
  SystemCoreClockUpdate();
3400f112:	f7ff ff0d 	bl	3400ef30 <SystemCoreClockUpdate>

  return SystemCoreClock;
}
3400f116:	4b05      	ldr	r3, [pc, #20]	@ (3400f12c <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
3400f118:	f85d eb04 	ldr.w	lr, [sp], #4
3400f11c:	6818      	ldr	r0, [r3, #0]
3400f11e:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
3400f122:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
3400f126:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
3400f12a:	4774      	bxns	lr
3400f12c:	340d0670 	.word	0x340d0670

3400f130 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
3400f130:	4770      	bx	lr

3400f132 <HAL_Init>:
{
3400f132:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
3400f134:	2003      	movs	r0, #3
3400f136:	f000 f995 	bl	3400f464 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
3400f13a:	f7ff fef9 	bl	3400ef30 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
3400f13e:	200f      	movs	r0, #15
3400f140:	f00f fee2 	bl	3401ef08 <HAL_InitTick>
3400f144:	4604      	mov	r4, r0
3400f146:	b918      	cbnz	r0, 3400f150 <HAL_Init+0x1e>
  HAL_MspInit();
3400f148:	f7ff fff2 	bl	3400f130 <HAL_MspInit>
}
3400f14c:	4620      	mov	r0, r4
3400f14e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3400f150:	2401      	movs	r4, #1
3400f152:	e7fb      	b.n	3400f14c <HAL_Init+0x1a>

3400f154 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
3400f154:	b570      	push	{r4, r5, r6, lr}
3400f156:	4604      	mov	r4, r0
3400f158:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
3400f15a:	f00f febf 	bl	3401eedc <HAL_GetTick>
3400f15e:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
3400f160:	b12c      	cbz	r4, 3400f16e <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
3400f162:	6822      	ldr	r2, [r4, #0]
3400f164:	4b1b      	ldr	r3, [pc, #108]	@ (3400f1d4 <HAL_BSEC_OTP_Reload+0x80>)
3400f166:	429a      	cmp	r2, r3
3400f168:	d003      	beq.n	3400f172 <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400f16a:	2301      	movs	r3, #1
3400f16c:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400f16e:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
3400f170:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
3400f172:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
3400f176:	d2f8      	bcs.n	3400f16a <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
3400f178:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400f17a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
3400f17e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400f182:	2301      	movs	r3, #1
3400f184:	f005 001f 	and.w	r0, r5, #31
3400f188:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400f18a:	420b      	tst	r3, r1
3400f18c:	d11f      	bne.n	3400f1ce <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
3400f18e:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
3400f192:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
3400f196:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3400f19a:	432b      	orrs	r3, r5
3400f19c:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
3400f1a0:	6823      	ldr	r3, [r4, #0]
3400f1a2:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400f1a6:	07d2      	lsls	r2, r2, #31
3400f1a8:	d409      	bmi.n	3400f1be <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
3400f1aa:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
3400f1ae:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
3400f1b2:	d0dd      	beq.n	3400f170 <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
3400f1b4:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400f1b8:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
3400f1bc:	e7d6      	b.n	3400f16c <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
3400f1be:	f00f fe8d 	bl	3401eedc <HAL_GetTick>
3400f1c2:	1b80      	subs	r0, r0, r6
3400f1c4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
3400f1c8:	d9ea      	bls.n	3400f1a0 <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
3400f1ca:	230a      	movs	r3, #10
3400f1cc:	e7ce      	b.n	3400f16c <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400f1ce:	2304      	movs	r3, #4
3400f1d0:	e7cc      	b.n	3400f16c <HAL_BSEC_OTP_Reload+0x18>
3400f1d2:	bf00      	nop
3400f1d4:	56009000 	.word	0x56009000

3400f1d8 <HAL_BSEC_OTP_Read>:
{
3400f1d8:	b570      	push	{r4, r5, r6, lr}
3400f1da:	460e      	mov	r6, r1
3400f1dc:	4615      	mov	r5, r2
  if (hbsec == NULL)
3400f1de:	4604      	mov	r4, r0
3400f1e0:	b130      	cbz	r0, 3400f1f0 <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
3400f1e2:	b11a      	cbz	r2, 3400f1ec <HAL_BSEC_OTP_Read+0x14>
3400f1e4:	6802      	ldr	r2, [r0, #0]
3400f1e6:	4b09      	ldr	r3, [pc, #36]	@ (3400f20c <HAL_BSEC_OTP_Read+0x34>)
3400f1e8:	429a      	cmp	r2, r3
3400f1ea:	d003      	beq.n	3400f1f4 <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400f1ec:	2301      	movs	r3, #1
3400f1ee:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400f1f0:	2001      	movs	r0, #1
}
3400f1f2:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
3400f1f4:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
3400f1f8:	d2f8      	bcs.n	3400f1ec <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
3400f1fa:	f7ff ffab 	bl	3400f154 <HAL_BSEC_OTP_Reload>
3400f1fe:	2800      	cmp	r0, #0
3400f200:	d1f6      	bne.n	3400f1f0 <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
3400f202:	6823      	ldr	r3, [r4, #0]
3400f204:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
3400f208:	602b      	str	r3, [r5, #0]
  return HAL_OK;
3400f20a:	e7f2      	b.n	3400f1f2 <HAL_BSEC_OTP_Read+0x1a>
3400f20c:	56009000 	.word	0x56009000

3400f210 <HAL_BSEC_OTP_Program>:
{
3400f210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400f214:	4604      	mov	r4, r0
3400f216:	460e      	mov	r6, r1
3400f218:	4617      	mov	r7, r2
3400f21a:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
3400f21c:	f00f fe5e 	bl	3401eedc <HAL_GetTick>
3400f220:	4680      	mov	r8, r0
  if (hbsec == NULL)
3400f222:	b12c      	cbz	r4, 3400f230 <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
3400f224:	6822      	ldr	r2, [r4, #0]
3400f226:	4b28      	ldr	r3, [pc, #160]	@ (3400f2c8 <HAL_BSEC_OTP_Program+0xb8>)
3400f228:	429a      	cmp	r2, r3
3400f22a:	d005      	beq.n	3400f238 <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400f22c:	2301      	movs	r3, #1
3400f22e:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400f230:	2001      	movs	r0, #1
}
3400f232:	b003      	add	sp, #12
3400f234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
3400f238:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
3400f23c:	d004      	beq.n	3400f248 <HAL_BSEC_OTP_Program+0x38>
3400f23e:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
3400f242:	4822      	ldr	r0, [pc, #136]	@ (3400f2cc <HAL_BSEC_OTP_Program+0xbc>)
3400f244:	f010 f9dc 	bl	3401f600 <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
3400f248:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
3400f24c:	d2ee      	bcs.n	3400f22c <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400f24e:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
3400f250:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400f252:	f503 7300 	add.w	r3, r3, #512	@ 0x200
3400f256:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400f25a:	2301      	movs	r3, #1
3400f25c:	f006 001f 	and.w	r0, r6, #31
3400f260:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400f262:	420b      	tst	r3, r1
3400f264:	d12e      	bne.n	3400f2c4 <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
3400f266:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
3400f26a:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
3400f26e:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
3400f272:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
3400f276:	4335      	orrs	r5, r6
3400f278:	ea45 0509 	orr.w	r5, r5, r9
3400f27c:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
3400f280:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
3400f284:	6823      	ldr	r3, [r4, #0]
3400f286:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400f28a:	07d2      	lsls	r2, r2, #31
3400f28c:	d406      	bmi.n	3400f29c <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
3400f28e:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400f292:	03db      	lsls	r3, r3, #15
3400f294:	d50b      	bpl.n	3400f2ae <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
3400f296:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3400f29a:	e7c8      	b.n	3400f22e <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
3400f29c:	f00f fe1e 	bl	3401eedc <HAL_GetTick>
3400f2a0:	eba0 0008 	sub.w	r0, r0, r8
3400f2a4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
3400f2a8:	d9ec      	bls.n	3400f284 <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
3400f2aa:	230a      	movs	r3, #10
3400f2ac:	e7bf      	b.n	3400f22e <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
3400f2ae:	4631      	mov	r1, r6
3400f2b0:	4620      	mov	r0, r4
3400f2b2:	aa01      	add	r2, sp, #4
3400f2b4:	f7ff ff90 	bl	3400f1d8 <HAL_BSEC_OTP_Read>
3400f2b8:	2800      	cmp	r0, #0
3400f2ba:	d1b9      	bne.n	3400f230 <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
3400f2bc:	9b01      	ldr	r3, [sp, #4]
3400f2be:	42bb      	cmp	r3, r7
3400f2c0:	d1e9      	bne.n	3400f296 <HAL_BSEC_OTP_Program+0x86>
3400f2c2:	e7b6      	b.n	3400f232 <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400f2c4:	2304      	movs	r3, #4
3400f2c6:	e7b2      	b.n	3400f22e <HAL_BSEC_OTP_Program+0x1e>
3400f2c8:	56009000 	.word	0x56009000
3400f2cc:	3402efd8 	.word	0x3402efd8

3400f2d0 <CACHEAXI_CommandByAddr>:
  *                       CACHEAXI_IT_MODE, CACHEAXI_POLLING_MODE.
  * @retval HAL status
  */
static HAL_StatusTypeDef CACHEAXI_CommandByAddr(CACHEAXI_HandleTypeDef *hcacheaxi, uint32_t Command,
                                                const uint32_t *pAddr, uint32_t dSize, uint32_t mode)
{
3400f2d0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t op_addr = (uint32_t)pAddr;
  uint32_t tickstart;

  /* Check no ongoing operation */
  if (READ_BIT(hcacheaxi->Instance->SR, (CACHEAXI_SR_BUSYF | CACHEAXI_SR_BUSYCMDF)) != 0U)
3400f2d2:	6804      	ldr	r4, [r0, #0]
{
3400f2d4:	4605      	mov	r5, r0
  if (READ_BIT(hcacheaxi->Instance->SR, (CACHEAXI_SR_BUSYF | CACHEAXI_SR_BUSYCMDF)) != 0U)
3400f2d6:	6860      	ldr	r0, [r4, #4]
3400f2d8:	f010 0009 	ands.w	r0, r0, #9
3400f2dc:	d13f      	bne.n	3400f35e <CACHEAXI_CommandByAddr+0x8e>
    status =  HAL_BUSY;
  }
  else
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400f2de:	60a8      	str	r0, [r5, #8]

    /* Update the CACHEAXI handle State */
    hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
3400f2e0:	2001      	movs	r0, #1
3400f2e2:	7128      	strb	r0, [r5, #4]

    /* Make sure flags are reset */
    WRITE_REG(hcacheaxi->Instance->FCR, (CACHEAXI_FCR_CBSYENDF | CACHEAXI_FCR_CCMDENDF));
3400f2e4:	2012      	movs	r0, #18

    /* Fill area start address */
    WRITE_REG(hcacheaxi->Instance->CMDRSADDRR, op_addr);

    /* Fill area end address */
    WRITE_REG(hcacheaxi->Instance->CMDREADDRR, (op_addr + dSize - 1U));
3400f2e6:	3b01      	subs	r3, #1
    WRITE_REG(hcacheaxi->Instance->FCR, (CACHEAXI_FCR_CBSYENDF | CACHEAXI_FCR_CCMDENDF));
3400f2e8:	60e0      	str	r0, [r4, #12]
    WRITE_REG(hcacheaxi->Instance->CMDRSADDRR, op_addr);
3400f2ea:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
    WRITE_REG(hcacheaxi->Instance->CMDREADDRR, (op_addr + dSize - 1U));
3400f2ee:	441a      	add	r2, r3
3400f2f0:	f8c4 2108 	str.w	r2, [r4, #264]	@ 0x108

    /* Set command */
    MODIFY_REG(hcacheaxi->Instance->CR2, CACHEAXI_CR2_CACHECMD, Command);
3400f2f4:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
3400f2f8:	f023 0306 	bic.w	r3, r3, #6
3400f2fc:	4319      	orrs	r1, r3

    /* Enable IT if required */
    if (mode == CACHEAXI_IT_MODE)
3400f2fe:	9b04      	ldr	r3, [sp, #16]
    MODIFY_REG(hcacheaxi->Instance->CR2, CACHEAXI_CR2_CACHECMD, Command);
3400f300:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
    if (mode == CACHEAXI_IT_MODE)
3400f304:	2b01      	cmp	r3, #1
    {
      /* Enable end of cache command interrupt */
      SET_BIT(hcacheaxi->Instance->IER, CACHEAXI_IER_CMDENDIE);
3400f306:	68a3      	ldr	r3, [r4, #8]
    if (mode == CACHEAXI_IT_MODE)
3400f308:	d10a      	bne.n	3400f320 <CACHEAXI_CommandByAddr+0x50>
      SET_BIT(hcacheaxi->Instance->IER, CACHEAXI_IER_CMDENDIE);
3400f30a:	f043 0310 	orr.w	r3, r3, #16
3400f30e:	60a3      	str	r3, [r4, #8]

      /* Launch cache command */
      SET_BIT(hcacheaxi->Instance->CR2, CACHEAXI_CR2_STARTCMD);
3400f310:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
3400f314:	f043 0301 	orr.w	r3, r3, #1
3400f318:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  HAL_StatusTypeDef status = HAL_OK;
3400f31c:	2000      	movs	r0, #0
3400f31e:	e01d      	b.n	3400f35c <CACHEAXI_CommandByAddr+0x8c>
    }
    else
    {
      /* Make sure that end of cache command interrupt is disabled */
      CLEAR_BIT(hcacheaxi->Instance->IER, CACHEAXI_IER_CMDENDIE);
3400f320:	f023 0310 	bic.w	r3, r3, #16
3400f324:	60a3      	str	r3, [r4, #8]

      /* Launch cache command */
      SET_BIT(hcacheaxi->Instance->CR2, CACHEAXI_CR2_STARTCMD);
3400f326:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
3400f32a:	f043 0301 	orr.w	r3, r3, #1
3400f32e:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100

      /* Get timeout */
      tickstart = HAL_GetTick();
3400f332:	f00f fdd3 	bl	3401eedc <HAL_GetTick>
3400f336:	4604      	mov	r4, r0

      /* Wait for end of cache command */
      while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_CMDENDF) == 0U)
3400f338:	682b      	ldr	r3, [r5, #0]
3400f33a:	685b      	ldr	r3, [r3, #4]
3400f33c:	06db      	lsls	r3, r3, #27
3400f33e:	d4ed      	bmi.n	3400f31c <CACHEAXI_CommandByAddr+0x4c>
      {
        if ((HAL_GetTick() - tickstart) > CACHEAXI_COMMAND_TIMEOUT_VALUE)
3400f340:	f00f fdcc 	bl	3401eedc <HAL_GetTick>
3400f344:	1b00      	subs	r0, r0, r4
3400f346:	28c8      	cmp	r0, #200	@ 0xc8
3400f348:	d9f6      	bls.n	3400f338 <CACHEAXI_CommandByAddr+0x68>
        {
          if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_CMDENDF) == 0U)
3400f34a:	682b      	ldr	r3, [r5, #0]
3400f34c:	685b      	ldr	r3, [r3, #4]
3400f34e:	06da      	lsls	r2, r3, #27
3400f350:	d4f2      	bmi.n	3400f338 <CACHEAXI_CommandByAddr+0x68>
          {
            /* Update error code */
            hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
3400f352:	2310      	movs	r3, #16
3400f354:	60ab      	str	r3, [r5, #8]

            /* Change the CACHEAXI state */
            hcacheaxi->State = HAL_CACHEAXI_STATE_ERROR;
3400f356:	2306      	movs	r3, #6

            /* Return error status */
            status =  HAL_ERROR;
3400f358:	2001      	movs	r0, #1
            hcacheaxi->State = HAL_CACHEAXI_STATE_ERROR;
3400f35a:	712b      	strb	r3, [r5, #4]
      }
    }
  }

  return status;
}
3400f35c:	bd38      	pop	{r3, r4, r5, pc}
    status =  HAL_BUSY;
3400f35e:	2002      	movs	r0, #2
3400f360:	e7fc      	b.n	3400f35c <CACHEAXI_CommandByAddr+0x8c>
	...

3400f364 <HAL_CACHEAXI_Enable>:
{
3400f364:	b538      	push	{r3, r4, r5, lr}
  if (hcacheaxi == NULL)
3400f366:	4604      	mov	r4, r0
3400f368:	b350      	cbz	r0, 3400f3c0 <HAL_CACHEAXI_Enable+0x5c>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400f36a:	6803      	ldr	r3, [r0, #0]
3400f36c:	4a15      	ldr	r2, [pc, #84]	@ (3400f3c4 <HAL_CACHEAXI_Enable+0x60>)
3400f36e:	4293      	cmp	r3, r2
3400f370:	d008      	beq.n	3400f384 <HAL_CACHEAXI_Enable+0x20>
3400f372:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400f376:	4293      	cmp	r3, r2
3400f378:	d004      	beq.n	3400f384 <HAL_CACHEAXI_Enable+0x20>
3400f37a:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400f37e:	4812      	ldr	r0, [pc, #72]	@ (3400f3c8 <HAL_CACHEAXI_Enable+0x64>)
3400f380:	f010 f93e 	bl	3401f600 <assert_failed>
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
3400f384:	6823      	ldr	r3, [r4, #0]
3400f386:	685b      	ldr	r3, [r3, #4]
3400f388:	07d9      	lsls	r1, r3, #31
3400f38a:	d407      	bmi.n	3400f39c <HAL_CACHEAXI_Enable+0x38>
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400f38c:	2000      	movs	r0, #0
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
3400f38e:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400f390:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
3400f392:	6813      	ldr	r3, [r2, #0]
3400f394:	f043 0301 	orr.w	r3, r3, #1
3400f398:	6013      	str	r3, [r2, #0]
}
3400f39a:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
3400f39c:	f00f fd9e 	bl	3401eedc <HAL_GetTick>
3400f3a0:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
3400f3a2:	6823      	ldr	r3, [r4, #0]
3400f3a4:	685b      	ldr	r3, [r3, #4]
3400f3a6:	07db      	lsls	r3, r3, #31
3400f3a8:	d5f0      	bpl.n	3400f38c <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
3400f3aa:	f00f fd97 	bl	3401eedc <HAL_GetTick>
3400f3ae:	1b40      	subs	r0, r0, r5
3400f3b0:	2801      	cmp	r0, #1
3400f3b2:	d9f6      	bls.n	3400f3a2 <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
3400f3b4:	6823      	ldr	r3, [r4, #0]
3400f3b6:	685b      	ldr	r3, [r3, #4]
3400f3b8:	07da      	lsls	r2, r3, #31
3400f3ba:	d4f2      	bmi.n	3400f3a2 <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
3400f3bc:	2310      	movs	r3, #16
3400f3be:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
3400f3c0:	2001      	movs	r0, #1
3400f3c2:	e7ea      	b.n	3400f39a <HAL_CACHEAXI_Enable+0x36>
3400f3c4:	580dfc00 	.word	0x580dfc00
3400f3c8:	3402f04d 	.word	0x3402f04d

3400f3cc <HAL_CACHEAXI_Init>:
{
3400f3cc:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
3400f3ce:	4604      	mov	r4, r0
3400f3d0:	b1c8      	cbz	r0, 3400f406 <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400f3d2:	6803      	ldr	r3, [r0, #0]
3400f3d4:	4a0d      	ldr	r2, [pc, #52]	@ (3400f40c <HAL_CACHEAXI_Init+0x40>)
3400f3d6:	4293      	cmp	r3, r2
3400f3d8:	d007      	beq.n	3400f3ea <HAL_CACHEAXI_Init+0x1e>
3400f3da:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400f3de:	4293      	cmp	r3, r2
3400f3e0:	d003      	beq.n	3400f3ea <HAL_CACHEAXI_Init+0x1e>
3400f3e2:	21bc      	movs	r1, #188	@ 0xbc
3400f3e4:	480a      	ldr	r0, [pc, #40]	@ (3400f410 <HAL_CACHEAXI_Init+0x44>)
3400f3e6:	f010 f90b 	bl	3401f600 <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
3400f3ea:	7923      	ldrb	r3, [r4, #4]
3400f3ec:	b913      	cbnz	r3, 3400f3f4 <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
3400f3ee:	4620      	mov	r0, r4
3400f3f0:	f010 f8f2 	bl	3401f5d8 <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400f3f4:	2300      	movs	r3, #0
3400f3f6:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
3400f3f8:	2301      	movs	r3, #1
3400f3fa:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400f3fc:	4620      	mov	r0, r4
}
3400f3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400f402:	f7ff bfaf 	b.w	3400f364 <HAL_CACHEAXI_Enable>
}
3400f406:	2001      	movs	r0, #1
3400f408:	bd10      	pop	{r4, pc}
3400f40a:	bf00      	nop
3400f40c:	580dfc00 	.word	0x580dfc00
3400f410:	3402f04d 	.word	0x3402f04d

3400f414 <HAL_CACHEAXI_CleanInvalidByAddr>:
{
3400f414:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400f416:	460e      	mov	r6, r1
3400f418:	4615      	mov	r5, r2
  if (hcacheaxi == NULL)
3400f41a:	4604      	mov	r4, r0
3400f41c:	b1e0      	cbz	r0, 3400f458 <HAL_CACHEAXI_CleanInvalidByAddr+0x44>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400f41e:	6803      	ldr	r3, [r0, #0]
3400f420:	4a0e      	ldr	r2, [pc, #56]	@ (3400f45c <HAL_CACHEAXI_CleanInvalidByAddr+0x48>)
3400f422:	4293      	cmp	r3, r2
3400f424:	d008      	beq.n	3400f438 <HAL_CACHEAXI_CleanInvalidByAddr+0x24>
3400f426:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400f42a:	4293      	cmp	r3, r2
3400f42c:	d004      	beq.n	3400f438 <HAL_CACHEAXI_CleanInvalidByAddr+0x24>
3400f42e:	f240 214d 	movw	r1, #589	@ 0x24d
3400f432:	480b      	ldr	r0, [pc, #44]	@ (3400f460 <HAL_CACHEAXI_CleanInvalidByAddr+0x4c>)
3400f434:	f010 f8e4 	bl	3401f600 <assert_failed>
  assert_param(IS_CACHEAXI_REGION_SIZE(dSize));
3400f438:	b925      	cbnz	r5, 3400f444 <HAL_CACHEAXI_CleanInvalidByAddr+0x30>
3400f43a:	f240 214e 	movw	r1, #590	@ 0x24e
3400f43e:	4808      	ldr	r0, [pc, #32]	@ (3400f460 <HAL_CACHEAXI_CleanInvalidByAddr+0x4c>)
3400f440:	f010 f8de 	bl	3401f600 <assert_failed>
  status = CACHEAXI_CommandByAddr(hcacheaxi, CACHEAXI_COMMAND_CLEAN_INVALIDATE, pAddr, dSize, CACHEAXI_POLLING_MODE);
3400f444:	2300      	movs	r3, #0
3400f446:	4632      	mov	r2, r6
3400f448:	9300      	str	r3, [sp, #0]
3400f44a:	2106      	movs	r1, #6
3400f44c:	462b      	mov	r3, r5
3400f44e:	4620      	mov	r0, r4
3400f450:	f7ff ff3e 	bl	3400f2d0 <CACHEAXI_CommandByAddr>
}
3400f454:	b002      	add	sp, #8
3400f456:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
3400f458:	2001      	movs	r0, #1
3400f45a:	e7fb      	b.n	3400f454 <HAL_CACHEAXI_CleanInvalidByAddr+0x40>
3400f45c:	580dfc00 	.word	0x580dfc00
3400f460:	3402f04d 	.word	0x3402f04d

3400f464 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
3400f464:	1ec3      	subs	r3, r0, #3
3400f466:	2b04      	cmp	r3, #4
{
3400f468:	b510      	push	{r4, lr}
3400f46a:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
3400f46c:	d903      	bls.n	3400f476 <HAL_NVIC_SetPriorityGrouping+0x12>
3400f46e:	21e6      	movs	r1, #230	@ 0xe6
3400f470:	4809      	ldr	r0, [pc, #36]	@ (3400f498 <HAL_NVIC_SetPriorityGrouping+0x34>)
3400f472:	f010 f8c5 	bl	3401f600 <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400f476:	4909      	ldr	r1, [pc, #36]	@ (3400f49c <HAL_NVIC_SetPriorityGrouping+0x38>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3400f478:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400f47a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3400f47c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
3400f480:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
3400f484:	0412      	lsls	r2, r2, #16
3400f486:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
3400f488:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
3400f48a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
3400f48e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
3400f492:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
3400f494:	bd10      	pop	{r4, pc}
3400f496:	bf00      	nop
3400f498:	3402f0c6 	.word	0x3402f0c6
3400f49c:	e000ed00 	.word	0xe000ed00

3400f4a0 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400f4a0:	f110 0f0c 	cmn.w	r0, #12
{
3400f4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400f4a8:	4605      	mov	r5, r0
3400f4aa:	460c      	mov	r4, r1
3400f4ac:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400f4ae:	db01      	blt.n	3400f4b4 <HAL_NVIC_SetPriority+0x14>
3400f4b0:	1d03      	adds	r3, r0, #4
3400f4b2:	d103      	bne.n	3400f4bc <HAL_NVIC_SetPriority+0x1c>
3400f4b4:	21ff      	movs	r1, #255	@ 0xff
3400f4b6:	4826      	ldr	r0, [pc, #152]	@ (3400f550 <HAL_NVIC_SetPriority+0xb0>)
3400f4b8:	f010 f8a2 	bl	3401f600 <assert_failed>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
3400f4bc:	4b25      	ldr	r3, [pc, #148]	@ (3400f554 <HAL_NVIC_SetPriority+0xb4>)
3400f4be:	68de      	ldr	r6, [r3, #12]
3400f4c0:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
3400f4c4:	2e02      	cmp	r6, #2
3400f4c6:	d806      	bhi.n	3400f4d6 <HAL_NVIC_SetPriority+0x36>
3400f4c8:	b157      	cbz	r7, 3400f4e0 <HAL_NVIC_SetPriority+0x40>
3400f4ca:	f44f 7181 	mov.w	r1, #258	@ 0x102
3400f4ce:	4820      	ldr	r0, [pc, #128]	@ (3400f550 <HAL_NVIC_SetPriority+0xb0>)
3400f4d0:	f010 f896 	bl	3401f600 <assert_failed>
3400f4d4:	e004      	b.n	3400f4e0 <HAL_NVIC_SetPriority+0x40>
3400f4d6:	2301      	movs	r3, #1
3400f4d8:	1ef2      	subs	r2, r6, #3
3400f4da:	4093      	lsls	r3, r2
3400f4dc:	42bb      	cmp	r3, r7
3400f4de:	d9f4      	bls.n	3400f4ca <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
3400f4e0:	2c0f      	cmp	r4, #15
3400f4e2:	f1c6 0807 	rsb	r8, r6, #7
3400f4e6:	d804      	bhi.n	3400f4f2 <HAL_NVIC_SetPriority+0x52>
3400f4e8:	2301      	movs	r3, #1
3400f4ea:	fa03 f308 	lsl.w	r3, r3, r8
3400f4ee:	42a3      	cmp	r3, r4
3400f4f0:	d804      	bhi.n	3400f4fc <HAL_NVIC_SetPriority+0x5c>
3400f4f2:	f240 1103 	movw	r1, #259	@ 0x103
3400f4f6:	4816      	ldr	r0, [pc, #88]	@ (3400f550 <HAL_NVIC_SetPriority+0xb0>)
3400f4f8:	f010 f882 	bl	3401f600 <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3400f4fc:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f500:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3400f504:	bf28      	it	cs
3400f506:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400f50a:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f50e:	2b06      	cmp	r3, #6
3400f510:	f1a6 0603 	sub.w	r6, r6, #3
3400f514:	bf98      	it	ls
3400f516:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400f518:	fa02 f808 	lsl.w	r8, r2, r8
3400f51c:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
3400f520:	40b2      	lsls	r2, r6
3400f522:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400f526:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
3400f528:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400f52a:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f52e:	bfac      	ite	ge
3400f530:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f534:	4a08      	ldrlt	r2, [pc, #32]	@ (3400f558 <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f536:	ea4f 1303 	mov.w	r3, r3, lsl #4
3400f53a:	b2db      	uxtb	r3, r3
3400f53c:	bfab      	itete	ge
3400f53e:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f542:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f546:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f54a:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
3400f54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400f550:	3402f0c6 	.word	0x3402f0c6
3400f554:	e000ed00 	.word	0xe000ed00
3400f558:	e000ed14 	.word	0xe000ed14

3400f55c <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
3400f55c:	2800      	cmp	r0, #0
3400f55e:	db08      	blt.n	3400f572 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400f560:	2301      	movs	r3, #1
3400f562:	0941      	lsrs	r1, r0, #5
3400f564:	4a05      	ldr	r2, [pc, #20]	@ (3400f57c <HAL_NVIC_EnableIRQ+0x20>)
3400f566:	f000 001f 	and.w	r0, r0, #31
3400f56a:	4083      	lsls	r3, r0
3400f56c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
3400f570:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
3400f572:	f240 1115 	movw	r1, #277	@ 0x115
3400f576:	4802      	ldr	r0, [pc, #8]	@ (3400f580 <HAL_NVIC_EnableIRQ+0x24>)
3400f578:	f010 b842 	b.w	3401f600 <assert_failed>
3400f57c:	e000e100 	.word	0xe000e100
3400f580:	3402f0c6 	.word	0x3402f0c6

3400f584 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
3400f584:	4b02      	ldr	r3, [pc, #8]	@ (3400f590 <HAL_NVIC_GetPriorityGrouping+0xc>)
3400f586:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
3400f588:	f3c0 2002 	ubfx	r0, r0, #8, #3
3400f58c:	4770      	bx	lr
3400f58e:	bf00      	nop
3400f590:	e000ed00 	.word	0xe000ed00

3400f594 <HAL_NVIC_GetPriority>:
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400f594:	f110 0f0c 	cmn.w	r0, #12
{
3400f598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400f59a:	4604      	mov	r4, r0
3400f59c:	460d      	mov	r5, r1
3400f59e:	4617      	mov	r7, r2
3400f5a0:	461e      	mov	r6, r3
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400f5a2:	db01      	blt.n	3400f5a8 <HAL_NVIC_GetPriority+0x14>
3400f5a4:	1d03      	adds	r3, r0, #4
3400f5a6:	d104      	bne.n	3400f5b2 <HAL_NVIC_GetPriority+0x1e>
3400f5a8:	f44f 71bc 	mov.w	r1, #376	@ 0x178
3400f5ac:	4819      	ldr	r0, [pc, #100]	@ (3400f614 <HAL_NVIC_GetPriority+0x80>)
3400f5ae:	f010 f827 	bl	3401f600 <assert_failed>
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
3400f5b2:	1eeb      	subs	r3, r5, #3
3400f5b4:	2b04      	cmp	r3, #4
3400f5b6:	d904      	bls.n	3400f5c2 <HAL_NVIC_GetPriority+0x2e>
3400f5b8:	f240 1179 	movw	r1, #377	@ 0x179
3400f5bc:	4815      	ldr	r0, [pc, #84]	@ (3400f614 <HAL_NVIC_GetPriority+0x80>)
3400f5be:	f010 f81f 	bl	3401f600 <assert_failed>
  if ((int32_t)(IRQn) >= 0)
3400f5c2:	2c00      	cmp	r4, #0
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
3400f5c4:	bfac      	ite	ge
3400f5c6:	f104 4460 	addge.w	r4, r4, #3758096384	@ 0xe0000000
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
3400f5ca:	4b13      	ldrlt	r3, [pc, #76]	@ (3400f618 <HAL_NVIC_GetPriority+0x84>)
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
3400f5cc:	f005 0107 	and.w	r1, r5, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3400f5d0:	f1c1 0207 	rsb	r2, r1, #7
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
3400f5d4:	bfab      	itete	ge
3400f5d6:	f504 4461 	addge.w	r4, r4, #57600	@ 0xe100
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
3400f5da:	f004 040f 	andlt.w	r4, r4, #15
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
3400f5de:	f894 3300 	ldrbge.w	r3, [r4, #768]	@ 0x300
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
3400f5e2:	5d1b      	ldrblt	r3, [r3, r4]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f5e4:	1d08      	adds	r0, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3400f5e6:	2a04      	cmp	r2, #4
3400f5e8:	bf28      	it	cs
3400f5ea:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f5ec:	2806      	cmp	r0, #6
3400f5ee:	f1a1 0103 	sub.w	r1, r1, #3

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
3400f5f2:	f04f 30ff 	mov.w	r0, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f5f6:	bf98      	it	ls
3400f5f8:	2100      	movls	r1, #0
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
3400f5fa:	091b      	lsrs	r3, r3, #4
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
3400f5fc:	fa00 f202 	lsl.w	r2, r0, r2
3400f600:	fa23 f401 	lsr.w	r4, r3, r1
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
3400f604:	4088      	lsls	r0, r1
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
3400f606:	ea24 0202 	bic.w	r2, r4, r2
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
3400f60a:	ea23 0300 	bic.w	r3, r3, r0
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
3400f60e:	603a      	str	r2, [r7, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
3400f610:	6033      	str	r3, [r6, #0]

  /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
3400f612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400f614:	3402f0c6 	.word	0x3402f0c6
3400f618:	e000ed14 	.word	0xe000ed14

3400f61c <DCMIPP_CSI_SetVCConfig>:
  * @param  hdcmipp         Pointer to DCMIPP handle
  * @param  Pipe            Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @param  VirtualChannel  Specifies the virtual channel, can be a value from @ref DCMIPP_Virtual_Channel
  */
static HAL_StatusTypeDef DCMIPP_CSI_SetVCConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel)
{
3400f61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400f61e:	4614      	mov	r4, r2
  uint32_t tickstart;

  /* Set Virtual Channel ID for the selected Pipe */
  if (Pipe == DCMIPP_PIPE0)
  {
    MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_VC, VirtualChannel << DCMIPP_P0FSCR_VC_Pos);
3400f620:	6803      	ldr	r3, [r0, #0]
  if (Pipe == DCMIPP_PIPE0)
3400f622:	bb71      	cbnz	r1, 3400f682 <DCMIPP_CSI_SetVCConfig+0x66>
    MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_VC, VirtualChannel << DCMIPP_P0FSCR_VC_Pos);
3400f624:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
3400f628:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
3400f62c:	ea42 42c4 	orr.w	r2, r2, r4, lsl #19
3400f630:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_VC, VirtualChannel << DCMIPP_P2FSCR_VC_Pos);
    }
  }

  /* Enable the selected virtual channel */
  switch (VirtualChannel)
3400f634:	4b23      	ldr	r3, [pc, #140]	@ (3400f6c4 <DCMIPP_CSI_SetVCConfig+0xa8>)
3400f636:	2c02      	cmp	r4, #2
    case DCMIPP_VIRTUAL_CHANNEL3:
      SET_BIT(csi_instance->CR, CSI_CR_VC3START);
      break;
    default:
      /* DCMIPP_VIRTUAL_CHANNEL0: */
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
3400f638:	681a      	ldr	r2, [r3, #0]
  switch (VirtualChannel)
3400f63a:	d038      	beq.n	3400f6ae <DCMIPP_CSI_SetVCConfig+0x92>
3400f63c:	2c03      	cmp	r4, #3
3400f63e:	d039      	beq.n	3400f6b4 <DCMIPP_CSI_SetVCConfig+0x98>
3400f640:	2c01      	cmp	r4, #1
3400f642:	d13a      	bne.n	3400f6ba <DCMIPP_CSI_SetVCConfig+0x9e>
      SET_BIT(csi_instance->CR, CSI_CR_VC1START);
3400f644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
3400f648:	601a      	str	r2, [r3, #0]
      break;
  }

  /* wait for the selected virtual channel active state */
  tickstart = HAL_GetTick();
3400f64a:	f00f fc47 	bl	3401eedc <HAL_GetTick>
  {
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
    {
      return HAL_ERROR;
    }
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
3400f64e:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  tickstart = HAL_GetTick();
3400f652:	4607      	mov	r7, r0
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
3400f654:	4d1b      	ldr	r5, [pc, #108]	@ (3400f6c4 <DCMIPP_CSI_SetVCConfig+0xa8>)
3400f656:	40a6      	lsls	r6, r4
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
3400f658:	f00f fc40 	bl	3401eedc <HAL_GetTick>
3400f65c:	1bc0      	subs	r0, r0, r7
3400f65e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
3400f662:	d82d      	bhi.n	3400f6c0 <DCMIPP_CSI_SetVCConfig+0xa4>
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
3400f664:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
3400f668:	ea36 0303 	bics.w	r3, r6, r3
3400f66c:	d1f4      	bne.n	3400f658 <DCMIPP_CSI_SetVCConfig+0x3c>

  /* Enable the SOF and EOF interrupts for the selected virtual channel */
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
3400f66e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
                             (DCMIPP_CSI_IT_SOF0 << VirtualChannel));
  return HAL_OK;
3400f672:	2000      	movs	r0, #0
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
3400f674:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
3400f678:	40a3      	lsls	r3, r4
3400f67a:	4313      	orrs	r3, r2
3400f67c:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
3400f680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Pipe == DCMIPP_PIPE1)
3400f682:	2901      	cmp	r1, #1
    MODIFY_REG(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_VC, VirtualChannel << DCMIPP_P1FSCR_VC_Pos);
3400f684:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
  else if (Pipe == DCMIPP_PIPE1)
3400f688:	d106      	bne.n	3400f698 <DCMIPP_CSI_SetVCConfig+0x7c>
    MODIFY_REG(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_VC, VirtualChannel << DCMIPP_P1FSCR_VC_Pos);
3400f68a:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
3400f68e:	ea42 42c4 	orr.w	r2, r2, r4, lsl #19
3400f692:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
3400f696:	e7cd      	b.n	3400f634 <DCMIPP_CSI_SetVCConfig+0x18>
    if ((hdcmipp->Instance->P1FSCR & DCMIPP_P1FSCR_PIPEDIFF) == DCMIPP_P1FSCR_PIPEDIFF)
3400f698:	0352      	lsls	r2, r2, #13
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_VC, VirtualChannel << DCMIPP_P2FSCR_VC_Pos);
3400f69a:	bf41      	itttt	mi
3400f69c:	f8d3 2c04 	ldrmi.w	r2, [r3, #3076]	@ 0xc04
3400f6a0:	f422 12c0 	bicmi.w	r2, r2, #1572864	@ 0x180000
3400f6a4:	ea42 42c4 	orrmi.w	r2, r2, r4, lsl #19
3400f6a8:	f8c3 2c04 	strmi.w	r2, [r3, #3076]	@ 0xc04
3400f6ac:	e7c2      	b.n	3400f634 <DCMIPP_CSI_SetVCConfig+0x18>
      SET_BIT(csi_instance->CR, CSI_CR_VC2START);
3400f6ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3400f6b2:	e7c9      	b.n	3400f648 <DCMIPP_CSI_SetVCConfig+0x2c>
      SET_BIT(csi_instance->CR, CSI_CR_VC3START);
3400f6b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
3400f6b8:	e7c6      	b.n	3400f648 <DCMIPP_CSI_SetVCConfig+0x2c>
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
3400f6ba:	f042 0204 	orr.w	r2, r2, #4
3400f6be:	e7c3      	b.n	3400f648 <DCMIPP_CSI_SetVCConfig+0x2c>
      return HAL_ERROR;
3400f6c0:	2001      	movs	r0, #1
3400f6c2:	e7dd      	b.n	3400f680 <DCMIPP_CSI_SetVCConfig+0x64>
3400f6c4:	58006000 	.word	0x58006000

3400f6c8 <DCMIPP_SetConfig.part.0>:
  else if (Pipe == DCMIPP_PIPE1)
3400f6c8:	2901      	cmp	r1, #1
static void DCMIPP_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t DstAddress, uint32_t CaptureMode)
3400f6ca:	b530      	push	{r4, r5, lr}
3400f6cc:	f04f 0502 	mov.w	r5, #2
    hdcmipp->Instance->P1FCTCR |= CaptureMode;
3400f6d0:	6804      	ldr	r4, [r0, #0]
  else if (Pipe == DCMIPP_PIPE1)
3400f6d2:	d110      	bne.n	3400f6f6 <DCMIPP_SetConfig.part.0+0x2e>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400f6d4:	7185      	strb	r5, [r0, #6]
    hdcmipp->Instance->P1FCTCR |= CaptureMode;
3400f6d6:	f8d4 1900 	ldr.w	r1, [r4, #2304]	@ 0x900
3400f6da:	430b      	orrs	r3, r1
3400f6dc:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
    WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
3400f6e0:	f8c4 29c4 	str.w	r2, [r4, #2500]	@ 0x9c4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME  | DCMIPP_IT_PIPE1_OVR | DCMIPP_IT_PIPE1_VSYNC |
3400f6e4:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
3400f6e8:	f443 0306 	orr.w	r3, r3, #8781824	@ 0x860000
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
3400f6ec:	f043 0320 	orr.w	r3, r3, #32
3400f6f0:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
}
3400f6f4:	bd30      	pop	{r4, r5, pc}
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400f6f6:	4408      	add	r0, r1
3400f6f8:	7145      	strb	r5, [r0, #5]
    hdcmipp->Instance->P2FCTCR |= CaptureMode;
3400f6fa:	f8d4 1d00 	ldr.w	r1, [r4, #3328]	@ 0xd00
3400f6fe:	430b      	orrs	r3, r1
3400f700:	f8c4 3d00 	str.w	r3, [r4, #3328]	@ 0xd00
    WRITE_REG(hdcmipp->Instance->P2PPM0AR1, DstAddress);
3400f704:	f8c4 2dc4 	str.w	r2, [r4, #3524]	@ 0xdc4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
3400f708:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
3400f70c:	f043 4306 	orr.w	r3, r3, #2248146944	@ 0x86000000
3400f710:	e7ec      	b.n	3400f6ec <DCMIPP_SetConfig.part.0+0x24>

3400f712 <DCMIPP_SetConfig>:
{
3400f712:	b470      	push	{r4, r5, r6}
3400f714:	4615      	mov	r5, r2
3400f716:	461e      	mov	r6, r3
  if (Pipe == DCMIPP_PIPE0)
3400f718:	b999      	cbnz	r1, 3400f742 <DCMIPP_SetConfig+0x30>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400f71a:	2302      	movs	r3, #2
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
3400f71c:	6801      	ldr	r1, [r0, #0]
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400f71e:	7143      	strb	r3, [r0, #5]
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
3400f720:	f8d1 2500 	ldr.w	r2, [r1, #1280]	@ 0x500
3400f724:	4332      	orrs	r2, r6
3400f726:	f8c1 2500 	str.w	r2, [r1, #1280]	@ 0x500
    WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
3400f72a:	f8c1 55c4 	str.w	r5, [r1, #1476]	@ 0x5c4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
3400f72e:	f8d1 33f0 	ldr.w	r3, [r1, #1008]	@ 0x3f0
}
3400f732:	bc70      	pop	{r4, r5, r6}
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
3400f734:	f443 4306 	orr.w	r3, r3, #34304	@ 0x8600
3400f738:	f043 0320 	orr.w	r3, r3, #32
3400f73c:	f8c1 33f0 	str.w	r3, [r1, #1008]	@ 0x3f0
}
3400f740:	4770      	bx	lr
3400f742:	bc70      	pop	{r4, r5, r6}
3400f744:	f7ff bfc0 	b.w	3400f6c8 <DCMIPP_SetConfig.part.0>

3400f748 <DCMIPP_EnableCapture.part.0>:
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400f748:	2302      	movs	r3, #2
3400f74a:	7183      	strb	r3, [r0, #6]
    SET_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEN);
3400f74c:	6803      	ldr	r3, [r0, #0]
3400f74e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
3400f752:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3400f756:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    SET_BIT(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_CPTREQ);
3400f75a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
3400f75e:	f042 0208 	orr.w	r2, r2, #8
3400f762:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
3400f766:	4770      	bx	lr

3400f768 <DCMIPP_EnableCapture>:
  if (Pipe == DCMIPP_PIPE0)
3400f768:	b969      	cbnz	r1, 3400f786 <DCMIPP_EnableCapture+0x1e>
    SET_BIT(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_PIPEN);
3400f76a:	6803      	ldr	r3, [r0, #0]
3400f76c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
3400f770:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3400f774:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    SET_BIT(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_CPTREQ);
3400f778:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
3400f77c:	f042 0208 	orr.w	r2, r2, #8
3400f780:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
3400f784:	4770      	bx	lr
  else if (Pipe == DCMIPP_PIPE1)
3400f786:	2901      	cmp	r1, #1
3400f788:	d101      	bne.n	3400f78e <DCMIPP_EnableCapture+0x26>
3400f78a:	f7ff bfdd 	b.w	3400f748 <DCMIPP_EnableCapture.part.0>
    SET_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);
3400f78e:	6803      	ldr	r3, [r0, #0]
3400f790:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
3400f794:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3400f798:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    SET_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
3400f79c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
3400f7a0:	f042 0208 	orr.w	r2, r2, #8
3400f7a4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
}
3400f7a8:	4770      	bx	lr
	...

3400f7ac <DCMIPP_CSI_WritePHYReg.constprop.0>:
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400f7ac:	4b18      	ldr	r3, [pc, #96]	@ (3400f810 <DCMIPP_CSI_WritePHYReg.constprop.0+0x64>)
static void DCMIPP_CSI_WritePHYReg(CSI_TypeDef *hcsi, uint32_t reg_msb, uint32_t reg_lsb, uint32_t val)
3400f7ae:	b510      	push	{r4, lr}
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400f7b0:	695a      	ldr	r2, [r3, #20]
  SET_BIT(hcsi->PTCR1, val & 0xFFU);
3400f7b2:	b2c9      	uxtb	r1, r1
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400f7b4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
3400f7b8:	615a      	str	r2, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3400f7ba:	691a      	ldr	r2, [r3, #16]
3400f7bc:	f042 0201 	orr.w	r2, r2, #1
3400f7c0:	611a      	str	r2, [r3, #16]
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400f7c2:	695a      	ldr	r2, [r3, #20]
3400f7c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
3400f7c8:	615a      	str	r2, [r3, #20]
  CLEAR_REG(hcsi->PTCR0);
3400f7ca:	2200      	movs	r2, #0
3400f7cc:	611a      	str	r2, [r3, #16]
  CLEAR_REG(hcsi->PTCR1);
3400f7ce:	615a      	str	r2, [r3, #20]
  SET_BIT(hcsi->PTCR1, reg_msb & 0xFFU);
3400f7d0:	695c      	ldr	r4, [r3, #20]
3400f7d2:	615c      	str	r4, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3400f7d4:	691c      	ldr	r4, [r3, #16]
3400f7d6:	f044 0401 	orr.w	r4, r4, #1
3400f7da:	611c      	str	r4, [r3, #16]
  CLEAR_REG(hcsi->PTCR0);
3400f7dc:	611a      	str	r2, [r3, #16]
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400f7de:	695c      	ldr	r4, [r3, #20]
3400f7e0:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
3400f7e4:	615c      	str	r4, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3400f7e6:	691c      	ldr	r4, [r3, #16]
3400f7e8:	f044 0401 	orr.w	r4, r4, #1
3400f7ec:	611c      	str	r4, [r3, #16]
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM | (reg_lsb & 0xFFU));
3400f7ee:	695c      	ldr	r4, [r3, #20]
3400f7f0:	4304      	orrs	r4, r0
3400f7f2:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
3400f7f6:	615c      	str	r4, [r3, #20]
  CLEAR_REG(hcsi->PTCR0);
3400f7f8:	611a      	str	r2, [r3, #16]
  CLEAR_REG(hcsi->PTCR1);
3400f7fa:	615a      	str	r2, [r3, #20]
  SET_BIT(hcsi->PTCR1, val & 0xFFU);
3400f7fc:	6958      	ldr	r0, [r3, #20]
3400f7fe:	4301      	orrs	r1, r0
3400f800:	6159      	str	r1, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3400f802:	6919      	ldr	r1, [r3, #16]
3400f804:	f041 0101 	orr.w	r1, r1, #1
3400f808:	6119      	str	r1, [r3, #16]
  CLEAR_REG(hcsi->PTCR0);
3400f80a:	611a      	str	r2, [r3, #16]
}
3400f80c:	bd10      	pop	{r4, pc}
3400f80e:	bf00      	nop
3400f810:	58007000 	.word	0x58007000

3400f814 <HAL_DCMIPP_Init>:
{
3400f814:	b510      	push	{r4, lr}
  if (hdcmipp == NULL)
3400f816:	4604      	mov	r4, r0
3400f818:	b1d8      	cbz	r0, 3400f852 <HAL_DCMIPP_Init+0x3e>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3400f81a:	6803      	ldr	r3, [r0, #0]
3400f81c:	4a0e      	ldr	r2, [pc, #56]	@ (3400f858 <HAL_DCMIPP_Init+0x44>)
3400f81e:	4293      	cmp	r3, r2
3400f820:	d008      	beq.n	3400f834 <HAL_DCMIPP_Init+0x20>
3400f822:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400f826:	4293      	cmp	r3, r2
3400f828:	d004      	beq.n	3400f834 <HAL_DCMIPP_Init+0x20>
3400f82a:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
3400f82e:	480b      	ldr	r0, [pc, #44]	@ (3400f85c <HAL_DCMIPP_Init+0x48>)
3400f830:	f00f fee6 	bl	3401f600 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_RESET)
3400f834:	7923      	ldrb	r3, [r4, #4]
3400f836:	b913      	cbnz	r3, 3400f83e <HAL_DCMIPP_Init+0x2a>
    HAL_DCMIPP_MspInit(hdcmipp);
3400f838:	4620      	mov	r0, r4
3400f83a:	f7f7 fd51 	bl	340072e0 <HAL_DCMIPP_MspInit>
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
3400f83e:	2303      	movs	r3, #3
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
3400f840:	2000      	movs	r0, #0
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
3400f842:	7123      	strb	r3, [r4, #4]
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
3400f844:	2301      	movs	r3, #1
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
3400f846:	7160      	strb	r0, [r4, #5]
3400f848:	71a0      	strb	r0, [r4, #6]
3400f84a:	71e0      	strb	r0, [r4, #7]
  hdcmipp->ErrorCode = HAL_DCMIPP_ERROR_NONE;
3400f84c:	60a0      	str	r0, [r4, #8]
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
3400f84e:	7123      	strb	r3, [r4, #4]
}
3400f850:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3400f852:	2001      	movs	r0, #1
3400f854:	e7fc      	b.n	3400f850 <HAL_DCMIPP_Init+0x3c>
3400f856:	bf00      	nop
3400f858:	58002000 	.word	0x58002000
3400f85c:	3402f13d 	.word	0x3402f13d

3400f860 <HAL_DCMIPP_CSI_SetConfig>:
{
3400f860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400f864:	4605      	mov	r5, r0
3400f866:	b0fe      	sub	sp, #504	@ 0x1f8
3400f868:	460c      	mov	r4, r1
  const SNPS_FreqsTypeDef SNPS_Freqs[63] =
3400f86a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
3400f86e:	4668      	mov	r0, sp
3400f870:	4954      	ldr	r1, [pc, #336]	@ (3400f9c4 <HAL_DCMIPP_CSI_SetConfig+0x164>)
3400f872:	f012 f9fe 	bl	34021c72 <memcpy>
  if ((hdcmipp == NULL) || (pCSI_Config == NULL))
3400f876:	b91d      	cbnz	r5, 3400f880 <HAL_DCMIPP_CSI_SetConfig+0x20>
    return HAL_ERROR;
3400f878:	2001      	movs	r0, #1
}
3400f87a:	b07e      	add	sp, #504	@ 0x1f8
3400f87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hdcmipp == NULL) || (pCSI_Config == NULL))
3400f880:	2c00      	cmp	r4, #0
3400f882:	d0f9      	beq.n	3400f878 <HAL_DCMIPP_CSI_SetConfig+0x18>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3400f884:	682b      	ldr	r3, [r5, #0]
3400f886:	4a50      	ldr	r2, [pc, #320]	@ (3400f9c8 <HAL_DCMIPP_CSI_SetConfig+0x168>)
3400f888:	4293      	cmp	r3, r2
3400f88a:	d008      	beq.n	3400f89e <HAL_DCMIPP_CSI_SetConfig+0x3e>
3400f88c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400f890:	4293      	cmp	r3, r2
3400f892:	d004      	beq.n	3400f89e <HAL_DCMIPP_CSI_SetConfig+0x3e>
3400f894:	f240 218b 	movw	r1, #651	@ 0x28b
3400f898:	484c      	ldr	r0, [pc, #304]	@ (3400f9cc <HAL_DCMIPP_CSI_SetConfig+0x16c>)
3400f89a:	f00f feb1 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_NUMBER_OF_LANES(pCSI_Config->NumberOfLanes));
3400f89e:	6823      	ldr	r3, [r4, #0]
3400f8a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400f8a4:	d007      	beq.n	3400f8b6 <HAL_DCMIPP_CSI_SetConfig+0x56>
3400f8a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400f8aa:	d004      	beq.n	3400f8b6 <HAL_DCMIPP_CSI_SetConfig+0x56>
3400f8ac:	f44f 7123 	mov.w	r1, #652	@ 0x28c
3400f8b0:	4846      	ldr	r0, [pc, #280]	@ (3400f9cc <HAL_DCMIPP_CSI_SetConfig+0x16c>)
3400f8b2:	f00f fea5 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_LANE_MAPPING(pCSI_Config->DataLaneMapping));
3400f8b6:	6863      	ldr	r3, [r4, #4]
3400f8b8:	3b01      	subs	r3, #1
3400f8ba:	2b01      	cmp	r3, #1
3400f8bc:	d904      	bls.n	3400f8c8 <HAL_DCMIPP_CSI_SetConfig+0x68>
3400f8be:	f240 218d 	movw	r1, #653	@ 0x28d
3400f8c2:	4842      	ldr	r0, [pc, #264]	@ (3400f9cc <HAL_DCMIPP_CSI_SetConfig+0x16c>)
3400f8c4:	f00f fe9c 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_PHY_BITRATE(pCSI_Config->PHYBitrate));
3400f8c8:	68a3      	ldr	r3, [r4, #8]
3400f8ca:	2b3e      	cmp	r3, #62	@ 0x3e
3400f8cc:	d904      	bls.n	3400f8d8 <HAL_DCMIPP_CSI_SetConfig+0x78>
3400f8ce:	f240 218e 	movw	r1, #654	@ 0x28e
3400f8d2:	483e      	ldr	r0, [pc, #248]	@ (3400f9cc <HAL_DCMIPP_CSI_SetConfig+0x16c>)
3400f8d4:	f00f fe94 	bl	3401f600 <assert_failed>
  CLEAR_BIT(csi_instance->CR, CSI_CR_CSIEN);
3400f8d8:	4b3d      	ldr	r3, [pc, #244]	@ (3400f9d0 <HAL_DCMIPP_CSI_SetConfig+0x170>)
3400f8da:	681a      	ldr	r2, [r3, #0]
3400f8dc:	f022 0201 	bic.w	r2, r2, #1
3400f8e0:	601a      	str	r2, [r3, #0]
  if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
3400f8e2:	6861      	ldr	r1, [r4, #4]
3400f8e4:	2901      	cmp	r1, #1
3400f8e6:	d11a      	bne.n	3400f91e <HAL_DCMIPP_CSI_SetConfig+0xbe>
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE0 << CSI_LMCFGR_DL0MAP_Pos) | \
3400f8e8:	6822      	ldr	r2, [r4, #0]
3400f8ea:	f442 1204 	orr.w	r2, r2, #2162688	@ 0x210000
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL0MAP_Pos) | \
3400f8ee:	671a      	str	r2, [r3, #112]	@ 0x70
  SET_BIT(csi_instance->CR, CSI_CR_CSIEN);
3400f8f0:	681a      	ldr	r2, [r3, #0]
3400f8f2:	f042 0201 	orr.w	r2, r2, #1
3400f8f6:	601a      	str	r2, [r3, #0]
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO |  DCMIPP_CSI_IT_SYNCERR | \
3400f8f8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400f8fc:	f042 42b0 	orr.w	r2, r2, #1476395008	@ 0x58000000
3400f900:	f442 1204 	orr.w	r2, r2, #2162688	@ 0x210000
3400f904:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
3400f908:	6822      	ldr	r2, [r4, #0]
3400f90a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0 | DCMIPP_CSI_IT_ESOTSYNCDL0 |
3400f90e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
3400f912:	d154      	bne.n	3400f9be <HAL_DCMIPP_CSI_SetConfig+0x15e>
    if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
3400f914:	2901      	cmp	r1, #1
3400f916:	d108      	bne.n	3400f92a <HAL_DCMIPP_CSI_SetConfig+0xca>
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
3400f918:	f042 021f 	orr.w	r2, r2, #31
3400f91c:	e007      	b.n	3400f92e <HAL_DCMIPP_CSI_SetConfig+0xce>
  else if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_INVERTED_DATA_LANES)
3400f91e:	2902      	cmp	r1, #2
3400f920:	d1aa      	bne.n	3400f878 <HAL_DCMIPP_CSI_SetConfig+0x18>
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL0MAP_Pos) | \
3400f922:	6822      	ldr	r2, [r4, #0]
3400f924:	f442 1290 	orr.w	r2, r2, #1179648	@ 0x120000
3400f928:	e7e1      	b.n	3400f8ee <HAL_DCMIPP_CSI_SetConfig+0x8e>
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
3400f92a:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
  CLEAR_REG(csi_instance-> PCR);
3400f92e:	2600      	movs	r6, #0
  CLEAR_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
3400f930:	4d28      	ldr	r5, [pc, #160]	@ (3400f9d4 <HAL_DCMIPP_CSI_SetConfig+0x174>)
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
3400f932:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  CLEAR_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
3400f936:	682b      	ldr	r3, [r5, #0]
3400f938:	4f25      	ldr	r7, [pc, #148]	@ (3400f9d0 <HAL_DCMIPP_CSI_SetConfig+0x170>)
3400f93a:	f023 0302 	bic.w	r3, r3, #2
3400f93e:	602b      	str	r3, [r5, #0]
  CLEAR_REG(csi_instance-> PCR);
3400f940:	607e      	str	r6, [r7, #4]
  SET_BIT(csi_instance->PTCR0, CSI_PTCR0_TCKEN);
3400f942:	692b      	ldr	r3, [r5, #16]
  HAL_Delay(1);
3400f944:	2001      	movs	r0, #1
  SET_BIT(csi_instance->PTCR0, CSI_PTCR0_TCKEN);
3400f946:	f043 0301 	orr.w	r3, r3, #1
3400f94a:	612b      	str	r3, [r5, #16]
  HAL_Delay(1);
3400f94c:	f00f fac8 	bl	3401eee0 <HAL_Delay>
  CLEAR_REG(csi_instance->PTCR0);
3400f950:	612e      	str	r6, [r5, #16]
  MODIFY_REG(csi_instance->PFCR, CSI_PFCR_HSFR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400f952:	f8d4 8008 	ldr.w	r8, [r4, #8]
3400f956:	68ab      	ldr	r3, [r5, #8]
3400f958:	f85d 2038 	ldr.w	r2, [sp, r8, lsl #3]
3400f95c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
3400f960:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
3400f964:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
3400f968:	60ab      	str	r3, [r5, #8]
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0x08, 0x38);
3400f96a:	2138      	movs	r1, #56	@ 0x38
3400f96c:	2008      	movs	r0, #8
  MODIFY_REG(csi_instance->PFCR, CSI_PFCR_HSFR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400f96e:	0216      	lsls	r6, r2, #8
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0x08, 0x38);
3400f970:	f7ff ff1c 	bl	3400f7ac <DCMIPP_CSI_WritePHYReg.constprop.0>
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe4, 0x11);
3400f974:	2111      	movs	r1, #17
3400f976:	20e4      	movs	r0, #228	@ 0xe4
3400f978:	f7ff ff18 	bl	3400f7ac <DCMIPP_CSI_WritePHYReg.constprop.0>
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target >> 8);
3400f97c:	eb0d 03c8 	add.w	r3, sp, r8, lsl #3
3400f980:	f8d3 8004 	ldr.w	r8, [r3, #4]
3400f984:	20e3      	movs	r0, #227	@ 0xe3
3400f986:	ea4f 2118 	mov.w	r1, r8, lsr #8
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400f98a:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target >> 8);
3400f98e:	f7ff ff0d 	bl	3400f7ac <DCMIPP_CSI_WritePHYReg.constprop.0>
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400f992:	f046 0628 	orr.w	r6, r6, #40	@ 0x28
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target & 0xFFU);
3400f996:	20e3      	movs	r0, #227	@ 0xe3
3400f998:	fa5f f188 	uxtb.w	r1, r8
3400f99c:	f7ff ff06 	bl	3400f7ac <DCMIPP_CSI_WritePHYReg.constprop.0>
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400f9a0:	60ae      	str	r6, [r5, #8]
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
3400f9a2:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(csi_instance->PMCR);
3400f9a4:	2000      	movs	r0, #0
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
3400f9a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
3400f9aa:	bf0c      	ite	eq
3400f9ac:	2307      	moveq	r3, #7
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_DL1EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
3400f9ae:	230f      	movne	r3, #15
3400f9b0:	607b      	str	r3, [r7, #4]
  SET_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
3400f9b2:	682b      	ldr	r3, [r5, #0]
3400f9b4:	f043 0302 	orr.w	r3, r3, #2
3400f9b8:	602b      	str	r3, [r5, #0]
  CLEAR_REG(csi_instance->PMCR);
3400f9ba:	6068      	str	r0, [r5, #4]
  return HAL_OK;
3400f9bc:	e75d      	b.n	3400f87a <HAL_DCMIPP_CSI_SetConfig+0x1a>
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
3400f9be:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
3400f9c2:	e7a9      	b.n	3400f918 <HAL_DCMIPP_CSI_SetConfig+0xb8>
3400f9c4:	3402ab3c 	.word	0x3402ab3c
3400f9c8:	58002000 	.word	0x58002000
3400f9cc:	3402f13d 	.word	0x3402f13d
3400f9d0:	58006000 	.word	0x58006000
3400f9d4:	58007000 	.word	0x58007000

3400f9d8 <HAL_DCMIPP_CSI_PIPE_SetConfig>:
{
3400f9d8:	b570      	push	{r4, r5, r6, lr}
3400f9da:	460d      	mov	r5, r1
3400f9dc:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pCSI_PipeConfig == NULL))
3400f9de:	4606      	mov	r6, r0
3400f9e0:	b908      	cbnz	r0, 3400f9e6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xe>
    return HAL_ERROR;
3400f9e2:	2001      	movs	r0, #1
}
3400f9e4:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pCSI_PipeConfig == NULL))
3400f9e6:	2a00      	cmp	r2, #0
3400f9e8:	d0fb      	beq.n	3400f9e2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3400f9ea:	6803      	ldr	r3, [r0, #0]
3400f9ec:	4a50      	ldr	r2, [pc, #320]	@ (3400fb30 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x158>)
3400f9ee:	4293      	cmp	r3, r2
3400f9f0:	d008      	beq.n	3400fa04 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2c>
3400f9f2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400f9f6:	4293      	cmp	r3, r2
3400f9f8:	d004      	beq.n	3400fa04 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2c>
3400f9fa:	f44f 7144 	mov.w	r1, #784	@ 0x310
3400f9fe:	484d      	ldr	r0, [pc, #308]	@ (3400fb34 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fa00:	f00f fdfe 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3400fa04:	2d02      	cmp	r5, #2
3400fa06:	d904      	bls.n	3400fa12 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x3a>
3400fa08:	f240 3111 	movw	r1, #785	@ 0x311
3400fa0c:	4849      	ldr	r0, [pc, #292]	@ (3400fb34 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fa0e:	f00f fdf7 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
3400fa12:	6823      	ldr	r3, [r4, #0]
3400fa14:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3400fa18:	d004      	beq.n	3400fa24 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x4c>
3400fa1a:	f240 3112 	movw	r1, #786	@ 0x312
3400fa1e:	4845      	ldr	r0, [pc, #276]	@ (3400fb34 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fa20:	f00f fdee 	bl	3401f600 <assert_failed>
  if (Pipe != DCMIPP_PIPE2)
3400fa24:	2d02      	cmp	r5, #2
    assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
3400fa26:	6823      	ldr	r3, [r4, #0]
  if (Pipe != DCMIPP_PIPE2)
3400fa28:	d01c      	beq.n	3400fa64 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8c>
    assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
3400fa2a:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3400fa2e:	d004      	beq.n	3400fa3a <HAL_DCMIPP_CSI_PIPE_SetConfig+0x62>
3400fa30:	f240 3116 	movw	r1, #790	@ 0x316
3400fa34:	483f      	ldr	r0, [pc, #252]	@ (3400fb34 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fa36:	f00f fde3 	bl	3401f600 <assert_failed>
    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
3400fa3a:	6823      	ldr	r3, [r4, #0]
3400fa3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400fa40:	d002      	beq.n	3400fa48 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x70>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
3400fa42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400fa46:	d10d      	bne.n	3400fa64 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8c>
      assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDB));
3400fa48:	68a3      	ldr	r3, [r4, #8]
3400fa4a:	3b18      	subs	r3, #24
3400fa4c:	2b15      	cmp	r3, #21
3400fa4e:	d804      	bhi.n	3400fa5a <HAL_DCMIPP_CSI_PIPE_SetConfig+0x82>
3400fa50:	4a39      	ldr	r2, [pc, #228]	@ (3400fb38 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x160>)
3400fa52:	fa22 f303 	lsr.w	r3, r2, r3
3400fa56:	07da      	lsls	r2, r3, #31
3400fa58:	d404      	bmi.n	3400fa64 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8c>
3400fa5a:	f240 311b 	movw	r1, #795	@ 0x31b
3400fa5e:	4835      	ldr	r0, [pc, #212]	@ (3400fb34 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fa60:	f00f fdce 	bl	3401f600 <assert_failed>
  if (pCSI_PipeConfig->DataTypeMode != DCMIPP_DTMODE_ALL)
3400fa64:	6823      	ldr	r3, [r4, #0]
3400fa66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400fa6a:	d00d      	beq.n	3400fa88 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xb0>
    assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDA));
3400fa6c:	6863      	ldr	r3, [r4, #4]
3400fa6e:	3b18      	subs	r3, #24
3400fa70:	2b15      	cmp	r3, #21
3400fa72:	d804      	bhi.n	3400fa7e <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa6>
3400fa74:	4a30      	ldr	r2, [pc, #192]	@ (3400fb38 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x160>)
3400fa76:	fa22 f303 	lsr.w	r3, r2, r3
3400fa7a:	07db      	lsls	r3, r3, #31
3400fa7c:	d404      	bmi.n	3400fa88 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xb0>
3400fa7e:	f240 3121 	movw	r1, #801	@ 0x321
3400fa82:	482c      	ldr	r0, [pc, #176]	@ (3400fb34 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fa84:	f00f fdbc 	bl	3401f600 <assert_failed>
  state = hdcmipp->State;
3400fa88:	7933      	ldrb	r3, [r6, #4]
  if ((state == HAL_DCMIPP_STATE_INIT) || (state == HAL_DCMIPP_STATE_READY))
3400fa8a:	3b01      	subs	r3, #1
3400fa8c:	2b01      	cmp	r3, #1
3400fa8e:	d82e      	bhi.n	3400faee <HAL_DCMIPP_CSI_PIPE_SetConfig+0x116>
    if (((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL) || \
3400fa90:	6822      	ldr	r2, [r4, #0]
3400fa92:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
3400fa96:	d045      	beq.n	3400fb24 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x14c>
3400fa98:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
3400fa9c:	d12b      	bne.n	3400faf6 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x11e>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
3400fa9e:	2d00      	cmp	r5, #0
3400faa0:	d19f      	bne.n	3400f9e2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa>
3400faa2:	4613      	mov	r3, r2
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDA << DCMIPP_P0FSCR_DTIDA_Pos);
3400faa4:	6861      	ldr	r1, [r4, #4]
    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
3400faa6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDA << DCMIPP_P0FSCR_DTIDA_Pos);
3400faaa:	ea43 0301 	orr.w	r3, r3, r1
    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
3400faae:	6831      	ldr	r1, [r6, #0]
3400fab0:	d002      	beq.n	3400fab8 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xe0>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
3400fab2:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
3400fab6:	d104      	bne.n	3400fac2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xea>
      if (Pipe != DCMIPP_PIPE2)
3400fab8:	2d02      	cmp	r5, #2
3400faba:	d02b      	beq.n	3400fb14 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>
        pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDB << DCMIPP_P0FSCR_DTIDB_Pos);
3400fabc:	68a2      	ldr	r2, [r4, #8]
3400fabe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (Pipe == DCMIPP_PIPE0)
3400fac2:	b9ed      	cbnz	r5, 3400fb00 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x128>
      MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_DTMODE | DCMIPP_P0FSCR_DTIDA |
3400fac4:	6831      	ldr	r1, [r6, #0]
3400fac6:	4a1d      	ldr	r2, [pc, #116]	@ (3400fb3c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x164>)
3400fac8:	f8d1 0404 	ldr.w	r0, [r1, #1028]	@ 0x404
3400facc:	4002      	ands	r2, r0
3400face:	431a      	orrs	r2, r3
3400fad0:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
    CLEAR_BIT(hdcmipp->Instance->PRCR, DCMIPP_PRCR_ENABLE);
3400fad4:	6833      	ldr	r3, [r6, #0]
3400fad6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400fada:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
3400fade:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    SET_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
3400fae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
3400fae6:	f042 0201 	orr.w	r2, r2, #1
3400faea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
3400faee:	2302      	movs	r3, #2
  return HAL_OK;
3400faf0:	2000      	movs	r0, #0
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
3400faf2:	7133      	strb	r3, [r6, #4]
  return HAL_OK;
3400faf4:	e776      	b.n	3400f9e4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xc>
  uint32_t pxfscr_reg = 0;
3400faf6:	2d02      	cmp	r5, #2
3400faf8:	bf14      	ite	ne
3400fafa:	4613      	movne	r3, r2
3400fafc:	2300      	moveq	r3, #0
3400fafe:	e7d1      	b.n	3400faa4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xcc>
    else if (Pipe == DCMIPP_PIPE1)
3400fb00:	2d01      	cmp	r5, #1
3400fb02:	d107      	bne.n	3400fb14 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>
      MODIFY_REG(hdcmipp->Instance->P1FSCR, (DCMIPP_P1FSCR_DTIDA | DCMIPP_P1FSCR_DTIDB |
3400fb04:	f8d1 0804 	ldr.w	r0, [r1, #2052]	@ 0x804
3400fb08:	4a0c      	ldr	r2, [pc, #48]	@ (3400fb3c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x164>)
3400fb0a:	4002      	ands	r2, r0
3400fb0c:	431a      	orrs	r2, r3
3400fb0e:	f8c1 2804 	str.w	r2, [r1, #2052]	@ 0x804
3400fb12:	e7df      	b.n	3400fad4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xfc>
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_DTIDA, pxfscr_reg);
3400fb14:	f8d1 2c04 	ldr.w	r2, [r1, #3076]	@ 0xc04
3400fb18:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
3400fb1c:	4313      	orrs	r3, r2
3400fb1e:	f8c1 3c04 	str.w	r3, [r1, #3076]	@ 0xc04
3400fb22:	e7d7      	b.n	3400fad4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xfc>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
3400fb24:	2d00      	cmp	r5, #0
3400fb26:	f47f af5c 	bne.w	3400f9e2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa>
3400fb2a:	4613      	mov	r3, r2
3400fb2c:	e7ca      	b.n	3400fac4 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xec>
3400fb2e:	bf00      	nop
3400fb30:	58002000 	.word	0x58002000
3400fb34:	3402f13d 	.word	0x3402f13d
3400fb38:	003c1fc3 	.word	0x003c1fc3
3400fb3c:	fffcc0c0 	.word	0xfffcc0c0

3400fb40 <HAL_DCMIPP_CSI_SetVCConfig>:
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
3400fb40:	2903      	cmp	r1, #3
{
3400fb42:	b570      	push	{r4, r5, r6, lr}
3400fb44:	4606      	mov	r6, r0
3400fb46:	460d      	mov	r5, r1
3400fb48:	4614      	mov	r4, r2
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
3400fb4a:	d904      	bls.n	3400fb56 <HAL_DCMIPP_CSI_SetVCConfig+0x16>
3400fb4c:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
3400fb50:	4815      	ldr	r0, [pc, #84]	@ (3400fba8 <HAL_DCMIPP_CSI_SetVCConfig+0x68>)
3400fb52:	f00f fd55 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_TYPE_FORMAT(DataTypeFormat));
3400fb56:	2c06      	cmp	r4, #6
3400fb58:	d904      	bls.n	3400fb64 <HAL_DCMIPP_CSI_SetVCConfig+0x24>
3400fb5a:	f240 31c9 	movw	r1, #969	@ 0x3c9
3400fb5e:	4812      	ldr	r0, [pc, #72]	@ (3400fba8 <HAL_DCMIPP_CSI_SetVCConfig+0x68>)
3400fb60:	f00f fd4e 	bl	3401f600 <assert_failed>
  if (hdcmipp == NULL)
3400fb64:	b1f6      	cbz	r6, 3400fba4 <HAL_DCMIPP_CSI_SetVCConfig+0x64>
  switch (VirtualChannel)
3400fb66:	2d03      	cmp	r5, #3
3400fb68:	d808      	bhi.n	3400fb7c <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
3400fb6a:	e8df f005 	tbb	[pc, r5]
3400fb6e:	0902      	.short	0x0902
3400fb70:	150f      	.short	0x150f
      WRITE_REG(csi_instance->VC0CFGR1, (DataTypeFormat << CSI_VC0CFGR1_CDTFT_Pos) | CSI_VC0CFGR1_ALLDT);
3400fb72:	4b0e      	ldr	r3, [pc, #56]	@ (3400fbac <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3400fb74:	0224      	lsls	r4, r4, #8
3400fb76:	f044 0401 	orr.w	r4, r4, #1
3400fb7a:	611c      	str	r4, [r3, #16]
  return HAL_OK;
3400fb7c:	2000      	movs	r0, #0
}
3400fb7e:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(csi_instance->VC1CFGR1, (DataTypeFormat << CSI_VC1CFGR1_CDTFT_Pos) | CSI_VC1CFGR1_ALLDT);
3400fb80:	4b0a      	ldr	r3, [pc, #40]	@ (3400fbac <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3400fb82:	0224      	lsls	r4, r4, #8
3400fb84:	f044 0401 	orr.w	r4, r4, #1
3400fb88:	621c      	str	r4, [r3, #32]
      break;
3400fb8a:	e7f7      	b.n	3400fb7c <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
      WRITE_REG(csi_instance->VC2CFGR1, (DataTypeFormat << CSI_VC2CFGR1_CDTFT_Pos) | CSI_VC2CFGR1_ALLDT);
3400fb8c:	4b07      	ldr	r3, [pc, #28]	@ (3400fbac <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3400fb8e:	0224      	lsls	r4, r4, #8
3400fb90:	f044 0401 	orr.w	r4, r4, #1
3400fb94:	631c      	str	r4, [r3, #48]	@ 0x30
      break;
3400fb96:	e7f1      	b.n	3400fb7c <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
      WRITE_REG(csi_instance->VC3CFGR1, (DataTypeFormat << CSI_VC3CFGR1_CDTFT_Pos) | CSI_VC3CFGR1_ALLDT);
3400fb98:	4b04      	ldr	r3, [pc, #16]	@ (3400fbac <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3400fb9a:	0224      	lsls	r4, r4, #8
3400fb9c:	f044 0401 	orr.w	r4, r4, #1
3400fba0:	641c      	str	r4, [r3, #64]	@ 0x40
      break;
3400fba2:	e7eb      	b.n	3400fb7c <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
    return HAL_ERROR;
3400fba4:	2001      	movs	r0, #1
3400fba6:	e7ea      	b.n	3400fb7e <HAL_DCMIPP_CSI_SetVCConfig+0x3e>
3400fba8:	3402f13d 	.word	0x3402f13d
3400fbac:	58006000 	.word	0x58006000

3400fbb0 <HAL_DCMIPP_PIPE_SetConfig>:
{
3400fbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400fbb2:	460d      	mov	r5, r1
3400fbb4:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
3400fbb6:	4606      	mov	r6, r0
3400fbb8:	b908      	cbnz	r0, 3400fbbe <HAL_DCMIPP_PIPE_SetConfig+0xe>
    return HAL_ERROR;
3400fbba:	2001      	movs	r0, #1
}
3400fbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
3400fbbe:	2a00      	cmp	r2, #0
3400fbc0:	d0fb      	beq.n	3400fbba <HAL_DCMIPP_PIPE_SetConfig+0xa>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3400fbc2:	6803      	ldr	r3, [r0, #0]
3400fbc4:	4a46      	ldr	r2, [pc, #280]	@ (3400fce0 <HAL_DCMIPP_PIPE_SetConfig+0x130>)
3400fbc6:	4293      	cmp	r3, r2
3400fbc8:	d008      	beq.n	3400fbdc <HAL_DCMIPP_PIPE_SetConfig+0x2c>
3400fbca:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400fbce:	4293      	cmp	r3, r2
3400fbd0:	d004      	beq.n	3400fbdc <HAL_DCMIPP_PIPE_SetConfig+0x2c>
3400fbd2:	f240 4102 	movw	r1, #1026	@ 0x402
3400fbd6:	4843      	ldr	r0, [pc, #268]	@ (3400fce4 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400fbd8:	f00f fd12 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3400fbdc:	2d02      	cmp	r5, #2
3400fbde:	d904      	bls.n	3400fbea <HAL_DCMIPP_PIPE_SetConfig+0x3a>
3400fbe0:	f240 4103 	movw	r1, #1027	@ 0x403
3400fbe4:	483f      	ldr	r0, [pc, #252]	@ (3400fce4 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400fbe6:	f00f fd0b 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_FRAME_RATE(pPipeConfig->FrameRate));
3400fbea:	6823      	ldr	r3, [r4, #0]
3400fbec:	2b03      	cmp	r3, #3
3400fbee:	d904      	bls.n	3400fbfa <HAL_DCMIPP_PIPE_SetConfig+0x4a>
3400fbf0:	f240 4104 	movw	r1, #1028	@ 0x404
3400fbf4:	483b      	ldr	r0, [pc, #236]	@ (3400fce4 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400fbf6:	f00f fd03 	bl	3401f600 <assert_failed>
  if (Pipe != DCMIPP_PIPE0)
3400fbfa:	b9bd      	cbnz	r5, 3400fc2c <HAL_DCMIPP_PIPE_SetConfig+0x7c>
  pipe_state = hdcmipp->PipeState[Pipe];
3400fbfc:	1971      	adds	r1, r6, r5
3400fbfe:	7948      	ldrb	r0, [r1, #5]
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
3400fc00:	7933      	ldrb	r3, [r6, #4]
  pipe_state = hdcmipp->PipeState[Pipe];
3400fc02:	b2c0      	uxtb	r0, r0
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
3400fc04:	2b02      	cmp	r3, #2
3400fc06:	b2da      	uxtb	r2, r3
3400fc08:	d1d7      	bne.n	3400fbba <HAL_DCMIPP_PIPE_SetConfig+0xa>
    if ((pipe_state == HAL_DCMIPP_PIPE_STATE_RESET) || (pipe_state == HAL_DCMIPP_PIPE_STATE_ERROR))
3400fc0a:	f010 00fb 	ands.w	r0, r0, #251	@ 0xfb
3400fc0e:	d1d4      	bne.n	3400fbba <HAL_DCMIPP_PIPE_SetConfig+0xa>
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400fc10:	714a      	strb	r2, [r1, #5]
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
3400fc12:	6833      	ldr	r3, [r6, #0]
3400fc14:	6827      	ldr	r7, [r4, #0]
  if (Pipe == DCMIPP_PIPE0)
3400fc16:	bb15      	cbnz	r5, 3400fc5e <HAL_DCMIPP_PIPE_SetConfig+0xae>
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
3400fc18:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
3400fc1c:	f022 0203 	bic.w	r2, r2, #3
3400fc20:	433a      	orrs	r2, r7
3400fc22:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_READY;
3400fc26:	2301      	movs	r3, #1
3400fc28:	714b      	strb	r3, [r1, #5]
  return HAL_OK;
3400fc2a:	e7c7      	b.n	3400fbbc <HAL_DCMIPP_PIPE_SetConfig+0xc>
    assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(pPipeConfig->PixelPackerFormat));
3400fc2c:	68a3      	ldr	r3, [r4, #8]
3400fc2e:	2b0a      	cmp	r3, #10
3400fc30:	d904      	bls.n	3400fc3c <HAL_DCMIPP_PIPE_SetConfig+0x8c>
3400fc32:	f240 4107 	movw	r1, #1031	@ 0x407
3400fc36:	482b      	ldr	r0, [pc, #172]	@ (3400fce4 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400fc38:	f00f fce2 	bl	3401f600 <assert_failed>
    assert_param(IS_DCMIPP_PIXEL_PIPE_PITCH(pPipeConfig->PixelPipePitch));
3400fc3c:	6863      	ldr	r3, [r4, #4]
3400fc3e:	071a      	lsls	r2, r3, #28
3400fc40:	d102      	bne.n	3400fc48 <HAL_DCMIPP_PIPE_SetConfig+0x98>
3400fc42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3400fc46:	d304      	bcc.n	3400fc52 <HAL_DCMIPP_PIPE_SetConfig+0xa2>
3400fc48:	f44f 6181 	mov.w	r1, #1032	@ 0x408
3400fc4c:	4825      	ldr	r0, [pc, #148]	@ (3400fce4 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400fc4e:	f00f fcd7 	bl	3401f600 <assert_failed>
  if ((Pipe == DCMIPP_PIPE2) && ((pPipeConfig->PixelPackerFormat) > DCMIPP_PIXEL_PACKER_FORMAT_YUV422_1))
3400fc52:	2d02      	cmp	r5, #2
3400fc54:	d1d2      	bne.n	3400fbfc <HAL_DCMIPP_PIPE_SetConfig+0x4c>
3400fc56:	68a3      	ldr	r3, [r4, #8]
3400fc58:	2b06      	cmp	r3, #6
3400fc5a:	d9cf      	bls.n	3400fbfc <HAL_DCMIPP_PIPE_SetConfig+0x4c>
3400fc5c:	e7ad      	b.n	3400fbba <HAL_DCMIPP_PIPE_SetConfig+0xa>
  else if (Pipe == DCMIPP_PIPE1)
3400fc5e:	2d01      	cmp	r5, #1
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
3400fc60:	e9d4 4601 	ldrd	r4, r6, [r4, #4]
  else if (Pipe == DCMIPP_PIPE1)
3400fc64:	d126      	bne.n	3400fcb4 <HAL_DCMIPP_PIPE_SetConfig+0x104>
    MODIFY_REG(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_FRATE, pPipeConfig->FrameRate);
3400fc66:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
3400fc6a:	4d1f      	ldr	r5, [pc, #124]	@ (3400fce8 <HAL_DCMIPP_PIPE_SetConfig+0x138>)
    MODIFY_REG(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_FRATE, pPipeConfig->FrameRate);
3400fc6c:	f022 0203 	bic.w	r2, r2, #3
3400fc70:	433a      	orrs	r2, r7
3400fc72:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
3400fc76:	f8d3 29c0 	ldr.w	r2, [r3, #2496]	@ 0x9c0
3400fc7a:	f022 020f 	bic.w	r2, r2, #15
3400fc7e:	4332      	orrs	r2, r6
3400fc80:	f8c3 29c0 	str.w	r2, [r3, #2496]	@ 0x9c0
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
3400fc84:	f8d3 29cc 	ldr.w	r2, [r3, #2508]	@ 0x9cc
3400fc88:	402a      	ands	r2, r5
3400fc8a:	4322      	orrs	r2, r4
3400fc8c:	f8c3 29cc 	str.w	r2, [r3, #2508]	@ 0x9cc
    if ((pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV422_2) ||
3400fc90:	1ff2      	subs	r2, r6, #7
3400fc92:	2a01      	cmp	r2, #1
3400fc94:	d806      	bhi.n	3400fca4 <HAL_DCMIPP_PIPE_SetConfig+0xf4>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
3400fc96:	f8d3 29dc 	ldr.w	r2, [r3, #2524]	@ 0x9dc
3400fc9a:	402a      	ands	r2, r5
3400fc9c:	4322      	orrs	r2, r4
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
3400fc9e:	f8c3 29dc 	str.w	r2, [r3, #2524]	@ 0x9dc
3400fca2:	e7c0      	b.n	3400fc26 <HAL_DCMIPP_PIPE_SetConfig+0x76>
    else if (pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV420_3)
3400fca4:	2e09      	cmp	r6, #9
3400fca6:	d1be      	bne.n	3400fc26 <HAL_DCMIPP_PIPE_SetConfig+0x76>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
3400fca8:	f8d3 29dc 	ldr.w	r2, [r3, #2524]	@ 0x9dc
3400fcac:	402a      	ands	r2, r5
3400fcae:	ea42 0254 	orr.w	r2, r2, r4, lsr #1
3400fcb2:	e7f4      	b.n	3400fc9e <HAL_DCMIPP_PIPE_SetConfig+0xee>
    MODIFY_REG(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_FRATE, pPipeConfig->FrameRate);
3400fcb4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
3400fcb8:	f022 0203 	bic.w	r2, r2, #3
3400fcbc:	433a      	orrs	r2, r7
3400fcbe:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
3400fcc2:	f8d3 2dc0 	ldr.w	r2, [r3, #3520]	@ 0xdc0
3400fcc6:	f022 020f 	bic.w	r2, r2, #15
3400fcca:	4332      	orrs	r2, r6
3400fccc:	f8c3 2dc0 	str.w	r2, [r3, #3520]	@ 0xdc0
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH,
3400fcd0:	f8d3 2dcc 	ldr.w	r2, [r3, #3532]	@ 0xdcc
3400fcd4:	f36f 020e 	bfc	r2, #0, #15
3400fcd8:	4322      	orrs	r2, r4
3400fcda:	f8c3 2dcc 	str.w	r2, [r3, #3532]	@ 0xdcc
3400fcde:	e7a2      	b.n	3400fc26 <HAL_DCMIPP_PIPE_SetConfig+0x76>
3400fce0:	58002000 	.word	0x58002000
3400fce4:	3402f13d 	.word	0x3402f13d
3400fce8:	ffff8000 	.word	0xffff8000

3400fcec <HAL_DCMIPP_SetIPPlugConfig>:
{
3400fcec:	b570      	push	{r4, r5, r6, lr}
3400fcee:	460c      	mov	r4, r1
  if ((hdcmipp == NULL) || (pIPPlugConfig == NULL))
3400fcf0:	4605      	mov	r5, r0
3400fcf2:	b908      	cbnz	r0, 3400fcf8 <HAL_DCMIPP_SetIPPlugConfig+0xc>
    return HAL_ERROR;
3400fcf4:	2001      	movs	r0, #1
}
3400fcf6:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pIPPlugConfig == NULL))
3400fcf8:	2900      	cmp	r1, #0
3400fcfa:	d0fb      	beq.n	3400fcf4 <HAL_DCMIPP_SetIPPlugConfig+0x8>
  assert_param(IS_DCMIPP_CLIENT(pIPPlugConfig->Client));
3400fcfc:	680b      	ldr	r3, [r1, #0]
3400fcfe:	3b01      	subs	r3, #1
3400fd00:	2b04      	cmp	r3, #4
3400fd02:	d904      	bls.n	3400fd0e <HAL_DCMIPP_SetIPPlugConfig+0x22>
3400fd04:	f240 413e 	movw	r1, #1086	@ 0x43e
3400fd08:	4852      	ldr	r0, [pc, #328]	@ (3400fe54 <HAL_DCMIPP_SetIPPlugConfig+0x168>)
3400fd0a:	f00f fc79 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_DPREG_END(pIPPlugConfig->DPREGEnd));
3400fd0e:	6963      	ldr	r3, [r4, #20]
3400fd10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400fd14:	d304      	bcc.n	3400fd20 <HAL_DCMIPP_SetIPPlugConfig+0x34>
3400fd16:	f240 413f 	movw	r1, #1087	@ 0x43f
3400fd1a:	484e      	ldr	r0, [pc, #312]	@ (3400fe54 <HAL_DCMIPP_SetIPPlugConfig+0x168>)
3400fd1c:	f00f fc70 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_DPREG_START(pIPPlugConfig->DPREGStart));
3400fd20:	6923      	ldr	r3, [r4, #16]
3400fd22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3400fd26:	d304      	bcc.n	3400fd32 <HAL_DCMIPP_SetIPPlugConfig+0x46>
3400fd28:	f44f 6188 	mov.w	r1, #1088	@ 0x440
3400fd2c:	4849      	ldr	r0, [pc, #292]	@ (3400fe54 <HAL_DCMIPP_SetIPPlugConfig+0x168>)
3400fd2e:	f00f fc67 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_MAX_OUTSTANDING_TRANSACTIONS(pIPPlugConfig->MaxOutstandingTransactions));
3400fd32:	68e3      	ldr	r3, [r4, #12]
3400fd34:	2b0f      	cmp	r3, #15
3400fd36:	d904      	bls.n	3400fd42 <HAL_DCMIPP_SetIPPlugConfig+0x56>
3400fd38:	f240 4141 	movw	r1, #1089	@ 0x441
3400fd3c:	4845      	ldr	r0, [pc, #276]	@ (3400fe54 <HAL_DCMIPP_SetIPPlugConfig+0x168>)
3400fd3e:	f00f fc5f 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_MEMORY_PAGE_SIZE(pIPPlugConfig->MemoryPageSize));
3400fd42:	6863      	ldr	r3, [r4, #4]
3400fd44:	2b07      	cmp	r3, #7
3400fd46:	d904      	bls.n	3400fd52 <HAL_DCMIPP_SetIPPlugConfig+0x66>
3400fd48:	f240 4142 	movw	r1, #1090	@ 0x442
3400fd4c:	4841      	ldr	r0, [pc, #260]	@ (3400fe54 <HAL_DCMIPP_SetIPPlugConfig+0x168>)
3400fd4e:	f00f fc57 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_TRAFFIC(pIPPlugConfig->Traffic));
3400fd52:	68a3      	ldr	r3, [r4, #8]
3400fd54:	2b04      	cmp	r3, #4
3400fd56:	d904      	bls.n	3400fd62 <HAL_DCMIPP_SetIPPlugConfig+0x76>
3400fd58:	f240 4143 	movw	r1, #1091	@ 0x443
3400fd5c:	483d      	ldr	r0, [pc, #244]	@ (3400fe54 <HAL_DCMIPP_SetIPPlugConfig+0x168>)
3400fd5e:	f00f fc4f 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_WLRU_RATIO(pIPPlugConfig->WLRURatio));
3400fd62:	69a3      	ldr	r3, [r4, #24]
3400fd64:	2b0f      	cmp	r3, #15
3400fd66:	d904      	bls.n	3400fd72 <HAL_DCMIPP_SetIPPlugConfig+0x86>
3400fd68:	f240 4144 	movw	r1, #1092	@ 0x444
3400fd6c:	4839      	ldr	r0, [pc, #228]	@ (3400fe54 <HAL_DCMIPP_SetIPPlugConfig+0x168>)
3400fd6e:	f00f fc47 	bl	3401f600 <assert_failed>
  if (hdcmipp->State != HAL_DCMIPP_STATE_RESET)
3400fd72:	792b      	ldrb	r3, [r5, #4]
3400fd74:	2b00      	cmp	r3, #0
3400fd76:	d0bd      	beq.n	3400fcf4 <HAL_DCMIPP_SetIPPlugConfig+0x8>
    SET_BIT(hdcmipp->Instance->IPGR2, DCMIPP_IPGR2_PSTART);
3400fd78:	682a      	ldr	r2, [r5, #0]
3400fd7a:	6853      	ldr	r3, [r2, #4]
3400fd7c:	f043 0301 	orr.w	r3, r3, #1
3400fd80:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
3400fd82:	f00f f8ab 	bl	3401eedc <HAL_GetTick>
3400fd86:	4606      	mov	r6, r0
      if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
3400fd88:	f00f f8a8 	bl	3401eedc <HAL_GetTick>
3400fd8c:	1b80      	subs	r0, r0, r6
3400fd8e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
3400fd92:	d8af      	bhi.n	3400fcf4 <HAL_DCMIPP_SetIPPlugConfig+0x8>
    } while ((hdcmipp->Instance->IPGR3 & DCMIPP_IPGR3_IDLE) != DCMIPP_IPGR3_IDLE);
3400fd94:	682b      	ldr	r3, [r5, #0]
3400fd96:	689a      	ldr	r2, [r3, #8]
3400fd98:	07d2      	lsls	r2, r2, #31
3400fd9a:	d5f5      	bpl.n	3400fd88 <HAL_DCMIPP_SetIPPlugConfig+0x9c>
  hdcmipp->Instance->IPGR1 = (pIPPlugConfig->MemoryPageSize);
3400fd9c:	6862      	ldr	r2, [r4, #4]
3400fd9e:	601a      	str	r2, [r3, #0]
  switch (pIPPlugConfig->Client)
3400fda0:	6822      	ldr	r2, [r4, #0]
3400fda2:	3a01      	subs	r2, #1
3400fda4:	2a04      	cmp	r2, #4
3400fda6:	d811      	bhi.n	3400fdcc <HAL_DCMIPP_SetIPPlugConfig+0xe0>
3400fda8:	e8df f002 	tbb	[pc, r2]
3400fdac:	382a1c03 	.word	0x382a1c03
3400fdb0:	46          	.byte	0x46
3400fdb1:	00          	.byte	0x00
      hdcmipp->Instance->IPC1R1 = (pIPPlugConfig->Traffic |
3400fdb2:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
3400fdb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
3400fdba:	621a      	str	r2, [r3, #32]
      hdcmipp->Instance->IPC1R2 = (pIPPlugConfig->WLRURatio << DCMIPP_IPC1R2_WLRU_Pos);
3400fdbc:	69a2      	ldr	r2, [r4, #24]
3400fdbe:	0412      	lsls	r2, r2, #16
3400fdc0:	625a      	str	r2, [r3, #36]	@ 0x24
      hdcmipp->Instance->IPC1R3 = ((pIPPlugConfig->DPREGStart << DCMIPP_IPC1R3_DPREGSTART_Pos) |
3400fdc2:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
3400fdc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
3400fdca:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(hdcmipp->Instance->IPGR2, DCMIPP_IPGR2_PSTART);
3400fdcc:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;
3400fdce:	2000      	movs	r0, #0
  CLEAR_BIT(hdcmipp->Instance->IPGR2, DCMIPP_IPGR2_PSTART);
3400fdd0:	f022 0201 	bic.w	r2, r2, #1
3400fdd4:	605a      	str	r2, [r3, #4]
  __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
3400fdd6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400fdda:	f042 0220 	orr.w	r2, r2, #32
3400fdde:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
  return HAL_OK;
3400fde2:	e788      	b.n	3400fcf6 <HAL_DCMIPP_SetIPPlugConfig+0xa>
      hdcmipp->Instance->IPC2R1 = (pIPPlugConfig->Traffic |
3400fde4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
3400fde8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
3400fdec:	631a      	str	r2, [r3, #48]	@ 0x30
      hdcmipp->Instance->IPC2R2 = (pIPPlugConfig->WLRURatio << DCMIPP_IPC2R2_WLRU_Pos);
3400fdee:	69a2      	ldr	r2, [r4, #24]
3400fdf0:	0412      	lsls	r2, r2, #16
3400fdf2:	635a      	str	r2, [r3, #52]	@ 0x34
      hdcmipp->Instance->IPC2R3 = ((pIPPlugConfig->DPREGStart << DCMIPP_IPC2R3_DPREGSTART_Pos) |
3400fdf4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
3400fdf8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
3400fdfc:	639a      	str	r2, [r3, #56]	@ 0x38
      break;
3400fdfe:	e7e5      	b.n	3400fdcc <HAL_DCMIPP_SetIPPlugConfig+0xe0>
      hdcmipp->Instance->IPC3R1 = (pIPPlugConfig->Traffic |
3400fe00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
3400fe04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
3400fe08:	641a      	str	r2, [r3, #64]	@ 0x40
      hdcmipp->Instance->IPC3R2 = (pIPPlugConfig->WLRURatio << DCMIPP_IPC3R2_WLRU_Pos);
3400fe0a:	69a2      	ldr	r2, [r4, #24]
3400fe0c:	0412      	lsls	r2, r2, #16
3400fe0e:	645a      	str	r2, [r3, #68]	@ 0x44
      hdcmipp->Instance->IPC3R3 = ((pIPPlugConfig->DPREGStart << DCMIPP_IPC3R3_DPREGSTART_Pos) |
3400fe10:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
3400fe14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
3400fe18:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
3400fe1a:	e7d7      	b.n	3400fdcc <HAL_DCMIPP_SetIPPlugConfig+0xe0>
      hdcmipp->Instance->IPC4R1 = (pIPPlugConfig->Traffic |
3400fe1c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
3400fe20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
3400fe24:	651a      	str	r2, [r3, #80]	@ 0x50
      hdcmipp->Instance->IPC4R2 = (pIPPlugConfig->WLRURatio << DCMIPP_IPC4R2_WLRU_Pos);
3400fe26:	69a2      	ldr	r2, [r4, #24]
3400fe28:	0412      	lsls	r2, r2, #16
3400fe2a:	655a      	str	r2, [r3, #84]	@ 0x54
      hdcmipp->Instance->IPC4R3 = ((pIPPlugConfig->DPREGStart << DCMIPP_IPC4R3_DPREGSTART_Pos) |
3400fe2c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
3400fe30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
3400fe34:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
3400fe36:	e7c9      	b.n	3400fdcc <HAL_DCMIPP_SetIPPlugConfig+0xe0>
      hdcmipp->Instance->IPC5R1 = (pIPPlugConfig->Traffic |
3400fe38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
3400fe3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
3400fe40:	661a      	str	r2, [r3, #96]	@ 0x60
      hdcmipp->Instance->IPC5R2 = (pIPPlugConfig->WLRURatio << DCMIPP_IPC5R2_WLRU_Pos);
3400fe42:	69a2      	ldr	r2, [r4, #24]
3400fe44:	0412      	lsls	r2, r2, #16
3400fe46:	665a      	str	r2, [r3, #100]	@ 0x64
      hdcmipp->Instance->IPC5R3 = ((pIPPlugConfig->DPREGStart << DCMIPP_IPC5R3_DPREGSTART_Pos) |
3400fe48:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
3400fe4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
3400fe50:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
3400fe52:	e7bb      	b.n	3400fdcc <HAL_DCMIPP_SetIPPlugConfig+0xe0>
3400fe54:	3402f13d 	.word	0x3402f13d

3400fe58 <HAL_DCMIPP_CSI_PIPE_Start>:
{
3400fe58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
3400fe5c:	2902      	cmp	r1, #2
{
3400fe5e:	4604      	mov	r4, r0
3400fe60:	460d      	mov	r5, r1
3400fe62:	4616      	mov	r6, r2
3400fe64:	461f      	mov	r7, r3
3400fe66:	f8dd 8018 	ldr.w	r8, [sp, #24]
  assert_param(IS_DCMIPP_PIPE(Pipe));
3400fe6a:	d904      	bls.n	3400fe76 <HAL_DCMIPP_CSI_PIPE_Start+0x1e>
3400fe6c:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
3400fe70:	481a      	ldr	r0, [pc, #104]	@ (3400fedc <HAL_DCMIPP_CSI_PIPE_Start+0x84>)
3400fe72:	f00f fbc5 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
3400fe76:	2e03      	cmp	r6, #3
3400fe78:	d904      	bls.n	3400fe84 <HAL_DCMIPP_CSI_PIPE_Start+0x2c>
3400fe7a:	f240 6111 	movw	r1, #1553	@ 0x611
3400fe7e:	4817      	ldr	r0, [pc, #92]	@ (3400fedc <HAL_DCMIPP_CSI_PIPE_Start+0x84>)
3400fe80:	f00f fbbe 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_CAPTURE_MODE(CaptureMode));
3400fe84:	f038 0304 	bics.w	r3, r8, #4
3400fe88:	d004      	beq.n	3400fe94 <HAL_DCMIPP_CSI_PIPE_Start+0x3c>
3400fe8a:	f240 6112 	movw	r1, #1554	@ 0x612
3400fe8e:	4813      	ldr	r0, [pc, #76]	@ (3400fedc <HAL_DCMIPP_CSI_PIPE_Start+0x84>)
3400fe90:	f00f fbb6 	bl	3401f600 <assert_failed>
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
3400fe94:	b91c      	cbnz	r4, 3400fe9e <HAL_DCMIPP_CSI_PIPE_Start+0x46>
    return HAL_ERROR;
3400fe96:	2601      	movs	r6, #1
}
3400fe98:	4630      	mov	r0, r6
3400fe9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
3400fe9e:	073a      	lsls	r2, r7, #28
3400fea0:	d1f9      	bne.n	3400fe96 <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
  mode = READ_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
3400fea2:	6823      	ldr	r3, [r4, #0]
  if ((hdcmipp->PipeState[Pipe] != HAL_DCMIPP_PIPE_STATE_READY) || (mode != DCMIPP_SERIAL_MODE))
3400fea4:	1962      	adds	r2, r4, r5
  mode = READ_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
3400fea6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
  if ((hdcmipp->PipeState[Pipe] != HAL_DCMIPP_PIPE_STATE_READY) || (mode != DCMIPP_SERIAL_MODE))
3400feaa:	7952      	ldrb	r2, [r2, #5]
3400feac:	2a01      	cmp	r2, #1
3400feae:	d1f2      	bne.n	3400fe96 <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
3400feb0:	07db      	lsls	r3, r3, #31
3400feb2:	d5f0      	bpl.n	3400fe96 <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
  if (DCMIPP_CSI_SetVCConfig(hdcmipp, Pipe, VirtualChannel) != HAL_OK)
3400feb4:	4632      	mov	r2, r6
3400feb6:	4629      	mov	r1, r5
3400feb8:	4620      	mov	r0, r4
3400feba:	f7ff fbaf 	bl	3400f61c <DCMIPP_CSI_SetVCConfig>
3400febe:	4606      	mov	r6, r0
3400fec0:	2800      	cmp	r0, #0
3400fec2:	d1e8      	bne.n	3400fe96 <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
  DCMIPP_SetConfig(hdcmipp, Pipe, DstAddress, CaptureMode);
3400fec4:	4629      	mov	r1, r5
3400fec6:	4620      	mov	r0, r4
3400fec8:	4643      	mov	r3, r8
3400feca:	463a      	mov	r2, r7
3400fecc:	f7ff fc21 	bl	3400f712 <DCMIPP_SetConfig>
  DCMIPP_EnableCapture(hdcmipp, Pipe);
3400fed0:	4629      	mov	r1, r5
3400fed2:	4620      	mov	r0, r4
3400fed4:	f7ff fc48 	bl	3400f768 <DCMIPP_EnableCapture>
  return HAL_OK;
3400fed8:	e7de      	b.n	3400fe98 <HAL_DCMIPP_CSI_PIPE_Start+0x40>
3400feda:	bf00      	nop
3400fedc:	3402f13d 	.word	0x3402f13d

3400fee0 <HAL_DCMIPP_PIPE_LineEventCallback>:
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
3400fee0:	4770      	bx	lr

3400fee2 <HAL_DCMIPP_PIPE_LimitEventCallback>:
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
3400fee2:	4770      	bx	lr

3400fee4 <HAL_DCMIPP_PIPE_ErrorCallback>:
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
3400fee4:	4770      	bx	lr

3400fee6 <HAL_DCMIPP_ErrorCallback>:
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
3400fee6:	4770      	bx	lr

3400fee8 <HAL_DCMIPP_IRQHandler>:
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
3400fee8:	6803      	ldr	r3, [r0, #0]
{
3400feea:	b570      	push	{r4, r5, r6, lr}
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
3400feec:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	@ 0x3f8
{
3400fef0:	4604      	mov	r4, r0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
3400fef2:	0472      	lsls	r2, r6, #17
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
3400fef4:	f8d3 53f0 	ldr.w	r5, [r3, #1008]	@ 0x3f0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
3400fef8:	d512      	bpl.n	3400ff20 <HAL_DCMIPP_IRQHandler+0x38>
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
3400fefa:	0469      	lsls	r1, r5, #17
3400fefc:	d510      	bpl.n	3400ff20 <HAL_DCMIPP_IRQHandler+0x38>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
3400fefe:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
3400ff02:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
3400ff04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
3400ff08:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
3400ff0c:	6882      	ldr	r2, [r0, #8]
3400ff0e:	f042 0204 	orr.w	r2, r2, #4
3400ff12:	6082      	str	r2, [r0, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
3400ff14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3400ff18:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
3400ff1c:	f7ff ffe1 	bl	3400fee2 <HAL_DCMIPP_PIPE_LimitEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
3400ff20:	0572      	lsls	r2, r6, #21
3400ff22:	d50a      	bpl.n	3400ff3a <HAL_DCMIPP_IRQHandler+0x52>
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
3400ff24:	056b      	lsls	r3, r5, #21
3400ff26:	d508      	bpl.n	3400ff3a <HAL_DCMIPP_IRQHandler+0x52>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
3400ff28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3400ff2c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
3400ff2e:	2100      	movs	r1, #0
3400ff30:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
3400ff32:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
3400ff36:	f7f7 f9b3 	bl	340072a0 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
3400ff3a:	05b0      	lsls	r0, r6, #22
3400ff3c:	d516      	bpl.n	3400ff6c <HAL_DCMIPP_IRQHandler+0x84>
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
3400ff3e:	05a9      	lsls	r1, r5, #22
3400ff40:	d514      	bpl.n	3400ff6c <HAL_DCMIPP_IRQHandler+0x84>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400ff42:	6823      	ldr	r3, [r4, #0]
3400ff44:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
3400ff48:	0752      	lsls	r2, r2, #29
3400ff4a:	d507      	bpl.n	3400ff5c <HAL_DCMIPP_IRQHandler+0x74>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
3400ff4c:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3400ff50:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
3400ff54:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
3400ff58:	2201      	movs	r2, #1
3400ff5a:	7162      	strb	r2, [r4, #5]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
3400ff5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
3400ff60:	2100      	movs	r1, #0
3400ff62:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
3400ff64:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
3400ff68:	f7f7 f9aa 	bl	340072c0 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
3400ff6c:	05f3      	lsls	r3, r6, #23
3400ff6e:	d50a      	bpl.n	3400ff86 <HAL_DCMIPP_IRQHandler+0x9e>
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
3400ff70:	05e8      	lsls	r0, r5, #23
3400ff72:	d508      	bpl.n	3400ff86 <HAL_DCMIPP_IRQHandler+0x9e>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
3400ff74:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400ff78:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
3400ff7a:	2100      	movs	r1, #0
3400ff7c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
3400ff7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
3400ff82:	f7ff ffad 	bl	3400fee0 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
3400ff86:	0431      	lsls	r1, r6, #16
3400ff88:	d516      	bpl.n	3400ffb8 <HAL_DCMIPP_IRQHandler+0xd0>
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
3400ff8a:	042a      	lsls	r2, r5, #16
3400ff8c:	d514      	bpl.n	3400ffb8 <HAL_DCMIPP_IRQHandler+0xd0>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400ff8e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3400ff90:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400ff92:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3400ff96:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3400ff98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3400ff9c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
3400ffa0:	68a2      	ldr	r2, [r4, #8]
3400ffa2:	f042 0208 	orr.w	r2, r2, #8
3400ffa6:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
3400ffa8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3400ffac:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
3400ffb0:	2304      	movs	r3, #4
3400ffb2:	7163      	strb	r3, [r4, #5]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3400ffb4:	f7ff ff96 	bl	3400fee4 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
3400ffb8:	03f3      	lsls	r3, r6, #15
3400ffba:	d50a      	bpl.n	3400ffd2 <HAL_DCMIPP_IRQHandler+0xea>
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
3400ffbc:	03e8      	lsls	r0, r5, #15
3400ffbe:	d508      	bpl.n	3400ffd2 <HAL_DCMIPP_IRQHandler+0xea>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
3400ffc0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3400ffc4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
3400ffc6:	2101      	movs	r1, #1
3400ffc8:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
3400ffca:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
3400ffce:	f7ff ff87 	bl	3400fee0 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
3400ffd2:	0371      	lsls	r1, r6, #13
3400ffd4:	d50a      	bpl.n	3400ffec <HAL_DCMIPP_IRQHandler+0x104>
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
3400ffd6:	036a      	lsls	r2, r5, #13
3400ffd8:	d508      	bpl.n	3400ffec <HAL_DCMIPP_IRQHandler+0x104>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
3400ffda:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3400ffde:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
3400ffe0:	2101      	movs	r1, #1
3400ffe2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
3400ffe4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
3400ffe8:	f7f7 f95a 	bl	340072a0 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
3400ffec:	03b3      	lsls	r3, r6, #14
3400ffee:	d516      	bpl.n	3401001e <HAL_DCMIPP_IRQHandler+0x136>
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
3400fff0:	03a8      	lsls	r0, r5, #14
3400fff2:	d514      	bpl.n	3401001e <HAL_DCMIPP_IRQHandler+0x136>
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3400fff4:	6823      	ldr	r3, [r4, #0]
3400fff6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
3400fffa:	0751      	lsls	r1, r2, #29
3400fffc:	d507      	bpl.n	3401000e <HAL_DCMIPP_IRQHandler+0x126>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
3400fffe:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34010002:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34010006:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
3401000a:	2201      	movs	r2, #1
3401000c:	71a2      	strb	r2, [r4, #6]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
3401000e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34010012:	2101      	movs	r1, #1
34010014:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34010016:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
3401001a:	f7f7 f951 	bl	340072c0 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
3401001e:	0232      	lsls	r2, r6, #8
34010020:	d516      	bpl.n	34010050 <HAL_DCMIPP_IRQHandler+0x168>
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
34010022:	022b      	lsls	r3, r5, #8
34010024:	d514      	bpl.n	34010050 <HAL_DCMIPP_IRQHandler+0x168>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34010026:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34010028:	2101      	movs	r1, #1
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
3401002a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
3401002e:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34010030:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
34010034:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
34010038:	68a2      	ldr	r2, [r4, #8]
3401003a:	f042 0210 	orr.w	r2, r2, #16
3401003e:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
34010040:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
34010044:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34010048:	2304      	movs	r3, #4
3401004a:	71a3      	strb	r3, [r4, #6]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
3401004c:	f7ff ff4a 	bl	3400fee4 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34010050:	01f0      	lsls	r0, r6, #7
34010052:	d50a      	bpl.n	3401006a <HAL_DCMIPP_IRQHandler+0x182>
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
34010054:	01e9      	lsls	r1, r5, #7
34010056:	d508      	bpl.n	3401006a <HAL_DCMIPP_IRQHandler+0x182>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34010058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3401005c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
3401005e:	2102      	movs	r1, #2
34010060:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34010062:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34010066:	f7ff ff3b 	bl	3400fee0 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
3401006a:	0172      	lsls	r2, r6, #5
3401006c:	d50a      	bpl.n	34010084 <HAL_DCMIPP_IRQHandler+0x19c>
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
3401006e:	016b      	lsls	r3, r5, #5
34010070:	d508      	bpl.n	34010084 <HAL_DCMIPP_IRQHandler+0x19c>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34010072:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34010076:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34010078:	2102      	movs	r1, #2
3401007a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
3401007c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34010080:	f7f7 f90e 	bl	340072a0 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
34010084:	01b0      	lsls	r0, r6, #6
34010086:	d516      	bpl.n	340100b6 <HAL_DCMIPP_IRQHandler+0x1ce>
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34010088:	01a9      	lsls	r1, r5, #6
3401008a:	d514      	bpl.n	340100b6 <HAL_DCMIPP_IRQHandler+0x1ce>
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401008c:	6823      	ldr	r3, [r4, #0]
3401008e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
34010092:	0752      	lsls	r2, r2, #29
34010094:	d507      	bpl.n	340100a6 <HAL_DCMIPP_IRQHandler+0x1be>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
34010096:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
3401009a:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
3401009e:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
340100a2:	2201      	movs	r2, #1
340100a4:	71e2      	strb	r2, [r4, #7]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
340100a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
340100aa:	2102      	movs	r1, #2
340100ac:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
340100ae:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
340100b2:	f7f7 f905 	bl	340072c0 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
340100b6:	2e00      	cmp	r6, #0
340100b8:	da16      	bge.n	340100e8 <HAL_DCMIPP_IRQHandler+0x200>
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
340100ba:	2d00      	cmp	r5, #0
340100bc:	da14      	bge.n	340100e8 <HAL_DCMIPP_IRQHandler+0x200>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
340100be:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
340100c0:	2102      	movs	r1, #2
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
340100c2:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
340100c6:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
340100c8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
340100cc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
340100d0:	68a2      	ldr	r2, [r4, #8]
340100d2:	f042 0220 	orr.w	r2, r2, #32
340100d6:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
340100d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
340100dc:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
340100e0:	2304      	movs	r3, #4
340100e2:	71e3      	strb	r3, [r4, #7]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
340100e4:	f7ff fefe 	bl	3400fee4 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
340100e8:	0670      	lsls	r0, r6, #25
340100ea:	d514      	bpl.n	34010116 <HAL_DCMIPP_IRQHandler+0x22e>
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
340100ec:	0669      	lsls	r1, r5, #25
340100ee:	d512      	bpl.n	34010116 <HAL_DCMIPP_IRQHandler+0x22e>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
340100f0:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340100f2:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
340100f4:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340100f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
340100fc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34010100:	68a2      	ldr	r2, [r4, #8]
34010102:	f042 0202 	orr.w	r2, r2, #2
34010106:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
34010108:	2240      	movs	r2, #64	@ 0x40
3401010a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3401010e:	2304      	movs	r3, #4
34010110:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010112:	f7ff fee8 	bl	3400fee6 <HAL_DCMIPP_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
34010116:	06b2      	lsls	r2, r6, #26
34010118:	d514      	bpl.n	34010144 <HAL_DCMIPP_IRQHandler+0x25c>
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
3401011a:	06ab      	lsls	r3, r5, #26
3401011c:	d512      	bpl.n	34010144 <HAL_DCMIPP_IRQHandler+0x25c>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
3401011e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010120:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34010122:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34010126:	f022 0220 	bic.w	r2, r2, #32
3401012a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
3401012e:	68a2      	ldr	r2, [r4, #8]
34010130:	f042 0201 	orr.w	r2, r2, #1
34010134:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
34010136:	2220      	movs	r2, #32
34010138:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3401013c:	2304      	movs	r3, #4
3401013e:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010140:	f7ff fed1 	bl	3400fee6 <HAL_DCMIPP_ErrorCallback>
}
34010144:	bd70      	pop	{r4, r5, r6, pc}

34010146 <HAL_DCMIPP_CSI_LineErrorCallback>:
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
34010146:	4770      	bx	lr

34010148 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34010148:	4770      	bx	lr

3401014a <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
3401014a:	4770      	bx	lr

3401014c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
3401014c:	4770      	bx	lr

3401014e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
3401014e:	4770      	bx	lr

34010150 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
34010150:	4770      	bx	lr

34010152 <HAL_DCMIPP_CSI_LineByteEventCallback>:
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
34010152:	4770      	bx	lr

34010154 <HAL_DCMIPP_CSI_IRQHandler>:
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34010154:	4bb5      	ldr	r3, [pc, #724]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
{
34010156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
3401015a:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
{
3401015e:	4604      	mov	r4, r0
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34010160:	02b2      	lsls	r2, r6, #10
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
34010162:	f8d3 8094 	ldr.w	r8, [r3, #148]	@ 0x94
  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
34010166:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
3401016a:	f8d3 7084 	ldr.w	r7, [r3, #132]	@ 0x84
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
3401016e:	d50d      	bpl.n	3401018c <HAL_DCMIPP_CSI_IRQHandler+0x38>
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
34010170:	02a9      	lsls	r1, r5, #10
34010172:	d50b      	bpl.n	3401018c <HAL_DCMIPP_CSI_IRQHandler+0x38>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
34010174:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010178:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
3401017c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34010180:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34010184:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34010188:	f7ff ffde 	bl	34010148 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
3401018c:	0732      	lsls	r2, r6, #28
3401018e:	d515      	bpl.n	340101bc <HAL_DCMIPP_CSI_IRQHandler+0x68>
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34010190:	072b      	lsls	r3, r5, #28
34010192:	d513      	bpl.n	340101bc <HAL_DCMIPP_CSI_IRQHandler+0x68>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010194:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34010196:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010198:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
3401019c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401019e:	f013 0f04 	tst.w	r3, #4
340101a2:	4ba2      	ldr	r3, [pc, #648]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
340101a4:	bf1e      	ittt	ne
340101a6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340101aa:	f022 0208 	bicne.w	r2, r2, #8
340101ae:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
340101b2:	2208      	movs	r2, #8
340101b4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
340101b8:	f7ff ffcb 	bl	34010152 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
340101bc:	0770      	lsls	r0, r6, #29
340101be:	d515      	bpl.n	340101ec <HAL_DCMIPP_CSI_IRQHandler+0x98>
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
340101c0:	0769      	lsls	r1, r5, #29
340101c2:	d513      	bpl.n	340101ec <HAL_DCMIPP_CSI_IRQHandler+0x98>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340101c4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
340101c6:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340101c8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
340101cc:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340101ce:	f013 0f04 	tst.w	r3, #4
340101d2:	4b96      	ldr	r3, [pc, #600]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
340101d4:	bf1e      	ittt	ne
340101d6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340101da:	f022 0204 	bicne.w	r2, r2, #4
340101de:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
340101e2:	2204      	movs	r2, #4
340101e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
340101e8:	f7ff ffb3 	bl	34010152 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
340101ec:	07b2      	lsls	r2, r6, #30
340101ee:	d515      	bpl.n	3401021c <HAL_DCMIPP_CSI_IRQHandler+0xc8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
340101f0:	07ab      	lsls	r3, r5, #30
340101f2:	d513      	bpl.n	3401021c <HAL_DCMIPP_CSI_IRQHandler+0xc8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340101f4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340101f6:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340101f8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340101fc:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340101fe:	f013 0f04 	tst.w	r3, #4
34010202:	4b8a      	ldr	r3, [pc, #552]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
34010204:	bf1e      	ittt	ne
34010206:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401020a:	f022 0202 	bicne.w	r2, r2, #2
3401020e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
34010212:	2202      	movs	r2, #2
34010214:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34010218:	f7ff ff9b 	bl	34010152 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
3401021c:	07f0      	lsls	r0, r6, #31
3401021e:	d515      	bpl.n	3401024c <HAL_DCMIPP_CSI_IRQHandler+0xf8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
34010220:	07e9      	lsls	r1, r5, #31
34010222:	d513      	bpl.n	3401024c <HAL_DCMIPP_CSI_IRQHandler+0xf8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010224:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34010226:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010228:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
3401022c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401022e:	f013 0f04 	tst.w	r3, #4
34010232:	4b7e      	ldr	r3, [pc, #504]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34010234:	bf1e      	ittt	ne
34010236:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401023a:	f022 0201 	bicne.w	r2, r2, #1
3401023e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
34010242:	2201      	movs	r2, #1
34010244:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34010248:	f7ff ff83 	bl	34010152 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
3401024c:	0432      	lsls	r2, r6, #16
3401024e:	d516      	bpl.n	3401027e <HAL_DCMIPP_CSI_IRQHandler+0x12a>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34010250:	042b      	lsls	r3, r5, #16
34010252:	d514      	bpl.n	3401027e <HAL_DCMIPP_CSI_IRQHandler+0x12a>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010254:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34010256:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010258:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3401025c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401025e:	f013 0f04 	tst.w	r3, #4
34010262:	4b72      	ldr	r3, [pc, #456]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
34010264:	bf1e      	ittt	ne
34010266:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401026a:	f422 4200 	bicne.w	r2, r2, #32768	@ 0x8000
3401026e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
34010272:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34010276:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3401027a:	f7ff ff67 	bl	3401014c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
3401027e:	0470      	lsls	r0, r6, #17
34010280:	d516      	bpl.n	340102b0 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
34010282:	0469      	lsls	r1, r5, #17
34010284:	d514      	bpl.n	340102b0 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010286:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34010288:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401028a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
3401028e:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010290:	f013 0f04 	tst.w	r3, #4
34010294:	4b65      	ldr	r3, [pc, #404]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
34010296:	bf1e      	ittt	ne
34010298:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401029c:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
340102a0:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
340102a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340102a8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340102ac:	f7ff ff4e 	bl	3401014c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
340102b0:	04b2      	lsls	r2, r6, #18
340102b2:	d516      	bpl.n	340102e2 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
340102b4:	04ab      	lsls	r3, r5, #18
340102b6:	d514      	bpl.n	340102e2 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340102b8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340102ba:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340102bc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340102c0:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340102c2:	f013 0f04 	tst.w	r3, #4
340102c6:	4b59      	ldr	r3, [pc, #356]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
340102c8:	bf1e      	ittt	ne
340102ca:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340102ce:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
340102d2:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
340102d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340102da:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340102de:	f7ff ff35 	bl	3401014c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
340102e2:	04f0      	lsls	r0, r6, #19
340102e4:	d516      	bpl.n	34010314 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
340102e6:	04e9      	lsls	r1, r5, #19
340102e8:	d514      	bpl.n	34010314 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340102ea:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340102ec:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340102ee:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340102f2:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340102f4:	f013 0f04 	tst.w	r3, #4
340102f8:	4b4c      	ldr	r3, [pc, #304]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
340102fa:	bf1e      	ittt	ne
340102fc:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010300:	f422 5280 	bicne.w	r2, r2, #4096	@ 0x1000
34010304:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34010308:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3401030c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34010310:	f7ff ff1c 	bl	3401014c <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34010314:	0532      	lsls	r2, r6, #20
34010316:	d516      	bpl.n	34010346 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34010318:	052b      	lsls	r3, r5, #20
3401031a:	d514      	bpl.n	34010346 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401031c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3401031e:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010320:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34010324:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010326:	f013 0f04 	tst.w	r3, #4
3401032a:	4b40      	ldr	r3, [pc, #256]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
3401032c:	bf1e      	ittt	ne
3401032e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010332:	f422 6200 	bicne.w	r2, r2, #2048	@ 0x800
34010336:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
3401033a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401033e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34010342:	f7ff ff04 	bl	3401014e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
34010346:	0570      	lsls	r0, r6, #21
34010348:	d516      	bpl.n	34010378 <HAL_DCMIPP_CSI_IRQHandler+0x224>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
3401034a:	0569      	lsls	r1, r5, #21
3401034c:	d514      	bpl.n	34010378 <HAL_DCMIPP_CSI_IRQHandler+0x224>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401034e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34010350:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010352:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34010356:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010358:	f013 0f04 	tst.w	r3, #4
3401035c:	4b33      	ldr	r3, [pc, #204]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
3401035e:	bf1e      	ittt	ne
34010360:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010364:	f422 6280 	bicne.w	r2, r2, #1024	@ 0x400
34010368:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
3401036c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34010370:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34010374:	f7ff feeb 	bl	3401014e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34010378:	05b2      	lsls	r2, r6, #22
3401037a:	d516      	bpl.n	340103aa <HAL_DCMIPP_CSI_IRQHandler+0x256>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
3401037c:	05ab      	lsls	r3, r5, #22
3401037e:	d514      	bpl.n	340103aa <HAL_DCMIPP_CSI_IRQHandler+0x256>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010380:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34010382:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010384:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34010388:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401038a:	f013 0f04 	tst.w	r3, #4
3401038e:	4b27      	ldr	r3, [pc, #156]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34010390:	bf1e      	ittt	ne
34010392:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010396:	f422 7200 	bicne.w	r2, r2, #512	@ 0x200
3401039a:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
3401039e:	f44f 7200 	mov.w	r2, #512	@ 0x200
340103a2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340103a6:	f7ff fed2 	bl	3401014e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
340103aa:	05f0      	lsls	r0, r6, #23
340103ac:	d516      	bpl.n	340103dc <HAL_DCMIPP_CSI_IRQHandler+0x288>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
340103ae:	05e9      	lsls	r1, r5, #23
340103b0:	d514      	bpl.n	340103dc <HAL_DCMIPP_CSI_IRQHandler+0x288>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103b2:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340103b4:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103b6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340103ba:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103bc:	f013 0f04 	tst.w	r3, #4
340103c0:	4b1a      	ldr	r3, [pc, #104]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
340103c2:	bf1e      	ittt	ne
340103c4:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340103c8:	f422 7280 	bicne.w	r2, r2, #256	@ 0x100
340103cc:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
340103d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
340103d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340103d8:	f7ff feb9 	bl	3401014e <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
340103dc:	0632      	lsls	r2, r6, #24
340103de:	d515      	bpl.n	3401040c <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
340103e0:	062b      	lsls	r3, r5, #24
340103e2:	d513      	bpl.n	3401040c <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103e4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
340103e6:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103e8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
340103ec:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103ee:	f013 0f04 	tst.w	r3, #4
340103f2:	4b0e      	ldr	r3, [pc, #56]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
340103f4:	bf1e      	ittt	ne
340103f6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340103fa:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
340103fe:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34010402:	2280      	movs	r2, #128	@ 0x80
34010404:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34010408:	f7ff fea2 	bl	34010150 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
3401040c:	0670      	lsls	r0, r6, #25
3401040e:	d519      	bpl.n	34010444 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34010410:	0669      	lsls	r1, r5, #25
34010412:	d517      	bpl.n	34010444 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010414:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34010416:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010418:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
3401041c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401041e:	f013 0f04 	tst.w	r3, #4
34010422:	4b02      	ldr	r3, [pc, #8]	@ (3401042c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34010424:	bf18      	it	ne
34010426:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401042a:	e001      	b.n	34010430 <HAL_DCMIPP_CSI_IRQHandler+0x2dc>
3401042c:	58006000 	.word	0x58006000
34010430:	bf1c      	itt	ne
34010432:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
34010436:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
3401043a:	2240      	movs	r2, #64	@ 0x40
3401043c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34010440:	f7ff fe86 	bl	34010150 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
34010444:	06b2      	lsls	r2, r6, #26
34010446:	d515      	bpl.n	34010474 <HAL_DCMIPP_CSI_IRQHandler+0x320>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34010448:	06ab      	lsls	r3, r5, #26
3401044a:	d513      	bpl.n	34010474 <HAL_DCMIPP_CSI_IRQHandler+0x320>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401044c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
3401044e:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010450:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34010454:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010456:	f013 0f04 	tst.w	r3, #4
3401045a:	4bb9      	ldr	r3, [pc, #740]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
3401045c:	bf1e      	ittt	ne
3401045e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010462:	f022 0220 	bicne.w	r2, r2, #32
34010466:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
3401046a:	2220      	movs	r2, #32
3401046c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34010470:	f7ff fe6e 	bl	34010150 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
34010474:	06f0      	lsls	r0, r6, #27
34010476:	d515      	bpl.n	340104a4 <HAL_DCMIPP_CSI_IRQHandler+0x350>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34010478:	06e9      	lsls	r1, r5, #27
3401047a:	d513      	bpl.n	340104a4 <HAL_DCMIPP_CSI_IRQHandler+0x350>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401047c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
3401047e:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010480:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34010484:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010486:	f013 0f04 	tst.w	r3, #4
3401048a:	4bad      	ldr	r3, [pc, #692]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
3401048c:	bf1e      	ittt	ne
3401048e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010492:	f022 0210 	bicne.w	r2, r2, #16
34010496:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
3401049a:	2210      	movs	r2, #16
3401049c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
340104a0:	f7ff fe56 	bl	34010150 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
340104a4:	0072      	lsls	r2, r6, #1
340104a6:	d513      	bpl.n	340104d0 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
340104a8:	006b      	lsls	r3, r5, #1
340104aa:	d511      	bpl.n	340104d0 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
340104ac:	4ba4      	ldr	r3, [pc, #656]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340104ae:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
340104b0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340104b4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
340104b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
340104bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
340104c0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
340104c4:	68a3      	ldr	r3, [r4, #8]
340104c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
340104ca:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340104cc:	f7ff fd0b 	bl	3400fee6 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
340104d0:	00b0      	lsls	r0, r6, #2
340104d2:	d513      	bpl.n	340104fc <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
340104d4:	00a9      	lsls	r1, r5, #2
340104d6:	d511      	bpl.n	340104fc <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
340104d8:	4b99      	ldr	r3, [pc, #612]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340104da:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
340104dc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340104e0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
340104e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
340104e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
340104ec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
340104f0:	68a3      	ldr	r3, [r4, #8]
340104f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
340104f6:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340104f8:	f7ff fcf5 	bl	3400fee6 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
340104fc:	00f2      	lsls	r2, r6, #3
340104fe:	d513      	bpl.n	34010528 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34010500:	00eb      	lsls	r3, r5, #3
34010502:	d511      	bpl.n	34010528 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34010504:	4b8e      	ldr	r3, [pc, #568]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010506:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34010508:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3401050c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
34010510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34010514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34010518:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
3401051c:	68a3      	ldr	r3, [r4, #8]
3401051e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
34010522:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010524:	f7ff fcdf 	bl	3400fee6 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34010528:	0130      	lsls	r0, r6, #4
3401052a:	d513      	bpl.n	34010554 <HAL_DCMIPP_CSI_IRQHandler+0x400>
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
3401052c:	0129      	lsls	r1, r5, #4
3401052e:	d511      	bpl.n	34010554 <HAL_DCMIPP_CSI_IRQHandler+0x400>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34010530:	4b83      	ldr	r3, [pc, #524]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010532:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34010534:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010538:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
3401053c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34010540:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34010544:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34010548:	68a3      	ldr	r3, [r4, #8]
3401054a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
3401054e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010550:	f7ff fcc9 	bl	3400fee6 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34010554:	0172      	lsls	r2, r6, #5
34010556:	d513      	bpl.n	34010580 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34010558:	016b      	lsls	r3, r5, #5
3401055a:	d511      	bpl.n	34010580 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
3401055c:	4b78      	ldr	r3, [pc, #480]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3401055e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34010560:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010564:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
34010568:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
3401056c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34010570:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34010574:	68a3      	ldr	r3, [r4, #8]
34010576:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3401057a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3401057c:	f7ff fcb3 	bl	3400fee6 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34010580:	01b0      	lsls	r0, r6, #6
34010582:	d513      	bpl.n	340105ac <HAL_DCMIPP_CSI_IRQHandler+0x458>
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34010584:	01a9      	lsls	r1, r5, #6
34010586:	d511      	bpl.n	340105ac <HAL_DCMIPP_CSI_IRQHandler+0x458>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34010588:	4b6d      	ldr	r3, [pc, #436]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3401058a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
3401058c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010590:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
34010594:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34010598:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
3401059c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
340105a0:	68a3      	ldr	r3, [r4, #8]
340105a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
340105a6:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340105a8:	f7ff fc9d 	bl	3400fee6 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
340105ac:	01f2      	lsls	r2, r6, #7
340105ae:	d513      	bpl.n	340105d8 <HAL_DCMIPP_CSI_IRQHandler+0x484>
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
340105b0:	01eb      	lsls	r3, r5, #7
340105b2:	d511      	bpl.n	340105d8 <HAL_DCMIPP_CSI_IRQHandler+0x484>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
340105b4:	4b62      	ldr	r3, [pc, #392]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340105b6:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
340105b8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340105bc:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
340105c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
340105c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340105c8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
340105cc:	68a3      	ldr	r3, [r4, #8]
340105ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
340105d2:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340105d4:	f7ff fc87 	bl	3400fee6 <HAL_DCMIPP_ErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
340105d8:	f018 0f01 	tst.w	r8, #1
340105dc:	d014      	beq.n	34010608 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
340105de:	07f8      	lsls	r0, r7, #31
340105e0:	d512      	bpl.n	34010608 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
340105e2:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
340105e4:	4b56      	ldr	r3, [pc, #344]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340105e6:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
340105e8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340105ec:	f022 0201 	bic.w	r2, r2, #1
340105f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
340105f4:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
340105f8:	68a3      	ldr	r3, [r4, #8]
340105fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
340105fe:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34010600:	2304      	movs	r3, #4
34010602:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010604:	f7ff fd9f 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34010608:	f018 0f02 	tst.w	r8, #2
3401060c:	d015      	beq.n	3401063a <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
3401060e:	07b9      	lsls	r1, r7, #30
34010610:	d513      	bpl.n	3401063a <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34010612:	4b4b      	ldr	r3, [pc, #300]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010614:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34010616:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3401061a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
3401061c:	f022 0202 	bic.w	r2, r2, #2
34010620:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34010624:	2202      	movs	r2, #2
34010626:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
3401062a:	68a3      	ldr	r3, [r4, #8]
3401062c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34010630:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34010632:	2304      	movs	r3, #4
34010634:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010636:	f7ff fd86 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
3401063a:	f018 0f04 	tst.w	r8, #4
3401063e:	d013      	beq.n	34010668 <HAL_DCMIPP_CSI_IRQHandler+0x514>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34010640:	077a      	lsls	r2, r7, #29
34010642:	d511      	bpl.n	34010668 <HAL_DCMIPP_CSI_IRQHandler+0x514>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34010644:	4b3e      	ldr	r3, [pc, #248]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010646:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34010648:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3401064c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
3401064e:	f022 0204 	bic.w	r2, r2, #4
34010652:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34010656:	2204      	movs	r2, #4
34010658:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
3401065c:	68a3      	ldr	r3, [r4, #8]
3401065e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34010662:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010664:	f7ff fd6f 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34010668:	f018 0f08 	tst.w	r8, #8
3401066c:	d013      	beq.n	34010696 <HAL_DCMIPP_CSI_IRQHandler+0x542>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
3401066e:	073b      	lsls	r3, r7, #28
34010670:	d511      	bpl.n	34010696 <HAL_DCMIPP_CSI_IRQHandler+0x542>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34010672:	4b33      	ldr	r3, [pc, #204]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010674:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34010676:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3401067a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
3401067c:	f022 0208 	bic.w	r2, r2, #8
34010680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34010684:	2208      	movs	r2, #8
34010686:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
3401068a:	68a3      	ldr	r3, [r4, #8]
3401068c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34010690:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010692:	f7ff fd58 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34010696:	f018 0f10 	tst.w	r8, #16
3401069a:	d013      	beq.n	340106c4 <HAL_DCMIPP_CSI_IRQHandler+0x570>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
3401069c:	06f8      	lsls	r0, r7, #27
3401069e:	d511      	bpl.n	340106c4 <HAL_DCMIPP_CSI_IRQHandler+0x570>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
340106a0:	4b27      	ldr	r3, [pc, #156]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340106a2:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
340106a4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340106a8:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
340106aa:	f022 0210 	bic.w	r2, r2, #16
340106ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
340106b2:	2210      	movs	r2, #16
340106b4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340106b8:	68a3      	ldr	r3, [r4, #8]
340106ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340106be:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340106c0:	f7ff fd41 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
340106c4:	f418 7f80 	tst.w	r8, #256	@ 0x100
340106c8:	d016      	beq.n	340106f8 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
340106ca:	05f9      	lsls	r1, r7, #23
340106cc:	d514      	bpl.n	340106f8 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340106ce:	4b1c      	ldr	r3, [pc, #112]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340106d0:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340106d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340106d6:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340106d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
340106dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
340106e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
340106e4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
340106e8:	68a3      	ldr	r3, [r4, #8]
340106ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
340106ee:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340106f0:	2304      	movs	r3, #4
340106f2:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340106f4:	f7ff fd27 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
340106f8:	f418 7f00 	tst.w	r8, #512	@ 0x200
340106fc:	d016      	beq.n	3401072c <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
340106fe:	05ba      	lsls	r2, r7, #22
34010700:	d514      	bpl.n	3401072c <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34010702:	4b0f      	ldr	r3, [pc, #60]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010704:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34010706:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3401070a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
3401070c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34010710:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34010714:	f44f 7200 	mov.w	r2, #512	@ 0x200
34010718:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
3401071c:	68a3      	ldr	r3, [r4, #8]
3401071e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34010722:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34010724:	2304      	movs	r3, #4
34010726:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010728:	f7ff fd0d 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
3401072c:	f418 6f80 	tst.w	r8, #1024	@ 0x400
34010730:	d017      	beq.n	34010762 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34010732:	057b      	lsls	r3, r7, #21
34010734:	d515      	bpl.n	34010762 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34010736:	4b02      	ldr	r3, [pc, #8]	@ (34010740 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010738:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3401073a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3401073e:	e001      	b.n	34010744 <HAL_DCMIPP_CSI_IRQHandler+0x5f0>
34010740:	58006000 	.word	0x58006000
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010744:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34010746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
3401074a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
3401074e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34010752:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34010756:	68a3      	ldr	r3, [r4, #8]
34010758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
3401075c:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3401075e:	f7ff fcf2 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34010762:	f418 6f00 	tst.w	r8, #2048	@ 0x800
34010766:	d014      	beq.n	34010792 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34010768:	0538      	lsls	r0, r7, #20
3401076a:	d512      	bpl.n	34010792 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
3401076c:	4b1f      	ldr	r3, [pc, #124]	@ (340107ec <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3401076e:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34010770:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010774:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34010776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
3401077a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
3401077e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34010782:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34010786:	68a3      	ldr	r3, [r4, #8]
34010788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3401078c:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3401078e:	f7ff fcda 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34010792:	f418 5f80 	tst.w	r8, #4096	@ 0x1000
34010796:	d014      	beq.n	340107c2 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34010798:	04f9      	lsls	r1, r7, #19
3401079a:	d512      	bpl.n	340107c2 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
3401079c:	4b13      	ldr	r3, [pc, #76]	@ (340107ec <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3401079e:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340107a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340107a4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340107a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
340107aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
340107ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340107b2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
340107b6:	68a3      	ldr	r3, [r4, #8]
340107b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340107bc:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340107be:	f7ff fcc2 	bl	34010146 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
340107c2:	03f2      	lsls	r2, r6, #15
340107c4:	d50f      	bpl.n	340107e6 <HAL_DCMIPP_CSI_IRQHandler+0x692>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
340107c6:	03eb      	lsls	r3, r5, #15
340107c8:	d50d      	bpl.n	340107e6 <HAL_DCMIPP_CSI_IRQHandler+0x692>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340107ca:	4b08      	ldr	r3, [pc, #32]	@ (340107ec <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340107cc:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340107ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340107d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
340107d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
340107da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340107de:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340107e2:	f7ff fcb2 	bl	3401014a <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
}
340107e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340107ea:	bf00      	nop
340107ec:	58006000 	.word	0x58006000

340107f0 <HAL_DCMIPP_PIPE_SetCropConfig>:
{
340107f0:	b570      	push	{r4, r5, r6, lr}
340107f2:	460e      	mov	r6, r1
340107f4:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pCropConfig == NULL))
340107f6:	4605      	mov	r5, r0
340107f8:	b908      	cbnz	r0, 340107fe <HAL_DCMIPP_PIPE_SetCropConfig+0xe>
    return HAL_ERROR;
340107fa:	2001      	movs	r0, #1
}
340107fc:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pCropConfig == NULL))
340107fe:	2a00      	cmp	r2, #0
34010800:	d0fb      	beq.n	340107fa <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010802:	2902      	cmp	r1, #2
34010804:	d904      	bls.n	34010810 <HAL_DCMIPP_PIPE_SetCropConfig+0x20>
34010806:	f640 61ef 	movw	r1, #3823	@ 0xeef
3401080a:	484a      	ldr	r0, [pc, #296]	@ (34010934 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
3401080c:	f00e fef8 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_AREA(pCropConfig->PipeArea));
34010810:	6923      	ldr	r3, [r4, #16]
34010812:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
34010816:	d004      	beq.n	34010822 <HAL_DCMIPP_PIPE_SetCropConfig+0x32>
34010818:	f44f 616f 	mov.w	r1, #3824	@ 0xef0
3401081c:	4845      	ldr	r0, [pc, #276]	@ (34010934 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
3401081e:	f00e feef 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_HSTART(pCropConfig->HStart));
34010822:	6863      	ldr	r3, [r4, #4]
34010824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34010828:	d304      	bcc.n	34010834 <HAL_DCMIPP_PIPE_SetCropConfig+0x44>
3401082a:	f640 61f1 	movw	r1, #3825	@ 0xef1
3401082e:	4841      	ldr	r0, [pc, #260]	@ (34010934 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34010830:	f00e fee6 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_HSIZE(pCropConfig->HSize));
34010834:	f640 72fe 	movw	r2, #4094	@ 0xffe
34010838:	68e3      	ldr	r3, [r4, #12]
3401083a:	3b01      	subs	r3, #1
3401083c:	4293      	cmp	r3, r2
3401083e:	d904      	bls.n	3401084a <HAL_DCMIPP_PIPE_SetCropConfig+0x5a>
34010840:	f640 61f2 	movw	r1, #3826	@ 0xef2
34010844:	483b      	ldr	r0, [pc, #236]	@ (34010934 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34010846:	f00e fedb 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_VSIZE(pCropConfig->VSize));
3401084a:	f640 72fe 	movw	r2, #4094	@ 0xffe
3401084e:	68a3      	ldr	r3, [r4, #8]
34010850:	3b01      	subs	r3, #1
34010852:	4293      	cmp	r3, r2
34010854:	d904      	bls.n	34010860 <HAL_DCMIPP_PIPE_SetCropConfig+0x70>
34010856:	f640 61f3 	movw	r1, #3827	@ 0xef3
3401085a:	4836      	ldr	r0, [pc, #216]	@ (34010934 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
3401085c:	f00e fed0 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_VSTART(pCropConfig->VStart));
34010860:	6823      	ldr	r3, [r4, #0]
34010862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34010866:	d304      	bcc.n	34010872 <HAL_DCMIPP_PIPE_SetCropConfig+0x82>
34010868:	f640 61f4 	movw	r1, #3828	@ 0xef4
3401086c:	4831      	ldr	r0, [pc, #196]	@ (34010934 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
3401086e:	f00e fec7 	bl	3401f600 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010872:	792b      	ldrb	r3, [r5, #4]
34010874:	2b02      	cmp	r3, #2
34010876:	d1c0      	bne.n	340107fa <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
    if (Pipe == DCMIPP_PIPE0)
34010878:	bb3e      	cbnz	r6, 340108ca <HAL_DCMIPP_PIPE_SetCropConfig+0xda>
      tmp = READ_REG(hdcmipp->Instance->PRCR);
3401087a:	682a      	ldr	r2, [r5, #0]
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
3401087c:	4b2e      	ldr	r3, [pc, #184]	@ (34010938 <HAL_DCMIPP_PIPE_SetCropConfig+0x148>)
      tmp = READ_REG(hdcmipp->Instance->PRCR);
3401087e:	f8d2 1104 	ldr.w	r1, [r2, #260]	@ 0x104
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34010882:	400b      	ands	r3, r1
34010884:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34010888:	d0b7      	beq.n	340107fa <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
        MODIFY_REG(hdcmipp->Instance->P0SCSTR, DCMIPP_P0SCSTR_HSTART | DCMIPP_P0SCSTR_VSTART,
3401088a:	e9d4 0300 	ldrd	r0, r3, [r4]
3401088e:	f8d2 1504 	ldr.w	r1, [r2, #1284]	@ 0x504
34010892:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34010896:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
3401089a:	430b      	orrs	r3, r1
3401089c:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
        MODIFY_REG(hdcmipp->Instance->P0SCSZR, DCMIPP_P0SCSZR_HSIZE | DCMIPP_P0SCSZR_VSIZE | DCMIPP_P0SCSZR_POSNEG,
340108a0:	f8d2 1508 	ldr.w	r1, [r2, #1288]	@ 0x508
340108a4:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
340108a8:	f021 419f 	bic.w	r1, r1, #1333788672	@ 0x4f800000
340108ac:	4303      	orrs	r3, r0
340108ae:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
340108b2:	68a0      	ldr	r0, [r4, #8]
340108b4:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
340108b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
340108bc:	f021 010f 	bic.w	r1, r1, #15
340108c0:	430b      	orrs	r3, r1
340108c2:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  return HAL_OK;
340108c6:	2000      	movs	r0, #0
340108c8:	e798      	b.n	340107fc <HAL_DCMIPP_PIPE_SetCropConfig+0xc>
    else if (Pipe == DCMIPP_PIPE1)
340108ca:	2e01      	cmp	r6, #1
340108cc:	d117      	bne.n	340108fe <HAL_DCMIPP_PIPE_SetCropConfig+0x10e>
      MODIFY_REG(hdcmipp->Instance->P1CRSTR, DCMIPP_P1CRSTR_HSTART | DCMIPP_P1CRSTR_VSTART,
340108ce:	e9d4 0300 	ldrd	r0, r3, [r4]
340108d2:	682a      	ldr	r2, [r5, #0]
340108d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
340108d8:	f8d2 1904 	ldr.w	r1, [r2, #2308]	@ 0x904
340108dc:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
340108e0:	430b      	orrs	r3, r1
340108e2:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
      MODIFY_REG(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_HSIZE | DCMIPP_P1CRSZR_VSIZE,
340108e6:	f8d2 1908 	ldr.w	r1, [r2, #2312]	@ 0x908
340108ea:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
340108ee:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
340108f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
340108f6:	430b      	orrs	r3, r1
340108f8:	f8c2 3908 	str.w	r3, [r2, #2312]	@ 0x908
340108fc:	e7e3      	b.n	340108c6 <HAL_DCMIPP_PIPE_SetCropConfig+0xd6>
    else if (Pipe == DCMIPP_PIPE2)
340108fe:	2e02      	cmp	r6, #2
34010900:	f47f af7b 	bne.w	340107fa <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
      MODIFY_REG(hdcmipp->Instance->P2CRSTR, DCMIPP_P2CRSTR_HSTART | DCMIPP_P2CRSTR_VSTART,
34010904:	e9d4 0300 	ldrd	r0, r3, [r4]
34010908:	682a      	ldr	r2, [r5, #0]
3401090a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401090e:	f8d2 1d04 	ldr.w	r1, [r2, #3332]	@ 0xd04
34010912:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010916:	430b      	orrs	r3, r1
34010918:	f8c2 3d04 	str.w	r3, [r2, #3332]	@ 0xd04
      MODIFY_REG(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_HSIZE | DCMIPP_P2CRSZR_VSIZE,
3401091c:	f8d2 1d08 	ldr.w	r1, [r2, #3336]	@ 0xd08
34010920:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
34010924:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010928:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401092c:	430b      	orrs	r3, r1
3401092e:	f8c2 3d08 	str.w	r3, [r2, #3336]	@ 0xd08
34010932:	e7c8      	b.n	340108c6 <HAL_DCMIPP_PIPE_SetCropConfig+0xd6>
34010934:	3402f13d 	.word	0x3402f13d
34010938:	00ff4000 	.word	0x00ff4000

3401093c <HAL_DCMIPP_PIPE_EnableCrop>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401093c:	2902      	cmp	r1, #2
{
3401093e:	b538      	push	{r3, r4, r5, lr}
34010940:	4605      	mov	r5, r0
34010942:	460c      	mov	r4, r1
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010944:	d904      	bls.n	34010950 <HAL_DCMIPP_PIPE_EnableCrop+0x14>
34010946:	f640 713f 	movw	r1, #3903	@ 0xf3f
3401094a:	481a      	ldr	r0, [pc, #104]	@ (340109b4 <HAL_DCMIPP_PIPE_EnableCrop+0x78>)
3401094c:	f00e fe58 	bl	3401f600 <assert_failed>
  if (hdcmipp == NULL)
34010950:	b36d      	cbz	r5, 340109ae <HAL_DCMIPP_PIPE_EnableCrop+0x72>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010952:	792b      	ldrb	r3, [r5, #4]
34010954:	2b02      	cmp	r3, #2
34010956:	d12a      	bne.n	340109ae <HAL_DCMIPP_PIPE_EnableCrop+0x72>
    if (Pipe == DCMIPP_PIPE0)
34010958:	b97c      	cbnz	r4, 3401097a <HAL_DCMIPP_PIPE_EnableCrop+0x3e>
      tmp = READ_REG(hdcmipp->Instance->PRCR);
3401095a:	682b      	ldr	r3, [r5, #0]
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
3401095c:	4a16      	ldr	r2, [pc, #88]	@ (340109b8 <HAL_DCMIPP_PIPE_EnableCrop+0x7c>)
      tmp = READ_REG(hdcmipp->Instance->PRCR);
3401095e:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34010962:	400a      	ands	r2, r1
34010964:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
34010968:	d021      	beq.n	340109ae <HAL_DCMIPP_PIPE_EnableCrop+0x72>
        SET_BIT(hdcmipp->Instance->P0SCSZR, DCMIPP_P0SCSZR_ENABLE);
3401096a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
3401096e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34010972:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  return HAL_OK;
34010976:	2000      	movs	r0, #0
}
34010978:	bd38      	pop	{r3, r4, r5, pc}
    else if (Pipe == DCMIPP_PIPE1)
3401097a:	2c01      	cmp	r4, #1
3401097c:	d10d      	bne.n	3401099a <HAL_DCMIPP_PIPE_EnableCrop+0x5e>
      if (hdcmipp->Instance->P1SRCR != DCMIPP_P1SRCR_CROPEN)
3401097e:	682b      	ldr	r3, [r5, #0]
    return HAL_ERROR;
34010980:	4620      	mov	r0, r4
      if (hdcmipp->Instance->P1SRCR != DCMIPP_P1SRCR_CROPEN)
34010982:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
34010986:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
3401098a:	d0f5      	beq.n	34010978 <HAL_DCMIPP_PIPE_EnableCrop+0x3c>
        SET_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
3401098c:	f8d3 2908 	ldr.w	r2, [r3, #2312]	@ 0x908
34010990:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34010994:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
34010998:	e7ed      	b.n	34010976 <HAL_DCMIPP_PIPE_EnableCrop+0x3a>
    else if (Pipe == DCMIPP_PIPE2)
3401099a:	2c02      	cmp	r4, #2
3401099c:	d107      	bne.n	340109ae <HAL_DCMIPP_PIPE_EnableCrop+0x72>
      SET_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
3401099e:	682a      	ldr	r2, [r5, #0]
340109a0:	f8d2 3d08 	ldr.w	r3, [r2, #3336]	@ 0xd08
340109a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
340109a8:	f8c2 3d08 	str.w	r3, [r2, #3336]	@ 0xd08
340109ac:	e7e3      	b.n	34010976 <HAL_DCMIPP_PIPE_EnableCrop+0x3a>
    return HAL_ERROR;
340109ae:	2001      	movs	r0, #1
340109b0:	e7e2      	b.n	34010978 <HAL_DCMIPP_PIPE_EnableCrop+0x3c>
340109b2:	bf00      	nop
340109b4:	3402f13d 	.word	0x3402f13d
340109b8:	00ff4000 	.word	0x00ff4000

340109bc <HAL_DCMIPP_PIPE_DisableCrop>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
340109bc:	2902      	cmp	r1, #2
{
340109be:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
340109c0:	d906      	bls.n	340109d0 <HAL_DCMIPP_PIPE_DisableCrop+0x14>
340109c2:	f640 717e 	movw	r1, #3966	@ 0xf7e
340109c6:	4810      	ldr	r0, [pc, #64]	@ (34010a08 <HAL_DCMIPP_PIPE_DisableCrop+0x4c>)
340109c8:	f00e fe1a 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
340109cc:	2001      	movs	r0, #1
340109ce:	e00a      	b.n	340109e6 <HAL_DCMIPP_PIPE_DisableCrop+0x2a>
  if (hdcmipp == NULL)
340109d0:	2800      	cmp	r0, #0
340109d2:	d0fb      	beq.n	340109cc <HAL_DCMIPP_PIPE_DisableCrop+0x10>
  if (Pipe == DCMIPP_PIPE0)
340109d4:	6803      	ldr	r3, [r0, #0]
340109d6:	b939      	cbnz	r1, 340109e8 <HAL_DCMIPP_PIPE_DisableCrop+0x2c>
    CLEAR_BIT(hdcmipp->Instance->P0SCSZR, DCMIPP_P0SCSZR_ENABLE);
340109d8:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
340109dc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
340109e0:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  return HAL_OK;
340109e4:	2000      	movs	r0, #0
}
340109e6:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE1)
340109e8:	2901      	cmp	r1, #1
    CLEAR_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
340109ea:	bf0b      	itete	eq
340109ec:	f8d3 2908 	ldreq.w	r2, [r3, #2312]	@ 0x908
    CLEAR_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
340109f0:	f8d3 2d08 	ldrne.w	r2, [r3, #3336]	@ 0xd08
    CLEAR_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
340109f4:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
    CLEAR_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
340109f8:	f022 4200 	bicne.w	r2, r2, #2147483648	@ 0x80000000
    CLEAR_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
340109fc:	bf0c      	ite	eq
340109fe:	f8c3 2908 	streq.w	r2, [r3, #2312]	@ 0x908
    CLEAR_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
34010a02:	f8c3 2d08 	strne.w	r2, [r3, #3336]	@ 0xd08
34010a06:	e7ed      	b.n	340109e4 <HAL_DCMIPP_PIPE_DisableCrop+0x28>
34010a08:	3402f13d 	.word	0x3402f13d

34010a0c <HAL_DCMIPP_PIPE_SetISPDecimationConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010a0c:	2902      	cmp	r1, #2
{
34010a0e:	b570      	push	{r4, r5, r6, lr}
34010a10:	4605      	mov	r5, r0
34010a12:	460e      	mov	r6, r1
34010a14:	4614      	mov	r4, r2
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010a16:	d904      	bls.n	34010a22 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x16>
34010a18:	f241 0152 	movw	r1, #4178	@ 0x1052
34010a1c:	4818      	ldr	r0, [pc, #96]	@ (34010a80 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x74>)
34010a1e:	f00e fdef 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_VRATIO(pDecConfig->VRatio));
34010a22:	6822      	ldr	r2, [r4, #0]
34010a24:	b152      	cbz	r2, 34010a3c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x30>
34010a26:	2a18      	cmp	r2, #24
34010a28:	d803      	bhi.n	34010a32 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x26>
34010a2a:	4b16      	ldr	r3, [pc, #88]	@ (34010a84 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x78>)
34010a2c:	40d3      	lsrs	r3, r2
34010a2e:	07da      	lsls	r2, r3, #31
34010a30:	d404      	bmi.n	34010a3c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x30>
34010a32:	f241 0153 	movw	r1, #4179	@ 0x1053
34010a36:	4812      	ldr	r0, [pc, #72]	@ (34010a80 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x74>)
34010a38:	f00e fde2 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_HRATIO(pDecConfig->HRatio));
34010a3c:	6862      	ldr	r2, [r4, #4]
34010a3e:	b152      	cbz	r2, 34010a56 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x4a>
34010a40:	2a06      	cmp	r2, #6
34010a42:	d803      	bhi.n	34010a4c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x40>
34010a44:	2354      	movs	r3, #84	@ 0x54
34010a46:	40d3      	lsrs	r3, r2
34010a48:	07db      	lsls	r3, r3, #31
34010a4a:	d404      	bmi.n	34010a56 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x4a>
34010a4c:	f241 0154 	movw	r1, #4180	@ 0x1054
34010a50:	480b      	ldr	r0, [pc, #44]	@ (34010a80 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x74>)
34010a52:	f00e fdd5 	bl	3401f600 <assert_failed>
  if ((hdcmipp == NULL) || (pDecConfig == NULL))
34010a56:	b18d      	cbz	r5, 34010a7c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x70>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010a58:	792b      	ldrb	r3, [r5, #4]
34010a5a:	2b02      	cmp	r3, #2
34010a5c:	d10e      	bne.n	34010a7c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x70>
    if (Pipe == DCMIPP_PIPE1)
34010a5e:	2e01      	cmp	r6, #1
34010a60:	d10c      	bne.n	34010a7c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x70>
      MODIFY_REG(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_VDEC | DCMIPP_P1DECR_HDEC,
34010a62:	e9d4 3000 	ldrd	r3, r0, [r4]
34010a66:	4303      	orrs	r3, r0
  return HAL_OK;
34010a68:	2000      	movs	r0, #0
      MODIFY_REG(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_VDEC | DCMIPP_P1DECR_HDEC,
34010a6a:	6829      	ldr	r1, [r5, #0]
34010a6c:	f8d1 2830 	ldr.w	r2, [r1, #2096]	@ 0x830
34010a70:	f022 021e 	bic.w	r2, r2, #30
34010a74:	4313      	orrs	r3, r2
34010a76:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830
}
34010a7a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
34010a7c:	2001      	movs	r0, #1
34010a7e:	e7fc      	b.n	34010a7a <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x6e>
34010a80:	3402f13d 	.word	0x3402f13d
34010a84:	01010100 	.word	0x01010100

34010a88 <HAL_DCMIPP_PIPE_EnableISPDecimation>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010a88:	2902      	cmp	r1, #2
{
34010a8a:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010a8c:	d906      	bls.n	34010a9c <HAL_DCMIPP_PIPE_EnableISPDecimation+0x14>
34010a8e:	f241 017a 	movw	r1, #4218	@ 0x107a
34010a92:	4809      	ldr	r0, [pc, #36]	@ (34010ab8 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x30>)
34010a94:	f00e fdb4 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34010a98:	2001      	movs	r0, #1
}
34010a9a:	bd08      	pop	{r3, pc}
  if (hdcmipp == NULL)
34010a9c:	2800      	cmp	r0, #0
34010a9e:	d0fb      	beq.n	34010a98 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x10>
  if (Pipe == DCMIPP_PIPE1)
34010aa0:	2901      	cmp	r1, #1
34010aa2:	d1f9      	bne.n	34010a98 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x10>
    SET_BIT(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_ENABLE);
34010aa4:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34010aa6:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_ENABLE);
34010aa8:	f8d2 3830 	ldr.w	r3, [r2, #2096]	@ 0x830
34010aac:	f043 0301 	orr.w	r3, r3, #1
34010ab0:	f8c2 3830 	str.w	r3, [r2, #2096]	@ 0x830
  return HAL_OK;
34010ab4:	e7f1      	b.n	34010a9a <HAL_DCMIPP_PIPE_EnableISPDecimation+0x12>
34010ab6:	bf00      	nop
34010ab8:	3402f13d 	.word	0x3402f13d

34010abc <HAL_DCMIPP_PIPE_SetDecimationConfig>:
{
34010abc:	b570      	push	{r4, r5, r6, lr}
34010abe:	460e      	mov	r6, r1
34010ac0:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
34010ac2:	4605      	mov	r5, r0
34010ac4:	b908      	cbnz	r0, 34010aca <HAL_DCMIPP_PIPE_SetDecimationConfig+0xe>
    return HAL_ERROR;
34010ac6:	2001      	movs	r0, #1
}
34010ac8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010aca:	2902      	cmp	r1, #2
34010acc:	d904      	bls.n	34010ad8 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x1c>
34010ace:	f241 01bc 	movw	r1, #4284	@ 0x10bc
34010ad2:	481e      	ldr	r0, [pc, #120]	@ (34010b4c <HAL_DCMIPP_PIPE_SetDecimationConfig+0x90>)
34010ad4:	f00e fd94 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_VRATIO(pDecConfig->VRatio));
34010ad8:	6822      	ldr	r2, [r4, #0]
34010ada:	b152      	cbz	r2, 34010af2 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x36>
34010adc:	2a18      	cmp	r2, #24
34010ade:	d803      	bhi.n	34010ae8 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x2c>
34010ae0:	4b1b      	ldr	r3, [pc, #108]	@ (34010b50 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x94>)
34010ae2:	40d3      	lsrs	r3, r2
34010ae4:	07da      	lsls	r2, r3, #31
34010ae6:	d404      	bmi.n	34010af2 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x36>
34010ae8:	f241 01bd 	movw	r1, #4285	@ 0x10bd
34010aec:	4817      	ldr	r0, [pc, #92]	@ (34010b4c <HAL_DCMIPP_PIPE_SetDecimationConfig+0x90>)
34010aee:	f00e fd87 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_HRATIO(pDecConfig->HRatio));
34010af2:	6862      	ldr	r2, [r4, #4]
34010af4:	b152      	cbz	r2, 34010b0c <HAL_DCMIPP_PIPE_SetDecimationConfig+0x50>
34010af6:	2a06      	cmp	r2, #6
34010af8:	d803      	bhi.n	34010b02 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x46>
34010afa:	2354      	movs	r3, #84	@ 0x54
34010afc:	40d3      	lsrs	r3, r2
34010afe:	07db      	lsls	r3, r3, #31
34010b00:	d404      	bmi.n	34010b0c <HAL_DCMIPP_PIPE_SetDecimationConfig+0x50>
34010b02:	f241 01be 	movw	r1, #4286	@ 0x10be
34010b06:	4811      	ldr	r0, [pc, #68]	@ (34010b4c <HAL_DCMIPP_PIPE_SetDecimationConfig+0x90>)
34010b08:	f00e fd7a 	bl	3401f600 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010b0c:	792b      	ldrb	r3, [r5, #4]
34010b0e:	2b02      	cmp	r3, #2
34010b10:	d1d9      	bne.n	34010ac6 <HAL_DCMIPP_PIPE_SetDecimationConfig+0xa>
    if (Pipe == DCMIPP_PIPE1)
34010b12:	2e01      	cmp	r6, #1
34010b14:	d10c      	bne.n	34010b30 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x74>
      MODIFY_REG(hdcmipp->Instance->P1DCCR, DCMIPP_P1DCCR_VDEC | DCMIPP_P1DCCR_HDEC,
34010b16:	e9d4 3000 	ldrd	r3, r0, [r4]
34010b1a:	6829      	ldr	r1, [r5, #0]
34010b1c:	4303      	orrs	r3, r0
34010b1e:	f8d1 290c 	ldr.w	r2, [r1, #2316]	@ 0x90c
34010b22:	f022 021e 	bic.w	r2, r2, #30
34010b26:	4313      	orrs	r3, r2
34010b28:	f8c1 390c 	str.w	r3, [r1, #2316]	@ 0x90c
  return HAL_OK;
34010b2c:	2000      	movs	r0, #0
34010b2e:	e7cb      	b.n	34010ac8 <HAL_DCMIPP_PIPE_SetDecimationConfig+0xc>
    else if (Pipe == DCMIPP_PIPE2)
34010b30:	2e02      	cmp	r6, #2
34010b32:	d1c8      	bne.n	34010ac6 <HAL_DCMIPP_PIPE_SetDecimationConfig+0xa>
      MODIFY_REG(hdcmipp->Instance->P2DCCR, DCMIPP_P2DCCR_VDEC | DCMIPP_P2DCCR_HDEC,
34010b34:	e9d4 3000 	ldrd	r3, r0, [r4]
34010b38:	6829      	ldr	r1, [r5, #0]
34010b3a:	4303      	orrs	r3, r0
34010b3c:	f8d1 2d0c 	ldr.w	r2, [r1, #3340]	@ 0xd0c
34010b40:	f022 021e 	bic.w	r2, r2, #30
34010b44:	4313      	orrs	r3, r2
34010b46:	f8c1 3d0c 	str.w	r3, [r1, #3340]	@ 0xd0c
34010b4a:	e7ef      	b.n	34010b2c <HAL_DCMIPP_PIPE_SetDecimationConfig+0x70>
34010b4c:	3402f13d 	.word	0x3402f13d
34010b50:	01010100 	.word	0x01010100

34010b54 <HAL_DCMIPP_PIPE_EnableDecimation>:
{
34010b54:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010b56:	b130      	cbz	r0, 34010b66 <HAL_DCMIPP_PIPE_EnableDecimation+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010b58:	2902      	cmp	r1, #2
34010b5a:	d906      	bls.n	34010b6a <HAL_DCMIPP_PIPE_EnableDecimation+0x16>
34010b5c:	f241 01e9 	movw	r1, #4329	@ 0x10e9
34010b60:	480c      	ldr	r0, [pc, #48]	@ (34010b94 <HAL_DCMIPP_PIPE_EnableDecimation+0x40>)
34010b62:	f00e fd4d 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34010b66:	2001      	movs	r0, #1
34010b68:	e009      	b.n	34010b7e <HAL_DCMIPP_PIPE_EnableDecimation+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010b6a:	2901      	cmp	r1, #1
34010b6c:	d108      	bne.n	34010b80 <HAL_DCMIPP_PIPE_EnableDecimation+0x2c>
    SET_BIT(hdcmipp->Instance->P1DCCR, DCMIPP_P1DCCR_ENABLE);
34010b6e:	6802      	ldr	r2, [r0, #0]
34010b70:	f8d2 390c 	ldr.w	r3, [r2, #2316]	@ 0x90c
34010b74:	f043 0301 	orr.w	r3, r3, #1
34010b78:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  return HAL_OK;
34010b7c:	2000      	movs	r0, #0
}
34010b7e:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010b80:	2902      	cmp	r1, #2
34010b82:	d1f0      	bne.n	34010b66 <HAL_DCMIPP_PIPE_EnableDecimation+0x12>
    SET_BIT(hdcmipp->Instance->P2DCCR, DCMIPP_P2DCCR_ENABLE);
34010b84:	6802      	ldr	r2, [r0, #0]
34010b86:	f8d2 3d0c 	ldr.w	r3, [r2, #3340]	@ 0xd0c
34010b8a:	f043 0301 	orr.w	r3, r3, #1
34010b8e:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
34010b92:	e7f3      	b.n	34010b7c <HAL_DCMIPP_PIPE_EnableDecimation+0x28>
34010b94:	3402f13d 	.word	0x3402f13d

34010b98 <HAL_DCMIPP_PIPE_DisableDecimation>:
{
34010b98:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010b9a:	b130      	cbz	r0, 34010baa <HAL_DCMIPP_PIPE_DisableDecimation+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010b9c:	2902      	cmp	r1, #2
34010b9e:	d906      	bls.n	34010bae <HAL_DCMIPP_PIPE_DisableDecimation+0x16>
34010ba0:	f241 110a 	movw	r1, #4362	@ 0x110a
34010ba4:	480c      	ldr	r0, [pc, #48]	@ (34010bd8 <HAL_DCMIPP_PIPE_DisableDecimation+0x40>)
34010ba6:	f00e fd2b 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34010baa:	2001      	movs	r0, #1
34010bac:	e009      	b.n	34010bc2 <HAL_DCMIPP_PIPE_DisableDecimation+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010bae:	2901      	cmp	r1, #1
34010bb0:	d108      	bne.n	34010bc4 <HAL_DCMIPP_PIPE_DisableDecimation+0x2c>
    CLEAR_BIT(hdcmipp->Instance->P1DCCR, DCMIPP_P1DCCR_ENABLE);
34010bb2:	6802      	ldr	r2, [r0, #0]
34010bb4:	f8d2 390c 	ldr.w	r3, [r2, #2316]	@ 0x90c
34010bb8:	f023 0301 	bic.w	r3, r3, #1
34010bbc:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  return HAL_OK;
34010bc0:	2000      	movs	r0, #0
}
34010bc2:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010bc4:	2902      	cmp	r1, #2
34010bc6:	d1f0      	bne.n	34010baa <HAL_DCMIPP_PIPE_DisableDecimation+0x12>
    CLEAR_BIT(hdcmipp->Instance->P2DCCR, DCMIPP_P2DCCR_ENABLE);
34010bc8:	6802      	ldr	r2, [r0, #0]
34010bca:	f8d2 3d0c 	ldr.w	r3, [r2, #3340]	@ 0xd0c
34010bce:	f023 0301 	bic.w	r3, r3, #1
34010bd2:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
34010bd6:	e7f3      	b.n	34010bc0 <HAL_DCMIPP_PIPE_DisableDecimation+0x28>
34010bd8:	3402f13d 	.word	0x3402f13d

34010bdc <HAL_DCMIPP_PIPE_SetDownsizeConfig>:
{
34010bdc:	b570      	push	{r4, r5, r6, lr}
34010bde:	460e      	mov	r6, r1
34010be0:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pDownsizeConfig == NULL))
34010be2:	4605      	mov	r5, r0
34010be4:	b908      	cbnz	r0, 34010bea <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xe>
    return HAL_ERROR;
34010be6:	2001      	movs	r0, #1
}
34010be8:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pDownsizeConfig == NULL))
34010bea:	2a00      	cmp	r2, #0
34010bec:	d0fb      	beq.n	34010be6 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010bee:	2902      	cmp	r1, #2
34010bf0:	d904      	bls.n	34010bfc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x20>
34010bf2:	f241 1134 	movw	r1, #4404	@ 0x1134
34010bf6:	483f      	ldr	r0, [pc, #252]	@ (34010cf4 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010bf8:	f00e fd02 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_DIV_FACTOR(pDownsizeConfig->HDivFactor));
34010bfc:	6963      	ldr	r3, [r4, #20]
34010bfe:	3b80      	subs	r3, #128	@ 0x80
34010c00:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
34010c04:	d304      	bcc.n	34010c10 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x34>
34010c06:	f241 1135 	movw	r1, #4405	@ 0x1135
34010c0a:	483a      	ldr	r0, [pc, #232]	@ (34010cf4 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010c0c:	f00e fcf8 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_DIV_FACTOR(pDownsizeConfig->VDivFactor));
34010c10:	6923      	ldr	r3, [r4, #16]
34010c12:	3b80      	subs	r3, #128	@ 0x80
34010c14:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
34010c18:	d304      	bcc.n	34010c24 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x48>
34010c1a:	f241 1136 	movw	r1, #4406	@ 0x1136
34010c1e:	4835      	ldr	r0, [pc, #212]	@ (34010cf4 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010c20:	f00e fcee 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->HRatio));
34010c24:	68e3      	ldr	r3, [r4, #12]
34010c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34010c2a:	d304      	bcc.n	34010c36 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x5a>
34010c2c:	f241 1137 	movw	r1, #4407	@ 0x1137
34010c30:	4830      	ldr	r0, [pc, #192]	@ (34010cf4 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010c32:	f00e fce5 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->VRatio));
34010c36:	68a3      	ldr	r3, [r4, #8]
34010c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34010c3c:	d304      	bcc.n	34010c48 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x6c>
34010c3e:	f241 1138 	movw	r1, #4408	@ 0x1138
34010c42:	482c      	ldr	r0, [pc, #176]	@ (34010cf4 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010c44:	f00e fcdc 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->HSize));
34010c48:	6863      	ldr	r3, [r4, #4]
34010c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34010c4e:	d304      	bcc.n	34010c5a <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x7e>
34010c50:	f241 1139 	movw	r1, #4409	@ 0x1139
34010c54:	4827      	ldr	r0, [pc, #156]	@ (34010cf4 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010c56:	f00e fcd3 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->VSize));
34010c5a:	6823      	ldr	r3, [r4, #0]
34010c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34010c60:	d304      	bcc.n	34010c6c <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x90>
34010c62:	f241 113a 	movw	r1, #4410	@ 0x113a
34010c66:	4823      	ldr	r0, [pc, #140]	@ (34010cf4 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010c68:	f00e fcca 	bl	3401f600 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010c6c:	792b      	ldrb	r3, [r5, #4]
34010c6e:	2b02      	cmp	r3, #2
34010c70:	d1b9      	bne.n	34010be6 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xa>
    if (Pipe == DCMIPP_PIPE1)
34010c72:	2e01      	cmp	r6, #1
34010c74:	d11e      	bne.n	34010cb4 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xd8>
      MODIFY_REG(hdcmipp->Instance->P1DSCR, (DCMIPP_P1DSCR_HDIV | DCMIPP_P1DSCR_VDIV),
34010c76:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
34010c7a:	682b      	ldr	r3, [r5, #0]
34010c7c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34010c80:	f8d3 1910 	ldr.w	r1, [r3, #2320]	@ 0x910
34010c84:	f001 21fc 	and.w	r1, r1, #4227922944	@ 0xfc00fc00
34010c88:	430a      	orrs	r2, r1
34010c8a:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
      WRITE_REG(hdcmipp->Instance->P1DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P1DSRTIOR_HRATIO_Pos) | \
34010c8e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
34010c92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34010c96:	f8c3 2914 	str.w	r2, [r3, #2324]	@ 0x914
      MODIFY_REG(hdcmipp->Instance->P1DSSZR, DCMIPP_P1DSSZR_HSIZE | DCMIPP_P1DSSZR_VSIZE,
34010c9a:	f8d3 1918 	ldr.w	r1, [r3, #2328]	@ 0x918
34010c9e:	e9d4 0200 	ldrd	r0, r2, [r4]
34010ca2:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010ca6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34010caa:	430a      	orrs	r2, r1
34010cac:	f8c3 2918 	str.w	r2, [r3, #2328]	@ 0x918
  return HAL_OK;
34010cb0:	2000      	movs	r0, #0
34010cb2:	e799      	b.n	34010be8 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xc>
    else if (Pipe == DCMIPP_PIPE2)
34010cb4:	2e02      	cmp	r6, #2
34010cb6:	d196      	bne.n	34010be6 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xa>
      MODIFY_REG(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_HDIV | DCMIPP_P2DSCR_VDIV,
34010cb8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
34010cbc:	682b      	ldr	r3, [r5, #0]
34010cbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34010cc2:	f8d3 1d10 	ldr.w	r1, [r3, #3344]	@ 0xd10
34010cc6:	f001 21fc 	and.w	r1, r1, #4227922944	@ 0xfc00fc00
34010cca:	430a      	orrs	r2, r1
34010ccc:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
      WRITE_REG(hdcmipp->Instance->P2DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P2DSRTIOR_HRATIO_Pos) | \
34010cd0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
34010cd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34010cd8:	f8c3 2d14 	str.w	r2, [r3, #3348]	@ 0xd14
      MODIFY_REG(hdcmipp->Instance->P2DSSZR, DCMIPP_P2DSSZR_HSIZE | DCMIPP_P2DSSZR_VSIZE,
34010cdc:	f8d3 1d18 	ldr.w	r1, [r3, #3352]	@ 0xd18
34010ce0:	e9d4 0200 	ldrd	r0, r2, [r4]
34010ce4:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010ce8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34010cec:	430a      	orrs	r2, r1
34010cee:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
34010cf2:	e7dd      	b.n	34010cb0 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xd4>
34010cf4:	3402f13d 	.word	0x3402f13d

34010cf8 <HAL_DCMIPP_PIPE_EnableDownsize>:
{
34010cf8:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010cfa:	b130      	cbz	r0, 34010d0a <HAL_DCMIPP_PIPE_EnableDownsize+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010cfc:	2902      	cmp	r1, #2
34010cfe:	d906      	bls.n	34010d0e <HAL_DCMIPP_PIPE_EnableDownsize+0x16>
34010d00:	f241 117a 	movw	r1, #4474	@ 0x117a
34010d04:	480c      	ldr	r0, [pc, #48]	@ (34010d38 <HAL_DCMIPP_PIPE_EnableDownsize+0x40>)
34010d06:	f00e fc7b 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34010d0a:	2001      	movs	r0, #1
34010d0c:	e009      	b.n	34010d22 <HAL_DCMIPP_PIPE_EnableDownsize+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010d0e:	2901      	cmp	r1, #1
34010d10:	d108      	bne.n	34010d24 <HAL_DCMIPP_PIPE_EnableDownsize+0x2c>
    SET_BIT(hdcmipp->Instance->P1DSCR, DCMIPP_P1DSCR_ENABLE);
34010d12:	6802      	ldr	r2, [r0, #0]
34010d14:	f8d2 3910 	ldr.w	r3, [r2, #2320]	@ 0x910
34010d18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
34010d1c:	f8c2 3910 	str.w	r3, [r2, #2320]	@ 0x910
  return HAL_OK;
34010d20:	2000      	movs	r0, #0
}
34010d22:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010d24:	2902      	cmp	r1, #2
34010d26:	d1f0      	bne.n	34010d0a <HAL_DCMIPP_PIPE_EnableDownsize+0x12>
    SET_BIT(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_ENABLE);
34010d28:	6802      	ldr	r2, [r0, #0]
34010d2a:	f8d2 3d10 	ldr.w	r3, [r2, #3344]	@ 0xd10
34010d2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
34010d32:	f8c2 3d10 	str.w	r3, [r2, #3344]	@ 0xd10
34010d36:	e7f3      	b.n	34010d20 <HAL_DCMIPP_PIPE_EnableDownsize+0x28>
34010d38:	3402f13d 	.word	0x3402f13d

34010d3c <HAL_DCMIPP_PIPE_EnableGammaConversion>:
{
34010d3c:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010d3e:	b130      	cbz	r0, 34010d4e <HAL_DCMIPP_PIPE_EnableGammaConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010d40:	2902      	cmp	r1, #2
34010d42:	d906      	bls.n	34010d52 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x16>
34010d44:	f241 11bc 	movw	r1, #4540	@ 0x11bc
34010d48:	480c      	ldr	r0, [pc, #48]	@ (34010d7c <HAL_DCMIPP_PIPE_EnableGammaConversion+0x40>)
34010d4a:	f00e fc59 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34010d4e:	2001      	movs	r0, #1
34010d50:	e009      	b.n	34010d66 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010d52:	2901      	cmp	r1, #1
34010d54:	d108      	bne.n	34010d68 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x2c>
    SET_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
34010d56:	6802      	ldr	r2, [r0, #0]
34010d58:	f8d2 3970 	ldr.w	r3, [r2, #2416]	@ 0x970
34010d5c:	f043 0301 	orr.w	r3, r3, #1
34010d60:	f8c2 3970 	str.w	r3, [r2, #2416]	@ 0x970
  return HAL_OK;
34010d64:	2000      	movs	r0, #0
}
34010d66:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010d68:	2902      	cmp	r1, #2
34010d6a:	d1f0      	bne.n	34010d4e <HAL_DCMIPP_PIPE_EnableGammaConversion+0x12>
    SET_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
34010d6c:	6802      	ldr	r2, [r0, #0]
34010d6e:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	@ 0xd70
34010d72:	f043 0301 	orr.w	r3, r3, #1
34010d76:	f8c2 3d70 	str.w	r3, [r2, #3440]	@ 0xd70
34010d7a:	e7f3      	b.n	34010d64 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x28>
34010d7c:	3402f13d 	.word	0x3402f13d

34010d80 <HAL_DCMIPP_PIPE_DisableGammaConversion>:
{
34010d80:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010d82:	b130      	cbz	r0, 34010d92 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010d84:	2902      	cmp	r1, #2
34010d86:	d906      	bls.n	34010d96 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x16>
34010d88:	f241 11dd 	movw	r1, #4573	@ 0x11dd
34010d8c:	480c      	ldr	r0, [pc, #48]	@ (34010dc0 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x40>)
34010d8e:	f00e fc37 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34010d92:	2001      	movs	r0, #1
34010d94:	e009      	b.n	34010daa <HAL_DCMIPP_PIPE_DisableGammaConversion+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010d96:	2901      	cmp	r1, #1
34010d98:	d108      	bne.n	34010dac <HAL_DCMIPP_PIPE_DisableGammaConversion+0x2c>
    CLEAR_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
34010d9a:	6802      	ldr	r2, [r0, #0]
34010d9c:	f8d2 3970 	ldr.w	r3, [r2, #2416]	@ 0x970
34010da0:	f023 0301 	bic.w	r3, r3, #1
34010da4:	f8c2 3970 	str.w	r3, [r2, #2416]	@ 0x970
  return HAL_OK;
34010da8:	2000      	movs	r0, #0
}
34010daa:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010dac:	2902      	cmp	r1, #2
34010dae:	d1f0      	bne.n	34010d92 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x12>
    CLEAR_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
34010db0:	6802      	ldr	r2, [r0, #0]
34010db2:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	@ 0xd70
34010db6:	f023 0301 	bic.w	r3, r3, #1
34010dba:	f8c2 3d70 	str.w	r3, [r2, #3440]	@ 0xd70
34010dbe:	e7f3      	b.n	34010da8 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x28>
34010dc0:	3402f13d 	.word	0x3402f13d

34010dc4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>:
{
34010dc4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34010dc6:	4a13      	ldr	r2, [pc, #76]	@ (34010e14 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x50>)
34010dc8:	6803      	ldr	r3, [r0, #0]
{
34010dca:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34010dcc:	4293      	cmp	r3, r2
{
34010dce:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34010dd0:	d008      	beq.n	34010de4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x20>
34010dd2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34010dd6:	4293      	cmp	r3, r2
34010dd8:	d004      	beq.n	34010de4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x20>
34010dda:	f241 11f8 	movw	r1, #4600	@ 0x11f8
34010dde:	480e      	ldr	r0, [pc, #56]	@ (34010e18 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x54>)
34010de0:	f00e fc0e 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010de4:	2d02      	cmp	r5, #2
34010de6:	d906      	bls.n	34010df6 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x32>
34010de8:	f241 11f9 	movw	r1, #4601	@ 0x11f9
34010dec:	480a      	ldr	r0, [pc, #40]	@ (34010e18 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x54>)
34010dee:	f00e fc07 	bl	3401f600 <assert_failed>
    return 0;
34010df2:	2000      	movs	r0, #0
}
34010df4:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34010df6:	2d01      	cmp	r5, #1
34010df8:	d105      	bne.n	34010e06 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x42>
    return ((READ_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE) == DCMIPP_P1GMCR_ENABLE) ? 1U : 0U);
34010dfa:	6823      	ldr	r3, [r4, #0]
34010dfc:	f8d3 0970 	ldr.w	r0, [r3, #2416]	@ 0x970
    return ((READ_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE) == DCMIPP_P2GMCR_ENABLE) ? 1U : 0U);
34010e00:	f000 0001 	and.w	r0, r0, #1
34010e04:	e7f6      	b.n	34010df4 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x30>
  else if (Pipe == DCMIPP_PIPE2)
34010e06:	2d02      	cmp	r5, #2
34010e08:	d1f3      	bne.n	34010df2 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE) == DCMIPP_P2GMCR_ENABLE) ? 1U : 0U);
34010e0a:	6823      	ldr	r3, [r4, #0]
34010e0c:	f8d3 0d70 	ldr.w	r0, [r3, #3440]	@ 0xd70
34010e10:	e7f6      	b.n	34010e00 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x3c>
34010e12:	bf00      	nop
34010e14:	58002000 	.word	0x58002000
34010e18:	3402f13d 	.word	0x3402f13d

34010e1c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>:
{
34010e1c:	b570      	push	{r4, r5, r6, lr}
34010e1e:	460e      	mov	r6, r1
34010e20:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pRawBayer2RGBConfig == NULL))
34010e22:	4605      	mov	r5, r0
34010e24:	b908      	cbnz	r0, 34010e2a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xe>
    return HAL_ERROR;
34010e26:	2001      	movs	r0, #1
}
34010e28:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pRawBayer2RGBConfig == NULL))
34010e2a:	2a00      	cmp	r2, #0
34010e2c:	d0fb      	beq.n	34010e26 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010e2e:	2902      	cmp	r1, #2
34010e30:	d904      	bls.n	34010e3c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x20>
34010e32:	f241 211e 	movw	r1, #4638	@ 0x121e
34010e36:	4824      	ldr	r0, [pc, #144]	@ (34010ec8 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
34010e38:	f00e fbe2 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_RAW_TYPE(pRawBayer2RGBConfig->RawBayerType));
34010e3c:	68a2      	ldr	r2, [r4, #8]
34010e3e:	b152      	cbz	r2, 34010e56 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x3a>
34010e40:	2a06      	cmp	r2, #6
34010e42:	d803      	bhi.n	34010e4c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x30>
34010e44:	2354      	movs	r3, #84	@ 0x54
34010e46:	40d3      	lsrs	r3, r2
34010e48:	07db      	lsls	r3, r3, #31
34010e4a:	d404      	bmi.n	34010e56 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x3a>
34010e4c:	f241 211f 	movw	r1, #4639	@ 0x121f
34010e50:	481d      	ldr	r0, [pc, #116]	@ (34010ec8 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
34010e52:	f00e fbd5 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->PeakStrength));
34010e56:	68e3      	ldr	r3, [r4, #12]
34010e58:	2b07      	cmp	r3, #7
34010e5a:	d904      	bls.n	34010e66 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x4a>
34010e5c:	f44f 5191 	mov.w	r1, #4640	@ 0x1220
34010e60:	4819      	ldr	r0, [pc, #100]	@ (34010ec8 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
34010e62:	f00e fbcd 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->VLineStrength));
34010e66:	6823      	ldr	r3, [r4, #0]
34010e68:	2b07      	cmp	r3, #7
34010e6a:	d904      	bls.n	34010e76 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x5a>
34010e6c:	f241 2121 	movw	r1, #4641	@ 0x1221
34010e70:	4815      	ldr	r0, [pc, #84]	@ (34010ec8 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
34010e72:	f00e fbc5 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->HLineStrength));
34010e76:	6863      	ldr	r3, [r4, #4]
34010e78:	2b07      	cmp	r3, #7
34010e7a:	d904      	bls.n	34010e86 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x6a>
34010e7c:	f241 2122 	movw	r1, #4642	@ 0x1222
34010e80:	4811      	ldr	r0, [pc, #68]	@ (34010ec8 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
34010e82:	f00e fbbd 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->EdgeStrength));
34010e86:	6923      	ldr	r3, [r4, #16]
34010e88:	2b07      	cmp	r3, #7
34010e8a:	d904      	bls.n	34010e96 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x7a>
34010e8c:	f241 2123 	movw	r1, #4643	@ 0x1223
34010e90:	480d      	ldr	r0, [pc, #52]	@ (34010ec8 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
34010e92:	f00e fbb5 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34010e96:	2e01      	cmp	r6, #1
34010e98:	d1c5      	bne.n	34010e26 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xa>
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
34010e9a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
34010e9e:	071b      	lsls	r3, r3, #28
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
34010ea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34010ea4:	68a2      	ldr	r2, [r4, #8]
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34010ea6:	6829      	ldr	r1, [r5, #0]
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
34010ea8:	4313      	orrs	r3, r2
                  (pRawBayer2RGBConfig->VLineStrength << DCMIPP_P1DMCR_LINEV_Pos)   | \
34010eaa:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34010eac:	f8d1 0870 	ldr.w	r0, [r1, #2160]	@ 0x870
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
34010eb0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                  (pRawBayer2RGBConfig->HLineStrength << DCMIPP_P1DMCR_LINEH_Pos));
34010eb4:	6862      	ldr	r2, [r4, #4]
    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
34010eb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34010eba:	4a04      	ldr	r2, [pc, #16]	@ (34010ecc <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xb0>)
34010ebc:	4002      	ands	r2, r0
34010ebe:	4313      	orrs	r3, r2
  return HAL_OK;
34010ec0:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34010ec2:	f8c1 3870 	str.w	r3, [r1, #2160]	@ 0x870
  return HAL_OK;
34010ec6:	e7af      	b.n	34010e28 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xc>
34010ec8:	3402f13d 	.word	0x3402f13d
34010ecc:	8888fff9 	.word	0x8888fff9

34010ed0 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>:
{
34010ed0:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010ed2:	b130      	cbz	r0, 34010ee2 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010ed4:	2902      	cmp	r1, #2
34010ed6:	d906      	bls.n	34010ee6 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x16>
34010ed8:	f241 214a 	movw	r1, #4682	@ 0x124a
34010edc:	4807      	ldr	r0, [pc, #28]	@ (34010efc <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x2c>)
34010ede:	f00e fb8f 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34010ee2:	2001      	movs	r0, #1
}
34010ee4:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34010ee6:	2901      	cmp	r1, #1
34010ee8:	d1fb      	bne.n	34010ee2 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x12>
    SET_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
34010eea:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34010eec:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
34010eee:	f8d2 3870 	ldr.w	r3, [r2, #2160]	@ 0x870
34010ef2:	f043 0301 	orr.w	r3, r3, #1
34010ef6:	f8c2 3870 	str.w	r3, [r2, #2160]	@ 0x870
  return HAL_OK;
34010efa:	e7f3      	b.n	34010ee4 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x14>
34010efc:	3402f13d 	.word	0x3402f13d

34010f00 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>:
{
34010f00:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010f02:	b130      	cbz	r0, 34010f12 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010f04:	2902      	cmp	r1, #2
34010f06:	d906      	bls.n	34010f16 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x16>
34010f08:	f241 2167 	movw	r1, #4711	@ 0x1267
34010f0c:	4807      	ldr	r0, [pc, #28]	@ (34010f2c <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x2c>)
34010f0e:	f00e fb77 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34010f12:	2001      	movs	r0, #1
}
34010f14:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34010f16:	2901      	cmp	r1, #1
34010f18:	d1fb      	bne.n	34010f12 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
34010f1a:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34010f1c:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
34010f1e:	f8d2 3870 	ldr.w	r3, [r2, #2160]	@ 0x870
34010f22:	f023 0301 	bic.w	r3, r3, #1
34010f26:	f8c2 3870 	str.w	r3, [r2, #2160]	@ 0x870
  return HAL_OK;
34010f2a:	e7f3      	b.n	34010f14 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x14>
34010f2c:	3402f13d 	.word	0x3402f13d

34010f30 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>:
{
34010f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010f32:	460f      	mov	r7, r1
34010f34:	4615      	mov	r5, r2
34010f36:	461c      	mov	r4, r3
  if (hdcmipp == NULL)
34010f38:	4606      	mov	r6, r0
34010f3a:	b908      	cbnz	r0, 34010f40 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x10>
    return HAL_ERROR;
34010f3c:	2001      	movs	r0, #1
}
34010f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010f40:	2902      	cmp	r1, #2
34010f42:	d904      	bls.n	34010f4e <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x1e>
34010f44:	f241 2189 	movw	r1, #4745	@ 0x1289
34010f48:	480f      	ldr	r0, [pc, #60]	@ (34010f88 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x58>)
34010f4a:	f00e fb59 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_NB_FIRST_LINES(NbFirstLines));
34010f4e:	2d07      	cmp	r5, #7
34010f50:	d904      	bls.n	34010f5c <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x2c>
34010f52:	f241 218a 	movw	r1, #4746	@ 0x128a
34010f56:	480c      	ldr	r0, [pc, #48]	@ (34010f88 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x58>)
34010f58:	f00e fb52 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_NB_LAST_LINES(NbLastLines));
34010f5c:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
34010f60:	d304      	bcc.n	34010f6c <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x3c>
34010f62:	f241 218b 	movw	r1, #4747	@ 0x128b
34010f66:	4808      	ldr	r0, [pc, #32]	@ (34010f88 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x58>)
34010f68:	f00e fb4a 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34010f6c:	2f01      	cmp	r7, #1
34010f6e:	d1e5      	bne.n	34010f3c <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0xc>
    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
34010f70:	6832      	ldr	r2, [r6, #0]
    p1srcr_reg = ((NbFirstLines << DCMIPP_P1SRCR_FIRSTLINEDEL_Pos) | (NbLastLines << DCMIPP_P1SRCR_LASTLINE_Pos));
34010f72:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
34010f76:	f8d2 3820 	ldr.w	r3, [r2, #2080]	@ 0x820
  return HAL_OK;
34010f7a:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
34010f7c:	f36f 030e 	bfc	r3, #0, #15
34010f80:	431c      	orrs	r4, r3
34010f82:	f8c2 4820 	str.w	r4, [r2, #2080]	@ 0x820
  return HAL_OK;
34010f86:	e7da      	b.n	34010f3e <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0xe>
34010f88:	3402f13d 	.word	0x3402f13d

34010f8c <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>:
  if (hdcmipp == NULL)
34010f8c:	b150      	cbz	r0, 34010fa4 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x18>
  if (Pipe == DCMIPP_PIPE1)
34010f8e:	2901      	cmp	r1, #1
34010f90:	d108      	bne.n	34010fa4 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x18>
    SET_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34010f92:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34010f94:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34010f96:	f8d2 3820 	ldr.w	r3, [r2, #2080]	@ 0x820
34010f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34010f9e:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  return HAL_OK;
34010fa2:	4770      	bx	lr
    return HAL_ERROR;
34010fa4:	2001      	movs	r0, #1
}
34010fa6:	4770      	bx	lr

34010fa8 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>:
  if (hdcmipp == NULL)
34010fa8:	b150      	cbz	r0, 34010fc0 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x18>
  if (Pipe == DCMIPP_PIPE1)
34010faa:	2901      	cmp	r1, #1
34010fac:	d108      	bne.n	34010fc0 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x18>
    CLEAR_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34010fae:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34010fb0:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34010fb2:	f8d2 3820 	ldr.w	r3, [r2, #2080]	@ 0x820
34010fb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34010fba:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  return HAL_OK;
34010fbe:	4770      	bx	lr
    return HAL_ERROR;
34010fc0:	2001      	movs	r0, #1
}
34010fc2:	4770      	bx	lr

34010fc4 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>:
{
34010fc4:	b570      	push	{r4, r5, r6, lr}
34010fc6:	460e      	mov	r6, r1
34010fc8:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
34010fca:	4605      	mov	r5, r0
34010fcc:	b908      	cbnz	r0, 34010fd2 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xe>
    return HAL_ERROR;
34010fce:	2001      	movs	r0, #1
}
34010fd0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010fd2:	2902      	cmp	r1, #2
34010fd4:	d918      	bls.n	34011008 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x44>
34010fd6:	f241 21ea 	movw	r1, #4842	@ 0x12ea
34010fda:	480d      	ldr	r0, [pc, #52]	@ (34011010 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x4c>)
34010fdc:	f00e fb10 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_BAD_PXL_REMOVAL_STRENGTH(Strength));
34010fe0:	2c07      	cmp	r4, #7
34010fe2:	d9f4      	bls.n	34010fce <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xa>
34010fe4:	f241 21eb 	movw	r1, #4843	@ 0x12eb
34010fe8:	4809      	ldr	r0, [pc, #36]	@ (34011010 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x4c>)
34010fea:	f00e fb09 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34010fee:	2e01      	cmp	r6, #1
34010ff0:	d1ed      	bne.n	34010fce <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_STRENGTH, Strength << DCMIPP_P1BPRCR_STRENGTH_Pos);
34010ff2:	6829      	ldr	r1, [r5, #0]
  return HAL_OK;
34010ff4:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_STRENGTH, Strength << DCMIPP_P1BPRCR_STRENGTH_Pos);
34010ff6:	f8d1 3824 	ldr.w	r3, [r1, #2084]	@ 0x824
34010ffa:	f023 030e 	bic.w	r3, r3, #14
34010ffe:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
34011002:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824
  return HAL_OK;
34011006:	e7e3      	b.n	34010fd0 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xc>
  assert_param(IS_DCMIPP_BAD_PXL_REMOVAL_STRENGTH(Strength));
34011008:	2a07      	cmp	r2, #7
3401100a:	d9f0      	bls.n	34010fee <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x2a>
3401100c:	e7ea      	b.n	34010fe4 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x20>
3401100e:	bf00      	nop
34011010:	3402f13d 	.word	0x3402f13d

34011014 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>:
{
34011014:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34011016:	b130      	cbz	r0, 34011026 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011018:	2902      	cmp	r1, #2
3401101a:	d906      	bls.n	3401102a <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x16>
3401101c:	f241 3108 	movw	r1, #4872	@ 0x1308
34011020:	4807      	ldr	r0, [pc, #28]	@ (34011040 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x2c>)
34011022:	f00e faed 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34011026:	2001      	movs	r0, #1
}
34011028:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
3401102a:	2901      	cmp	r1, #1
3401102c:	d1fb      	bne.n	34011026 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x12>
    SET_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
3401102e:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011030:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
34011032:	f8d2 3824 	ldr.w	r3, [r2, #2084]	@ 0x824
34011036:	f043 0301 	orr.w	r3, r3, #1
3401103a:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824
  return HAL_OK;
3401103e:	e7f3      	b.n	34011028 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x14>
34011040:	3402f13d 	.word	0x3402f13d

34011044 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>:
{
34011044:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34011046:	b130      	cbz	r0, 34011056 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011048:	2902      	cmp	r1, #2
3401104a:	d906      	bls.n	3401105a <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x16>
3401104c:	f241 3125 	movw	r1, #4901	@ 0x1325
34011050:	4807      	ldr	r0, [pc, #28]	@ (34011070 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x2c>)
34011052:	f00e fad5 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34011056:	2001      	movs	r0, #1
}
34011058:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
3401105a:	2901      	cmp	r1, #1
3401105c:	d1fb      	bne.n	34011056 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
3401105e:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011060:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
34011062:	f8d2 3824 	ldr.w	r3, [r2, #2084]	@ 0x824
34011066:	f023 0301 	bic.w	r3, r3, #1
3401106a:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824
  return HAL_OK;
3401106e:	e7f3      	b.n	34011058 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x14>
34011070:	3402f13d 	.word	0x3402f13d

34011074 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011074:	2902      	cmp	r1, #2
{
34011076:	b510      	push	{r4, lr}
34011078:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401107a:	d904      	bls.n	34011086 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x12>
3401107c:	f241 313b 	movw	r1, #4923	@ 0x133b
34011080:	4804      	ldr	r0, [pc, #16]	@ (34011094 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x20>)
34011082:	f00e fabd 	bl	3401f600 <assert_failed>
  return (((READ_REG(hdcmipp->Instance->P1BPRCR)) & DCMIPP_P1BPRCR_STRENGTH) >> DCMIPP_P1BPRCR_STRENGTH_Pos);
34011086:	6823      	ldr	r3, [r4, #0]
34011088:	f8d3 0824 	ldr.w	r0, [r3, #2084]	@ 0x824
}
3401108c:	f3c0 0042 	ubfx	r0, r0, #1, #3
34011090:	bd10      	pop	{r4, pc}
34011092:	bf00      	nop
34011094:	3402f13d 	.word	0x3402f13d

34011098 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>:
{
34011098:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3401109a:	4a10      	ldr	r2, [pc, #64]	@ (340110dc <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x44>)
3401109c:	6803      	ldr	r3, [r0, #0]
{
3401109e:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340110a0:	4293      	cmp	r3, r2
{
340110a2:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340110a4:	d008      	beq.n	340110b8 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x20>
340110a6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340110aa:	4293      	cmp	r3, r2
340110ac:	d004      	beq.n	340110b8 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x20>
340110ae:	f241 3148 	movw	r1, #4936	@ 0x1348
340110b2:	480b      	ldr	r0, [pc, #44]	@ (340110e0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x48>)
340110b4:	f00e faa4 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340110b8:	2d02      	cmp	r5, #2
340110ba:	d906      	bls.n	340110ca <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x32>
340110bc:	f241 3149 	movw	r1, #4937	@ 0x1349
340110c0:	4807      	ldr	r0, [pc, #28]	@ (340110e0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x48>)
340110c2:	f00e fa9d 	bl	3401f600 <assert_failed>
    return 0;
340110c6:	2000      	movs	r0, #0
}
340110c8:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
340110ca:	2d01      	cmp	r5, #1
340110cc:	d1fb      	bne.n	340110c6 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE) == DCMIPP_P1BPRCR_ENABLE) ? 1U : 0U);
340110ce:	6823      	ldr	r3, [r4, #0]
340110d0:	f8d3 0824 	ldr.w	r0, [r3, #2084]	@ 0x824
340110d4:	f000 0001 	and.w	r0, r0, #1
340110d8:	e7f6      	b.n	340110c8 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x30>
340110da:	bf00      	nop
340110dc:	58002000 	.word	0x58002000
340110e0:	3402f13d 	.word	0x3402f13d

340110e4 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>:
{
340110e4:	b538      	push	{r3, r4, r5, lr}
340110e6:	4615      	mov	r5, r2
  if ((hdcmipp == NULL) || (pCounter == NULL))
340110e8:	4604      	mov	r4, r0
340110ea:	b908      	cbnz	r0, 340110f0 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0xc>
    return HAL_ERROR;
340110ec:	2001      	movs	r0, #1
}
340110ee:	bd38      	pop	{r3, r4, r5, pc}
  if ((hdcmipp == NULL) || (pCounter == NULL))
340110f0:	2a00      	cmp	r2, #0
340110f2:	d0fb      	beq.n	340110ec <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x8>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340110f4:	2902      	cmp	r1, #2
340110f6:	d904      	bls.n	34011102 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x1e>
340110f8:	f241 3166 	movw	r1, #4966	@ 0x1366
340110fc:	4806      	ldr	r0, [pc, #24]	@ (34011118 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x34>)
340110fe:	f00e fa7f 	bl	3401f600 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34011102:	7923      	ldrb	r3, [r4, #4]
34011104:	2b02      	cmp	r3, #2
34011106:	d1f1      	bne.n	340110ec <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x8>
    *pCounter = READ_REG(hdcmipp->Instance->P1BPRSR & DCMIPP_P1BPRSR_BADCNT);
34011108:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
3401110a:	2000      	movs	r0, #0
    *pCounter = READ_REG(hdcmipp->Instance->P1BPRSR & DCMIPP_P1BPRSR_BADCNT);
3401110c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
34011110:	f3c3 030b 	ubfx	r3, r3, #0, #12
34011114:	602b      	str	r3, [r5, #0]
  return HAL_OK;
34011116:	e7ea      	b.n	340110ee <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0xa>
34011118:	3402f13d 	.word	0x3402f13d

3401111c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>:
{
3401111c:	b570      	push	{r4, r5, r6, lr}
3401111e:	460e      	mov	r6, r1
34011120:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pColorConversionConfig == NULL))
34011122:	4605      	mov	r5, r0
34011124:	b908      	cbnz	r0, 3401112a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xe>
    return HAL_ERROR;
34011126:	2001      	movs	r0, #1
}
34011128:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pColorConversionConfig == NULL))
3401112a:	2a00      	cmp	r2, #0
3401112c:	d0fb      	beq.n	34011126 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401112e:	2902      	cmp	r1, #2
34011130:	d904      	bls.n	3401113c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x20>
34011132:	f241 4125 	movw	r1, #5157	@ 0x1425
34011136:	4898      	ldr	r0, [pc, #608]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011138:	f00e fa62 	bl	3401f600 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(pColorConversionConfig->ClampOutputSamples));
3401113c:	7823      	ldrb	r3, [r4, #0]
3401113e:	2b01      	cmp	r3, #1
34011140:	d904      	bls.n	3401114c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x30>
34011142:	f241 4126 	movw	r1, #5158	@ 0x1426
34011146:	4894      	ldr	r0, [pc, #592]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011148:	f00e fa5a 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_OUTPUT_SAMPLES_TYPES(pColorConversionConfig->OutputSamplesType));
3401114c:	7863      	ldrb	r3, [r4, #1]
3401114e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
34011152:	d004      	beq.n	3401115e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x42>
34011154:	f241 4127 	movw	r1, #5159	@ 0x1427
34011158:	488f      	ldr	r0, [pc, #572]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401115a:	f00e fa51 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RR));
3401115e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
34011162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34011166:	db04      	blt.n	34011172 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x56>
34011168:	f241 4128 	movw	r1, #5160	@ 0x1428
3401116c:	488a      	ldr	r0, [pc, #552]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401116e:	f00e fa47 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RG));
34011172:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
34011176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401117a:	db04      	blt.n	34011186 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x6a>
3401117c:	f241 4129 	movw	r1, #5161	@ 0x1429
34011180:	4885      	ldr	r0, [pc, #532]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011182:	f00e fa3d 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RB));
34011186:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
3401118a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401118e:	db04      	blt.n	3401119a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x7e>
34011190:	f241 412a 	movw	r1, #5162	@ 0x142a
34011194:	4880      	ldr	r0, [pc, #512]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011196:	f00e fa33 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RA));
3401119a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
3401119e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340111a2:	db04      	blt.n	340111ae <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x92>
340111a4:	f241 412b 	movw	r1, #5163	@ 0x142b
340111a8:	487b      	ldr	r0, [pc, #492]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340111aa:	f00e fa29 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GR));
340111ae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
340111b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340111b6:	db04      	blt.n	340111c2 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xa6>
340111b8:	f241 412c 	movw	r1, #5164	@ 0x142c
340111bc:	4876      	ldr	r0, [pc, #472]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340111be:	f00e fa1f 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GG));
340111c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340111c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340111ca:	db04      	blt.n	340111d6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xba>
340111cc:	f241 412d 	movw	r1, #5165	@ 0x142d
340111d0:	4871      	ldr	r0, [pc, #452]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340111d2:	f00e fa15 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GB));
340111d6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
340111da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340111de:	db04      	blt.n	340111ea <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xce>
340111e0:	f241 412e 	movw	r1, #5166	@ 0x142e
340111e4:	486c      	ldr	r0, [pc, #432]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340111e6:	f00e fa0b 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GA));
340111ea:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
340111ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340111f2:	db04      	blt.n	340111fe <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xe2>
340111f4:	f241 412f 	movw	r1, #5167	@ 0x142f
340111f8:	4867      	ldr	r0, [pc, #412]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340111fa:	f00e fa01 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BR));
340111fe:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
34011202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34011206:	db04      	blt.n	34011212 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xf6>
34011208:	f241 4130 	movw	r1, #5168	@ 0x1430
3401120c:	4862      	ldr	r0, [pc, #392]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401120e:	f00e f9f7 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BG));
34011212:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
34011216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401121a:	db04      	blt.n	34011226 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x10a>
3401121c:	f241 4131 	movw	r1, #5169	@ 0x1431
34011220:	485d      	ldr	r0, [pc, #372]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011222:	f00e f9ed 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BB));
34011226:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
3401122a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401122e:	db04      	blt.n	3401123a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x11e>
34011230:	f241 4132 	movw	r1, #5170	@ 0x1432
34011234:	4858      	ldr	r0, [pc, #352]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011236:	f00e f9e3 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BA));
3401123a:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
3401123e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34011242:	db04      	blt.n	3401124e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x132>
34011244:	f241 4133 	movw	r1, #5171	@ 0x1433
34011248:	4853      	ldr	r0, [pc, #332]	@ (34011398 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401124a:	f00e f9d9 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
3401124e:	2e01      	cmp	r6, #1
34011250:	f47f af69 	bne.w	34011126 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
34011254:	682b      	ldr	r3, [r5, #0]
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
34011256:	7820      	ldrb	r0, [r4, #0]
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
34011258:	f8d3 1880 	ldr.w	r1, [r3, #2176]	@ 0x880
                 ((uint32_t)pColorConversionConfig->OutputSamplesType);
3401125c:	7862      	ldrb	r2, [r4, #1]
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
3401125e:	f021 0106 	bic.w	r1, r1, #6
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
34011262:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
34011266:	430a      	orrs	r2, r1
34011268:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RR);
3401126c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
34011270:	b290      	uxth	r0, r2
34011272:	f3c2 010a 	ubfx	r1, r2, #0, #11
34011276:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RG);
34011278:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RR);
3401127c:	bfb8      	it	lt
3401127e:	4608      	movlt	r0, r1
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RG);
34011280:	f3c2 050a 	ubfx	r5, r2, #0, #11
34011284:	2a00      	cmp	r2, #0
34011286:	b291      	uxth	r1, r2
34011288:	bfb8      	it	lt
3401128a:	4629      	movlt	r1, r5
    MODIFY_REG(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR | DCMIPP_P1CCRR1_RG,
3401128c:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
34011290:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
34011294:	4302      	orrs	r2, r0
34011296:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
3401129a:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RB);
3401129e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
340112a2:	b295      	uxth	r5, r2
340112a4:	f3c2 010a 	ubfx	r1, r2, #0, #11
340112a8:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->RA);
340112aa:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RB);
340112ae:	bfb8      	it	lt
340112b0:	460d      	movlt	r5, r1
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->RA);
340112b2:	f3c2 0109 	ubfx	r1, r2, #0, #10
340112b6:	2a00      	cmp	r2, #0
340112b8:	b290      	uxth	r0, r2
340112ba:	bfb8      	it	lt
340112bc:	4608      	movlt	r0, r1
    MODIFY_REG(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB | DCMIPP_P1CCRR2_RA,
340112be:	f8d3 2888 	ldr.w	r2, [r3, #2184]	@ 0x888
340112c2:	4936      	ldr	r1, [pc, #216]	@ (3401139c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x280>)
340112c4:	400a      	ands	r2, r1
340112c6:	432a      	orrs	r2, r5
340112c8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
340112cc:	f8c3 2888 	str.w	r2, [r3, #2184]	@ 0x888
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GG);
340112d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
340112d4:	b295      	uxth	r5, r2
340112d6:	f3c2 000a 	ubfx	r0, r2, #0, #11
340112da:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GR);
340112dc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GG);
340112e0:	bfb8      	it	lt
340112e2:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GR);
340112e4:	f3c2 060a 	ubfx	r6, r2, #0, #11
340112e8:	2a00      	cmp	r2, #0
340112ea:	b290      	uxth	r0, r2
340112ec:	bfb8      	it	lt
340112ee:	4630      	movlt	r0, r6
    MODIFY_REG(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR | DCMIPP_P1CCGR1_GG,
340112f0:	f8d3 288c 	ldr.w	r2, [r3, #2188]	@ 0x88c
340112f4:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
340112f8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
340112fc:	4302      	orrs	r2, r0
340112fe:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GB);
34011302:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
34011306:	b295      	uxth	r5, r2
34011308:	f3c2 000a 	ubfx	r0, r2, #0, #11
3401130c:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->GA);
3401130e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GB);
34011312:	bfb8      	it	lt
34011314:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->GA);
34011316:	f3c2 0609 	ubfx	r6, r2, #0, #10
3401131a:	2a00      	cmp	r2, #0
3401131c:	b290      	uxth	r0, r2
3401131e:	bfb8      	it	lt
34011320:	4630      	movlt	r0, r6
    MODIFY_REG(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB | DCMIPP_P1CCGR2_GA,
34011322:	f8d3 2890 	ldr.w	r2, [r3, #2192]	@ 0x890
34011326:	400a      	ands	r2, r1
34011328:	432a      	orrs	r2, r5
3401132a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
3401132e:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BR);
34011332:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
34011336:	b295      	uxth	r5, r2
34011338:	f3c2 000a 	ubfx	r0, r2, #0, #11
3401133c:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BG);
3401133e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BR);
34011342:	bfb8      	it	lt
34011344:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BG);
34011346:	f3c2 060a 	ubfx	r6, r2, #0, #11
3401134a:	2a00      	cmp	r2, #0
3401134c:	b290      	uxth	r0, r2
3401134e:	bfb8      	it	lt
34011350:	4630      	movlt	r0, r6
    MODIFY_REG(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR | DCMIPP_P1CCBR1_BG,
34011352:	f8d3 2894 	ldr.w	r2, [r3, #2196]	@ 0x894
34011356:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
3401135a:	432a      	orrs	r2, r5
3401135c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34011360:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BB);
34011364:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
34011368:	f3c2 000a 	ubfx	r0, r2, #0, #11
3401136c:	b295      	uxth	r5, r2
3401136e:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->BA);
34011370:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BB);
34011374:	bfb8      	it	lt
34011376:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->BA);
34011378:	f3c2 0409 	ubfx	r4, r2, #0, #10
3401137c:	2a00      	cmp	r2, #0
3401137e:	b290      	uxth	r0, r2
34011380:	bfb8      	it	lt
34011382:	4620      	movlt	r0, r4
    MODIFY_REG(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB | DCMIPP_P1CCBR2_BA,
34011384:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
34011388:	400a      	ands	r2, r1
3401138a:	432a      	orrs	r2, r5
3401138c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34011390:	f8c3 2898 	str.w	r2, [r3, #2200]	@ 0x898
  return HAL_OK;
34011394:	2000      	movs	r0, #0
34011396:	e6c7      	b.n	34011128 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xc>
34011398:	3402f13d 	.word	0x3402f13d
3401139c:	fc00f800 	.word	0xfc00f800

340113a0 <HAL_DCMIPP_PIPE_EnableISPColorConversion>:
{
340113a0:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340113a2:	b130      	cbz	r0, 340113b2 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340113a4:	2902      	cmp	r1, #2
340113a6:	d906      	bls.n	340113b6 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x16>
340113a8:	f241 417b 	movw	r1, #5243	@ 0x147b
340113ac:	4807      	ldr	r0, [pc, #28]	@ (340113cc <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x2c>)
340113ae:	f00e f927 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
340113b2:	2001      	movs	r0, #1
}
340113b4:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340113b6:	2901      	cmp	r1, #1
340113b8:	d1fb      	bne.n	340113b2 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x12>
    SET_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
340113ba:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340113bc:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
340113be:	f8d2 3880 	ldr.w	r3, [r2, #2176]	@ 0x880
340113c2:	f043 0301 	orr.w	r3, r3, #1
340113c6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
  return HAL_OK;
340113ca:	e7f3      	b.n	340113b4 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x14>
340113cc:	3402f13d 	.word	0x3402f13d

340113d0 <HAL_DCMIPP_PIPE_DisableISPColorConversion>:
{
340113d0:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340113d2:	b130      	cbz	r0, 340113e2 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340113d4:	2902      	cmp	r1, #2
340113d6:	d906      	bls.n	340113e6 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x16>
340113d8:	f241 4197 	movw	r1, #5271	@ 0x1497
340113dc:	4807      	ldr	r0, [pc, #28]	@ (340113fc <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x2c>)
340113de:	f00e f90f 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
340113e2:	2001      	movs	r0, #1
}
340113e4:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340113e6:	2901      	cmp	r1, #1
340113e8:	d1fb      	bne.n	340113e2 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
340113ea:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340113ec:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
340113ee:	f8d2 3880 	ldr.w	r3, [r2, #2176]	@ 0x880
340113f2:	f023 0301 	bic.w	r3, r3, #1
340113f6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
  return HAL_OK;
340113fa:	e7f3      	b.n	340113e4 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x14>
340113fc:	3402f13d 	.word	0x3402f13d

34011400 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>:
{
34011400:	b510      	push	{r4, lr}
  if ((hdcmipp == NULL) || (pBlackLevelConfig == NULL))
34011402:	b100      	cbz	r0, 34011406 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6>
34011404:	b90a      	cbnz	r2, 3401140a <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0xa>
    return HAL_ERROR;
34011406:	2001      	movs	r0, #1
}
34011408:	bd10      	pop	{r4, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401140a:	2902      	cmp	r1, #2
3401140c:	d905      	bls.n	3401141a <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x1a>
3401140e:	f241 515b 	movw	r1, #5467	@ 0x155b
34011412:	480b      	ldr	r0, [pc, #44]	@ (34011440 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x40>)
34011414:	f00e f8f4 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011418:	e7f5      	b.n	34011406 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6>
3401141a:	2901      	cmp	r1, #1
3401141c:	d1f3      	bne.n	34011406 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6>
    MODIFY_REG(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_BLCR | DCMIPP_P1BLCCR_BLCG | DCMIPP_P1BLCCR_BLCB,
3401141e:	6800      	ldr	r0, [r0, #0]
34011420:	7853      	ldrb	r3, [r2, #1]
34011422:	7814      	ldrb	r4, [r2, #0]
34011424:	f8d0 1840 	ldr.w	r1, [r0, #2112]	@ 0x840
34011428:	7892      	ldrb	r2, [r2, #2]
3401142a:	041b      	lsls	r3, r3, #16
3401142c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34011430:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34011434:	b2ca      	uxtb	r2, r1
34011436:	4313      	orrs	r3, r2
34011438:	f8c0 3840 	str.w	r3, [r0, #2112]	@ 0x840
  return HAL_OK;
3401143c:	2000      	movs	r0, #0
3401143e:	e7e3      	b.n	34011408 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x8>
34011440:	3402f13d 	.word	0x3402f13d

34011444 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>:
{
34011444:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34011446:	b130      	cbz	r0, 34011456 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011448:	2902      	cmp	r1, #2
3401144a:	d906      	bls.n	3401145a <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x16>
3401144c:	f241 517a 	movw	r1, #5498	@ 0x157a
34011450:	4807      	ldr	r0, [pc, #28]	@ (34011470 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x2c>)
34011452:	f00e f8d5 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34011456:	2001      	movs	r0, #1
}
34011458:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
3401145a:	2901      	cmp	r1, #1
3401145c:	d1fb      	bne.n	34011456 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x12>
    SET_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
3401145e:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011460:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
34011462:	f8d2 3840 	ldr.w	r3, [r2, #2112]	@ 0x840
34011466:	f043 0301 	orr.w	r3, r3, #1
3401146a:	f8c2 3840 	str.w	r3, [r2, #2112]	@ 0x840
  return HAL_OK;
3401146e:	e7f3      	b.n	34011458 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x14>
34011470:	3402f13d 	.word	0x3402f13d

34011474 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>:
{
34011474:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34011476:	b130      	cbz	r0, 34011486 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011478:	2902      	cmp	r1, #2
3401147a:	d906      	bls.n	3401148a <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x16>
3401147c:	f241 5196 	movw	r1, #5526	@ 0x1596
34011480:	4807      	ldr	r0, [pc, #28]	@ (340114a0 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x2c>)
34011482:	f00e f8bd 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34011486:	2001      	movs	r0, #1
}
34011488:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
3401148a:	2901      	cmp	r1, #1
3401148c:	d1fb      	bne.n	34011486 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
3401148e:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011490:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
34011492:	f8d2 3840 	ldr.w	r3, [r2, #2112]	@ 0x840
34011496:	f023 0301 	bic.w	r3, r3, #1
3401149a:	f8c2 3840 	str.w	r3, [r2, #2112]	@ 0x840
  return HAL_OK;
3401149e:	e7f3      	b.n	34011488 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x14>
340114a0:	3402f13d 	.word	0x3402f13d

340114a4 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
340114a4:	2902      	cmp	r1, #2
340114a6:	d904      	bls.n	340114b2 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0xe>
340114a8:	f241 51b0 	movw	r1, #5552	@ 0x15b0
340114ac:	4807      	ldr	r0, [pc, #28]	@ (340114cc <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x28>)
340114ae:	f00e b8a7 	b.w	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340114b2:	2901      	cmp	r1, #1
340114b4:	d108      	bne.n	340114c8 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x24>
    p1blccr_reg = READ_REG(hdcmipp->Instance->P1BLCCR);
340114b6:	6803      	ldr	r3, [r0, #0]
340114b8:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
    pBlackLevelConfig->BlueCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCB) >> DCMIPP_P1BLCCR_BLCB_Pos);
340114bc:	0a19      	lsrs	r1, r3, #8
340114be:	7091      	strb	r1, [r2, #2]
    pBlackLevelConfig->GreenCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCG) >> DCMIPP_P1BLCCR_BLCG_Pos);
340114c0:	0c19      	lsrs	r1, r3, #16
    pBlackLevelConfig->RedCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCR) >> DCMIPP_P1BLCCR_BLCR_Pos);
340114c2:	0e1b      	lsrs	r3, r3, #24
    pBlackLevelConfig->GreenCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCG) >> DCMIPP_P1BLCCR_BLCG_Pos);
340114c4:	7051      	strb	r1, [r2, #1]
    pBlackLevelConfig->RedCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCR) >> DCMIPP_P1BLCCR_BLCR_Pos);
340114c6:	7013      	strb	r3, [r2, #0]
}
340114c8:	4770      	bx	lr
340114ca:	bf00      	nop
340114cc:	3402f13d 	.word	0x3402f13d

340114d0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>:
{
340114d0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340114d2:	4a10      	ldr	r2, [pc, #64]	@ (34011514 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x44>)
340114d4:	6803      	ldr	r3, [r0, #0]
{
340114d6:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340114d8:	4293      	cmp	r3, r2
{
340114da:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340114dc:	d008      	beq.n	340114f0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x20>
340114de:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340114e2:	4293      	cmp	r3, r2
340114e4:	d004      	beq.n	340114f0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x20>
340114e6:	f241 51c4 	movw	r1, #5572	@ 0x15c4
340114ea:	480b      	ldr	r0, [pc, #44]	@ (34011518 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x48>)
340114ec:	f00e f888 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340114f0:	2d02      	cmp	r5, #2
340114f2:	d906      	bls.n	34011502 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x32>
340114f4:	f241 51c5 	movw	r1, #5573	@ 0x15c5
340114f8:	4807      	ldr	r0, [pc, #28]	@ (34011518 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x48>)
340114fa:	f00e f881 	bl	3401f600 <assert_failed>
    return 0;
340114fe:	2000      	movs	r0, #0
}
34011500:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34011502:	2d01      	cmp	r5, #1
34011504:	d1fb      	bne.n	340114fe <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE) == DCMIPP_P1BLCCR_ENABLE) ? 1U : 0U);
34011506:	6823      	ldr	r3, [r4, #0]
34011508:	f8d3 0840 	ldr.w	r0, [r3, #2112]	@ 0x840
3401150c:	f000 0001 	and.w	r0, r0, #1
34011510:	e7f6      	b.n	34011500 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x30>
34011512:	bf00      	nop
34011514:	58002000 	.word	0x58002000
34011518:	3402f13d 	.word	0x3402f13d

3401151c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>:
{
3401151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401151e:	460f      	mov	r7, r1
34011520:	4615      	mov	r5, r2
34011522:	461c      	mov	r4, r3
  if ((hdcmipp == NULL) || (pStatisticExtractionConfig == NULL))
34011524:	4606      	mov	r6, r0
34011526:	b908      	cbnz	r0, 3401152c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x10>
    return HAL_ERROR;
34011528:	2001      	movs	r0, #1
}
3401152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdcmipp == NULL) || (pStatisticExtractionConfig == NULL))
3401152c:	2b00      	cmp	r3, #0
3401152e:	d0fb      	beq.n	34011528 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011530:	2902      	cmp	r1, #2
34011532:	d904      	bls.n	3401153e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x22>
34011534:	f241 51e9 	movw	r1, #5609	@ 0x15e9
34011538:	482a      	ldr	r0, [pc, #168]	@ (340115e4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
3401153a:	f00e f861 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
3401153e:	1e6b      	subs	r3, r5, #1
34011540:	2b02      	cmp	r3, #2
34011542:	d904      	bls.n	3401154e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x32>
34011544:	f241 51ea 	movw	r1, #5610	@ 0x15ea
34011548:	4826      	ldr	r0, [pc, #152]	@ (340115e4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
3401154a:	f00e f859 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_BINS(pStatisticExtractionConfig->Bins));
3401154e:	68a3      	ldr	r3, [r4, #8]
34011550:	b16b      	cbz	r3, 3401156e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x52>
34011552:	3b04      	subs	r3, #4
34011554:	2b08      	cmp	r3, #8
34011556:	d805      	bhi.n	34011564 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x48>
34011558:	f240 1211 	movw	r2, #273	@ 0x111
3401155c:	fa22 f303 	lsr.w	r3, r2, r3
34011560:	07db      	lsls	r3, r3, #31
34011562:	d404      	bmi.n	3401156e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x52>
34011564:	f241 51eb 	movw	r1, #5611	@ 0x15eb
34011568:	481e      	ldr	r0, [pc, #120]	@ (340115e4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
3401156a:	f00e f849 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_SOURCE(pStatisticExtractionConfig->Source));
3401156e:	6863      	ldr	r3, [r4, #4]
34011570:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34011574:	d006      	beq.n	34011584 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x68>
34011576:	2b40      	cmp	r3, #64	@ 0x40
34011578:	d004      	beq.n	34011584 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x68>
3401157a:	f241 51ec 	movw	r1, #5612	@ 0x15ec
3401157e:	4819      	ldr	r0, [pc, #100]	@ (340115e4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34011580:	f00e f83e 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODE(pStatisticExtractionConfig->Mode));
34011584:	6823      	ldr	r3, [r4, #0]
34011586:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
3401158a:	d004      	beq.n	34011596 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x7a>
3401158c:	f241 51ed 	movw	r1, #5613	@ 0x15ed
34011590:	4814      	ldr	r0, [pc, #80]	@ (340115e4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34011592:	f00e f835 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011596:	2f01      	cmp	r7, #1
34011598:	d1c6      	bne.n	34011528 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc>
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
3401159a:	e9d4 3200 	ldrd	r3, r2, [r4]
3401159e:	4313      	orrs	r3, r2
340115a0:	68a2      	ldr	r2, [r4, #8]
    switch (ModuleID)
340115a2:	2d01      	cmp	r5, #1
        MODIFY_REG(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_BINS | DCMIPP_P1ST1CR_SRC | \
340115a4:	6831      	ldr	r1, [r6, #0]
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
340115a6:	ea43 0302 	orr.w	r3, r3, r2
    switch (ModuleID)
340115aa:	d009      	beq.n	340115c0 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa4>
340115ac:	2d02      	cmp	r5, #2
340115ae:	d010      	beq.n	340115d2 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xb6>
        MODIFY_REG(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_BINS | DCMIPP_P1ST3CR_SRC | \
340115b0:	f8d1 2858 	ldr.w	r2, [r1, #2136]	@ 0x858
340115b4:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
340115b8:	4313      	orrs	r3, r2
340115ba:	f8c1 3858 	str.w	r3, [r1, #2136]	@ 0x858
        break;
340115be:	e006      	b.n	340115ce <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xb2>
        MODIFY_REG(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_BINS | DCMIPP_P1ST1CR_SRC | \
340115c0:	f8d1 2850 	ldr.w	r2, [r1, #2128]	@ 0x850
340115c4:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
340115c8:	4313      	orrs	r3, r2
340115ca:	f8c1 3850 	str.w	r3, [r1, #2128]	@ 0x850
  return HAL_OK;
340115ce:	2000      	movs	r0, #0
340115d0:	e7ab      	b.n	3401152a <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xe>
        MODIFY_REG(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_BINS | DCMIPP_P1ST2CR_SRC | \
340115d2:	f8d1 2854 	ldr.w	r2, [r1, #2132]	@ 0x854
340115d6:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
340115da:	4313      	orrs	r3, r2
340115dc:	f8c1 3854 	str.w	r3, [r1, #2132]	@ 0x854
        break;
340115e0:	e7f5      	b.n	340115ce <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xb2>
340115e2:	bf00      	nop
340115e4:	3402f13d 	.word	0x3402f13d

340115e8 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>:
{
340115e8:	b570      	push	{r4, r5, r6, lr}
340115ea:	460e      	mov	r6, r1
340115ec:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pStatisticExtractionAreaConfig == NULL))
340115ee:	4605      	mov	r5, r0
340115f0:	b908      	cbnz	r0, 340115f6 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xe>
    return HAL_ERROR;
340115f2:	2001      	movs	r0, #1
}
340115f4:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pStatisticExtractionAreaConfig == NULL))
340115f6:	2a00      	cmp	r2, #0
340115f8:	d0fb      	beq.n	340115f2 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340115fa:	2902      	cmp	r1, #2
340115fc:	d904      	bls.n	34011608 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x20>
340115fe:	f241 611f 	movw	r1, #5663	@ 0x161f
34011602:	4821      	ldr	r0, [pc, #132]	@ (34011688 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34011604:	f00d fffc 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->HStart));
34011608:	6863      	ldr	r3, [r4, #4]
3401160a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401160e:	d304      	bcc.n	3401161a <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x32>
34011610:	f44f 51b1 	mov.w	r1, #5664	@ 0x1620
34011614:	481c      	ldr	r0, [pc, #112]	@ (34011688 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34011616:	f00d fff3 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->VStart));
3401161a:	6823      	ldr	r3, [r4, #0]
3401161c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34011620:	d304      	bcc.n	3401162c <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x44>
34011622:	f241 6121 	movw	r1, #5665	@ 0x1621
34011626:	4818      	ldr	r0, [pc, #96]	@ (34011688 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34011628:	f00d ffea 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->HSize));
3401162c:	68e3      	ldr	r3, [r4, #12]
3401162e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34011632:	d304      	bcc.n	3401163e <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x56>
34011634:	f241 6122 	movw	r1, #5666	@ 0x1622
34011638:	4813      	ldr	r0, [pc, #76]	@ (34011688 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
3401163a:	f00d ffe1 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->VSize));
3401163e:	68a3      	ldr	r3, [r4, #8]
34011640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34011644:	d304      	bcc.n	34011650 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x68>
34011646:	f241 6123 	movw	r1, #5667	@ 0x1623
3401164a:	480f      	ldr	r0, [pc, #60]	@ (34011688 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
3401164c:	f00d ffd8 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011650:	2e01      	cmp	r6, #1
34011652:	d1ce      	bne.n	340115f2 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1STSTR, DCMIPP_P1STSTR_HSTART | DCMIPP_P1STSTR_VSTART,
34011654:	e9d4 0300 	ldrd	r0, r3, [r4]
34011658:	682a      	ldr	r2, [r5, #0]
3401165a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401165e:	f8d2 185c 	ldr.w	r1, [r2, #2140]	@ 0x85c
34011662:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34011666:	430b      	orrs	r3, r1
34011668:	f8c2 385c 	str.w	r3, [r2, #2140]	@ 0x85c
    MODIFY_REG(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_HSIZE | DCMIPP_P1STSZR_VSIZE,
3401166c:	f8d2 1860 	ldr.w	r1, [r2, #2144]	@ 0x860
34011670:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
34011674:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34011678:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401167c:	430b      	orrs	r3, r1
  return HAL_OK;
3401167e:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_HSIZE | DCMIPP_P1STSZR_VSIZE,
34011680:	f8c2 3860 	str.w	r3, [r2, #2144]	@ 0x860
  return HAL_OK;
34011684:	e7b6      	b.n	340115f4 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xc>
34011686:	bf00      	nop
34011688:	3402f13d 	.word	0x3402f13d

3401168c <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>:
{
3401168c:	b570      	push	{r4, r5, r6, lr}
3401168e:	460e      	mov	r6, r1
34011690:	4615      	mov	r5, r2
  if (hdcmipp == NULL)
34011692:	4604      	mov	r4, r0
34011694:	b908      	cbnz	r0, 3401169a <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xe>
    return HAL_ERROR;
34011696:	2001      	movs	r0, #1
}
34011698:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401169a:	2902      	cmp	r1, #2
3401169c:	d904      	bls.n	340116a8 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x1c>
3401169e:	f241 6147 	movw	r1, #5703	@ 0x1647
340116a2:	4815      	ldr	r0, [pc, #84]	@ (340116f8 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x6c>)
340116a4:	f00d ffac 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
340116a8:	1e6b      	subs	r3, r5, #1
340116aa:	2b02      	cmp	r3, #2
340116ac:	d90e      	bls.n	340116cc <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x40>
340116ae:	f241 6148 	movw	r1, #5704	@ 0x1648
340116b2:	4811      	ldr	r0, [pc, #68]	@ (340116f8 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x6c>)
340116b4:	f00d ffa4 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340116b8:	2e01      	cmp	r6, #1
340116ba:	d1ec      	bne.n	34011696 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa>
        SET_BIT(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_ENABLE);
340116bc:	6822      	ldr	r2, [r4, #0]
340116be:	f8d2 3858 	ldr.w	r3, [r2, #2136]	@ 0x858
340116c2:	f043 0301 	orr.w	r3, r3, #1
340116c6:	f8c2 3858 	str.w	r3, [r2, #2136]	@ 0x858
        break;
340116ca:	e013      	b.n	340116f4 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x68>
  if (Pipe == DCMIPP_PIPE1)
340116cc:	2e01      	cmp	r6, #1
340116ce:	d1e2      	bne.n	34011696 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa>
    switch (ModuleID)
340116d0:	2d01      	cmp	r5, #1
        SET_BIT(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_ENABLE);
340116d2:	6823      	ldr	r3, [r4, #0]
    switch (ModuleID)
340116d4:	d008      	beq.n	340116e8 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x5c>
340116d6:	2d02      	cmp	r5, #2
340116d8:	d1f0      	bne.n	340116bc <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x30>
        SET_BIT(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_ENABLE);
340116da:	f8d3 2854 	ldr.w	r2, [r3, #2132]	@ 0x854
340116de:	f042 0201 	orr.w	r2, r2, #1
340116e2:	f8c3 2854 	str.w	r2, [r3, #2132]	@ 0x854
        break;
340116e6:	e005      	b.n	340116f4 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x68>
        SET_BIT(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_ENABLE);
340116e8:	f8d3 2850 	ldr.w	r2, [r3, #2128]	@ 0x850
340116ec:	f042 0201 	orr.w	r2, r2, #1
340116f0:	f8c3 2850 	str.w	r2, [r3, #2128]	@ 0x850
  return HAL_OK;
340116f4:	2000      	movs	r0, #0
340116f6:	e7cf      	b.n	34011698 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xc>
340116f8:	3402f13d 	.word	0x3402f13d

340116fc <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>:
{
340116fc:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340116fe:	b130      	cbz	r0, 3401170e <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011700:	2902      	cmp	r1, #2
34011702:	d906      	bls.n	34011712 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x16>
34011704:	f241 619f 	movw	r1, #5791	@ 0x169f
34011708:	4807      	ldr	r0, [pc, #28]	@ (34011728 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x2c>)
3401170a:	f00d ff79 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
3401170e:	2001      	movs	r0, #1
}
34011710:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011712:	2901      	cmp	r1, #1
34011714:	d1fb      	bne.n	3401170e <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x12>
    SET_BIT(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_CROPEN);
34011716:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011718:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_CROPEN);
3401171a:	f8d2 3860 	ldr.w	r3, [r2, #2144]	@ 0x860
3401171e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
34011722:	f8c2 3860 	str.w	r3, [r2, #2144]	@ 0x860
  return HAL_OK;
34011726:	e7f3      	b.n	34011710 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x14>
34011728:	3402f13d 	.word	0x3402f13d

3401172c <HAL_DCMIPP_PIPE_SetISPExposureConfig>:
{
3401172c:	b570      	push	{r4, r5, r6, lr}
3401172e:	460e      	mov	r6, r1
34011730:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pExposureConfig == NULL))
34011732:	4605      	mov	r5, r0
34011734:	b908      	cbnz	r0, 3401173a <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xe>
    return HAL_ERROR;
34011736:	2001      	movs	r0, #1
}
34011738:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pExposureConfig == NULL))
3401173a:	2a00      	cmp	r2, #0
3401173c:	d0fb      	beq.n	34011736 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401173e:	2902      	cmp	r1, #2
34011740:	d904      	bls.n	3401174c <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x20>
34011742:	f241 61db 	movw	r1, #5851	@ 0x16db
34011746:	481c      	ldr	r0, [pc, #112]	@ (340117b8 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34011748:	f00d ff5a 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftRed));
3401174c:	7823      	ldrb	r3, [r4, #0]
3401174e:	2b07      	cmp	r3, #7
34011750:	d904      	bls.n	3401175c <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x30>
34011752:	f241 61dc 	movw	r1, #5852	@ 0x16dc
34011756:	4818      	ldr	r0, [pc, #96]	@ (340117b8 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34011758:	f00d ff52 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftGreen));
3401175c:	78a3      	ldrb	r3, [r4, #2]
3401175e:	2b07      	cmp	r3, #7
34011760:	d904      	bls.n	3401176c <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x40>
34011762:	f241 61dd 	movw	r1, #5853	@ 0x16dd
34011766:	4814      	ldr	r0, [pc, #80]	@ (340117b8 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34011768:	f00d ff4a 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftBlue));
3401176c:	7923      	ldrb	r3, [r4, #4]
3401176e:	2b07      	cmp	r3, #7
34011770:	d904      	bls.n	3401177c <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x50>
34011772:	f241 61de 	movw	r1, #5854	@ 0x16de
34011776:	4810      	ldr	r0, [pc, #64]	@ (340117b8 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34011778:	f00d ff42 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
3401177c:	2e01      	cmp	r6, #1
3401177e:	d1da      	bne.n	34011736 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_SHFR | DCMIPP_P1EXCR1_MULTR,
34011780:	682a      	ldr	r2, [r5, #0]
34011782:	7863      	ldrb	r3, [r4, #1]
34011784:	7820      	ldrb	r0, [r4, #0]
34011786:	f8d2 1844 	ldr.w	r1, [r2, #2116]	@ 0x844
3401178a:	051b      	lsls	r3, r3, #20
3401178c:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
34011790:	f36f 511e 	bfc	r1, #20, #11
34011794:	430b      	orrs	r3, r1
34011796:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
    WRITE_REG(hdcmipp->Instance->P1EXCR2, (((uint32_t)pExposureConfig->ShiftGreen << DCMIPP_P1EXCR2_SHFG_Pos) | \
3401179a:	78e3      	ldrb	r3, [r4, #3]
3401179c:	78a1      	ldrb	r1, [r4, #2]
3401179e:	051b      	lsls	r3, r3, #20
340117a0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
340117a4:	7921      	ldrb	r1, [r4, #4]
  return HAL_OK;
340117a6:	2000      	movs	r0, #0
    WRITE_REG(hdcmipp->Instance->P1EXCR2, (((uint32_t)pExposureConfig->ShiftGreen << DCMIPP_P1EXCR2_SHFG_Pos) | \
340117a8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
340117ac:	7961      	ldrb	r1, [r4, #5]
340117ae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
340117b2:	f8c2 3848 	str.w	r3, [r2, #2120]	@ 0x848
  return HAL_OK;
340117b6:	e7bf      	b.n	34011738 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xc>
340117b8:	3402f13d 	.word	0x3402f13d

340117bc <HAL_DCMIPP_PIPE_EnableISPExposure>:
{
340117bc:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340117be:	b130      	cbz	r0, 340117ce <HAL_DCMIPP_PIPE_EnableISPExposure+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340117c0:	2902      	cmp	r1, #2
340117c2:	d906      	bls.n	340117d2 <HAL_DCMIPP_PIPE_EnableISPExposure+0x16>
340117c4:	f241 7101 	movw	r1, #5889	@ 0x1701
340117c8:	4807      	ldr	r0, [pc, #28]	@ (340117e8 <HAL_DCMIPP_PIPE_EnableISPExposure+0x2c>)
340117ca:	f00d ff19 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
340117ce:	2001      	movs	r0, #1
}
340117d0:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340117d2:	2901      	cmp	r1, #1
340117d4:	d1fb      	bne.n	340117ce <HAL_DCMIPP_PIPE_EnableISPExposure+0x12>
    SET_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
340117d6:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340117d8:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
340117da:	f8d2 3844 	ldr.w	r3, [r2, #2116]	@ 0x844
340117de:	f043 0301 	orr.w	r3, r3, #1
340117e2:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
  return HAL_OK;
340117e6:	e7f3      	b.n	340117d0 <HAL_DCMIPP_PIPE_EnableISPExposure+0x14>
340117e8:	3402f13d 	.word	0x3402f13d

340117ec <HAL_DCMIPP_PIPE_DisableISPExposure>:
{
340117ec:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340117ee:	b130      	cbz	r0, 340117fe <HAL_DCMIPP_PIPE_DisableISPExposure+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340117f0:	2902      	cmp	r1, #2
340117f2:	d906      	bls.n	34011802 <HAL_DCMIPP_PIPE_DisableISPExposure+0x16>
340117f4:	f241 711d 	movw	r1, #5917	@ 0x171d
340117f8:	4807      	ldr	r0, [pc, #28]	@ (34011818 <HAL_DCMIPP_PIPE_DisableISPExposure+0x2c>)
340117fa:	f00d ff01 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
340117fe:	2001      	movs	r0, #1
}
34011800:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011802:	2901      	cmp	r1, #1
34011804:	d1fb      	bne.n	340117fe <HAL_DCMIPP_PIPE_DisableISPExposure+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
34011806:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011808:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
3401180a:	f8d2 3844 	ldr.w	r3, [r2, #2116]	@ 0x844
3401180e:	f023 0301 	bic.w	r3, r3, #1
34011812:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
  return HAL_OK;
34011816:	e7f3      	b.n	34011800 <HAL_DCMIPP_PIPE_DisableISPExposure+0x14>
34011818:	3402f13d 	.word	0x3402f13d

3401181c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>:
{
3401181c:	b570      	push	{r4, r5, r6, lr}
3401181e:	460e      	mov	r6, r1
34011820:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pContrastConfig == NULL))
34011822:	4605      	mov	r5, r0
34011824:	b908      	cbnz	r0, 3401182a <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xe>
    return HAL_ERROR;
34011826:	2001      	movs	r0, #1
}
34011828:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pContrastConfig == NULL))
3401182a:	2a00      	cmp	r2, #0
3401182c:	d0fb      	beq.n	34011826 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401182e:	2902      	cmp	r1, #2
34011830:	d904      	bls.n	3401183c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x20>
34011832:	f241 713b 	movw	r1, #5947	@ 0x173b
34011836:	4839      	ldr	r0, [pc, #228]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011838:	f00d fee2 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_0));
3401183c:	7823      	ldrb	r3, [r4, #0]
3401183e:	2b3f      	cmp	r3, #63	@ 0x3f
34011840:	d904      	bls.n	3401184c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x30>
34011842:	f241 713c 	movw	r1, #5948	@ 0x173c
34011846:	4835      	ldr	r0, [pc, #212]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011848:	f00d feda 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_32));
3401184c:	7863      	ldrb	r3, [r4, #1]
3401184e:	2b3f      	cmp	r3, #63	@ 0x3f
34011850:	d904      	bls.n	3401185c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x40>
34011852:	f241 713d 	movw	r1, #5949	@ 0x173d
34011856:	4831      	ldr	r0, [pc, #196]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011858:	f00d fed2 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_64));
3401185c:	78a3      	ldrb	r3, [r4, #2]
3401185e:	2b3f      	cmp	r3, #63	@ 0x3f
34011860:	d904      	bls.n	3401186c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x50>
34011862:	f241 713e 	movw	r1, #5950	@ 0x173e
34011866:	482d      	ldr	r0, [pc, #180]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011868:	f00d feca 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_96));
3401186c:	78e3      	ldrb	r3, [r4, #3]
3401186e:	2b3f      	cmp	r3, #63	@ 0x3f
34011870:	d904      	bls.n	3401187c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x60>
34011872:	f241 713f 	movw	r1, #5951	@ 0x173f
34011876:	4829      	ldr	r0, [pc, #164]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011878:	f00d fec2 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_128));
3401187c:	7923      	ldrb	r3, [r4, #4]
3401187e:	2b3f      	cmp	r3, #63	@ 0x3f
34011880:	d904      	bls.n	3401188c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x70>
34011882:	f44f 51ba 	mov.w	r1, #5952	@ 0x1740
34011886:	4825      	ldr	r0, [pc, #148]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011888:	f00d feba 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_160));
3401188c:	7963      	ldrb	r3, [r4, #5]
3401188e:	2b3f      	cmp	r3, #63	@ 0x3f
34011890:	d904      	bls.n	3401189c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x80>
34011892:	f241 7141 	movw	r1, #5953	@ 0x1741
34011896:	4821      	ldr	r0, [pc, #132]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011898:	f00d feb2 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_192));
3401189c:	79a3      	ldrb	r3, [r4, #6]
3401189e:	2b3f      	cmp	r3, #63	@ 0x3f
340118a0:	d904      	bls.n	340118ac <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x90>
340118a2:	f241 7142 	movw	r1, #5954	@ 0x1742
340118a6:	481d      	ldr	r0, [pc, #116]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
340118a8:	f00d feaa 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_224));
340118ac:	79e3      	ldrb	r3, [r4, #7]
340118ae:	2b3f      	cmp	r3, #63	@ 0x3f
340118b0:	d904      	bls.n	340118bc <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa0>
340118b2:	f241 7143 	movw	r1, #5955	@ 0x1743
340118b6:	4819      	ldr	r0, [pc, #100]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
340118b8:	f00d fea2 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_256));
340118bc:	7a23      	ldrb	r3, [r4, #8]
340118be:	2b3f      	cmp	r3, #63	@ 0x3f
340118c0:	d904      	bls.n	340118cc <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xb0>
340118c2:	f241 7144 	movw	r1, #5956	@ 0x1744
340118c6:	4815      	ldr	r0, [pc, #84]	@ (3401191c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
340118c8:	f00d fe9a 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340118cc:	2e01      	cmp	r6, #1
340118ce:	d1aa      	bne.n	34011826 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_LUM0,
340118d0:	682a      	ldr	r2, [r5, #0]
340118d2:	7821      	ldrb	r1, [r4, #0]
340118d4:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	@ 0x8a0
  return HAL_OK;
340118d8:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_LUM0,
340118da:	f423 43fc 	bic.w	r3, r3, #32256	@ 0x7e00
340118de:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
340118e2:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
    WRITE_REG(hdcmipp->Instance->P1CTCR2, (((uint32_t)pContrastConfig->LUM_32 << DCMIPP_P1CTCR2_LUM1_Pos) |
340118e6:	78a3      	ldrb	r3, [r4, #2]
340118e8:	7861      	ldrb	r1, [r4, #1]
340118ea:	045b      	lsls	r3, r3, #17
340118ec:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
340118f0:	78e1      	ldrb	r1, [r4, #3]
340118f2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
340118f6:	7921      	ldrb	r1, [r4, #4]
340118f8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
340118fc:	f8c2 38a4 	str.w	r3, [r2, #2212]	@ 0x8a4
    WRITE_REG(hdcmipp->Instance->P1CTCR3, (((uint32_t)pContrastConfig->LUM_160 << DCMIPP_P1CTCR3_LUM5_Pos) |
34011900:	79a3      	ldrb	r3, [r4, #6]
34011902:	7961      	ldrb	r1, [r4, #5]
34011904:	045b      	lsls	r3, r3, #17
34011906:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
3401190a:	79e1      	ldrb	r1, [r4, #7]
3401190c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
34011910:	7a21      	ldrb	r1, [r4, #8]
34011912:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
34011916:	f8c2 38a8 	str.w	r3, [r2, #2216]	@ 0x8a8
  return HAL_OK;
3401191a:	e785      	b.n	34011828 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xc>
3401191c:	3402f13d 	.word	0x3402f13d

34011920 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>:
{
34011920:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34011922:	b130      	cbz	r0, 34011932 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011924:	2902      	cmp	r1, #2
34011926:	d906      	bls.n	34011936 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x16>
34011928:	f241 716c 	movw	r1, #5996	@ 0x176c
3401192c:	4807      	ldr	r0, [pc, #28]	@ (3401194c <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x2c>)
3401192e:	f00d fe67 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34011932:	2001      	movs	r0, #1
}
34011934:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011936:	2901      	cmp	r1, #1
34011938:	d1fb      	bne.n	34011932 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x12>
    SET_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
3401193a:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
3401193c:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
3401193e:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	@ 0x8a0
34011942:	f043 0301 	orr.w	r3, r3, #1
34011946:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
  return HAL_OK;
3401194a:	e7f3      	b.n	34011934 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x14>
3401194c:	3402f13d 	.word	0x3402f13d

34011950 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>:
{
34011950:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34011952:	b130      	cbz	r0, 34011962 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011954:	2902      	cmp	r1, #2
34011956:	d906      	bls.n	34011966 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x16>
34011958:	f241 7188 	movw	r1, #6024	@ 0x1788
3401195c:	4807      	ldr	r0, [pc, #28]	@ (3401197c <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x2c>)
3401195e:	f00d fe4f 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34011962:	2001      	movs	r0, #1
}
34011964:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011966:	2901      	cmp	r1, #1
34011968:	d1fb      	bne.n	34011962 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
3401196a:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
3401196c:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
3401196e:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	@ 0x8a0
34011972:	f023 0301 	bic.w	r3, r3, #1
34011976:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
  return HAL_OK;
3401197a:	e7f3      	b.n	34011964 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x14>
3401197c:	3402f13d 	.word	0x3402f13d

34011980 <HAL_DCMIPP_PIPE_SetPitch>:
{
34011980:	b570      	push	{r4, r5, r6, lr}
34011982:	460e      	mov	r6, r1
34011984:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
34011986:	4605      	mov	r5, r0
34011988:	b908      	cbnz	r0, 3401198e <HAL_DCMIPP_PIPE_SetPitch+0xe>
    return HAL_ERROR;
3401198a:	2001      	movs	r0, #1
}
3401198c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401198e:	2902      	cmp	r1, #2
34011990:	d904      	bls.n	3401199c <HAL_DCMIPP_PIPE_SetPitch+0x1c>
34011992:	f241 71d2 	movw	r1, #6098	@ 0x17d2
34011996:	4812      	ldr	r0, [pc, #72]	@ (340119e0 <HAL_DCMIPP_PIPE_SetPitch+0x60>)
34011998:	f00d fe32 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIXEL_PIPE_PITCH(LinePitch));
3401199c:	0723      	lsls	r3, r4, #28
3401199e:	d102      	bne.n	340119a6 <HAL_DCMIPP_PIPE_SetPitch+0x26>
340119a0:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
340119a4:	d304      	bcc.n	340119b0 <HAL_DCMIPP_PIPE_SetPitch+0x30>
340119a6:	f241 71d3 	movw	r1, #6099	@ 0x17d3
340119aa:	480d      	ldr	r0, [pc, #52]	@ (340119e0 <HAL_DCMIPP_PIPE_SetPitch+0x60>)
340119ac:	f00d fe28 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340119b0:	2e01      	cmp	r6, #1
340119b2:	d109      	bne.n	340119c8 <HAL_DCMIPP_PIPE_SetPitch+0x48>
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH, LinePitch << DCMIPP_P1PPM0PR_PITCH_Pos);
340119b4:	682a      	ldr	r2, [r5, #0]
340119b6:	f8d2 39cc 	ldr.w	r3, [r2, #2508]	@ 0x9cc
340119ba:	f36f 030e 	bfc	r3, #0, #15
340119be:	4323      	orrs	r3, r4
340119c0:	f8c2 39cc 	str.w	r3, [r2, #2508]	@ 0x9cc
  return HAL_OK;
340119c4:	2000      	movs	r0, #0
340119c6:	e7e1      	b.n	3401198c <HAL_DCMIPP_PIPE_SetPitch+0xc>
  else if (Pipe == DCMIPP_PIPE2)
340119c8:	2e02      	cmp	r6, #2
340119ca:	d1de      	bne.n	3401198a <HAL_DCMIPP_PIPE_SetPitch+0xa>
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH, LinePitch << DCMIPP_P2PPM0PR_PITCH_Pos);
340119cc:	682a      	ldr	r2, [r5, #0]
340119ce:	f8d2 3dcc 	ldr.w	r3, [r2, #3532]	@ 0xdcc
340119d2:	f36f 030e 	bfc	r3, #0, #15
340119d6:	4323      	orrs	r3, r4
340119d8:	f8c2 3dcc 	str.w	r3, [r2, #3532]	@ 0xdcc
340119dc:	e7f2      	b.n	340119c4 <HAL_DCMIPP_PIPE_SetPitch+0x44>
340119de:	bf00      	nop
340119e0:	3402f13d 	.word	0x3402f13d

340119e4 <HAL_DCMIPP_PIPE_SetPixelPackerFormat>:
{
340119e4:	b570      	push	{r4, r5, r6, lr}
340119e6:	460e      	mov	r6, r1
340119e8:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
340119ea:	4605      	mov	r5, r0
340119ec:	b908      	cbnz	r0, 340119f2 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xe>
    return HAL_ERROR;
340119ee:	2001      	movs	r0, #1
}
340119f0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
340119f2:	2902      	cmp	r1, #2
340119f4:	d917      	bls.n	34011a26 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x42>
340119f6:	f241 71f6 	movw	r1, #6134	@ 0x17f6
340119fa:	4812      	ldr	r0, [pc, #72]	@ (34011a44 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x60>)
340119fc:	f00d fe00 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(PixelPackerFormat));
34011a00:	2c0a      	cmp	r4, #10
34011a02:	d9f4      	bls.n	340119ee <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xa>
34011a04:	f241 71f7 	movw	r1, #6135	@ 0x17f7
34011a08:	480e      	ldr	r0, [pc, #56]	@ (34011a44 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x60>)
34011a0a:	f00d fdf9 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011a0e:	2e01      	cmp	r6, #1
34011a10:	d10c      	bne.n	34011a2c <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x48>
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_FORMAT, PixelPackerFormat);
34011a12:	682a      	ldr	r2, [r5, #0]
34011a14:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
34011a18:	f023 030f 	bic.w	r3, r3, #15
34011a1c:	4323      	orrs	r3, r4
34011a1e:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  return HAL_OK;
34011a22:	2000      	movs	r0, #0
34011a24:	e7e4      	b.n	340119f0 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xc>
  assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(PixelPackerFormat));
34011a26:	2a0a      	cmp	r2, #10
34011a28:	d9f1      	bls.n	34011a0e <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x2a>
34011a2a:	e7eb      	b.n	34011a04 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x20>
  else if (Pipe == DCMIPP_PIPE2)
34011a2c:	2e02      	cmp	r6, #2
34011a2e:	d1de      	bne.n	340119ee <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xa>
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_FORMAT, PixelPackerFormat);
34011a30:	682a      	ldr	r2, [r5, #0]
34011a32:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
34011a36:	f023 030f 	bic.w	r3, r3, #15
34011a3a:	4323      	orrs	r3, r4
34011a3c:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
34011a40:	e7ef      	b.n	34011a22 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x3e>
34011a42:	bf00      	nop
34011a44:	3402f13d 	.word	0x3402f13d

34011a48 <HAL_DCMIPP_PIPE_SetMemoryAddress>:
{
34011a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34011a4a:	460d      	mov	r5, r1
34011a4c:	4616      	mov	r6, r2
34011a4e:	461c      	mov	r4, r3
  if (hdcmipp == NULL)
34011a50:	4607      	mov	r7, r0
34011a52:	b908      	cbnz	r0, 34011a58 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x10>
    return HAL_ERROR;
34011a54:	2001      	movs	r0, #1
}
34011a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011a58:	2902      	cmp	r1, #2
34011a5a:	d912      	bls.n	34011a82 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x3a>
34011a5c:	f641 0165 	movw	r1, #6245	@ 0x1865
34011a60:	481a      	ldr	r0, [pc, #104]	@ (34011acc <HAL_DCMIPP_PIPE_SetMemoryAddress+0x84>)
34011a62:	f00d fdcd 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_MEMORY_ADDRESS(Memory));
34011a66:	2e01      	cmp	r6, #1
34011a68:	d9f4      	bls.n	34011a54 <HAL_DCMIPP_PIPE_SetMemoryAddress+0xc>
34011a6a:	f641 0166 	movw	r1, #6246	@ 0x1866
34011a6e:	4817      	ldr	r0, [pc, #92]	@ (34011acc <HAL_DCMIPP_PIPE_SetMemoryAddress+0x84>)
34011a70:	f00d fdc6 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE0)
34011a74:	b175      	cbz	r5, 34011a94 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x4c>
  else if (Pipe == DCMIPP_PIPE1)
34011a76:	2d01      	cmp	r5, #1
34011a78:	d11a      	bne.n	34011ab0 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x68>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011a7a:	683a      	ldr	r2, [r7, #0]
      WRITE_REG(hdcmipp->Instance->P1PPM0AR2, DstAddress);
34011a7c:	f8c2 49c8 	str.w	r4, [r2, #2504]	@ 0x9c8
34011a80:	e006      	b.n	34011a90 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
  assert_param(IS_DCMIPP_MEMORY_ADDRESS(Memory));
34011a82:	2a01      	cmp	r2, #1
34011a84:	d8f1      	bhi.n	34011a6a <HAL_DCMIPP_PIPE_SetMemoryAddress+0x22>
  if (Pipe == DCMIPP_PIPE0)
34011a86:	6803      	ldr	r3, [r0, #0]
34011a88:	b9c1      	cbnz	r1, 34011abc <HAL_DCMIPP_PIPE_SetMemoryAddress+0x74>
    if (Memory == DCMIPP_MEMORY_ADDRESS_0)
34011a8a:	b91a      	cbnz	r2, 34011a94 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x4c>
      WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
34011a8c:	f8c3 45c4 	str.w	r4, [r3, #1476]	@ 0x5c4
  return HAL_OK;
34011a90:	2000      	movs	r0, #0
34011a92:	e7e0      	b.n	34011a56 <HAL_DCMIPP_PIPE_SetMemoryAddress+0xe>
      if ((hdcmipp->Instance->P0PPCR & DCMIPP_P0PPCR_DBM) == DCMIPP_P0PPCR_DBM)
34011a94:	683b      	ldr	r3, [r7, #0]
34011a96:	f8d3 25c0 	ldr.w	r2, [r3, #1472]	@ 0x5c0
34011a9a:	03d2      	lsls	r2, r2, #15
34011a9c:	d5da      	bpl.n	34011a54 <HAL_DCMIPP_PIPE_SetMemoryAddress+0xc>
        WRITE_REG(hdcmipp->Instance->P0PPM0AR2, DstAddress);
34011a9e:	f8c3 45c8 	str.w	r4, [r3, #1480]	@ 0x5c8
34011aa2:	e7f5      	b.n	34011a90 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011aa4:	461a      	mov	r2, r3
    if (Memory == DCMIPP_MEMORY_ADDRESS_0)
34011aa6:	2e00      	cmp	r6, #0
34011aa8:	d1e8      	bne.n	34011a7c <HAL_DCMIPP_PIPE_SetMemoryAddress+0x34>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011aaa:	f8c3 49c4 	str.w	r4, [r3, #2500]	@ 0x9c4
34011aae:	e7ef      	b.n	34011a90 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
  else if (Pipe == DCMIPP_PIPE2)
34011ab0:	2d02      	cmp	r5, #2
34011ab2:	d1cf      	bne.n	34011a54 <HAL_DCMIPP_PIPE_SetMemoryAddress+0xc>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011ab4:	683a      	ldr	r2, [r7, #0]
      WRITE_REG(hdcmipp->Instance->P2PPM0AR2, DstAddress);
34011ab6:	f8c2 4dc8 	str.w	r4, [r2, #3528]	@ 0xdc8
34011aba:	e7e9      	b.n	34011a90 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
  else if (Pipe == DCMIPP_PIPE1)
34011abc:	2901      	cmp	r1, #1
34011abe:	d0f1      	beq.n	34011aa4 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x5c>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011ac0:	461a      	mov	r2, r3
    if (Memory == DCMIPP_MEMORY_ADDRESS_0)
34011ac2:	2e00      	cmp	r6, #0
34011ac4:	d1f7      	bne.n	34011ab6 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x6e>
      WRITE_REG(hdcmipp->Instance->P2PPM0AR1, DstAddress);
34011ac6:	f8c3 4dc4 	str.w	r4, [r3, #3524]	@ 0xdc4
34011aca:	e7e1      	b.n	34011a90 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
34011acc:	3402f13d 	.word	0x3402f13d

34011ad0 <HAL_DCMIPP_PIPE_EnableRedBlueSwap>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011ad0:	2902      	cmp	r1, #2
{
34011ad2:	b538      	push	{r3, r4, r5, lr}
34011ad4:	4604      	mov	r4, r0
34011ad6:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011ad8:	d904      	bls.n	34011ae4 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x14>
34011ada:	f641 1139 	movw	r1, #6457	@ 0x1939
34011ade:	480f      	ldr	r0, [pc, #60]	@ (34011b1c <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x4c>)
34011ae0:	f00d fd8e 	bl	3401f600 <assert_failed>
  if (hdcmipp == NULL)
34011ae4:	b1bc      	cbz	r4, 34011b16 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x46>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34011ae6:	7923      	ldrb	r3, [r4, #4]
34011ae8:	2b02      	cmp	r3, #2
34011aea:	d108      	bne.n	34011afe <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x2e>
    if (Pipe == DCMIPP_PIPE1)
34011aec:	2d01      	cmp	r5, #1
34011aee:	d108      	bne.n	34011b02 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x32>
      SET_BIT(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_SWAPRB);
34011af0:	6822      	ldr	r2, [r4, #0]
34011af2:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
34011af6:	f043 0310 	orr.w	r3, r3, #16
34011afa:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  return HAL_OK;
34011afe:	2000      	movs	r0, #0
}
34011b00:	bd38      	pop	{r3, r4, r5, pc}
    else if (Pipe == DCMIPP_PIPE2)
34011b02:	2d02      	cmp	r5, #2
34011b04:	d107      	bne.n	34011b16 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x46>
      SET_BIT(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_SWAPRB);
34011b06:	6822      	ldr	r2, [r4, #0]
34011b08:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
34011b0c:	f043 0310 	orr.w	r3, r3, #16
34011b10:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
34011b14:	e7f3      	b.n	34011afe <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x2e>
    return HAL_ERROR;
34011b16:	2001      	movs	r0, #1
34011b18:	e7f2      	b.n	34011b00 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x30>
34011b1a:	bf00      	nop
34011b1c:	3402f13d 	.word	0x3402f13d

34011b20 <HAL_DCMIPP_PIPE_DisableRedBlueSwap>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011b20:	2902      	cmp	r1, #2
{
34011b22:	b538      	push	{r3, r4, r5, lr}
34011b24:	4604      	mov	r4, r0
34011b26:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011b28:	d904      	bls.n	34011b34 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x14>
34011b2a:	f641 115b 	movw	r1, #6491	@ 0x195b
34011b2e:	480f      	ldr	r0, [pc, #60]	@ (34011b6c <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x4c>)
34011b30:	f00d fd66 	bl	3401f600 <assert_failed>
  if (hdcmipp == NULL)
34011b34:	b1bc      	cbz	r4, 34011b66 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x46>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34011b36:	7923      	ldrb	r3, [r4, #4]
34011b38:	2b02      	cmp	r3, #2
34011b3a:	d108      	bne.n	34011b4e <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x2e>
    if (Pipe == DCMIPP_PIPE1)
34011b3c:	2d01      	cmp	r5, #1
34011b3e:	d108      	bne.n	34011b52 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x32>
      CLEAR_BIT(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_SWAPRB);
34011b40:	6822      	ldr	r2, [r4, #0]
34011b42:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
34011b46:	f023 0310 	bic.w	r3, r3, #16
34011b4a:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  return HAL_OK;
34011b4e:	2000      	movs	r0, #0
}
34011b50:	bd38      	pop	{r3, r4, r5, pc}
    else if (Pipe == DCMIPP_PIPE2)
34011b52:	2d02      	cmp	r5, #2
34011b54:	d107      	bne.n	34011b66 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x46>
      CLEAR_BIT(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_SWAPRB);
34011b56:	6822      	ldr	r2, [r4, #0]
34011b58:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
34011b5c:	f023 0310 	bic.w	r3, r3, #16
34011b60:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
34011b64:	e7f3      	b.n	34011b4e <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x2e>
    return HAL_ERROR;
34011b66:	2001      	movs	r0, #1
34011b68:	e7f2      	b.n	34011b50 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x30>
34011b6a:	bf00      	nop
34011b6c:	3402f13d 	.word	0x3402f13d

34011b70 <HAL_DCMIPP_PIPE_EnableLineEvent>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011b70:	2902      	cmp	r1, #2
{
34011b72:	b570      	push	{r4, r5, r6, lr}
34011b74:	4606      	mov	r6, r0
34011b76:	460d      	mov	r5, r1
34011b78:	4614      	mov	r4, r2
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011b7a:	d907      	bls.n	34011b8c <HAL_DCMIPP_PIPE_EnableLineEvent+0x1c>
34011b7c:	f641 11c9 	movw	r1, #6601	@ 0x19c9
34011b80:	4826      	ldr	r0, [pc, #152]	@ (34011c1c <HAL_DCMIPP_PIPE_EnableLineEvent+0xac>)
34011b82:	f00d fd3d 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_MULTILINE(Line));
34011b86:	b914      	cbnz	r4, 34011b8e <HAL_DCMIPP_PIPE_EnableLineEvent+0x1e>
    return HAL_ERROR;
34011b88:	2001      	movs	r0, #1
}
34011b8a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE_MULTILINE(Line));
34011b8c:	b122      	cbz	r2, 34011b98 <HAL_DCMIPP_PIPE_EnableLineEvent+0x28>
34011b8e:	f424 4380 	bic.w	r3, r4, #16384	@ 0x4000
34011b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34011b96:	d110      	bne.n	34011bba <HAL_DCMIPP_PIPE_EnableLineEvent+0x4a>
  if (Pipe == DCMIPP_PIPE0)
34011b98:	bb15      	cbnz	r5, 34011be0 <HAL_DCMIPP_PIPE_EnableLineEvent+0x70>
    MODIFY_REG(hdcmipp->Instance->P0PPCR, DCMIPP_P0PPCR_LINEMULT, Line);
34011b9a:	6832      	ldr	r2, [r6, #0]
34011b9c:	f8d2 35c0 	ldr.w	r3, [r2, #1472]	@ 0x5c0
34011ba0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
34011ba4:	4323      	orrs	r3, r4
34011ba6:	f8c2 35c0 	str.w	r3, [r2, #1472]	@ 0x5c0
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LINE);
34011baa:	f8d2 33f0 	ldr.w	r3, [r2, #1008]	@ 0x3f0
34011bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  return HAL_OK;
34011bb2:	2000      	movs	r0, #0
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LINE);
34011bb4:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
34011bb8:	e7e7      	b.n	34011b8a <HAL_DCMIPP_PIPE_EnableLineEvent+0x1a>
  assert_param(IS_DCMIPP_PIPE_MULTILINE(Line));
34011bba:	f424 4300 	bic.w	r3, r4, #32768	@ 0x8000
34011bbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34011bc2:	d0e9      	beq.n	34011b98 <HAL_DCMIPP_PIPE_EnableLineEvent+0x28>
34011bc4:	f424 5300 	bic.w	r3, r4, #8192	@ 0x2000
34011bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34011bcc:	d0e4      	beq.n	34011b98 <HAL_DCMIPP_PIPE_EnableLineEvent+0x28>
34011bce:	f5b4 4f60 	cmp.w	r4, #57344	@ 0xe000
34011bd2:	d0e1      	beq.n	34011b98 <HAL_DCMIPP_PIPE_EnableLineEvent+0x28>
34011bd4:	f641 11ca 	movw	r1, #6602	@ 0x19ca
34011bd8:	4810      	ldr	r0, [pc, #64]	@ (34011c1c <HAL_DCMIPP_PIPE_EnableLineEvent+0xac>)
34011bda:	f00d fd11 	bl	3401f600 <assert_failed>
34011bde:	e7db      	b.n	34011b98 <HAL_DCMIPP_PIPE_EnableLineEvent+0x28>
  else if (Pipe == DCMIPP_PIPE1)
34011be0:	2d01      	cmp	r5, #1
34011be2:	d10c      	bne.n	34011bfe <HAL_DCMIPP_PIPE_EnableLineEvent+0x8e>
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_LINEMULT, Line);
34011be4:	6832      	ldr	r2, [r6, #0]
34011be6:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
34011bea:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
34011bee:	4323      	orrs	r3, r4
34011bf0:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_LINE);
34011bf4:	f8d2 33f0 	ldr.w	r3, [r2, #1008]	@ 0x3f0
34011bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34011bfc:	e7d9      	b.n	34011bb2 <HAL_DCMIPP_PIPE_EnableLineEvent+0x42>
  else if (Pipe == DCMIPP_PIPE2)
34011bfe:	2d02      	cmp	r5, #2
34011c00:	d1c2      	bne.n	34011b88 <HAL_DCMIPP_PIPE_EnableLineEvent+0x18>
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_LINEMULT, Line);
34011c02:	6832      	ldr	r2, [r6, #0]
34011c04:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
34011c08:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
34011c0c:	4323      	orrs	r3, r4
34011c0e:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_LINE);
34011c12:	f8d2 33f0 	ldr.w	r3, [r2, #1008]	@ 0x3f0
34011c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
34011c1a:	e7ca      	b.n	34011bb2 <HAL_DCMIPP_PIPE_EnableLineEvent+0x42>
34011c1c:	3402f13d 	.word	0x3402f13d

34011c20 <HAL_DCMIPP_PIPE_DisableLineEvent>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011c20:	2902      	cmp	r1, #2
{
34011c22:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011c24:	d906      	bls.n	34011c34 <HAL_DCMIPP_PIPE_DisableLineEvent+0x14>
34011c26:	480e      	ldr	r0, [pc, #56]	@ (34011c60 <HAL_DCMIPP_PIPE_DisableLineEvent+0x40>)
34011c28:	f641 11f3 	movw	r1, #6643	@ 0x19f3
34011c2c:	f00d fce8 	bl	3401f600 <assert_failed>
    return HAL_ERROR;
34011c30:	2001      	movs	r0, #1
}
34011c32:	bd08      	pop	{r3, pc}
    __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LINE);
34011c34:	6803      	ldr	r3, [r0, #0]
  if (Pipe == DCMIPP_PIPE0)
34011c36:	b961      	cbnz	r1, 34011c52 <HAL_DCMIPP_PIPE_DisableLineEvent+0x32>
    __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LINE);
34011c38:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34011c3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
  return HAL_OK;
34011c40:	2000      	movs	r0, #0
    __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LINE);
34011c42:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
34011c46:	e7f4      	b.n	34011c32 <HAL_DCMIPP_PIPE_DisableLineEvent+0x12>
    __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_LINE);
34011c48:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34011c4c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34011c50:	e7f6      	b.n	34011c40 <HAL_DCMIPP_PIPE_DisableLineEvent+0x20>
  else if (Pipe == DCMIPP_PIPE1)
34011c52:	2901      	cmp	r1, #1
34011c54:	d0f8      	beq.n	34011c48 <HAL_DCMIPP_PIPE_DisableLineEvent+0x28>
    __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_LINE);
34011c56:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34011c5a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
34011c5e:	e7ef      	b.n	34011c40 <HAL_DCMIPP_PIPE_DisableLineEvent+0x20>
34011c60:	3402f13d 	.word	0x3402f13d

34011c64 <HAL_DCMIPP_PIPE_CSI_EnableShare>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011c64:	2902      	cmp	r1, #2
{
34011c66:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011c68:	d906      	bls.n	34011c78 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x14>
34011c6a:	f641 217d 	movw	r1, #6781	@ 0x1a7d
34011c6e:	480a      	ldr	r0, [pc, #40]	@ (34011c98 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x34>)
34011c70:	f00d fcc6 	bl	3401f600 <assert_failed>
      return HAL_ERROR;
34011c74:	2001      	movs	r0, #1
}
34011c76:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE2)
34011c78:	d1fc      	bne.n	34011c74 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x10>
    tmp1 = hdcmipp->Instance->P2FSCR;
34011c7a:	6803      	ldr	r3, [r0, #0]
34011c7c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
    tmp2 = hdcmipp->Instance->P1FSCR;
34011c80:	f8d3 1804 	ldr.w	r1, [r3, #2052]	@ 0x804
    if (((tmp1 & DCMIPP_P2FSCR_PIPEN) == DCMIPP_P2FSCR_PIPEN) || ((tmp2 & DCMIPP_P1FSCR_PIPEN) == DCMIPP_P1FSCR_PIPEN))
34011c84:	430a      	orrs	r2, r1
34011c86:	d4f5      	bmi.n	34011c74 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x10>
      CLEAR_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEDIFF);
34011c88:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
  return HAL_OK;
34011c8c:	2000      	movs	r0, #0
      CLEAR_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEDIFF);
34011c8e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
34011c92:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
  return HAL_OK;
34011c96:	e7ee      	b.n	34011c76 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x12>
34011c98:	3402f13d 	.word	0x3402f13d

34011c9c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>:
{
34011c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34011c9e:	460e      	mov	r6, r1
34011ca0:	4615      	mov	r5, r2
34011ca2:	461c      	mov	r4, r3
  if ((hdcmipp == NULL) || (pCounter == NULL))
34011ca4:	4607      	mov	r7, r0
34011ca6:	b908      	cbnz	r0, 34011cac <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x10>
    return HAL_ERROR;
34011ca8:	2001      	movs	r0, #1
}
34011caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdcmipp == NULL) || (pCounter == NULL))
34011cac:	2b00      	cmp	r3, #0
34011cae:	d0fb      	beq.n	34011ca8 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xc>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011cb0:	2902      	cmp	r1, #2
34011cb2:	d904      	bls.n	34011cbe <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x22>
34011cb4:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
34011cb8:	4810      	ldr	r0, [pc, #64]	@ (34011cfc <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x60>)
34011cba:	f00d fca1 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
34011cbe:	1e6b      	subs	r3, r5, #1
34011cc0:	2b02      	cmp	r3, #2
34011cc2:	d908      	bls.n	34011cd6 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x3a>
34011cc4:	f641 4101 	movw	r1, #7169	@ 0x1c01
34011cc8:	480c      	ldr	r0, [pc, #48]	@ (34011cfc <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x60>)
34011cca:	f00d fc99 	bl	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011cce:	2e01      	cmp	r6, #1
34011cd0:	d1ea      	bne.n	34011ca8 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xc>
  return HAL_OK;
34011cd2:	2000      	movs	r0, #0
34011cd4:	e7e9      	b.n	34011caa <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xe>
  if (Pipe == DCMIPP_PIPE1)
34011cd6:	2e01      	cmp	r6, #1
34011cd8:	d1e6      	bne.n	34011ca8 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xc>
    switch (ModuleID)
34011cda:	2d02      	cmp	r5, #2
34011cdc:	683b      	ldr	r3, [r7, #0]
34011cde:	d007      	beq.n	34011cf0 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x54>
34011ce0:	2d03      	cmp	r5, #3
34011ce2:	d008      	beq.n	34011cf6 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x5a>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST1SR & DCMIPP_P1ST1SR_ACCU));
34011ce4:	f8d3 3864 	ldr.w	r3, [r3, #2148]	@ 0x864
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST2SR & DCMIPP_P1ST2SR_ACCU));
34011ce8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34011cec:	6023      	str	r3, [r4, #0]
        break;
34011cee:	e7f0      	b.n	34011cd2 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x36>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST2SR & DCMIPP_P1ST2SR_ACCU));
34011cf0:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
34011cf4:	e7f8      	b.n	34011ce8 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x4c>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST3SR & DCMIPP_P1ST3SR_ACCU));
34011cf6:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
34011cfa:	e7f5      	b.n	34011ce8 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x4c>
34011cfc:	3402f13d 	.word	0x3402f13d

34011d00 <HAL_DCMIPP_PIPE_GetISPExposureConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011d00:	2902      	cmp	r1, #2
34011d02:	d904      	bls.n	34011d0e <HAL_DCMIPP_PIPE_GetISPExposureConfig+0xe>
34011d04:	f641 41e6 	movw	r1, #7398	@ 0x1ce6
34011d08:	480c      	ldr	r0, [pc, #48]	@ (34011d3c <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x3c>)
34011d0a:	f00d bc79 	b.w	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011d0e:	2901      	cmp	r1, #1
34011d10:	d113      	bne.n	34011d3a <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x3a>
    tmp = READ_REG(hdcmipp->Instance->P1EXCR2);
34011d12:	6801      	ldr	r1, [r0, #0]
34011d14:	f8d1 3848 	ldr.w	r3, [r1, #2120]	@ 0x848
    pExposureConfig->MultiplierBlue  = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTB) >> DCMIPP_P1EXCR2_MULTB_Pos);
34011d18:	0918      	lsrs	r0, r3, #4
34011d1a:	7150      	strb	r0, [r2, #5]
    pExposureConfig->ShiftBlue       = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFB) >> DCMIPP_P1EXCR2_SHFB_Pos);
34011d1c:	f3c3 3002 	ubfx	r0, r3, #12, #3
34011d20:	7110      	strb	r0, [r2, #4]
    pExposureConfig->ShiftGreen      = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFG) >> DCMIPP_P1EXCR2_SHFG_Pos);
34011d22:	f3c3 7002 	ubfx	r0, r3, #28, #3
    pExposureConfig->MultiplierGreen = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTG) >> DCMIPP_P1EXCR2_MULTG_Pos);
34011d26:	0d1b      	lsrs	r3, r3, #20
    pExposureConfig->ShiftGreen      = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFG) >> DCMIPP_P1EXCR2_SHFG_Pos);
34011d28:	7090      	strb	r0, [r2, #2]
    pExposureConfig->MultiplierGreen = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTG) >> DCMIPP_P1EXCR2_MULTG_Pos);
34011d2a:	70d3      	strb	r3, [r2, #3]
    tmp = READ_REG(hdcmipp->Instance->P1EXCR1);
34011d2c:	f8d1 3844 	ldr.w	r3, [r1, #2116]	@ 0x844
    pExposureConfig->MultiplierRed   = (uint8_t)((tmp & DCMIPP_P1EXCR1_MULTR) >> DCMIPP_P1EXCR1_MULTR_Pos);
34011d30:	0d19      	lsrs	r1, r3, #20
    pExposureConfig->ShiftRed        = (uint8_t)((tmp & DCMIPP_P1EXCR1_SHFR) >> DCMIPP_P1EXCR1_SHFR_Pos);
34011d32:	f3c3 7302 	ubfx	r3, r3, #28, #3
    pExposureConfig->MultiplierRed   = (uint8_t)((tmp & DCMIPP_P1EXCR1_MULTR) >> DCMIPP_P1EXCR1_MULTR_Pos);
34011d36:	7051      	strb	r1, [r2, #1]
    pExposureConfig->ShiftRed        = (uint8_t)((tmp & DCMIPP_P1EXCR1_SHFR) >> DCMIPP_P1EXCR1_SHFR_Pos);
34011d38:	7013      	strb	r3, [r2, #0]
}
34011d3a:	4770      	bx	lr
34011d3c:	3402f13d 	.word	0x3402f13d

34011d40 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011d40:	2902      	cmp	r1, #2
{
34011d42:	b470      	push	{r4, r5, r6}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011d44:	d905      	bls.n	34011d52 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x12>
}
34011d46:	bc70      	pop	{r4, r5, r6}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011d48:	f641 511f 	movw	r1, #7455	@ 0x1d1f
34011d4c:	484a      	ldr	r0, [pc, #296]	@ (34011e78 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x138>)
34011d4e:	f00d bc57 	b.w	3401f600 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011d52:	2901      	cmp	r1, #1
34011d54:	f040 808d 	bne.w	34011e72 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x132>
    tmp = (uint16_t)READ_REG(hdcmipp->Instance->P1CCCR);
34011d58:	6803      	ldr	r3, [r0, #0]
34011d5a:	f8d3 1880 	ldr.w	r1, [r3, #2176]	@ 0x880
                                                 ? ENABLE : DISABLE;
34011d5e:	f3c1 0080 	ubfx	r0, r1, #2, #1
    pColorConversionConfig->OutputSamplesType  = (uint8_t)(tmp & DCMIPP_P1CCCR_TYPE);
34011d62:	f001 0102 	and.w	r1, r1, #2
    pColorConversionConfig->ClampOutputSamples = (((tmp & DCMIPP_P1CCCR_CLAMP) >> DCMIPP_P1YUVCR_CLAMP_Pos) != 0U)
34011d66:	7010      	strb	r0, [r2, #0]
    pColorConversionConfig->OutputSamplesType  = (uint8_t)(tmp & DCMIPP_P1CCCR_TYPE);
34011d68:	7051      	strb	r1, [r2, #1]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RG) >> DCMIPP_P1CCRR1_RG_Pos);
34011d6a:	f8d3 4884 	ldr.w	r4, [r3, #2180]	@ 0x884
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011d6e:	4943      	ldr	r1, [pc, #268]	@ (34011e7c <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x13c>)
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RG) >> DCMIPP_P1CCRR1_RG_Pos);
34011d70:	f3c4 400a 	ubfx	r0, r4, #16, #11
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011d74:	ea40 0501 	orr.w	r5, r0, r1
34011d78:	f014 6f80 	tst.w	r4, #67108864	@ 0x4000000
34011d7c:	bf18      	it	ne
34011d7e:	4628      	movne	r0, r5
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR) >> DCMIPP_P1CCRR1_RR_Pos);
34011d80:	f8d3 4884 	ldr.w	r4, [r3, #2180]	@ 0x884
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011d84:	8090      	strh	r0, [r2, #4]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR) >> DCMIPP_P1CCRR1_RR_Pos);
34011d86:	f3c4 000a 	ubfx	r0, r4, #0, #11
    pColorConversionConfig->RR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011d8a:	ea40 0501 	orr.w	r5, r0, r1
34011d8e:	f414 6f80 	tst.w	r4, #1024	@ 0x400
34011d92:	bf18      	it	ne
34011d94:	4628      	movne	r0, r5
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RA) >> DCMIPP_P1CCRR2_RA_Pos);
34011d96:	f8d3 5888 	ldr.w	r5, [r3, #2184]	@ 0x888
    pColorConversionConfig->RR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011d9a:	8050      	strh	r0, [r2, #2]
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011d9c:	4838      	ldr	r0, [pc, #224]	@ (34011e80 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x140>)
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RA) >> DCMIPP_P1CCRR2_RA_Pos);
34011d9e:	f3c5 4409 	ubfx	r4, r5, #16, #10
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011da2:	ea44 0600 	orr.w	r6, r4, r0
34011da6:	f015 7f00 	tst.w	r5, #33554432	@ 0x2000000
34011daa:	bf18      	it	ne
34011dac:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB) >> DCMIPP_P1CCRR2_RB_Pos);
34011dae:	f8d3 5888 	ldr.w	r5, [r3, #2184]	@ 0x888
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011db2:	8114      	strh	r4, [r2, #8]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB) >> DCMIPP_P1CCRR2_RB_Pos);
34011db4:	f3c5 040a 	ubfx	r4, r5, #0, #11
    pColorConversionConfig->RB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011db8:	ea44 0601 	orr.w	r6, r4, r1
34011dbc:	f415 6f80 	tst.w	r5, #1024	@ 0x400
34011dc0:	bf18      	it	ne
34011dc2:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GG) >> DCMIPP_P1CCGR1_GG_Pos);
34011dc4:	f8d3 588c 	ldr.w	r5, [r3, #2188]	@ 0x88c
    pColorConversionConfig->RB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011dc8:	80d4      	strh	r4, [r2, #6]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GG) >> DCMIPP_P1CCGR1_GG_Pos);
34011dca:	f3c5 440a 	ubfx	r4, r5, #16, #11
    pColorConversionConfig->GG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011dce:	ea44 0601 	orr.w	r6, r4, r1
34011dd2:	f015 6f80 	tst.w	r5, #67108864	@ 0x4000000
34011dd6:	bf18      	it	ne
34011dd8:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR) >> DCMIPP_P1CCGR1_GR_Pos);
34011dda:	f8d3 588c 	ldr.w	r5, [r3, #2188]	@ 0x88c
    pColorConversionConfig->GG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011dde:	8194      	strh	r4, [r2, #12]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR) >> DCMIPP_P1CCGR1_GR_Pos);
34011de0:	f3c5 040a 	ubfx	r4, r5, #0, #11
    pColorConversionConfig->GR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011de4:	ea44 0601 	orr.w	r6, r4, r1
34011de8:	f415 6f80 	tst.w	r5, #1024	@ 0x400
34011dec:	bf18      	it	ne
34011dee:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GA) >> DCMIPP_P1CCGR2_GA_Pos);
34011df0:	f8d3 5890 	ldr.w	r5, [r3, #2192]	@ 0x890
    pColorConversionConfig->GR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011df4:	8154      	strh	r4, [r2, #10]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GA) >> DCMIPP_P1CCGR2_GA_Pos);
34011df6:	f3c5 4409 	ubfx	r4, r5, #16, #10
    pColorConversionConfig->GA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011dfa:	ea44 0600 	orr.w	r6, r4, r0
34011dfe:	f015 7f00 	tst.w	r5, #33554432	@ 0x2000000
34011e02:	bf18      	it	ne
34011e04:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB) >> DCMIPP_P1CCGR2_GB_Pos);
34011e06:	f8d3 5890 	ldr.w	r5, [r3, #2192]	@ 0x890
    pColorConversionConfig->GA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011e0a:	8214      	strh	r4, [r2, #16]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB) >> DCMIPP_P1CCGR2_GB_Pos);
34011e0c:	f3c5 040a 	ubfx	r4, r5, #0, #11
    pColorConversionConfig->GB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e10:	ea44 0601 	orr.w	r6, r4, r1
34011e14:	f415 6f80 	tst.w	r5, #1024	@ 0x400
34011e18:	bf18      	it	ne
34011e1a:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BA) >> DCMIPP_P1CCBR2_BA_Pos);
34011e1c:	f8d3 5898 	ldr.w	r5, [r3, #2200]	@ 0x898
    pColorConversionConfig->GB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e20:	81d4      	strh	r4, [r2, #14]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BA) >> DCMIPP_P1CCBR2_BA_Pos);
34011e22:	f3c5 4409 	ubfx	r4, r5, #16, #10
    pColorConversionConfig->BA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011e26:	4320      	orrs	r0, r4
34011e28:	f015 7f00 	tst.w	r5, #33554432	@ 0x2000000
34011e2c:	bf18      	it	ne
34011e2e:	4604      	movne	r4, r0
34011e30:	8314      	strh	r4, [r2, #24]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB) >> DCMIPP_P1CCBR2_BB_Pos);
34011e32:	f8d3 4898 	ldr.w	r4, [r3, #2200]	@ 0x898
34011e36:	f3c4 000a 	ubfx	r0, r4, #0, #11
    pColorConversionConfig->BB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e3a:	ea40 0501 	orr.w	r5, r0, r1
34011e3e:	f414 6f80 	tst.w	r4, #1024	@ 0x400
34011e42:	bf18      	it	ne
34011e44:	4628      	movne	r0, r5
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BG) >> DCMIPP_P1CCBR1_BG_Pos);
34011e46:	f8d3 4894 	ldr.w	r4, [r3, #2196]	@ 0x894
    pColorConversionConfig->BB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e4a:	82d0      	strh	r0, [r2, #22]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BG) >> DCMIPP_P1CCBR1_BG_Pos);
34011e4c:	f3c4 400a 	ubfx	r0, r4, #16, #11
    pColorConversionConfig->BG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e50:	ea40 0501 	orr.w	r5, r0, r1
34011e54:	f014 6f80 	tst.w	r4, #67108864	@ 0x4000000
34011e58:	bf18      	it	ne
34011e5a:	4628      	movne	r0, r5
34011e5c:	8290      	strh	r0, [r2, #20]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR) >> DCMIPP_P1CCBR1_BR_Pos);
34011e5e:	f8d3 0894 	ldr.w	r0, [r3, #2196]	@ 0x894
34011e62:	f3c0 030a 	ubfx	r3, r0, #0, #11
    pColorConversionConfig->BR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e66:	4319      	orrs	r1, r3
34011e68:	f410 6f80 	tst.w	r0, #1024	@ 0x400
34011e6c:	bf18      	it	ne
34011e6e:	460b      	movne	r3, r1
34011e70:	8253      	strh	r3, [r2, #18]
}
34011e72:	bc70      	pop	{r4, r5, r6}
34011e74:	4770      	bx	lr
34011e76:	bf00      	nop
34011e78:	3402f13d 	.word	0x3402f13d
34011e7c:	fffff800 	.word	0xfffff800
34011e80:	fffffc00 	.word	0xfffffc00

34011e84 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>:
{
34011e84:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011e86:	4a10      	ldr	r2, [pc, #64]	@ (34011ec8 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x44>)
34011e88:	6803      	ldr	r3, [r0, #0]
{
34011e8a:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011e8c:	4293      	cmp	r3, r2
{
34011e8e:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011e90:	d008      	beq.n	34011ea4 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x20>
34011e92:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34011e96:	4293      	cmp	r3, r2
34011e98:	d004      	beq.n	34011ea4 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x20>
34011e9a:	f641 519b 	movw	r1, #7579	@ 0x1d9b
34011e9e:	480b      	ldr	r0, [pc, #44]	@ (34011ecc <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x48>)
34011ea0:	f00d fbae 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011ea4:	2d02      	cmp	r5, #2
34011ea6:	d906      	bls.n	34011eb6 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x32>
34011ea8:	f641 519c 	movw	r1, #7580	@ 0x1d9c
34011eac:	4807      	ldr	r0, [pc, #28]	@ (34011ecc <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x48>)
34011eae:	f00d fba7 	bl	3401f600 <assert_failed>
    return 0;
34011eb2:	2000      	movs	r0, #0
}
34011eb4:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34011eb6:	2d01      	cmp	r5, #1
34011eb8:	d1fb      	bne.n	34011eb2 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE) == DCMIPP_P1EXCR1_ENABLE) ? 1U : 0U);
34011eba:	6823      	ldr	r3, [r4, #0]
34011ebc:	f8d3 0844 	ldr.w	r0, [r3, #2116]	@ 0x844
34011ec0:	f000 0001 	and.w	r0, r0, #1
34011ec4:	e7f6      	b.n	34011eb4 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x30>
34011ec6:	bf00      	nop
34011ec8:	58002000 	.word	0x58002000
34011ecc:	3402f13d 	.word	0x3402f13d

34011ed0 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>:
{
34011ed0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011ed2:	4a10      	ldr	r2, [pc, #64]	@ (34011f14 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x44>)
34011ed4:	6803      	ldr	r3, [r0, #0]
{
34011ed6:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011ed8:	4293      	cmp	r3, r2
{
34011eda:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011edc:	d008      	beq.n	34011ef0 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x20>
34011ede:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34011ee2:	4293      	cmp	r3, r2
34011ee4:	d004      	beq.n	34011ef0 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x20>
34011ee6:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
34011eea:	480b      	ldr	r0, [pc, #44]	@ (34011f18 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x48>)
34011eec:	f00d fb88 	bl	3401f600 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011ef0:	2d02      	cmp	r5, #2
34011ef2:	d906      	bls.n	34011f02 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x32>
34011ef4:	f641 51c8 	movw	r1, #7624	@ 0x1dc8
34011ef8:	4807      	ldr	r0, [pc, #28]	@ (34011f18 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x48>)
34011efa:	f00d fb81 	bl	3401f600 <assert_failed>
    return 0;
34011efe:	2000      	movs	r0, #0
}
34011f00:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34011f02:	2d01      	cmp	r5, #1
34011f04:	d1fb      	bne.n	34011efe <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE) == DCMIPP_P1CCCR_ENABLE) ? 1U : 0U);
34011f06:	6823      	ldr	r3, [r4, #0]
34011f08:	f8d3 0880 	ldr.w	r0, [r3, #2176]	@ 0x880
34011f0c:	f000 0001 	and.w	r0, r0, #1
34011f10:	e7f6      	b.n	34011f00 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x30>
34011f12:	bf00      	nop
34011f14:	58002000 	.word	0x58002000
34011f18:	3402f13d 	.word	0x3402f13d

34011f1c <HAL_DCMIPP_GetState>:
  return hdcmipp->State;
34011f1c:	7900      	ldrb	r0, [r0, #4]
}
34011f1e:	4770      	bx	lr

34011f20 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
34011f20:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
34011f22:	6804      	ldr	r4, [r0, #0]
34011f24:	9d05      	ldr	r5, [sp, #20]
34011f26:	6c66      	ldr	r6, [r4, #68]	@ 0x44
34011f28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
34011f2c:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
34011f2e:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
34011f32:	4335      	orrs	r5, r6
  if (hdma2d->Init.Mode == DMA2D_R2M)
34011f34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
34011f38:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
34011f3a:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
34011f3c:	d12f      	bne.n	34011f9e <DMA2D_SetConfig+0x7e>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
34011f3e:	6880      	ldr	r0, [r0, #8]
34011f40:	f001 467f 	and.w	r6, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
34011f44:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
34011f48:	f401 427f 	and.w	r2, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
34011f4c:	b2cd      	uxtb	r5, r1

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
34011f4e:	2803      	cmp	r0, #3
34011f50:	d81a      	bhi.n	34011f88 <DMA2D_SetConfig+0x68>
34011f52:	e8df f000 	tbb	[pc, r0]
34011f56:	0204      	.short	0x0204
34011f58:	0e06      	.short	0x0e06
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
    {
      tmp = (tmp3 | tmp2 | tmp4);
34011f5a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
34011f5e:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
34011f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp2 = (tmp2 >> 19U);
34011f62:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
34011f64:	0a92      	lsrs	r2, r2, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
34011f66:	02c9      	lsls	r1, r1, #11
34011f68:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
34011f6c:	ea41 01d5 	orr.w	r1, r1, r5, lsr #3
34011f70:	e7f5      	b.n	34011f5e <DMA2D_SetConfig+0x3e>
      tmp2 = (tmp2 >> 19U);
34011f72:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
34011f74:	0ad2      	lsrs	r2, r2, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
34011f76:	029b      	lsls	r3, r3, #10
34011f78:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
34011f7c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
      tmp1 = (tmp1 >> 31U);
34011f80:	0ff1      	lsrs	r1, r6, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
34011f82:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
34011f86:	e7ea      	b.n	34011f5e <DMA2D_SetConfig+0x3e>
      tmp2 = (tmp2 >> 20U);
34011f88:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
34011f8a:	0b12      	lsrs	r2, r2, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
34011f8c:	021b      	lsls	r3, r3, #8
34011f8e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
34011f92:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
      tmp1 = (tmp1 >> 28U);
34011f96:	0f36      	lsrs	r6, r6, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
34011f98:	ea43 3106 	orr.w	r1, r3, r6, lsl #12
34011f9c:	e7df      	b.n	34011f5e <DMA2D_SetConfig+0x3e>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
34011f9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
34011fa2:	bf0c      	ite	eq
34011fa4:	6161      	streq	r1, [r4, #20]
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
34011fa6:	60e1      	strne	r1, [r4, #12]
}
34011fa8:	e7da      	b.n	34011f60 <DMA2D_SetConfig+0x40>

34011faa <HAL_DMA2D_MspInit>:
}
34011faa:	4770      	bx	lr

34011fac <HAL_DMA2D_Init>:
{
34011fac:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
34011fae:	4604      	mov	r4, r0
34011fb0:	2800      	cmp	r0, #0
34011fb2:	d07d      	beq.n	340120b0 <HAL_DMA2D_Init+0x104>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
34011fb4:	6803      	ldr	r3, [r0, #0]
34011fb6:	4a3f      	ldr	r2, [pc, #252]	@ (340120b4 <HAL_DMA2D_Init+0x108>)
34011fb8:	4293      	cmp	r3, r2
34011fba:	d007      	beq.n	34011fcc <HAL_DMA2D_Init+0x20>
34011fbc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34011fc0:	4293      	cmp	r3, r2
34011fc2:	d003      	beq.n	34011fcc <HAL_DMA2D_Init+0x20>
34011fc4:	21f7      	movs	r1, #247	@ 0xf7
34011fc6:	483c      	ldr	r0, [pc, #240]	@ (340120b8 <HAL_DMA2D_Init+0x10c>)
34011fc8:	f00d fb1a 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
34011fcc:	6863      	ldr	r3, [r4, #4]
34011fce:	f433 3240 	bics.w	r2, r3, #196608	@ 0x30000
34011fd2:	d008      	beq.n	34011fe6 <HAL_DMA2D_Init+0x3a>
34011fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34011fd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34011fdc:	d003      	beq.n	34011fe6 <HAL_DMA2D_Init+0x3a>
34011fde:	21f8      	movs	r1, #248	@ 0xf8
34011fe0:	4835      	ldr	r0, [pc, #212]	@ (340120b8 <HAL_DMA2D_Init+0x10c>)
34011fe2:	f00d fb0d 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
34011fe6:	68a3      	ldr	r3, [r4, #8]
34011fe8:	2b04      	cmp	r3, #4
34011fea:	d903      	bls.n	34011ff4 <HAL_DMA2D_Init+0x48>
34011fec:	21f9      	movs	r1, #249	@ 0xf9
34011fee:	4832      	ldr	r0, [pc, #200]	@ (340120b8 <HAL_DMA2D_Init+0x10c>)
34011ff0:	f00d fb06 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
34011ff4:	68e3      	ldr	r3, [r4, #12]
34011ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34011ffa:	d303      	bcc.n	34012004 <HAL_DMA2D_Init+0x58>
34011ffc:	21fa      	movs	r1, #250	@ 0xfa
34011ffe:	482e      	ldr	r0, [pc, #184]	@ (340120b8 <HAL_DMA2D_Init+0x10c>)
34012000:	f00d fafe 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->Init.AlphaInverted));
34012004:	6923      	ldr	r3, [r4, #16]
34012006:	2b01      	cmp	r3, #1
34012008:	d903      	bls.n	34012012 <HAL_DMA2D_Init+0x66>
3401200a:	21fb      	movs	r1, #251	@ 0xfb
3401200c:	482a      	ldr	r0, [pc, #168]	@ (340120b8 <HAL_DMA2D_Init+0x10c>)
3401200e:	f00d faf7 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->Init.RedBlueSwap));
34012012:	6963      	ldr	r3, [r4, #20]
34012014:	2b01      	cmp	r3, #1
34012016:	d903      	bls.n	34012020 <HAL_DMA2D_Init+0x74>
34012018:	21fc      	movs	r1, #252	@ 0xfc
3401201a:	4827      	ldr	r0, [pc, #156]	@ (340120b8 <HAL_DMA2D_Init+0x10c>)
3401201c:	f00d faf0 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_LOM_MODE(hdma2d->Init.LineOffsetMode));
34012020:	69e3      	ldr	r3, [r4, #28]
34012022:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
34012026:	d003      	beq.n	34012030 <HAL_DMA2D_Init+0x84>
34012028:	21fd      	movs	r1, #253	@ 0xfd
3401202a:	4823      	ldr	r0, [pc, #140]	@ (340120b8 <HAL_DMA2D_Init+0x10c>)
3401202c:	f00d fae8 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_BYTES_SWAP(hdma2d->Init.BytesSwap));
34012030:	69a3      	ldr	r3, [r4, #24]
34012032:	f433 7380 	bics.w	r3, r3, #256	@ 0x100
34012036:	d003      	beq.n	34012040 <HAL_DMA2D_Init+0x94>
34012038:	21fe      	movs	r1, #254	@ 0xfe
3401203a:	481f      	ldr	r0, [pc, #124]	@ (340120b8 <HAL_DMA2D_Init+0x10c>)
3401203c:	f00d fae0 	bl	3401f600 <assert_failed>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
34012040:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
34012044:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
34012048:	b923      	cbnz	r3, 34012054 <HAL_DMA2D_Init+0xa8>
    HAL_DMA2D_MspInit(hdma2d);
3401204a:	4620      	mov	r0, r4
    hdma2d->Lock = HAL_UNLOCKED;
3401204c:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
34012050:	f7ff ffab 	bl	34011faa <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
34012054:	2302      	movs	r3, #2
34012056:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
3401205a:	6823      	ldr	r3, [r4, #0]
3401205c:	69e0      	ldr	r0, [r4, #28]
3401205e:	6819      	ldr	r1, [r3, #0]
34012060:	6862      	ldr	r2, [r4, #4]
34012062:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
34012066:	4302      	orrs	r2, r0
34012068:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3401206c:	430a      	orrs	r2, r1
3401206e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
34012070:	6b59      	ldr	r1, [r3, #52]	@ 0x34
34012072:	69a0      	ldr	r0, [r4, #24]
34012074:	68a2      	ldr	r2, [r4, #8]
34012076:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
3401207a:	4302      	orrs	r2, r0
3401207c:	f021 0101 	bic.w	r1, r1, #1
34012080:	430a      	orrs	r2, r1
34012082:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
34012084:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34012086:	68e1      	ldr	r1, [r4, #12]
34012088:	f36f 020f 	bfc	r2, #0, #16
3401208c:	430a      	orrs	r2, r1
3401208e:	641a      	str	r2, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
34012090:	6b59      	ldr	r1, [r3, #52]	@ 0x34
34012092:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
34012096:	0552      	lsls	r2, r2, #21
34012098:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
3401209c:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
340120a0:	430a      	orrs	r2, r1
340120a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
340120a4:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
340120a6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
340120a8:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
340120aa:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
340120ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
340120b0:	2001      	movs	r0, #1
340120b2:	e7fc      	b.n	340120ae <HAL_DMA2D_Init+0x102>
340120b4:	58021000 	.word	0x58021000
340120b8:	3402f1b4 	.word	0x3402f1b4

340120bc <HAL_DMA2D_Start>:
{
340120bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
340120c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
340120c4:	4604      	mov	r4, r0
  assert_param(IS_DMA2D_LINE(Height));
340120c6:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
{
340120ca:	460e      	mov	r6, r1
340120cc:	4617      	mov	r7, r2
340120ce:	461d      	mov	r5, r3
  assert_param(IS_DMA2D_LINE(Height));
340120d0:	d304      	bcc.n	340120dc <HAL_DMA2D_Start+0x20>
340120d2:	f240 21a9 	movw	r1, #681	@ 0x2a9
340120d6:	4813      	ldr	r0, [pc, #76]	@ (34012124 <HAL_DMA2D_Start+0x68>)
340120d8:	f00d fa92 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_PIXEL(Width));
340120dc:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
340120e0:	d304      	bcc.n	340120ec <HAL_DMA2D_Start+0x30>
340120e2:	f240 21aa 	movw	r1, #682	@ 0x2aa
340120e6:	480f      	ldr	r0, [pc, #60]	@ (34012124 <HAL_DMA2D_Start+0x68>)
340120e8:	f00d fa8a 	bl	3401f600 <assert_failed>
  __HAL_LOCK(hdma2d);
340120ec:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
340120f0:	2002      	movs	r0, #2
340120f2:	2b01      	cmp	r3, #1
340120f4:	d012      	beq.n	3401211c <HAL_DMA2D_Start+0x60>
340120f6:	2301      	movs	r3, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
340120f8:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
340120fc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
34012100:	463a      	mov	r2, r7
34012102:	462b      	mov	r3, r5
34012104:	4620      	mov	r0, r4
34012106:	4631      	mov	r1, r6
34012108:	f8cd 8000 	str.w	r8, [sp]
3401210c:	f7ff ff08 	bl	34011f20 <DMA2D_SetConfig>
  return HAL_OK;
34012110:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
34012112:	6822      	ldr	r2, [r4, #0]
34012114:	6813      	ldr	r3, [r2, #0]
34012116:	f043 0301 	orr.w	r3, r3, #1
3401211a:	6013      	str	r3, [r2, #0]
}
3401211c:	b002      	add	sp, #8
3401211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34012122:	bf00      	nop
34012124:	3402f1b4 	.word	0x3402f1b4

34012128 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
34012128:	2300      	movs	r3, #0
{
3401212a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
3401212c:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
3401212e:	6803      	ldr	r3, [r0, #0]
{
34012130:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
34012132:	681b      	ldr	r3, [r3, #0]
{
34012134:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
34012136:	07db      	lsls	r3, r3, #31
34012138:	d418      	bmi.n	3401216c <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
3401213a:	6822      	ldr	r2, [r4, #0]
3401213c:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
3401213e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34012140:	4313      	orrs	r3, r2
  if (layer_start != 0U)
34012142:	069e      	lsls	r6, r3, #26
34012144:	d506      	bpl.n	34012154 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
34012146:	f00c fec9 	bl	3401eedc <HAL_GetTick>
3401214a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
3401214c:	6823      	ldr	r3, [r4, #0]
3401214e:	685a      	ldr	r2, [r3, #4]
34012150:	06d2      	lsls	r2, r2, #27
34012152:	d53f      	bpl.n	340121d4 <HAL_DMA2D_PollForTransfer+0xac>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
34012154:	2212      	movs	r2, #18
34012156:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
34012158:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
3401215a:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
3401215c:	2301      	movs	r3, #1
3401215e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
34012162:	2300      	movs	r3, #0
34012164:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
34012168:	b002      	add	sp, #8
3401216a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
3401216c:	f00c feb6 	bl	3401eedc <HAL_GetTick>
34012170:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
34012172:	6823      	ldr	r3, [r4, #0]
34012174:	685a      	ldr	r2, [r3, #4]
34012176:	0792      	lsls	r2, r2, #30
34012178:	d4df      	bmi.n	3401213a <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
3401217a:	685a      	ldr	r2, [r3, #4]
3401217c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
3401217e:	9a01      	ldr	r2, [sp, #4]
34012180:	f012 0f21 	tst.w	r2, #33	@ 0x21
34012184:	d014      	beq.n	340121b0 <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
34012186:	9a01      	ldr	r2, [sp, #4]
34012188:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
3401218a:	bf42      	ittt	mi
3401218c:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
3401218e:	f042 0202 	orrmi.w	r2, r2, #2
34012192:	6662      	strmi	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
34012194:	9a01      	ldr	r2, [sp, #4]
34012196:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
34012198:	bf42      	ittt	mi
3401219a:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
3401219c:	f042 0201 	orrmi.w	r2, r2, #1
340121a0:	6662      	strmi	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
340121a2:	2221      	movs	r2, #33	@ 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
340121a4:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
340121a6:	2304      	movs	r3, #4
        return HAL_ERROR;
340121a8:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
340121aa:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
        return HAL_ERROR;
340121ae:	e7d8      	b.n	34012162 <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
340121b0:	1c69      	adds	r1, r5, #1
340121b2:	d0df      	beq.n	34012174 <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
340121b4:	f00c fe92 	bl	3401eedc <HAL_GetTick>
340121b8:	1b80      	subs	r0, r0, r6
340121ba:	42a8      	cmp	r0, r5
340121bc:	d801      	bhi.n	340121c2 <HAL_DMA2D_PollForTransfer+0x9a>
340121be:	2d00      	cmp	r5, #0
340121c0:	d1d7      	bne.n	34012172 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
340121c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          return HAL_TIMEOUT;
340121c4:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
340121c6:	f043 0320 	orr.w	r3, r3, #32
340121ca:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
340121cc:	2303      	movs	r3, #3
340121ce:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
340121d2:	e7c6      	b.n	34012162 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
340121d4:	685a      	ldr	r2, [r3, #4]
340121d6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
340121d8:	9a01      	ldr	r2, [sp, #4]
340121da:	f012 0f29 	tst.w	r2, #41	@ 0x29
340121de:	d016      	beq.n	3401220e <HAL_DMA2D_PollForTransfer+0xe6>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
340121e0:	9a01      	ldr	r2, [sp, #4]
340121e2:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
340121e4:	bf42      	ittt	mi
340121e6:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
340121e8:	f042 0204 	orrmi.w	r2, r2, #4
340121ec:	6662      	strmi	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
340121ee:	9a01      	ldr	r2, [sp, #4]
340121f0:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
340121f2:	bf42      	ittt	mi
340121f4:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
340121f6:	f042 0202 	orrmi.w	r2, r2, #2
340121fa:	6662      	strmi	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
340121fc:	9a01      	ldr	r2, [sp, #4]
340121fe:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
34012200:	bf42      	ittt	mi
34012202:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
34012204:	f042 0201 	orrmi.w	r2, r2, #1
34012208:	6662      	strmi	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
3401220a:	2229      	movs	r2, #41	@ 0x29
3401220c:	e7ca      	b.n	340121a4 <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
3401220e:	1c69      	adds	r1, r5, #1
34012210:	d09d      	beq.n	3401214e <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
34012212:	f00c fe63 	bl	3401eedc <HAL_GetTick>
34012216:	1b80      	subs	r0, r0, r6
34012218:	42a8      	cmp	r0, r5
3401221a:	d8d2      	bhi.n	340121c2 <HAL_DMA2D_PollForTransfer+0x9a>
3401221c:	2d00      	cmp	r5, #0
3401221e:	d195      	bne.n	3401214c <HAL_DMA2D_PollForTransfer+0x24>
34012220:	e7cf      	b.n	340121c2 <HAL_DMA2D_PollForTransfer+0x9a>
	...

34012224 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_LAYER(LayerIdx));
34012224:	2901      	cmp	r1, #1
{
34012226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34012228:	4604      	mov	r4, r0
3401222a:	460d      	mov	r5, r1
  assert_param(IS_DMA2D_LAYER(LayerIdx));
3401222c:	d904      	bls.n	34012238 <HAL_DMA2D_ConfigLayer+0x14>
3401222e:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34012232:	4850      	ldr	r0, [pc, #320]	@ (34012374 <HAL_DMA2D_ConfigLayer+0x150>)
34012234:	f00d f9e4 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
34012238:	231c      	movs	r3, #28
3401223a:	fb03 4305 	mla	r3, r3, r5, r4
3401223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34012240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34012244:	d304      	bcc.n	34012250 <HAL_DMA2D_ConfigLayer+0x2c>
34012246:	f240 61f4 	movw	r1, #1780	@ 0x6f4
3401224a:	484a      	ldr	r0, [pc, #296]	@ (34012374 <HAL_DMA2D_ConfigLayer+0x150>)
3401224c:	f00d f9d8 	bl	3401f600 <assert_failed>
  if (hdma2d->Init.Mode != DMA2D_R2M)
34012250:	6863      	ldr	r3, [r4, #4]
34012252:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34012256:	d017      	beq.n	34012288 <HAL_DMA2D_ConfigLayer+0x64>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
34012258:	231c      	movs	r3, #28
3401225a:	fb03 4305 	mla	r3, r3, r5, r4
3401225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34012260:	2b0b      	cmp	r3, #11
34012262:	d904      	bls.n	3401226e <HAL_DMA2D_ConfigLayer+0x4a>
34012264:	f240 61f7 	movw	r1, #1783	@ 0x6f7
34012268:	4842      	ldr	r0, [pc, #264]	@ (34012374 <HAL_DMA2D_ConfigLayer+0x150>)
3401226a:	f00d f9c9 	bl	3401f600 <assert_failed>
    if (hdma2d->Init.Mode != DMA2D_M2M)
3401226e:	6863      	ldr	r3, [r4, #4]
34012270:	b153      	cbz	r3, 34012288 <HAL_DMA2D_ConfigLayer+0x64>
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
34012272:	231c      	movs	r3, #28
34012274:	fb03 4305 	mla	r3, r3, r5, r4
34012278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401227a:	2b02      	cmp	r3, #2
3401227c:	d904      	bls.n	34012288 <HAL_DMA2D_ConfigLayer+0x64>
3401227e:	f240 61fa 	movw	r1, #1786	@ 0x6fa
34012282:	483c      	ldr	r0, [pc, #240]	@ (34012374 <HAL_DMA2D_ConfigLayer+0x150>)
34012284:	f00d f9bc 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
34012288:	261c      	movs	r6, #28
3401228a:	fb06 4305 	mla	r3, r6, r5, r4
3401228e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34012290:	2b01      	cmp	r3, #1
34012292:	d904      	bls.n	3401229e <HAL_DMA2D_ConfigLayer+0x7a>
34012294:	f240 61fd 	movw	r1, #1789	@ 0x6fd
34012298:	4836      	ldr	r0, [pc, #216]	@ (34012374 <HAL_DMA2D_ConfigLayer+0x150>)
3401229a:	f00d f9b1 	bl	3401f600 <assert_failed>
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
3401229e:	fb06 4605 	mla	r6, r6, r5, r4
340122a2:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
340122a4:	2b01      	cmp	r3, #1
340122a6:	d904      	bls.n	340122b2 <HAL_DMA2D_ConfigLayer+0x8e>
340122a8:	f240 61fe 	movw	r1, #1790	@ 0x6fe
340122ac:	4831      	ldr	r0, [pc, #196]	@ (34012374 <HAL_DMA2D_ConfigLayer+0x150>)
340122ae:	f00d f9a7 	bl	3401f600 <assert_failed>
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
340122b2:	2d01      	cmp	r5, #1
340122b4:	d10a      	bne.n	340122cc <HAL_DMA2D_ConfigLayer+0xa8>
340122b6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340122b8:	2b0b      	cmp	r3, #11
340122ba:	d107      	bne.n	340122cc <HAL_DMA2D_ConfigLayer+0xa8>
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
340122bc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
340122be:	2b02      	cmp	r3, #2
340122c0:	d904      	bls.n	340122cc <HAL_DMA2D_ConfigLayer+0xa8>
340122c2:	f240 7102 	movw	r1, #1794	@ 0x702
340122c6:	482b      	ldr	r0, [pc, #172]	@ (34012374 <HAL_DMA2D_ConfigLayer+0x150>)
340122c8:	f00d f99a 	bl	3401f600 <assert_failed>
  __HAL_LOCK(hdma2d);
340122cc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
340122d0:	2002      	movs	r0, #2
340122d2:	2b01      	cmp	r3, #1
340122d4:	d033      	beq.n	3401233e <HAL_DMA2D_ConfigLayer+0x11a>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340122d6:	211c      	movs	r1, #28
  __HAL_LOCK(hdma2d);
340122d8:	2301      	movs	r3, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340122da:	fb01 4105 	mla	r1, r1, r5, r4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
340122de:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
340122e2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
340122e6:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340122e8:	e9d1 620b 	ldrd	r6, r2, [r1, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
340122ec:	051b      	lsls	r3, r3, #20
340122ee:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340122f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
340122f4:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340122f6:	4333      	orrs	r3, r6
340122f8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
340122fc:	f1a6 0009 	sub.w	r0, r6, #9
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
34012300:	f007 427f 	and.w	r2, r7, #4278190080	@ 0xff000000
34012304:	431a      	orrs	r2, r3
34012306:	2801      	cmp	r0, #1
34012308:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
3401230c:	bf98      	it	ls
3401230e:	4613      	movls	r3, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
34012310:	6822      	ldr	r2, [r4, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
34012312:	b9ad      	cbnz	r5, 34012340 <HAL_DMA2D_ConfigLayer+0x11c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
34012314:	6a55      	ldr	r5, [r2, #36]	@ 0x24
34012316:	4918      	ldr	r1, [pc, #96]	@ (34012378 <HAL_DMA2D_ConfigLayer+0x154>)
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
34012318:	2801      	cmp	r0, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
3401231a:	ea01 0105 	and.w	r1, r1, r5
3401231e:	ea41 0103 	orr.w	r1, r1, r3
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
34012322:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
34012324:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
34012326:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
34012328:	d803      	bhi.n	34012332 <HAL_DMA2D_ConfigLayer+0x10e>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
3401232a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401232c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34012330:	6293      	str	r3, [r2, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
34012332:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
34012334:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
34012336:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
3401233a:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
}
3401233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
34012340:	2e0b      	cmp	r6, #11
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
34012342:	bf03      	ittte	eq
34012344:	6c09      	ldreq	r1, [r1, #64]	@ 0x40
      regMask  |= DMA2D_FGPFCCR_CSS;
34012346:	4e0d      	ldreq	r6, [pc, #52]	@ (3401237c <HAL_DMA2D_ConfigLayer+0x158>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
34012348:	ea43 4381 	orreq.w	r3, r3, r1, lsl #18
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
3401234c:	4e0c      	ldrne	r6, [pc, #48]	@ (34012380 <HAL_DMA2D_ConfigLayer+0x15c>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
3401234e:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
34012350:	2801      	cmp	r0, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
34012352:	ea21 0106 	bic.w	r1, r1, r6
34012356:	ea43 0301 	orr.w	r3, r3, r1
3401235a:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
3401235c:	f04f 031c 	mov.w	r3, #28
34012360:	fb03 4505 	mla	r5, r3, r5, r4
34012364:	6aab      	ldr	r3, [r5, #40]	@ 0x28
34012366:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
34012368:	bf9e      	ittt	ls
3401236a:	6b6b      	ldrls	r3, [r5, #52]	@ 0x34
3401236c:	f023 437f 	bicls.w	r3, r3, #4278190080	@ 0xff000000
34012370:	6213      	strls	r3, [r2, #32]
34012372:	e7de      	b.n	34012332 <HAL_DMA2D_ConfigLayer+0x10e>
34012374:	3402f1b4 	.word	0x3402f1b4
34012378:	00ccfff0 	.word	0x00ccfff0
3401237c:	ff3f000f 	.word	0xff3f000f
34012380:	ff33000f 	.word	0xff33000f

34012384 <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
34012384:	2901      	cmp	r1, #1
34012386:	d005      	beq.n	34012394 <HAL_EXTI_RegisterCallback+0x10>
34012388:	2902      	cmp	r1, #2
3401238a:	d001      	beq.n	34012390 <HAL_EXTI_RegisterCallback+0xc>
3401238c:	b929      	cbnz	r1, 3401239a <HAL_EXTI_RegisterCallback+0x16>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
3401238e:	6042      	str	r2, [r0, #4]
    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
      break;

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
34012390:	6082      	str	r2, [r0, #8]
      break;
34012392:	e000      	b.n	34012396 <HAL_EXTI_RegisterCallback+0x12>
      hexti->RisingCallback = pPendingCbfn;
34012394:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
34012396:	2000      	movs	r0, #0
34012398:	4770      	bx	lr
  switch (CallbackID)
3401239a:	2001      	movs	r0, #1
      status = HAL_ERROR;
      break;
  }

  return status;
}
3401239c:	4770      	bx	lr
	...

340123a0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
340123a0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
340123a2:	4b0f      	ldr	r3, [pc, #60]	@ (340123e0 <HAL_EXTI_GetHandle+0x40>)
{
340123a4:	4605      	mov	r5, r0
  assert_param(IS_EXTI_LINE(ExtiLine));
340123a6:	400b      	ands	r3, r1
{
340123a8:	460c      	mov	r4, r1
  assert_param(IS_EXTI_LINE(ExtiLine));
340123aa:	b973      	cbnz	r3, 340123ca <HAL_EXTI_GetHandle+0x2a>
340123ac:	f001 63e0 	and.w	r3, r1, #117440512	@ 0x7000000
340123b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340123b4:	d004      	beq.n	340123c0 <HAL_EXTI_GetHandle+0x20>
340123b6:	f001 7340 	and.w	r3, r1, #50331648	@ 0x3000000
340123ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340123be:	d104      	bne.n	340123ca <HAL_EXTI_GetHandle+0x2a>
340123c0:	4b08      	ldr	r3, [pc, #32]	@ (340123e4 <HAL_EXTI_GetHandle+0x44>)
340123c2:	4a09      	ldr	r2, [pc, #36]	@ (340123e8 <HAL_EXTI_GetHandle+0x48>)
340123c4:	4023      	ands	r3, r4
340123c6:	4293      	cmp	r3, r2
340123c8:	d904      	bls.n	340123d4 <HAL_EXTI_GetHandle+0x34>
340123ca:	f240 11d5 	movw	r1, #469	@ 0x1d5
340123ce:	4807      	ldr	r0, [pc, #28]	@ (340123ec <HAL_EXTI_GetHandle+0x4c>)
340123d0:	f00d f916 	bl	3401f600 <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
340123d4:	b115      	cbz	r5, 340123dc <HAL_EXTI_GetHandle+0x3c>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
340123d6:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
340123d8:	602c      	str	r4, [r5, #0]
  }
}
340123da:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
340123dc:	2001      	movs	r0, #1
340123de:	e7fc      	b.n	340123da <HAL_EXTI_GetHandle+0x3a>
340123e0:	e8fcffe0 	.word	0xe8fcffe0
340123e4:	0003001f 	.word	0x0003001f
340123e8:	0002000d 	.word	0x0002000d
340123ec:	3402f22a 	.word	0x3402f22a

340123f0 <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
340123f0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
340123f2:	4604      	mov	r4, r0
340123f4:	2800      	cmp	r0, #0
340123f6:	d070      	beq.n	340124da <HAL_GFXMMU_Init+0xea>
    status = HAL_ERROR;
  }
  else
  {
    /* Check parameters */
    assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
340123f8:	6803      	ldr	r3, [r0, #0]
340123fa:	4a39      	ldr	r2, [pc, #228]	@ (340124e0 <HAL_GFXMMU_Init+0xf0>)
340123fc:	4293      	cmp	r3, r2
340123fe:	d007      	beq.n	34012410 <HAL_GFXMMU_Init+0x20>
34012400:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34012404:	4293      	cmp	r3, r2
34012406:	d003      	beq.n	34012410 <HAL_GFXMMU_Init+0x20>
34012408:	21c0      	movs	r1, #192	@ 0xc0
3401240a:	4836      	ldr	r0, [pc, #216]	@ (340124e4 <HAL_GFXMMU_Init+0xf4>)
3401240c:	f00d f8f8 	bl	3401f600 <assert_failed>
    assert_param(IS_GFXMMU_BLOCK_SIZE(hgfxmmu->Init.BlockSize));
34012410:	6863      	ldr	r3, [r4, #4]
34012412:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
34012416:	d003      	beq.n	34012420 <HAL_GFXMMU_Init+0x30>
34012418:	21c1      	movs	r1, #193	@ 0xc1
3401241a:	4832      	ldr	r0, [pc, #200]	@ (340124e4 <HAL_GFXMMU_Init+0xf4>)
3401241c:	f00d f8f0 	bl	3401f600 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.AddressTranslation));
34012420:	7b23      	ldrb	r3, [r4, #12]
34012422:	2b01      	cmp	r3, #1
34012424:	d903      	bls.n	3401242e <HAL_GFXMMU_Init+0x3e>
34012426:	21c2      	movs	r1, #194	@ 0xc2
34012428:	482e      	ldr	r0, [pc, #184]	@ (340124e4 <HAL_GFXMMU_Init+0xf4>)
3401242a:	f00d f8e9 	bl	3401f600 <assert_failed>
    assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf0Address));
3401242e:	6923      	ldr	r3, [r4, #16]
34012430:	071b      	lsls	r3, r3, #28
34012432:	d003      	beq.n	3401243c <HAL_GFXMMU_Init+0x4c>
34012434:	21c3      	movs	r1, #195	@ 0xc3
34012436:	482b      	ldr	r0, [pc, #172]	@ (340124e4 <HAL_GFXMMU_Init+0xf4>)
34012438:	f00d f8e2 	bl	3401f600 <assert_failed>
    assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf1Address));
3401243c:	6963      	ldr	r3, [r4, #20]
3401243e:	0718      	lsls	r0, r3, #28
34012440:	d003      	beq.n	3401244a <HAL_GFXMMU_Init+0x5a>
34012442:	21c4      	movs	r1, #196	@ 0xc4
34012444:	4827      	ldr	r0, [pc, #156]	@ (340124e4 <HAL_GFXMMU_Init+0xf4>)
34012446:	f00d f8db 	bl	3401f600 <assert_failed>
    assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf2Address));
3401244a:	69a3      	ldr	r3, [r4, #24]
3401244c:	0719      	lsls	r1, r3, #28
3401244e:	d003      	beq.n	34012458 <HAL_GFXMMU_Init+0x68>
34012450:	21c5      	movs	r1, #197	@ 0xc5
34012452:	4824      	ldr	r0, [pc, #144]	@ (340124e4 <HAL_GFXMMU_Init+0xf4>)
34012454:	f00d f8d4 	bl	3401f600 <assert_failed>
    assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf3Address));
34012458:	69e3      	ldr	r3, [r4, #28]
3401245a:	071a      	lsls	r2, r3, #28
3401245c:	d003      	beq.n	34012466 <HAL_GFXMMU_Init+0x76>
3401245e:	21c6      	movs	r1, #198	@ 0xc6
34012460:	4820      	ldr	r0, [pc, #128]	@ (340124e4 <HAL_GFXMMU_Init+0xf4>)
34012462:	f00d f8cd 	bl	3401f600 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.Interrupts.Activation));
34012466:	f894 3020 	ldrb.w	r3, [r4, #32]
3401246a:	2b01      	cmp	r3, #1
3401246c:	d903      	bls.n	34012476 <HAL_GFXMMU_Init+0x86>
3401246e:	21c7      	movs	r1, #199	@ 0xc7
34012470:	481c      	ldr	r0, [pc, #112]	@ (340124e4 <HAL_GFXMMU_Init+0xf4>)
34012472:	f00d f8c5 	bl	3401f600 <assert_failed>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
34012476:	4620      	mov	r0, r4
34012478:	f00d f8e6 	bl	3401f648 <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
3401247c:	2200      	movs	r2, #0
3401247e:	6823      	ldr	r3, [r4, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlockSize);
34012480:	6861      	ldr	r1, [r4, #4]
    hgfxmmu->Instance->CR = 0U;
34012482:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlockSize);
34012484:	681a      	ldr	r2, [r3, #0]
34012486:	430a      	orrs	r2, r1
34012488:	601a      	str	r2, [r3, #0]
    if (hgfxmmu->Init.AddressTranslation == ENABLE)
3401248a:	7b22      	ldrb	r2, [r4, #12]
3401248c:	2a01      	cmp	r2, #1
    {
      hgfxmmu->Instance->CR |= GFXMMU_CR_ATE;
3401248e:	bf02      	ittt	eq
34012490:	681a      	ldreq	r2, [r3, #0]
34012492:	f442 4200 	orreq.w	r2, r2, #32768	@ 0x8000
34012496:	601a      	streq	r2, [r3, #0]
    }
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
34012498:	f894 3020 	ldrb.w	r3, [r4, #32]
3401249c:	2b01      	cmp	r3, #1
3401249e:	d10b      	bne.n	340124b8 <HAL_GFXMMU_Init+0xc8>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
340124a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340124a2:	06db      	lsls	r3, r3, #27
340124a4:	d103      	bne.n	340124ae <HAL_GFXMMU_Init+0xbe>
340124a6:	21e1      	movs	r1, #225	@ 0xe1
340124a8:	480e      	ldr	r0, [pc, #56]	@ (340124e4 <HAL_GFXMMU_Init+0xf4>)
340124aa:	f00d f8a9 	bl	3401f600 <assert_failed>
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
340124ae:	6822      	ldr	r2, [r4, #0]
340124b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340124b2:	6813      	ldr	r3, [r2, #0]
340124b4:	430b      	orrs	r3, r1
340124b6:	6013      	str	r3, [r2, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
340124b8:	6823      	ldr	r3, [r4, #0]
340124ba:	68a2      	ldr	r2, [r4, #8]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
340124bc:	2000      	movs	r0, #0
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
340124be:	611a      	str	r2, [r3, #16]
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
340124c0:	6922      	ldr	r2, [r4, #16]
340124c2:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
340124c4:	6962      	ldr	r2, [r4, #20]
340124c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
340124c8:	69a2      	ldr	r2, [r4, #24]
340124ca:	629a      	str	r2, [r3, #40]	@ 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
340124cc:	69e2      	ldr	r2, [r4, #28]
340124ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
340124d0:	2301      	movs	r3, #1
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
340124d2:	62e0      	str	r0, [r4, #44]	@ 0x2c
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
340124d4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
  }
  /* Return function status */
  return status;
}
340124d8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
340124da:	2001      	movs	r0, #1
340124dc:	e7fc      	b.n	340124d8 <HAL_GFXMMU_Init+0xe8>
340124de:	bf00      	nop
340124e0:	58030000 	.word	0x58030000
340124e4:	3402f29f 	.word	0x3402f29f

340124e8 <HAL_GFXMMU_ModifyBuffers>:
  * @param  hgfxmmu GFXMMU handle.
  * @param  Buffers Buffers parameters.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_ModifyBuffers(GFXMMU_HandleTypeDef *hgfxmmu, const GFXMMU_BuffersTypeDef *Buffers)
{
340124e8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check parameters */
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
340124ea:	4a20      	ldr	r2, [pc, #128]	@ (3401256c <HAL_GFXMMU_ModifyBuffers+0x84>)
340124ec:	6803      	ldr	r3, [r0, #0]
{
340124ee:	4605      	mov	r5, r0
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
340124f0:	4293      	cmp	r3, r2
{
340124f2:	460c      	mov	r4, r1
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
340124f4:	d008      	beq.n	34012508 <HAL_GFXMMU_ModifyBuffers+0x20>
340124f6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340124fa:	4293      	cmp	r3, r2
340124fc:	d004      	beq.n	34012508 <HAL_GFXMMU_ModifyBuffers+0x20>
340124fe:	f240 219b 	movw	r1, #667	@ 0x29b
34012502:	481b      	ldr	r0, [pc, #108]	@ (34012570 <HAL_GFXMMU_ModifyBuffers+0x88>)
34012504:	f00d f87c 	bl	3401f600 <assert_failed>
  assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf0Address));
34012508:	6823      	ldr	r3, [r4, #0]
3401250a:	0718      	lsls	r0, r3, #28
3401250c:	d004      	beq.n	34012518 <HAL_GFXMMU_ModifyBuffers+0x30>
3401250e:	f44f 7127 	mov.w	r1, #668	@ 0x29c
34012512:	4817      	ldr	r0, [pc, #92]	@ (34012570 <HAL_GFXMMU_ModifyBuffers+0x88>)
34012514:	f00d f874 	bl	3401f600 <assert_failed>
  assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf1Address));
34012518:	6863      	ldr	r3, [r4, #4]
3401251a:	0719      	lsls	r1, r3, #28
3401251c:	d004      	beq.n	34012528 <HAL_GFXMMU_ModifyBuffers+0x40>
3401251e:	f240 219d 	movw	r1, #669	@ 0x29d
34012522:	4813      	ldr	r0, [pc, #76]	@ (34012570 <HAL_GFXMMU_ModifyBuffers+0x88>)
34012524:	f00d f86c 	bl	3401f600 <assert_failed>
  assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf2Address));
34012528:	68a3      	ldr	r3, [r4, #8]
3401252a:	071a      	lsls	r2, r3, #28
3401252c:	d004      	beq.n	34012538 <HAL_GFXMMU_ModifyBuffers+0x50>
3401252e:	f240 219e 	movw	r1, #670	@ 0x29e
34012532:	480f      	ldr	r0, [pc, #60]	@ (34012570 <HAL_GFXMMU_ModifyBuffers+0x88>)
34012534:	f00d f864 	bl	3401f600 <assert_failed>
  assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf3Address));
34012538:	68e3      	ldr	r3, [r4, #12]
3401253a:	071b      	lsls	r3, r3, #28
3401253c:	d004      	beq.n	34012548 <HAL_GFXMMU_ModifyBuffers+0x60>
3401253e:	f240 219f 	movw	r1, #671	@ 0x29f
34012542:	480b      	ldr	r0, [pc, #44]	@ (34012570 <HAL_GFXMMU_ModifyBuffers+0x88>)
34012544:	f00d f85c 	bl	3401f600 <assert_failed>

  /* Check GFXMMU state */
  if (hgfxmmu->State != HAL_GFXMMU_STATE_READY)
34012548:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
3401254c:	2b01      	cmp	r3, #1
3401254e:	d10a      	bne.n	34012566 <HAL_GFXMMU_ModifyBuffers+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
34012550:	2000      	movs	r0, #0
    status = HAL_ERROR;
  }
  else
  {
    /* Modify physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = Buffers->Buf0Address;
34012552:	6822      	ldr	r2, [r4, #0]
34012554:	682b      	ldr	r3, [r5, #0]
34012556:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = Buffers->Buf1Address;
34012558:	6862      	ldr	r2, [r4, #4]
3401255a:	625a      	str	r2, [r3, #36]	@ 0x24
    hgfxmmu->Instance->B2CR = Buffers->Buf2Address;
3401255c:	68a2      	ldr	r2, [r4, #8]
3401255e:	629a      	str	r2, [r3, #40]	@ 0x28
    hgfxmmu->Instance->B3CR = Buffers->Buf3Address;
34012560:	68e2      	ldr	r2, [r4, #12]
34012562:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  /* Return function status */
  return status;
}
34012564:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
34012566:	2001      	movs	r0, #1
34012568:	e7fc      	b.n	34012564 <HAL_GFXMMU_ModifyBuffers+0x7c>
3401256a:	bf00      	nop
3401256c:	58030000 	.word	0x58030000
34012570:	3402f29f 	.word	0x3402f29f

34012574 <HAL_GFXMMU_ConfigPacking>:
  * @param  hgfxmmu GFXMMU handle.
  * @param  pPacking Packing parameters.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigPacking(GFXMMU_HandleTypeDef *hgfxmmu, const GFXMMU_PackingTypeDef *pPacking)
{
34012574:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check parameters */
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
34012576:	4a48      	ldr	r2, [pc, #288]	@ (34012698 <HAL_GFXMMU_ConfigPacking+0x124>)
34012578:	6803      	ldr	r3, [r0, #0]
{
3401257a:	4605      	mov	r5, r0
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
3401257c:	4293      	cmp	r3, r2
{
3401257e:	460c      	mov	r4, r1
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
34012580:	d008      	beq.n	34012594 <HAL_GFXMMU_ConfigPacking+0x20>
34012582:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34012586:	4293      	cmp	r3, r2
34012588:	d004      	beq.n	34012594 <HAL_GFXMMU_ConfigPacking+0x20>
3401258a:	f240 21bd 	movw	r1, #701	@ 0x2bd
3401258e:	4843      	ldr	r0, [pc, #268]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
34012590:	f00d f836 	bl	3401f600 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer0Activation));
34012594:	7823      	ldrb	r3, [r4, #0]
34012596:	2b01      	cmp	r3, #1
34012598:	d904      	bls.n	340125a4 <HAL_GFXMMU_ConfigPacking+0x30>
3401259a:	f240 21be 	movw	r1, #702	@ 0x2be
3401259e:	483f      	ldr	r0, [pc, #252]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
340125a0:	f00d f82e 	bl	3401f600 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer1Activation));
340125a4:	7a23      	ldrb	r3, [r4, #8]
340125a6:	2b01      	cmp	r3, #1
340125a8:	d904      	bls.n	340125b4 <HAL_GFXMMU_ConfigPacking+0x40>
340125aa:	f240 21bf 	movw	r1, #703	@ 0x2bf
340125ae:	483b      	ldr	r0, [pc, #236]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
340125b0:	f00d f826 	bl	3401f600 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer2Activation));
340125b4:	7c23      	ldrb	r3, [r4, #16]
340125b6:	2b01      	cmp	r3, #1
340125b8:	d904      	bls.n	340125c4 <HAL_GFXMMU_ConfigPacking+0x50>
340125ba:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
340125be:	4837      	ldr	r0, [pc, #220]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
340125c0:	f00d f81e 	bl	3401f600 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer3Activation));
340125c4:	7e23      	ldrb	r3, [r4, #24]
340125c6:	2b01      	cmp	r3, #1
340125c8:	d904      	bls.n	340125d4 <HAL_GFXMMU_ConfigPacking+0x60>
340125ca:	f240 21c1 	movw	r1, #705	@ 0x2c1
340125ce:	4833      	ldr	r0, [pc, #204]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
340125d0:	f00d f816 	bl	3401f600 <assert_failed>
  assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer0Mode));
340125d4:	6863      	ldr	r3, [r4, #4]
340125d6:	2b01      	cmp	r3, #1
340125d8:	d904      	bls.n	340125e4 <HAL_GFXMMU_ConfigPacking+0x70>
340125da:	f240 21c2 	movw	r1, #706	@ 0x2c2
340125de:	482f      	ldr	r0, [pc, #188]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
340125e0:	f00d f80e 	bl	3401f600 <assert_failed>
  assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer1Mode));
340125e4:	68e3      	ldr	r3, [r4, #12]
340125e6:	2b01      	cmp	r3, #1
340125e8:	d904      	bls.n	340125f4 <HAL_GFXMMU_ConfigPacking+0x80>
340125ea:	f240 21c3 	movw	r1, #707	@ 0x2c3
340125ee:	482b      	ldr	r0, [pc, #172]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
340125f0:	f00d f806 	bl	3401f600 <assert_failed>
  assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer2Mode));
340125f4:	6963      	ldr	r3, [r4, #20]
340125f6:	2b01      	cmp	r3, #1
340125f8:	d904      	bls.n	34012604 <HAL_GFXMMU_ConfigPacking+0x90>
340125fa:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
340125fe:	4827      	ldr	r0, [pc, #156]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
34012600:	f00c fffe 	bl	3401f600 <assert_failed>
  assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer3Mode));
34012604:	69e3      	ldr	r3, [r4, #28]
34012606:	2b01      	cmp	r3, #1
34012608:	d904      	bls.n	34012614 <HAL_GFXMMU_ConfigPacking+0xa0>
3401260a:	f240 21c5 	movw	r1, #709	@ 0x2c5
3401260e:	4823      	ldr	r0, [pc, #140]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
34012610:	f00c fff6 	bl	3401f600 <assert_failed>
  assert_param(IS_GFXMMU_DEFAULT_ALPHA_VALUE(pPacking->DefaultAlpha));
34012614:	6a23      	ldr	r3, [r4, #32]
34012616:	2bff      	cmp	r3, #255	@ 0xff
34012618:	d904      	bls.n	34012624 <HAL_GFXMMU_ConfigPacking+0xb0>
3401261a:	f240 21c6 	movw	r1, #710	@ 0x2c6
3401261e:	481f      	ldr	r0, [pc, #124]	@ (3401269c <HAL_GFXMMU_ConfigPacking+0x128>)
34012620:	f00c ffee 	bl	3401f600 <assert_failed>

  /* Check GFXMMU state */
  if (hgfxmmu->State != HAL_GFXMMU_STATE_READY)
34012624:	f895 0028 	ldrb.w	r0, [r5, #40]	@ 0x28
34012628:	2801      	cmp	r0, #1
3401262a:	d132      	bne.n	34012692 <HAL_GFXMMU_ConfigPacking+0x11e>
  {
    status = HAL_ERROR;
  }
  /* Check block size is set to 12-byte*/
  else if ((hgfxmmu->Instance->CR & GFXMMU_CR_BS) == 0U)
3401262c:	682a      	ldr	r2, [r5, #0]
3401262e:	6813      	ldr	r3, [r2, #0]
34012630:	065b      	lsls	r3, r3, #25
34012632:	d52d      	bpl.n	34012690 <HAL_GFXMMU_ConfigPacking+0x11c>
  else
  {
    uint32_t reg_value = 0U;

    /* Configure packing for all buffers on GFXMMU_CR register */
    if (pPacking->Buffer0Activation == ENABLE)
34012634:	7823      	ldrb	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
34012636:	2000      	movs	r0, #0
    if (pPacking->Buffer0Activation == ENABLE)
34012638:	2b01      	cmp	r3, #1
    uint32_t reg_value = 0U;
3401263a:	bf14      	ite	ne
3401263c:	2300      	movne	r3, #0
    {
      reg_value |= ((pPacking->Buffer0Mode << GFXMMU_CR_B0PM_Pos) | GFXMMU_CR_B0PE);
3401263e:	6863      	ldreq	r3, [r4, #4]
    }
    if (pPacking->Buffer1Activation == ENABLE)
34012640:	7a21      	ldrb	r1, [r4, #8]
      reg_value |= ((pPacking->Buffer0Mode << GFXMMU_CR_B0PM_Pos) | GFXMMU_CR_B0PE);
34012642:	bf04      	itt	eq
34012644:	065b      	lsleq	r3, r3, #25
34012646:	f043 7380 	orreq.w	r3, r3, #16777216	@ 0x1000000
    if (pPacking->Buffer1Activation == ENABLE)
3401264a:	2901      	cmp	r1, #1
    {
      reg_value |= ((pPacking->Buffer1Mode << GFXMMU_CR_B1PM_Pos) | GFXMMU_CR_B1PE);
3401264c:	bf04      	itt	eq
3401264e:	68e1      	ldreq	r1, [r4, #12]
34012650:	ea43 63c1 	orreq.w	r3, r3, r1, lsl #27
    }
    if (pPacking->Buffer2Activation == ENABLE)
34012654:	7c21      	ldrb	r1, [r4, #16]
      reg_value |= ((pPacking->Buffer1Mode << GFXMMU_CR_B1PM_Pos) | GFXMMU_CR_B1PE);
34012656:	bf08      	it	eq
34012658:	f043 6380 	orreq.w	r3, r3, #67108864	@ 0x4000000
    if (pPacking->Buffer2Activation == ENABLE)
3401265c:	2901      	cmp	r1, #1
    {
      reg_value |= ((pPacking->Buffer2Mode << GFXMMU_CR_B2PM_Pos) | GFXMMU_CR_B2PE);
3401265e:	bf04      	itt	eq
34012660:	6961      	ldreq	r1, [r4, #20]
34012662:	ea43 7341 	orreq.w	r3, r3, r1, lsl #29
    }
    if (pPacking->Buffer3Activation == ENABLE)
34012666:	7e21      	ldrb	r1, [r4, #24]
      reg_value |= ((pPacking->Buffer2Mode << GFXMMU_CR_B2PM_Pos) | GFXMMU_CR_B2PE);
34012668:	bf08      	it	eq
3401266a:	f043 5380 	orreq.w	r3, r3, #268435456	@ 0x10000000
    if (pPacking->Buffer3Activation == ENABLE)
3401266e:	2901      	cmp	r1, #1
    {
      reg_value |= ((pPacking->Buffer3Mode << GFXMMU_CR_B3PM_Pos) | GFXMMU_CR_B3PE);
34012670:	bf04      	itt	eq
34012672:	69e1      	ldreq	r1, [r4, #28]
34012674:	ea43 73c1 	orreq.w	r3, r3, r1, lsl #31
    }
    hgfxmmu->Instance->CR &= ~(GFXMMU_CR_B0PE_Msk | GFXMMU_CR_B0PM_Msk |
34012678:	6811      	ldr	r1, [r2, #0]
      reg_value |= ((pPacking->Buffer3Mode << GFXMMU_CR_B3PM_Pos) | GFXMMU_CR_B3PE);
3401267a:	bf08      	it	eq
3401267c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
    hgfxmmu->Instance->CR &= ~(GFXMMU_CR_B0PE_Msk | GFXMMU_CR_B0PM_Msk |
34012680:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
34012684:	6011      	str	r1, [r2, #0]
                               GFXMMU_CR_B1PE_Msk | GFXMMU_CR_B1PM_Msk |
                               GFXMMU_CR_B2PE_Msk | GFXMMU_CR_B2PM_Msk |
                               GFXMMU_CR_B3PE_Msk | GFXMMU_CR_B3PM_Msk);
    hgfxmmu->Instance->CR |= reg_value;
34012686:	6811      	ldr	r1, [r2, #0]
34012688:	430b      	orrs	r3, r1
3401268a:	6013      	str	r3, [r2, #0]

    /* Configure default alpha value on GFXMMU_DAR register */
    hgfxmmu->Instance->DAR = pPacking->DefaultAlpha;
3401268c:	6a23      	ldr	r3, [r4, #32]
3401268e:	6153      	str	r3, [r2, #20]
  }
  /* Return function status */
  return status;
}
34012690:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
34012692:	2001      	movs	r0, #1
34012694:	e7fc      	b.n	34012690 <HAL_GFXMMU_ConfigPacking+0x11c>
34012696:	bf00      	nop
34012698:	58030000 	.word	0x58030000
3401269c:	3402f29f 	.word	0x3402f29f

340126a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
340126a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340126a4:	4b47      	ldr	r3, [pc, #284]	@ (340127c4 <HAL_GPIO_Init+0x124>)
{
340126a6:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340126a8:	4298      	cmp	r0, r3
{
340126aa:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340126ac:	d054      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126ae:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126b2:	4298      	cmp	r0, r3
340126b4:	d050      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126b6:	4b44      	ldr	r3, [pc, #272]	@ (340127c8 <HAL_GPIO_Init+0x128>)
340126b8:	4298      	cmp	r0, r3
340126ba:	d04d      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126bc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126c0:	4298      	cmp	r0, r3
340126c2:	d049      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126c4:	4b41      	ldr	r3, [pc, #260]	@ (340127cc <HAL_GPIO_Init+0x12c>)
340126c6:	4298      	cmp	r0, r3
340126c8:	d046      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126ca:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126ce:	4298      	cmp	r0, r3
340126d0:	d042      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126d2:	4b3f      	ldr	r3, [pc, #252]	@ (340127d0 <HAL_GPIO_Init+0x130>)
340126d4:	4298      	cmp	r0, r3
340126d6:	d03f      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126d8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126dc:	4298      	cmp	r0, r3
340126de:	d03b      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126e0:	4b3c      	ldr	r3, [pc, #240]	@ (340127d4 <HAL_GPIO_Init+0x134>)
340126e2:	4298      	cmp	r0, r3
340126e4:	d038      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126e6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126ea:	4298      	cmp	r0, r3
340126ec:	d034      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126ee:	4b3a      	ldr	r3, [pc, #232]	@ (340127d8 <HAL_GPIO_Init+0x138>)
340126f0:	4298      	cmp	r0, r3
340126f2:	d031      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126f4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126f8:	4298      	cmp	r0, r3
340126fa:	d02d      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
340126fc:	4b37      	ldr	r3, [pc, #220]	@ (340127dc <HAL_GPIO_Init+0x13c>)
340126fe:	4298      	cmp	r0, r3
34012700:	d02a      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
34012702:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012706:	4298      	cmp	r0, r3
34012708:	d026      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
3401270a:	4b35      	ldr	r3, [pc, #212]	@ (340127e0 <HAL_GPIO_Init+0x140>)
3401270c:	4298      	cmp	r0, r3
3401270e:	d023      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
34012710:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012714:	4298      	cmp	r0, r3
34012716:	d01f      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
34012718:	4b32      	ldr	r3, [pc, #200]	@ (340127e4 <HAL_GPIO_Init+0x144>)
3401271a:	4298      	cmp	r0, r3
3401271c:	d01c      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
3401271e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012722:	4298      	cmp	r0, r3
34012724:	d018      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
34012726:	4b30      	ldr	r3, [pc, #192]	@ (340127e8 <HAL_GPIO_Init+0x148>)
34012728:	4298      	cmp	r0, r3
3401272a:	d015      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
3401272c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012730:	4298      	cmp	r0, r3
34012732:	d011      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
34012734:	4b2d      	ldr	r3, [pc, #180]	@ (340127ec <HAL_GPIO_Init+0x14c>)
34012736:	4298      	cmp	r0, r3
34012738:	d00e      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
3401273a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401273e:	4298      	cmp	r0, r3
34012740:	d00a      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
34012742:	4b2b      	ldr	r3, [pc, #172]	@ (340127f0 <HAL_GPIO_Init+0x150>)
34012744:	4298      	cmp	r0, r3
34012746:	d007      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
34012748:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401274c:	4298      	cmp	r0, r3
3401274e:	d003      	beq.n	34012758 <HAL_GPIO_Init+0xb8>
34012750:	21ad      	movs	r1, #173	@ 0xad
34012752:	4828      	ldr	r0, [pc, #160]	@ (340127f4 <HAL_GPIO_Init+0x154>)
34012754:	f00c ff54 	bl	3401f600 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34012758:	6833      	ldr	r3, [r6, #0]
3401275a:	b29a      	uxth	r2, r3
3401275c:	b112      	cbz	r2, 34012764 <HAL_GPIO_Init+0xc4>
3401275e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34012762:	d303      	bcc.n	3401276c <HAL_GPIO_Init+0xcc>
34012764:	21ae      	movs	r1, #174	@ 0xae
34012766:	4823      	ldr	r0, [pc, #140]	@ (340127f4 <HAL_GPIO_Init+0x154>)
34012768:	f00c ff4a 	bl	3401f600 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
3401276c:	6873      	ldr	r3, [r6, #4]
3401276e:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
34012772:	d011      	beq.n	34012798 <HAL_GPIO_Init+0xf8>
34012774:	d81d      	bhi.n	340127b2 <HAL_GPIO_Init+0x112>
34012776:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
3401277a:	d00d      	beq.n	34012798 <HAL_GPIO_Init+0xf8>
3401277c:	d809      	bhi.n	34012792 <HAL_GPIO_Init+0xf2>
3401277e:	2b03      	cmp	r3, #3
34012780:	d90a      	bls.n	34012798 <HAL_GPIO_Init+0xf8>
34012782:	3b11      	subs	r3, #17
34012784:	2b01      	cmp	r3, #1
34012786:	d907      	bls.n	34012798 <HAL_GPIO_Init+0xf8>
34012788:	21af      	movs	r1, #175	@ 0xaf
3401278a:	481a      	ldr	r0, [pc, #104]	@ (340127f4 <HAL_GPIO_Init+0x154>)
3401278c:	f00c ff38 	bl	3401f600 <assert_failed>
34012790:	e002      	b.n	34012798 <HAL_GPIO_Init+0xf8>
34012792:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
34012796:	d1f7      	bne.n	34012788 <HAL_GPIO_Init+0xe8>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34012798:	f04f 0900 	mov.w	r9, #0
3401279c:	464f      	mov	r7, r9
3401279e:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 340127c4 <HAL_GPIO_Init+0x124>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
340127a2:	f8df a054 	ldr.w	sl, [pc, #84]	@ 340127f8 <HAL_GPIO_Init+0x158>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
340127a6:	6835      	ldr	r5, [r6, #0]
340127a8:	fa35 f307 	lsrs.w	r3, r5, r7
340127ac:	d126      	bne.n	340127fc <HAL_GPIO_Init+0x15c>
      }
    }

    position++;
  }
}
340127ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
340127b2:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
340127b6:	d0ef      	beq.n	34012798 <HAL_GPIO_Init+0xf8>
340127b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
340127bc:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
340127c0:	e7e9      	b.n	34012796 <HAL_GPIO_Init+0xf6>
340127c2:	bf00      	nop
340127c4:	56020000 	.word	0x56020000
340127c8:	56020400 	.word	0x56020400
340127cc:	56020800 	.word	0x56020800
340127d0:	56020c00 	.word	0x56020c00
340127d4:	56021000 	.word	0x56021000
340127d8:	56021400 	.word	0x56021400
340127dc:	56021800 	.word	0x56021800
340127e0:	56021c00 	.word	0x56021c00
340127e4:	56023400 	.word	0x56023400
340127e8:	56023800 	.word	0x56023800
340127ec:	56023c00 	.word	0x56023c00
340127f0:	56024000 	.word	0x56024000
340127f4:	3402f316 	.word	0x3402f316
340127f8:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
340127fc:	f04f 0b01 	mov.w	fp, #1
34012800:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
34012804:	ea1b 0505 	ands.w	r5, fp, r5
34012808:	f000 8130 	beq.w	34012a6c <HAL_GPIO_Init+0x3cc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
3401280c:	6873      	ldr	r3, [r6, #4]
3401280e:	f003 0303 	and.w	r3, r3, #3
34012812:	3b01      	subs	r3, #1
34012814:	2b01      	cmp	r3, #1
34012816:	d81a      	bhi.n	3401284e <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34012818:	68f3      	ldr	r3, [r6, #12]
3401281a:	2b03      	cmp	r3, #3
3401281c:	d903      	bls.n	34012826 <HAL_GPIO_Init+0x186>
3401281e:	21be      	movs	r1, #190	@ 0xbe
34012820:	489e      	ldr	r0, [pc, #632]	@ (34012a9c <HAL_GPIO_Init+0x3fc>)
34012822:	f00c feed 	bl	3401f600 <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34012826:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
34012828:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3401282a:	fa03 f309 	lsl.w	r3, r3, r9
3401282e:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34012832:	68f3      	ldr	r3, [r6, #12]
34012834:	fa03 f309 	lsl.w	r3, r3, r9
34012838:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
3401283a:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3401283c:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
3401283e:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34012840:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34012844:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34012848:	40bb      	lsls	r3, r7
3401284a:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
3401284c:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
3401284e:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
34012852:	f003 0303 	and.w	r3, r3, #3
34012856:	2b03      	cmp	r3, #3
34012858:	d102      	bne.n	34012860 <HAL_GPIO_Init+0x1c0>
3401285a:	2a01      	cmp	r2, #1
3401285c:	f000 8082 	beq.w	34012964 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34012860:	2a02      	cmp	r2, #2
34012862:	d903      	bls.n	3401286c <HAL_GPIO_Init+0x1cc>
34012864:	21d1      	movs	r1, #209	@ 0xd1
34012866:	488d      	ldr	r0, [pc, #564]	@ (34012a9c <HAL_GPIO_Init+0x3fc>)
34012868:	f00c feca 	bl	3401f600 <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
3401286c:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
3401286e:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34012870:	fa03 f309 	lsl.w	r3, r3, r9
34012874:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34012878:	68b3      	ldr	r3, [r6, #8]
3401287a:	fa03 f309 	lsl.w	r3, r3, r9
3401287e:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
34012880:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34012882:	6873      	ldr	r3, [r6, #4]
34012884:	f003 0303 	and.w	r3, r3, #3
34012888:	2b02      	cmp	r3, #2
3401288a:	d16b      	bne.n	34012964 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
3401288c:	4544      	cmp	r4, r8
3401288e:	d053      	beq.n	34012938 <HAL_GPIO_Init+0x298>
34012890:	4b83      	ldr	r3, [pc, #524]	@ (34012aa0 <HAL_GPIO_Init+0x400>)
34012892:	429c      	cmp	r4, r3
34012894:	d050      	beq.n	34012938 <HAL_GPIO_Init+0x298>
34012896:	4b83      	ldr	r3, [pc, #524]	@ (34012aa4 <HAL_GPIO_Init+0x404>)
34012898:	429c      	cmp	r4, r3
3401289a:	d04d      	beq.n	34012938 <HAL_GPIO_Init+0x298>
3401289c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340128a0:	429c      	cmp	r4, r3
340128a2:	d049      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128a4:	4b80      	ldr	r3, [pc, #512]	@ (34012aa8 <HAL_GPIO_Init+0x408>)
340128a6:	429c      	cmp	r4, r3
340128a8:	d046      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128aa:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340128ae:	429c      	cmp	r4, r3
340128b0:	d042      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128b2:	4b7e      	ldr	r3, [pc, #504]	@ (34012aac <HAL_GPIO_Init+0x40c>)
340128b4:	429c      	cmp	r4, r3
340128b6:	d03f      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128b8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340128bc:	429c      	cmp	r4, r3
340128be:	d03b      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128c0:	4b7b      	ldr	r3, [pc, #492]	@ (34012ab0 <HAL_GPIO_Init+0x410>)
340128c2:	429c      	cmp	r4, r3
340128c4:	d038      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128c6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340128ca:	429c      	cmp	r4, r3
340128cc:	d034      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128ce:	4b79      	ldr	r3, [pc, #484]	@ (34012ab4 <HAL_GPIO_Init+0x414>)
340128d0:	429c      	cmp	r4, r3
340128d2:	d031      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128d4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340128d8:	429c      	cmp	r4, r3
340128da:	d02d      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128dc:	4b76      	ldr	r3, [pc, #472]	@ (34012ab8 <HAL_GPIO_Init+0x418>)
340128de:	429c      	cmp	r4, r3
340128e0:	d02a      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128e2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340128e6:	429c      	cmp	r4, r3
340128e8:	d026      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128ea:	4b74      	ldr	r3, [pc, #464]	@ (34012abc <HAL_GPIO_Init+0x41c>)
340128ec:	429c      	cmp	r4, r3
340128ee:	d023      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128f0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340128f4:	429c      	cmp	r4, r3
340128f6:	d01f      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128f8:	4b71      	ldr	r3, [pc, #452]	@ (34012ac0 <HAL_GPIO_Init+0x420>)
340128fa:	429c      	cmp	r4, r3
340128fc:	d01c      	beq.n	34012938 <HAL_GPIO_Init+0x298>
340128fe:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012902:	429c      	cmp	r4, r3
34012904:	d018      	beq.n	34012938 <HAL_GPIO_Init+0x298>
34012906:	4b6f      	ldr	r3, [pc, #444]	@ (34012ac4 <HAL_GPIO_Init+0x424>)
34012908:	429c      	cmp	r4, r3
3401290a:	d015      	beq.n	34012938 <HAL_GPIO_Init+0x298>
3401290c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012910:	429c      	cmp	r4, r3
34012912:	d011      	beq.n	34012938 <HAL_GPIO_Init+0x298>
34012914:	4b6c      	ldr	r3, [pc, #432]	@ (34012ac8 <HAL_GPIO_Init+0x428>)
34012916:	429c      	cmp	r4, r3
34012918:	d00e      	beq.n	34012938 <HAL_GPIO_Init+0x298>
3401291a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401291e:	429c      	cmp	r4, r3
34012920:	d00a      	beq.n	34012938 <HAL_GPIO_Init+0x298>
34012922:	4b6a      	ldr	r3, [pc, #424]	@ (34012acc <HAL_GPIO_Init+0x42c>)
34012924:	429c      	cmp	r4, r3
34012926:	d007      	beq.n	34012938 <HAL_GPIO_Init+0x298>
34012928:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401292c:	429c      	cmp	r4, r3
3401292e:	d003      	beq.n	34012938 <HAL_GPIO_Init+0x298>
34012930:	21de      	movs	r1, #222	@ 0xde
34012932:	485a      	ldr	r0, [pc, #360]	@ (34012a9c <HAL_GPIO_Init+0x3fc>)
34012934:	f00c fe64 	bl	3401f600 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34012938:	6933      	ldr	r3, [r6, #16]
3401293a:	2b0f      	cmp	r3, #15
3401293c:	d903      	bls.n	34012946 <HAL_GPIO_Init+0x2a6>
3401293e:	21df      	movs	r1, #223	@ 0xdf
34012940:	4856      	ldr	r0, [pc, #344]	@ (34012a9c <HAL_GPIO_Init+0x3fc>)
34012942:	f00c fe5d 	bl	3401f600 <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34012946:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
34012948:	08fa      	lsrs	r2, r7, #3
3401294a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3401294e:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
34012952:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34012954:	0089      	lsls	r1, r1, #2
34012956:	408b      	lsls	r3, r1
34012958:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3401295c:	6933      	ldr	r3, [r6, #16]
3401295e:	408b      	lsls	r3, r1
34012960:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
34012962:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34012964:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
34012966:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34012968:	fa03 f209 	lsl.w	r2, r3, r9
3401296c:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34012970:	6872      	ldr	r2, [r6, #4]
34012972:	ea02 0103 	and.w	r1, r2, r3
34012976:	fa01 f109 	lsl.w	r1, r1, r9
3401297a:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
3401297c:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
34012980:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34012982:	d073      	beq.n	34012a6c <HAL_GPIO_Init+0x3cc>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34012984:	f04f 0e0f 	mov.w	lr, #15
34012988:	f027 0103 	bic.w	r1, r7, #3
3401298c:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
34012990:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
34012994:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
34012998:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
3401299c:	4098      	lsls	r0, r3
3401299e:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340129a2:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340129a4:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340129a8:	d064      	beq.n	34012a74 <HAL_GPIO_Init+0x3d4>
340129aa:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 34012aa4 <HAL_GPIO_Init+0x404>
340129ae:	4574      	cmp	r4, lr
340129b0:	d062      	beq.n	34012a78 <HAL_GPIO_Init+0x3d8>
340129b2:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340129b6:	4574      	cmp	r4, lr
340129b8:	d060      	beq.n	34012a7c <HAL_GPIO_Init+0x3dc>
340129ba:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340129be:	4574      	cmp	r4, lr
340129c0:	d020      	beq.n	34012a04 <HAL_GPIO_Init+0x364>
340129c2:	4b3b      	ldr	r3, [pc, #236]	@ (34012ab0 <HAL_GPIO_Init+0x410>)
340129c4:	429c      	cmp	r4, r3
340129c6:	d05b      	beq.n	34012a80 <HAL_GPIO_Init+0x3e0>
340129c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340129cc:	429c      	cmp	r4, r3
340129ce:	d059      	beq.n	34012a84 <HAL_GPIO_Init+0x3e4>
340129d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340129d4:	429c      	cmp	r4, r3
340129d6:	d057      	beq.n	34012a88 <HAL_GPIO_Init+0x3e8>
340129d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340129dc:	429c      	cmp	r4, r3
340129de:	d055      	beq.n	34012a8c <HAL_GPIO_Init+0x3ec>
340129e0:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
340129e4:	429c      	cmp	r4, r3
340129e6:	d053      	beq.n	34012a90 <HAL_GPIO_Init+0x3f0>
340129e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340129ec:	429c      	cmp	r4, r3
340129ee:	d051      	beq.n	34012a94 <HAL_GPIO_Init+0x3f4>
340129f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340129f4:	429c      	cmp	r4, r3
340129f6:	d04f      	beq.n	34012a98 <HAL_GPIO_Init+0x3f8>
340129f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340129fc:	429c      	cmp	r4, r3
340129fe:	bf14      	ite	ne
34012a00:	2310      	movne	r3, #16
34012a02:	230b      	moveq	r3, #11
34012a04:	4083      	lsls	r3, r0
34012a06:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
34012a0a:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
34012a0c:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
34012a10:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
34012a14:	ea23 0105 	bic.w	r1, r3, r5
34012a18:	ea43 0305 	orr.w	r3, r3, r5
34012a1c:	bf08      	it	eq
34012a1e:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
34012a20:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
34012a24:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
34012a28:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
34012a2c:	ea23 0105 	bic.w	r1, r3, r5
34012a30:	ea43 0305 	orr.w	r3, r3, r5
34012a34:	bf08      	it	eq
34012a36:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
34012a38:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
34012a3c:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
34012a40:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
34012a44:	ea23 0105 	bic.w	r1, r3, r5
34012a48:	ea43 0305 	orr.w	r3, r3, r5
34012a4c:	bf08      	it	eq
34012a4e:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
34012a50:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
34012a54:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
34012a58:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
34012a5c:	ea23 0105 	bic.w	r1, r3, r5
34012a60:	ea45 0503 	orr.w	r5, r5, r3
34012a64:	bf08      	it	eq
34012a66:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
34012a68:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
34012a6c:	3701      	adds	r7, #1
34012a6e:	f109 0902 	add.w	r9, r9, #2
34012a72:	e698      	b.n	340127a6 <HAL_GPIO_Init+0x106>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34012a74:	2300      	movs	r3, #0
34012a76:	e7c5      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a78:	2301      	movs	r3, #1
34012a7a:	e7c3      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a7c:	2302      	movs	r3, #2
34012a7e:	e7c1      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a80:	2304      	movs	r3, #4
34012a82:	e7bf      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a84:	2305      	movs	r3, #5
34012a86:	e7bd      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a88:	2306      	movs	r3, #6
34012a8a:	e7bb      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a8c:	2307      	movs	r3, #7
34012a8e:	e7b9      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a90:	2308      	movs	r3, #8
34012a92:	e7b7      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a94:	2309      	movs	r3, #9
34012a96:	e7b5      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a98:	230a      	movs	r3, #10
34012a9a:	e7b3      	b.n	34012a04 <HAL_GPIO_Init+0x364>
34012a9c:	3402f316 	.word	0x3402f316
34012aa0:	46020000 	.word	0x46020000
34012aa4:	56020400 	.word	0x56020400
34012aa8:	56020800 	.word	0x56020800
34012aac:	56020c00 	.word	0x56020c00
34012ab0:	56021000 	.word	0x56021000
34012ab4:	56021400 	.word	0x56021400
34012ab8:	56021800 	.word	0x56021800
34012abc:	56021c00 	.word	0x56021c00
34012ac0:	56023400 	.word	0x56023400
34012ac4:	56023800 	.word	0x56023800
34012ac8:	56023c00 	.word	0x56023c00
34012acc:	56024000 	.word	0x56024000

34012ad0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
34012ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34012ad4:	4b87      	ldr	r3, [pc, #540]	@ (34012cf4 <HAL_GPIO_DeInit+0x224>)
{
34012ad6:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34012ad8:	4298      	cmp	r0, r3
{
34012ada:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34012adc:	d055      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012ade:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012ae2:	4298      	cmp	r0, r3
34012ae4:	d051      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012ae6:	4b84      	ldr	r3, [pc, #528]	@ (34012cf8 <HAL_GPIO_DeInit+0x228>)
34012ae8:	4298      	cmp	r0, r3
34012aea:	d04e      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012aec:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012af0:	4298      	cmp	r0, r3
34012af2:	d04a      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012af4:	4b81      	ldr	r3, [pc, #516]	@ (34012cfc <HAL_GPIO_DeInit+0x22c>)
34012af6:	4298      	cmp	r0, r3
34012af8:	d047      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012afa:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012afe:	4298      	cmp	r0, r3
34012b00:	d043      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b02:	4b7f      	ldr	r3, [pc, #508]	@ (34012d00 <HAL_GPIO_DeInit+0x230>)
34012b04:	4298      	cmp	r0, r3
34012b06:	d040      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b08:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012b0c:	4298      	cmp	r0, r3
34012b0e:	d03c      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b10:	4b7c      	ldr	r3, [pc, #496]	@ (34012d04 <HAL_GPIO_DeInit+0x234>)
34012b12:	4298      	cmp	r0, r3
34012b14:	d039      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b16:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012b1a:	4298      	cmp	r0, r3
34012b1c:	d035      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b1e:	4b7a      	ldr	r3, [pc, #488]	@ (34012d08 <HAL_GPIO_DeInit+0x238>)
34012b20:	4298      	cmp	r0, r3
34012b22:	d032      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b24:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012b28:	4298      	cmp	r0, r3
34012b2a:	d02e      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b2c:	4b77      	ldr	r3, [pc, #476]	@ (34012d0c <HAL_GPIO_DeInit+0x23c>)
34012b2e:	4298      	cmp	r0, r3
34012b30:	d02b      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b32:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012b36:	4298      	cmp	r0, r3
34012b38:	d027      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b3a:	4b75      	ldr	r3, [pc, #468]	@ (34012d10 <HAL_GPIO_DeInit+0x240>)
34012b3c:	4298      	cmp	r0, r3
34012b3e:	d024      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b40:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012b44:	4298      	cmp	r0, r3
34012b46:	d020      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b48:	4b72      	ldr	r3, [pc, #456]	@ (34012d14 <HAL_GPIO_DeInit+0x244>)
34012b4a:	4298      	cmp	r0, r3
34012b4c:	d01d      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b4e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012b52:	4298      	cmp	r0, r3
34012b54:	d019      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b56:	4b70      	ldr	r3, [pc, #448]	@ (34012d18 <HAL_GPIO_DeInit+0x248>)
34012b58:	4298      	cmp	r0, r3
34012b5a:	d016      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b5c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012b60:	4298      	cmp	r0, r3
34012b62:	d012      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b64:	4b6d      	ldr	r3, [pc, #436]	@ (34012d1c <HAL_GPIO_DeInit+0x24c>)
34012b66:	4298      	cmp	r0, r3
34012b68:	d00f      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b6a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012b6e:	4298      	cmp	r0, r3
34012b70:	d00b      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b72:	4b6b      	ldr	r3, [pc, #428]	@ (34012d20 <HAL_GPIO_DeInit+0x250>)
34012b74:	4298      	cmp	r0, r3
34012b76:	d008      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b78:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012b7c:	4298      	cmp	r0, r3
34012b7e:	d004      	beq.n	34012b8a <HAL_GPIO_DeInit+0xba>
34012b80:	f240 112d 	movw	r1, #301	@ 0x12d
34012b84:	4867      	ldr	r0, [pc, #412]	@ (34012d24 <HAL_GPIO_DeInit+0x254>)
34012b86:	f00c fd3b 	bl	3401f600 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34012b8a:	b2ab      	uxth	r3, r5
34012b8c:	b113      	cbz	r3, 34012b94 <HAL_GPIO_DeInit+0xc4>
34012b8e:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
34012b92:	d304      	bcc.n	34012b9e <HAL_GPIO_DeInit+0xce>
34012b94:	f44f 7197 	mov.w	r1, #302	@ 0x12e
34012b98:	4862      	ldr	r0, [pc, #392]	@ (34012d24 <HAL_GPIO_DeInit+0x254>)
34012b9a:	f00c fd31 	bl	3401f600 <assert_failed>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34012b9e:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
34012ba0:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34012ba4:	f04f 080f 	mov.w	r8, #15
        EXTI->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34012ba8:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR1 &= ~(iocurrent);
34012bac:	485e      	ldr	r0, [pc, #376]	@ (34012d28 <HAL_GPIO_DeInit+0x258>)
  while ((GPIO_Pin >> position) != 0x00u)
34012bae:	fa35 f302 	lsrs.w	r3, r5, r2
34012bb2:	d101      	bne.n	34012bb8 <HAL_GPIO_DeInit+0xe8>
      GPIOx->ADVCFGR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_ADVCFGRL_1_Pos)) ;
    }

    position++;
  }
}
34012bb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
34012bb8:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00u)
34012bbc:	ea1c 0605 	ands.w	r6, ip, r5
34012bc0:	d07f      	beq.n	34012cc2 <HAL_GPIO_DeInit+0x1f2>
      tmp = EXTI->EXTICR[position >> 2u];
34012bc2:	f022 0103 	bic.w	r1, r2, #3
34012bc6:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
34012bca:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34012bce:	f002 0703 	and.w	r7, r2, #3
      tmp = EXTI->EXTICR[position >> 2u];
34012bd2:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34012bd4:	00ff      	lsls	r7, r7, #3
34012bd6:	fa08 f907 	lsl.w	r9, r8, r7
34012bda:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34012bde:	4b45      	ldr	r3, [pc, #276]	@ (34012cf4 <HAL_GPIO_DeInit+0x224>)
34012be0:	429c      	cmp	r4, r3
34012be2:	d070      	beq.n	34012cc6 <HAL_GPIO_DeInit+0x1f6>
34012be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012be8:	429c      	cmp	r4, r3
34012bea:	d06e      	beq.n	34012cca <HAL_GPIO_DeInit+0x1fa>
34012bec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012bf0:	429c      	cmp	r4, r3
34012bf2:	d06c      	beq.n	34012cce <HAL_GPIO_DeInit+0x1fe>
34012bf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012bf8:	429c      	cmp	r4, r3
34012bfa:	d06a      	beq.n	34012cd2 <HAL_GPIO_DeInit+0x202>
34012bfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012c00:	429c      	cmp	r4, r3
34012c02:	d068      	beq.n	34012cd6 <HAL_GPIO_DeInit+0x206>
34012c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012c08:	429c      	cmp	r4, r3
34012c0a:	d066      	beq.n	34012cda <HAL_GPIO_DeInit+0x20a>
34012c0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012c10:	429c      	cmp	r4, r3
34012c12:	d064      	beq.n	34012cde <HAL_GPIO_DeInit+0x20e>
34012c14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012c18:	429c      	cmp	r4, r3
34012c1a:	d062      	beq.n	34012ce2 <HAL_GPIO_DeInit+0x212>
34012c1c:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34012c20:	429c      	cmp	r4, r3
34012c22:	d060      	beq.n	34012ce6 <HAL_GPIO_DeInit+0x216>
34012c24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012c28:	429c      	cmp	r4, r3
34012c2a:	d05e      	beq.n	34012cea <HAL_GPIO_DeInit+0x21a>
34012c2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012c30:	429c      	cmp	r4, r3
34012c32:	d05c      	beq.n	34012cee <HAL_GPIO_DeInit+0x21e>
34012c34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012c38:	429c      	cmp	r4, r3
34012c3a:	bf14      	ite	ne
34012c3c:	2310      	movne	r3, #16
34012c3e:	230b      	moveq	r3, #11
34012c40:	40bb      	lsls	r3, r7
34012c42:	4573      	cmp	r3, lr
34012c44:	d117      	bne.n	34012c76 <HAL_GPIO_DeInit+0x1a6>
        EXTI->IMR1 &= ~(iocurrent);
34012c46:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
34012c4a:	ea23 0306 	bic.w	r3, r3, r6
34012c4e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
34012c52:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
34012c56:	ea23 0306 	bic.w	r3, r3, r6
34012c5a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
34012c5e:	6803      	ldr	r3, [r0, #0]
34012c60:	ea23 0306 	bic.w	r3, r3, r6
34012c64:	6003      	str	r3, [r0, #0]
        EXTI->FTSR1 &= ~(iocurrent);
34012c66:	6843      	ldr	r3, [r0, #4]
34012c68:	ea23 0306 	bic.w	r3, r3, r6
34012c6c:	6043      	str	r3, [r0, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
34012c6e:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
34012c70:	ea23 0309 	bic.w	r3, r3, r9
34012c74:	660b      	str	r3, [r1, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34012c76:	6823      	ldr	r3, [r4, #0]
34012c78:	0056      	lsls	r6, r2, #1
34012c7a:	fa0b f606 	lsl.w	r6, fp, r6
34012c7e:	4333      	orrs	r3, r6
34012c80:	6023      	str	r3, [r4, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
34012c82:	08d3      	lsrs	r3, r2, #3
34012c84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
34012c88:	f002 0107 	and.w	r1, r2, #7
34012c8c:	6a1f      	ldr	r7, [r3, #32]
34012c8e:	0089      	lsls	r1, r1, #2
34012c90:	fa08 f101 	lsl.w	r1, r8, r1
34012c94:	ea27 0701 	bic.w	r7, r7, r1
34012c98:	621f      	str	r7, [r3, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34012c9a:	68a7      	ldr	r7, [r4, #8]
34012c9c:	ea27 0706 	bic.w	r7, r7, r6
34012ca0:	60a7      	str	r7, [r4, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
34012ca2:	6867      	ldr	r7, [r4, #4]
34012ca4:	ea27 070c 	bic.w	r7, r7, ip
34012ca8:	6067      	str	r7, [r4, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34012caa:	68e7      	ldr	r7, [r4, #12]
34012cac:	ea27 0706 	bic.w	r7, r7, r6
34012cb0:	60e7      	str	r7, [r4, #12]
      GPIOx->DELAYR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_DELAYRL_DLY1_Pos)) ;
34012cb2:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
34012cb4:	ea26 0601 	bic.w	r6, r6, r1
34012cb8:	641e      	str	r6, [r3, #64]	@ 0x40
      GPIOx->ADVCFGR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_ADVCFGRL_1_Pos)) ;
34012cba:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
34012cbc:	ea26 0101 	bic.w	r1, r6, r1
34012cc0:	6499      	str	r1, [r3, #72]	@ 0x48
    position++;
34012cc2:	3201      	adds	r2, #1
34012cc4:	e773      	b.n	34012bae <HAL_GPIO_DeInit+0xde>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34012cc6:	2300      	movs	r3, #0
34012cc8:	e7ba      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012cca:	2301      	movs	r3, #1
34012ccc:	e7b8      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012cce:	2302      	movs	r3, #2
34012cd0:	e7b6      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012cd2:	2303      	movs	r3, #3
34012cd4:	e7b4      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012cd6:	2304      	movs	r3, #4
34012cd8:	e7b2      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012cda:	2305      	movs	r3, #5
34012cdc:	e7b0      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012cde:	2306      	movs	r3, #6
34012ce0:	e7ae      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012ce2:	2307      	movs	r3, #7
34012ce4:	e7ac      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012ce6:	2308      	movs	r3, #8
34012ce8:	e7aa      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012cea:	2309      	movs	r3, #9
34012cec:	e7a8      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012cee:	230a      	movs	r3, #10
34012cf0:	e7a6      	b.n	34012c40 <HAL_GPIO_DeInit+0x170>
34012cf2:	bf00      	nop
34012cf4:	56020000 	.word	0x56020000
34012cf8:	56020400 	.word	0x56020400
34012cfc:	56020800 	.word	0x56020800
34012d00:	56020c00 	.word	0x56020c00
34012d04:	56021000 	.word	0x56021000
34012d08:	56021400 	.word	0x56021400
34012d0c:	56021800 	.word	0x56021800
34012d10:	56021c00 	.word	0x56021c00
34012d14:	56023400 	.word	0x56023400
34012d18:	56023800 	.word	0x56023800
34012d1c:	56023c00 	.word	0x56023c00
34012d20:	56024000 	.word	0x56024000
34012d24:	3402f316 	.word	0x3402f316
34012d28:	56025000 	.word	0x56025000

34012d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34012d2c:	b538      	push	{r3, r4, r5, lr}
34012d2e:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34012d30:	460c      	mov	r4, r1
34012d32:	b921      	cbnz	r1, 34012d3e <HAL_GPIO_ReadPin+0x12>
34012d34:	f44f 71c1 	mov.w	r1, #386	@ 0x182
34012d38:	4804      	ldr	r0, [pc, #16]	@ (34012d4c <HAL_GPIO_ReadPin+0x20>)
34012d3a:	f00c fc61 	bl	3401f600 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
34012d3e:	692b      	ldr	r3, [r5, #16]
34012d40:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
34012d42:	bf14      	ite	ne
34012d44:	2001      	movne	r0, #1
34012d46:	2000      	moveq	r0, #0
34012d48:	bd38      	pop	{r3, r4, r5, pc}
34012d4a:	bf00      	nop
34012d4c:	3402f316 	.word	0x3402f316

34012d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34012d50:	b570      	push	{r4, r5, r6, lr}
34012d52:	4605      	mov	r5, r0
34012d54:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34012d56:	460c      	mov	r4, r1
34012d58:	b921      	cbnz	r1, 34012d64 <HAL_GPIO_WritePin+0x14>
34012d5a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
34012d5e:	4808      	ldr	r0, [pc, #32]	@ (34012d80 <HAL_GPIO_WritePin+0x30>)
34012d60:	f00c fc4e 	bl	3401f600 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34012d64:	2e01      	cmp	r6, #1
34012d66:	d906      	bls.n	34012d76 <HAL_GPIO_WritePin+0x26>
34012d68:	f240 11a1 	movw	r1, #417	@ 0x1a1
34012d6c:	4804      	ldr	r0, [pc, #16]	@ (34012d80 <HAL_GPIO_WritePin+0x30>)
34012d6e:	f00c fc47 	bl	3401f600 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34012d72:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34012d74:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
34012d76:	2e00      	cmp	r6, #0
34012d78:	d1fb      	bne.n	34012d72 <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34012d7a:	62ac      	str	r4, [r5, #40]	@ 0x28
}
34012d7c:	e7fa      	b.n	34012d74 <HAL_GPIO_WritePin+0x24>
34012d7e:	bf00      	nop
34012d80:	3402f316 	.word	0x3402f316

34012d84 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
34012d84:	b510      	push	{r4, lr}
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
34012d86:	4604      	mov	r4, r0
34012d88:	b1c8      	cbz	r0, 34012dbe <HAL_GPU2D_Init+0x3a>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
34012d8a:	6803      	ldr	r3, [r0, #0]
34012d8c:	4a0d      	ldr	r2, [pc, #52]	@ (34012dc4 <HAL_GPU2D_Init+0x40>)
34012d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
34012d92:	4293      	cmp	r3, r2
34012d94:	d003      	beq.n	34012d9e <HAL_GPU2D_Init+0x1a>
34012d96:	21c7      	movs	r1, #199	@ 0xc7
34012d98:	480b      	ldr	r0, [pc, #44]	@ (34012dc8 <HAL_GPU2D_Init+0x44>)
34012d9a:	f00c fc31 	bl	3401f600 <assert_failed>

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
34012d9e:	7963      	ldrb	r3, [r4, #5]
34012da0:	b943      	cbnz	r3, 34012db4 <HAL_GPU2D_Init+0x30>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
34012da2:	4620      	mov	r0, r4
34012da4:	f00c fc2e 	bl	3401f604 <HAL_GPU2D_MspInit>
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
34012da8:	2000      	movs	r0, #0

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
34012daa:	2301      	movs	r3, #1
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
34012dac:	60a0      	str	r0, [r4, #8]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
34012dae:	7120      	strb	r0, [r4, #4]
  hgpu2d->State = HAL_GPU2D_STATE_READY;
34012db0:	7163      	strb	r3, [r4, #5]

  return HAL_OK;
}
34012db2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hgpu2d);
34012db4:	7923      	ldrb	r3, [r4, #4]
34012db6:	2b01      	cmp	r3, #1
34012db8:	d1f6      	bne.n	34012da8 <HAL_GPU2D_Init+0x24>
34012dba:	2002      	movs	r0, #2
34012dbc:	e7f9      	b.n	34012db2 <HAL_GPU2D_Init+0x2e>
    return HAL_ERROR;
34012dbe:	2001      	movs	r0, #1
34012dc0:	e7f7      	b.n	34012db2 <HAL_GPU2D_Init+0x2e>
34012dc2:	bf00      	nop
34012dc4:	48034000 	.word	0x48034000
34012dc8:	3402f38b 	.word	0x3402f38b

34012dcc <HAL_GPU2D_ReadRegister>:
  *                   the configuration information for the GPU2D.
  * @param  offset    The register offset from GPU2D base address to read.
  * @retval Register value
  */
uint32_t HAL_GPU2D_ReadRegister(const GPU2D_HandleTypeDef *hgpu2d, uint32_t offset)
{
34012dcc:	b538      	push	{r3, r4, r5, lr}
34012dce:	460d      	mov	r5, r1
  uint32_t value;

  /* Check the GPU2D handle validity */
  assert_param(hgpu2d != NULL);
34012dd0:	4604      	mov	r4, r0
34012dd2:	b920      	cbnz	r0, 34012dde <HAL_GPU2D_ReadRegister+0x12>
34012dd4:	f44f 710f 	mov.w	r1, #572	@ 0x23c
34012dd8:	480c      	ldr	r0, [pc, #48]	@ (34012e0c <HAL_GPU2D_ReadRegister+0x40>)
34012dda:	f00c fc11 	bl	3401f600 <assert_failed>

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
34012dde:	6823      	ldr	r3, [r4, #0]
34012de0:	4a0b      	ldr	r2, [pc, #44]	@ (34012e10 <HAL_GPU2D_ReadRegister+0x44>)
34012de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
34012de6:	4293      	cmp	r3, r2
34012de8:	d004      	beq.n	34012df4 <HAL_GPU2D_ReadRegister+0x28>
34012dea:	f240 213f 	movw	r1, #575	@ 0x23f
34012dee:	4807      	ldr	r0, [pc, #28]	@ (34012e0c <HAL_GPU2D_ReadRegister+0x40>)
34012df0:	f00c fc06 	bl	3401f600 <assert_failed>
  assert_param(IS_GPU2D_OFFSET(offset));
34012df4:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
34012df8:	d304      	bcc.n	34012e04 <HAL_GPU2D_ReadRegister+0x38>
34012dfa:	f44f 7110 	mov.w	r1, #576	@ 0x240
34012dfe:	4803      	ldr	r0, [pc, #12]	@ (34012e0c <HAL_GPU2D_ReadRegister+0x40>)
34012e00:	f00c fbfe 	bl	3401f600 <assert_failed>

  /* No locking is required since reading a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  value = GPU2D_ReadReg(hgpu2d->Instance, offset);
34012e04:	6823      	ldr	r3, [r4, #0]
34012e06:	58e8      	ldr	r0, [r5, r3]

  return value;
}
34012e08:	bd38      	pop	{r3, r4, r5, pc}
34012e0a:	bf00      	nop
34012e0c:	3402f38b 	.word	0x3402f38b
34012e10:	48034000 	.word	0x48034000

34012e14 <HAL_GPU2D_WriteRegister>:
  * @param  offset    The register offset from GPU2D base address to write.
  * @param  value     The value to be written to provided register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_WriteRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset, uint32_t value)
{
34012e14:	b570      	push	{r4, r5, r6, lr}
34012e16:	460d      	mov	r5, r1
34012e18:	4616      	mov	r6, r2
  /* Check the GPU2D handle validity */
  assert_param(hgpu2d != NULL);
34012e1a:	4604      	mov	r4, r0
34012e1c:	b920      	cbnz	r0, 34012e28 <HAL_GPU2D_WriteRegister+0x14>
34012e1e:	f44f 7115 	mov.w	r1, #596	@ 0x254
34012e22:	480d      	ldr	r0, [pc, #52]	@ (34012e58 <HAL_GPU2D_WriteRegister+0x44>)
34012e24:	f00c fbec 	bl	3401f600 <assert_failed>

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
34012e28:	6823      	ldr	r3, [r4, #0]
34012e2a:	4a0c      	ldr	r2, [pc, #48]	@ (34012e5c <HAL_GPU2D_WriteRegister+0x48>)
34012e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
34012e30:	4293      	cmp	r3, r2
34012e32:	d004      	beq.n	34012e3e <HAL_GPU2D_WriteRegister+0x2a>
34012e34:	f240 2157 	movw	r1, #599	@ 0x257
34012e38:	4807      	ldr	r0, [pc, #28]	@ (34012e58 <HAL_GPU2D_WriteRegister+0x44>)
34012e3a:	f00c fbe1 	bl	3401f600 <assert_failed>
  assert_param(IS_GPU2D_OFFSET(offset));
34012e3e:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
34012e42:	d304      	bcc.n	34012e4e <HAL_GPU2D_WriteRegister+0x3a>
34012e44:	f44f 7116 	mov.w	r1, #600	@ 0x258
34012e48:	4803      	ldr	r0, [pc, #12]	@ (34012e58 <HAL_GPU2D_WriteRegister+0x44>)
34012e4a:	f00c fbd9 	bl	3401f600 <assert_failed>

  /* No locking is required since writing a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
34012e4e:	6823      	ldr	r3, [r4, #0]

  return HAL_OK;
}
34012e50:	2000      	movs	r0, #0
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
34012e52:	50ee      	str	r6, [r5, r3]
}
34012e54:	bd70      	pop	{r4, r5, r6, pc}
34012e56:	bf00      	nop
34012e58:	3402f38b 	.word	0x3402f38b
34012e5c:	48034000 	.word	0x48034000

34012e60 <HAL_GPU2D_IRQHandler>:
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
34012e60:	6802      	ldr	r2, [r0, #0]
{
34012e62:	b508      	push	{r3, lr}
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
34012e64:	f8d2 10f8 	ldr.w	r1, [r2, #248]	@ 0xf8

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
34012e68:	07c9      	lsls	r1, r1, #31
34012e6a:	d50a      	bpl.n	34012e82 <HAL_GPU2D_IRQHandler+0x22>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
34012e6c:	f8d2 10f8 	ldr.w	r1, [r2, #248]	@ 0xf8
34012e70:	f021 0101 	bic.w	r1, r1, #1
34012e74:	f8c2 10f8 	str.w	r1, [r2, #248]	@ 0xf8

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
34012e78:	6803      	ldr	r3, [r0, #0]
34012e7a:	f8d3 1148 	ldr.w	r1, [r3, #328]	@ 0x148
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
34012e7e:	f00c fbf3 	bl	3401f668 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
34012e82:	bd08      	pop	{r3, pc}

34012e84 <HAL_GPU2D_ErrorCallback>:
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
34012e84:	e7fe      	b.n	34012e84 <HAL_GPU2D_ErrorCallback>

34012e86 <HAL_GPU2D_ER_IRQHandler>:
{
34012e86:	b508      	push	{r3, lr}
  HAL_GPU2D_ErrorCallback(hgpu2d);
34012e88:	f7ff fffc 	bl	34012e84 <HAL_GPU2D_ErrorCallback>
}
34012e8c:	bd08      	pop	{r3, pc}

34012e8e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
34012e8e:	6803      	ldr	r3, [r0, #0]
34012e90:	699a      	ldr	r2, [r3, #24]
34012e92:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
34012e94:	bf44      	itt	mi
34012e96:	2200      	movmi	r2, #0
34012e98:	629a      	strmi	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
34012e9a:	699a      	ldr	r2, [r3, #24]
34012e9c:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
34012e9e:	bf5e      	ittt	pl
34012ea0:	699a      	ldrpl	r2, [r3, #24]
34012ea2:	f042 0201 	orrpl.w	r2, r2, #1
34012ea6:	619a      	strpl	r2, [r3, #24]
  }
}
34012ea8:	4770      	bx	lr
	...

34012eac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
34012eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34012eb0:	4614      	mov	r4, r2
34012eb2:	461f      	mov	r7, r3
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34012eb4:	6802      	ldr	r2, [r0, #0]
34012eb6:	4b29      	ldr	r3, [pc, #164]	@ (34012f5c <I2C_TransferConfig+0xb0>)
{
34012eb8:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34012eba:	429a      	cmp	r2, r3
{
34012ebc:	460e      	mov	r6, r1
34012ebe:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34012ec0:	d01d      	beq.n	34012efe <I2C_TransferConfig+0x52>
34012ec2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012ec6:	429a      	cmp	r2, r3
34012ec8:	d019      	beq.n	34012efe <I2C_TransferConfig+0x52>
34012eca:	4b25      	ldr	r3, [pc, #148]	@ (34012f60 <I2C_TransferConfig+0xb4>)
34012ecc:	429a      	cmp	r2, r3
34012ece:	d016      	beq.n	34012efe <I2C_TransferConfig+0x52>
34012ed0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012ed4:	429a      	cmp	r2, r3
34012ed6:	d012      	beq.n	34012efe <I2C_TransferConfig+0x52>
34012ed8:	4b22      	ldr	r3, [pc, #136]	@ (34012f64 <I2C_TransferConfig+0xb8>)
34012eda:	429a      	cmp	r2, r3
34012edc:	d00f      	beq.n	34012efe <I2C_TransferConfig+0x52>
34012ede:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012ee2:	429a      	cmp	r2, r3
34012ee4:	d00b      	beq.n	34012efe <I2C_TransferConfig+0x52>
34012ee6:	4b20      	ldr	r3, [pc, #128]	@ (34012f68 <I2C_TransferConfig+0xbc>)
34012ee8:	429a      	cmp	r2, r3
34012eea:	d008      	beq.n	34012efe <I2C_TransferConfig+0x52>
34012eec:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012ef0:	429a      	cmp	r2, r3
34012ef2:	d004      	beq.n	34012efe <I2C_TransferConfig+0x52>
34012ef4:	f641 51c9 	movw	r1, #7625	@ 0x1dc9
34012ef8:	481c      	ldr	r0, [pc, #112]	@ (34012f6c <I2C_TransferConfig+0xc0>)
34012efa:	f00c fb81 	bl	3401f600 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
34012efe:	f037 7380 	bics.w	r3, r7, #16777216	@ 0x1000000
34012f02:	d007      	beq.n	34012f14 <I2C_TransferConfig+0x68>
34012f04:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
34012f08:	d004      	beq.n	34012f14 <I2C_TransferConfig+0x68>
34012f0a:	f641 51ca 	movw	r1, #7626	@ 0x1dca
34012f0e:	4817      	ldr	r0, [pc, #92]	@ (34012f6c <I2C_TransferConfig+0xc0>)
34012f10:	f00c fb76 	bl	3401f600 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
34012f14:	4b16      	ldr	r3, [pc, #88]	@ (34012f70 <I2C_TransferConfig+0xc4>)
34012f16:	429d      	cmp	r5, r3
34012f18:	d00b      	beq.n	34012f32 <I2C_TransferConfig+0x86>
34012f1a:	f425 6280 	bic.w	r2, r5, #1024	@ 0x400
34012f1e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
34012f22:	429a      	cmp	r2, r3
34012f24:	d005      	beq.n	34012f32 <I2C_TransferConfig+0x86>
34012f26:	b125      	cbz	r5, 34012f32 <I2C_TransferConfig+0x86>
34012f28:	f641 51cb 	movw	r1, #7627	@ 0x1dcb
34012f2c:	480f      	ldr	r0, [pc, #60]	@ (34012f6c <I2C_TransferConfig+0xc0>)
34012f2e:	f00c fb67 	bl	3401f600 <assert_failed>
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
34012f32:	f8d8 0000 	ldr.w	r0, [r8]
34012f36:	490f      	ldr	r1, [pc, #60]	@ (34012f74 <I2C_TransferConfig+0xc8>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34012f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
34012f3c:	6842      	ldr	r2, [r0, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34012f3e:	ea44 0307 	orr.w	r3, r4, r7
34012f42:	f3c6 0609 	ubfx	r6, r6, #0, #10
34012f46:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->CR2, \
34012f48:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34012f4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
34012f50:	ea22 0201 	bic.w	r2, r2, r1
34012f54:	4313      	orrs	r3, r2
34012f56:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
34012f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34012f5c:	50005400 	.word	0x50005400
34012f60:	50005800 	.word	0x50005800
34012f64:	50005c00 	.word	0x50005c00
34012f68:	56001c00 	.word	0x56001c00
34012f6c:	3402f401 	.word	0x3402f401
34012f70:	80004000 	.word	0x80004000
34012f74:	03ff63ff 	.word	0x03ff63ff

34012f78 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
34012f78:	6803      	ldr	r3, [r0, #0]
{
34012f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
34012f7e:	699c      	ldr	r4, [r3, #24]
{
34012f80:	4605      	mov	r5, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
34012f82:	f014 0410 	ands.w	r4, r4, #16
{
34012f86:	460f      	mov	r7, r1
34012f88:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
34012f8a:	d06f      	beq.n	3401306c <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
34012f8c:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
34012f8e:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
34012f90:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
34012f92:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
34012f94:	682b      	ldr	r3, [r5, #0]
34012f96:	699a      	ldr	r2, [r3, #24]
34012f98:	0690      	lsls	r0, r2, #26
34012f9a:	d461      	bmi.n	34013060 <I2C_IsErrorOccurred+0xe8>
34012f9c:	f1b8 0f00 	cmp.w	r8, #0
34012fa0:	d035      	beq.n	3401300e <I2C_IsErrorOccurred+0x96>
    status = HAL_ERROR;
34012fa2:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
34012fa4:	f044 0404 	orr.w	r4, r4, #4
  itflag = hi2c->Instance->ISR;
34012fa8:	682e      	ldr	r6, [r5, #0]
34012faa:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
34012fac:	05d9      	lsls	r1, r3, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
34012fae:	bf41      	itttt	mi
34012fb0:	f44f 7280 	movmi.w	r2, #256	@ 0x100
    status = HAL_ERROR;
34012fb4:	2001      	movmi	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
34012fb6:	61f2      	strmi	r2, [r6, #28]
    error_code |= HAL_I2C_ERROR_BERR;
34012fb8:	f044 0401 	orrmi.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
34012fbc:	055a      	lsls	r2, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
34012fbe:	bf41      	itttt	mi
34012fc0:	f44f 6280 	movmi.w	r2, #1024	@ 0x400
    status = HAL_ERROR;
34012fc4:	2001      	movmi	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
34012fc6:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
34012fca:	61f2      	strmi	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
34012fcc:	059b      	lsls	r3, r3, #22
34012fce:	d54f      	bpl.n	34013070 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
34012fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
34012fd4:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
34012fd8:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
34012fda:	4628      	mov	r0, r5
34012fdc:	f7ff ff57 	bl	34012e8e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
34012fe0:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
34012fe2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
34012fe4:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
34012fe8:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
34012fec:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
34012ff0:	f023 0301 	bic.w	r3, r3, #1
34012ff4:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
34012ff6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
34012ff8:	4323      	orrs	r3, r4
34012ffa:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
34012ffc:	2320      	movs	r3, #32
34012ffe:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
34013002:	2300      	movs	r3, #0
34013004:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
34013008:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
3401300c:	e032      	b.n	34013074 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
3401300e:	1c7a      	adds	r2, r7, #1
34013010:	d0c1      	beq.n	34012f96 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
34013012:	f00b ff63 	bl	3401eedc <HAL_GetTick>
34013016:	1b80      	subs	r0, r0, r6
34013018:	42b8      	cmp	r0, r7
3401301a:	d801      	bhi.n	34013020 <I2C_IsErrorOccurred+0xa8>
3401301c:	2f00      	cmp	r7, #0
3401301e:	d1b9      	bne.n	34012f94 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
34013020:	682b      	ldr	r3, [r5, #0]
34013022:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
34013024:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
34013028:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
3401302a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
3401302c:	0400      	lsls	r0, r0, #16
3401302e:	d50a      	bpl.n	34013046 <I2C_IsErrorOccurred+0xce>
34013030:	0449      	lsls	r1, r1, #17
34013032:	d408      	bmi.n	34013046 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
34013034:	2a20      	cmp	r2, #32
34013036:	d006      	beq.n	34013046 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
34013038:	685a      	ldr	r2, [r3, #4]
3401303a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
3401303e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
34013040:	f00b ff4c 	bl	3401eedc <HAL_GetTick>
34013044:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34013046:	682b      	ldr	r3, [r5, #0]
34013048:	699b      	ldr	r3, [r3, #24]
3401304a:	069b      	lsls	r3, r3, #26
3401304c:	d4a2      	bmi.n	34012f94 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
3401304e:	f00b ff45 	bl	3401eedc <HAL_GetTick>
34013052:	1b80      	subs	r0, r0, r6
34013054:	2819      	cmp	r0, #25
34013056:	d9f6      	bls.n	34013046 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
34013058:	2420      	movs	r4, #32
              status = HAL_ERROR;
3401305a:	f04f 0801 	mov.w	r8, #1
3401305e:	e799      	b.n	34012f94 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
34013060:	f1b8 0f00 	cmp.w	r8, #0
34013064:	d19d      	bne.n	34012fa2 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
34013066:	2220      	movs	r2, #32
34013068:	61da      	str	r2, [r3, #28]
3401306a:	e79a      	b.n	34012fa2 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
3401306c:	4620      	mov	r0, r4
3401306e:	e79b      	b.n	34012fa8 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
34013070:	2800      	cmp	r0, #0
34013072:	d1b2      	bne.n	34012fda <I2C_IsErrorOccurred+0x62>
}
34013074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

34013078 <I2C_WaitOnTXISFlagUntilTimeout>:
{
34013078:	b570      	push	{r4, r5, r6, lr}
3401307a:	4604      	mov	r4, r0
3401307c:	460d      	mov	r5, r1
3401307e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
34013080:	6823      	ldr	r3, [r4, #0]
34013082:	699b      	ldr	r3, [r3, #24]
34013084:	079b      	lsls	r3, r3, #30
34013086:	d501      	bpl.n	3401308c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
34013088:	2000      	movs	r0, #0
3401308a:	e01f      	b.n	340130cc <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
3401308c:	4632      	mov	r2, r6
3401308e:	4629      	mov	r1, r5
34013090:	4620      	mov	r0, r4
34013092:	f7ff ff71 	bl	34012f78 <I2C_IsErrorOccurred>
34013096:	b9c0      	cbnz	r0, 340130ca <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
34013098:	1c6a      	adds	r2, r5, #1
3401309a:	d0f1      	beq.n	34013080 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401309c:	f00b ff1e 	bl	3401eedc <HAL_GetTick>
340130a0:	1b80      	subs	r0, r0, r6
340130a2:	42a8      	cmp	r0, r5
340130a4:	d801      	bhi.n	340130aa <I2C_WaitOnTXISFlagUntilTimeout+0x32>
340130a6:	2d00      	cmp	r5, #0
340130a8:	d1ea      	bne.n	34013080 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
340130aa:	6823      	ldr	r3, [r4, #0]
340130ac:	699b      	ldr	r3, [r3, #24]
340130ae:	f013 0302 	ands.w	r3, r3, #2
340130b2:	d1e5      	bne.n	34013080 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
340130b4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
340130b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
340130ba:	f042 0220 	orr.w	r2, r2, #32
340130be:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
340130c0:	2220      	movs	r2, #32
340130c2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
340130c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
340130ca:	2001      	movs	r0, #1
}
340130cc:	bd70      	pop	{r4, r5, r6, pc}

340130ce <I2C_WaitOnFlagUntilTimeout>:
{
340130ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340130d2:	4604      	mov	r4, r0
340130d4:	460f      	mov	r7, r1
340130d6:	4616      	mov	r6, r2
340130d8:	461d      	mov	r5, r3
340130da:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
340130de:	6823      	ldr	r3, [r4, #0]
340130e0:	699b      	ldr	r3, [r3, #24]
340130e2:	ea37 0303 	bics.w	r3, r7, r3
340130e6:	bf0c      	ite	eq
340130e8:	2301      	moveq	r3, #1
340130ea:	2300      	movne	r3, #0
340130ec:	42b3      	cmp	r3, r6
340130ee:	d001      	beq.n	340130f4 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
340130f0:	2000      	movs	r0, #0
340130f2:	e025      	b.n	34013140 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
340130f4:	4642      	mov	r2, r8
340130f6:	4629      	mov	r1, r5
340130f8:	4620      	mov	r0, r4
340130fa:	f7ff ff3d 	bl	34012f78 <I2C_IsErrorOccurred>
340130fe:	b9f0      	cbnz	r0, 3401313e <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
34013100:	1c6b      	adds	r3, r5, #1
34013102:	d0ec      	beq.n	340130de <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34013104:	f00b feea 	bl	3401eedc <HAL_GetTick>
34013108:	eba0 0008 	sub.w	r0, r0, r8
3401310c:	42a8      	cmp	r0, r5
3401310e:	d801      	bhi.n	34013114 <I2C_WaitOnFlagUntilTimeout+0x46>
34013110:	2d00      	cmp	r5, #0
34013112:	d1e4      	bne.n	340130de <I2C_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34013114:	6823      	ldr	r3, [r4, #0]
34013116:	699b      	ldr	r3, [r3, #24]
34013118:	ea37 0303 	bics.w	r3, r7, r3
3401311c:	bf0c      	ite	eq
3401311e:	2301      	moveq	r3, #1
34013120:	2300      	movne	r3, #0
34013122:	42b3      	cmp	r3, r6
34013124:	d1db      	bne.n	340130de <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34013126:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34013128:	f043 0320 	orr.w	r3, r3, #32
3401312c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
3401312e:	2320      	movs	r3, #32
34013130:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
34013134:	2300      	movs	r3, #0
34013136:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
3401313a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
3401313e:	2001      	movs	r0, #1
}
34013140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

34013144 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
34013144:	b570      	push	{r4, r5, r6, lr}
34013146:	4604      	mov	r4, r0
34013148:	460d      	mov	r5, r1
3401314a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
3401314c:	6823      	ldr	r3, [r4, #0]
3401314e:	699b      	ldr	r3, [r3, #24]
34013150:	069b      	lsls	r3, r3, #26
34013152:	d501      	bpl.n	34013158 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
34013154:	2000      	movs	r0, #0
34013156:	e01d      	b.n	34013194 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34013158:	4632      	mov	r2, r6
3401315a:	4629      	mov	r1, r5
3401315c:	4620      	mov	r0, r4
3401315e:	f7ff ff0b 	bl	34012f78 <I2C_IsErrorOccurred>
34013162:	b9b0      	cbnz	r0, 34013192 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34013164:	f00b feba 	bl	3401eedc <HAL_GetTick>
34013168:	1b80      	subs	r0, r0, r6
3401316a:	42a8      	cmp	r0, r5
3401316c:	d801      	bhi.n	34013172 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
3401316e:	2d00      	cmp	r5, #0
34013170:	d1ec      	bne.n	3401314c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34013172:	6823      	ldr	r3, [r4, #0]
34013174:	699b      	ldr	r3, [r3, #24]
34013176:	f013 0320 	ands.w	r3, r3, #32
3401317a:	d1e7      	bne.n	3401314c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
3401317c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
3401317e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34013182:	f042 0220 	orr.w	r2, r2, #32
34013186:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
34013188:	2220      	movs	r2, #32
3401318a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
3401318e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
34013192:	2001      	movs	r0, #1
}
34013194:	bd70      	pop	{r4, r5, r6, pc}

34013196 <HAL_I2C_MspInit>:
}
34013196:	4770      	bx	lr

34013198 <HAL_I2C_Init>:
{
34013198:	b510      	push	{r4, lr}
  if (hi2c == NULL)
3401319a:	4604      	mov	r4, r0
3401319c:	2800      	cmp	r0, #0
3401319e:	f000 80af 	beq.w	34013300 <HAL_I2C_Init+0x168>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
340131a2:	6803      	ldr	r3, [r0, #0]
340131a4:	4a57      	ldr	r2, [pc, #348]	@ (34013304 <HAL_I2C_Init+0x16c>)
340131a6:	4293      	cmp	r3, r2
340131a8:	d01d      	beq.n	340131e6 <HAL_I2C_Init+0x4e>
340131aa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340131ae:	4293      	cmp	r3, r2
340131b0:	d019      	beq.n	340131e6 <HAL_I2C_Init+0x4e>
340131b2:	4a55      	ldr	r2, [pc, #340]	@ (34013308 <HAL_I2C_Init+0x170>)
340131b4:	4293      	cmp	r3, r2
340131b6:	d016      	beq.n	340131e6 <HAL_I2C_Init+0x4e>
340131b8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340131bc:	4293      	cmp	r3, r2
340131be:	d012      	beq.n	340131e6 <HAL_I2C_Init+0x4e>
340131c0:	4a52      	ldr	r2, [pc, #328]	@ (3401330c <HAL_I2C_Init+0x174>)
340131c2:	4293      	cmp	r3, r2
340131c4:	d00f      	beq.n	340131e6 <HAL_I2C_Init+0x4e>
340131c6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340131ca:	4293      	cmp	r3, r2
340131cc:	d00b      	beq.n	340131e6 <HAL_I2C_Init+0x4e>
340131ce:	4a50      	ldr	r2, [pc, #320]	@ (34013310 <HAL_I2C_Init+0x178>)
340131d0:	4293      	cmp	r3, r2
340131d2:	d008      	beq.n	340131e6 <HAL_I2C_Init+0x4e>
340131d4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340131d8:	4293      	cmp	r3, r2
340131da:	d004      	beq.n	340131e6 <HAL_I2C_Init+0x4e>
340131dc:	f240 2126 	movw	r1, #550	@ 0x226
340131e0:	484c      	ldr	r0, [pc, #304]	@ (34013314 <HAL_I2C_Init+0x17c>)
340131e2:	f00c fa0d 	bl	3401f600 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
340131e6:	68a3      	ldr	r3, [r4, #8]
340131e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
340131ec:	d304      	bcc.n	340131f8 <HAL_I2C_Init+0x60>
340131ee:	f240 2127 	movw	r1, #551	@ 0x227
340131f2:	4848      	ldr	r0, [pc, #288]	@ (34013314 <HAL_I2C_Init+0x17c>)
340131f4:	f00c fa04 	bl	3401f600 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
340131f8:	68e3      	ldr	r3, [r4, #12]
340131fa:	3b01      	subs	r3, #1
340131fc:	2b01      	cmp	r3, #1
340131fe:	d904      	bls.n	3401320a <HAL_I2C_Init+0x72>
34013200:	f44f 710a 	mov.w	r1, #552	@ 0x228
34013204:	4843      	ldr	r0, [pc, #268]	@ (34013314 <HAL_I2C_Init+0x17c>)
34013206:	f00c f9fb 	bl	3401f600 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
3401320a:	6923      	ldr	r3, [r4, #16]
3401320c:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
34013210:	d004      	beq.n	3401321c <HAL_I2C_Init+0x84>
34013212:	f240 2129 	movw	r1, #553	@ 0x229
34013216:	483f      	ldr	r0, [pc, #252]	@ (34013314 <HAL_I2C_Init+0x17c>)
34013218:	f00c f9f2 	bl	3401f600 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
3401321c:	6963      	ldr	r3, [r4, #20]
3401321e:	2bff      	cmp	r3, #255	@ 0xff
34013220:	d904      	bls.n	3401322c <HAL_I2C_Init+0x94>
34013222:	f240 212a 	movw	r1, #554	@ 0x22a
34013226:	483b      	ldr	r0, [pc, #236]	@ (34013314 <HAL_I2C_Init+0x17c>)
34013228:	f00c f9ea 	bl	3401f600 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
3401322c:	69a3      	ldr	r3, [r4, #24]
3401322e:	2b07      	cmp	r3, #7
34013230:	d904      	bls.n	3401323c <HAL_I2C_Init+0xa4>
34013232:	f240 212b 	movw	r1, #555	@ 0x22b
34013236:	4837      	ldr	r0, [pc, #220]	@ (34013314 <HAL_I2C_Init+0x17c>)
34013238:	f00c f9e2 	bl	3401f600 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
3401323c:	69e3      	ldr	r3, [r4, #28]
3401323e:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
34013242:	d004      	beq.n	3401324e <HAL_I2C_Init+0xb6>
34013244:	f44f 710b 	mov.w	r1, #556	@ 0x22c
34013248:	4832      	ldr	r0, [pc, #200]	@ (34013314 <HAL_I2C_Init+0x17c>)
3401324a:	f00c f9d9 	bl	3401f600 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
3401324e:	6a23      	ldr	r3, [r4, #32]
34013250:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
34013254:	d004      	beq.n	34013260 <HAL_I2C_Init+0xc8>
34013256:	f240 212d 	movw	r1, #557	@ 0x22d
3401325a:	482e      	ldr	r0, [pc, #184]	@ (34013314 <HAL_I2C_Init+0x17c>)
3401325c:	f00c f9d0 	bl	3401f600 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
34013260:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
34013264:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
34013268:	b923      	cbnz	r3, 34013274 <HAL_I2C_Init+0xdc>
    HAL_I2C_MspInit(hi2c);
3401326a:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
3401326c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
34013270:	f7ff ff91 	bl	34013196 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
34013274:	2324      	movs	r3, #36	@ 0x24
34013276:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
3401327a:	6823      	ldr	r3, [r4, #0]
3401327c:	681a      	ldr	r2, [r3, #0]
3401327e:	f022 0201 	bic.w	r2, r2, #1
34013282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
34013284:	6862      	ldr	r2, [r4, #4]
34013286:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
3401328a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
3401328c:	689a      	ldr	r2, [r3, #8]
3401328e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34013292:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
34013294:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
34013298:	2901      	cmp	r1, #1
3401329a:	d106      	bne.n	340132aa <HAL_I2C_Init+0x112>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
3401329c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340132a0:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
340132a2:	685a      	ldr	r2, [r3, #4]
340132a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
340132a8:	e007      	b.n	340132ba <HAL_I2C_Init+0x122>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
340132aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
340132ae:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
340132b0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
340132b2:	d1f6      	bne.n	340132a2 <HAL_I2C_Init+0x10a>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
340132b4:	685a      	ldr	r2, [r3, #4]
340132b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
340132ba:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
340132bc:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
340132be:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
340132c0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
340132c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
340132c8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
340132ca:	68da      	ldr	r2, [r3, #12]
340132cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
340132d0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
340132d2:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
340132d6:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
340132d8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
340132da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
340132de:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
340132e0:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
340132e4:	430a      	orrs	r2, r1
340132e6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
340132e8:	681a      	ldr	r2, [r3, #0]
340132ea:	f042 0201 	orr.w	r2, r2, #1
340132ee:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
340132f0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
340132f2:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
340132f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
340132f8:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
340132fa:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
340132fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
34013300:	2001      	movs	r0, #1
34013302:	e7fc      	b.n	340132fe <HAL_I2C_Init+0x166>
34013304:	50005400 	.word	0x50005400
34013308:	50005800 	.word	0x50005800
3401330c:	50005c00 	.word	0x50005c00
34013310:	56001c00 	.word	0x56001c00
34013314:	3402f401 	.word	0x3402f401

34013318 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
34013318:	4770      	bx	lr
	...

3401331c <HAL_I2C_DeInit>:
{
3401331c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
3401331e:	4604      	mov	r4, r0
34013320:	2800      	cmp	r0, #0
34013322:	d036      	beq.n	34013392 <HAL_I2C_DeInit+0x76>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013324:	6803      	ldr	r3, [r0, #0]
34013326:	4a1c      	ldr	r2, [pc, #112]	@ (34013398 <HAL_I2C_DeInit+0x7c>)
34013328:	4293      	cmp	r3, r2
3401332a:	d01d      	beq.n	34013368 <HAL_I2C_DeInit+0x4c>
3401332c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013330:	4293      	cmp	r3, r2
34013332:	d019      	beq.n	34013368 <HAL_I2C_DeInit+0x4c>
34013334:	4a19      	ldr	r2, [pc, #100]	@ (3401339c <HAL_I2C_DeInit+0x80>)
34013336:	4293      	cmp	r3, r2
34013338:	d016      	beq.n	34013368 <HAL_I2C_DeInit+0x4c>
3401333a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401333e:	4293      	cmp	r3, r2
34013340:	d012      	beq.n	34013368 <HAL_I2C_DeInit+0x4c>
34013342:	4a17      	ldr	r2, [pc, #92]	@ (340133a0 <HAL_I2C_DeInit+0x84>)
34013344:	4293      	cmp	r3, r2
34013346:	d00f      	beq.n	34013368 <HAL_I2C_DeInit+0x4c>
34013348:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401334c:	4293      	cmp	r3, r2
3401334e:	d00b      	beq.n	34013368 <HAL_I2C_DeInit+0x4c>
34013350:	4a14      	ldr	r2, [pc, #80]	@ (340133a4 <HAL_I2C_DeInit+0x88>)
34013352:	4293      	cmp	r3, r2
34013354:	d008      	beq.n	34013368 <HAL_I2C_DeInit+0x4c>
34013356:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401335a:	4293      	cmp	r3, r2
3401335c:	d004      	beq.n	34013368 <HAL_I2C_DeInit+0x4c>
3401335e:	f240 2199 	movw	r1, #665	@ 0x299
34013362:	4811      	ldr	r0, [pc, #68]	@ (340133a8 <HAL_I2C_DeInit+0x8c>)
34013364:	f00c f94c 	bl	3401f600 <assert_failed>
  hi2c->State = HAL_I2C_STATE_BUSY;
34013368:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
3401336a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
3401336c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
34013370:	6813      	ldr	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
34013372:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE(hi2c);
34013374:	f023 0301 	bic.w	r3, r3, #1
34013378:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
3401337a:	f7ff ffcd 	bl	34013318 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3401337e:	2000      	movs	r0, #0
34013380:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
34013382:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
34013386:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
3401338a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
3401338c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
34013390:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
34013392:	2001      	movs	r0, #1
34013394:	e7fc      	b.n	34013390 <HAL_I2C_DeInit+0x74>
34013396:	bf00      	nop
34013398:	50005400 	.word	0x50005400
3401339c:	50005800 	.word	0x50005800
340133a0:	50005c00 	.word	0x50005c00
340133a4:	56001c00 	.word	0x56001c00
340133a8:	3402f401 	.word	0x3402f401

340133ac <HAL_I2C_Mem_Write>:
{
340133ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
340133b0:	4699      	mov	r9, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
340133b2:	3b01      	subs	r3, #1
340133b4:	2b01      	cmp	r3, #1
{
340133b6:	4604      	mov	r4, r0
340133b8:	460f      	mov	r7, r1
340133ba:	4616      	mov	r6, r2
340133bc:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
340133c0:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
340133c4:	d904      	bls.n	340133d0 <HAL_I2C_Mem_Write+0x24>
340133c6:	f640 2138 	movw	r1, #2616	@ 0xa38
340133ca:	4868      	ldr	r0, [pc, #416]	@ (3401356c <HAL_I2C_Mem_Write+0x1c0>)
340133cc:	f00c f918 	bl	3401f600 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
340133d0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
340133d4:	2b20      	cmp	r3, #32
340133d6:	f040 80c6 	bne.w	34013566 <HAL_I2C_Mem_Write+0x1ba>
    if ((pData == NULL) || (Size == 0U))
340133da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
340133dc:	b113      	cbz	r3, 340133e4 <HAL_I2C_Mem_Write+0x38>
340133de:	f1ba 0f00 	cmp.w	sl, #0
340133e2:	d106      	bne.n	340133f2 <HAL_I2C_Mem_Write+0x46>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
340133e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
340133e8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
340133ea:	2001      	movs	r0, #1
}
340133ec:	b003      	add	sp, #12
340133ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
340133f2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
340133f6:	2b01      	cmp	r3, #1
340133f8:	f000 80b5 	beq.w	34013566 <HAL_I2C_Mem_Write+0x1ba>
340133fc:	f04f 0b01 	mov.w	fp, #1
34013400:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
34013404:	f00b fd6a 	bl	3401eedc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34013408:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
3401340a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
3401340c:	9000      	str	r0, [sp, #0]
3401340e:	465a      	mov	r2, fp
34013410:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
34013414:	4620      	mov	r0, r4
34013416:	f7ff fe5a 	bl	340130ce <I2C_WaitOnFlagUntilTimeout>
3401341a:	2800      	cmp	r0, #0
3401341c:	d1e5      	bne.n	340133ea <HAL_I2C_Mem_Write+0x3e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
3401341e:	2321      	movs	r3, #33	@ 0x21
34013420:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
34013424:	2340      	movs	r3, #64	@ 0x40
34013426:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
3401342a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3401342c:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
3401342e:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
34013430:	4b4f      	ldr	r3, [pc, #316]	@ (34013570 <HAL_I2C_Mem_Write+0x1c4>)
    hi2c->XferISR   = NULL;
34013432:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
34013434:	4639      	mov	r1, r7
34013436:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
34013438:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
3401343c:	fa5f f289 	uxtb.w	r2, r9
34013440:	9300      	str	r3, [sp, #0]
34013442:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34013446:	f7ff fd31 	bl	34012eac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
3401344a:	462a      	mov	r2, r5
3401344c:	4641      	mov	r1, r8
3401344e:	4620      	mov	r0, r4
34013450:	f7ff fe12 	bl	34013078 <I2C_WaitOnTXISFlagUntilTimeout>
34013454:	bb18      	cbnz	r0, 3401349e <HAL_I2C_Mem_Write+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
34013456:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3401345a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
3401345c:	d115      	bne.n	3401348a <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3401345e:	b2f6      	uxtb	r6, r6
34013460:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
34013462:	2200      	movs	r2, #0
34013464:	4643      	mov	r3, r8
34013466:	2180      	movs	r1, #128	@ 0x80
34013468:	4620      	mov	r0, r4
3401346a:	9500      	str	r5, [sp, #0]
3401346c:	f7ff fe2f 	bl	340130ce <I2C_WaitOnFlagUntilTimeout>
34013470:	b9a8      	cbnz	r0, 3401349e <HAL_I2C_Mem_Write+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
34013472:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
34013474:	b29b      	uxth	r3, r3
34013476:	2bff      	cmp	r3, #255	@ 0xff
34013478:	d815      	bhi.n	340134a6 <HAL_I2C_Mem_Write+0xfa>
      hi2c->XferSize = hi2c->XferCount;
3401347a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
3401347c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
34013480:	b292      	uxth	r2, r2
34013482:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
34013484:	9000      	str	r0, [sp, #0]
34013486:	b2d2      	uxtb	r2, r2
34013488:	e012      	b.n	340134b0 <HAL_I2C_Mem_Write+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
3401348a:	0a32      	lsrs	r2, r6, #8
3401348c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
3401348e:	4641      	mov	r1, r8
34013490:	462a      	mov	r2, r5
34013492:	4620      	mov	r0, r4
34013494:	f7ff fdf0 	bl	34013078 <I2C_WaitOnTXISFlagUntilTimeout>
34013498:	b908      	cbnz	r0, 3401349e <HAL_I2C_Mem_Write+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3401349a:	6823      	ldr	r3, [r4, #0]
3401349c:	e7df      	b.n	3401345e <HAL_I2C_Mem_Write+0xb2>
      __HAL_UNLOCK(hi2c);
3401349e:	2300      	movs	r3, #0
340134a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
340134a4:	e7a1      	b.n	340133ea <HAL_I2C_Mem_Write+0x3e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
340134a6:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
340134a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
340134ac:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
340134ae:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
340134b0:	4639      	mov	r1, r7
340134b2:	4620      	mov	r0, r4
340134b4:	f7ff fcfa 	bl	34012eac <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
340134b8:	462a      	mov	r2, r5
340134ba:	4641      	mov	r1, r8
340134bc:	4620      	mov	r0, r4
340134be:	f7ff fddb 	bl	34013078 <I2C_WaitOnTXISFlagUntilTimeout>
340134c2:	2800      	cmp	r0, #0
340134c4:	d191      	bne.n	340133ea <HAL_I2C_Mem_Write+0x3e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
340134c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340134c8:	6822      	ldr	r2, [r4, #0]
340134ca:	f813 1b01 	ldrb.w	r1, [r3], #1
340134ce:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
340134d0:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
340134d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
340134d4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
340134d6:	3b01      	subs	r3, #1
340134d8:	b29b      	uxth	r3, r3
340134da:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
340134dc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
340134de:	3a01      	subs	r2, #1
340134e0:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
340134e2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
340134e4:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
340134e6:	b1b3      	cbz	r3, 34013516 <HAL_I2C_Mem_Write+0x16a>
340134e8:	b9aa      	cbnz	r2, 34013516 <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
340134ea:	4643      	mov	r3, r8
340134ec:	2180      	movs	r1, #128	@ 0x80
340134ee:	4620      	mov	r0, r4
340134f0:	9500      	str	r5, [sp, #0]
340134f2:	f7ff fdec 	bl	340130ce <I2C_WaitOnFlagUntilTimeout>
340134f6:	2800      	cmp	r0, #0
340134f8:	f47f af77 	bne.w	340133ea <HAL_I2C_Mem_Write+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
340134fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
340134fe:	b29b      	uxth	r3, r3
34013500:	2bff      	cmp	r3, #255	@ 0xff
34013502:	d928      	bls.n	34013556 <HAL_I2C_Mem_Write+0x1aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
34013504:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
34013506:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
3401350a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
3401350c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
3401350e:	4639      	mov	r1, r7
34013510:	4620      	mov	r0, r4
34013512:	f7ff fccb 	bl	34012eac <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
34013516:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
34013518:	b29b      	uxth	r3, r3
3401351a:	2b00      	cmp	r3, #0
3401351c:	d1cc      	bne.n	340134b8 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
3401351e:	462a      	mov	r2, r5
34013520:	4641      	mov	r1, r8
34013522:	4620      	mov	r0, r4
34013524:	f7ff fe0e 	bl	34013144 <I2C_WaitOnSTOPFlagUntilTimeout>
34013528:	2800      	cmp	r0, #0
3401352a:	f47f af5e 	bne.w	340133ea <HAL_I2C_Mem_Write+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
3401352e:	2120      	movs	r1, #32
34013530:	6823      	ldr	r3, [r4, #0]
34013532:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
34013534:	685a      	ldr	r2, [r3, #4]
34013536:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
3401353a:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
3401353e:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
34013542:	f022 0201 	bic.w	r2, r2, #1
34013546:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
34013548:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
3401354c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
34013550:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
34013554:	e74a      	b.n	340133ec <HAL_I2C_Mem_Write+0x40>
          hi2c->XferSize = hi2c->XferCount;
34013556:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013558:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
3401355c:	b292      	uxth	r2, r2
3401355e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013560:	9000      	str	r0, [sp, #0]
34013562:	b2d2      	uxtb	r2, r2
34013564:	e7d3      	b.n	3401350e <HAL_I2C_Mem_Write+0x162>
    __HAL_LOCK(hi2c);
34013566:	2002      	movs	r0, #2
34013568:	e740      	b.n	340133ec <HAL_I2C_Mem_Write+0x40>
3401356a:	bf00      	nop
3401356c:	3402f401 	.word	0x3402f401
34013570:	80002000 	.word	0x80002000

34013574 <HAL_I2C_Mem_Read>:
{
34013574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34013578:	4699      	mov	r9, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
3401357a:	3b01      	subs	r3, #1
3401357c:	2b01      	cmp	r3, #1
{
3401357e:	4604      	mov	r4, r0
34013580:	460f      	mov	r7, r1
34013582:	4616      	mov	r6, r2
34013584:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
34013588:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
3401358c:	d904      	bls.n	34013598 <HAL_I2C_Mem_Read+0x24>
3401358e:	f640 21c1 	movw	r1, #2753	@ 0xac1
34013592:	4869      	ldr	r0, [pc, #420]	@ (34013738 <HAL_I2C_Mem_Read+0x1c4>)
34013594:	f00c f834 	bl	3401f600 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
34013598:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
3401359c:	2b20      	cmp	r3, #32
3401359e:	f040 80c9 	bne.w	34013734 <HAL_I2C_Mem_Read+0x1c0>
    if ((pData == NULL) || (Size == 0U))
340135a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
340135a4:	b113      	cbz	r3, 340135ac <HAL_I2C_Mem_Read+0x38>
340135a6:	f1ba 0f00 	cmp.w	sl, #0
340135aa:	d106      	bne.n	340135ba <HAL_I2C_Mem_Read+0x46>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
340135ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
340135b0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
340135b2:	2001      	movs	r0, #1
}
340135b4:	b003      	add	sp, #12
340135b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
340135ba:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
340135be:	2b01      	cmp	r3, #1
340135c0:	f000 80b8 	beq.w	34013734 <HAL_I2C_Mem_Read+0x1c0>
340135c4:	f04f 0b01 	mov.w	fp, #1
340135c8:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
340135cc:	f00b fc86 	bl	3401eedc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
340135d0:	2319      	movs	r3, #25
340135d2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
340135d4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
340135d6:	465a      	mov	r2, fp
340135d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
340135dc:	4620      	mov	r0, r4
340135de:	f7ff fd76 	bl	340130ce <I2C_WaitOnFlagUntilTimeout>
340135e2:	4603      	mov	r3, r0
340135e4:	2800      	cmp	r0, #0
340135e6:	d1e4      	bne.n	340135b2 <HAL_I2C_Mem_Read+0x3e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
340135e8:	2222      	movs	r2, #34	@ 0x22
340135ea:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
340135ee:	2240      	movs	r2, #64	@ 0x40
340135f0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
340135f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
340135f6:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
340135f8:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
340135fa:	4a50      	ldr	r2, [pc, #320]	@ (3401373c <HAL_I2C_Mem_Read+0x1c8>)
    hi2c->XferISR   = NULL;
340135fc:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
340135fe:	4639      	mov	r1, r7
34013600:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
34013602:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
34013606:	9200      	str	r2, [sp, #0]
34013608:	fa5f f289 	uxtb.w	r2, r9
3401360c:	f7ff fc4e 	bl	34012eac <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34013610:	462a      	mov	r2, r5
34013612:	4641      	mov	r1, r8
34013614:	4620      	mov	r0, r4
34013616:	f7ff fd2f 	bl	34013078 <I2C_WaitOnTXISFlagUntilTimeout>
3401361a:	bb20      	cbnz	r0, 34013666 <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
3401361c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34013620:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
34013622:	d116      	bne.n	34013652 <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34013624:	b2f6      	uxtb	r6, r6
34013626:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
34013628:	2200      	movs	r2, #0
3401362a:	4643      	mov	r3, r8
3401362c:	2140      	movs	r1, #64	@ 0x40
3401362e:	4620      	mov	r0, r4
34013630:	9500      	str	r5, [sp, #0]
34013632:	f7ff fd4c 	bl	340130ce <I2C_WaitOnFlagUntilTimeout>
34013636:	b9b0      	cbnz	r0, 34013666 <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
34013638:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
3401363a:	b29b      	uxth	r3, r3
3401363c:	2bff      	cmp	r3, #255	@ 0xff
3401363e:	4b40      	ldr	r3, [pc, #256]	@ (34013740 <HAL_I2C_Mem_Read+0x1cc>)
34013640:	d815      	bhi.n	3401366e <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
34013642:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
34013644:	b292      	uxth	r2, r2
34013646:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013648:	9300      	str	r3, [sp, #0]
3401364a:	b2d2      	uxtb	r2, r2
3401364c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34013650:	e012      	b.n	34013678 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
34013652:	0a32      	lsrs	r2, r6, #8
34013654:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34013656:	4641      	mov	r1, r8
34013658:	462a      	mov	r2, r5
3401365a:	4620      	mov	r0, r4
3401365c:	f7ff fd0c 	bl	34013078 <I2C_WaitOnTXISFlagUntilTimeout>
34013660:	b908      	cbnz	r0, 34013666 <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34013662:	6823      	ldr	r3, [r4, #0]
34013664:	e7de      	b.n	34013624 <HAL_I2C_Mem_Read+0xb0>
      __HAL_UNLOCK(hi2c);
34013666:	2300      	movs	r3, #0
34013668:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
3401366c:	e7a1      	b.n	340135b2 <HAL_I2C_Mem_Read+0x3e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
3401366e:	22ff      	movs	r2, #255	@ 0xff
34013670:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
34013672:	9300      	str	r3, [sp, #0]
34013674:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013678:	4639      	mov	r1, r7
3401367a:	4620      	mov	r0, r4
3401367c:	f7ff fc16 	bl	34012eac <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
34013680:	4643      	mov	r3, r8
34013682:	2200      	movs	r2, #0
34013684:	2104      	movs	r1, #4
34013686:	4620      	mov	r0, r4
34013688:	9500      	str	r5, [sp, #0]
3401368a:	f7ff fd20 	bl	340130ce <I2C_WaitOnFlagUntilTimeout>
3401368e:	2800      	cmp	r0, #0
34013690:	d18f      	bne.n	340135b2 <HAL_I2C_Mem_Read+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
34013692:	6823      	ldr	r3, [r4, #0]
34013694:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34013696:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34013698:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
3401369a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
3401369c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
3401369e:	3301      	adds	r3, #1
340136a0:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
340136a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
340136a4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
340136a6:	3b01      	subs	r3, #1
340136a8:	b29b      	uxth	r3, r3
340136aa:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
340136ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
340136ae:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
340136b0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
340136b2:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
340136b4:	b1b3      	cbz	r3, 340136e4 <HAL_I2C_Mem_Read+0x170>
340136b6:	b9aa      	cbnz	r2, 340136e4 <HAL_I2C_Mem_Read+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
340136b8:	4643      	mov	r3, r8
340136ba:	2180      	movs	r1, #128	@ 0x80
340136bc:	4620      	mov	r0, r4
340136be:	9500      	str	r5, [sp, #0]
340136c0:	f7ff fd05 	bl	340130ce <I2C_WaitOnFlagUntilTimeout>
340136c4:	2800      	cmp	r0, #0
340136c6:	f47f af74 	bne.w	340135b2 <HAL_I2C_Mem_Read+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
340136ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
340136cc:	b29b      	uxth	r3, r3
340136ce:	2bff      	cmp	r3, #255	@ 0xff
340136d0:	d928      	bls.n	34013724 <HAL_I2C_Mem_Read+0x1b0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
340136d2:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
340136d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
340136d8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
340136da:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
340136dc:	4639      	mov	r1, r7
340136de:	4620      	mov	r0, r4
340136e0:	f7ff fbe4 	bl	34012eac <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
340136e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
340136e6:	b29b      	uxth	r3, r3
340136e8:	2b00      	cmp	r3, #0
340136ea:	d1c9      	bne.n	34013680 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
340136ec:	462a      	mov	r2, r5
340136ee:	4641      	mov	r1, r8
340136f0:	4620      	mov	r0, r4
340136f2:	f7ff fd27 	bl	34013144 <I2C_WaitOnSTOPFlagUntilTimeout>
340136f6:	2800      	cmp	r0, #0
340136f8:	f47f af5b 	bne.w	340135b2 <HAL_I2C_Mem_Read+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
340136fc:	2120      	movs	r1, #32
340136fe:	6823      	ldr	r3, [r4, #0]
34013700:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
34013702:	685a      	ldr	r2, [r3, #4]
34013704:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
34013708:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
3401370c:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
34013710:	f022 0201 	bic.w	r2, r2, #1
34013714:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
34013716:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
3401371a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
3401371e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
34013722:	e747      	b.n	340135b4 <HAL_I2C_Mem_Read+0x40>
          hi2c->XferSize = hi2c->XferCount;
34013724:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
3401372a:	b292      	uxth	r2, r2
3401372c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
3401372e:	9000      	str	r0, [sp, #0]
34013730:	b2d2      	uxtb	r2, r2
34013732:	e7d3      	b.n	340136dc <HAL_I2C_Mem_Read+0x168>
    __HAL_LOCK(hi2c);
34013734:	2002      	movs	r0, #2
34013736:	e73d      	b.n	340135b4 <HAL_I2C_Mem_Read+0x40>
34013738:	3402f401 	.word	0x3402f401
3401373c:	80002000 	.word	0x80002000
34013740:	80002400 	.word	0x80002400

34013744 <HAL_I2C_GetState>:
  return hi2c->State;
34013744:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
34013748:	4770      	bx	lr

3401374a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
3401374a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
3401374c:	4770      	bx	lr
	...

34013750 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
34013750:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013752:	4a27      	ldr	r2, [pc, #156]	@ (340137f0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
34013754:	6803      	ldr	r3, [r0, #0]
{
34013756:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013758:	4293      	cmp	r3, r2
{
3401375a:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
3401375c:	d01c      	beq.n	34013798 <HAL_I2CEx_ConfigAnalogFilter+0x48>
3401375e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013762:	4293      	cmp	r3, r2
34013764:	d018      	beq.n	34013798 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34013766:	4a23      	ldr	r2, [pc, #140]	@ (340137f4 <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
34013768:	4293      	cmp	r3, r2
3401376a:	d015      	beq.n	34013798 <HAL_I2CEx_ConfigAnalogFilter+0x48>
3401376c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013770:	4293      	cmp	r3, r2
34013772:	d011      	beq.n	34013798 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34013774:	4a20      	ldr	r2, [pc, #128]	@ (340137f8 <HAL_I2CEx_ConfigAnalogFilter+0xa8>)
34013776:	4293      	cmp	r3, r2
34013778:	d00e      	beq.n	34013798 <HAL_I2CEx_ConfigAnalogFilter+0x48>
3401377a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401377e:	4293      	cmp	r3, r2
34013780:	d00a      	beq.n	34013798 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34013782:	4a1e      	ldr	r2, [pc, #120]	@ (340137fc <HAL_I2CEx_ConfigAnalogFilter+0xac>)
34013784:	4293      	cmp	r3, r2
34013786:	d007      	beq.n	34013798 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34013788:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401378c:	4293      	cmp	r3, r2
3401378e:	d003      	beq.n	34013798 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34013790:	2162      	movs	r1, #98	@ 0x62
34013792:	481b      	ldr	r0, [pc, #108]	@ (34013800 <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
34013794:	f00b ff34 	bl	3401f600 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
34013798:	f435 5380 	bics.w	r3, r5, #4096	@ 0x1000
3401379c:	d003      	beq.n	340137a6 <HAL_I2CEx_ConfigAnalogFilter+0x56>
3401379e:	2163      	movs	r1, #99	@ 0x63
340137a0:	4817      	ldr	r0, [pc, #92]	@ (34013800 <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
340137a2:	f00b ff2d 	bl	3401f600 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
340137a6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
340137aa:	2b20      	cmp	r3, #32
340137ac:	b2d9      	uxtb	r1, r3
340137ae:	d11c      	bne.n	340137ea <HAL_I2CEx_ConfigAnalogFilter+0x9a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
340137b0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
340137b4:	2b01      	cmp	r3, #1
340137b6:	d018      	beq.n	340137ea <HAL_I2CEx_ConfigAnalogFilter+0x9a>

    hi2c->State = HAL_I2C_STATE_BUSY;
340137b8:	2324      	movs	r3, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
340137ba:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
340137bc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
340137c0:	6823      	ldr	r3, [r4, #0]
340137c2:	681a      	ldr	r2, [r3, #0]
340137c4:	f022 0201 	bic.w	r2, r2, #1
340137c8:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
340137ca:	681a      	ldr	r2, [r3, #0]
340137cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
340137d0:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
340137d2:	681a      	ldr	r2, [r3, #0]
340137d4:	432a      	orrs	r2, r5
340137d6:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
340137d8:	681a      	ldr	r2, [r3, #0]
340137da:	f042 0201 	orr.w	r2, r2, #1
340137de:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
340137e0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
340137e4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
340137e8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
340137ea:	2002      	movs	r0, #2
340137ec:	e7fc      	b.n	340137e8 <HAL_I2CEx_ConfigAnalogFilter+0x98>
340137ee:	bf00      	nop
340137f0:	50005400 	.word	0x50005400
340137f4:	50005800 	.word	0x50005800
340137f8:	50005c00 	.word	0x50005c00
340137fc:	56001c00 	.word	0x56001c00
34013800:	3402f475 	.word	0x3402f475

34013804 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
34013804:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013806:	4a26      	ldr	r2, [pc, #152]	@ (340138a0 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
34013808:	6803      	ldr	r3, [r0, #0]
{
3401380a:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
3401380c:	4293      	cmp	r3, r2
{
3401380e:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013810:	d01c      	beq.n	3401384c <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013812:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013816:	4293      	cmp	r3, r2
34013818:	d018      	beq.n	3401384c <HAL_I2CEx_ConfigDigitalFilter+0x48>
3401381a:	4a22      	ldr	r2, [pc, #136]	@ (340138a4 <HAL_I2CEx_ConfigDigitalFilter+0xa0>)
3401381c:	4293      	cmp	r3, r2
3401381e:	d015      	beq.n	3401384c <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013820:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013824:	4293      	cmp	r3, r2
34013826:	d011      	beq.n	3401384c <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013828:	4a1f      	ldr	r2, [pc, #124]	@ (340138a8 <HAL_I2CEx_ConfigDigitalFilter+0xa4>)
3401382a:	4293      	cmp	r3, r2
3401382c:	d00e      	beq.n	3401384c <HAL_I2CEx_ConfigDigitalFilter+0x48>
3401382e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013832:	4293      	cmp	r3, r2
34013834:	d00a      	beq.n	3401384c <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013836:	4a1d      	ldr	r2, [pc, #116]	@ (340138ac <HAL_I2CEx_ConfigDigitalFilter+0xa8>)
34013838:	4293      	cmp	r3, r2
3401383a:	d007      	beq.n	3401384c <HAL_I2CEx_ConfigDigitalFilter+0x48>
3401383c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013840:	4293      	cmp	r3, r2
34013842:	d003      	beq.n	3401384c <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013844:	2190      	movs	r1, #144	@ 0x90
34013846:	481a      	ldr	r0, [pc, #104]	@ (340138b0 <HAL_I2CEx_ConfigDigitalFilter+0xac>)
34013848:	f00b feda 	bl	3401f600 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
3401384c:	2d0f      	cmp	r5, #15
3401384e:	d903      	bls.n	34013858 <HAL_I2CEx_ConfigDigitalFilter+0x54>
34013850:	2191      	movs	r1, #145	@ 0x91
34013852:	4817      	ldr	r0, [pc, #92]	@ (340138b0 <HAL_I2CEx_ConfigDigitalFilter+0xac>)
34013854:	f00b fed4 	bl	3401f600 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
34013858:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
3401385c:	2b20      	cmp	r3, #32
3401385e:	b2d8      	uxtb	r0, r3
34013860:	d11b      	bne.n	3401389a <HAL_I2CEx_ConfigDigitalFilter+0x96>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
34013862:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
34013866:	2b01      	cmp	r3, #1
34013868:	d017      	beq.n	3401389a <HAL_I2CEx_ConfigDigitalFilter+0x96>

    hi2c->State = HAL_I2C_STATE_BUSY;
3401386a:	2324      	movs	r3, #36	@ 0x24
3401386c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
34013870:	6823      	ldr	r3, [r4, #0]
34013872:	681a      	ldr	r2, [r3, #0]
34013874:	f022 0201 	bic.w	r2, r2, #1
34013878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
3401387a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
3401387c:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
34013880:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
34013884:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
34013886:	681a      	ldr	r2, [r3, #0]
34013888:	f042 0201 	orr.w	r2, r2, #1
3401388c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
3401388e:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34013892:	2000      	movs	r0, #0
34013894:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
34013898:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
3401389a:	2002      	movs	r0, #2
3401389c:	e7fc      	b.n	34013898 <HAL_I2CEx_ConfigDigitalFilter+0x94>
3401389e:	bf00      	nop
340138a0:	50005400 	.word	0x50005400
340138a4:	50005800 	.word	0x50005800
340138a8:	50005c00 	.word	0x50005c00
340138ac:	56001c00 	.word	0x56001c00
340138b0:	3402f475 	.word	0x3402f475

340138b4 <HAL_ICACHE_ConfigAssociativityMode>:
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));
340138b4:	f030 0304 	bics.w	r3, r0, #4
{
340138b8:	b510      	push	{r4, lr}
340138ba:	4604      	mov	r4, r0
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));
340138bc:	d003      	beq.n	340138c6 <HAL_ICACHE_ConfigAssociativityMode+0x12>
340138be:	2191      	movs	r1, #145	@ 0x91
340138c0:	4807      	ldr	r0, [pc, #28]	@ (340138e0 <HAL_ICACHE_ConfigAssociativityMode+0x2c>)
340138c2:	f00b fe9d 	bl	3401f600 <assert_failed>

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
340138c6:	4a07      	ldr	r2, [pc, #28]	@ (340138e4 <HAL_ICACHE_ConfigAssociativityMode+0x30>)
340138c8:	6810      	ldr	r0, [r2, #0]
340138ca:	f010 0001 	ands.w	r0, r0, #1
  {
    status = HAL_ERROR;
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
340138ce:	bf09      	itett	eq
340138d0:	6813      	ldreq	r3, [r2, #0]
    status = HAL_ERROR;
340138d2:	2001      	movne	r0, #1
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
340138d4:	f023 0304 	biceq.w	r3, r3, #4
340138d8:	4323      	orreq	r3, r4
340138da:	bf08      	it	eq
340138dc:	6013      	streq	r3, [r2, #0]
  }

  return status;
}
340138de:	bd10      	pop	{r4, pc}
340138e0:	3402f4ec 	.word	0x3402f4ec
340138e4:	58035000 	.word	0x58035000

340138e8 <HAL_ICACHE_DeInit>:
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_DeInit(void)
{
  /* Reset interrupt enable value */
  WRITE_REG(ICACHE->IER, 0U);
340138e8:	2000      	movs	r0, #0

  /* Clear any pending flags */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF | ICACHE_FCR_CERRF);
340138ea:	2206      	movs	r2, #6
  WRITE_REG(ICACHE->IER, 0U);
340138ec:	4b0a      	ldr	r3, [pc, #40]	@ (34013918 <HAL_ICACHE_DeInit+0x30>)
340138ee:	6098      	str	r0, [r3, #8]
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF | ICACHE_FCR_CERRF);
340138f0:	60da      	str	r2, [r3, #12]

  /* Disable cache then set default associative mode value */
  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
340138f2:	681a      	ldr	r2, [r3, #0]
340138f4:	f022 0201 	bic.w	r2, r2, #1
340138f8:	601a      	str	r2, [r3, #0]
  WRITE_REG(ICACHE->CR, ICACHE_CR_WAYSEL);
340138fa:	2204      	movs	r2, #4
340138fc:	601a      	str	r2, [r3, #0]

  /* Stop monitor and reset monitor values */
  CLEAR_BIT(ICACHE->CR, ICACHE_MONITOR_HIT_MISS);
340138fe:	681a      	ldr	r2, [r3, #0]
34013900:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
34013904:	601a      	str	r2, [r3, #0]
  SET_BIT(ICACHE->CR, (ICACHE_MONITOR_HIT_MISS << 2U));
34013906:	681a      	ldr	r2, [r3, #0]
34013908:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
3401390c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(ICACHE->CR, (ICACHE_MONITOR_HIT_MISS << 2U));
3401390e:	681a      	ldr	r2, [r3, #0]
34013910:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
34013914:	601a      	str	r2, [r3, #0]


  return HAL_OK;
}
34013916:	4770      	bx	lr
34013918:	58035000 	.word	0x58035000

3401391c <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
3401391c:	4a03      	ldr	r2, [pc, #12]	@ (3401392c <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
3401391e:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
34013920:	6813      	ldr	r3, [r2, #0]
34013922:	f043 0301 	orr.w	r3, r3, #1
34013926:	6013      	str	r3, [r2, #0]
}
34013928:	4770      	bx	lr
3401392a:	bf00      	nop
3401392c:	58035000 	.word	0x58035000

34013930 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
34013930:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
34013932:	2302      	movs	r3, #2
34013934:	4c0b      	ldr	r4, [pc, #44]	@ (34013964 <HAL_ICACHE_Disable+0x34>)
34013936:	60e3      	str	r3, [r4, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
34013938:	6823      	ldr	r3, [r4, #0]
3401393a:	f023 0301 	bic.w	r3, r3, #1
3401393e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34013940:	f00b facc 	bl	3401eedc <HAL_GetTick>
34013944:	4605      	mov	r5, r0

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
34013946:	6820      	ldr	r0, [r4, #0]
34013948:	f010 0001 	ands.w	r0, r0, #1
3401394c:	d100      	bne.n	34013950 <HAL_ICACHE_Disable+0x20>
      }
    }
  }

  return status;
}
3401394e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
34013950:	f00b fac4 	bl	3401eedc <HAL_GetTick>
34013954:	1b40      	subs	r0, r0, r5
34013956:	2801      	cmp	r0, #1
34013958:	d9f5      	bls.n	34013946 <HAL_ICACHE_Disable+0x16>
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
3401395a:	6823      	ldr	r3, [r4, #0]
3401395c:	07db      	lsls	r3, r3, #31
3401395e:	d5f2      	bpl.n	34013946 <HAL_ICACHE_Disable+0x16>
        status = HAL_TIMEOUT;
34013960:	2003      	movs	r0, #3
34013962:	e7f4      	b.n	3401394e <HAL_ICACHE_Disable+0x1e>
34013964:	58035000 	.word	0x58035000

34013968 <HAL_ICACHE_WaitForInvalidateComplete>:
  * @brief Wait for the end of the Instruction Cache invalidate procedure.
  * @note This function checks and clears the BSYENDF flag when set.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_WaitForInvalidateComplete(void)
{
34013968:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tickstart;

  /* Check if ongoing invalidation operation */
  if (READ_BIT(ICACHE->SR, ICACHE_SR_BUSYF) != 0U)
3401396a:	4c0c      	ldr	r4, [pc, #48]	@ (3401399c <HAL_ICACHE_WaitForInvalidateComplete+0x34>)
3401396c:	6863      	ldr	r3, [r4, #4]
3401396e:	07d9      	lsls	r1, r3, #31
34013970:	d404      	bmi.n	3401397c <HAL_ICACHE_WaitForInvalidateComplete+0x14>
  HAL_StatusTypeDef status = HAL_OK;
34013972:	2000      	movs	r0, #0
      }
    }
  }

  /* Clear BSYENDF */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
34013974:	2202      	movs	r2, #2
34013976:	4b09      	ldr	r3, [pc, #36]	@ (3401399c <HAL_ICACHE_WaitForInvalidateComplete+0x34>)
34013978:	60da      	str	r2, [r3, #12]

  return status;
}
3401397a:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
3401397c:	f00b faae 	bl	3401eedc <HAL_GetTick>
34013980:	4605      	mov	r5, r0
    while (READ_BIT(ICACHE->SR, ICACHE_SR_BSYENDF) == 0U)
34013982:	6863      	ldr	r3, [r4, #4]
34013984:	079b      	lsls	r3, r3, #30
34013986:	d4f4      	bmi.n	34013972 <HAL_ICACHE_WaitForInvalidateComplete+0xa>
      if ((HAL_GetTick() - tickstart) > ICACHE_INVALIDATE_TIMEOUT_VALUE)
34013988:	f00b faa8 	bl	3401eedc <HAL_GetTick>
3401398c:	1b40      	subs	r0, r0, r5
3401398e:	2801      	cmp	r0, #1
34013990:	d9f7      	bls.n	34013982 <HAL_ICACHE_WaitForInvalidateComplete+0x1a>
        if (READ_BIT(ICACHE->SR, ICACHE_SR_BSYENDF) == 0U)
34013992:	6863      	ldr	r3, [r4, #4]
34013994:	079a      	lsls	r2, r3, #30
34013996:	d4f4      	bmi.n	34013982 <HAL_ICACHE_WaitForInvalidateComplete+0x1a>
          status = HAL_TIMEOUT;
34013998:	2003      	movs	r0, #3
3401399a:	e7eb      	b.n	34013974 <HAL_ICACHE_WaitForInvalidateComplete+0xc>
3401399c:	58035000 	.word	0x58035000

340139a0 <HAL_ICACHE_Invalidate>:
  if (READ_BIT(ICACHE->SR, ICACHE_SR_BUSYF) == 0U)
340139a0:	4b04      	ldr	r3, [pc, #16]	@ (340139b4 <HAL_ICACHE_Invalidate+0x14>)
340139a2:	685a      	ldr	r2, [r3, #4]
340139a4:	07d2      	lsls	r2, r2, #31
    SET_BIT(ICACHE->CR, ICACHE_CR_CACHEINV);
340139a6:	bf5e      	ittt	pl
340139a8:	681a      	ldrpl	r2, [r3, #0]
340139aa:	f042 0202 	orrpl.w	r2, r2, #2
340139ae:	601a      	strpl	r2, [r3, #0]
  status = HAL_ICACHE_WaitForInvalidateComplete();
340139b0:	f7ff bfda 	b.w	34013968 <HAL_ICACHE_WaitForInvalidateComplete>
340139b4:	58035000 	.word	0x58035000

340139b8 <LTDC_SetConfig>:
  *       This function does not return a value as it is a static function used internally within the
  *        driver.
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, uint32_t Aux0Addr, uint32_t Aux1Addr, uint32_t Mirror,
                           uint32_t LayerIdx)
{
340139b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t stride;
  uint32_t tmp;

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
340139bc:	2634      	movs	r6, #52	@ 0x34
{
340139be:	b087      	sub	sp, #28
340139c0:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
340139c4:	6804      	ldr	r4, [r0, #0]
340139c6:	fb06 060c 	mla	r6, r6, ip, r0

  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340139ca:	f8d6 e048 	ldr.w	lr, [r6, #72]	@ 0x48
{
340139ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
340139d2:	6e75      	ldr	r5, [r6, #100]	@ 0x64
340139d4:	f10c 0301 	add.w	r3, ip, #1
340139d8:	eb04 2303 	add.w	r3, r4, r3, lsl #8
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340139dc:	f1be 0f03 	cmp.w	lr, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
340139e0:	63dd      	str	r5, [r3, #60]	@ 0x3c
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340139e2:	d84c      	bhi.n	34013a7e <LTDC_SetConfig+0xc6>
  {
    case LTDC_PIXEL_FORMAT_ARGB8888:
    case LTDC_PIXEL_FORMAT_BGRA8888:
    case LTDC_PIXEL_FORMAT_ABGR8888:
    case LTDC_PIXEL_FORMAT_RGBA8888:
      stride = 4U;
340139e4:	2604      	movs	r6, #4
      stride = 1U;
      break;
  }

  /* Configure the horizontal start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
340139e6:	2734      	movs	r7, #52	@ 0x34
340139e8:	fb07 000c 	mla	r0, r7, ip, r0
340139ec:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
340139f0:	f8d0 b038 	ldr.w	fp, [r0, #56]	@ 0x38
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
340139f4:	68e7      	ldr	r7, [r4, #12]
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
340139f6:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
340139fa:	f10b 0901 	add.w	r9, fp, #1
340139fe:	f3c7 470b 	ubfx	r7, r7, #16, #12
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
34013a02:	f3cc 4c0b 	ubfx	ip, ip, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
34013a06:	444f      	add	r7, r9
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
34013a08:	44c4      	add	ip, r8
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
34013a0a:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34013a0e:	611f      	str	r7, [r3, #16]

  /* Configure the vertical start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
34013a10:	6c47      	ldr	r7, [r0, #68]	@ 0x44
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34013a12:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
34013a14:	9704      	str	r7, [sp, #16]
34013a16:	68e7      	ldr	r7, [r4, #12]
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34013a18:	68e4      	ldr	r4, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34013a1a:	9205      	str	r2, [sp, #20]
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34013a1c:	f3c4 0c0b 	ubfx	ip, r4, #0, #12
34013a20:	1c54      	adds	r4, r2, #1
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
34013a22:	9a04      	ldr	r2, [sp, #16]
34013a24:	f3c7 070b 	ubfx	r7, r7, #0, #12
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34013a28:	4464      	add	r4, ip
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
34013a2a:	4417      	add	r7, r2
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34013a2c:	ea44 4407 	orr.w	r4, r4, r7, lsl #16

  if (Mirror == LTDC_MIRROR_NONE)
  {
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34013a30:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34013a32:	615c      	str	r4, [r3, #20]
        /* Configure the auxiliary frame buffer address 1 */
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;

        /* Configure the buffer length */
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34013a34:	eba8 040b 	sub.w	r4, r8, fp
        break;
    }

    /* Configure the color frame buffer pitch in byte */
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 - hltdc->LayerCfg[LayerIdx].WindowX0) *
34013a38:	fb04 f906 	mul.w	r9, r4, r6
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34013a3c:	9201      	str	r2, [sp, #4]
  if (Mirror == LTDC_MIRROR_NONE)
34013a3e:	9a03      	ldr	r2, [sp, #12]
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
34013a40:	6e00      	ldr	r0, [r0, #96]	@ 0x60
  if (Mirror == LTDC_MIRROR_NONE)
34013a42:	2a03      	cmp	r2, #3
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34013a44:	fb00 fc06 	mul.w	ip, r0, r6
                                            stride)  + 7U));
34013a48:	f109 0a07 	add.w	sl, r9, #7
  if (Mirror == LTDC_MIRROR_NONE)
34013a4c:	d145      	bne.n	34013ada <LTDC_SetConfig+0x122>
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013a4e:	f240 160d 	movw	r6, #269	@ 0x10d
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34013a52:	9a01      	ldr	r2, [sp, #4]
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013a54:	45b6      	cmp	lr, r6
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34013a56:	635a      	str	r2, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013a58:	d02a      	beq.n	34013ab0 <LTDC_SetConfig+0xf8>
34013a5a:	f240 260d 	movw	r6, #525	@ 0x20d
34013a5e:	45b6      	cmp	lr, r6
34013a60:	d031      	beq.n	34013ac6 <LTDC_SetConfig+0x10e>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34013a62:	ea4a 420c 	orr.w	r2, sl, ip, lsl #16
34013a66:	639a      	str	r2, [r3, #56]	@ 0x38
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));

    /* Enable LTDC_Layer by setting LEN bit */
    MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN, LTDC_LxCR_LEN);
34013a68:	68da      	ldr	r2, [r3, #12]
34013a6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34013a6e:	f022 0201 	bic.w	r2, r2, #1
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));

    /* Enable horizontal mirroring bit & LTDC_Layer by setting LEN bit */
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34013a72:	f042 0201 	orr.w	r2, r2, #1
34013a76:	60da      	str	r2, [r3, #12]
  }
}
34013a78:	b007      	add	sp, #28
34013a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013a7e:	f1ae 0704 	sub.w	r7, lr, #4
34013a82:	2f09      	cmp	r7, #9
34013a84:	f04f 0601 	mov.w	r6, #1
34013a88:	d8ad      	bhi.n	340139e6 <LTDC_SetConfig+0x2e>
34013a8a:	f240 299b 	movw	r9, #667	@ 0x29b
34013a8e:	fa06 f807 	lsl.w	r8, r6, r7
34013a92:	ea18 0f09 	tst.w	r8, r9
34013a96:	d107      	bne.n	34013aa8 <LTDC_SetConfig+0xf0>
34013a98:	2f02      	cmp	r7, #2
34013a9a:	d007      	beq.n	34013aac <LTDC_SetConfig+0xf4>
34013a9c:	2f08      	cmp	r7, #8
34013a9e:	d1a2      	bne.n	340139e6 <LTDC_SetConfig+0x2e>
      stride = (((LTDC_LAYER(hltdc, LayerIdx)->FPF1R) & LTDC_LxFPF1R_PSIZE_Msk) >> LTDC_LxFPF1R_PSIZE_Pos);
34013aa0:	6f9e      	ldr	r6, [r3, #120]	@ 0x78
34013aa2:	f3c6 4682 	ubfx	r6, r6, #18, #3
      break;
34013aa6:	e79e      	b.n	340139e6 <LTDC_SetConfig+0x2e>
      stride = 2U;
34013aa8:	2602      	movs	r6, #2
34013aaa:	e79c      	b.n	340139e6 <LTDC_SetConfig+0x2e>
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013aac:	2603      	movs	r6, #3
34013aae:	e79a      	b.n	340139e6 <LTDC_SetConfig+0x2e>
                                              hltdc->LayerCfg[LayerIdx].WindowX0 + 7U);
34013ab0:	f108 0207 	add.w	r2, r8, #7
34013ab4:	eba2 020b 	sub.w	r2, r2, fp
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
34013ab8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
34013abc:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
34013abe:	649a      	str	r2, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
34013ac0:	086d      	lsrs	r5, r5, #1
34013ac2:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
34013ac4:	e7cd      	b.n	34013a62 <LTDC_SetConfig+0xaa>
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
34013ac6:	0864      	lsrs	r4, r4, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;
34013ac8:	9a02      	ldr	r2, [sp, #8]
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013aca:	0840      	lsrs	r0, r0, #1
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
34013acc:	3407      	adds	r4, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013ace:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
34013ad2:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;
34013ad4:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013ad6:	649c      	str	r4, [r3, #72]	@ 0x48
34013ad8:	e7f2      	b.n	34013ac0 <LTDC_SetConfig+0x108>
  else if (Mirror == LTDC_MIRROR_HORIZONTAL)
34013ada:	9a03      	ldr	r2, [sp, #12]
34013adc:	bb3a      	cbnz	r2, 34013b2e <LTDC_SetConfig+0x176>
                                                    hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34013ade:	9a01      	ldr	r2, [sp, #4]
34013ae0:	1e57      	subs	r7, r2, #1
34013ae2:	444f      	add	r7, r9
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34013ae4:	635f      	str	r7, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013ae6:	f240 170d 	movw	r7, #269	@ 0x10d
34013aea:	45be      	cmp	lr, r7
34013aec:	d00a      	beq.n	34013b04 <LTDC_SetConfig+0x14c>
34013aee:	f240 270d 	movw	r7, #525	@ 0x20d
34013af2:	45be      	cmp	lr, r7
34013af4:	d010      	beq.n	34013b18 <LTDC_SetConfig+0x160>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34013af6:	ea4a 420c 	orr.w	r2, sl, ip, lsl #16
34013afa:	639a      	str	r2, [r3, #56]	@ 0x38
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34013afc:	68da      	ldr	r2, [r3, #12]
34013afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34013b02:	e7b6      	b.n	34013a72 <LTDC_SetConfig+0xba>
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34013b04:	3901      	subs	r1, #1
34013b06:	4449      	add	r1, r9
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34013b08:	6419      	str	r1, [r3, #64]	@ 0x40
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
34013b0a:	3407      	adds	r4, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013b0c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34013b10:	086d      	lsrs	r5, r5, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013b12:	649c      	str	r4, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34013b14:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
34013b16:	e7ee      	b.n	34013af6 <LTDC_SetConfig+0x13e>
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013b18:	0864      	lsrs	r4, r4, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34013b1a:	4366      	muls	r6, r4
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013b1c:	9a02      	ldr	r2, [sp, #8]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013b1e:	3901      	subs	r1, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013b20:	3a01      	subs	r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013b22:	4431      	add	r1, r6
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013b24:	4432      	add	r2, r6
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34013b26:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013b28:	0840      	lsrs	r0, r0, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34013b2a:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013b2c:	e7ed      	b.n	34013b0a <LTDC_SetConfig+0x152>
                                          ((hltdc->LayerCfg[LayerIdx].WindowY1 -
34013b2e:	e9dd 2704 	ldrd	r2, r7, [sp, #16]
34013b32:	eba2 0807 	sub.w	r8, r2, r7
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34013b36:	9a03      	ldr	r2, [sp, #12]
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34013b38:	f5cc 4c00 	rsb	ip, ip, #32768	@ 0x8000
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34013b3c:	2a01      	cmp	r2, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34013b3e:	ea4a 4c0c 	orr.w	ip, sl, ip, lsl #16
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34013b42:	d131      	bne.n	34013ba8 <LTDC_SetConfig+0x1f0>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34013b44:	9a01      	ldr	r2, [sp, #4]
                                            hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
34013b46:	f108 3aff 	add.w	sl, r8, #4294967295
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34013b4a:	fb09 270a 	mla	r7, r9, sl, r2
34013b4e:	635f      	str	r7, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013b50:	f240 170d 	movw	r7, #269	@ 0x10d
34013b54:	45be      	cmp	lr, r7
34013b56:	d006      	beq.n	34013b66 <LTDC_SetConfig+0x1ae>
34013b58:	f240 270d 	movw	r7, #525	@ 0x20d
34013b5c:	45be      	cmp	lr, r7
34013b5e:	d00d      	beq.n	34013b7c <LTDC_SetConfig+0x1c4>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34013b60:	f8c3 c038 	str.w	ip, [r3, #56]	@ 0x38
34013b64:	e780      	b.n	34013a68 <LTDC_SetConfig+0xb0>
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013b66:	ea4f 0258 	mov.w	r2, r8, lsr #1
34013b6a:	3a01      	subs	r2, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34013b6c:	fb09 1202 	mla	r2, r9, r2, r1
34013b70:	641a      	str	r2, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34013b72:	f8c3 c048 	str.w	ip, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34013b76:	086d      	lsrs	r5, r5, #1
34013b78:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
34013b7a:	e7f1      	b.n	34013b60 <LTDC_SetConfig+0x1a8>
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34013b7c:	0864      	lsrs	r4, r4, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34013b7e:	4374      	muls	r4, r6
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013b80:	ea4f 0858 	mov.w	r8, r8, lsr #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34013b84:	0840      	lsrs	r0, r0, #1
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013b86:	f108 38ff 	add.w	r8, r8, #4294967295
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34013b8a:	f5c0 4000 	rsb	r0, r0, #32768	@ 0x8000
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34013b8e:	fb04 f808 	mul.w	r8, r4, r8
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34013b92:	4370      	muls	r0, r6
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34013b94:	9a02      	ldr	r2, [sp, #8]
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34013b96:	3407      	adds	r4, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34013b98:	4441      	add	r1, r8
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34013b9a:	4442      	add	r2, r8
                                               stride) << 16U) |
34013b9c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34013ba0:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34013ba2:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34013ba4:	649c      	str	r4, [r3, #72]	@ 0x48
34013ba6:	e7e6      	b.n	34013b76 <LTDC_SetConfig+0x1be>
                                           hltdc->LayerCfg[LayerIdx].WindowY0)) - 1U;
34013ba8:	9a01      	ldr	r2, [sp, #4]
34013baa:	1e57      	subs	r7, r2, #1
34013bac:	fb09 7708 	mla	r7, r9, r8, r7
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34013bb0:	635f      	str	r7, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013bb2:	f240 170d 	movw	r7, #269	@ 0x10d
34013bb6:	45be      	cmp	lr, r7
34013bb8:	d006      	beq.n	34013bc8 <LTDC_SetConfig+0x210>
34013bba:	f240 270d 	movw	r7, #525	@ 0x20d
34013bbe:	45be      	cmp	lr, r7
34013bc0:	d00d      	beq.n	34013bde <LTDC_SetConfig+0x226>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34013bc2:	f8c3 c038 	str.w	ip, [r3, #56]	@ 0x38
34013bc6:	e799      	b.n	34013afc <LTDC_SetConfig+0x144>
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013bc8:	ea4f 0858 	mov.w	r8, r8, lsr #1
34013bcc:	3901      	subs	r1, #1
34013bce:	fb09 1108 	mla	r1, r9, r8, r1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34013bd2:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34013bd4:	f8c3 c048 	str.w	ip, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34013bd8:	086d      	lsrs	r5, r5, #1
34013bda:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
34013bdc:	e7f1      	b.n	34013bc2 <LTDC_SetConfig+0x20a>
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34013bde:	0864      	lsrs	r4, r4, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34013be0:	4374      	muls	r4, r6
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34013be2:	0840      	lsrs	r0, r0, #1
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013be4:	ea4f 0858 	mov.w	r8, r8, lsr #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34013be8:	f5c0 4000 	rsb	r0, r0, #32768	@ 0x8000
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34013bec:	fb04 f808 	mul.w	r8, r4, r8
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34013bf0:	4370      	muls	r0, r6
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013bf2:	9a02      	ldr	r2, [sp, #8]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013bf4:	3901      	subs	r1, #1
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013bf6:	3a01      	subs	r2, #1
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34013bf8:	3407      	adds	r4, #7
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013bfa:	4442      	add	r2, r8
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013bfc:	4441      	add	r1, r8
                                              << 16U) |
34013bfe:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34013c02:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34013c04:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34013c06:	649c      	str	r4, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR &= ~(LTDC_L1AFBLNR_AFBLNBR);
34013c08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
34013c0a:	f36f 020f 	bfc	r2, #0, #16
34013c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
34013c10:	e7e2      	b.n	34013bd8 <LTDC_SetConfig+0x220>
	...

34013c14 <LTDC_SetCompositionConfig>:

  /* Configure the default color values */
  tmp = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Red) << 16U);
  tmp2 = (hltdc->LayerCfg[LayerIdx].Alpha0 << 24U);
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34013c14:	6802      	ldr	r2, [r0, #0]
34013c16:	1c4b      	adds	r3, r1, #1
34013c18:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  tmp2 = (hltdc->LayerCfg[LayerIdx].Alpha0 << 24U);
34013c1c:	2334      	movs	r3, #52	@ 0x34
34013c1e:	fb03 0101 	mla	r1, r3, r1, r0
34013c22:	6d08      	ldr	r0, [r1, #80]	@ 0x50
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34013c24:	f891 3068 	ldrb.w	r3, [r1, #104]	@ 0x68
34013c28:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  tmp = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Green) << 8U);
34013c2c:	f891 0069 	ldrb.w	r0, [r1, #105]	@ 0x69
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34013c30:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmp1 = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Red) << 16U);
34013c34:	f891 006a 	ldrb.w	r0, [r1, #106]	@ 0x6a
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34013c38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34013c3c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
34013c3e:	6a13      	ldr	r3, [r2, #32]
34013c40:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34013c44:	6213      	str	r3, [r2, #32]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (hltdc->LayerCfg[LayerIdx].Alpha);
34013c46:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
34013c48:	6213      	str	r3, [r2, #32]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BOR | LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
34013c4a:	6a90      	ldr	r0, [r2, #40]	@ 0x28
34013c4c:	4b05      	ldr	r3, [pc, #20]	@ (34013c64 <LTDC_SetCompositionConfig+0x50>)
34013c4e:	4003      	ands	r3, r0
34013c50:	6293      	str	r3, [r2, #40]	@ 0x28
  tmp = ((uint32_t)(LTDC_LAYER(hltdc, LayerIdx)->BFCR & LTDC_LxBFCR_BOR_Msk) >> LTDC_LxBFCR_BOR_Pos) << 16U;
34013c52:	6a90      	ldr	r0, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34013c54:	e9d1 3115 	ldrd	r3, r1, [r1, #84]	@ 0x54
34013c58:	430b      	orrs	r3, r1
  tmp = ((uint32_t)(LTDC_LAYER(hltdc, LayerIdx)->BFCR & LTDC_LxBFCR_BOR_Msk) >> LTDC_LxBFCR_BOR_Pos) << 16U;
34013c5a:	f400 3180 	and.w	r1, r0, #65536	@ 0x10000
                                       hltdc->LayerCfg[LayerIdx].BlendingFactor2 | tmp);
34013c5e:	430b      	orrs	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34013c60:	6293      	str	r3, [r2, #40]	@ 0x28
}
34013c62:	4770      	bx	lr
34013c64:	fffef8f8 	.word	0xfffef8f8

34013c68 <LTDC_SetPredefFormat>:
  uint32_t BPOS = 0U;
  uint32_t GLEN = 0U;
  uint32_t GPOS = 0U;

  /* Specify Flex ARGB parameters according to pixel format */
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013c68:	2334      	movs	r3, #52	@ 0x34
34013c6a:	fb03 0301 	mla	r3, r3, r1, r0
34013c6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
{
34013c70:	b5f0      	push	{r4, r5, r6, r7, lr}
34013c72:	1fd4      	subs	r4, r2, #7
34013c74:	2c04      	cmp	r4, #4
34013c76:	d823      	bhi.n	34013cc0 <LTDC_SetPredefFormat+0x58>
34013c78:	4a16      	ldr	r2, [pc, #88]	@ (34013cd4 <LTDC_SetPredefFormat+0x6c>)
34013c7a:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 34013ce8 <LTDC_SetPredefFormat+0x80>
34013c7e:	5d16      	ldrb	r6, [r2, r4]
34013c80:	4a15      	ldr	r2, [pc, #84]	@ (34013cd8 <LTDC_SetPredefFormat+0x70>)
34013c82:	4b16      	ldr	r3, [pc, #88]	@ (34013cdc <LTDC_SetPredefFormat+0x74>)
34013c84:	5d17      	ldrb	r7, [r2, r4]
34013c86:	4a16      	ldr	r2, [pc, #88]	@ (34013ce0 <LTDC_SetPredefFormat+0x78>)
34013c88:	5d1b      	ldrb	r3, [r3, r4]
34013c8a:	5d15      	ldrb	r5, [r2, r4]
34013c8c:	4a15      	ldr	r2, [pc, #84]	@ (34013ce4 <LTDC_SetPredefFormat+0x7c>)
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
                                           APOS;
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34013c8e:	049b      	lsls	r3, r3, #18
34013c90:	5d12      	ldrb	r2, [r2, r4]
34013c92:	f81c 4004 	ldrb.w	r4, [ip, r4]
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
34013c96:	f101 0c01 	add.w	ip, r1, #1
34013c9a:	6801      	ldr	r1, [r0, #0]
34013c9c:	2007      	movs	r0, #7
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
34013c9e:	0252      	lsls	r2, r2, #9
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34013ca0:	eb02 3285 	add.w	r2, r2, r5, lsl #14
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
34013ca4:	443a      	add	r2, r7
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34013ca6:	eb03 3385 	add.w	r3, r3, r5, lsl #14
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
34013caa:	eb01 210c 	add.w	r1, r1, ip, lsl #8
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
34013cae:	eb02 1246 	add.w	r2, r2, r6, lsl #5
                                           (BLEN << LTDC_LxFPF1R_BLEN_Pos)  +
                                           (BPOS << LTDC_LxFPF1R_BPOS_Pos) +
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
34013cb2:	4423      	add	r3, r4
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
34013cb4:	61c8      	str	r0, [r1, #28]
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
34013cb6:	eb03 1345 	add.w	r3, r3, r5, lsl #5
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34013cba:	674a      	str	r2, [r1, #116]	@ 0x74
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = 0U;
34013cbc:	678b      	str	r3, [r1, #120]	@ 0x78
                                           GPOS;
      break;
    default:
      break;
  }
}
34013cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013cc0:	2a06      	cmp	r2, #6
34013cc2:	d8fc      	bhi.n	34013cbe <LTDC_SetPredefFormat+0x56>
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = (hltdc->LayerCfg[LayerIdx].PixelFormat);
34013cc4:	6803      	ldr	r3, [r0, #0]
34013cc6:	3101      	adds	r1, #1
34013cc8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = 0U;
34013ccc:	2300      	movs	r3, #0
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = (hltdc->LayerCfg[LayerIdx].PixelFormat);
34013cce:	61ca      	str	r2, [r1, #28]
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = 0U;
34013cd0:	674b      	str	r3, [r1, #116]	@ 0x74
34013cd2:	e7f3      	b.n	34013cbc <LTDC_SetPredefFormat+0x54>
34013cd4:	340c8700 	.word	0x340c8700
34013cd8:	340c86fb 	.word	0x340c86fb
34013cdc:	340c8705 	.word	0x340c8705
34013ce0:	340c86f6 	.word	0x340c86f6
34013ce4:	340c86f1 	.word	0x340c86f1
34013ce8:	340c86ec 	.word	0x340c86ec

34013cec <LTDC_RetrieveUserConfig.constprop.0>:
static void LTDC_RetrieveUserConfig(LTDC_HandleTypeDef *hltdc, uint32_t *Mirror, uint32_t *Aux0Addr,
34013cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34013cf0:	468c      	mov	ip, r1
34013cf2:	9907      	ldr	r1, [sp, #28]
  const uint32_t hmirror = ((LTDC_LAYER(hltdc, LayerIdx)->CR) & LTDC_LxCR_HMEN_Msk);
34013cf4:	6805      	ldr	r5, [r0, #0]
34013cf6:	1c4c      	adds	r4, r1, #1
34013cf8:	eb05 2504 	add.w	r5, r5, r4, lsl #8
34013cfc:	68ec      	ldr	r4, [r5, #12]
34013cfe:	f404 7e80 	and.w	lr, r4, #256	@ 0x100
  const uint32_t pitchSign = (LTDC_LAYER(hltdc, LayerIdx)->CFBLR & LTDC_LxCFBLR_CFBP) & LTDC_PITCH_SIGN_MSK;
34013d02:	6bac      	ldr	r4, [r5, #56]	@ 0x38
34013d04:	f004 4880 	and.w	r8, r4, #1073741824	@ 0x40000000
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013d08:	2434      	movs	r4, #52	@ 0x34
34013d0a:	fb04 0401 	mla	r4, r4, r1, r0
34013d0e:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
34013d10:	2e03      	cmp	r6, #3
34013d12:	d813      	bhi.n	34013d3c <LTDC_RetrieveUserConfig.constprop.0+0x50>
      stride = 4U;
34013d14:	2404      	movs	r4, #4
  if ((pitchSign == 0U) && (hmirror == 0U))
34013d16:	f1b8 0f00 	cmp.w	r8, #0
34013d1a:	d153      	bne.n	34013dc4 <LTDC_RetrieveUserConfig.constprop.0+0xd8>
34013d1c:	2734      	movs	r7, #52	@ 0x34
34013d1e:	f1be 0f00 	cmp.w	lr, #0
34013d22:	d123      	bne.n	34013d6c <LTDC_RetrieveUserConfig.constprop.0+0x80>
    *Mirror = LTDC_MIRROR_NONE;
34013d24:	2403      	movs	r4, #3
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR;
34013d26:	fb07 0701 	mla	r7, r7, r1, r0
    *Mirror = LTDC_MIRROR_NONE;
34013d2a:	f8cc 4000 	str.w	r4, [ip]
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR;
34013d2e:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
    *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R;
34013d30:	6c29      	ldr	r1, [r5, #64]	@ 0x40
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR;
34013d32:	65fc      	str	r4, [r7, #92]	@ 0x5c
    *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R;
34013d34:	6011      	str	r1, [r2, #0]
    *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R;
34013d36:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34013d38:	601a      	str	r2, [r3, #0]
}
34013d3a:	e02d      	b.n	34013d98 <LTDC_RetrieveUserConfig.constprop.0+0xac>
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013d3c:	3e04      	subs	r6, #4
34013d3e:	2e09      	cmp	r6, #9
34013d40:	f04f 0401 	mov.w	r4, #1
34013d44:	d8e7      	bhi.n	34013d16 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
34013d46:	f240 299b 	movw	r9, #667	@ 0x29b
34013d4a:	fa04 f706 	lsl.w	r7, r4, r6
34013d4e:	ea17 0f09 	tst.w	r7, r9
34013d52:	d107      	bne.n	34013d64 <LTDC_RetrieveUserConfig.constprop.0+0x78>
34013d54:	2e02      	cmp	r6, #2
34013d56:	d007      	beq.n	34013d68 <LTDC_RetrieveUserConfig.constprop.0+0x7c>
34013d58:	2e08      	cmp	r6, #8
34013d5a:	d1dc      	bne.n	34013d16 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
      stride = ((LTDC_LAYER(hltdc, LayerIdx)->FPF1R) & LTDC_LxFPF1R_PSIZE_Msk) >> LTDC_LxFPF1R_PSIZE_Pos;
34013d5c:	6fac      	ldr	r4, [r5, #120]	@ 0x78
34013d5e:	f3c4 4482 	ubfx	r4, r4, #18, #3
      break;
34013d62:	e7d8      	b.n	34013d16 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
      stride = 2U;
34013d64:	2402      	movs	r4, #2
34013d66:	e7d6      	b.n	34013d16 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013d68:	2403      	movs	r4, #3
34013d6a:	e7d4      	b.n	34013d16 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
    *Mirror = LTDC_MIRROR_HORIZONTAL;
34013d6c:	f8cc 8000 	str.w	r8, [ip]
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013d70:	f240 1c0d 	movw	ip, #269	@ 0x10d
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013d74:	fb07 0001 	mla	r0, r7, r1, r0
34013d78:	e9d0 710e 	ldrd	r7, r1, [r0, #56]	@ 0x38
34013d7c:	1bc9      	subs	r1, r1, r7
34013d7e:	fb04 f701 	mul.w	r7, r4, r1
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013d82:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) + 1U;
34013d84:	3601      	adds	r6, #1
34013d86:	1bf6      	subs	r6, r6, r7
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013d88:	65c6      	str	r6, [r0, #92]	@ 0x5c
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013d8a:	6c86      	ldr	r6, [r0, #72]	@ 0x48
34013d8c:	4566      	cmp	r6, ip
34013d8e:	d005      	beq.n	34013d9c <LTDC_RetrieveUserConfig.constprop.0+0xb0>
34013d90:	f240 270d 	movw	r7, #525	@ 0x20d
34013d94:	42be      	cmp	r6, r7
34013d96:	d006      	beq.n	34013da6 <LTDC_RetrieveUserConfig.constprop.0+0xba>
}
34013d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - \
34013d9c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
                               hltdc->LayerCfg[LayerIdx].WindowX0)) + 1U;
34013d9e:	3301      	adds	r3, #1
34013da0:	1bdb      	subs	r3, r3, r7
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013da2:	6013      	str	r3, [r2, #0]
        break;
34013da4:	e7f8      	b.n	34013d98 <LTDC_RetrieveUserConfig.constprop.0+0xac>
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - \
34013da6:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) + 1U;
34013da8:	0849      	lsrs	r1, r1, #1
34013daa:	3601      	adds	r6, #1
34013dac:	fb04 6111 	mls	r1, r4, r1, r6
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - \
34013db0:	6011      	str	r1, [r2, #0]
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - \
34013db2:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
                    (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013db4:	e9d0 010e 	ldrd	r0, r1, [r0, #56]	@ 0x38
34013db8:	1a09      	subs	r1, r1, r0
                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) + 1U;
34013dba:	3201      	adds	r2, #1
34013dbc:	0849      	lsrs	r1, r1, #1
34013dbe:	fb04 2211 	mls	r2, r4, r1, r2
34013dc2:	e7b9      	b.n	34013d38 <LTDC_RetrieveUserConfig.constprop.0+0x4c>
  else if ((pitchSign != 0U) && (hmirror == 0U))
34013dc4:	2634      	movs	r6, #52	@ 0x34
34013dc6:	f1be 0f00 	cmp.w	lr, #0
34013dca:	d138      	bne.n	34013e3e <LTDC_RetrieveUserConfig.constprop.0+0x152>
    *Mirror = LTDC_MIRROR_VERTICAL;
34013dcc:	2701      	movs	r7, #1
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013dce:	fb06 0601 	mla	r6, r6, r1, r0
    *Mirror = LTDC_MIRROR_VERTICAL;
34013dd2:	f8cc 7000 	str.w	r7, [ip]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013dd6:	e9d6 100e 	ldrd	r1, r0, [r6, #56]	@ 0x38
34013dda:	1a40      	subs	r0, r0, r1
34013ddc:	fb00 fc04 	mul.w	ip, r0, r4
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013de0:	e9d6 1710 	ldrd	r1, r7, [r6, #64]	@ 0x40
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013de4:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013de8:	1a79      	subs	r1, r7, r1
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
34013dea:	f101 3eff 	add.w	lr, r1, #4294967295
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013dee:	fb0c 871e 	mls	r7, ip, lr, r8
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013df2:	f240 1e0d 	movw	lr, #269	@ 0x10d
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013df6:	65f7      	str	r7, [r6, #92]	@ 0x5c
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013df8:	6cb7      	ldr	r7, [r6, #72]	@ 0x48
34013dfa:	4577      	cmp	r7, lr
34013dfc:	d019      	beq.n	34013e32 <LTDC_RetrieveUserConfig.constprop.0+0x146>
34013dfe:	f240 2c0d 	movw	ip, #525	@ 0x20d
34013e02:	4567      	cmp	r7, ip
34013e04:	d1c8      	bne.n	34013d98 <LTDC_RetrieveUserConfig.constprop.0+0xac>
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013e06:	0849      	lsrs	r1, r1, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013e08:	0840      	lsrs	r0, r0, #1
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013e0a:	3901      	subs	r1, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013e0c:	4341      	muls	r1, r0
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013e0e:	6c2f      	ldr	r7, [r5, #64]	@ 0x40
34013e10:	fb04 7111 	mls	r1, r4, r1, r7
34013e14:	6011      	str	r1, [r2, #0]
                                                           (((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013e16:	e9d6 1210 	ldrd	r1, r2, [r6, #64]	@ 0x40
34013e1a:	1a52      	subs	r2, r2, r1
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34013e1c:	6c68      	ldr	r0, [r5, #68]	@ 0x44
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013e1e:	0852      	lsrs	r2, r2, #1
                                                           ((hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013e20:	e9d6 510e 	ldrd	r5, r1, [r6, #56]	@ 0x38
34013e24:	1b49      	subs	r1, r1, r5
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013e26:	3a01      	subs	r2, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013e28:	0849      	lsrs	r1, r1, #1
34013e2a:	434a      	muls	r2, r1
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34013e2c:	fb04 0212 	mls	r2, r4, r2, r0
34013e30:	e782      	b.n	34013d38 <LTDC_RetrieveUserConfig.constprop.0+0x4c>
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013e32:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013e34:	0849      	lsrs	r1, r1, #1
34013e36:	3901      	subs	r1, #1
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013e38:	fb0c 3311 	mls	r3, ip, r1, r3
34013e3c:	e7b1      	b.n	34013da2 <LTDC_RetrieveUserConfig.constprop.0+0xb6>
    *Mirror = LTDC_MIRROR_HORIZONTAL_VERTICAL;
34013e3e:	2702      	movs	r7, #2
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013e40:	fb06 0001 	mla	r0, r6, r1, r0
    *Mirror = LTDC_MIRROR_HORIZONTAL_VERTICAL;
34013e44:	f8cc 7000 	str.w	r7, [ip]
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013e48:	f8d5 e034 	ldr.w	lr, [r5, #52]	@ 0x34
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013e4c:	e9d0 610e 	ldrd	r6, r1, [r0, #56]	@ 0x38
34013e50:	1b89      	subs	r1, r1, r6
                                               (hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013e52:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
34013e56:	1bf7      	subs	r7, r6, r7
                                                hltdc->LayerCfg[LayerIdx].WindowY0)) + 1U;
34013e58:	f10e 0601 	add.w	r6, lr, #1
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013e5c:	f240 1e0d 	movw	lr, #269	@ 0x10d
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013e60:	fb01 fc04 	mul.w	ip, r1, r4
                                                hltdc->LayerCfg[LayerIdx].WindowY0)) + 1U;
34013e64:	fb07 661c 	mls	r6, r7, ip, r6
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013e68:	65c6      	str	r6, [r0, #92]	@ 0x5c
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013e6a:	6c86      	ldr	r6, [r0, #72]	@ 0x48
34013e6c:	4576      	cmp	r6, lr
34013e6e:	d019      	beq.n	34013ea4 <LTDC_RetrieveUserConfig.constprop.0+0x1b8>
34013e70:	f240 2c0d 	movw	ip, #525	@ 0x20d
34013e74:	4566      	cmp	r6, ip
34013e76:	d18f      	bne.n	34013d98 <LTDC_RetrieveUserConfig.constprop.0+0xac>
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013e78:	0849      	lsrs	r1, r1, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013e7a:	087f      	lsrs	r7, r7, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013e7c:	4379      	muls	r1, r7
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013e7e:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013e80:	3601      	adds	r6, #1
34013e82:	fb04 6111 	mls	r1, r4, r1, r6
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013e86:	6011      	str	r1, [r2, #0]
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34013e88:	6c69      	ldr	r1, [r5, #68]	@ 0x44
                                                           ((hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013e8a:	e9d0 520e 	ldrd	r5, r2, [r0, #56]	@ 0x38
34013e8e:	1b52      	subs	r2, r2, r5
                                                           ((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013e90:	e9d0 0510 	ldrd	r0, r5, [r0, #64]	@ 0x40
34013e94:	1a28      	subs	r0, r5, r0
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013e96:	0852      	lsrs	r2, r2, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013e98:	0840      	lsrs	r0, r0, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013e9a:	4342      	muls	r2, r0
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013e9c:	3101      	adds	r1, #1
34013e9e:	fb04 1212 	mls	r2, r4, r2, r1
34013ea2:	e749      	b.n	34013d38 <LTDC_RetrieveUserConfig.constprop.0+0x4c>
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013ea4:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013ea6:	087f      	lsrs	r7, r7, #1
34013ea8:	3301      	adds	r3, #1
34013eaa:	fb0c 3317 	mls	r3, ip, r7, r3
34013eae:	e778      	b.n	34013da2 <LTDC_RetrieveUserConfig.constprop.0+0xb6>

34013eb0 <HAL_LTDC_MspInit>:
}
34013eb0:	4770      	bx	lr
	...

34013eb4 <HAL_LTDC_Init>:
{
34013eb4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
34013eb6:	4604      	mov	r4, r0
34013eb8:	2800      	cmp	r0, #0
34013eba:	f000 80c6 	beq.w	3401404a <HAL_LTDC_Init+0x196>
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
34013ebe:	6803      	ldr	r3, [r0, #0]
34013ec0:	4a63      	ldr	r2, [pc, #396]	@ (34014050 <HAL_LTDC_Init+0x19c>)
34013ec2:	4293      	cmp	r3, r2
34013ec4:	d007      	beq.n	34013ed6 <HAL_LTDC_Init+0x22>
34013ec6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013eca:	4293      	cmp	r3, r2
34013ecc:	d003      	beq.n	34013ed6 <HAL_LTDC_Init+0x22>
34013ece:	21f8      	movs	r1, #248	@ 0xf8
34013ed0:	4860      	ldr	r0, [pc, #384]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013ed2:	f00b fb95 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
34013ed6:	6963      	ldr	r3, [r4, #20]
34013ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013edc:	d303      	bcc.n	34013ee6 <HAL_LTDC_Init+0x32>
34013ede:	21f9      	movs	r1, #249	@ 0xf9
34013ee0:	485c      	ldr	r0, [pc, #368]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013ee2:	f00b fb8d 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
34013ee6:	69a3      	ldr	r3, [r4, #24]
34013ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013eec:	d303      	bcc.n	34013ef6 <HAL_LTDC_Init+0x42>
34013eee:	21fa      	movs	r1, #250	@ 0xfa
34013ef0:	4858      	ldr	r0, [pc, #352]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013ef2:	f00b fb85 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
34013ef6:	69e3      	ldr	r3, [r4, #28]
34013ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013efc:	d303      	bcc.n	34013f06 <HAL_LTDC_Init+0x52>
34013efe:	21fb      	movs	r1, #251	@ 0xfb
34013f00:	4854      	ldr	r0, [pc, #336]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f02:	f00b fb7d 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
34013f06:	6a23      	ldr	r3, [r4, #32]
34013f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013f0c:	d303      	bcc.n	34013f16 <HAL_LTDC_Init+0x62>
34013f0e:	21fc      	movs	r1, #252	@ 0xfc
34013f10:	4850      	ldr	r0, [pc, #320]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f12:	f00b fb75 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
34013f16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34013f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013f1c:	d303      	bcc.n	34013f26 <HAL_LTDC_Init+0x72>
34013f1e:	21fd      	movs	r1, #253	@ 0xfd
34013f20:	484c      	ldr	r0, [pc, #304]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f22:	f00b fb6d 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
34013f26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34013f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013f2c:	d303      	bcc.n	34013f36 <HAL_LTDC_Init+0x82>
34013f2e:	21fe      	movs	r1, #254	@ 0xfe
34013f30:	4848      	ldr	r0, [pc, #288]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f32:	f00b fb65 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
34013f36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34013f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013f3c:	d303      	bcc.n	34013f46 <HAL_LTDC_Init+0x92>
34013f3e:	21ff      	movs	r1, #255	@ 0xff
34013f40:	4844      	ldr	r0, [pc, #272]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f42:	f00b fb5d 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
34013f46:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34013f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013f4c:	d304      	bcc.n	34013f58 <HAL_LTDC_Init+0xa4>
34013f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34013f52:	4840      	ldr	r0, [pc, #256]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f54:	f00b fb54 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
34013f58:	6863      	ldr	r3, [r4, #4]
34013f5a:	f033 4300 	bics.w	r3, r3, #2147483648	@ 0x80000000
34013f5e:	d004      	beq.n	34013f6a <HAL_LTDC_Init+0xb6>
34013f60:	f240 1101 	movw	r1, #257	@ 0x101
34013f64:	483b      	ldr	r0, [pc, #236]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f66:	f00b fb4b 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
34013f6a:	68a3      	ldr	r3, [r4, #8]
34013f6c:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
34013f70:	d004      	beq.n	34013f7c <HAL_LTDC_Init+0xc8>
34013f72:	f44f 7181 	mov.w	r1, #258	@ 0x102
34013f76:	4837      	ldr	r0, [pc, #220]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f78:	f00b fb42 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
34013f7c:	68e3      	ldr	r3, [r4, #12]
34013f7e:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
34013f82:	d004      	beq.n	34013f8e <HAL_LTDC_Init+0xda>
34013f84:	f240 1103 	movw	r1, #259	@ 0x103
34013f88:	4832      	ldr	r0, [pc, #200]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f8a:	f00b fb39 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
34013f8e:	6923      	ldr	r3, [r4, #16]
34013f90:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
34013f94:	d004      	beq.n	34013fa0 <HAL_LTDC_Init+0xec>
34013f96:	f44f 7182 	mov.w	r1, #260	@ 0x104
34013f9a:	482e      	ldr	r0, [pc, #184]	@ (34014054 <HAL_LTDC_Init+0x1a0>)
34013f9c:	f00b fb30 	bl	3401f600 <assert_failed>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
34013fa0:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
34013fa4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
34013fa8:	b923      	cbnz	r3, 34013fb4 <HAL_LTDC_Init+0x100>
    HAL_LTDC_MspInit(hltdc);
34013faa:	4620      	mov	r0, r4
    hltdc->Lock = HAL_UNLOCKED;
34013fac:	f884 20a0 	strb.w	r2, [r4, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
34013fb0:	f7ff ff7e 	bl	34013eb0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
34013fb4:	2302      	movs	r3, #2
34013fb6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
34013fba:	6823      	ldr	r3, [r4, #0]
34013fbc:	699a      	ldr	r2, [r3, #24]
34013fbe:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
34013fc2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34013fc4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
34013fc8:	4302      	orrs	r2, r0
34013fca:	68e0      	ldr	r0, [r4, #12]
34013fcc:	6999      	ldr	r1, [r3, #24]
34013fce:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
34013fd0:	6920      	ldr	r0, [r4, #16]
34013fd2:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34013fd4:	430a      	orrs	r2, r1
34013fd6:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
34013fd8:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
34013fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34013fe0:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
34013fe2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
34013fe6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34013fea:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
34013fec:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
34013ff0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34013ff4:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
34013ff6:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
34013ffa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34013ffe:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34014000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
34014002:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34014006:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
3401400a:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
3401400e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
34014010:	6add      	ldr	r5, [r3, #44]	@ 0x2c
34014012:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
34014016:	432a      	orrs	r2, r5
34014018:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
3401401c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34014020:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_1)->RCR, LTDC_LxRCR_GRMSK);
34014022:	2204      	movs	r2, #4
34014024:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_2)->RCR, LTDC_LxRCR_GRMSK);
34014028:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
3401402c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
3401402e:	2000      	movs	r0, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
34014030:	f042 0244 	orr.w	r2, r2, #68	@ 0x44
34014034:	665a      	str	r2, [r3, #100]	@ 0x64
  __HAL_LTDC_ENABLE(hltdc);
34014036:	699a      	ldr	r2, [r3, #24]
34014038:	f042 0201 	orr.w	r2, r2, #1
3401403c:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
3401403e:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
34014040:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
34014044:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
34014048:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
3401404a:	2001      	movs	r0, #1
3401404c:	e7fc      	b.n	34014048 <HAL_LTDC_Init+0x194>
3401404e:	bf00      	nop
34014050:	58001000 	.word	0x58001000
34014054:	3402f563 	.word	0x3402f563

34014058 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
34014058:	2a01      	cmp	r2, #1
{
3401405a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401405c:	4606      	mov	r6, r0
3401405e:	460c      	mov	r4, r1
34014060:	4617      	mov	r7, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
34014062:	d904      	bls.n	3401406e <HAL_LTDC_ConfigLayer+0x16>
34014064:	f240 4104 	movw	r1, #1028	@ 0x404
34014068:	484d      	ldr	r0, [pc, #308]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
3401406a:	f00b fac9 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
3401406e:	6823      	ldr	r3, [r4, #0]
34014070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014074:	d304      	bcc.n	34014080 <HAL_LTDC_ConfigLayer+0x28>
34014076:	f240 4105 	movw	r1, #1029	@ 0x405
3401407a:	4849      	ldr	r0, [pc, #292]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
3401407c:	f00b fac0 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
34014080:	6863      	ldr	r3, [r4, #4]
34014082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014086:	d304      	bcc.n	34014092 <HAL_LTDC_ConfigLayer+0x3a>
34014088:	f240 4106 	movw	r1, #1030	@ 0x406
3401408c:	4844      	ldr	r0, [pc, #272]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
3401408e:	f00b fab7 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
34014092:	68a3      	ldr	r3, [r4, #8]
34014094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014098:	d304      	bcc.n	340140a4 <HAL_LTDC_ConfigLayer+0x4c>
3401409a:	f240 4107 	movw	r1, #1031	@ 0x407
3401409e:	4840      	ldr	r0, [pc, #256]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
340140a0:	f00b faae 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
340140a4:	68e3      	ldr	r3, [r4, #12]
340140a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340140aa:	d304      	bcc.n	340140b6 <HAL_LTDC_ConfigLayer+0x5e>
340140ac:	f44f 6181 	mov.w	r1, #1032	@ 0x408
340140b0:	483b      	ldr	r0, [pc, #236]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
340140b2:	f00b faa5 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
340140b6:	6923      	ldr	r3, [r4, #16]
340140b8:	2b0b      	cmp	r3, #11
340140ba:	d904      	bls.n	340140c6 <HAL_LTDC_ConfigLayer+0x6e>
340140bc:	f240 4109 	movw	r1, #1033	@ 0x409
340140c0:	4837      	ldr	r0, [pc, #220]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
340140c2:	f00b fa9d 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
340140c6:	6963      	ldr	r3, [r4, #20]
340140c8:	2bff      	cmp	r3, #255	@ 0xff
340140ca:	d904      	bls.n	340140d6 <HAL_LTDC_ConfigLayer+0x7e>
340140cc:	f240 410a 	movw	r1, #1034	@ 0x40a
340140d0:	4833      	ldr	r0, [pc, #204]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
340140d2:	f00b fa95 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
340140d6:	69a3      	ldr	r3, [r4, #24]
340140d8:	2bff      	cmp	r3, #255	@ 0xff
340140da:	d904      	bls.n	340140e6 <HAL_LTDC_ConfigLayer+0x8e>
340140dc:	f240 410b 	movw	r1, #1035	@ 0x40b
340140e0:	482f      	ldr	r0, [pc, #188]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
340140e2:	f00b fa8d 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
340140e6:	69e3      	ldr	r3, [r4, #28]
340140e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
340140ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
340140f0:	d004      	beq.n	340140fc <HAL_LTDC_ConfigLayer+0xa4>
340140f2:	f240 410c 	movw	r1, #1036	@ 0x40c
340140f6:	482a      	ldr	r0, [pc, #168]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
340140f8:	f00b fa82 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
340140fc:	6a23      	ldr	r3, [r4, #32]
340140fe:	f023 0302 	bic.w	r3, r3, #2
34014102:	2b05      	cmp	r3, #5
34014104:	d004      	beq.n	34014110 <HAL_LTDC_ConfigLayer+0xb8>
34014106:	f240 410d 	movw	r1, #1037	@ 0x40d
3401410a:	4825      	ldr	r0, [pc, #148]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
3401410c:	f00b fa78 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
34014110:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34014112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34014116:	d304      	bcc.n	34014122 <HAL_LTDC_ConfigLayer+0xca>
34014118:	f240 410e 	movw	r1, #1038	@ 0x40e
3401411c:	4820      	ldr	r0, [pc, #128]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
3401411e:	f00b fa6f 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
34014122:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34014124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014128:	d304      	bcc.n	34014134 <HAL_LTDC_ConfigLayer+0xdc>
3401412a:	f240 410f 	movw	r1, #1039	@ 0x40f
3401412e:	481c      	ldr	r0, [pc, #112]	@ (340141a0 <HAL_LTDC_ConfigLayer+0x148>)
34014130:	f00b fa66 	bl	3401f600 <assert_failed>
  __HAL_LOCK(hltdc);
34014134:	f896 30a0 	ldrb.w	r3, [r6, #160]	@ 0xa0
34014138:	2002      	movs	r0, #2
3401413a:	2b01      	cmp	r3, #1
3401413c:	d02d      	beq.n	3401419a <HAL_LTDC_ConfigLayer+0x142>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
3401413e:	2534      	movs	r5, #52	@ 0x34
34014140:	fb05 6507 	mla	r5, r5, r7, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
34014144:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
34014148:	3538      	adds	r5, #56	@ 0x38
3401414a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3401414c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
3401414e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34014150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34014152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34014154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34014156:	6823      	ldr	r3, [r4, #0]
  LTDC_SetPredefFormat(hltdc, LayerIdx);
34014158:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
3401415a:	602b      	str	r3, [r5, #0]
  LTDC_SetPredefFormat(hltdc, LayerIdx);
3401415c:	4630      	mov	r0, r6
3401415e:	f7ff fd83 	bl	34013c68 <LTDC_SetPredefFormat>
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
34014162:	4639      	mov	r1, r7
34014164:	4630      	mov	r0, r6
34014166:	f7ff fd55 	bl	34013c14 <LTDC_SetCompositionConfig>
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
3401416a:	2200      	movs	r2, #0
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
3401416c:	6834      	ldr	r4, [r6, #0]
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
3401416e:	4630      	mov	r0, r6
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
34014170:	f504 7480 	add.w	r4, r4, #256	@ 0x100
34014174:	eb04 2407 	add.w	r4, r4, r7, lsl #8
34014178:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
3401417a:	4611      	mov	r1, r2
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
3401417c:	f023 0308 	bic.w	r3, r3, #8
34014180:	6323      	str	r3, [r4, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
34014182:	2303      	movs	r3, #3
34014184:	9700      	str	r7, [sp, #0]
34014186:	f7ff fc17 	bl	340139b8 <LTDC_SetConfig>
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
3401418a:	2305      	movs	r3, #5
  __HAL_UNLOCK(hltdc);
3401418c:	2000      	movs	r0, #0
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
3401418e:	60a3      	str	r3, [r4, #8]
  hltdc->State  = HAL_LTDC_STATE_READY;
34014190:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
34014192:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
  hltdc->State  = HAL_LTDC_STATE_READY;
34014196:	f886 30a1 	strb.w	r3, [r6, #161]	@ 0xa1
}
3401419a:	b003      	add	sp, #12
3401419c:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401419e:	bf00      	nop
340141a0:	3402f563 	.word	0x3402f563

340141a4 <HAL_LTDC_ReloadLayer>:
  assert_param(IS_LTDC_RELOAD(ReloadType));
340141a4:	1e4b      	subs	r3, r1, #1
340141a6:	2b01      	cmp	r3, #1
{
340141a8:	b570      	push	{r4, r5, r6, lr}
340141aa:	4604      	mov	r4, r0
340141ac:	460d      	mov	r5, r1
340141ae:	4616      	mov	r6, r2
  assert_param(IS_LTDC_RELOAD(ReloadType));
340141b0:	d904      	bls.n	340141bc <HAL_LTDC_ReloadLayer+0x18>
340141b2:	f640 0119 	movw	r1, #2073	@ 0x819
340141b6:	480e      	ldr	r0, [pc, #56]	@ (340141f0 <HAL_LTDC_ReloadLayer+0x4c>)
340141b8:	f00b fa22 	bl	3401f600 <assert_failed>
  __HAL_LOCK(hltdc);
340141bc:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
340141c0:	2002      	movs	r0, #2
340141c2:	2b01      	cmp	r3, #1
340141c4:	d012      	beq.n	340141ec <HAL_LTDC_ReloadLayer+0x48>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
340141c6:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
340141c8:	f884 00a1 	strb.w	r0, [r4, #161]	@ 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
340141cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, ReloadType | LTDC_LxRCR_GRMSK);
340141ce:	3601      	adds	r6, #1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
340141d0:	f042 0208 	orr.w	r2, r2, #8
340141d4:	665a      	str	r2, [r3, #100]	@ 0x64
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, ReloadType | LTDC_LxRCR_GRMSK);
340141d6:	f045 0504 	orr.w	r5, r5, #4
340141da:	eb03 2306 	add.w	r3, r3, r6, lsl #8
340141de:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hltdc);
340141e0:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
340141e2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
340141e4:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
340141e8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
340141ec:	bd70      	pop	{r4, r5, r6, pc}
340141ee:	bf00      	nop
340141f0:	3402f563 	.word	0x3402f563

340141f4 <HAL_LTDC_SetAddress_NoReload>:
  uint32_t aux0Addr = 0U;
340141f4:	2300      	movs	r3, #0
{
340141f6:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LTDC_LAYER(LayerIdx));
340141f8:	2a01      	cmp	r2, #1
{
340141fa:	b086      	sub	sp, #24
340141fc:	4604      	mov	r4, r0
340141fe:	460e      	mov	r6, r1
34014200:	4615      	mov	r5, r2
  uint32_t aux1Addr = 0U;
34014202:	e9cd 3303 	strd	r3, r3, [sp, #12]
  uint32_t mirror = 0U;
34014206:	9305      	str	r3, [sp, #20]
  assert_param(IS_LTDC_LAYER(LayerIdx));
34014208:	d904      	bls.n	34014214 <HAL_LTDC_SetAddress_NoReload+0x20>
3401420a:	f640 1165 	movw	r1, #2405	@ 0x965
3401420e:	4812      	ldr	r0, [pc, #72]	@ (34014258 <HAL_LTDC_SetAddress_NoReload+0x64>)
34014210:	f00b f9f6 	bl	3401f600 <assert_failed>
  __HAL_LOCK(hltdc);
34014214:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
34014218:	2002      	movs	r0, #2
3401421a:	2b01      	cmp	r3, #1
3401421c:	d019      	beq.n	34014252 <HAL_LTDC_SetAddress_NoReload+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
3401421e:	f884 00a1 	strb.w	r0, [r4, #161]	@ 0xa1
  LTDC_RetrieveUserConfig(hltdc, &mirror, &aux0Addr, &aux1Addr, LayerIdx);
34014222:	ab04      	add	r3, sp, #16
34014224:	4620      	mov	r0, r4
34014226:	aa03      	add	r2, sp, #12
34014228:	a905      	add	r1, sp, #20
3401422a:	9500      	str	r5, [sp, #0]
3401422c:	f7ff fd5e 	bl	34013cec <LTDC_RetrieveUserConfig.constprop.0>
  hltdc->LayerCfg[LayerIdx].FBStartAdress = Address;
34014230:	2334      	movs	r3, #52	@ 0x34
  LTDC_SetConfig(hltdc, 0, 0, mirror, LayerIdx);
34014232:	2200      	movs	r2, #0
  hltdc->LayerCfg[LayerIdx].FBStartAdress = Address;
34014234:	fb03 4305 	mla	r3, r3, r5, r4
  LTDC_SetConfig(hltdc, 0, 0, mirror, LayerIdx);
34014238:	4620      	mov	r0, r4
  hltdc->LayerCfg[LayerIdx].FBStartAdress = Address;
3401423a:	65de      	str	r6, [r3, #92]	@ 0x5c
  LTDC_SetConfig(hltdc, 0, 0, mirror, LayerIdx);
3401423c:	4611      	mov	r1, r2
3401423e:	9b05      	ldr	r3, [sp, #20]
34014240:	9500      	str	r5, [sp, #0]
34014242:	f7ff fbb9 	bl	340139b8 <LTDC_SetConfig>
  hltdc->State = HAL_LTDC_STATE_READY;
34014246:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
34014248:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
3401424a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
3401424e:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
34014252:	b006      	add	sp, #24
34014254:	bd70      	pop	{r4, r5, r6, pc}
34014256:	bf00      	nop
34014258:	3402f563 	.word	0x3402f563

3401425c <HAL_LTDC_ConfigLayerFlexARGB>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
3401425c:	2a01      	cmp	r2, #1
{
3401425e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34014260:	4606      	mov	r6, r0
34014262:	460c      	mov	r4, r1
34014264:	4617      	mov	r7, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
34014266:	d904      	bls.n	34014272 <HAL_LTDC_ConfigLayerFlexARGB+0x16>
34014268:	f640 31a1 	movw	r1, #2977	@ 0xba1
3401426c:	4847      	ldr	r0, [pc, #284]	@ (3401438c <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401426e:	f00b f9c7 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_WIDTH(pLayerFlexARGB->FlexARGB.RedWidth));
34014272:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34014274:	2b0f      	cmp	r3, #15
34014276:	d904      	bls.n	34014282 <HAL_LTDC_ConfigLayerFlexARGB+0x26>
34014278:	f640 31a2 	movw	r1, #2978	@ 0xba2
3401427c:	4843      	ldr	r0, [pc, #268]	@ (3401438c <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401427e:	f00b f9bf 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_WIDTH(pLayerFlexARGB->FlexARGB.GreenWidth));
34014282:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34014284:	2b0f      	cmp	r3, #15
34014286:	d904      	bls.n	34014292 <HAL_LTDC_ConfigLayerFlexARGB+0x36>
34014288:	f640 31a3 	movw	r1, #2979	@ 0xba3
3401428c:	483f      	ldr	r0, [pc, #252]	@ (3401438c <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401428e:	f00b f9b7 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_WIDTH(pLayerFlexARGB->FlexARGB.BlueWidth));
34014292:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34014294:	2b0f      	cmp	r3, #15
34014296:	d904      	bls.n	340142a2 <HAL_LTDC_ConfigLayerFlexARGB+0x46>
34014298:	f640 31a4 	movw	r1, #2980	@ 0xba4
3401429c:	483b      	ldr	r0, [pc, #236]	@ (3401438c <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401429e:	f00b f9af 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_POSITION(pLayerFlexARGB->FlexARGB.RedPos));
340142a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
340142a4:	2b1f      	cmp	r3, #31
340142a6:	d904      	bls.n	340142b2 <HAL_LTDC_ConfigLayerFlexARGB+0x56>
340142a8:	f640 31a5 	movw	r1, #2981	@ 0xba5
340142ac:	4837      	ldr	r0, [pc, #220]	@ (3401438c <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
340142ae:	f00b f9a7 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_POSITION(pLayerFlexARGB->FlexARGB.GreenPos));
340142b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340142b4:	2b1f      	cmp	r3, #31
340142b6:	d904      	bls.n	340142c2 <HAL_LTDC_ConfigLayerFlexARGB+0x66>
340142b8:	f640 31a6 	movw	r1, #2982	@ 0xba6
340142bc:	4833      	ldr	r0, [pc, #204]	@ (3401438c <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
340142be:	f00b f99f 	bl	3401f600 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_POSITION(pLayerFlexARGB->FlexARGB.BluePos));
340142c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340142c4:	2b1f      	cmp	r3, #31
340142c6:	d904      	bls.n	340142d2 <HAL_LTDC_ConfigLayerFlexARGB+0x76>
340142c8:	f640 31a7 	movw	r1, #2983	@ 0xba7
340142cc:	482f      	ldr	r0, [pc, #188]	@ (3401438c <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
340142ce:	f00b f997 	bl	3401f600 <assert_failed>
  __HAL_LOCK(hltdc);
340142d2:	f896 30a0 	ldrb.w	r3, [r6, #160]	@ 0xa0
340142d6:	2002      	movs	r0, #2
340142d8:	2b01      	cmp	r3, #1
340142da:	d054      	beq.n	34014386 <HAL_LTDC_ConfigLayerFlexARGB+0x12a>
  hltdc->LayerCfg[LayerIdx].WindowX0 = pLayerFlexARGB->Layer.WindowX0;
340142dc:	2334      	movs	r3, #52	@ 0x34
340142de:	fb03 6307 	mla	r3, r3, r7, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
340142e2:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx].WindowX0 = pLayerFlexARGB->Layer.WindowX0;
340142e6:	6822      	ldr	r2, [r4, #0]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
340142e8:	6835      	ldr	r5, [r6, #0]
  hltdc->LayerCfg[LayerIdx].WindowX0 = pLayerFlexARGB->Layer.WindowX0;
340142ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hltdc->LayerCfg[LayerIdx].WindowX1 = pLayerFlexARGB->Layer.WindowX1;
340142ec:	6862      	ldr	r2, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
340142ee:	f505 7580 	add.w	r5, r5, #256	@ 0x100
  hltdc->LayerCfg[LayerIdx].WindowX1 = pLayerFlexARGB->Layer.WindowX1;
340142f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hltdc->LayerCfg[LayerIdx].WindowY0 = pLayerFlexARGB->Layer.WindowY0;
340142f4:	68a2      	ldr	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
340142f6:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  hltdc->LayerCfg[LayerIdx].WindowY0 = pLayerFlexARGB->Layer.WindowY0;
340142fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hltdc->LayerCfg[LayerIdx].WindowY1 = pLayerFlexARGB->Layer.WindowY1;
340142fc:	68e2      	ldr	r2, [r4, #12]
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
340142fe:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx].WindowY1 = pLayerFlexARGB->Layer.WindowY1;
34014300:	645a      	str	r2, [r3, #68]	@ 0x44
  hltdc->LayerCfg[LayerIdx].PixelFormat = LTDC_PIXEL_FORMAT_FLEX_ARGB;
34014302:	220c      	movs	r2, #12
34014304:	649a      	str	r2, [r3, #72]	@ 0x48
  hltdc->LayerCfg[LayerIdx].Alpha = pLayerFlexARGB->Layer.Alpha;
34014306:	6922      	ldr	r2, [r4, #16]
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
34014308:	4630      	mov	r0, r6
  hltdc->LayerCfg[LayerIdx].Alpha = pLayerFlexARGB->Layer.Alpha;
3401430a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hltdc->LayerCfg[LayerIdx].Alpha0 = pLayerFlexARGB->Layer.Alpha0;
3401430c:	6962      	ldr	r2, [r4, #20]
3401430e:	651a      	str	r2, [r3, #80]	@ 0x50
  hltdc->LayerCfg[LayerIdx].BlendingFactor1 = pLayerFlexARGB->Layer.BlendingFactor1;
34014310:	69a2      	ldr	r2, [r4, #24]
34014312:	655a      	str	r2, [r3, #84]	@ 0x54
  hltdc->LayerCfg[LayerIdx].BlendingFactor2 = pLayerFlexARGB->Layer.BlendingFactor2;
34014314:	69e2      	ldr	r2, [r4, #28]
34014316:	659a      	str	r2, [r3, #88]	@ 0x58
  hltdc->LayerCfg[LayerIdx].FBStartAdress = pLayerFlexARGB->ARGBAddress;
34014318:	6d22      	ldr	r2, [r4, #80]	@ 0x50
3401431a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hltdc->LayerCfg[LayerIdx].ImageWidth = pLayerFlexARGB->Layer.ImageWidth;
3401431c:	6a22      	ldr	r2, [r4, #32]
3401431e:	661a      	str	r2, [r3, #96]	@ 0x60
  hltdc->LayerCfg[LayerIdx].ImageHeight = pLayerFlexARGB->Layer.ImageHeight;
34014320:	6a62      	ldr	r2, [r4, #36]	@ 0x24
34014322:	665a      	str	r2, [r3, #100]	@ 0x64
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
34014324:	2307      	movs	r3, #7
34014326:	61eb      	str	r3, [r5, #28]
                                       (pLayerFlexARGB->FlexARGB.RedPos << LTDC_LxFPF0R_RPOS_Pos) |
34014328:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (pLayerFlexARGB->FlexARGB.RedWidth << LTDC_LxFPF0R_RLEN_Pos) |
3401432a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
                                       (pLayerFlexARGB->FlexARGB.RedPos << LTDC_LxFPF0R_RPOS_Pos) |
3401432c:	025b      	lsls	r3, r3, #9
  LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (pLayerFlexARGB->FlexARGB.RedWidth << LTDC_LxFPF0R_RLEN_Pos) |
3401432e:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                                       (pLayerFlexARGB->FlexARGB.AlphaWidth << LTDC_LxFPF0R_ALEN_Pos) |
34014332:	6b22      	ldr	r2, [r4, #48]	@ 0x30
34014334:	4313      	orrs	r3, r2
34014336:	6c22      	ldr	r2, [r4, #64]	@ 0x40
34014338:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (pLayerFlexARGB->FlexARGB.RedWidth << LTDC_LxFPF0R_RLEN_Pos) |
3401433c:	676b      	str	r3, [r5, #116]	@ 0x74
  LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (pLayerFlexARGB->FlexARGB.PixelSize << LTDC_LxFPF1R_PSIZE_Pos) |
3401433e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                                       (pLayerFlexARGB->FlexARGB.BlueWidth << LTDC_LxFPF1R_BLEN_Pos) |
34014340:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34014342:	039b      	lsls	r3, r3, #14
  LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (pLayerFlexARGB->FlexARGB.PixelSize << LTDC_LxFPF1R_PSIZE_Pos) |
34014344:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
                                       (pLayerFlexARGB->FlexARGB.GreenWidth << LTDC_LxFPF1R_GLEN_Pos) |
34014348:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
3401434a:	4313      	orrs	r3, r2
                                       (pLayerFlexARGB->FlexARGB.BluePos << LTDC_LxFPF1R_BPOS_Pos) |
3401434c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
                                       (pLayerFlexARGB->FlexARGB.GreenWidth << LTDC_LxFPF1R_GLEN_Pos) |
3401434e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
34014352:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34014354:	2405      	movs	r4, #5
                                       (pLayerFlexARGB->FlexARGB.GreenWidth << LTDC_LxFPF1R_GLEN_Pos) |
34014356:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (pLayerFlexARGB->FlexARGB.PixelSize << LTDC_LxFPF1R_PSIZE_Pos) |
3401435a:	67ab      	str	r3, [r5, #120]	@ 0x78
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
3401435c:	f7ff fc5a 	bl	34013c14 <LTDC_SetCompositionConfig>
  LTDC_SetConfig(hltdc, 0, 0, LTDC_MIRROR_NONE, LayerIdx);
34014360:	2200      	movs	r2, #0
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34014362:	60ac      	str	r4, [r5, #8]
  MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN, 0U);
34014364:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0, 0, LTDC_MIRROR_NONE, LayerIdx);
34014366:	4630      	mov	r0, r6
  MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN, 0U);
34014368:	f023 0308 	bic.w	r3, r3, #8
3401436c:	632b      	str	r3, [r5, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0, 0, LTDC_MIRROR_NONE, LayerIdx);
3401436e:	4611      	mov	r1, r2
34014370:	2303      	movs	r3, #3
34014372:	9700      	str	r7, [sp, #0]
34014374:	f7ff fb20 	bl	340139b8 <LTDC_SetConfig>
  hltdc->State = HAL_LTDC_STATE_READY;
34014378:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
3401437a:	2000      	movs	r0, #0
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
3401437c:	60ac      	str	r4, [r5, #8]
  hltdc->State = HAL_LTDC_STATE_READY;
3401437e:	f886 30a1 	strb.w	r3, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
34014382:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
34014386:	b003      	add	sp, #12
34014388:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401438a:	bf00      	nop
3401438c:	3402f563 	.word	0x3402f563

34014390 <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34014390:	2804      	cmp	r0, #4
{
34014392:	b538      	push	{r3, r4, r5, lr}
34014394:	4605      	mov	r5, r0
34014396:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
34014398:	d912      	bls.n	340143c0 <HAL_PWREx_ConfigVddIORange+0x30>
3401439a:	f240 316a 	movw	r1, #874	@ 0x36a
3401439e:	481d      	ldr	r0, [pc, #116]	@ (34014414 <HAL_PWREx_ConfigVddIORange+0x84>)
340143a0:	f00b f92e 	bl	3401f600 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
340143a4:	2c01      	cmp	r4, #1
340143a6:	d915      	bls.n	340143d4 <HAL_PWREx_ConfigVddIORange+0x44>
340143a8:	f240 316b 	movw	r1, #875	@ 0x36b
340143ac:	4819      	ldr	r0, [pc, #100]	@ (34014414 <HAL_PWREx_ConfigVddIORange+0x84>)
340143ae:	f00b f927 	bl	3401f600 <assert_failed>

  switch (VddIOPort)
340143b2:	2d04      	cmp	r5, #4
340143b4:	d80e      	bhi.n	340143d4 <HAL_PWREx_ConfigVddIORange+0x44>
340143b6:	e8df f005 	tbb	[pc, r5]
340143ba:	0e06      	.short	0x0e06
340143bc:	1c15      	.short	0x1c15
340143be:	24          	.byte	0x24
340143bf:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
340143c0:	2901      	cmp	r1, #1
340143c2:	d9f6      	bls.n	340143b2 <HAL_PWREx_ConfigVddIORange+0x22>
340143c4:	e7f0      	b.n	340143a8 <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
340143c6:	4a14      	ldr	r2, [pc, #80]	@ (34014418 <HAL_PWREx_ConfigVddIORange+0x88>)
340143c8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
340143ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
340143ce:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
340143d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
340143d4:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
340143d6:	4a10      	ldr	r2, [pc, #64]	@ (34014418 <HAL_PWREx_ConfigVddIORange+0x88>)
340143d8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
340143da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
340143de:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
340143e2:	e7f6      	b.n	340143d2 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
340143e4:	4a0c      	ldr	r2, [pc, #48]	@ (34014418 <HAL_PWREx_ConfigVddIORange+0x88>)
340143e6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
340143e8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
340143ec:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
340143f0:	e7ef      	b.n	340143d2 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
340143f2:	4a09      	ldr	r2, [pc, #36]	@ (34014418 <HAL_PWREx_ConfigVddIORange+0x88>)
340143f4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
340143f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
340143fa:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
340143fe:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
34014400:	e7e8      	b.n	340143d4 <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34014402:	4a05      	ldr	r2, [pc, #20]	@ (34014418 <HAL_PWREx_ConfigVddIORange+0x88>)
34014404:	6b93      	ldr	r3, [r2, #56]	@ 0x38
34014406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3401440a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
3401440e:	6393      	str	r3, [r2, #56]	@ 0x38
}
34014410:	e7e0      	b.n	340143d4 <HAL_PWREx_ConfigVddIORange+0x44>
34014412:	bf00      	nop
34014414:	3402f5d8 	.word	0x3402f5d8
34014418:	56024800 	.word	0x56024800

3401441c <HAL_PWREx_EnableVddIO2>:
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
3401441c:	4a02      	ldr	r2, [pc, #8]	@ (34014428 <HAL_PWREx_EnableVddIO2+0xc>)
3401441e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34014420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34014424:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34014426:	4770      	bx	lr
34014428:	56024800 	.word	0x56024800

3401442c <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
3401442c:	4a02      	ldr	r2, [pc, #8]	@ (34014438 <HAL_PWREx_EnableVddIO3+0xc>)
3401442e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34014430:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34014434:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34014436:	4770      	bx	lr
34014438:	56024800 	.word	0x56024800

3401443c <HAL_PWREx_EnableVddIO4>:
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
3401443c:	4a02      	ldr	r2, [pc, #8]	@ (34014448 <HAL_PWREx_EnableVddIO4+0xc>)
3401443e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
34014440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34014444:	6353      	str	r3, [r2, #52]	@ 0x34
}
34014446:	4770      	bx	lr
34014448:	56024800 	.word	0x56024800

3401444c <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
3401444c:	6803      	ldr	r3, [r0, #0]
3401444e:	4a1c      	ldr	r2, [pc, #112]	@ (340144c0 <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
34014450:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34014452:	4293      	cmp	r3, r2
{
34014454:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34014456:	d02c      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34014458:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401445c:	4293      	cmp	r3, r2
3401445e:	d028      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34014460:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34014464:	3280      	adds	r2, #128	@ 0x80
34014466:	4293      	cmp	r3, r2
34014468:	d023      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
3401446a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401446e:	4293      	cmp	r3, r2
34014470:	d01f      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34014472:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34014476:	3280      	adds	r2, #128	@ 0x80
34014478:	4293      	cmp	r3, r2
3401447a:	d01a      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
3401447c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34014480:	4293      	cmp	r3, r2
34014482:	d016      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34014484:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34014488:	3280      	adds	r2, #128	@ 0x80
3401448a:	4293      	cmp	r3, r2
3401448c:	d011      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
3401448e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34014492:	4293      	cmp	r3, r2
34014494:	d00d      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
34014496:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
3401449a:	3280      	adds	r2, #128	@ 0x80
3401449c:	4293      	cmp	r3, r2
3401449e:	d008      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
340144a0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340144a4:	4293      	cmp	r3, r2
340144a6:	d004      	beq.n	340144b2 <HAL_RAMCFG_EnableAXISRAM+0x66>
340144a8:	f240 4107 	movw	r1, #1031	@ 0x407
340144ac:	4805      	ldr	r0, [pc, #20]	@ (340144c4 <HAL_RAMCFG_EnableAXISRAM+0x78>)
340144ae:	f00b f8a7 	bl	3401f600 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
340144b2:	6822      	ldr	r2, [r4, #0]
340144b4:	6813      	ldr	r3, [r2, #0]
340144b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
340144ba:	6013      	str	r3, [r2, #0]
}
340144bc:	bd10      	pop	{r4, pc}
340144be:	bf00      	nop
340144c0:	52023080 	.word	0x52023080
340144c4:	3402f64f 	.word	0x3402f64f

340144c8 <LL_RCC_HSI_IsReady>:
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
340144c8:	4b02      	ldr	r3, [pc, #8]	@ (340144d4 <LL_RCC_HSI_IsReady+0xc>)
340144ca:	6858      	ldr	r0, [r3, #4]
}
340144cc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
340144d0:	4770      	bx	lr
340144d2:	bf00      	nop
340144d4:	56028000 	.word	0x56028000

340144d8 <LL_RCC_MSI_IsReady>:
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
340144d8:	4b02      	ldr	r3, [pc, #8]	@ (340144e4 <LL_RCC_MSI_IsReady+0xc>)
340144da:	6858      	ldr	r0, [r3, #4]
}
340144dc:	f3c0 0080 	ubfx	r0, r0, #2, #1
340144e0:	4770      	bx	lr
340144e2:	bf00      	nop
340144e4:	56028000 	.word	0x56028000

340144e8 <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
340144e8:	4b02      	ldr	r3, [pc, #8]	@ (340144f4 <LL_RCC_PLL1_IsReady+0xc>)
340144ea:	6858      	ldr	r0, [r3, #4]
}
340144ec:	f3c0 2000 	ubfx	r0, r0, #8, #1
340144f0:	4770      	bx	lr
340144f2:	bf00      	nop
340144f4:	56028000 	.word	0x56028000

340144f8 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
340144f8:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
340144fa:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340144fc:	4d1b      	ldr	r5, [pc, #108]	@ (3401456c <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
340144fe:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34014500:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34014502:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34014504:	021b      	lsls	r3, r3, #8
34014506:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
3401450a:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3401450c:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34014510:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34014514:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34014516:	429a      	cmp	r2, r3
34014518:	d126      	bne.n	34014568 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3401451a:	4b15      	ldr	r3, [pc, #84]	@ (34014570 <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
3401451c:	68ca      	ldr	r2, [r1, #12]
3401451e:	58e3      	ldr	r3, [r4, r3]
34014520:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34014524:	4293      	cmp	r3, r2
34014526:	d11f      	bne.n	34014568 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34014528:	4b12      	ldr	r3, [pc, #72]	@ (34014574 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3401452a:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
3401452c:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34014530:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34014532:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34014536:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3401453a:	429a      	cmp	r2, r3
3401453c:	d114      	bne.n	34014568 <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3401453e:	4b0e      	ldr	r3, [pc, #56]	@ (34014578 <RCC_PLL_IsNewConfig+0x80>)
34014540:	685a      	ldr	r2, [r3, #4]
34014542:	f44f 7380 	mov.w	r3, #256	@ 0x100
34014546:	fa03 f000 	lsl.w	r0, r3, r0
3401454a:	4390      	bics	r0, r2
3401454c:	d00a      	beq.n	34014564 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
3401454e:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
34014550:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
34014554:	bf0c      	ite	eq
34014556:	2301      	moveq	r3, #1
34014558:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3401455a:	6808      	ldr	r0, [r1, #0]
3401455c:	1ac0      	subs	r0, r0, r3
3401455e:	bf18      	it	ne
34014560:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
34014562:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
34014564:	2302      	movs	r3, #2
34014566:	e7f8      	b.n	3401455a <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
34014568:	2001      	movs	r0, #1
  return ret;
3401456a:	e7fa      	b.n	34014562 <RCC_PLL_IsNewConfig+0x6a>
3401456c:	56028080 	.word	0x56028080
34014570:	56028084 	.word	0x56028084
34014574:	56028088 	.word	0x56028088
34014578:	56028000 	.word	0x56028000

3401457c <RCC_PLL_Enable>:
{
3401457c:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3401457e:	f44f 7480 	mov.w	r4, #256	@ 0x100
34014582:	4e09      	ldr	r6, [pc, #36]	@ (340145a8 <RCC_PLL_Enable+0x2c>)
34014584:	4084      	lsls	r4, r0
34014586:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
3401458a:	f00a fca7 	bl	3401eedc <HAL_GetTick>
3401458e:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34014590:	6873      	ldr	r3, [r6, #4]
34014592:	421c      	tst	r4, r3
34014594:	d001      	beq.n	3401459a <RCC_PLL_Enable+0x1e>
  return ret;
34014596:	2000      	movs	r0, #0
}
34014598:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3401459a:	f00a fc9f 	bl	3401eedc <HAL_GetTick>
3401459e:	1b40      	subs	r0, r0, r5
340145a0:	2801      	cmp	r0, #1
340145a2:	d9f5      	bls.n	34014590 <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
340145a4:	2003      	movs	r0, #3
340145a6:	e7f7      	b.n	34014598 <RCC_PLL_Enable+0x1c>
340145a8:	56028000 	.word	0x56028000

340145ac <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
340145ac:	680b      	ldr	r3, [r1, #0]
{
340145ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
340145b2:	2b02      	cmp	r3, #2
{
340145b4:	4681      	mov	r9, r0
340145b6:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340145b8:	4f83      	ldr	r7, [pc, #524]	@ (340147c8 <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
340145ba:	4e84      	ldr	r6, [pc, #528]	@ (340147cc <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340145bc:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
340145c0:	f040 8099 	bne.w	340146f6 <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
340145c4:	684b      	ldr	r3, [r1, #4]
340145c6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340145ca:	d004      	beq.n	340145d6 <RCC_PLL_Config+0x2a>
340145cc:	f640 0144 	movw	r1, #2116	@ 0x844
340145d0:	487f      	ldr	r0, [pc, #508]	@ (340147d0 <RCC_PLL_Config+0x224>)
340145d2:	f00b f815 	bl	3401f600 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
340145d6:	68eb      	ldr	r3, [r5, #12]
340145d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340145dc:	d304      	bcc.n	340145e8 <RCC_PLL_Config+0x3c>
340145de:	f640 0145 	movw	r1, #2117	@ 0x845
340145e2:	487b      	ldr	r0, [pc, #492]	@ (340147d0 <RCC_PLL_Config+0x224>)
340145e4:	f00b f80c 	bl	3401f600 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
340145e8:	68ab      	ldr	r3, [r5, #8]
340145ea:	3b01      	subs	r3, #1
340145ec:	2b3e      	cmp	r3, #62	@ 0x3e
340145ee:	d904      	bls.n	340145fa <RCC_PLL_Config+0x4e>
340145f0:	f640 0146 	movw	r1, #2118	@ 0x846
340145f4:	4876      	ldr	r0, [pc, #472]	@ (340147d0 <RCC_PLL_Config+0x224>)
340145f6:	f00b f803 	bl	3401f600 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
340145fa:	f640 12ba 	movw	r2, #2490	@ 0x9ba
340145fe:	692b      	ldr	r3, [r5, #16]
34014600:	3b0a      	subs	r3, #10
34014602:	4293      	cmp	r3, r2
34014604:	d904      	bls.n	34014610 <RCC_PLL_Config+0x64>
34014606:	f640 0147 	movw	r1, #2119	@ 0x847
3401460a:	4871      	ldr	r0, [pc, #452]	@ (340147d0 <RCC_PLL_Config+0x224>)
3401460c:	f00a fff8 	bl	3401f600 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34014610:	696b      	ldr	r3, [r5, #20]
34014612:	3b01      	subs	r3, #1
34014614:	2b06      	cmp	r3, #6
34014616:	d904      	bls.n	34014622 <RCC_PLL_Config+0x76>
34014618:	f640 0148 	movw	r1, #2120	@ 0x848
3401461c:	486c      	ldr	r0, [pc, #432]	@ (340147d0 <RCC_PLL_Config+0x224>)
3401461e:	f00a ffef 	bl	3401f600 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34014622:	69ab      	ldr	r3, [r5, #24]
34014624:	3b01      	subs	r3, #1
34014626:	2b06      	cmp	r3, #6
34014628:	d904      	bls.n	34014634 <RCC_PLL_Config+0x88>
3401462a:	f640 0149 	movw	r1, #2121	@ 0x849
3401462e:	4868      	ldr	r0, [pc, #416]	@ (340147d0 <RCC_PLL_Config+0x224>)
34014630:	f00a ffe6 	bl	3401f600 <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34014634:	f44f 7880 	mov.w	r8, #256	@ 0x100
34014638:	4b66      	ldr	r3, [pc, #408]	@ (340147d4 <RCC_PLL_Config+0x228>)
3401463a:	fa08 f809 	lsl.w	r8, r8, r9
3401463e:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
34014642:	f00a fc4b 	bl	3401eedc <HAL_GetTick>
34014646:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34014648:	f8df a194 	ldr.w	sl, [pc, #404]	@ 340147e0 <RCC_PLL_Config+0x234>
3401464c:	f8da 3004 	ldr.w	r3, [sl, #4]
34014650:	ea38 0303 	bics.w	r3, r8, r3
34014654:	d040      	beq.n	340146d8 <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34014656:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34014658:	495f      	ldr	r1, [pc, #380]	@ (340147d8 <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3401465a:	f043 0304 	orr.w	r3, r3, #4
3401465e:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34014660:	59e3      	ldr	r3, [r4, r7]
34014662:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34014666:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34014668:	692b      	ldr	r3, [r5, #16]
3401466a:	68aa      	ldr	r2, [r5, #8]
3401466c:	021b      	lsls	r3, r3, #8
3401466e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
34014672:	686a      	ldr	r2, [r5, #4]
34014674:	59e0      	ldr	r0, [r4, r7]
34014676:	4313      	orrs	r3, r2
34014678:	4a58      	ldr	r2, [pc, #352]	@ (340147dc <RCC_PLL_Config+0x230>)
3401467a:	4002      	ands	r2, r0
3401467c:	4313      	orrs	r3, r2
3401467e:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34014680:	59a2      	ldr	r2, [r4, r6]
34014682:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
34014686:	061b      	lsls	r3, r3, #24
34014688:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
3401468c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
34014690:	4313      	orrs	r3, r2
34014692:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34014694:	5863      	ldr	r3, [r4, r1]
34014696:	68ea      	ldr	r2, [r5, #12]
34014698:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
3401469c:	4313      	orrs	r3, r2
3401469e:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
340146a0:	59a3      	ldr	r3, [r4, r6]
340146a2:	f023 0308 	bic.w	r3, r3, #8
340146a6:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
340146a8:	68eb      	ldr	r3, [r5, #12]
340146aa:	b11b      	cbz	r3, 340146b4 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
340146ac:	59a3      	ldr	r3, [r4, r6]
340146ae:	f043 030a 	orr.w	r3, r3, #10
340146b2:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
340146b4:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340146b6:	4d4a      	ldr	r5, [pc, #296]	@ (340147e0 <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
340146b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
340146bc:	f043 0301 	orr.w	r3, r3, #1
340146c0:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340146c2:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
340146c6:	f00a fc09 	bl	3401eedc <HAL_GetTick>
340146ca:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
340146cc:	686b      	ldr	r3, [r5, #4]
340146ce:	ea18 0f03 	tst.w	r8, r3
340146d2:	d00a      	beq.n	340146ea <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
340146d4:	2000      	movs	r0, #0
340146d6:	e006      	b.n	340146e6 <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340146d8:	f00a fc00 	bl	3401eedc <HAL_GetTick>
340146dc:	eba0 0009 	sub.w	r0, r0, r9
340146e0:	2801      	cmp	r0, #1
340146e2:	d9b3      	bls.n	3401464c <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
340146e4:	2003      	movs	r0, #3
}
340146e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340146ea:	f00a fbf7 	bl	3401eedc <HAL_GetTick>
340146ee:	1b00      	subs	r0, r0, r4
340146f0:	2801      	cmp	r0, #1
340146f2:	d9eb      	bls.n	340146cc <RCC_PLL_Config+0x120>
340146f4:	e7f6      	b.n	340146e4 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
340146f6:	2b03      	cmp	r3, #3
340146f8:	d146      	bne.n	34014788 <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
340146fa:	684b      	ldr	r3, [r1, #4]
340146fc:	b37b      	cbz	r3, 3401475e <RCC_PLL_Config+0x1b2>
340146fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014702:	d032      	beq.n	3401476a <RCC_PLL_Config+0x1be>
34014704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014708:	d032      	beq.n	34014770 <RCC_PLL_Config+0x1c4>
3401470a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401470e:	d00d      	beq.n	3401472c <RCC_PLL_Config+0x180>
34014710:	f640 0189 	movw	r1, #2185	@ 0x889
34014714:	482e      	ldr	r0, [pc, #184]	@ (340147d0 <RCC_PLL_Config+0x224>)
34014716:	f00a ff73 	bl	3401f600 <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
3401471a:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
3401471c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014720:	d026      	beq.n	34014770 <RCC_PLL_Config+0x1c4>
34014722:	d803      	bhi.n	3401472c <RCC_PLL_Config+0x180>
34014724:	b1db      	cbz	r3, 3401475e <RCC_PLL_Config+0x1b2>
34014726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401472a:	d01e      	beq.n	3401476a <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3401472c:	f44f 7680 	mov.w	r6, #256	@ 0x100
34014730:	4b28      	ldr	r3, [pc, #160]	@ (340147d4 <RCC_PLL_Config+0x228>)
34014732:	fa06 f609 	lsl.w	r6, r6, r9
34014736:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
34014738:	f00a fbd0 	bl	3401eedc <HAL_GetTick>
3401473c:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3401473e:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 340147e0 <RCC_PLL_Config+0x234>
34014742:	f8d9 3004 	ldr.w	r3, [r9, #4]
34014746:	ea36 0303 	bics.w	r3, r6, r3
3401474a:	d016      	beq.n	3401477a <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
3401474c:	59e3      	ldr	r3, [r4, r7]
3401474e:	686a      	ldr	r2, [r5, #4]
34014750:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
34014754:	4313      	orrs	r3, r2
34014756:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3401475a:	51e3      	str	r3, [r4, r7]
3401475c:	e7ba      	b.n	340146d4 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
3401475e:	f7ff feb3 	bl	340144c8 <LL_RCC_HSI_IsReady>
34014762:	2800      	cmp	r0, #0
34014764:	d1e2      	bne.n	3401472c <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
34014766:	2001      	movs	r0, #1
34014768:	e7bd      	b.n	340146e6 <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
3401476a:	f7ff feb5 	bl	340144d8 <LL_RCC_MSI_IsReady>
3401476e:	e7f8      	b.n	34014762 <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34014770:	4b1b      	ldr	r3, [pc, #108]	@ (340147e0 <RCC_PLL_Config+0x234>)
34014772:	685b      	ldr	r3, [r3, #4]
34014774:	06db      	lsls	r3, r3, #27
34014776:	d5f6      	bpl.n	34014766 <RCC_PLL_Config+0x1ba>
34014778:	e7d8      	b.n	3401472c <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3401477a:	f00a fbaf 	bl	3401eedc <HAL_GetTick>
3401477e:	eba0 0008 	sub.w	r0, r0, r8
34014782:	2801      	cmp	r0, #1
34014784:	d9dd      	bls.n	34014742 <RCC_PLL_Config+0x196>
34014786:	e7ad      	b.n	340146e4 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34014788:	2b01      	cmp	r3, #1
3401478a:	d1a3      	bne.n	340146d4 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3401478c:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34014790:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34014792:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34014794:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
34014798:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3401479a:	4b0e      	ldr	r3, [pc, #56]	@ (340147d4 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3401479c:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 340147e0 <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340147a0:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
340147a2:	f00a fb9b 	bl	3401eedc <HAL_GetTick>
340147a6:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340147a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
340147ac:	ea35 0303 	bics.w	r3, r5, r3
340147b0:	d003      	beq.n	340147ba <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
340147b2:	59e3      	ldr	r3, [r4, r7]
340147b4:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
340147b8:	e7cf      	b.n	3401475a <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340147ba:	f00a fb8f 	bl	3401eedc <HAL_GetTick>
340147be:	1b80      	subs	r0, r0, r6
340147c0:	2801      	cmp	r0, #1
340147c2:	d9f1      	bls.n	340147a8 <RCC_PLL_Config+0x1fc>
340147c4:	e78e      	b.n	340146e4 <RCC_PLL_Config+0x138>
340147c6:	bf00      	nop
340147c8:	56028080 	.word	0x56028080
340147cc:	56028088 	.word	0x56028088
340147d0:	3402f6c6 	.word	0x3402f6c6
340147d4:	56029000 	.word	0x56029000
340147d8:	56028084 	.word	0x56028084
340147dc:	8c0000ff 	.word	0x8c0000ff
340147e0:	56028000 	.word	0x56028000

340147e4 <RCC_GetSysClockFreq>:
{
340147e4:	b510      	push	{r4, lr}
340147e6:	460c      	mov	r4, r1
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340147e8:	4919      	ldr	r1, [pc, #100]	@ (34014850 <RCC_GetSysClockFreq+0x6c>)
340147ea:	6a0a      	ldr	r2, [r1, #32]
340147ec:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
340147f0:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
340147f4:	d02a      	beq.n	3401484c <RCC_GetSysClockFreq+0x68>
340147f6:	d806      	bhi.n	34014806 <RCC_GetSysClockFreq+0x22>
340147f8:	b952      	cbnz	r2, 34014810 <RCC_GetSysClockFreq+0x2c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340147fa:	6c8b      	ldr	r3, [r1, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340147fc:	4815      	ldr	r0, [pc, #84]	@ (34014854 <RCC_GetSysClockFreq+0x70>)
340147fe:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34014802:	40d8      	lsrs	r0, r3
}
34014804:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSysClkSource())
34014806:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
3401480a:	d009      	beq.n	34014820 <RCC_GetSysClockFreq+0x3c>
      switch (icx_source)
3401480c:	2000      	movs	r0, #0
3401480e:	e7f9      	b.n	34014804 <RCC_GetSysClockFreq+0x20>
      frequency = RCC_GET_MSI_FREQUENCY();
34014810:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
34014812:	4811      	ldr	r0, [pc, #68]	@ (34014858 <RCC_GetSysClockFreq+0x74>)
34014814:	f413 7f00 	tst.w	r3, #512	@ 0x200
34014818:	4b10      	ldr	r3, [pc, #64]	@ (3401485c <RCC_GetSysClockFreq+0x78>)
3401481a:	bf18      	it	ne
3401481c:	4618      	movne	r0, r3
3401481e:	e7f1      	b.n	34014804 <RCC_GetSysClockFreq+0x20>
      switch (icx_source)
34014820:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34014824:	d00f      	beq.n	34014846 <RCC_GetSysClockFreq+0x62>
34014826:	d805      	bhi.n	34014834 <RCC_GetSysClockFreq+0x50>
34014828:	b950      	cbnz	r0, 34014840 <RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401482a:	f003 ffd1 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / icx_divider;
3401482e:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34014832:	e7e7      	b.n	34014804 <RCC_GetSysClockFreq+0x20>
      switch (icx_source)
34014834:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34014838:	d1e8      	bne.n	3401480c <RCC_GetSysClockFreq+0x28>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401483a:	f004 f889 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
3401483e:	e7f6      	b.n	3401482e <RCC_GetSysClockFreq+0x4a>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014840:	f004 f806 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
34014844:	e7f3      	b.n	3401482e <RCC_GetSysClockFreq+0x4a>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014846:	f004 f843 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
3401484a:	e7f0      	b.n	3401482e <RCC_GetSysClockFreq+0x4a>
  switch (LL_RCC_GetSysClkSource())
3401484c:	4804      	ldr	r0, [pc, #16]	@ (34014860 <RCC_GetSysClockFreq+0x7c>)
3401484e:	e7d9      	b.n	34014804 <RCC_GetSysClockFreq+0x20>
34014850:	56028000 	.word	0x56028000
34014854:	03d09000 	.word	0x03d09000
34014858:	003d0900 	.word	0x003d0900
3401485c:	00f42400 	.word	0x00f42400
34014860:	02dc6c00 	.word	0x02dc6c00

34014864 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34014864:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34014868:	b508      	push	{r3, lr}
  switch (PLLSource1)
3401486a:	d021      	beq.n	340148b0 <RCC_IC_CheckPLLSources+0x4c>
3401486c:	d805      	bhi.n	3401487a <RCC_IC_CheckPLLSources+0x16>
3401486e:	b9c0      	cbnz	r0, 340148a2 <RCC_IC_CheckPLLSources+0x3e>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34014870:	f7ff fe3a 	bl	340144e8 <LL_RCC_PLL1_IsReady>
34014874:	b178      	cbz	r0, 34014896 <RCC_IC_CheckPLLSources+0x32>
  uint32_t ret = 1U;
34014876:	2201      	movs	r2, #1
34014878:	e003      	b.n	34014882 <RCC_IC_CheckPLLSources+0x1e>
  switch (PLLSource1)
3401487a:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3401487e:	d01e      	beq.n	340148be <RCC_IC_CheckPLLSources+0x5a>
34014880:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34014882:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
34014886:	d03c      	beq.n	34014902 <RCC_IC_CheckPLLSources+0x9e>
34014888:	d820      	bhi.n	340148cc <RCC_IC_CheckPLLSources+0x68>
3401488a:	b349      	cbz	r1, 340148e0 <RCC_IC_CheckPLLSources+0x7c>
3401488c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
34014890:	d030      	beq.n	340148f4 <RCC_IC_CheckPLLSources+0x90>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
34014892:	2200      	movs	r2, #0
34014894:	e02c      	b.n	340148f0 <RCC_IC_CheckPLLSources+0x8c>
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34014896:	4b1e      	ldr	r3, [pc, #120]	@ (34014910 <RCC_IC_CheckPLLSources+0xac>)
34014898:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3401489c:	f3c2 62c0 	ubfx	r2, r2, #27, #1
340148a0:	e7ef      	b.n	34014882 <RCC_IC_CheckPLLSources+0x1e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340148a2:	4b1b      	ldr	r3, [pc, #108]	@ (34014910 <RCC_IC_CheckPLLSources+0xac>)
340148a4:	685a      	ldr	r2, [r3, #4]
340148a6:	0592      	lsls	r2, r2, #22
340148a8:	d4e5      	bmi.n	34014876 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340148aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
340148ae:	e7f5      	b.n	3401489c <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340148b0:	4b17      	ldr	r3, [pc, #92]	@ (34014910 <RCC_IC_CheckPLLSources+0xac>)
340148b2:	685a      	ldr	r2, [r3, #4]
340148b4:	0550      	lsls	r0, r2, #21
340148b6:	d4de      	bmi.n	34014876 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340148b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
340148bc:	e7ee      	b.n	3401489c <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340148be:	4b14      	ldr	r3, [pc, #80]	@ (34014910 <RCC_IC_CheckPLLSources+0xac>)
340148c0:	685a      	ldr	r2, [r3, #4]
340148c2:	0512      	lsls	r2, r2, #20
340148c4:	d4d7      	bmi.n	34014876 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340148c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
340148ca:	e7e7      	b.n	3401489c <RCC_IC_CheckPLLSources+0x38>
  switch (PLLSource2)
340148cc:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
340148d0:	d1df      	bne.n	34014892 <RCC_IC_CheckPLLSources+0x2e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340148d2:	4b0f      	ldr	r3, [pc, #60]	@ (34014910 <RCC_IC_CheckPLLSources+0xac>)
340148d4:	6859      	ldr	r1, [r3, #4]
340148d6:	0509      	lsls	r1, r1, #20
340148d8:	d40a      	bmi.n	340148f0 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340148da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
340148de:	e005      	b.n	340148ec <RCC_IC_CheckPLLSources+0x88>
      if (LL_RCC_PLL1_IsReady() == 0U)
340148e0:	f7ff fe02 	bl	340144e8 <LL_RCC_PLL1_IsReady>
340148e4:	b920      	cbnz	r0, 340148f0 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
340148e6:	4b0a      	ldr	r3, [pc, #40]	@ (34014910 <RCC_IC_CheckPLLSources+0xac>)
340148e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340148ec:	0118      	lsls	r0, r3, #4
340148ee:	d5d0      	bpl.n	34014892 <RCC_IC_CheckPLLSources+0x2e>
      break;
  }

  return ret;
}
340148f0:	4610      	mov	r0, r2
340148f2:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340148f4:	4b06      	ldr	r3, [pc, #24]	@ (34014910 <RCC_IC_CheckPLLSources+0xac>)
340148f6:	6859      	ldr	r1, [r3, #4]
340148f8:	0589      	lsls	r1, r1, #22
340148fa:	d4f9      	bmi.n	340148f0 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340148fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34014900:	e7f4      	b.n	340148ec <RCC_IC_CheckPLLSources+0x88>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34014902:	4b03      	ldr	r3, [pc, #12]	@ (34014910 <RCC_IC_CheckPLLSources+0xac>)
34014904:	6859      	ldr	r1, [r3, #4]
34014906:	0548      	lsls	r0, r1, #21
34014908:	d4f2      	bmi.n	340148f0 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3401490a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3401490e:	e7ed      	b.n	340148ec <RCC_IC_CheckPLLSources+0x88>
34014910:	56028000 	.word	0x56028000

34014914 <HAL_RCC_OscConfig>:
{
34014914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
34014918:	4604      	mov	r4, r0
3401491a:	b918      	cbnz	r0, 34014924 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
3401491c:	2001      	movs	r0, #1
}
3401491e:	b003      	add	sp, #12
34014920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
34014924:	6803      	ldr	r3, [r0, #0]
34014926:	b133      	cbz	r3, 34014936 <HAL_RCC_OscConfig+0x22>
34014928:	06dd      	lsls	r5, r3, #27
3401492a:	d104      	bne.n	34014936 <HAL_RCC_OscConfig+0x22>
3401492c:	f240 1175 	movw	r1, #373	@ 0x175
34014930:	4893      	ldr	r0, [pc, #588]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
34014932:	f00a fe65 	bl	3401f600 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34014936:	4b93      	ldr	r3, [pc, #588]	@ (34014b84 <HAL_RCC_OscConfig+0x270>)
34014938:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3401493a:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
3401493c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34014940:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34014944:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34014948:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3401494c:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34014950:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34014954:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34014958:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3401495c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
34014960:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34014962:	6823      	ldr	r3, [r4, #0]
34014964:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
34014968:	07d8      	lsls	r0, r3, #31
3401496a:	d463      	bmi.n	34014a34 <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
3401496c:	6823      	ldr	r3, [r4, #0]
3401496e:	0799      	lsls	r1, r3, #30
34014970:	f100 80d4 	bmi.w	34014b1c <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34014974:	6823      	ldr	r3, [r4, #0]
34014976:	06d8      	lsls	r0, r3, #27
34014978:	d522      	bpl.n	340149c0 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
3401497a:	69e3      	ldr	r3, [r4, #28]
3401497c:	2b00      	cmp	r3, #0
3401497e:	f000 8347 	beq.w	34015010 <HAL_RCC_OscConfig+0x6fc>
34014982:	2b04      	cmp	r3, #4
34014984:	f000 834d 	beq.w	34015022 <HAL_RCC_OscConfig+0x70e>
34014988:	f44f 7102 	mov.w	r1, #520	@ 0x208
3401498c:	487c      	ldr	r0, [pc, #496]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
3401498e:	f00a fe37 	bl	3401f600 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34014992:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34014996:	f040 8148 	bne.w	34014c2a <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3401499a:	69e3      	ldr	r3, [r4, #28]
3401499c:	2b00      	cmp	r3, #0
3401499e:	d0bd      	beq.n	3401491c <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
340149a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340149a2:	2b1f      	cmp	r3, #31
340149a4:	d904      	bls.n	340149b0 <HAL_RCC_OscConfig+0x9c>
340149a6:	f240 211b 	movw	r1, #539	@ 0x21b
340149aa:	4875      	ldr	r0, [pc, #468]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
340149ac:	f00a fe28 	bl	3401f600 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
340149b0:	4a74      	ldr	r2, [pc, #464]	@ (34014b84 <HAL_RCC_OscConfig+0x270>)
340149b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340149b4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
340149b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
340149ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340149be:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
340149c0:	6823      	ldr	r3, [r4, #0]
340149c2:	0718      	lsls	r0, r3, #28
340149c4:	f100 8189 	bmi.w	34014cda <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
340149c8:	6823      	ldr	r3, [r4, #0]
340149ca:	0759      	lsls	r1, r3, #29
340149cc:	f100 81b4 	bmi.w	34014d38 <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
340149d0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340149d2:	2b03      	cmp	r3, #3
340149d4:	d904      	bls.n	340149e0 <HAL_RCC_OscConfig+0xcc>
340149d6:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
340149da:	4869      	ldr	r0, [pc, #420]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
340149dc:	f00a fe10 	bl	3401f600 <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
340149e0:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
340149e2:	2f00      	cmp	r7, #0
340149e4:	f040 8210 	bne.w	34014e08 <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
340149e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340149ea:	2b03      	cmp	r3, #3
340149ec:	d904      	bls.n	340149f8 <HAL_RCC_OscConfig+0xe4>
340149ee:	f240 21d6 	movw	r1, #726	@ 0x2d6
340149f2:	4863      	ldr	r0, [pc, #396]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
340149f4:	f00a fe04 	bl	3401f600 <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
340149f8:	6c67      	ldr	r7, [r4, #68]	@ 0x44
340149fa:	2f00      	cmp	r7, #0
340149fc:	f040 8246 	bne.w	34014e8c <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
34014a00:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34014a02:	2b03      	cmp	r3, #3
34014a04:	d904      	bls.n	34014a10 <HAL_RCC_OscConfig+0xfc>
34014a06:	f44f 7141 	mov.w	r1, #772	@ 0x304
34014a0a:	485d      	ldr	r0, [pc, #372]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
34014a0c:	f00a fdf8 	bl	3401f600 <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34014a10:	6e27      	ldr	r7, [r4, #96]	@ 0x60
34014a12:	2f00      	cmp	r7, #0
34014a14:	f040 827a 	bne.w	34014f0c <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
34014a18:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34014a1a:	2b03      	cmp	r3, #3
34014a1c:	d904      	bls.n	34014a28 <HAL_RCC_OscConfig+0x114>
34014a1e:	f240 3131 	movw	r1, #817	@ 0x331
34014a22:	4857      	ldr	r0, [pc, #348]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
34014a24:	f00a fdec 	bl	3401f600 <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34014a28:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
34014a2a:	2f00      	cmp	r7, #0
34014a2c:	f040 82b0 	bne.w	34014f90 <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
34014a30:	2000      	movs	r0, #0
34014a32:	e774      	b.n	3401491e <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
34014a34:	6863      	ldr	r3, [r4, #4]
34014a36:	2b00      	cmp	r3, #0
34014a38:	f000 8313 	beq.w	34015062 <HAL_RCC_OscConfig+0x74e>
34014a3c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34014a40:	2a10      	cmp	r2, #16
34014a42:	f000 8305 	beq.w	34015050 <HAL_RCC_OscConfig+0x73c>
34014a46:	4a50      	ldr	r2, [pc, #320]	@ (34014b88 <HAL_RCC_OscConfig+0x274>)
34014a48:	4293      	cmp	r3, r2
34014a4a:	f000 8301 	beq.w	34015050 <HAL_RCC_OscConfig+0x73c>
34014a4e:	f240 1183 	movw	r1, #387	@ 0x183
34014a52:	484b      	ldr	r0, [pc, #300]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
34014a54:	f00a fdd4 	bl	3401f600 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34014a58:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34014a5c:	d103      	bne.n	34014a66 <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
34014a5e:	6863      	ldr	r3, [r4, #4]
34014a60:	2b00      	cmp	r3, #0
34014a62:	d183      	bne.n	3401496c <HAL_RCC_OscConfig+0x58>
34014a64:	e75a      	b.n	3401491c <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34014a66:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34014a6a:	d0f8      	beq.n	34014a5e <HAL_RCC_OscConfig+0x14a>
34014a6c:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
34014a70:	d101      	bne.n	34014a76 <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34014a72:	05fa      	lsls	r2, r7, #23
34014a74:	d4f3      	bmi.n	34014a5e <HAL_RCC_OscConfig+0x14a>
34014a76:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
34014a7a:	d101      	bne.n	34014a80 <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34014a7c:	05bb      	lsls	r3, r7, #22
34014a7e:	d4ee      	bmi.n	34014a5e <HAL_RCC_OscConfig+0x14a>
34014a80:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
34014a84:	d101      	bne.n	34014a8a <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34014a86:	0578      	lsls	r0, r7, #21
34014a88:	d4e9      	bmi.n	34014a5e <HAL_RCC_OscConfig+0x14a>
34014a8a:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
34014a8e:	d101      	bne.n	34014a94 <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34014a90:	0539      	lsls	r1, r7, #20
34014a92:	d4e4      	bmi.n	34014a5e <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34014a94:	6862      	ldr	r2, [r4, #4]
34014a96:	4b3b      	ldr	r3, [pc, #236]	@ (34014b84 <HAL_RCC_OscConfig+0x270>)
34014a98:	2a10      	cmp	r2, #16
34014a9a:	d114      	bne.n	34014ac6 <HAL_RCC_OscConfig+0x1b2>
34014a9c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34014aa0:	f00a fa1c 	bl	3401eedc <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34014aa4:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
34014aa6:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34014aa8:	b35b      	cbz	r3, 34014b02 <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34014aaa:	4b36      	ldr	r3, [pc, #216]	@ (34014b84 <HAL_RCC_OscConfig+0x270>)
34014aac:	685a      	ldr	r2, [r3, #4]
34014aae:	06d2      	lsls	r2, r2, #27
34014ab0:	f53f af5c 	bmi.w	3401496c <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34014ab4:	f00a fa12 	bl	3401eedc <HAL_GetTick>
34014ab8:	9b01      	ldr	r3, [sp, #4]
34014aba:	1ac0      	subs	r0, r0, r3
34014abc:	2864      	cmp	r0, #100	@ 0x64
34014abe:	4b31      	ldr	r3, [pc, #196]	@ (34014b84 <HAL_RCC_OscConfig+0x270>)
34014ac0:	d9f4      	bls.n	34014aac <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
34014ac2:	2003      	movs	r0, #3
34014ac4:	e72b      	b.n	3401491e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34014ac6:	b93a      	cbnz	r2, 34014ad8 <HAL_RCC_OscConfig+0x1c4>
34014ac8:	2110      	movs	r1, #16
34014aca:	4a30      	ldr	r2, [pc, #192]	@ (34014b8c <HAL_RCC_OscConfig+0x278>)
34014acc:	6011      	str	r1, [r2, #0]
34014ace:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34014ad0:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
34014ad4:	655a      	str	r2, [r3, #84]	@ 0x54
34014ad6:	e7e3      	b.n	34014aa0 <HAL_RCC_OscConfig+0x18c>
34014ad8:	f248 0110 	movw	r1, #32784	@ 0x8010
34014adc:	428a      	cmp	r2, r1
34014ade:	d109      	bne.n	34014af4 <HAL_RCC_OscConfig+0x1e0>
34014ae0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34014ae2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34014ae6:	655a      	str	r2, [r3, #84]	@ 0x54
34014ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34014aea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34014aee:	655a      	str	r2, [r3, #84]	@ 0x54
34014af0:	2210      	movs	r2, #16
34014af2:	e7d3      	b.n	34014a9c <HAL_RCC_OscConfig+0x188>
34014af4:	4924      	ldr	r1, [pc, #144]	@ (34014b88 <HAL_RCC_OscConfig+0x274>)
34014af6:	428a      	cmp	r2, r1
34014af8:	d1e6      	bne.n	34014ac8 <HAL_RCC_OscConfig+0x1b4>
34014afa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34014afc:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
34014b00:	e7f5      	b.n	34014aee <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34014b02:	4b20      	ldr	r3, [pc, #128]	@ (34014b84 <HAL_RCC_OscConfig+0x270>)
34014b04:	685a      	ldr	r2, [r3, #4]
34014b06:	06d3      	lsls	r3, r2, #27
34014b08:	f57f af30 	bpl.w	3401496c <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34014b0c:	f00a f9e6 	bl	3401eedc <HAL_GetTick>
34014b10:	9b01      	ldr	r3, [sp, #4]
34014b12:	1ac0      	subs	r0, r0, r3
34014b14:	2864      	cmp	r0, #100	@ 0x64
34014b16:	4b1b      	ldr	r3, [pc, #108]	@ (34014b84 <HAL_RCC_OscConfig+0x270>)
34014b18:	d9f4      	bls.n	34014b04 <HAL_RCC_OscConfig+0x1f0>
34014b1a:	e7d2      	b.n	34014ac2 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
34014b1c:	68e3      	ldr	r3, [r4, #12]
34014b1e:	2b00      	cmp	r3, #0
34014b20:	f000 8288 	beq.w	34015034 <HAL_RCC_OscConfig+0x720>
34014b24:	2b08      	cmp	r3, #8
34014b26:	f000 828c 	beq.w	34015042 <HAL_RCC_OscConfig+0x72e>
34014b2a:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
34014b2e:	4814      	ldr	r0, [pc, #80]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
34014b30:	f00a fd66 	bl	3401f600 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34014b34:	bb66      	cbnz	r6, 34014b90 <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34014b36:	68e3      	ldr	r3, [r4, #12]
34014b38:	2b00      	cmp	r3, #0
34014b3a:	f43f aeef 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34014b3e:	6923      	ldr	r3, [r4, #16]
34014b40:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
34014b44:	d004      	beq.n	34014b50 <HAL_RCC_OscConfig+0x23c>
34014b46:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
34014b4a:	480d      	ldr	r0, [pc, #52]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
34014b4c:	f00a fd58 	bl	3401f600 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34014b50:	6963      	ldr	r3, [r4, #20]
34014b52:	2b7f      	cmp	r3, #127	@ 0x7f
34014b54:	d904      	bls.n	34014b60 <HAL_RCC_OscConfig+0x24c>
34014b56:	f240 11cb 	movw	r1, #459	@ 0x1cb
34014b5a:	4809      	ldr	r0, [pc, #36]	@ (34014b80 <HAL_RCC_OscConfig+0x26c>)
34014b5c:	f00a fd50 	bl	3401f600 <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34014b60:	4a08      	ldr	r2, [pc, #32]	@ (34014b84 <HAL_RCC_OscConfig+0x270>)
34014b62:	6921      	ldr	r1, [r4, #16]
34014b64:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34014b66:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
34014b6a:	430b      	orrs	r3, r1
34014b6c:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34014b6e:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34014b70:	6961      	ldr	r1, [r4, #20]
34014b72:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
34014b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34014b7a:	6493      	str	r3, [r2, #72]	@ 0x48
}
34014b7c:	e6fa      	b.n	34014974 <HAL_RCC_OscConfig+0x60>
34014b7e:	bf00      	nop
34014b80:	3402f6c6 	.word	0x3402f6c6
34014b84:	56028000 	.word	0x56028000
34014b88:	00018010 	.word	0x00018010
34014b8c:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34014b90:	2d00      	cmp	r5, #0
34014b92:	d0d0      	beq.n	34014b36 <HAL_RCC_OscConfig+0x222>
34014b94:	f1bb 0f00 	cmp.w	fp, #0
34014b98:	d101      	bne.n	34014b9e <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34014b9a:	05f8      	lsls	r0, r7, #23
34014b9c:	d4cb      	bmi.n	34014b36 <HAL_RCC_OscConfig+0x222>
34014b9e:	f1ba 0f00 	cmp.w	sl, #0
34014ba2:	d101      	bne.n	34014ba8 <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34014ba4:	05b9      	lsls	r1, r7, #22
34014ba6:	d4c6      	bmi.n	34014b36 <HAL_RCC_OscConfig+0x222>
34014ba8:	f1b9 0f00 	cmp.w	r9, #0
34014bac:	d101      	bne.n	34014bb2 <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34014bae:	057a      	lsls	r2, r7, #21
34014bb0:	d4c1      	bmi.n	34014b36 <HAL_RCC_OscConfig+0x222>
34014bb2:	f1b8 0f00 	cmp.w	r8, #0
34014bb6:	d101      	bne.n	34014bbc <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34014bb8:	053b      	lsls	r3, r7, #20
34014bba:	d4bc      	bmi.n	34014b36 <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34014bbc:	68e3      	ldr	r3, [r4, #12]
34014bbe:	b313      	cbz	r3, 34014c06 <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34014bc0:	6923      	ldr	r3, [r4, #16]
34014bc2:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
34014bc6:	d004      	beq.n	34014bd2 <HAL_RCC_OscConfig+0x2be>
34014bc8:	f240 11d9 	movw	r1, #473	@ 0x1d9
34014bcc:	48ab      	ldr	r0, [pc, #684]	@ (34014e7c <HAL_RCC_OscConfig+0x568>)
34014bce:	f00a fd17 	bl	3401f600 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34014bd2:	6963      	ldr	r3, [r4, #20]
34014bd4:	2b7f      	cmp	r3, #127	@ 0x7f
34014bd6:	d904      	bls.n	34014be2 <HAL_RCC_OscConfig+0x2ce>
34014bd8:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
34014bdc:	48a7      	ldr	r0, [pc, #668]	@ (34014e7c <HAL_RCC_OscConfig+0x568>)
34014bde:	f00a fd0f 	bl	3401f600 <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34014be2:	2208      	movs	r2, #8
34014be4:	4ba6      	ldr	r3, [pc, #664]	@ (34014e80 <HAL_RCC_OscConfig+0x56c>)
34014be6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34014bea:	f00a f977 	bl	3401eedc <HAL_GetTick>
34014bee:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
34014bf0:	f7ff fc6a 	bl	340144c8 <LL_RCC_HSI_IsReady>
34014bf4:	2800      	cmp	r0, #0
34014bf6:	d1b3      	bne.n	34014b60 <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34014bf8:	f00a f970 	bl	3401eedc <HAL_GetTick>
34014bfc:	9b01      	ldr	r3, [sp, #4]
34014bfe:	1ac0      	subs	r0, r0, r3
34014c00:	2801      	cmp	r0, #1
34014c02:	d9f5      	bls.n	34014bf0 <HAL_RCC_OscConfig+0x2dc>
34014c04:	e75d      	b.n	34014ac2 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34014c06:	2208      	movs	r2, #8
34014c08:	4b9e      	ldr	r3, [pc, #632]	@ (34014e84 <HAL_RCC_OscConfig+0x570>)
34014c0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34014c0c:	f00a f966 	bl	3401eedc <HAL_GetTick>
34014c10:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
34014c12:	f7ff fc59 	bl	340144c8 <LL_RCC_HSI_IsReady>
34014c16:	2800      	cmp	r0, #0
34014c18:	f43f aeac 	beq.w	34014974 <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34014c1c:	f00a f95e 	bl	3401eedc <HAL_GetTick>
34014c20:	9b01      	ldr	r3, [sp, #4]
34014c22:	1ac0      	subs	r0, r0, r3
34014c24:	2801      	cmp	r0, #1
34014c26:	d9f4      	bls.n	34014c12 <HAL_RCC_OscConfig+0x2fe>
34014c28:	e74b      	b.n	34014ac2 <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34014c2a:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34014c2e:	f43f aeb4 	beq.w	3401499a <HAL_RCC_OscConfig+0x86>
34014c32:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
34014c36:	d102      	bne.n	34014c3e <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34014c38:	05f9      	lsls	r1, r7, #23
34014c3a:	f53f aeae 	bmi.w	3401499a <HAL_RCC_OscConfig+0x86>
34014c3e:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
34014c42:	d102      	bne.n	34014c4a <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34014c44:	05ba      	lsls	r2, r7, #22
34014c46:	f53f aea8 	bmi.w	3401499a <HAL_RCC_OscConfig+0x86>
34014c4a:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
34014c4e:	d102      	bne.n	34014c56 <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34014c50:	057b      	lsls	r3, r7, #21
34014c52:	f53f aea2 	bmi.w	3401499a <HAL_RCC_OscConfig+0x86>
34014c56:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
34014c5a:	d102      	bne.n	34014c62 <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34014c5c:	053f      	lsls	r7, r7, #20
34014c5e:	f53f ae9c 	bmi.w	3401499a <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34014c62:	69e3      	ldr	r3, [r4, #28]
34014c64:	b343      	cbz	r3, 34014cb8 <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
34014c66:	6a23      	ldr	r3, [r4, #32]
34014c68:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
34014c6c:	d004      	beq.n	34014c78 <HAL_RCC_OscConfig+0x364>
34014c6e:	f240 2127 	movw	r1, #551	@ 0x227
34014c72:	4882      	ldr	r0, [pc, #520]	@ (34014e7c <HAL_RCC_OscConfig+0x568>)
34014c74:	f00a fcc4 	bl	3401f600 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34014c78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34014c7a:	2b1f      	cmp	r3, #31
34014c7c:	d904      	bls.n	34014c88 <HAL_RCC_OscConfig+0x374>
34014c7e:	f44f 710a 	mov.w	r1, #552	@ 0x228
34014c82:	487e      	ldr	r0, [pc, #504]	@ (34014e7c <HAL_RCC_OscConfig+0x568>)
34014c84:	f00a fcbc 	bl	3401f600 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34014c88:	4a7d      	ldr	r2, [pc, #500]	@ (34014e80 <HAL_RCC_OscConfig+0x56c>)
34014c8a:	6a21      	ldr	r1, [r4, #32]
34014c8c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34014c8e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
34014c92:	430b      	orrs	r3, r1
34014c94:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34014c96:	2304      	movs	r3, #4
34014c98:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34014c9c:	f00a f91e 	bl	3401eedc <HAL_GetTick>
34014ca0:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
34014ca2:	f7ff fc19 	bl	340144d8 <LL_RCC_MSI_IsReady>
34014ca6:	2800      	cmp	r0, #0
34014ca8:	f47f ae82 	bne.w	340149b0 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34014cac:	f00a f916 	bl	3401eedc <HAL_GetTick>
34014cb0:	1bc0      	subs	r0, r0, r7
34014cb2:	2801      	cmp	r0, #1
34014cb4:	d9f5      	bls.n	34014ca2 <HAL_RCC_OscConfig+0x38e>
34014cb6:	e704      	b.n	34014ac2 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34014cb8:	2204      	movs	r2, #4
34014cba:	4b72      	ldr	r3, [pc, #456]	@ (34014e84 <HAL_RCC_OscConfig+0x570>)
34014cbc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34014cbe:	f00a f90d 	bl	3401eedc <HAL_GetTick>
34014cc2:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
34014cc4:	f7ff fc08 	bl	340144d8 <LL_RCC_MSI_IsReady>
34014cc8:	2800      	cmp	r0, #0
34014cca:	f43f ae79 	beq.w	340149c0 <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34014cce:	f00a f905 	bl	3401eedc <HAL_GetTick>
34014cd2:	1bc0      	subs	r0, r0, r7
34014cd4:	2801      	cmp	r0, #1
34014cd6:	d9f5      	bls.n	34014cc4 <HAL_RCC_OscConfig+0x3b0>
34014cd8:	e6f3      	b.n	34014ac2 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34014cda:	69a3      	ldr	r3, [r4, #24]
34014cdc:	2b01      	cmp	r3, #1
34014cde:	d904      	bls.n	34014cea <HAL_RCC_OscConfig+0x3d6>
34014ce0:	f44f 7116 	mov.w	r1, #600	@ 0x258
34014ce4:	4865      	ldr	r0, [pc, #404]	@ (34014e7c <HAL_RCC_OscConfig+0x568>)
34014ce6:	f00a fc8b 	bl	3401f600 <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34014cea:	69a2      	ldr	r2, [r4, #24]
34014cec:	2301      	movs	r3, #1
34014cee:	b18a      	cbz	r2, 34014d14 <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34014cf0:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 34014e80 <HAL_RCC_OscConfig+0x56c>
34014cf4:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34014cf8:	f00a f8f0 	bl	3401eedc <HAL_GetTick>
34014cfc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34014cfe:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
34014d02:	07da      	lsls	r2, r3, #31
34014d04:	f53f ae60 	bmi.w	340149c8 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34014d08:	f00a f8e8 	bl	3401eedc <HAL_GetTick>
34014d0c:	1bc0      	subs	r0, r0, r7
34014d0e:	2801      	cmp	r0, #1
34014d10:	d9f5      	bls.n	34014cfe <HAL_RCC_OscConfig+0x3ea>
34014d12:	e6d6      	b.n	34014ac2 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34014d14:	4a5b      	ldr	r2, [pc, #364]	@ (34014e84 <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34014d16:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 34014e80 <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34014d1a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
34014d1c:	f00a f8de 	bl	3401eedc <HAL_GetTick>
34014d20:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34014d22:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
34014d26:	07db      	lsls	r3, r3, #31
34014d28:	f57f ae4e 	bpl.w	340149c8 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34014d2c:	f00a f8d6 	bl	3401eedc <HAL_GetTick>
34014d30:	1bc0      	subs	r0, r0, r7
34014d32:	2801      	cmp	r0, #1
34014d34:	d9f5      	bls.n	34014d22 <HAL_RCC_OscConfig+0x40e>
34014d36:	e6c4      	b.n	34014ac2 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
34014d38:	68a3      	ldr	r3, [r4, #8]
34014d3a:	f033 0202 	bics.w	r2, r3, #2
34014d3e:	d00a      	beq.n	34014d56 <HAL_RCC_OscConfig+0x442>
34014d40:	f248 0202 	movw	r2, #32770	@ 0x8002
34014d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34014d48:	4293      	cmp	r3, r2
34014d4a:	d004      	beq.n	34014d56 <HAL_RCC_OscConfig+0x442>
34014d4c:	f240 2183 	movw	r1, #643	@ 0x283
34014d50:	484a      	ldr	r0, [pc, #296]	@ (34014e7c <HAL_RCC_OscConfig+0x568>)
34014d52:	f00a fc55 	bl	3401f600 <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34014d56:	68a3      	ldr	r3, [r4, #8]
34014d58:	4f49      	ldr	r7, [pc, #292]	@ (34014e80 <HAL_RCC_OscConfig+0x56c>)
34014d5a:	2b02      	cmp	r3, #2
34014d5c:	d113      	bne.n	34014d86 <HAL_RCC_OscConfig+0x472>
34014d5e:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34014d62:	f00a f8bb 	bl	3401eedc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34014d66:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
34014d6a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34014d6c:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 34014e80 <HAL_RCC_OscConfig+0x56c>
34014d70:	f8d9 3004 	ldr.w	r3, [r9, #4]
34014d74:	0798      	lsls	r0, r3, #30
34014d76:	f53f ae2b 	bmi.w	340149d0 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34014d7a:	f00a f8af 	bl	3401eedc <HAL_GetTick>
34014d7e:	1bc3      	subs	r3, r0, r7
34014d80:	4543      	cmp	r3, r8
34014d82:	d9f5      	bls.n	34014d70 <HAL_RCC_OscConfig+0x45c>
34014d84:	e69d      	b.n	34014ac2 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34014d86:	b9d3      	cbnz	r3, 34014dbe <HAL_RCC_OscConfig+0x4aa>
34014d88:	2202      	movs	r2, #2
34014d8a:	4b3e      	ldr	r3, [pc, #248]	@ (34014e84 <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34014d8c:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34014d90:	601a      	str	r2, [r3, #0]
34014d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34014d98:	643b      	str	r3, [r7, #64]	@ 0x40
34014d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014d9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34014da0:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
34014da2:	f00a f89b 	bl	3401eedc <HAL_GetTick>
34014da6:	4680      	mov	r8, r0
34014da8:	687b      	ldr	r3, [r7, #4]
34014daa:	0799      	lsls	r1, r3, #30
34014dac:	f57f ae10 	bpl.w	340149d0 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34014db0:	f00a f894 	bl	3401eedc <HAL_GetTick>
34014db4:	eba0 0308 	sub.w	r3, r0, r8
34014db8:	454b      	cmp	r3, r9
34014dba:	d9f5      	bls.n	34014da8 <HAL_RCC_OscConfig+0x494>
34014dbc:	e681      	b.n	34014ac2 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34014dbe:	f248 0202 	movw	r2, #32770	@ 0x8002
34014dc2:	4293      	cmp	r3, r2
34014dc4:	d109      	bne.n	34014dda <HAL_RCC_OscConfig+0x4c6>
34014dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34014dcc:	643b      	str	r3, [r7, #64]	@ 0x40
34014dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34014dd4:	643b      	str	r3, [r7, #64]	@ 0x40
34014dd6:	2302      	movs	r3, #2
34014dd8:	e7c1      	b.n	34014d5e <HAL_RCC_OscConfig+0x44a>
34014dda:	4a2b      	ldr	r2, [pc, #172]	@ (34014e88 <HAL_RCC_OscConfig+0x574>)
34014ddc:	4293      	cmp	r3, r2
34014dde:	d107      	bne.n	34014df0 <HAL_RCC_OscConfig+0x4dc>
34014de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34014de6:	643b      	str	r3, [r7, #64]	@ 0x40
34014de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34014dee:	e7f1      	b.n	34014dd4 <HAL_RCC_OscConfig+0x4c0>
34014df0:	2202      	movs	r2, #2
34014df2:	4b24      	ldr	r3, [pc, #144]	@ (34014e84 <HAL_RCC_OscConfig+0x570>)
34014df4:	601a      	str	r2, [r3, #0]
34014df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014df8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34014dfc:	643b      	str	r3, [r7, #64]	@ 0x40
34014dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34014e04:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34014e06:	e7ac      	b.n	34014d62 <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34014e08:	2000      	movs	r0, #0
34014e0a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
34014e0e:	f7ff fb73 	bl	340144f8 <RCC_PLL_IsNewConfig>
34014e12:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34014e14:	f7ff fb68 	bl	340144e8 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34014e18:	2a01      	cmp	r2, #1
34014e1a:	d125      	bne.n	34014e68 <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014e1c:	4b18      	ldr	r3, [pc, #96]	@ (34014e80 <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34014e1e:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34014e22:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014e26:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014e2a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014e2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34014e32:	d103      	bne.n	34014e3c <HAL_RCC_OscConfig+0x528>
34014e34:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
34014e38:	f43f ad70 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34014e3c:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34014e40:	d10b      	bne.n	34014e5a <HAL_RCC_OscConfig+0x546>
34014e42:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
34014e46:	f43f ad69 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
34014e4a:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
34014e4e:	f43f ad65 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34014e52:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
34014e56:	f43f ad61 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34014e5a:	2000      	movs	r0, #0
34014e5c:	f7ff fba6 	bl	340145ac <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34014e60:	2800      	cmp	r0, #0
34014e62:	f43f adc1 	beq.w	340149e8 <HAL_RCC_OscConfig+0xd4>
34014e66:	e559      	b.n	3401491c <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34014e68:	2f02      	cmp	r7, #2
34014e6a:	f47f adbd 	bne.w	340149e8 <HAL_RCC_OscConfig+0xd4>
34014e6e:	2800      	cmp	r0, #0
34014e70:	f47f adba 	bne.w	340149e8 <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34014e74:	f7ff fb82 	bl	3401457c <RCC_PLL_Enable>
34014e78:	e7f2      	b.n	34014e60 <HAL_RCC_OscConfig+0x54c>
34014e7a:	bf00      	nop
34014e7c:	3402f6c6 	.word	0x3402f6c6
34014e80:	56028000 	.word	0x56028000
34014e84:	56029000 	.word	0x56029000
34014e88:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34014e8c:	2001      	movs	r0, #1
34014e8e:	f104 0144 	add.w	r1, r4, #68	@ 0x44
34014e92:	f7ff fb31 	bl	340144f8 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34014e96:	4b77      	ldr	r3, [pc, #476]	@ (34015074 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34014e98:	2801      	cmp	r0, #1
34014e9a:	685a      	ldr	r2, [r3, #4]
34014e9c:	d12c      	bne.n	34014ef8 <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34014e9e:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014ea2:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014ea6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014eaa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014eae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34014eb2:	d105      	bne.n	34014ec0 <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014eb4:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34014eb8:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34014ebc:	f43f ad2e 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34014ec0:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34014ec4:	d111      	bne.n	34014eea <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014ec6:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34014eca:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34014ece:	f43f ad25 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014ed2:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34014ed6:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34014eda:	f43f ad1f 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014ede:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34014ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014ee6:	f43f ad19 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34014eea:	2001      	movs	r0, #1
34014eec:	f7ff fb5e 	bl	340145ac <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34014ef0:	2800      	cmp	r0, #0
34014ef2:	f43f ad85 	beq.w	34014a00 <HAL_RCC_OscConfig+0xec>
34014ef6:	e511      	b.n	3401491c <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34014ef8:	2f02      	cmp	r7, #2
34014efa:	f47f ad81 	bne.w	34014a00 <HAL_RCC_OscConfig+0xec>
34014efe:	0592      	lsls	r2, r2, #22
34014f00:	f53f ad7e 	bmi.w	34014a00 <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34014f04:	2001      	movs	r0, #1
34014f06:	f7ff fb39 	bl	3401457c <RCC_PLL_Enable>
34014f0a:	e7f1      	b.n	34014ef0 <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34014f0c:	2002      	movs	r0, #2
34014f0e:	f104 0160 	add.w	r1, r4, #96	@ 0x60
34014f12:	f7ff faf1 	bl	340144f8 <RCC_PLL_IsNewConfig>
34014f16:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34014f18:	f7ff fae6 	bl	340144e8 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34014f1c:	2a01      	cmp	r2, #1
34014f1e:	d12d      	bne.n	34014f7c <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014f20:	4b54      	ldr	r3, [pc, #336]	@ (34015074 <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34014f22:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34014f26:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014f2a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014f2e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014f32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34014f36:	d105      	bne.n	34014f44 <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014f38:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34014f3c:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
34014f40:	f43f acec 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34014f44:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34014f48:	d111      	bne.n	34014f6e <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014f4a:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34014f4e:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34014f52:	f43f ace3 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014f56:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34014f5a:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34014f5e:	f43f acdd 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014f62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34014f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014f6a:	f43f acd7 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34014f6e:	2002      	movs	r0, #2
34014f70:	f7ff fb1c 	bl	340145ac <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34014f74:	2800      	cmp	r0, #0
34014f76:	f43f ad4f 	beq.w	34014a18 <HAL_RCC_OscConfig+0x104>
34014f7a:	e4cf      	b.n	3401491c <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34014f7c:	2f02      	cmp	r7, #2
34014f7e:	f47f ad4b 	bne.w	34014a18 <HAL_RCC_OscConfig+0x104>
34014f82:	2800      	cmp	r0, #0
34014f84:	f47f ad48 	bne.w	34014a18 <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34014f88:	4638      	mov	r0, r7
34014f8a:	f7ff faf7 	bl	3401457c <RCC_PLL_Enable>
34014f8e:	e7f1      	b.n	34014f74 <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34014f90:	2003      	movs	r0, #3
34014f92:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
34014f96:	f7ff faaf 	bl	340144f8 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34014f9a:	4b36      	ldr	r3, [pc, #216]	@ (34015074 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34014f9c:	2801      	cmp	r0, #1
34014f9e:	685a      	ldr	r2, [r3, #4]
34014fa0:	d12c      	bne.n	34014ffc <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34014fa2:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014fa6:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014faa:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014fae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014fb2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34014fb6:	d105      	bne.n	34014fc4 <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014fb8:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34014fbc:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34014fc0:	f43f acac 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34014fc4:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34014fc8:	d111      	bne.n	34014fee <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014fca:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34014fce:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34014fd2:	f43f aca3 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014fd6:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34014fda:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34014fde:	f43f ac9d 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014fe2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34014fe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014fea:	f43f ac97 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34014fee:	2003      	movs	r0, #3
34014ff0:	f7ff fadc 	bl	340145ac <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34014ff4:	3800      	subs	r0, #0
34014ff6:	bf18      	it	ne
34014ff8:	2001      	movne	r0, #1
34014ffa:	e490      	b.n	3401491e <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34014ffc:	2f02      	cmp	r7, #2
34014ffe:	f47f ad17 	bne.w	34014a30 <HAL_RCC_OscConfig+0x11c>
34015002:	0513      	lsls	r3, r2, #20
34015004:	f53f ad14 	bmi.w	34014a30 <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34015008:	2003      	movs	r0, #3
3401500a:	f7ff fab7 	bl	3401457c <RCC_PLL_Enable>
3401500e:	e7f1      	b.n	34014ff4 <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34015010:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34015014:	f43f ac82 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
34015018:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
3401501c:	f47f ae09 	bne.w	34014c32 <HAL_RCC_OscConfig+0x31e>
34015020:	e47c      	b.n	3401491c <HAL_RCC_OscConfig+0x8>
34015022:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34015026:	f43f acbb 	beq.w	340149a0 <HAL_RCC_OscConfig+0x8c>
3401502a:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
3401502e:	f47f ae00 	bne.w	34014c32 <HAL_RCC_OscConfig+0x31e>
34015032:	e4b5      	b.n	340149a0 <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34015034:	2e00      	cmp	r6, #0
34015036:	f43f ac71 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
3401503a:	2d00      	cmp	r5, #0
3401503c:	f47f adaa 	bne.w	34014b94 <HAL_RCC_OscConfig+0x280>
34015040:	e46c      	b.n	3401491c <HAL_RCC_OscConfig+0x8>
34015042:	2e00      	cmp	r6, #0
34015044:	f43f ad7b 	beq.w	34014b3e <HAL_RCC_OscConfig+0x22a>
34015048:	2d00      	cmp	r5, #0
3401504a:	f43f ad78 	beq.w	34014b3e <HAL_RCC_OscConfig+0x22a>
3401504e:	e5a1      	b.n	34014b94 <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34015050:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34015054:	f43f ac8a 	beq.w	3401496c <HAL_RCC_OscConfig+0x58>
34015058:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
3401505c:	f47f ad06 	bne.w	34014a6c <HAL_RCC_OscConfig+0x158>
34015060:	e484      	b.n	3401496c <HAL_RCC_OscConfig+0x58>
34015062:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34015066:	f43f ac59 	beq.w	3401491c <HAL_RCC_OscConfig+0x8>
3401506a:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
3401506e:	f47f acfd 	bne.w	34014a6c <HAL_RCC_OscConfig+0x158>
34015072:	e453      	b.n	3401491c <HAL_RCC_OscConfig+0x8>
34015074:	56028000 	.word	0x56028000

34015078 <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34015078:	4b1f      	ldr	r3, [pc, #124]	@ (340150f8 <HAL_RCC_GetCpuClockFreq+0x80>)
{
3401507a:	b510      	push	{r4, lr}
3401507c:	6a1a      	ldr	r2, [r3, #32]
3401507e:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
34015082:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34015086:	d034      	beq.n	340150f2 <HAL_RCC_GetCpuClockFreq+0x7a>
34015088:	d806      	bhi.n	34015098 <HAL_RCC_GetCpuClockFreq+0x20>
3401508a:	b952      	cbnz	r2, 340150a2 <HAL_RCC_GetCpuClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401508c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401508e:	481b      	ldr	r0, [pc, #108]	@ (340150fc <HAL_RCC_GetCpuClockFreq+0x84>)
34015090:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34015094:	40d8      	lsrs	r0, r3
}
34015096:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetCpuClkSource())
34015098:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
3401509c:	d009      	beq.n	340150b2 <HAL_RCC_GetCpuClockFreq+0x3a>
      switch (LL_RCC_IC1_GetSource())
3401509e:	2000      	movs	r0, #0
340150a0:	e7f9      	b.n	34015096 <HAL_RCC_GetCpuClockFreq+0x1e>
      frequency = RCC_GET_MSI_FREQUENCY();
340150a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340150a4:	4816      	ldr	r0, [pc, #88]	@ (34015100 <HAL_RCC_GetCpuClockFreq+0x88>)
340150a6:	f413 7f00 	tst.w	r3, #512	@ 0x200
340150aa:	4b16      	ldr	r3, [pc, #88]	@ (34015104 <HAL_RCC_GetCpuClockFreq+0x8c>)
340150ac:	bf18      	it	ne
340150ae:	4618      	movne	r0, r3
340150b0:	e7f1      	b.n	34015096 <HAL_RCC_GetCpuClockFreq+0x1e>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
340150b2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340150b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
340150ba:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340150be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC1_GetSource())
340150c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
340150c6:	f100 0401 	add.w	r4, r0, #1
340150ca:	d00f      	beq.n	340150ec <HAL_RCC_GetCpuClockFreq+0x74>
340150cc:	d805      	bhi.n	340150da <HAL_RCC_GetCpuClockFreq+0x62>
340150ce:	b953      	cbnz	r3, 340150e6 <HAL_RCC_GetCpuClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
340150d0:	f003 fb7e 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
340150d4:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
340150d8:	e7dd      	b.n	34015096 <HAL_RCC_GetCpuClockFreq+0x1e>
      switch (LL_RCC_IC1_GetSource())
340150da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340150de:	d1de      	bne.n	3401509e <HAL_RCC_GetCpuClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
340150e0:	f003 fc36 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
340150e4:	e7f6      	b.n	340150d4 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
340150e6:	f003 fbb3 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
340150ea:	e7f3      	b.n	340150d4 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
340150ec:	f003 fbf0 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
340150f0:	e7f0      	b.n	340150d4 <HAL_RCC_GetCpuClockFreq+0x5c>
  switch (LL_RCC_GetCpuClkSource())
340150f2:	4805      	ldr	r0, [pc, #20]	@ (34015108 <HAL_RCC_GetCpuClockFreq+0x90>)
340150f4:	e7cf      	b.n	34015096 <HAL_RCC_GetCpuClockFreq+0x1e>
340150f6:	bf00      	nop
340150f8:	56028000 	.word	0x56028000
340150fc:	03d09000 	.word	0x03d09000
34015100:	003d0900 	.word	0x003d0900
34015104:	00f42400 	.word	0x00f42400
34015108:	02dc6c00 	.word	0x02dc6c00

3401510c <HAL_RCC_ClockConfig>:
{
3401510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
34015110:	4604      	mov	r4, r0
34015112:	b910      	cbnz	r0, 3401511a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
34015114:	2001      	movs	r0, #1
}
34015116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
3401511a:	6803      	ldr	r3, [r0, #0]
3401511c:	2b7f      	cmp	r3, #127	@ 0x7f
3401511e:	d904      	bls.n	3401512a <HAL_RCC_ClockConfig+0x1e>
34015120:	f240 3181 	movw	r1, #897	@ 0x381
34015124:	4893      	ldr	r0, [pc, #588]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
34015126:	f00a fa6b 	bl	3401f600 <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3401512a:	6823      	ldr	r3, [r4, #0]
3401512c:	071f      	lsls	r7, r3, #28
3401512e:	d513      	bpl.n	34015158 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34015130:	6923      	ldr	r3, [r4, #16]
34015132:	2b07      	cmp	r3, #7
34015134:	d904      	bls.n	34015140 <HAL_RCC_ClockConfig+0x34>
34015136:	f44f 7162 	mov.w	r1, #904	@ 0x388
3401513a:	488e      	ldr	r0, [pc, #568]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
3401513c:	f00a fa60 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34015140:	4a8d      	ldr	r2, [pc, #564]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
34015142:	6921      	ldr	r1, [r4, #16]
34015144:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34015146:	f003 0307 	and.w	r3, r3, #7
3401514a:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
3401514c:	bf81      	itttt	hi
3401514e:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34015150:	f023 0307 	bichi.w	r3, r3, #7
34015154:	430b      	orrhi	r3, r1
34015156:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34015158:	6823      	ldr	r3, [r4, #0]
3401515a:	06de      	lsls	r6, r3, #27
3401515c:	d516      	bpl.n	3401518c <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
3401515e:	6963      	ldr	r3, [r4, #20]
34015160:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34015164:	d006      	beq.n	34015174 <HAL_RCC_ClockConfig+0x68>
34015166:	2b40      	cmp	r3, #64	@ 0x40
34015168:	d004      	beq.n	34015174 <HAL_RCC_ClockConfig+0x68>
3401516a:	f240 3192 	movw	r1, #914	@ 0x392
3401516e:	4881      	ldr	r0, [pc, #516]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
34015170:	f00a fa46 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34015174:	4a80      	ldr	r2, [pc, #512]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
34015176:	6961      	ldr	r1, [r4, #20]
34015178:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3401517a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
3401517e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34015180:	bf81      	itttt	hi
34015182:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34015184:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
34015188:	430b      	orrhi	r3, r1
3401518a:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
3401518c:	6823      	ldr	r3, [r4, #0]
3401518e:	069d      	lsls	r5, r3, #26
34015190:	d517      	bpl.n	340151c2 <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34015192:	69a3      	ldr	r3, [r4, #24]
34015194:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34015198:	d007      	beq.n	340151aa <HAL_RCC_ClockConfig+0x9e>
3401519a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3401519e:	d004      	beq.n	340151aa <HAL_RCC_ClockConfig+0x9e>
340151a0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
340151a4:	4873      	ldr	r0, [pc, #460]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
340151a6:	f00a fa2b 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
340151aa:	4a73      	ldr	r2, [pc, #460]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
340151ac:	69a1      	ldr	r1, [r4, #24]
340151ae:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340151b0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
340151b4:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
340151b6:	bf81      	itttt	hi
340151b8:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
340151ba:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
340151be:	430b      	orrhi	r3, r1
340151c0:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
340151c2:	6823      	ldr	r3, [r4, #0]
340151c4:	0658      	lsls	r0, r3, #25
340151c6:	d517      	bpl.n	340151f8 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
340151c8:	69e3      	ldr	r3, [r4, #28]
340151ca:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340151ce:	d007      	beq.n	340151e0 <HAL_RCC_ClockConfig+0xd4>
340151d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340151d4:	d004      	beq.n	340151e0 <HAL_RCC_ClockConfig+0xd4>
340151d6:	f240 31a6 	movw	r1, #934	@ 0x3a6
340151da:	4866      	ldr	r0, [pc, #408]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
340151dc:	f00a fa10 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
340151e0:	4a65      	ldr	r2, [pc, #404]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
340151e2:	69e1      	ldr	r1, [r4, #28]
340151e4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340151e6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
340151ea:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
340151ec:	bf81      	itttt	hi
340151ee:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
340151f0:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
340151f4:	430b      	orrhi	r3, r1
340151f6:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
340151f8:	6823      	ldr	r3, [r4, #0]
340151fa:	0759      	lsls	r1, r3, #29
340151fc:	d517      	bpl.n	3401522e <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
340151fe:	68e3      	ldr	r3, [r4, #12]
34015200:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34015204:	d007      	beq.n	34015216 <HAL_RCC_ClockConfig+0x10a>
34015206:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3401520a:	d004      	beq.n	34015216 <HAL_RCC_ClockConfig+0x10a>
3401520c:	f44f 716c 	mov.w	r1, #944	@ 0x3b0
34015210:	4858      	ldr	r0, [pc, #352]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
34015212:	f00a f9f5 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34015216:	4a58      	ldr	r2, [pc, #352]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
34015218:	68e1      	ldr	r1, [r4, #12]
3401521a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3401521c:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34015220:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34015222:	bf81      	itttt	hi
34015224:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34015226:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
3401522a:	430b      	orrhi	r3, r1
3401522c:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
3401522e:	6823      	ldr	r3, [r4, #0]
34015230:	07da      	lsls	r2, r3, #31
34015232:	d52a      	bpl.n	3401528a <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
34015234:	6863      	ldr	r3, [r4, #4]
34015236:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3401523a:	d004      	beq.n	34015246 <HAL_RCC_ClockConfig+0x13a>
3401523c:	f240 31bb 	movw	r1, #955	@ 0x3bb
34015240:	484c      	ldr	r0, [pc, #304]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
34015242:	f00a f9dd 	bl	3401f600 <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34015246:	6863      	ldr	r3, [r4, #4]
34015248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3401524c:	f040 809a 	bne.w	34015384 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34015250:	4b49      	ldr	r3, [pc, #292]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
34015252:	685b      	ldr	r3, [r3, #4]
34015254:	06db      	lsls	r3, r3, #27
34015256:	f57f af5d 	bpl.w	34015114 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
3401525a:	4d47      	ldr	r5, [pc, #284]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
3401525c:	6862      	ldr	r2, [r4, #4]
3401525e:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34015260:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34015264:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34015268:	4313      	orrs	r3, r2
3401526a:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
3401526c:	f009 fe36 	bl	3401eedc <HAL_GetTick>
34015270:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34015272:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34015274:	6862      	ldr	r2, [r4, #4]
34015276:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
3401527a:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
3401527e:	f040 80b7 	bne.w	340153f0 <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34015282:	f7ff fef9 	bl	34015078 <HAL_RCC_GetCpuClockFreq>
34015286:	4b3d      	ldr	r3, [pc, #244]	@ (3401537c <HAL_RCC_ClockConfig+0x270>)
34015288:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
3401528a:	6823      	ldr	r3, [r4, #0]
3401528c:	079f      	lsls	r7, r3, #30
3401528e:	f100 80b7 	bmi.w	34015400 <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34015292:	6823      	ldr	r3, [r4, #0]
34015294:	075e      	lsls	r6, r3, #29
34015296:	f100 815c 	bmi.w	34015552 <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
3401529a:	6823      	ldr	r3, [r4, #0]
3401529c:	0718      	lsls	r0, r3, #28
3401529e:	d513      	bpl.n	340152c8 <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
340152a0:	6923      	ldr	r3, [r4, #16]
340152a2:	2b07      	cmp	r3, #7
340152a4:	d904      	bls.n	340152b0 <HAL_RCC_ClockConfig+0x1a4>
340152a6:	f240 4166 	movw	r1, #1126	@ 0x466
340152aa:	4832      	ldr	r0, [pc, #200]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
340152ac:	f00a f9a8 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
340152b0:	4a31      	ldr	r2, [pc, #196]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
340152b2:	6921      	ldr	r1, [r4, #16]
340152b4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340152b6:	f003 0307 	and.w	r3, r3, #7
340152ba:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
340152bc:	bf3f      	itttt	cc
340152be:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
340152c0:	f023 0307 	biccc.w	r3, r3, #7
340152c4:	430b      	orrcc	r3, r1
340152c6:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
340152c8:	6823      	ldr	r3, [r4, #0]
340152ca:	06d9      	lsls	r1, r3, #27
340152cc:	d516      	bpl.n	340152fc <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
340152ce:	6963      	ldr	r3, [r4, #20]
340152d0:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340152d4:	d006      	beq.n	340152e4 <HAL_RCC_ClockConfig+0x1d8>
340152d6:	2b40      	cmp	r3, #64	@ 0x40
340152d8:	d004      	beq.n	340152e4 <HAL_RCC_ClockConfig+0x1d8>
340152da:	f44f 618e 	mov.w	r1, #1136	@ 0x470
340152de:	4825      	ldr	r0, [pc, #148]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
340152e0:	f00a f98e 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
340152e4:	4a24      	ldr	r2, [pc, #144]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
340152e6:	6961      	ldr	r1, [r4, #20]
340152e8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340152ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
340152ee:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
340152f0:	bf3f      	itttt	cc
340152f2:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
340152f4:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
340152f8:	430b      	orrcc	r3, r1
340152fa:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
340152fc:	6823      	ldr	r3, [r4, #0]
340152fe:	069a      	lsls	r2, r3, #26
34015300:	d517      	bpl.n	34015332 <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34015302:	69a3      	ldr	r3, [r4, #24]
34015304:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34015308:	d007      	beq.n	3401531a <HAL_RCC_ClockConfig+0x20e>
3401530a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3401530e:	d004      	beq.n	3401531a <HAL_RCC_ClockConfig+0x20e>
34015310:	f240 417a 	movw	r1, #1146	@ 0x47a
34015314:	4817      	ldr	r0, [pc, #92]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
34015316:	f00a f973 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
3401531a:	4a17      	ldr	r2, [pc, #92]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
3401531c:	69a1      	ldr	r1, [r4, #24]
3401531e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34015320:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34015324:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34015326:	bf3f      	itttt	cc
34015328:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
3401532a:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
3401532e:	430b      	orrcc	r3, r1
34015330:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34015332:	6823      	ldr	r3, [r4, #0]
34015334:	065b      	lsls	r3, r3, #25
34015336:	d517      	bpl.n	34015368 <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34015338:	69e3      	ldr	r3, [r4, #28]
3401533a:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3401533e:	d007      	beq.n	34015350 <HAL_RCC_ClockConfig+0x244>
34015340:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34015344:	d004      	beq.n	34015350 <HAL_RCC_ClockConfig+0x244>
34015346:	f240 4184 	movw	r1, #1156	@ 0x484
3401534a:	480a      	ldr	r0, [pc, #40]	@ (34015374 <HAL_RCC_ClockConfig+0x268>)
3401534c:	f00a f958 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34015350:	4a09      	ldr	r2, [pc, #36]	@ (34015378 <HAL_RCC_ClockConfig+0x26c>)
34015352:	69e1      	ldr	r1, [r4, #28]
34015354:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34015356:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
3401535a:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
3401535c:	bf3f      	itttt	cc
3401535e:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34015360:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34015364:	430b      	orrcc	r3, r1
34015366:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34015368:	4b05      	ldr	r3, [pc, #20]	@ (34015380 <HAL_RCC_ClockConfig+0x274>)
}
3401536a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
3401536e:	6818      	ldr	r0, [r3, #0]
34015370:	f009 bdca 	b.w	3401ef08 <HAL_InitTick>
34015374:	3402f6c6 	.word	0x3402f6c6
34015378:	56028000 	.word	0x56028000
3401537c:	340d0670 	.word	0x340d0670
34015380:	340d0674 	.word	0x340d0674
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34015384:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34015388:	d126      	bne.n	340153d8 <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
3401538a:	6a23      	ldr	r3, [r4, #32]
3401538c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015390:	d004      	beq.n	3401539c <HAL_RCC_ClockConfig+0x290>
34015392:	f240 31ca 	movw	r1, #970	@ 0x3ca
34015396:	487b      	ldr	r0, [pc, #492]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
34015398:	f00a f932 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
3401539c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401539e:	3b01      	subs	r3, #1
340153a0:	2bff      	cmp	r3, #255	@ 0xff
340153a2:	d904      	bls.n	340153ae <HAL_RCC_ClockConfig+0x2a2>
340153a4:	f240 31cb 	movw	r1, #971	@ 0x3cb
340153a8:	4876      	ldr	r0, [pc, #472]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
340153aa:	f00a f929 	bl	3401f600 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340153ae:	4e76      	ldr	r6, [pc, #472]	@ (34015588 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
340153b0:	6a25      	ldr	r5, [r4, #32]
340153b2:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
340153b6:	4629      	mov	r1, r5
340153b8:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340153bc:	f7ff fa52 	bl	34014864 <RCC_IC_CheckPLLSources>
340153c0:	2801      	cmp	r0, #1
340153c2:	f47f aea7 	bne.w	34015114 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
340153c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340153c8:	3b01      	subs	r3, #1
340153ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
340153ce:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
340153d2:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
340153d6:	e740      	b.n	3401525a <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
340153d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340153dc:	d105      	bne.n	340153ea <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
340153de:	f7ff f87b 	bl	340144d8 <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
340153e2:	2800      	cmp	r0, #0
340153e4:	f47f af39 	bne.w	3401525a <HAL_RCC_ClockConfig+0x14e>
340153e8:	e694      	b.n	34015114 <HAL_RCC_ClockConfig+0x8>
340153ea:	f7ff f86d 	bl	340144c8 <LL_RCC_HSI_IsReady>
340153ee:	e7f8      	b.n	340153e2 <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
340153f0:	f009 fd74 	bl	3401eedc <HAL_GetTick>
340153f4:	1b80      	subs	r0, r0, r6
340153f6:	42b8      	cmp	r0, r7
340153f8:	f67f af3b 	bls.w	34015272 <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
340153fc:	2003      	movs	r0, #3
340153fe:	e68a      	b.n	34015116 <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34015400:	68a3      	ldr	r3, [r4, #8]
34015402:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34015406:	d004      	beq.n	34015412 <HAL_RCC_ClockConfig+0x306>
34015408:	f240 4104 	movw	r1, #1028	@ 0x404
3401540c:	485d      	ldr	r0, [pc, #372]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
3401540e:	f00a f8f7 	bl	3401f600 <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34015412:	68a3      	ldr	r3, [r4, #8]
34015414:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34015418:	d11e      	bne.n	34015458 <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3401541a:	4b5b      	ldr	r3, [pc, #364]	@ (34015588 <HAL_RCC_ClockConfig+0x47c>)
3401541c:	685b      	ldr	r3, [r3, #4]
3401541e:	06dd      	lsls	r5, r3, #27
34015420:	f57f ae78 	bpl.w	34015114 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34015424:	4d58      	ldr	r5, [pc, #352]	@ (34015588 <HAL_RCC_ClockConfig+0x47c>)
34015426:	68a2      	ldr	r2, [r4, #8]
34015428:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3401542a:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
3401542e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34015432:	4313      	orrs	r3, r2
34015434:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34015436:	f009 fd51 	bl	3401eedc <HAL_GetTick>
3401543a:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
3401543c:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3401543e:	68a2      	ldr	r2, [r4, #8]
34015440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34015444:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34015448:	f43f af23 	beq.w	34015292 <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3401544c:	f009 fd46 	bl	3401eedc <HAL_GetTick>
34015450:	1b80      	subs	r0, r0, r6
34015452:	42b8      	cmp	r0, r7
34015454:	d9f2      	bls.n	3401543c <HAL_RCC_ClockConfig+0x330>
34015456:	e7d1      	b.n	340153fc <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34015458:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3401545c:	d16f      	bne.n	3401553e <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
3401545e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34015460:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015464:	d004      	beq.n	34015470 <HAL_RCC_ClockConfig+0x364>
34015466:	f240 4113 	movw	r1, #1043	@ 0x413
3401546a:	4846      	ldr	r0, [pc, #280]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
3401546c:	f00a f8c8 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34015470:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34015472:	3b01      	subs	r3, #1
34015474:	2bff      	cmp	r3, #255	@ 0xff
34015476:	d904      	bls.n	34015482 <HAL_RCC_ClockConfig+0x376>
34015478:	f240 4114 	movw	r1, #1044	@ 0x414
3401547c:	4841      	ldr	r0, [pc, #260]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
3401547e:	f00a f8bf 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34015482:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34015484:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015488:	d004      	beq.n	34015494 <HAL_RCC_ClockConfig+0x388>
3401548a:	f240 4115 	movw	r1, #1045	@ 0x415
3401548e:	483d      	ldr	r0, [pc, #244]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
34015490:	f00a f8b6 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34015494:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34015496:	3b01      	subs	r3, #1
34015498:	2bff      	cmp	r3, #255	@ 0xff
3401549a:	d904      	bls.n	340154a6 <HAL_RCC_ClockConfig+0x39a>
3401549c:	f240 4116 	movw	r1, #1046	@ 0x416
340154a0:	4838      	ldr	r0, [pc, #224]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
340154a2:	f00a f8ad 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
340154a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340154a8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340154ac:	d004      	beq.n	340154b8 <HAL_RCC_ClockConfig+0x3ac>
340154ae:	f240 4117 	movw	r1, #1047	@ 0x417
340154b2:	4834      	ldr	r0, [pc, #208]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
340154b4:	f00a f8a4 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
340154b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340154ba:	3b01      	subs	r3, #1
340154bc:	2bff      	cmp	r3, #255	@ 0xff
340154be:	d904      	bls.n	340154ca <HAL_RCC_ClockConfig+0x3be>
340154c0:	f44f 6183 	mov.w	r1, #1048	@ 0x418
340154c4:	482f      	ldr	r0, [pc, #188]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
340154c6:	f00a f89b 	bl	3401f600 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340154ca:	4d2f      	ldr	r5, [pc, #188]	@ (34015588 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
340154cc:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
340154d0:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
340154d4:	4641      	mov	r1, r8
340154d6:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340154da:	f7ff f9c3 	bl	34014864 <RCC_IC_CheckPLLSources>
340154de:	2801      	cmp	r0, #1
340154e0:	f47f ae18 	bne.w	34015114 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340154e4:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
340154e8:	6b27      	ldr	r7, [r4, #48]	@ 0x30
340154ea:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340154ee:	4639      	mov	r1, r7
340154f0:	f7ff f9b8 	bl	34014864 <RCC_IC_CheckPLLSources>
340154f4:	2801      	cmp	r0, #1
340154f6:	f47f ae0d 	bne.w	34015114 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340154fa:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
340154fe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
34015500:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34015504:	4631      	mov	r1, r6
34015506:	f7ff f9ad 	bl	34014864 <RCC_IC_CheckPLLSources>
3401550a:	2801      	cmp	r0, #1
3401550c:	f47f ae02 	bne.w	34015114 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34015510:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34015512:	3b01      	subs	r3, #1
34015514:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
34015518:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
3401551c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401551e:	3b01      	subs	r3, #1
34015520:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
34015524:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34015528:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401552a:	3b01      	subs	r3, #1
3401552c:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34015530:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34015534:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34015538:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
3401553c:	e772      	b.n	34015424 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
3401553e:	b92b      	cbnz	r3, 3401554c <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
34015540:	f7fe ffc2 	bl	340144c8 <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
34015544:	2800      	cmp	r0, #0
34015546:	f47f af6d 	bne.w	34015424 <HAL_RCC_ClockConfig+0x318>
3401554a:	e5e3      	b.n	34015114 <HAL_RCC_ClockConfig+0x8>
3401554c:	f7fe ffc4 	bl	340144d8 <LL_RCC_MSI_IsReady>
34015550:	e7f8      	b.n	34015544 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34015552:	68e3      	ldr	r3, [r4, #12]
34015554:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34015558:	d007      	beq.n	3401556a <HAL_RCC_ClockConfig+0x45e>
3401555a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3401555e:	d004      	beq.n	3401556a <HAL_RCC_ClockConfig+0x45e>
34015560:	f240 415b 	movw	r1, #1115	@ 0x45b
34015564:	4807      	ldr	r0, [pc, #28]	@ (34015584 <HAL_RCC_ClockConfig+0x478>)
34015566:	f00a f84b 	bl	3401f600 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
3401556a:	4a07      	ldr	r2, [pc, #28]	@ (34015588 <HAL_RCC_ClockConfig+0x47c>)
3401556c:	68e1      	ldr	r1, [r4, #12]
3401556e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34015570:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34015574:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34015576:	bf3f      	itttt	cc
34015578:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
3401557a:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
3401557e:	430b      	orrcc	r3, r1
34015580:	6253      	strcc	r3, [r2, #36]	@ 0x24
34015582:	e68a      	b.n	3401529a <HAL_RCC_ClockConfig+0x18e>
34015584:	3402f6c6 	.word	0x3402f6c6
34015588:	56028000 	.word	0x56028000

3401558c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3401558c:	4b05      	ldr	r3, [pc, #20]	@ (340155a4 <HAL_RCC_GetSysClockFreq+0x18>)
3401558e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34015592:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
  return RCC_GetSysClockFreq(LL_RCC_IC2_GetSource(), LL_RCC_IC2_GetDivider());
34015596:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
3401559a:	f3c1 4107 	ubfx	r1, r1, #16, #8
3401559e:	3101      	adds	r1, #1
340155a0:	f7ff b920 	b.w	340147e4 <RCC_GetSysClockFreq>
340155a4:	56028000 	.word	0x56028000

340155a8 <HAL_RCC_GetPCLK1Freq>:
{
340155a8:	b508      	push	{r3, lr}
  return LL_RCC_CALC_PCLK1_FREQ(LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()),
340155aa:	f7ff ffef 	bl	3401558c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
340155ae:	4b05      	ldr	r3, [pc, #20]	@ (340155c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
340155b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340155b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340155b4:	f3c2 5202 	ubfx	r2, r2, #20, #3
340155b8:	40d0      	lsrs	r0, r2
340155ba:	f003 0307 	and.w	r3, r3, #7
}
340155be:	40d8      	lsrs	r0, r3
340155c0:	bd08      	pop	{r3, pc}
340155c2:	bf00      	nop
340155c4:	56028000 	.word	0x56028000

340155c8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
340155c8:	4a02      	ldr	r2, [pc, #8]	@ (340155d4 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
340155ca:	6d53      	ldr	r3, [r2, #84]	@ 0x54
340155cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
340155d0:	6553      	str	r3, [r2, #84]	@ 0x54
}
340155d2:	4770      	bx	lr
340155d4:	56028000 	.word	0x56028000

340155d8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
340155d8:	4a02      	ldr	r2, [pc, #8]	@ (340155e4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
340155da:	6d53      	ldr	r3, [r2, #84]	@ 0x54
340155dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
340155e0:	6553      	str	r3, [r2, #84]	@ 0x54
}
340155e2:	4770      	bx	lr
340155e4:	56028000 	.word	0x56028000

340155e8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
340155e8:	4b02      	ldr	r3, [pc, #8]	@ (340155f4 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
340155ea:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
340155ec:	f3c0 1080 	ubfx	r0, r0, #6, #1
340155f0:	4770      	bx	lr
340155f2:	bf00      	nop
340155f4:	56028000 	.word	0x56028000

340155f8 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
340155f8:	4b02      	ldr	r3, [pc, #8]	@ (34015604 <LL_RCC_HSE_IsReady+0xc>)
340155fa:	6858      	ldr	r0, [r3, #4]
}
340155fc:	f3c0 1000 	ubfx	r0, r0, #4, #1
34015600:	4770      	bx	lr
34015602:	bf00      	nop
34015604:	56028000 	.word	0x56028000

34015608 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34015608:	4b02      	ldr	r3, [pc, #8]	@ (34015614 <LL_RCC_HSI_IsReady+0xc>)
3401560a:	6858      	ldr	r0, [r3, #4]
}
3401560c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34015610:	4770      	bx	lr
34015612:	bf00      	nop
34015614:	56028000 	.word	0x56028000

34015618 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34015618:	4b02      	ldr	r3, [pc, #8]	@ (34015624 <LL_RCC_MSI_IsReady+0xc>)
3401561a:	6858      	ldr	r0, [r3, #4]
}
3401561c:	f3c0 0080 	ubfx	r0, r0, #2, #1
34015620:	4770      	bx	lr
34015622:	bf00      	nop
34015624:	56028000 	.word	0x56028000

34015628 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34015628:	4b02      	ldr	r3, [pc, #8]	@ (34015634 <LL_RCC_LSE_IsReady+0xc>)
3401562a:	6858      	ldr	r0, [r3, #4]
}
3401562c:	f3c0 0040 	ubfx	r0, r0, #1, #1
34015630:	4770      	bx	lr
34015632:	bf00      	nop
34015634:	56028000 	.word	0x56028000

34015638 <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34015638:	4907      	ldr	r1, [pc, #28]	@ (34015658 <LL_RCC_SetClockSource+0x20>)
{
3401563a:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
3401563c:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3401563e:	f3c0 2504 	ubfx	r5, r0, #8, #5
34015642:	5863      	ldr	r3, [r4, r1]
34015644:	0e02      	lsrs	r2, r0, #24
34015646:	40aa      	lsls	r2, r5
34015648:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401564c:	ea23 0302 	bic.w	r3, r3, r2
34015650:	40a8      	lsls	r0, r5
34015652:	4303      	orrs	r3, r0
34015654:	5063      	str	r3, [r4, r1]
}
34015656:	bd30      	pop	{r4, r5, pc}
34015658:	56028144 	.word	0x56028144

3401565c <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
3401565c:	4b05      	ldr	r3, [pc, #20]	@ (34015674 <LL_RCC_GetClockSource+0x18>)
3401565e:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34015660:	58d1      	ldr	r1, [r2, r3]
34015662:	f3c0 2204 	ubfx	r2, r0, #8, #5
34015666:	0e03      	lsrs	r3, r0, #24
34015668:	4093      	lsls	r3, r2
3401566a:	400b      	ands	r3, r1
3401566c:	40d3      	lsrs	r3, r2
}
3401566e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
34015672:	4770      	bx	lr
34015674:	56028144 	.word	0x56028144

34015678 <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34015678:	4b02      	ldr	r3, [pc, #8]	@ (34015684 <LL_RCC_IC7_IsEnabled+0xc>)
3401567a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3401567e:	f3c0 1080 	ubfx	r0, r0, #6, #1
34015682:	4770      	bx	lr
34015684:	56028000 	.word	0x56028000

34015688 <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34015688:	4b03      	ldr	r3, [pc, #12]	@ (34015698 <LL_RCC_IC7_GetDivider+0x10>)
3401568a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
3401568e:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34015692:	3001      	adds	r0, #1
34015694:	4770      	bx	lr
34015696:	bf00      	nop
34015698:	56028000 	.word	0x56028000

3401569c <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
3401569c:	4b02      	ldr	r3, [pc, #8]	@ (340156a8 <LL_RCC_IC8_IsEnabled+0xc>)
3401569e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340156a2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
340156a6:	4770      	bx	lr
340156a8:	56028000 	.word	0x56028000

340156ac <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
340156ac:	4b03      	ldr	r3, [pc, #12]	@ (340156bc <LL_RCC_IC8_GetDivider+0x10>)
340156ae:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
340156b2:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340156b6:	3001      	adds	r0, #1
340156b8:	4770      	bx	lr
340156ba:	bf00      	nop
340156bc:	56028000 	.word	0x56028000

340156c0 <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
340156c0:	4b02      	ldr	r3, [pc, #8]	@ (340156cc <LL_RCC_IC9_IsEnabled+0xc>)
340156c2:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340156c6:	f3c0 2000 	ubfx	r0, r0, #8, #1
340156ca:	4770      	bx	lr
340156cc:	56028000 	.word	0x56028000

340156d0 <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
340156d0:	4b03      	ldr	r3, [pc, #12]	@ (340156e0 <LL_RCC_IC9_GetDivider+0x10>)
340156d2:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
340156d6:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340156da:	3001      	adds	r0, #1
340156dc:	4770      	bx	lr
340156de:	bf00      	nop
340156e0:	56028000 	.word	0x56028000

340156e4 <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
340156e4:	4b02      	ldr	r3, [pc, #8]	@ (340156f0 <LL_RCC_IC14_IsEnabled+0xc>)
340156e6:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340156ea:	f3c0 3040 	ubfx	r0, r0, #13, #1
340156ee:	4770      	bx	lr
340156f0:	56028000 	.word	0x56028000

340156f4 <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
340156f4:	4b03      	ldr	r3, [pc, #12]	@ (34015704 <LL_RCC_IC14_GetDivider+0x10>)
340156f6:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
340156fa:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340156fe:	3001      	adds	r0, #1
34015700:	4770      	bx	lr
34015702:	bf00      	nop
34015704:	56028000 	.word	0x56028000

34015708 <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34015708:	4b02      	ldr	r3, [pc, #8]	@ (34015714 <LL_RCC_IC15_IsEnabled+0xc>)
3401570a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3401570e:	f3c0 3080 	ubfx	r0, r0, #14, #1
34015712:	4770      	bx	lr
34015714:	56028000 	.word	0x56028000

34015718 <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34015718:	4b03      	ldr	r3, [pc, #12]	@ (34015728 <LL_RCC_IC15_GetDivider+0x10>)
3401571a:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
3401571e:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34015722:	3001      	adds	r0, #1
34015724:	4770      	bx	lr
34015726:	bf00      	nop
34015728:	56028000 	.word	0x56028000

3401572c <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
3401572c:	4b02      	ldr	r3, [pc, #8]	@ (34015738 <RCCEx_GetHCLKFreq+0xc>)
3401572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34015730:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34015734:	40d8      	lsrs	r0, r3
34015736:	4770      	bx	lr
34015738:	56028000 	.word	0x56028000

3401573c <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
3401573c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34015740:	b508      	push	{r3, lr}
  switch (PLLsource)
34015742:	d01d      	beq.n	34015780 <RCCEx_GetPLLSourceFreq+0x44>
34015744:	d80a      	bhi.n	3401575c <RCCEx_GetPLLSourceFreq+0x20>
34015746:	b970      	cbnz	r0, 34015766 <RCCEx_GetPLLSourceFreq+0x2a>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34015748:	f7ff ff5e 	bl	34015608 <LL_RCC_HSI_IsReady>
3401574c:	b148      	cbz	r0, 34015762 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401574e:	4b10      	ldr	r3, [pc, #64]	@ (34015790 <RCCEx_GetPLLSourceFreq+0x54>)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34015750:	4810      	ldr	r0, [pc, #64]	@ (34015794 <RCCEx_GetPLLSourceFreq+0x58>)
34015752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34015754:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34015758:	40d8      	lsrs	r0, r3
3401575a:	e003      	b.n	34015764 <RCCEx_GetPLLSourceFreq+0x28>
  switch (PLLsource)
3401575c:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34015760:	d014      	beq.n	3401578c <RCCEx_GetPLLSourceFreq+0x50>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34015762:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
34015764:	bd08      	pop	{r3, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34015766:	f7ff ff57 	bl	34015618 <LL_RCC_MSI_IsReady>
3401576a:	2800      	cmp	r0, #0
3401576c:	d0f9      	beq.n	34015762 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3401576e:	4b08      	ldr	r3, [pc, #32]	@ (34015790 <RCCEx_GetPLLSourceFreq+0x54>)
          pllinputfreq = MSI_VALUE;
34015770:	4809      	ldr	r0, [pc, #36]	@ (34015798 <RCCEx_GetPLLSourceFreq+0x5c>)
34015772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34015774:	f413 7f00 	tst.w	r3, #512	@ 0x200
34015778:	4b08      	ldr	r3, [pc, #32]	@ (3401579c <RCCEx_GetPLLSourceFreq+0x60>)
3401577a:	bf08      	it	eq
3401577c:	4618      	moveq	r0, r3
3401577e:	e7f1      	b.n	34015764 <RCCEx_GetPLLSourceFreq+0x28>
      if (LL_RCC_HSE_IsReady() != 0U)
34015780:	f7ff ff3a 	bl	340155f8 <LL_RCC_HSE_IsReady>
34015784:	2800      	cmp	r0, #0
34015786:	d0ec      	beq.n	34015762 <RCCEx_GetPLLSourceFreq+0x26>
        pllinputfreq = HSE_VALUE;
34015788:	4805      	ldr	r0, [pc, #20]	@ (340157a0 <RCCEx_GetPLLSourceFreq+0x64>)
3401578a:	e7eb      	b.n	34015764 <RCCEx_GetPLLSourceFreq+0x28>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
3401578c:	4805      	ldr	r0, [pc, #20]	@ (340157a4 <RCCEx_GetPLLSourceFreq+0x68>)
3401578e:	e7e9      	b.n	34015764 <RCCEx_GetPLLSourceFreq+0x28>
34015790:	56028000 	.word	0x56028000
34015794:	03d09000 	.word	0x03d09000
34015798:	00f42400 	.word	0x00f42400
3401579c:	003d0900 	.word	0x003d0900
340157a0:	02dc6c00 	.word	0x02dc6c00
340157a4:	00bb8000 	.word	0x00bb8000

340157a8 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
340157a8:	ee07 2a10 	vmov	s14, r2
340157ac:	ee06 3a10 	vmov	s12, r3
340157b0:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
340157b4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
340157b8:	eddf 5a10 	vldr	s11, [pc, #64]	@ 340157fc <RCCEx_CalcPLLFreq+0x54>
340157bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
340157c0:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
340157c4:	eea6 7a25 	vfma.f32	s14, s12, s11
340157c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
340157cc:	ee67 7a87 	vmul.f32	s15, s15, s14
340157d0:	eeb8 7a66 	vcvt.f32.u32	s14, s13
340157d4:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
340157d8:	eddd 7a00 	vldr	s15, [sp]
340157dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
340157e0:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
340157e4:	eddd 7a01 	vldr	s15, [sp, #4]
340157e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
340157ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
340157f0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
340157f4:	ee17 0a90 	vmov	r0, s15
340157f8:	4770      	bx	lr
340157fa:	bf00      	nop
340157fc:	33800000 	.word	0x33800000

34015800 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34015800:	e9d0 2300 	ldrd	r2, r3, [r0]
34015804:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
34015808:	431a      	orrs	r2, r3
{
3401580a:	b570      	push	{r4, r5, r6, lr}
3401580c:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
3401580e:	d103      	bne.n	34015818 <HAL_RCCEx_PeriphCLKConfig+0x18>
34015810:	2188      	movs	r1, #136	@ 0x88
34015812:	4861      	ldr	r0, [pc, #388]	@ (34015998 <HAL_RCCEx_PeriphCLKConfig+0x198>)
34015814:	f009 fef4 	bl	3401f600 <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34015818:	6823      	ldr	r3, [r4, #0]
3401581a:	011a      	lsls	r2, r3, #4
3401581c:	f140 808e 	bpl.w	3401593c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
34015820:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34015824:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34015828:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3401582c:	d05a      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401582e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34015832:	d057      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015834:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
34015838:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
3401583c:	d052      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401583e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
34015842:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
34015846:	d04d      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015848:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
3401584c:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
34015850:	d048      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015852:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34015856:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
3401585a:	d043      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401585c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34015860:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
34015864:	d03e      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015866:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3401586a:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
3401586e:	d039      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015870:	494a      	ldr	r1, [pc, #296]	@ (3401599c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
34015872:	428a      	cmp	r2, r1
34015874:	d036      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015876:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3401587a:	428a      	cmp	r2, r1
3401587c:	d032      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401587e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34015882:	428a      	cmp	r2, r1
34015884:	d02e      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015886:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
3401588a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3401588e:	4288      	cmp	r0, r1
34015890:	d028      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015892:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
34015896:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
3401589a:	4288      	cmp	r0, r1
3401589c:	d022      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401589e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
340158a2:	428a      	cmp	r2, r1
340158a4:	d01e      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340158a6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340158aa:	428a      	cmp	r2, r1
340158ac:	d01a      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340158ae:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340158b2:	428a      	cmp	r2, r1
340158b4:	d016      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340158b6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340158ba:	428a      	cmp	r2, r1
340158bc:	d012      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340158be:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340158c2:	428a      	cmp	r2, r1
340158c4:	d00e      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340158c6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340158ca:	428a      	cmp	r2, r1
340158cc:	d00a      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340158ce:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340158d2:	428a      	cmp	r2, r1
340158d4:	d006      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340158d6:	4a32      	ldr	r2, [pc, #200]	@ (340159a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
340158d8:	4293      	cmp	r3, r2
340158da:	d003      	beq.n	340158e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340158dc:	218e      	movs	r1, #142	@ 0x8e
340158de:	482e      	ldr	r0, [pc, #184]	@ (34015998 <HAL_RCCEx_PeriphCLKConfig+0x198>)
340158e0:	f009 fe8e 	bl	3401f600 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
340158e4:	4b2f      	ldr	r3, [pc, #188]	@ (340159a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
340158e6:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
340158ea:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340158ee:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
340158f2:	d13b      	bne.n	3401596c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
340158f4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
340158f8:	d108      	bne.n	3401590c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
340158fa:	f009 faef 	bl	3401eedc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340158fe:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
34015902:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
34015904:	f7ff fe90 	bl	34015628 <LL_RCC_LSE_IsReady>
34015908:	2800      	cmp	r0, #0
3401590a:	d03d      	beq.n	34015988 <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
3401590c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34015910:	4a24      	ldr	r2, [pc, #144]	@ (340159a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
34015912:	f403 7040 	and.w	r0, r3, #768	@ 0x300
34015916:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
3401591a:	d108      	bne.n	3401592e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
3401591c:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
34015920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34015924:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
34015928:	430b      	orrs	r3, r1
3401592a:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
3401592e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34015932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34015936:	4303      	orrs	r3, r0
34015938:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
3401593c:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3401593e:	6823      	ldr	r3, [r4, #0]
34015940:	075e      	lsls	r6, r3, #29
34015942:	d55f      	bpl.n	34015a04 <HAL_RCCEx_PeriphCLKConfig+0x204>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
34015944:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34015948:	2b07      	cmp	r3, #7
3401594a:	d903      	bls.n	34015954 <HAL_RCCEx_PeriphCLKConfig+0x154>
3401594c:	21d4      	movs	r1, #212	@ 0xd4
3401594e:	4812      	ldr	r0, [pc, #72]	@ (34015998 <HAL_RCCEx_PeriphCLKConfig+0x198>)
34015950:	f009 fe56 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34015954:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34015958:	3b03      	subs	r3, #3
3401595a:	2b04      	cmp	r3, #4
3401595c:	d848      	bhi.n	340159f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
3401595e:	e8df f013 	tbh	[pc, r3, lsl #1]
34015962:	0f27      	.short	0x0f27
34015964:	0ee10025 	.word	0x0ee10025
34015968:	0f500f04 	.word	0x0f500f04
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3401596c:	f401 7240 	and.w	r2, r1, #768	@ 0x300
34015970:	429a      	cmp	r2, r3
34015972:	d0bf      	beq.n	340158f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34015974:	4b0c      	ldr	r3, [pc, #48]	@ (340159a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
34015976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34015978:	f042 0201 	orr.w	r2, r2, #1
3401597c:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3401597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34015980:	07db      	lsls	r3, r3, #31
34015982:	d4b7      	bmi.n	340158f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
34015984:	2501      	movs	r5, #1
34015986:	e7da      	b.n	3401593e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34015988:	f009 faa8 	bl	3401eedc <HAL_GetTick>
3401598c:	1b40      	subs	r0, r0, r5
3401598e:	42b0      	cmp	r0, r6
34015990:	d9b8      	bls.n	34015904 <HAL_RCCEx_PeriphCLKConfig+0x104>
        status = ret;
34015992:	2503      	movs	r5, #3
34015994:	e7d3      	b.n	3401593e <HAL_RCCEx_PeriphCLKConfig+0x13e>
34015996:	bf00      	nop
34015998:	3402f73a 	.word	0x3402f73a
3401599c:	00010300 	.word	0x00010300
340159a0:	0003e300 	.word	0x0003e300
340159a4:	56028000 	.word	0x56028000
340159a8:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340159ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340159ae:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340159b2:	d003      	beq.n	340159bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
340159b4:	21d9      	movs	r1, #217	@ 0xd9
340159b6:	48bd      	ldr	r0, [pc, #756]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340159b8:	f009 fe22 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
340159bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340159be:	3b01      	subs	r3, #1
340159c0:	2bff      	cmp	r3, #255	@ 0xff
340159c2:	d903      	bls.n	340159cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
340159c4:	21da      	movs	r1, #218	@ 0xda
340159c6:	48b9      	ldr	r0, [pc, #740]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340159c8:	f009 fe1a 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340159cc:	4ab8      	ldr	r2, [pc, #736]	@ (34015cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340159ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340159d0:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340159d4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340159d6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340159da:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340159de:	3901      	subs	r1, #1
340159e0:	4303      	orrs	r3, r0
340159e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340159e6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340159ea:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340159ec:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340159f0:	4aaf      	ldr	r2, [pc, #700]	@ (34015cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340159f2:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
340159f6:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340159fa:	f023 0307 	bic.w	r3, r3, #7
340159fe:	430b      	orrs	r3, r1
34015a00:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34015a04:	6863      	ldr	r3, [r4, #4]
34015a06:	0258      	lsls	r0, r3, #9
34015a08:	d539      	bpl.n	34015a7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
34015a0a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
34015a0e:	4aa9      	ldr	r2, [pc, #676]	@ (34015cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
34015a10:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34015a14:	4293      	cmp	r3, r2
34015a16:	d004      	beq.n	34015a22 <HAL_RCCEx_PeriphCLKConfig+0x222>
34015a18:	f44f 7192 	mov.w	r1, #292	@ 0x124
34015a1c:	48a3      	ldr	r0, [pc, #652]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015a1e:	f009 fdef 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
34015a22:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
34015a26:	4aa4      	ldr	r2, [pc, #656]	@ (34015cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
34015a28:	4293      	cmp	r3, r2
34015a2a:	f041 8713 	bne.w	34017854 <HAL_RCCEx_PeriphCLKConfig+0x2054>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34015a2e:	69a3      	ldr	r3, [r4, #24]
34015a30:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015a34:	d004      	beq.n	34015a40 <HAL_RCCEx_PeriphCLKConfig+0x240>
34015a36:	f240 1129 	movw	r1, #297	@ 0x129
34015a3a:	489c      	ldr	r0, [pc, #624]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015a3c:	f009 fde0 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34015a40:	69e3      	ldr	r3, [r4, #28]
34015a42:	3b01      	subs	r3, #1
34015a44:	2bff      	cmp	r3, #255	@ 0xff
34015a46:	d904      	bls.n	34015a52 <HAL_RCCEx_PeriphCLKConfig+0x252>
34015a48:	f44f 7195 	mov.w	r1, #298	@ 0x12a
34015a4c:	4897      	ldr	r0, [pc, #604]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015a4e:	f009 fdd7 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34015a52:	4a97      	ldr	r2, [pc, #604]	@ (34015cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34015a54:	69e1      	ldr	r1, [r4, #28]
34015a56:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34015a5a:	69a0      	ldr	r0, [r4, #24]
34015a5c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015a60:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015a64:	3901      	subs	r1, #1
34015a66:	4303      	orrs	r3, r0
34015a68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015a6c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34015a70:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34015a72:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015a76:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
34015a7a:	f7ff fddd 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
34015a7e:	6863      	ldr	r3, [r4, #4]
34015a80:	0219      	lsls	r1, r3, #8
34015a82:	d539      	bpl.n	34015af8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
34015a84:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34015a88:	4a8c      	ldr	r2, [pc, #560]	@ (34015cbc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
34015a8a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34015a8e:	4293      	cmp	r3, r2
34015a90:	d004      	beq.n	34015a9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
34015a92:	f240 1151 	movw	r1, #337	@ 0x151
34015a96:	4885      	ldr	r0, [pc, #532]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015a98:	f009 fdb2 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34015a9c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34015aa0:	4a87      	ldr	r2, [pc, #540]	@ (34015cc0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
34015aa2:	4293      	cmp	r3, r2
34015aa4:	f041 8706 	bne.w	340178b4 <HAL_RCCEx_PeriphCLKConfig+0x20b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34015aa8:	69a3      	ldr	r3, [r4, #24]
34015aaa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015aae:	d004      	beq.n	34015aba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
34015ab0:	f44f 71ab 	mov.w	r1, #342	@ 0x156
34015ab4:	487d      	ldr	r0, [pc, #500]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015ab6:	f009 fda3 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34015aba:	69e3      	ldr	r3, [r4, #28]
34015abc:	3b01      	subs	r3, #1
34015abe:	2bff      	cmp	r3, #255	@ 0xff
34015ac0:	d904      	bls.n	34015acc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
34015ac2:	f240 1157 	movw	r1, #343	@ 0x157
34015ac6:	4879      	ldr	r0, [pc, #484]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015ac8:	f009 fd9a 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34015acc:	4a78      	ldr	r2, [pc, #480]	@ (34015cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34015ace:	69e1      	ldr	r1, [r4, #28]
34015ad0:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34015ad4:	69a0      	ldr	r0, [r4, #24]
34015ad6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015ada:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015ade:	3901      	subs	r1, #1
34015ae0:	4303      	orrs	r3, r0
34015ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015ae6:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34015aea:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34015aec:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015af0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
34015af4:	f7ff fda0 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34015af8:	6863      	ldr	r3, [r4, #4]
34015afa:	01da      	lsls	r2, r3, #7
34015afc:	d539      	bpl.n	34015b72 <HAL_RCCEx_PeriphCLKConfig+0x372>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
34015afe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
34015b02:	4a70      	ldr	r2, [pc, #448]	@ (34015cc4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
34015b04:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34015b08:	4293      	cmp	r3, r2
34015b0a:	d004      	beq.n	34015b16 <HAL_RCCEx_PeriphCLKConfig+0x316>
34015b0c:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
34015b10:	4866      	ldr	r0, [pc, #408]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015b12:	f009 fd75 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34015b16:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
34015b1a:	4a6b      	ldr	r2, [pc, #428]	@ (34015cc8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
34015b1c:	4293      	cmp	r3, r2
34015b1e:	f041 86f9 	bne.w	34017914 <HAL_RCCEx_PeriphCLKConfig+0x2114>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34015b22:	69a3      	ldr	r3, [r4, #24]
34015b24:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015b28:	d004      	beq.n	34015b34 <HAL_RCCEx_PeriphCLKConfig+0x334>
34015b2a:	f240 1183 	movw	r1, #387	@ 0x183
34015b2e:	485f      	ldr	r0, [pc, #380]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015b30:	f009 fd66 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34015b34:	69e3      	ldr	r3, [r4, #28]
34015b36:	3b01      	subs	r3, #1
34015b38:	2bff      	cmp	r3, #255	@ 0xff
34015b3a:	d904      	bls.n	34015b46 <HAL_RCCEx_PeriphCLKConfig+0x346>
34015b3c:	f44f 71c2 	mov.w	r1, #388	@ 0x184
34015b40:	485a      	ldr	r0, [pc, #360]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015b42:	f009 fd5d 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34015b46:	4a5a      	ldr	r2, [pc, #360]	@ (34015cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34015b48:	69e1      	ldr	r1, [r4, #28]
34015b4a:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34015b4e:	69a0      	ldr	r0, [r4, #24]
34015b50:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015b54:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015b58:	3901      	subs	r1, #1
34015b5a:	4303      	orrs	r3, r0
34015b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015b60:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34015b64:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34015b66:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015b6a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
34015b6e:	f7ff fd63 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34015b72:	6823      	ldr	r3, [r4, #0]
34015b74:	051b      	lsls	r3, r3, #20
34015b76:	d53c      	bpl.n	34015bf2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
34015b78:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34015b7c:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34015b80:	d004      	beq.n	34015b8c <HAL_RCCEx_PeriphCLKConfig+0x38c>
34015b82:	f240 11ab 	movw	r1, #427	@ 0x1ab
34015b86:	4849      	ldr	r0, [pc, #292]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015b88:	f009 fd3a 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34015b8c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34015b90:	2b20      	cmp	r3, #32
34015b92:	f041 86ff 	bne.w	34017994 <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34015b96:	69a3      	ldr	r3, [r4, #24]
34015b98:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015b9c:	d004      	beq.n	34015ba8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
34015b9e:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
34015ba2:	4842      	ldr	r0, [pc, #264]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015ba4:	f009 fd2c 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34015ba8:	69e3      	ldr	r3, [r4, #28]
34015baa:	3b01      	subs	r3, #1
34015bac:	2bff      	cmp	r3, #255	@ 0xff
34015bae:	d904      	bls.n	34015bba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
34015bb0:	f240 11b1 	movw	r1, #433	@ 0x1b1
34015bb4:	483d      	ldr	r0, [pc, #244]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015bb6:	f009 fd23 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34015bba:	4a3d      	ldr	r2, [pc, #244]	@ (34015cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34015bbc:	69e1      	ldr	r1, [r4, #28]
34015bbe:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34015bc2:	69a0      	ldr	r0, [r4, #24]
34015bc4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015bc8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015bcc:	3901      	subs	r1, #1
34015bce:	4303      	orrs	r3, r0
34015bd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015bd4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34015bd8:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34015bda:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34015bde:	4a34      	ldr	r2, [pc, #208]	@ (34015cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34015be0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
34015be4:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34015be8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
34015bec:	430b      	orrs	r3, r1
34015bee:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
34015bf2:	6823      	ldr	r3, [r4, #0]
34015bf4:	005e      	lsls	r6, r3, #1
34015bf6:	d539      	bpl.n	34015c6c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
34015bf8:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34015bfc:	4a33      	ldr	r2, [pc, #204]	@ (34015ccc <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
34015bfe:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34015c02:	4293      	cmp	r3, r2
34015c04:	d004      	beq.n	34015c10 <HAL_RCCEx_PeriphCLKConfig+0x410>
34015c06:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
34015c0a:	4828      	ldr	r0, [pc, #160]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015c0c:	f009 fcf8 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34015c10:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34015c14:	4a2e      	ldr	r2, [pc, #184]	@ (34015cd0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
34015c16:	4293      	cmp	r3, r2
34015c18:	f041 86ea 	bne.w	340179f0 <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34015c1c:	6a23      	ldr	r3, [r4, #32]
34015c1e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015c22:	d004      	beq.n	34015c2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
34015c24:	f240 11dd 	movw	r1, #477	@ 0x1dd
34015c28:	4820      	ldr	r0, [pc, #128]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015c2a:	f009 fce9 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34015c2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34015c30:	3b01      	subs	r3, #1
34015c32:	2bff      	cmp	r3, #255	@ 0xff
34015c34:	d904      	bls.n	34015c40 <HAL_RCCEx_PeriphCLKConfig+0x440>
34015c36:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
34015c3a:	481c      	ldr	r0, [pc, #112]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015c3c:	f009 fce0 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34015c40:	4a1b      	ldr	r2, [pc, #108]	@ (34015cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34015c42:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34015c44:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34015c48:	6a20      	ldr	r0, [r4, #32]
34015c4a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015c4e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015c52:	3901      	subs	r1, #1
34015c54:	4303      	orrs	r3, r0
34015c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015c5a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34015c5e:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34015c60:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015c64:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
34015c68:	f7ff fce6 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34015c6c:	6823      	ldr	r3, [r4, #0]
34015c6e:	2b00      	cmp	r3, #0
34015c70:	da53      	bge.n	34015d1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
34015c72:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34015c76:	4a17      	ldr	r2, [pc, #92]	@ (34015cd4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
34015c78:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34015c7c:	4293      	cmp	r3, r2
34015c7e:	d004      	beq.n	34015c8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
34015c80:	f240 2105 	movw	r1, #517	@ 0x205
34015c84:	4809      	ldr	r0, [pc, #36]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015c86:	f009 fcbb 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
34015c8a:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34015c8e:	4a12      	ldr	r2, [pc, #72]	@ (34015cd8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
34015c90:	4293      	cmp	r3, r2
34015c92:	f041 86dd 	bne.w	34017a50 <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34015c96:	6a23      	ldr	r3, [r4, #32]
34015c98:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015c9c:	d01e      	beq.n	34015cdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
34015c9e:	f240 210a 	movw	r1, #522	@ 0x20a
34015ca2:	4802      	ldr	r0, [pc, #8]	@ (34015cac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015ca4:	f009 fcac 	bl	3401f600 <assert_failed>
34015ca8:	e018      	b.n	34015cdc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
34015caa:	bf00      	nop
34015cac:	3402f73a 	.word	0x3402f73a
34015cb0:	56028000 	.word	0x56028000
34015cb4:	03000014 	.word	0x03000014
34015cb8:	03020014 	.word	0x03020014
34015cbc:	03000414 	.word	0x03000414
34015cc0:	03020414 	.word	0x03020414
34015cc4:	03000814 	.word	0x03000814
34015cc8:	03020814 	.word	0x03020814
34015ccc:	0300001c 	.word	0x0300001c
34015cd0:	0302001c 	.word	0x0302001c
34015cd4:	0300041c 	.word	0x0300041c
34015cd8:	0302041c 	.word	0x0302041c
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34015cdc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34015cde:	3b01      	subs	r3, #1
34015ce0:	2bff      	cmp	r3, #255	@ 0xff
34015ce2:	d904      	bls.n	34015cee <HAL_RCCEx_PeriphCLKConfig+0x4ee>
34015ce4:	f240 210b 	movw	r1, #523	@ 0x20b
34015ce8:	48c4      	ldr	r0, [pc, #784]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015cea:	f009 fc89 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34015cee:	4ac4      	ldr	r2, [pc, #784]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015cf0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34015cf2:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34015cf6:	6a20      	ldr	r0, [r4, #32]
34015cf8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015cfc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015d00:	3901      	subs	r1, #1
34015d02:	4303      	orrs	r3, r0
34015d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015d08:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34015d0c:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34015d0e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015d12:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
34015d16:	f7ff fc8f 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34015d1a:	6823      	ldr	r3, [r4, #0]
34015d1c:	07d8      	lsls	r0, r3, #31
34015d1e:	d54f      	bpl.n	34015dc0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
34015d20:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34015d24:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34015d28:	d006      	beq.n	34015d38 <HAL_RCCEx_PeriphCLKConfig+0x538>
34015d2a:	2b40      	cmp	r3, #64	@ 0x40
34015d2c:	d004      	beq.n	34015d38 <HAL_RCCEx_PeriphCLKConfig+0x538>
34015d2e:	f240 2132 	movw	r1, #562	@ 0x232
34015d32:	48b2      	ldr	r0, [pc, #712]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015d34:	f009 fc64 	bl	3401f600 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
34015d38:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
34015d3c:	3b01      	subs	r3, #1
34015d3e:	2bff      	cmp	r3, #255	@ 0xff
34015d40:	d904      	bls.n	34015d4c <HAL_RCCEx_PeriphCLKConfig+0x54c>
34015d42:	f240 2133 	movw	r1, #563	@ 0x233
34015d46:	48ad      	ldr	r0, [pc, #692]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015d48:	f009 fc5a 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34015d4c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34015d50:	2b20      	cmp	r3, #32
34015d52:	f041 86ad 	bne.w	34017ab0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34015d56:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34015d58:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015d5c:	d004      	beq.n	34015d68 <HAL_RCCEx_PeriphCLKConfig+0x568>
34015d5e:	f44f 710e 	mov.w	r1, #568	@ 0x238
34015d62:	48a6      	ldr	r0, [pc, #664]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015d64:	f009 fc4c 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34015d68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34015d6a:	3b01      	subs	r3, #1
34015d6c:	2bff      	cmp	r3, #255	@ 0xff
34015d6e:	d904      	bls.n	34015d7a <HAL_RCCEx_PeriphCLKConfig+0x57a>
34015d70:	f240 2139 	movw	r1, #569	@ 0x239
34015d74:	48a1      	ldr	r0, [pc, #644]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015d76:	f009 fc43 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34015d7a:	4aa1      	ldr	r2, [pc, #644]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015d7c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34015d7e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34015d82:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34015d84:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015d88:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015d8c:	3901      	subs	r1, #1
34015d8e:	4303      	orrs	r3, r0
34015d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015d94:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34015d98:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34015d9a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
34015d9e:	4998      	ldr	r1, [pc, #608]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015da0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
34015da4:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
34015da8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
34015dac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
34015db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
34015db4:	3a01      	subs	r2, #1
34015db6:	4303      	orrs	r3, r0
34015db8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34015dbc:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34015dc0:	6823      	ldr	r3, [r4, #0]
34015dc2:	0799      	lsls	r1, r3, #30
34015dc4:	d53b      	bpl.n	34015e3e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
34015dc6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34015dca:	2b07      	cmp	r3, #7
34015dcc:	d904      	bls.n	34015dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
34015dce:	f240 2161 	movw	r1, #609	@ 0x261
34015dd2:	488a      	ldr	r0, [pc, #552]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015dd4:	f009 fc14 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34015dd8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34015ddc:	2b02      	cmp	r3, #2
34015dde:	f041 8695 	bne.w	34017b0c <HAL_RCCEx_PeriphCLKConfig+0x230c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34015de2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34015de4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015de8:	d004      	beq.n	34015df4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
34015dea:	f240 2166 	movw	r1, #614	@ 0x266
34015dee:	4883      	ldr	r0, [pc, #524]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015df0:	f009 fc06 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34015df4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34015df6:	3b01      	subs	r3, #1
34015df8:	2bff      	cmp	r3, #255	@ 0xff
34015dfa:	d904      	bls.n	34015e06 <HAL_RCCEx_PeriphCLKConfig+0x606>
34015dfc:	f240 2167 	movw	r1, #615	@ 0x267
34015e00:	487e      	ldr	r0, [pc, #504]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015e02:	f009 fbfd 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34015e06:	4a7e      	ldr	r2, [pc, #504]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015e08:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34015e0a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34015e0e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34015e10:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015e14:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015e18:	3901      	subs	r1, #1
34015e1a:	4303      	orrs	r3, r0
34015e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015e20:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34015e24:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34015e26:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34015e2a:	4a75      	ldr	r2, [pc, #468]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015e2c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
34015e30:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34015e34:	f023 0307 	bic.w	r3, r3, #7
34015e38:	430b      	orrs	r3, r1
34015e3a:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
34015e3e:	6823      	ldr	r3, [r4, #0]
34015e40:	071a      	lsls	r2, r3, #28
34015e42:	d528      	bpl.n	34015e96 <HAL_RCCEx_PeriphCLKConfig+0x696>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
34015e44:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34015e48:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015e4c:	d004      	beq.n	34015e58 <HAL_RCCEx_PeriphCLKConfig+0x658>
34015e4e:	f240 218e 	movw	r1, #654	@ 0x28e
34015e52:	486a      	ldr	r0, [pc, #424]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015e54:	f009 fbd4 	bl	3401f600 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
34015e58:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
34015e5c:	3b01      	subs	r3, #1
34015e5e:	2bff      	cmp	r3, #255	@ 0xff
34015e60:	d904      	bls.n	34015e6c <HAL_RCCEx_PeriphCLKConfig+0x66c>
34015e62:	f240 218f 	movw	r1, #655	@ 0x28f
34015e66:	4865      	ldr	r0, [pc, #404]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015e68:	f009 fbca 	bl	3401f600 <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34015e6c:	4a64      	ldr	r2, [pc, #400]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015e6e:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
34015e72:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
34015e76:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
34015e7a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015e7e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015e82:	3901      	subs	r1, #1
34015e84:	4303      	orrs	r3, r0
34015e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015e8a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34015e8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34015e92:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34015e96:	6823      	ldr	r3, [r4, #0]
34015e98:	06db      	lsls	r3, r3, #27
34015e9a:	d542      	bpl.n	34015f22 <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
34015e9c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34015ea0:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34015ea4:	d004      	beq.n	34015eb0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
34015ea6:	f240 219d 	movw	r1, #669	@ 0x29d
34015eaa:	4854      	ldr	r0, [pc, #336]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015eac:	f009 fba8 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34015eb0:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34015eb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34015eb8:	f041 8656 	bne.w	34017b68 <HAL_RCCEx_PeriphCLKConfig+0x2368>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
34015ebc:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34015ec0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015ec4:	d004      	beq.n	34015ed0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
34015ec6:	f240 21a2 	movw	r1, #674	@ 0x2a2
34015eca:	484c      	ldr	r0, [pc, #304]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015ecc:	f009 fb98 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
34015ed0:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
34015ed4:	3b01      	subs	r3, #1
34015ed6:	2bff      	cmp	r3, #255	@ 0xff
34015ed8:	d904      	bls.n	34015ee4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
34015eda:	f240 21a3 	movw	r1, #675	@ 0x2a3
34015ede:	4847      	ldr	r0, [pc, #284]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015ee0:	f009 fb8e 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34015ee4:	4a46      	ldr	r2, [pc, #280]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015ee6:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
34015eea:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
34015eee:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
34015ef2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015ef6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015efa:	3901      	subs	r1, #1
34015efc:	4303      	orrs	r3, r0
34015efe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015f02:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34015f06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34015f0a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34015f0e:	4a3c      	ldr	r2, [pc, #240]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015f10:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
34015f14:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34015f18:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34015f1c:	430b      	orrs	r3, r1
34015f1e:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34015f22:	6823      	ldr	r3, [r4, #0]
34015f24:	069e      	lsls	r6, r3, #26
34015f26:	d53e      	bpl.n	34015fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
34015f28:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34015f2c:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34015f30:	d004      	beq.n	34015f3c <HAL_RCCEx_PeriphCLKConfig+0x73c>
34015f32:	f240 21bd 	movw	r1, #701	@ 0x2bd
34015f36:	4831      	ldr	r0, [pc, #196]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015f38:	f009 fb62 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34015f3c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34015f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34015f44:	f041 8619 	bne.w	34017b7a <HAL_RCCEx_PeriphCLKConfig+0x237a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
34015f48:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34015f4a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015f4e:	d004      	beq.n	34015f5a <HAL_RCCEx_PeriphCLKConfig+0x75a>
34015f50:	f240 21c2 	movw	r1, #706	@ 0x2c2
34015f54:	4829      	ldr	r0, [pc, #164]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015f56:	f009 fb53 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34015f5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34015f5c:	3b01      	subs	r3, #1
34015f5e:	2bff      	cmp	r3, #255	@ 0xff
34015f60:	d904      	bls.n	34015f6c <HAL_RCCEx_PeriphCLKConfig+0x76c>
34015f62:	f240 21c3 	movw	r1, #707	@ 0x2c3
34015f66:	4825      	ldr	r0, [pc, #148]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015f68:	f009 fb4a 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34015f6c:	4a24      	ldr	r2, [pc, #144]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015f6e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
34015f70:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
34015f74:	6e20      	ldr	r0, [r4, #96]	@ 0x60
34015f76:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015f7a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015f7e:	3901      	subs	r1, #1
34015f80:	4303      	orrs	r3, r0
34015f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015f86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34015f8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34015f8e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34015f92:	4a1b      	ldr	r2, [pc, #108]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015f94:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34015f98:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34015f9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
34015fa0:	430b      	orrs	r3, r1
34015fa2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34015fa6:	6823      	ldr	r3, [r4, #0]
34015fa8:	0658      	lsls	r0, r3, #25
34015faa:	d516      	bpl.n	34015fda <HAL_RCCEx_PeriphCLKConfig+0x7da>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
34015fac:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
34015fb0:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
34015fb4:	d007      	beq.n	34015fc6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34015fb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34015fba:	d004      	beq.n	34015fc6 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34015fbc:	f240 21dd 	movw	r1, #733	@ 0x2dd
34015fc0:	480e      	ldr	r0, [pc, #56]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015fc2:	f009 fb1d 	bl	3401f600 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34015fc6:	4a0e      	ldr	r2, [pc, #56]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015fc8:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
34015fcc:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34015fd0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34015fd4:	430b      	orrs	r3, r1
34015fd6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34015fda:	6823      	ldr	r3, [r4, #0]
34015fdc:	0619      	lsls	r1, r3, #24
34015fde:	d518      	bpl.n	34016012 <HAL_RCCEx_PeriphCLKConfig+0x812>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
34015fe0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
34015fe4:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
34015fe8:	d004      	beq.n	34015ff4 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
34015fea:	f240 21e7 	movw	r1, #743	@ 0x2e7
34015fee:	4803      	ldr	r0, [pc, #12]	@ (34015ffc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015ff0:	f009 fb06 	bl	3401f600 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34015ff4:	4a02      	ldr	r2, [pc, #8]	@ (34016000 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015ff6:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
34015ffa:	e003      	b.n	34016004 <HAL_RCCEx_PeriphCLKConfig+0x804>
34015ffc:	3402f73a 	.word	0x3402f73a
34016000:	56028000 	.word	0x56028000
34016004:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34016008:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3401600c:	430b      	orrs	r3, r1
3401600e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34016012:	6823      	ldr	r3, [r4, #0]
34016014:	05da      	lsls	r2, r3, #23
34016016:	d513      	bpl.n	34016040 <HAL_RCCEx_PeriphCLKConfig+0x840>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
34016018:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
3401601c:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34016020:	d004      	beq.n	3401602c <HAL_RCCEx_PeriphCLKConfig+0x82c>
34016022:	f240 21f1 	movw	r1, #753	@ 0x2f1
34016026:	48c1      	ldr	r0, [pc, #772]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016028:	f009 faea 	bl	3401f600 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
3401602c:	4ac0      	ldr	r2, [pc, #768]	@ (34016330 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
3401602e:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
34016032:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34016036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3401603a:	430b      	orrs	r3, r1
3401603c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34016040:	6823      	ldr	r3, [r4, #0]
34016042:	059b      	lsls	r3, r3, #22
34016044:	d54b      	bpl.n	340160de <HAL_RCCEx_PeriphCLKConfig+0x8de>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34016046:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
3401604a:	2b03      	cmp	r3, #3
3401604c:	d904      	bls.n	34016058 <HAL_RCCEx_PeriphCLKConfig+0x858>
3401604e:	f240 21fb 	movw	r1, #763	@ 0x2fb
34016052:	48b6      	ldr	r0, [pc, #728]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016054:	f009 fad4 	bl	3401f600 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34016058:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
3401605c:	3b01      	subs	r3, #1
3401605e:	2b0f      	cmp	r3, #15
34016060:	d904      	bls.n	3401606c <HAL_RCCEx_PeriphCLKConfig+0x86c>
34016062:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
34016066:	48b1      	ldr	r0, [pc, #708]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016068:	f009 faca 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
3401606c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34016070:	2b02      	cmp	r3, #2
34016072:	f041 858b 	bne.w	34017b8c <HAL_RCCEx_PeriphCLKConfig+0x238c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
34016076:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
34016078:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401607c:	d004      	beq.n	34016088 <HAL_RCCEx_PeriphCLKConfig+0x888>
3401607e:	f240 3101 	movw	r1, #769	@ 0x301
34016082:	48aa      	ldr	r0, [pc, #680]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016084:	f009 fabc 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
34016088:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
3401608a:	3b01      	subs	r3, #1
3401608c:	2bff      	cmp	r3, #255	@ 0xff
3401608e:	d904      	bls.n	3401609a <HAL_RCCEx_PeriphCLKConfig+0x89a>
34016090:	f240 3102 	movw	r1, #770	@ 0x302
34016094:	48a5      	ldr	r0, [pc, #660]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016096:	f009 fab3 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3401609a:	4aa5      	ldr	r2, [pc, #660]	@ (34016330 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
3401609c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
3401609e:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
340160a2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
340160a4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340160a8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340160ac:	3901      	subs	r1, #1
340160ae:	4303      	orrs	r3, r0
340160b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340160b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
340160b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
340160bc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
340160c0:	499b      	ldr	r1, [pc, #620]	@ (34016330 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
340160c2:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
340160c6:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
340160ca:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
340160ce:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
340160d2:	3a01      	subs	r2, #1
340160d4:	4303      	orrs	r3, r0
340160d6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
340160da:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
340160de:	6823      	ldr	r3, [r4, #0]
340160e0:	055e      	lsls	r6, r3, #21
340160e2:	d540      	bpl.n	34016166 <HAL_RCCEx_PeriphCLKConfig+0x966>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
340160e4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
340160e8:	2b03      	cmp	r3, #3
340160ea:	d904      	bls.n	340160f6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
340160ec:	f240 311d 	movw	r1, #797	@ 0x31d
340160f0:	488e      	ldr	r0, [pc, #568]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340160f2:	f009 fa85 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
340160f6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
340160fa:	2b02      	cmp	r3, #2
340160fc:	f041 854e 	bne.w	34017b9c <HAL_RCCEx_PeriphCLKConfig+0x239c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34016100:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34016104:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016108:	d004      	beq.n	34016114 <HAL_RCCEx_PeriphCLKConfig+0x914>
3401610a:	f240 3122 	movw	r1, #802	@ 0x322
3401610e:	4887      	ldr	r0, [pc, #540]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016110:	f009 fa76 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34016114:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34016118:	3b01      	subs	r3, #1
3401611a:	2bff      	cmp	r3, #255	@ 0xff
3401611c:	d904      	bls.n	34016128 <HAL_RCCEx_PeriphCLKConfig+0x928>
3401611e:	f240 3123 	movw	r1, #803	@ 0x323
34016122:	4882      	ldr	r0, [pc, #520]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016124:	f009 fa6c 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34016128:	4a81      	ldr	r2, [pc, #516]	@ (34016330 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
3401612a:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
3401612e:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34016132:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34016136:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401613a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401613e:	3901      	subs	r1, #1
34016140:	4303      	orrs	r3, r0
34016142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016146:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
3401614a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
3401614e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34016152:	4a77      	ldr	r2, [pc, #476]	@ (34016330 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34016154:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
34016158:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
3401615c:	f023 0303 	bic.w	r3, r3, #3
34016160:	430b      	orrs	r3, r1
34016162:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34016166:	6823      	ldr	r3, [r4, #0]
34016168:	04d8      	lsls	r0, r3, #19
3401616a:	d540      	bpl.n	340161ee <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
3401616c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34016170:	4a70      	ldr	r2, [pc, #448]	@ (34016334 <HAL_RCCEx_PeriphCLKConfig+0xb34>)
34016172:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016176:	4291      	cmp	r1, r2
34016178:	d00a      	beq.n	34016190 <HAL_RCCEx_PeriphCLKConfig+0x990>
3401617a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401617e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016182:	4293      	cmp	r3, r2
34016184:	d004      	beq.n	34016190 <HAL_RCCEx_PeriphCLKConfig+0x990>
34016186:	f240 313d 	movw	r1, #829	@ 0x33d
3401618a:	4868      	ldr	r0, [pc, #416]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3401618c:	f009 fa38 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34016190:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34016194:	4a68      	ldr	r2, [pc, #416]	@ (34016338 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
34016196:	4293      	cmp	r3, r2
34016198:	f041 8508 	bne.w	34017bac <HAL_RCCEx_PeriphCLKConfig+0x23ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3401619c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3401619e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340161a2:	d004      	beq.n	340161ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
340161a4:	f240 3142 	movw	r1, #834	@ 0x342
340161a8:	4860      	ldr	r0, [pc, #384]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340161aa:	f009 fa29 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340161ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340161b0:	3b01      	subs	r3, #1
340161b2:	2bff      	cmp	r3, #255	@ 0xff
340161b4:	d904      	bls.n	340161c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
340161b6:	f240 3143 	movw	r1, #835	@ 0x343
340161ba:	485c      	ldr	r0, [pc, #368]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340161bc:	f009 fa20 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340161c0:	4a5b      	ldr	r2, [pc, #364]	@ (34016330 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
340161c2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340161c4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340161c8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340161ca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340161ce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340161d2:	3901      	subs	r1, #1
340161d4:	4303      	orrs	r3, r0
340161d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340161da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340161de:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340161e2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340161e6:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
340161ea:	f7ff fa25 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
340161ee:	6823      	ldr	r3, [r4, #0]
340161f0:	0499      	lsls	r1, r3, #18
340161f2:	d540      	bpl.n	34016276 <HAL_RCCEx_PeriphCLKConfig+0xa76>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
340161f4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
340161f8:	4a50      	ldr	r2, [pc, #320]	@ (3401633c <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
340161fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340161fe:	4291      	cmp	r1, r2
34016200:	d00a      	beq.n	34016218 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34016202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34016206:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401620a:	4293      	cmp	r3, r2
3401620c:	d004      	beq.n	34016218 <HAL_RCCEx_PeriphCLKConfig+0xa18>
3401620e:	f240 316a 	movw	r1, #874	@ 0x36a
34016212:	4846      	ldr	r0, [pc, #280]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016214:	f009 f9f4 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34016218:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
3401621c:	4a48      	ldr	r2, [pc, #288]	@ (34016340 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
3401621e:	4293      	cmp	r3, r2
34016220:	f041 84f5 	bne.w	34017c0e <HAL_RCCEx_PeriphCLKConfig+0x240e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34016224:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34016226:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401622a:	d004      	beq.n	34016236 <HAL_RCCEx_PeriphCLKConfig+0xa36>
3401622c:	f240 316f 	movw	r1, #879	@ 0x36f
34016230:	483e      	ldr	r0, [pc, #248]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016232:	f009 f9e5 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34016236:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34016238:	3b01      	subs	r3, #1
3401623a:	2bff      	cmp	r3, #255	@ 0xff
3401623c:	d904      	bls.n	34016248 <HAL_RCCEx_PeriphCLKConfig+0xa48>
3401623e:	f44f 715c 	mov.w	r1, #880	@ 0x370
34016242:	483a      	ldr	r0, [pc, #232]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016244:	f009 f9dc 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34016248:	4a39      	ldr	r2, [pc, #228]	@ (34016330 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
3401624a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
3401624c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34016250:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34016252:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016256:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401625a:	3901      	subs	r1, #1
3401625c:	4303      	orrs	r3, r0
3401625e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016262:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34016266:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3401626a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401626e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34016272:	f7ff f9e1 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34016276:	6823      	ldr	r3, [r4, #0]
34016278:	045a      	lsls	r2, r3, #17
3401627a:	d540      	bpl.n	340162fe <HAL_RCCEx_PeriphCLKConfig+0xafe>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
3401627c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34016280:	4a30      	ldr	r2, [pc, #192]	@ (34016344 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
34016282:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016286:	4291      	cmp	r1, r2
34016288:	d00a      	beq.n	340162a0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
3401628a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401628e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016292:	4293      	cmp	r3, r2
34016294:	d004      	beq.n	340162a0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34016296:	f240 3197 	movw	r1, #919	@ 0x397
3401629a:	4824      	ldr	r0, [pc, #144]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3401629c:	f009 f9b0 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
340162a0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340162a4:	4a28      	ldr	r2, [pc, #160]	@ (34016348 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
340162a6:	4293      	cmp	r3, r2
340162a8:	f041 84f6 	bne.w	34017c98 <HAL_RCCEx_PeriphCLKConfig+0x2498>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
340162ac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
340162ae:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340162b2:	d004      	beq.n	340162be <HAL_RCCEx_PeriphCLKConfig+0xabe>
340162b4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
340162b8:	481c      	ldr	r0, [pc, #112]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340162ba:	f009 f9a1 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340162be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340162c0:	3b01      	subs	r3, #1
340162c2:	2bff      	cmp	r3, #255	@ 0xff
340162c4:	d904      	bls.n	340162d0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
340162c6:	f240 319d 	movw	r1, #925	@ 0x39d
340162ca:	4818      	ldr	r0, [pc, #96]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340162cc:	f009 f998 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340162d0:	4a17      	ldr	r2, [pc, #92]	@ (34016330 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
340162d2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340162d4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340162d8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340162da:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340162de:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340162e2:	3901      	subs	r1, #1
340162e4:	4303      	orrs	r3, r0
340162e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340162ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340162ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340162f2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340162f6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
340162fa:	f7ff f99d 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
340162fe:	6823      	ldr	r3, [r4, #0]
34016300:	041b      	lsls	r3, r3, #16
34016302:	d554      	bpl.n	340163ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34016304:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34016308:	4a10      	ldr	r2, [pc, #64]	@ (3401634c <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
3401630a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401630e:	4291      	cmp	r1, r2
34016310:	d01e      	beq.n	34016350 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34016312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34016316:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401631a:	4293      	cmp	r3, r2
3401631c:	d018      	beq.n	34016350 <HAL_RCCEx_PeriphCLKConfig+0xb50>
3401631e:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34016322:	4802      	ldr	r0, [pc, #8]	@ (3401632c <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016324:	f009 f96c 	bl	3401f600 <assert_failed>
34016328:	e012      	b.n	34016350 <HAL_RCCEx_PeriphCLKConfig+0xb50>
3401632a:	bf00      	nop
3401632c:	3402f73a 	.word	0x3402f73a
34016330:	56028000 	.word	0x56028000
34016334:	0700000c 	.word	0x0700000c
34016338:	0702000c 	.word	0x0702000c
3401633c:	0700040c 	.word	0x0700040c
34016340:	0702040c 	.word	0x0702040c
34016344:	0700080c 	.word	0x0700080c
34016348:	0702080c 	.word	0x0702080c
3401634c:	07000c0c 	.word	0x07000c0c
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34016350:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34016354:	4abd      	ldr	r2, [pc, #756]	@ (3401664c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
34016356:	4293      	cmp	r3, r2
34016358:	f041 84cf 	bne.w	34017cfa <HAL_RCCEx_PeriphCLKConfig+0x24fa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3401635c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3401635e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016362:	d004      	beq.n	3401636e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
34016364:	f240 31c9 	movw	r1, #969	@ 0x3c9
34016368:	48b9      	ldr	r0, [pc, #740]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401636a:	f009 f949 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3401636e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34016370:	3b01      	subs	r3, #1
34016372:	2bff      	cmp	r3, #255	@ 0xff
34016374:	d904      	bls.n	34016380 <HAL_RCCEx_PeriphCLKConfig+0xb80>
34016376:	f240 31ca 	movw	r1, #970	@ 0x3ca
3401637a:	48b5      	ldr	r0, [pc, #724]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401637c:	f009 f940 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34016380:	4ab4      	ldr	r2, [pc, #720]	@ (34016654 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34016382:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34016384:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34016388:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3401638a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401638e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016392:	3901      	subs	r1, #1
34016394:	4303      	orrs	r3, r0
34016396:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401639a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3401639e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340163a2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340163a6:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
340163aa:	f7ff f945 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
340163ae:	6823      	ldr	r3, [r4, #0]
340163b0:	03de      	lsls	r6, r3, #15
340163b2:	d540      	bpl.n	34016436 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
340163b4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
340163b8:	4aa7      	ldr	r2, [pc, #668]	@ (34016658 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
340163ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340163be:	4291      	cmp	r1, r2
340163c0:	d00a      	beq.n	340163d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
340163c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340163c6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340163ca:	4293      	cmp	r3, r2
340163cc:	d004      	beq.n	340163d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
340163ce:	f240 31f1 	movw	r1, #1009	@ 0x3f1
340163d2:	489f      	ldr	r0, [pc, #636]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340163d4:	f009 f914 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
340163d8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
340163dc:	4a9f      	ldr	r2, [pc, #636]	@ (3401665c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
340163de:	4293      	cmp	r3, r2
340163e0:	f041 84bc 	bne.w	34017d5c <HAL_RCCEx_PeriphCLKConfig+0x255c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
340163e4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
340163e6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340163ea:	d004      	beq.n	340163f6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
340163ec:	f240 31f6 	movw	r1, #1014	@ 0x3f6
340163f0:	4897      	ldr	r0, [pc, #604]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340163f2:	f009 f905 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340163f6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340163f8:	3b01      	subs	r3, #1
340163fa:	2bff      	cmp	r3, #255	@ 0xff
340163fc:	d904      	bls.n	34016408 <HAL_RCCEx_PeriphCLKConfig+0xc08>
340163fe:	f240 31f7 	movw	r1, #1015	@ 0x3f7
34016402:	4893      	ldr	r0, [pc, #588]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016404:	f009 f8fc 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34016408:	4a92      	ldr	r2, [pc, #584]	@ (34016654 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
3401640a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
3401640c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34016410:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34016412:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016416:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401641a:	3901      	subs	r1, #1
3401641c:	4303      	orrs	r3, r0
3401641e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016422:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34016426:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3401642a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401642e:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34016432:	f7ff f901 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34016436:	6823      	ldr	r3, [r4, #0]
34016438:	0398      	lsls	r0, r3, #14
3401643a:	d540      	bpl.n	340164be <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
3401643c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34016440:	4a87      	ldr	r2, [pc, #540]	@ (34016660 <HAL_RCCEx_PeriphCLKConfig+0xe60>)
34016442:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016446:	4291      	cmp	r1, r2
34016448:	d00a      	beq.n	34016460 <HAL_RCCEx_PeriphCLKConfig+0xc60>
3401644a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401644e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016452:	4293      	cmp	r3, r2
34016454:	d004      	beq.n	34016460 <HAL_RCCEx_PeriphCLKConfig+0xc60>
34016456:	f240 411e 	movw	r1, #1054	@ 0x41e
3401645a:	487d      	ldr	r0, [pc, #500]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401645c:	f009 f8d0 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34016460:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34016464:	4a7f      	ldr	r2, [pc, #508]	@ (34016664 <HAL_RCCEx_PeriphCLKConfig+0xe64>)
34016466:	4293      	cmp	r3, r2
34016468:	f041 84a9 	bne.w	34017dbe <HAL_RCCEx_PeriphCLKConfig+0x25be>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
3401646c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3401646e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016472:	d004      	beq.n	3401647e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
34016474:	f240 4123 	movw	r1, #1059	@ 0x423
34016478:	4875      	ldr	r0, [pc, #468]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401647a:	f009 f8c1 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3401647e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34016480:	3b01      	subs	r3, #1
34016482:	2bff      	cmp	r3, #255	@ 0xff
34016484:	d904      	bls.n	34016490 <HAL_RCCEx_PeriphCLKConfig+0xc90>
34016486:	f240 4124 	movw	r1, #1060	@ 0x424
3401648a:	4871      	ldr	r0, [pc, #452]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401648c:	f009 f8b8 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34016490:	4a70      	ldr	r2, [pc, #448]	@ (34016654 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34016492:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34016494:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34016498:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3401649a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401649e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340164a2:	3901      	subs	r1, #1
340164a4:	4303      	orrs	r3, r0
340164a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340164aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340164ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340164b2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340164b6:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
340164ba:	f7ff f8bd 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
340164be:	6823      	ldr	r3, [r4, #0]
340164c0:	0359      	lsls	r1, r3, #13
340164c2:	d540      	bpl.n	34016546 <HAL_RCCEx_PeriphCLKConfig+0xd46>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
340164c4:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
340164c8:	4a67      	ldr	r2, [pc, #412]	@ (34016668 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
340164ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340164ce:	4291      	cmp	r1, r2
340164d0:	d00a      	beq.n	340164e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
340164d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340164d6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340164da:	4293      	cmp	r3, r2
340164dc:	d004      	beq.n	340164e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
340164de:	f240 414b 	movw	r1, #1099	@ 0x44b
340164e2:	485b      	ldr	r0, [pc, #364]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340164e4:	f009 f88c 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
340164e8:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
340164ec:	4a5f      	ldr	r2, [pc, #380]	@ (3401666c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
340164ee:	4293      	cmp	r3, r2
340164f0:	f041 8496 	bne.w	34017e20 <HAL_RCCEx_PeriphCLKConfig+0x2620>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340164f4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340164f6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340164fa:	d004      	beq.n	34016506 <HAL_RCCEx_PeriphCLKConfig+0xd06>
340164fc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34016500:	4853      	ldr	r0, [pc, #332]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016502:	f009 f87d 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34016506:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34016508:	3b01      	subs	r3, #1
3401650a:	2bff      	cmp	r3, #255	@ 0xff
3401650c:	d904      	bls.n	34016518 <HAL_RCCEx_PeriphCLKConfig+0xd18>
3401650e:	f240 4151 	movw	r1, #1105	@ 0x451
34016512:	484f      	ldr	r0, [pc, #316]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016514:	f009 f874 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34016518:	4a4e      	ldr	r2, [pc, #312]	@ (34016654 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
3401651a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3401651c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34016520:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34016522:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016526:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401652a:	3901      	subs	r1, #1
3401652c:	4303      	orrs	r3, r0
3401652e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016532:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34016536:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3401653a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401653e:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
34016542:	f7ff f879 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34016546:	6823      	ldr	r3, [r4, #0]
34016548:	031a      	lsls	r2, r3, #12
3401654a:	d540      	bpl.n	340165ce <HAL_RCCEx_PeriphCLKConfig+0xdce>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
3401654c:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34016550:	4a47      	ldr	r2, [pc, #284]	@ (34016670 <HAL_RCCEx_PeriphCLKConfig+0xe70>)
34016552:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016556:	4291      	cmp	r1, r2
34016558:	d00a      	beq.n	34016570 <HAL_RCCEx_PeriphCLKConfig+0xd70>
3401655a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401655e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016562:	4293      	cmp	r3, r2
34016564:	d004      	beq.n	34016570 <HAL_RCCEx_PeriphCLKConfig+0xd70>
34016566:	f240 416b 	movw	r1, #1131	@ 0x46b
3401656a:	4839      	ldr	r0, [pc, #228]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401656c:	f009 f848 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34016570:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34016574:	4a3f      	ldr	r2, [pc, #252]	@ (34016674 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
34016576:	4293      	cmp	r3, r2
34016578:	f041 845b 	bne.w	34017e32 <HAL_RCCEx_PeriphCLKConfig+0x2632>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3401657c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3401657e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016582:	d004      	beq.n	3401658e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
34016584:	f44f 618e 	mov.w	r1, #1136	@ 0x470
34016588:	4831      	ldr	r0, [pc, #196]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401658a:	f009 f839 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3401658e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34016590:	3b01      	subs	r3, #1
34016592:	2bff      	cmp	r3, #255	@ 0xff
34016594:	d904      	bls.n	340165a0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
34016596:	f240 4171 	movw	r1, #1137	@ 0x471
3401659a:	482d      	ldr	r0, [pc, #180]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401659c:	f009 f830 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340165a0:	4a2c      	ldr	r2, [pc, #176]	@ (34016654 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340165a2:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340165a4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340165a8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340165aa:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340165ae:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340165b2:	3901      	subs	r1, #1
340165b4:	4303      	orrs	r3, r0
340165b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340165ba:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340165be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340165c2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340165c6:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
340165ca:	f7ff f835 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
340165ce:	6823      	ldr	r3, [r4, #0]
340165d0:	02db      	lsls	r3, r3, #11
340165d2:	d55b      	bpl.n	3401668c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
340165d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
340165d8:	4a27      	ldr	r2, [pc, #156]	@ (34016678 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
340165da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340165de:	4291      	cmp	r1, r2
340165e0:	d00a      	beq.n	340165f8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
340165e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340165e6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340165ea:	4293      	cmp	r3, r2
340165ec:	d004      	beq.n	340165f8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
340165ee:	f240 418b 	movw	r1, #1163	@ 0x48b
340165f2:	4817      	ldr	r0, [pc, #92]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340165f4:	f009 f804 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
340165f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
340165fc:	4a1f      	ldr	r2, [pc, #124]	@ (3401667c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
340165fe:	4293      	cmp	r3, r2
34016600:	f041 8420 	bne.w	34017e44 <HAL_RCCEx_PeriphCLKConfig+0x2644>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34016604:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34016606:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401660a:	d004      	beq.n	34016616 <HAL_RCCEx_PeriphCLKConfig+0xe16>
3401660c:	f44f 6192 	mov.w	r1, #1168	@ 0x490
34016610:	480f      	ldr	r0, [pc, #60]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016612:	f008 fff5 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34016616:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34016618:	3b01      	subs	r3, #1
3401661a:	2bff      	cmp	r3, #255	@ 0xff
3401661c:	d904      	bls.n	34016628 <HAL_RCCEx_PeriphCLKConfig+0xe28>
3401661e:	f240 4191 	movw	r1, #1169	@ 0x491
34016622:	480b      	ldr	r0, [pc, #44]	@ (34016650 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016624:	f008 ffec 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34016628:	4a0a      	ldr	r2, [pc, #40]	@ (34016654 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
3401662a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3401662c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34016630:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34016632:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016636:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401663a:	3901      	subs	r1, #1
3401663c:	4303      	orrs	r3, r0
3401663e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016642:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34016646:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3401664a:	e019      	b.n	34016680 <HAL_RCCEx_PeriphCLKConfig+0xe80>
3401664c:	07020c0c 	.word	0x07020c0c
34016650:	3402f73a 	.word	0x3402f73a
34016654:	56028000 	.word	0x56028000
34016658:	0700100c 	.word	0x0700100c
3401665c:	0702100c 	.word	0x0702100c
34016660:	0700140c 	.word	0x0700140c
34016664:	0702140c 	.word	0x0702140c
34016668:	0700082c 	.word	0x0700082c
3401666c:	0702082c 	.word	0x0702082c
34016670:	07000c2c 	.word	0x07000c2c
34016674:	07020c2c 	.word	0x07020c2c
34016678:	0700102c 	.word	0x0700102c
3401667c:	0702102c 	.word	0x0702102c
34016680:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016684:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
34016688:	f7fe ffd6 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3401668c:	6823      	ldr	r3, [r4, #0]
3401668e:	029e      	lsls	r6, r3, #10
34016690:	d540      	bpl.n	34016714 <HAL_RCCEx_PeriphCLKConfig+0xf14>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
34016692:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34016696:	4ac2      	ldr	r2, [pc, #776]	@ (340169a0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>)
34016698:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401669c:	4291      	cmp	r1, r2
3401669e:	d00a      	beq.n	340166b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
340166a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340166a4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340166a8:	4293      	cmp	r3, r2
340166aa:	d004      	beq.n	340166b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
340166ac:	f240 41ab 	movw	r1, #1195	@ 0x4ab
340166b0:	48bc      	ldr	r0, [pc, #752]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340166b2:	f008 ffa5 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
340166b6:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
340166ba:	4abb      	ldr	r2, [pc, #748]	@ (340169a8 <HAL_RCCEx_PeriphCLKConfig+0x11a8>)
340166bc:	4293      	cmp	r3, r2
340166be:	f041 83ca 	bne.w	34017e56 <HAL_RCCEx_PeriphCLKConfig+0x2656>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340166c2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340166c4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340166c8:	d004      	beq.n	340166d4 <HAL_RCCEx_PeriphCLKConfig+0xed4>
340166ca:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
340166ce:	48b5      	ldr	r0, [pc, #724]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340166d0:	f008 ff96 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340166d4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340166d6:	3b01      	subs	r3, #1
340166d8:	2bff      	cmp	r3, #255	@ 0xff
340166da:	d904      	bls.n	340166e6 <HAL_RCCEx_PeriphCLKConfig+0xee6>
340166dc:	f240 41b1 	movw	r1, #1201	@ 0x4b1
340166e0:	48b0      	ldr	r0, [pc, #704]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340166e2:	f008 ff8d 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340166e6:	4ab1      	ldr	r2, [pc, #708]	@ (340169ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340166e8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340166ea:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340166ee:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340166f0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340166f4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340166f8:	3901      	subs	r1, #1
340166fa:	4303      	orrs	r3, r0
340166fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016700:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34016704:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34016708:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401670c:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
34016710:	f7fe ff92 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34016714:	6823      	ldr	r3, [r4, #0]
34016716:	0258      	lsls	r0, r3, #9
34016718:	d540      	bpl.n	3401679c <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
3401671a:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
3401671e:	4aa4      	ldr	r2, [pc, #656]	@ (340169b0 <HAL_RCCEx_PeriphCLKConfig+0x11b0>)
34016720:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016724:	4291      	cmp	r1, r2
34016726:	d00a      	beq.n	3401673e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34016728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401672c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016730:	4293      	cmp	r3, r2
34016732:	d004      	beq.n	3401673e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34016734:	f240 41cb 	movw	r1, #1227	@ 0x4cb
34016738:	489a      	ldr	r0, [pc, #616]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401673a:	f008 ff61 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3401673e:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34016742:	4a9c      	ldr	r2, [pc, #624]	@ (340169b4 <HAL_RCCEx_PeriphCLKConfig+0x11b4>)
34016744:	4293      	cmp	r3, r2
34016746:	f041 838f 	bne.w	34017e68 <HAL_RCCEx_PeriphCLKConfig+0x2668>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3401674a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3401674c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016750:	d004      	beq.n	3401675c <HAL_RCCEx_PeriphCLKConfig+0xf5c>
34016752:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
34016756:	4893      	ldr	r0, [pc, #588]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016758:	f008 ff52 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3401675c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3401675e:	3b01      	subs	r3, #1
34016760:	2bff      	cmp	r3, #255	@ 0xff
34016762:	d904      	bls.n	3401676e <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34016764:	f240 41d1 	movw	r1, #1233	@ 0x4d1
34016768:	488e      	ldr	r0, [pc, #568]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401676a:	f008 ff49 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3401676e:	4a8f      	ldr	r2, [pc, #572]	@ (340169ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34016770:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34016772:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34016776:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34016778:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401677c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016780:	3901      	subs	r1, #1
34016782:	4303      	orrs	r3, r0
34016784:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016788:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3401678c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34016790:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016794:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
34016798:	f7fe ff4e 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
3401679c:	6823      	ldr	r3, [r4, #0]
3401679e:	0219      	lsls	r1, r3, #8
340167a0:	d546      	bpl.n	34016830 <HAL_RCCEx_PeriphCLKConfig+0x1030>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
340167a2:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
340167a6:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
340167aa:	d00c      	beq.n	340167c6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
340167ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
340167b0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
340167b4:	d007      	beq.n	340167c6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
340167b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
340167ba:	d004      	beq.n	340167c6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
340167bc:	f240 41eb 	movw	r1, #1259	@ 0x4eb
340167c0:	4878      	ldr	r0, [pc, #480]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340167c2:	f008 ff1d 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
340167c6:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
340167ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340167ce:	f041 8354 	bne.w	34017e7a <HAL_RCCEx_PeriphCLKConfig+0x267a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340167d2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340167d4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340167d8:	d004      	beq.n	340167e4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
340167da:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
340167de:	4871      	ldr	r0, [pc, #452]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340167e0:	f008 ff0e 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340167e4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340167e6:	3b01      	subs	r3, #1
340167e8:	2bff      	cmp	r3, #255	@ 0xff
340167ea:	d904      	bls.n	340167f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
340167ec:	f240 41f1 	movw	r1, #1265	@ 0x4f1
340167f0:	486c      	ldr	r0, [pc, #432]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340167f2:	f008 ff05 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340167f6:	4a6d      	ldr	r2, [pc, #436]	@ (340169ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340167f8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340167fa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340167fe:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016800:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016804:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016808:	3901      	subs	r1, #1
3401680a:	4303      	orrs	r3, r0
3401680c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016810:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016814:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016818:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
3401681c:	4a63      	ldr	r2, [pc, #396]	@ (340169ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401681e:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
34016822:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34016826:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
3401682a:	430b      	orrs	r3, r1
3401682c:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34016830:	6823      	ldr	r3, [r4, #0]
34016832:	01da      	lsls	r2, r3, #7
34016834:	d542      	bpl.n	340168bc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
34016836:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
3401683a:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
3401683e:	d004      	beq.n	3401684a <HAL_RCCEx_PeriphCLKConfig+0x104a>
34016840:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
34016844:	4857      	ldr	r0, [pc, #348]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016846:	f008 fedb 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3401684a:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
3401684e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34016852:	f041 8343 	bne.w	34017edc <HAL_RCCEx_PeriphCLKConfig+0x26dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
34016856:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
3401685a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401685e:	d004      	beq.n	3401686a <HAL_RCCEx_PeriphCLKConfig+0x106a>
34016860:	f240 511d 	movw	r1, #1309	@ 0x51d
34016864:	484f      	ldr	r0, [pc, #316]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016866:	f008 fecb 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3401686a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
3401686e:	3b01      	subs	r3, #1
34016870:	2bff      	cmp	r3, #255	@ 0xff
34016872:	d904      	bls.n	3401687e <HAL_RCCEx_PeriphCLKConfig+0x107e>
34016874:	f240 511e 	movw	r1, #1310	@ 0x51e
34016878:	484a      	ldr	r0, [pc, #296]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401687a:	f008 fec1 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3401687e:	4a4b      	ldr	r2, [pc, #300]	@ (340169ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34016880:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
34016884:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
34016888:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
3401688c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016890:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016894:	3901      	subs	r1, #1
34016896:	4303      	orrs	r3, r0
34016898:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401689c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
340168a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340168a4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340168a8:	4a40      	ldr	r2, [pc, #256]	@ (340169ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340168aa:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
340168ae:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
340168b2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
340168b6:	430b      	orrs	r3, r1
340168b8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
340168bc:	6823      	ldr	r3, [r4, #0]
340168be:	019b      	lsls	r3, r3, #6
340168c0:	d540      	bpl.n	34016944 <HAL_RCCEx_PeriphCLKConfig+0x1144>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
340168c2:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340168c6:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340168ca:	d007      	beq.n	340168dc <HAL_RCCEx_PeriphCLKConfig+0x10dc>
340168cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340168d0:	d004      	beq.n	340168dc <HAL_RCCEx_PeriphCLKConfig+0x10dc>
340168d2:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
340168d6:	4833      	ldr	r0, [pc, #204]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340168d8:	f008 fe92 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
340168dc:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340168e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340168e4:	f041 8303 	bne.w	34017eee <HAL_RCCEx_PeriphCLKConfig+0x26ee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340168e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340168ea:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340168ee:	d004      	beq.n	340168fa <HAL_RCCEx_PeriphCLKConfig+0x10fa>
340168f0:	f240 513d 	movw	r1, #1341	@ 0x53d
340168f4:	482b      	ldr	r0, [pc, #172]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340168f6:	f008 fe83 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340168fa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340168fc:	3b01      	subs	r3, #1
340168fe:	2bff      	cmp	r3, #255	@ 0xff
34016900:	d904      	bls.n	3401690c <HAL_RCCEx_PeriphCLKConfig+0x110c>
34016902:	f240 513e 	movw	r1, #1342	@ 0x53e
34016906:	4827      	ldr	r0, [pc, #156]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016908:	f008 fe7a 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3401690c:	4a27      	ldr	r2, [pc, #156]	@ (340169ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401690e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34016910:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34016914:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34016916:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401691a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401691e:	3901      	subs	r1, #1
34016920:	4303      	orrs	r3, r0
34016922:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016926:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3401692a:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3401692c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34016930:	4a1e      	ldr	r2, [pc, #120]	@ (340169ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34016932:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
34016936:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
3401693a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3401693e:	430b      	orrs	r3, r1
34016940:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34016944:	6823      	ldr	r3, [r4, #0]
34016946:	015e      	lsls	r6, r3, #5
34016948:	d54e      	bpl.n	340169e8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
3401694a:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
3401694e:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34016952:	d004      	beq.n	3401695e <HAL_RCCEx_PeriphCLKConfig+0x115e>
34016954:	f240 5165 	movw	r1, #1381	@ 0x565
34016958:	4812      	ldr	r0, [pc, #72]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401695a:	f008 fe51 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3401695e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
34016962:	2b20      	cmp	r3, #32
34016964:	f041 82f3 	bne.w	34017f4e <HAL_RCCEx_PeriphCLKConfig+0x274e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34016968:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
3401696c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016970:	d004      	beq.n	3401697c <HAL_RCCEx_PeriphCLKConfig+0x117c>
34016972:	f240 516a 	movw	r1, #1386	@ 0x56a
34016976:	480b      	ldr	r0, [pc, #44]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016978:	f008 fe42 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3401697c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34016980:	3b01      	subs	r3, #1
34016982:	2bff      	cmp	r3, #255	@ 0xff
34016984:	d904      	bls.n	34016990 <HAL_RCCEx_PeriphCLKConfig+0x1190>
34016986:	f240 516b 	movw	r1, #1387	@ 0x56b
3401698a:	4806      	ldr	r0, [pc, #24]	@ (340169a4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401698c:	f008 fe38 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34016990:	4a06      	ldr	r2, [pc, #24]	@ (340169ac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34016992:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34016996:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
3401699a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
3401699e:	e00b      	b.n	340169b8 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
340169a0:	0700142c 	.word	0x0700142c
340169a4:	3402f73a 	.word	0x3402f73a
340169a8:	0702142c 	.word	0x0702142c
340169ac:	56028000 	.word	0x56028000
340169b0:	0700182c 	.word	0x0700182c
340169b4:	0702182c 	.word	0x0702182c
340169b8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340169bc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340169c0:	3901      	subs	r1, #1
340169c2:	4303      	orrs	r3, r0
340169c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340169c8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340169cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
340169d0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
340169d4:	4abc      	ldr	r2, [pc, #752]	@ (34016cc8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340169d6:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
340169da:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340169de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340169e2:	430b      	orrs	r3, r1
340169e4:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
340169e8:	6823      	ldr	r3, [r4, #0]
340169ea:	00d8      	lsls	r0, r3, #3
340169ec:	d53d      	bpl.n	34016a6a <HAL_RCCEx_PeriphCLKConfig+0x126a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
340169ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340169f2:	4ab6      	ldr	r2, [pc, #728]	@ (34016ccc <HAL_RCCEx_PeriphCLKConfig+0x14cc>)
340169f4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340169f8:	4293      	cmp	r3, r2
340169fa:	d008      	beq.n	34016a0e <HAL_RCCEx_PeriphCLKConfig+0x120e>
340169fc:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016a00:	4293      	cmp	r3, r2
34016a02:	d004      	beq.n	34016a0e <HAL_RCCEx_PeriphCLKConfig+0x120e>
34016a04:	f240 5185 	movw	r1, #1413	@ 0x585
34016a08:	48b1      	ldr	r0, [pc, #708]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016a0a:	f008 fdf9 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
34016a0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
34016a12:	4ab0      	ldr	r2, [pc, #704]	@ (34016cd4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>)
34016a14:	4293      	cmp	r3, r2
34016a16:	f041 82c1 	bne.w	34017f9c <HAL_RCCEx_PeriphCLKConfig+0x279c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34016a1a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34016a1c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016a20:	d004      	beq.n	34016a2c <HAL_RCCEx_PeriphCLKConfig+0x122c>
34016a22:	f240 518a 	movw	r1, #1418	@ 0x58a
34016a26:	48aa      	ldr	r0, [pc, #680]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016a28:	f008 fdea 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34016a2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34016a2e:	3b01      	subs	r3, #1
34016a30:	2bff      	cmp	r3, #255	@ 0xff
34016a32:	d904      	bls.n	34016a3e <HAL_RCCEx_PeriphCLKConfig+0x123e>
34016a34:	f240 518b 	movw	r1, #1419	@ 0x58b
34016a38:	48a5      	ldr	r0, [pc, #660]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016a3a:	f008 fde1 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34016a3e:	4aa2      	ldr	r2, [pc, #648]	@ (34016cc8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34016a40:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34016a42:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34016a46:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34016a48:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016a4c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016a50:	3901      	subs	r1, #1
34016a52:	4303      	orrs	r3, r0
34016a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016a58:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34016a5c:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016a5e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016a62:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
34016a66:	f7fe fde7 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34016a6a:	6823      	ldr	r3, [r4, #0]
34016a6c:	0099      	lsls	r1, r3, #2
34016a6e:	d53d      	bpl.n	34016aec <HAL_RCCEx_PeriphCLKConfig+0x12ec>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
34016a70:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34016a74:	4a98      	ldr	r2, [pc, #608]	@ (34016cd8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>)
34016a76:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34016a7a:	4293      	cmp	r3, r2
34016a7c:	d008      	beq.n	34016a90 <HAL_RCCEx_PeriphCLKConfig+0x1290>
34016a7e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016a82:	4293      	cmp	r3, r2
34016a84:	d004      	beq.n	34016a90 <HAL_RCCEx_PeriphCLKConfig+0x1290>
34016a86:	f240 51b2 	movw	r1, #1458	@ 0x5b2
34016a8a:	4891      	ldr	r0, [pc, #580]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016a8c:	f008 fdb8 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
34016a90:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34016a94:	4a91      	ldr	r2, [pc, #580]	@ (34016cdc <HAL_RCCEx_PeriphCLKConfig+0x14dc>)
34016a96:	4293      	cmp	r3, r2
34016a98:	f041 82b0 	bne.w	34017ffc <HAL_RCCEx_PeriphCLKConfig+0x27fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34016a9c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34016a9e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016aa2:	d004      	beq.n	34016aae <HAL_RCCEx_PeriphCLKConfig+0x12ae>
34016aa4:	f240 51b7 	movw	r1, #1463	@ 0x5b7
34016aa8:	4889      	ldr	r0, [pc, #548]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016aaa:	f008 fda9 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34016aae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34016ab0:	3b01      	subs	r3, #1
34016ab2:	2bff      	cmp	r3, #255	@ 0xff
34016ab4:	d904      	bls.n	34016ac0 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
34016ab6:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
34016aba:	4885      	ldr	r0, [pc, #532]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016abc:	f008 fda0 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34016ac0:	4a81      	ldr	r2, [pc, #516]	@ (34016cc8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34016ac2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34016ac4:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34016ac8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34016aca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016ace:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016ad2:	3901      	subs	r1, #1
34016ad4:	4303      	orrs	r3, r0
34016ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016ada:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34016ade:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016ae0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016ae4:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
34016ae8:	f7fe fda6 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34016aec:	6863      	ldr	r3, [r4, #4]
34016aee:	07da      	lsls	r2, r3, #31
34016af0:	d53b      	bpl.n	34016b6a <HAL_RCCEx_PeriphCLKConfig+0x136a>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
34016af2:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
34016af6:	2b06      	cmp	r3, #6
34016af8:	d904      	bls.n	34016b04 <HAL_RCCEx_PeriphCLKConfig+0x1304>
34016afa:	f240 51df 	movw	r1, #1503	@ 0x5df
34016afe:	4874      	ldr	r0, [pc, #464]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016b00:	f008 fd7e 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34016b04:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
34016b08:	2b02      	cmp	r3, #2
34016b0a:	f041 82a7 	bne.w	3401805c <HAL_RCCEx_PeriphCLKConfig+0x285c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34016b0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34016b10:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016b14:	d004      	beq.n	34016b20 <HAL_RCCEx_PeriphCLKConfig+0x1320>
34016b16:	f240 51e4 	movw	r1, #1508	@ 0x5e4
34016b1a:	486d      	ldr	r0, [pc, #436]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016b1c:	f008 fd70 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34016b20:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34016b22:	3b01      	subs	r3, #1
34016b24:	2bff      	cmp	r3, #255	@ 0xff
34016b26:	d904      	bls.n	34016b32 <HAL_RCCEx_PeriphCLKConfig+0x1332>
34016b28:	f240 51e5 	movw	r1, #1509	@ 0x5e5
34016b2c:	4868      	ldr	r0, [pc, #416]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016b2e:	f008 fd67 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34016b32:	4a65      	ldr	r2, [pc, #404]	@ (34016cc8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34016b34:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34016b36:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34016b3a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34016b3c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016b40:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016b44:	3901      	subs	r1, #1
34016b46:	4303      	orrs	r3, r0
34016b48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016b4c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34016b50:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016b52:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34016b56:	4a5c      	ldr	r2, [pc, #368]	@ (34016cc8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34016b58:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
34016b5c:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
34016b60:	f023 0307 	bic.w	r3, r3, #7
34016b64:	430b      	orrs	r3, r1
34016b66:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
34016b6a:	6863      	ldr	r3, [r4, #4]
34016b6c:	079b      	lsls	r3, r3, #30
34016b6e:	d543      	bpl.n	34016bf8 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
34016b70:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34016b74:	4a5a      	ldr	r2, [pc, #360]	@ (34016ce0 <HAL_RCCEx_PeriphCLKConfig+0x14e0>)
34016b76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016b7a:	4291      	cmp	r1, r2
34016b7c:	d00e      	beq.n	34016b9c <HAL_RCCEx_PeriphCLKConfig+0x139c>
34016b7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016b82:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016b86:	4291      	cmp	r1, r2
34016b88:	d008      	beq.n	34016b9c <HAL_RCCEx_PeriphCLKConfig+0x139c>
34016b8a:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016b8e:	4293      	cmp	r3, r2
34016b90:	d004      	beq.n	34016b9c <HAL_RCCEx_PeriphCLKConfig+0x139c>
34016b92:	f240 610c 	movw	r1, #1548	@ 0x60c
34016b96:	484e      	ldr	r0, [pc, #312]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016b98:	f008 fd32 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34016b9c:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34016ba0:	4a50      	ldr	r2, [pc, #320]	@ (34016ce4 <HAL_RCCEx_PeriphCLKConfig+0x14e4>)
34016ba2:	4293      	cmp	r3, r2
34016ba4:	f041 8288 	bne.w	340180b8 <HAL_RCCEx_PeriphCLKConfig+0x28b8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34016ba8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34016baa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016bae:	d004      	beq.n	34016bba <HAL_RCCEx_PeriphCLKConfig+0x13ba>
34016bb0:	f240 6111 	movw	r1, #1553	@ 0x611
34016bb4:	4846      	ldr	r0, [pc, #280]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016bb6:	f008 fd23 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34016bba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34016bbc:	3b01      	subs	r3, #1
34016bbe:	2bff      	cmp	r3, #255	@ 0xff
34016bc0:	d904      	bls.n	34016bcc <HAL_RCCEx_PeriphCLKConfig+0x13cc>
34016bc2:	f240 6112 	movw	r1, #1554	@ 0x612
34016bc6:	4842      	ldr	r0, [pc, #264]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016bc8:	f008 fd1a 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34016bcc:	4a3e      	ldr	r2, [pc, #248]	@ (34016cc8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34016bce:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34016bd0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34016bd4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34016bd6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016bda:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016bde:	3901      	subs	r1, #1
34016be0:	4303      	orrs	r3, r0
34016be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016be6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016bea:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016bec:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016bf0:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
34016bf4:	f7fe fd20 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
34016bf8:	6863      	ldr	r3, [r4, #4]
34016bfa:	075e      	lsls	r6, r3, #29
34016bfc:	d543      	bpl.n	34016c86 <HAL_RCCEx_PeriphCLKConfig+0x1486>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
34016bfe:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34016c02:	4a39      	ldr	r2, [pc, #228]	@ (34016ce8 <HAL_RCCEx_PeriphCLKConfig+0x14e8>)
34016c04:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016c08:	4291      	cmp	r1, r2
34016c0a:	d00e      	beq.n	34016c2a <HAL_RCCEx_PeriphCLKConfig+0x142a>
34016c0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016c10:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016c14:	4291      	cmp	r1, r2
34016c16:	d008      	beq.n	34016c2a <HAL_RCCEx_PeriphCLKConfig+0x142a>
34016c18:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016c1c:	4293      	cmp	r3, r2
34016c1e:	d004      	beq.n	34016c2a <HAL_RCCEx_PeriphCLKConfig+0x142a>
34016c20:	f240 6139 	movw	r1, #1593	@ 0x639
34016c24:	482a      	ldr	r0, [pc, #168]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016c26:	f008 fceb 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34016c2a:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34016c2e:	4a2f      	ldr	r2, [pc, #188]	@ (34016cec <HAL_RCCEx_PeriphCLKConfig+0x14ec>)
34016c30:	4293      	cmp	r3, r2
34016c32:	f041 8272 	bne.w	3401811a <HAL_RCCEx_PeriphCLKConfig+0x291a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34016c36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34016c38:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016c3c:	d004      	beq.n	34016c48 <HAL_RCCEx_PeriphCLKConfig+0x1448>
34016c3e:	f240 613e 	movw	r1, #1598	@ 0x63e
34016c42:	4823      	ldr	r0, [pc, #140]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016c44:	f008 fcdc 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34016c48:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34016c4a:	3b01      	subs	r3, #1
34016c4c:	2bff      	cmp	r3, #255	@ 0xff
34016c4e:	d904      	bls.n	34016c5a <HAL_RCCEx_PeriphCLKConfig+0x145a>
34016c50:	f240 613f 	movw	r1, #1599	@ 0x63f
34016c54:	481e      	ldr	r0, [pc, #120]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016c56:	f008 fcd3 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34016c5a:	4a1b      	ldr	r2, [pc, #108]	@ (34016cc8 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34016c5c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34016c5e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34016c62:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34016c64:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016c68:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016c6c:	3901      	subs	r1, #1
34016c6e:	4303      	orrs	r3, r0
34016c70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016c78:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016c7a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016c7e:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
34016c82:	f7fe fcd9 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34016c86:	6863      	ldr	r3, [r4, #4]
34016c88:	0718      	lsls	r0, r3, #28
34016c8a:	d55d      	bpl.n	34016d48 <HAL_RCCEx_PeriphCLKConfig+0x1548>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
34016c8c:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34016c90:	4a17      	ldr	r2, [pc, #92]	@ (34016cf0 <HAL_RCCEx_PeriphCLKConfig+0x14f0>)
34016c92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016c96:	4291      	cmp	r1, r2
34016c98:	d00e      	beq.n	34016cb8 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34016c9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016c9e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016ca2:	4291      	cmp	r1, r2
34016ca4:	d008      	beq.n	34016cb8 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34016ca6:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016caa:	4293      	cmp	r3, r2
34016cac:	d004      	beq.n	34016cb8 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34016cae:	f240 6166 	movw	r1, #1638	@ 0x666
34016cb2:	4807      	ldr	r0, [pc, #28]	@ (34016cd0 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016cb4:	f008 fca4 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
34016cb8:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34016cbc:	4a0d      	ldr	r2, [pc, #52]	@ (34016cf4 <HAL_RCCEx_PeriphCLKConfig+0x14f4>)
34016cbe:	4293      	cmp	r3, r2
34016cc0:	f041 825c 	bne.w	3401817c <HAL_RCCEx_PeriphCLKConfig+0x297c>
34016cc4:	e018      	b.n	34016cf8 <HAL_RCCEx_PeriphCLKConfig+0x14f8>
34016cc6:	bf00      	nop
34016cc8:	56028000 	.word	0x56028000
34016ccc:	07001418 	.word	0x07001418
34016cd0:	3402f73a 	.word	0x3402f73a
34016cd4:	07021418 	.word	0x07021418
34016cd8:	07001818 	.word	0x07001818
34016cdc:	07021818 	.word	0x07021818
34016ce0:	07000420 	.word	0x07000420
34016ce4:	07020420 	.word	0x07020420
34016ce8:	07000820 	.word	0x07000820
34016cec:	07020820 	.word	0x07020820
34016cf0:	07000c20 	.word	0x07000c20
34016cf4:	07020c20 	.word	0x07020c20
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34016cf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34016cfa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016cfe:	d004      	beq.n	34016d0a <HAL_RCCEx_PeriphCLKConfig+0x150a>
34016d00:	f240 616b 	movw	r1, #1643	@ 0x66b
34016d04:	48bb      	ldr	r0, [pc, #748]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016d06:	f008 fc7b 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34016d0a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34016d0c:	3b01      	subs	r3, #1
34016d0e:	2bff      	cmp	r3, #255	@ 0xff
34016d10:	d904      	bls.n	34016d1c <HAL_RCCEx_PeriphCLKConfig+0x151c>
34016d12:	f240 616c 	movw	r1, #1644	@ 0x66c
34016d16:	48b7      	ldr	r0, [pc, #732]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016d18:	f008 fc72 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34016d1c:	4ab6      	ldr	r2, [pc, #728]	@ (34016ff8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016d1e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34016d20:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34016d24:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34016d26:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016d2a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016d2e:	3901      	subs	r1, #1
34016d30:	4303      	orrs	r3, r0
34016d32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016d3a:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016d3c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016d40:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
34016d44:	f7fe fc78 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34016d48:	6863      	ldr	r3, [r4, #4]
34016d4a:	06d9      	lsls	r1, r3, #27
34016d4c:	d544      	bpl.n	34016dd8 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
34016d4e:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34016d52:	4aaa      	ldr	r2, [pc, #680]	@ (34016ffc <HAL_RCCEx_PeriphCLKConfig+0x17fc>)
34016d54:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016d58:	4291      	cmp	r1, r2
34016d5a:	d00e      	beq.n	34016d7a <HAL_RCCEx_PeriphCLKConfig+0x157a>
34016d5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016d60:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016d64:	4291      	cmp	r1, r2
34016d66:	d008      	beq.n	34016d7a <HAL_RCCEx_PeriphCLKConfig+0x157a>
34016d68:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016d6c:	4293      	cmp	r3, r2
34016d6e:	d004      	beq.n	34016d7a <HAL_RCCEx_PeriphCLKConfig+0x157a>
34016d70:	f240 6193 	movw	r1, #1683	@ 0x693
34016d74:	489f      	ldr	r0, [pc, #636]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016d76:	f008 fc43 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34016d7a:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34016d7e:	4aa0      	ldr	r2, [pc, #640]	@ (34017000 <HAL_RCCEx_PeriphCLKConfig+0x1800>)
34016d80:	4293      	cmp	r3, r2
34016d82:	f041 822c 	bne.w	340181de <HAL_RCCEx_PeriphCLKConfig+0x29de>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016d86:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016d88:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016d8c:	d004      	beq.n	34016d98 <HAL_RCCEx_PeriphCLKConfig+0x1598>
34016d8e:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
34016d92:	4898      	ldr	r0, [pc, #608]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016d94:	f008 fc34 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016d98:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016d9a:	3b01      	subs	r3, #1
34016d9c:	2bff      	cmp	r3, #255	@ 0xff
34016d9e:	d904      	bls.n	34016daa <HAL_RCCEx_PeriphCLKConfig+0x15aa>
34016da0:	f240 6199 	movw	r1, #1689	@ 0x699
34016da4:	4893      	ldr	r0, [pc, #588]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016da6:	f008 fc2b 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016daa:	4a93      	ldr	r2, [pc, #588]	@ (34016ff8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016dac:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016dae:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016db2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016db4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016db8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016dbc:	3901      	subs	r1, #1
34016dbe:	4303      	orrs	r3, r0
34016dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016dc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016dcc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016dd0:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
34016dd4:	f7fe fc30 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34016dd8:	6863      	ldr	r3, [r4, #4]
34016dda:	069a      	lsls	r2, r3, #26
34016ddc:	d544      	bpl.n	34016e68 <HAL_RCCEx_PeriphCLKConfig+0x1668>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
34016dde:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34016de2:	4a88      	ldr	r2, [pc, #544]	@ (34017004 <HAL_RCCEx_PeriphCLKConfig+0x1804>)
34016de4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016de8:	4291      	cmp	r1, r2
34016dea:	d00e      	beq.n	34016e0a <HAL_RCCEx_PeriphCLKConfig+0x160a>
34016dec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016df0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016df4:	4291      	cmp	r1, r2
34016df6:	d008      	beq.n	34016e0a <HAL_RCCEx_PeriphCLKConfig+0x160a>
34016df8:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016dfc:	4293      	cmp	r3, r2
34016dfe:	d004      	beq.n	34016e0a <HAL_RCCEx_PeriphCLKConfig+0x160a>
34016e00:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
34016e04:	487b      	ldr	r0, [pc, #492]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016e06:	f008 fbfb 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34016e0a:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34016e0e:	4a7e      	ldr	r2, [pc, #504]	@ (34017008 <HAL_RCCEx_PeriphCLKConfig+0x1808>)
34016e10:	4293      	cmp	r3, r2
34016e12:	f041 8231 	bne.w	34018278 <HAL_RCCEx_PeriphCLKConfig+0x2a78>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016e16:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016e18:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016e1c:	d004      	beq.n	34016e28 <HAL_RCCEx_PeriphCLKConfig+0x1628>
34016e1e:	f240 61c5 	movw	r1, #1733	@ 0x6c5
34016e22:	4874      	ldr	r0, [pc, #464]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016e24:	f008 fbec 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016e28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016e2a:	3b01      	subs	r3, #1
34016e2c:	2bff      	cmp	r3, #255	@ 0xff
34016e2e:	d904      	bls.n	34016e3a <HAL_RCCEx_PeriphCLKConfig+0x163a>
34016e30:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34016e34:	486f      	ldr	r0, [pc, #444]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016e36:	f008 fbe3 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016e3a:	4a6f      	ldr	r2, [pc, #444]	@ (34016ff8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016e3c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016e3e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016e42:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016e44:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016e48:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016e4c:	3901      	subs	r1, #1
34016e4e:	4303      	orrs	r3, r0
34016e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016e54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016e58:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016e5c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016e60:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34016e64:	f7fe fbe8 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34016e68:	6863      	ldr	r3, [r4, #4]
34016e6a:	065b      	lsls	r3, r3, #25
34016e6c:	d543      	bpl.n	34016ef6 <HAL_RCCEx_PeriphCLKConfig+0x16f6>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
34016e6e:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34016e72:	4a66      	ldr	r2, [pc, #408]	@ (3401700c <HAL_RCCEx_PeriphCLKConfig+0x180c>)
34016e74:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016e78:	4291      	cmp	r1, r2
34016e7a:	d00e      	beq.n	34016e9a <HAL_RCCEx_PeriphCLKConfig+0x169a>
34016e7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016e80:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016e84:	4291      	cmp	r1, r2
34016e86:	d008      	beq.n	34016e9a <HAL_RCCEx_PeriphCLKConfig+0x169a>
34016e88:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016e8c:	4293      	cmp	r3, r2
34016e8e:	d004      	beq.n	34016e9a <HAL_RCCEx_PeriphCLKConfig+0x169a>
34016e90:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34016e94:	4857      	ldr	r0, [pc, #348]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016e96:	f008 fbb3 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34016e9a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34016e9e:	4a5c      	ldr	r2, [pc, #368]	@ (34017010 <HAL_RCCEx_PeriphCLKConfig+0x1810>)
34016ea0:	4293      	cmp	r3, r2
34016ea2:	f041 821a 	bne.w	340182da <HAL_RCCEx_PeriphCLKConfig+0x2ada>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34016ea6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34016ea8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016eac:	d004      	beq.n	34016eb8 <HAL_RCCEx_PeriphCLKConfig+0x16b8>
34016eae:	f240 61f2 	movw	r1, #1778	@ 0x6f2
34016eb2:	4850      	ldr	r0, [pc, #320]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016eb4:	f008 fba4 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34016eb8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34016eba:	3b01      	subs	r3, #1
34016ebc:	2bff      	cmp	r3, #255	@ 0xff
34016ebe:	d904      	bls.n	34016eca <HAL_RCCEx_PeriphCLKConfig+0x16ca>
34016ec0:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34016ec4:	484b      	ldr	r0, [pc, #300]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016ec6:	f008 fb9b 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34016eca:	4a4b      	ldr	r2, [pc, #300]	@ (34016ff8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016ecc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34016ece:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34016ed2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34016ed4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016ed8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016edc:	3901      	subs	r1, #1
34016ede:	4303      	orrs	r3, r0
34016ee0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016ee8:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016eea:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016eee:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
34016ef2:	f7fe fba1 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34016ef6:	6863      	ldr	r3, [r4, #4]
34016ef8:	05de      	lsls	r6, r3, #23
34016efa:	d544      	bpl.n	34016f86 <HAL_RCCEx_PeriphCLKConfig+0x1786>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
34016efc:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34016f00:	4a44      	ldr	r2, [pc, #272]	@ (34017014 <HAL_RCCEx_PeriphCLKConfig+0x1814>)
34016f02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016f06:	4291      	cmp	r1, r2
34016f08:	d00e      	beq.n	34016f28 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34016f0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016f0e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016f12:	4291      	cmp	r1, r2
34016f14:	d008      	beq.n	34016f28 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34016f16:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016f1a:	4293      	cmp	r3, r2
34016f1c:	d004      	beq.n	34016f28 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34016f1e:	f240 711a 	movw	r1, #1818	@ 0x71a
34016f22:	4834      	ldr	r0, [pc, #208]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016f24:	f008 fb6c 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34016f28:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34016f2c:	4a3a      	ldr	r2, [pc, #232]	@ (34017018 <HAL_RCCEx_PeriphCLKConfig+0x1818>)
34016f2e:	4293      	cmp	r3, r2
34016f30:	f041 8204 	bne.w	3401833c <HAL_RCCEx_PeriphCLKConfig+0x2b3c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016f34:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016f36:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016f3a:	d004      	beq.n	34016f46 <HAL_RCCEx_PeriphCLKConfig+0x1746>
34016f3c:	f240 711f 	movw	r1, #1823	@ 0x71f
34016f40:	482c      	ldr	r0, [pc, #176]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016f42:	f008 fb5d 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016f46:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016f48:	3b01      	subs	r3, #1
34016f4a:	2bff      	cmp	r3, #255	@ 0xff
34016f4c:	d904      	bls.n	34016f58 <HAL_RCCEx_PeriphCLKConfig+0x1758>
34016f4e:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
34016f52:	4828      	ldr	r0, [pc, #160]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016f54:	f008 fb54 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016f58:	4a27      	ldr	r2, [pc, #156]	@ (34016ff8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016f5a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016f5c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016f60:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016f62:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016f66:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016f6a:	3901      	subs	r1, #1
34016f6c:	4303      	orrs	r3, r0
34016f6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016f72:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016f76:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016f7a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016f7e:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
34016f82:	f7fe fb59 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34016f86:	6863      	ldr	r3, [r4, #4]
34016f88:	0598      	lsls	r0, r3, #22
34016f8a:	d55d      	bpl.n	34017048 <HAL_RCCEx_PeriphCLKConfig+0x1848>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34016f8c:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34016f90:	4a22      	ldr	r2, [pc, #136]	@ (3401701c <HAL_RCCEx_PeriphCLKConfig+0x181c>)
34016f92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016f96:	4291      	cmp	r1, r2
34016f98:	d00e      	beq.n	34016fb8 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34016f9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016f9e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016fa2:	4291      	cmp	r1, r2
34016fa4:	d008      	beq.n	34016fb8 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34016fa6:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016faa:	4293      	cmp	r3, r2
34016fac:	d004      	beq.n	34016fb8 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34016fae:	f240 7147 	movw	r1, #1863	@ 0x747
34016fb2:	4810      	ldr	r0, [pc, #64]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016fb4:	f008 fb24 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34016fb8:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34016fbc:	4a18      	ldr	r2, [pc, #96]	@ (34017020 <HAL_RCCEx_PeriphCLKConfig+0x1820>)
34016fbe:	4293      	cmp	r3, r2
34016fc0:	f041 81ed 	bne.w	3401839e <HAL_RCCEx_PeriphCLKConfig+0x2b9e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016fc4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016fc6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016fca:	d004      	beq.n	34016fd6 <HAL_RCCEx_PeriphCLKConfig+0x17d6>
34016fcc:	f240 714c 	movw	r1, #1868	@ 0x74c
34016fd0:	4808      	ldr	r0, [pc, #32]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016fd2:	f008 fb15 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016fd6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016fd8:	3b01      	subs	r3, #1
34016fda:	2bff      	cmp	r3, #255	@ 0xff
34016fdc:	d904      	bls.n	34016fe8 <HAL_RCCEx_PeriphCLKConfig+0x17e8>
34016fde:	f240 714d 	movw	r1, #1869	@ 0x74d
34016fe2:	4804      	ldr	r0, [pc, #16]	@ (34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016fe4:	f008 fb0c 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016fe8:	4a03      	ldr	r2, [pc, #12]	@ (34016ff8 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016fea:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016fec:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016ff0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016ff2:	e017      	b.n	34017024 <HAL_RCCEx_PeriphCLKConfig+0x1824>
34016ff4:	3402f73a 	.word	0x3402f73a
34016ff8:	56028000 	.word	0x56028000
34016ffc:	07001020 	.word	0x07001020
34017000:	07021020 	.word	0x07021020
34017004:	07001420 	.word	0x07001420
34017008:	07021420 	.word	0x07021420
3401700c:	07001820 	.word	0x07001820
34017010:	07021820 	.word	0x07021820
34017014:	07000030 	.word	0x07000030
34017018:	07020030 	.word	0x07020030
3401701c:	07000430 	.word	0x07000430
34017020:	07020430 	.word	0x07020430
34017024:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017028:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401702c:	3901      	subs	r1, #1
3401702e:	4303      	orrs	r3, r0
34017030:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017034:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017038:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3401703c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017040:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
34017044:	f7fe faf8 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34017048:	6863      	ldr	r3, [r4, #4]
3401704a:	0559      	lsls	r1, r3, #21
3401704c:	d544      	bpl.n	340170d8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
3401704e:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34017052:	4abc      	ldr	r2, [pc, #752]	@ (34017344 <HAL_RCCEx_PeriphCLKConfig+0x1b44>)
34017054:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017058:	4291      	cmp	r1, r2
3401705a:	d00e      	beq.n	3401707a <HAL_RCCEx_PeriphCLKConfig+0x187a>
3401705c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017060:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017064:	4291      	cmp	r1, r2
34017066:	d008      	beq.n	3401707a <HAL_RCCEx_PeriphCLKConfig+0x187a>
34017068:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3401706c:	4293      	cmp	r3, r2
3401706e:	d004      	beq.n	3401707a <HAL_RCCEx_PeriphCLKConfig+0x187a>
34017070:	f240 7174 	movw	r1, #1908	@ 0x774
34017074:	48b4      	ldr	r0, [pc, #720]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34017076:	f008 fac3 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
3401707a:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
3401707e:	4ab3      	ldr	r2, [pc, #716]	@ (3401734c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>)
34017080:	4293      	cmp	r3, r2
34017082:	f041 81bd 	bne.w	34018400 <HAL_RCCEx_PeriphCLKConfig+0x2c00>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017086:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017088:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401708c:	d004      	beq.n	34017098 <HAL_RCCEx_PeriphCLKConfig+0x1898>
3401708e:	f240 7179 	movw	r1, #1913	@ 0x779
34017092:	48ad      	ldr	r0, [pc, #692]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34017094:	f008 fab4 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017098:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401709a:	3b01      	subs	r3, #1
3401709c:	2bff      	cmp	r3, #255	@ 0xff
3401709e:	d904      	bls.n	340170aa <HAL_RCCEx_PeriphCLKConfig+0x18aa>
340170a0:	f240 717a 	movw	r1, #1914	@ 0x77a
340170a4:	48a8      	ldr	r0, [pc, #672]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340170a6:	f008 faab 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340170aa:	4aa9      	ldr	r2, [pc, #676]	@ (34017350 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
340170ac:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340170ae:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340170b2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340170b4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340170b8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340170bc:	3901      	subs	r1, #1
340170be:	4303      	orrs	r3, r0
340170c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340170c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340170c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340170cc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340170d0:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
340170d4:	f7fe fab0 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
340170d8:	6863      	ldr	r3, [r4, #4]
340170da:	051a      	lsls	r2, r3, #20
340170dc:	d544      	bpl.n	34017168 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
340170de:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
340170e2:	4a9c      	ldr	r2, [pc, #624]	@ (34017354 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
340170e4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340170e8:	4291      	cmp	r1, r2
340170ea:	d00e      	beq.n	3401710a <HAL_RCCEx_PeriphCLKConfig+0x190a>
340170ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340170f0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340170f4:	4291      	cmp	r1, r2
340170f6:	d008      	beq.n	3401710a <HAL_RCCEx_PeriphCLKConfig+0x190a>
340170f8:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340170fc:	4293      	cmp	r3, r2
340170fe:	d004      	beq.n	3401710a <HAL_RCCEx_PeriphCLKConfig+0x190a>
34017100:	f240 71a1 	movw	r1, #1953	@ 0x7a1
34017104:	4890      	ldr	r0, [pc, #576]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34017106:	f008 fa7b 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
3401710a:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
3401710e:	4a92      	ldr	r2, [pc, #584]	@ (34017358 <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
34017110:	4293      	cmp	r3, r2
34017112:	f041 81a6 	bne.w	34018462 <HAL_RCCEx_PeriphCLKConfig+0x2c62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017116:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017118:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401711c:	d004      	beq.n	34017128 <HAL_RCCEx_PeriphCLKConfig+0x1928>
3401711e:	f240 71a6 	movw	r1, #1958	@ 0x7a6
34017122:	4889      	ldr	r0, [pc, #548]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34017124:	f008 fa6c 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017128:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401712a:	3b01      	subs	r3, #1
3401712c:	2bff      	cmp	r3, #255	@ 0xff
3401712e:	d904      	bls.n	3401713a <HAL_RCCEx_PeriphCLKConfig+0x193a>
34017130:	f240 71a7 	movw	r1, #1959	@ 0x7a7
34017134:	4884      	ldr	r0, [pc, #528]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34017136:	f008 fa63 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401713a:	4a85      	ldr	r2, [pc, #532]	@ (34017350 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
3401713c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401713e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017142:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017144:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017148:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401714c:	3901      	subs	r1, #1
3401714e:	4303      	orrs	r3, r0
34017150:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017154:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017158:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3401715c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017160:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
34017164:	f7fe fa68 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34017168:	6863      	ldr	r3, [r4, #4]
3401716a:	04db      	lsls	r3, r3, #19
3401716c:	d544      	bpl.n	340171f8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
3401716e:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34017172:	4a7a      	ldr	r2, [pc, #488]	@ (3401735c <HAL_RCCEx_PeriphCLKConfig+0x1b5c>)
34017174:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017178:	4291      	cmp	r1, r2
3401717a:	d00e      	beq.n	3401719a <HAL_RCCEx_PeriphCLKConfig+0x199a>
3401717c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017180:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017184:	4291      	cmp	r1, r2
34017186:	d008      	beq.n	3401719a <HAL_RCCEx_PeriphCLKConfig+0x199a>
34017188:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3401718c:	4293      	cmp	r3, r2
3401718e:	d004      	beq.n	3401719a <HAL_RCCEx_PeriphCLKConfig+0x199a>
34017190:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34017194:	486c      	ldr	r0, [pc, #432]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34017196:	f008 fa33 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
3401719a:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
3401719e:	4a70      	ldr	r2, [pc, #448]	@ (34017360 <HAL_RCCEx_PeriphCLKConfig+0x1b60>)
340171a0:	4293      	cmp	r3, r2
340171a2:	f041 818f 	bne.w	340184c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340171a6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340171a8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340171ac:	d004      	beq.n	340171b8 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
340171ae:	f240 71d3 	movw	r1, #2003	@ 0x7d3
340171b2:	4865      	ldr	r0, [pc, #404]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340171b4:	f008 fa24 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340171b8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340171ba:	3b01      	subs	r3, #1
340171bc:	2bff      	cmp	r3, #255	@ 0xff
340171be:	d904      	bls.n	340171ca <HAL_RCCEx_PeriphCLKConfig+0x19ca>
340171c0:	f240 71d4 	movw	r1, #2004	@ 0x7d4
340171c4:	4860      	ldr	r0, [pc, #384]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340171c6:	f008 fa1b 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340171ca:	4a61      	ldr	r2, [pc, #388]	@ (34017350 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
340171cc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340171ce:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340171d2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340171d4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340171d8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340171dc:	3901      	subs	r1, #1
340171de:	4303      	orrs	r3, r0
340171e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340171e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340171e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340171ec:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340171f0:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
340171f4:	f7fe fa20 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
340171f8:	6863      	ldr	r3, [r4, #4]
340171fa:	049e      	lsls	r6, r3, #18
340171fc:	d544      	bpl.n	34017288 <HAL_RCCEx_PeriphCLKConfig+0x1a88>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
340171fe:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34017202:	4a58      	ldr	r2, [pc, #352]	@ (34017364 <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
34017204:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017208:	4291      	cmp	r1, r2
3401720a:	d00e      	beq.n	3401722a <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
3401720c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017210:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017214:	4291      	cmp	r1, r2
34017216:	d008      	beq.n	3401722a <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34017218:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3401721c:	4293      	cmp	r3, r2
3401721e:	d004      	beq.n	3401722a <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34017220:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34017224:	4848      	ldr	r0, [pc, #288]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34017226:	f008 f9eb 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
3401722a:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
3401722e:	4a4e      	ldr	r2, [pc, #312]	@ (34017368 <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
34017230:	4293      	cmp	r3, r2
34017232:	f041 8199 	bne.w	34018568 <HAL_RCCEx_PeriphCLKConfig+0x2d68>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017236:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017238:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401723c:	d004      	beq.n	34017248 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
3401723e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34017242:	4841      	ldr	r0, [pc, #260]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34017244:	f008 f9dc 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017248:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401724a:	3b01      	subs	r3, #1
3401724c:	2bff      	cmp	r3, #255	@ 0xff
3401724e:	d904      	bls.n	3401725a <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
34017250:	f640 0101 	movw	r1, #2049	@ 0x801
34017254:	483c      	ldr	r0, [pc, #240]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34017256:	f008 f9d3 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401725a:	4a3d      	ldr	r2, [pc, #244]	@ (34017350 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
3401725c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401725e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017262:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017264:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017268:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401726c:	3901      	subs	r1, #1
3401726e:	4303      	orrs	r3, r0
34017270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017274:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017278:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3401727c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017280:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34017284:	f7fe f9d8 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34017288:	6863      	ldr	r3, [r4, #4]
3401728a:	0458      	lsls	r0, r3, #17
3401728c:	d544      	bpl.n	34017318 <HAL_RCCEx_PeriphCLKConfig+0x1b18>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
3401728e:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34017292:	4a36      	ldr	r2, [pc, #216]	@ (3401736c <HAL_RCCEx_PeriphCLKConfig+0x1b6c>)
34017294:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017298:	4291      	cmp	r1, r2
3401729a:	d00e      	beq.n	340172ba <HAL_RCCEx_PeriphCLKConfig+0x1aba>
3401729c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340172a0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340172a4:	4291      	cmp	r1, r2
340172a6:	d008      	beq.n	340172ba <HAL_RCCEx_PeriphCLKConfig+0x1aba>
340172a8:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340172ac:	4293      	cmp	r3, r2
340172ae:	d004      	beq.n	340172ba <HAL_RCCEx_PeriphCLKConfig+0x1aba>
340172b0:	f640 0128 	movw	r1, #2088	@ 0x828
340172b4:	4824      	ldr	r0, [pc, #144]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340172b6:	f008 f9a3 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
340172ba:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
340172be:	4a2c      	ldr	r2, [pc, #176]	@ (34017370 <HAL_RCCEx_PeriphCLKConfig+0x1b70>)
340172c0:	4293      	cmp	r3, r2
340172c2:	f041 8182 	bne.w	340185ca <HAL_RCCEx_PeriphCLKConfig+0x2dca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340172c6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340172c8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340172cc:	d004      	beq.n	340172d8 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
340172ce:	f640 012d 	movw	r1, #2093	@ 0x82d
340172d2:	481d      	ldr	r0, [pc, #116]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340172d4:	f008 f994 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340172d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340172da:	3b01      	subs	r3, #1
340172dc:	2bff      	cmp	r3, #255	@ 0xff
340172de:	d904      	bls.n	340172ea <HAL_RCCEx_PeriphCLKConfig+0x1aea>
340172e0:	f640 012e 	movw	r1, #2094	@ 0x82e
340172e4:	4818      	ldr	r0, [pc, #96]	@ (34017348 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340172e6:	f008 f98b 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340172ea:	4a19      	ldr	r2, [pc, #100]	@ (34017350 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
340172ec:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340172ee:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340172f2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340172f4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340172f8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340172fc:	3901      	subs	r1, #1
340172fe:	4303      	orrs	r3, r0
34017300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017304:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017308:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3401730c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017310:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
34017314:	f7fe f990 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34017318:	6863      	ldr	r3, [r4, #4]
3401731a:	0419      	lsls	r1, r3, #16
3401731c:	d560      	bpl.n	340173e0 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
3401731e:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34017322:	4a14      	ldr	r2, [pc, #80]	@ (34017374 <HAL_RCCEx_PeriphCLKConfig+0x1b74>)
34017324:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017328:	4291      	cmp	r1, r2
3401732a:	d02a      	beq.n	34017382 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
3401732c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017330:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017334:	4291      	cmp	r1, r2
34017336:	d024      	beq.n	34017382 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34017338:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
3401733c:	4293      	cmp	r3, r2
3401733e:	d020      	beq.n	34017382 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34017340:	e01a      	b.n	34017378 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
34017342:	bf00      	nop
34017344:	07000830 	.word	0x07000830
34017348:	3402f73a 	.word	0x3402f73a
3401734c:	07020830 	.word	0x07020830
34017350:	56028000 	.word	0x56028000
34017354:	07000c30 	.word	0x07000c30
34017358:	07020c30 	.word	0x07020c30
3401735c:	07001030 	.word	0x07001030
34017360:	07021030 	.word	0x07021030
34017364:	07001430 	.word	0x07001430
34017368:	07021430 	.word	0x07021430
3401736c:	07001830 	.word	0x07001830
34017370:	07021830 	.word	0x07021830
34017374:	07001c30 	.word	0x07001c30
34017378:	f640 0155 	movw	r1, #2133	@ 0x855
3401737c:	48bb      	ldr	r0, [pc, #748]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401737e:	f008 f93f 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34017382:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34017386:	4aba      	ldr	r2, [pc, #744]	@ (34017670 <HAL_RCCEx_PeriphCLKConfig+0x1e70>)
34017388:	4293      	cmp	r3, r2
3401738a:	f041 814f 	bne.w	3401862c <HAL_RCCEx_PeriphCLKConfig+0x2e2c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3401738e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017390:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017394:	d004      	beq.n	340173a0 <HAL_RCCEx_PeriphCLKConfig+0x1ba0>
34017396:	f640 015a 	movw	r1, #2138	@ 0x85a
3401739a:	48b4      	ldr	r0, [pc, #720]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401739c:	f008 f930 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340173a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340173a2:	3b01      	subs	r3, #1
340173a4:	2bff      	cmp	r3, #255	@ 0xff
340173a6:	d904      	bls.n	340173b2 <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
340173a8:	f640 015b 	movw	r1, #2139	@ 0x85b
340173ac:	48af      	ldr	r0, [pc, #700]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340173ae:	f008 f927 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340173b2:	4ab0      	ldr	r2, [pc, #704]	@ (34017674 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
340173b4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340173b6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340173ba:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340173bc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340173c0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340173c4:	3901      	subs	r1, #1
340173c6:	4303      	orrs	r3, r0
340173c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340173cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340173d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340173d4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340173d8:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
340173dc:	f7fe f92c 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
340173e0:	6863      	ldr	r3, [r4, #4]
340173e2:	03da      	lsls	r2, r3, #15
340173e4:	d544      	bpl.n	34017470 <HAL_RCCEx_PeriphCLKConfig+0x1c70>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
340173e6:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
340173ea:	4aa3      	ldr	r2, [pc, #652]	@ (34017678 <HAL_RCCEx_PeriphCLKConfig+0x1e78>)
340173ec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340173f0:	4291      	cmp	r1, r2
340173f2:	d00e      	beq.n	34017412 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
340173f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340173f8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340173fc:	4291      	cmp	r1, r2
340173fe:	d008      	beq.n	34017412 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34017400:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017404:	4293      	cmp	r3, r2
34017406:	d004      	beq.n	34017412 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34017408:	f640 0182 	movw	r1, #2178	@ 0x882
3401740c:	4897      	ldr	r0, [pc, #604]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401740e:	f008 f8f7 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34017412:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34017416:	4a99      	ldr	r2, [pc, #612]	@ (3401767c <HAL_RCCEx_PeriphCLKConfig+0x1e7c>)
34017418:	4293      	cmp	r3, r2
3401741a:	f041 8138 	bne.w	3401868e <HAL_RCCEx_PeriphCLKConfig+0x2e8e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3401741e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017420:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017424:	d004      	beq.n	34017430 <HAL_RCCEx_PeriphCLKConfig+0x1c30>
34017426:	f640 0187 	movw	r1, #2183	@ 0x887
3401742a:	4890      	ldr	r0, [pc, #576]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401742c:	f008 f8e8 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017430:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34017432:	3b01      	subs	r3, #1
34017434:	2bff      	cmp	r3, #255	@ 0xff
34017436:	d904      	bls.n	34017442 <HAL_RCCEx_PeriphCLKConfig+0x1c42>
34017438:	f640 0188 	movw	r1, #2184	@ 0x888
3401743c:	488b      	ldr	r0, [pc, #556]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401743e:	f008 f8df 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34017442:	4a8c      	ldr	r2, [pc, #560]	@ (34017674 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34017444:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017446:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3401744a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3401744c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017450:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017454:	3901      	subs	r1, #1
34017456:	4303      	orrs	r3, r0
34017458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401745c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017460:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017464:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017468:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
3401746c:	f7fe f8e4 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34017470:	6863      	ldr	r3, [r4, #4]
34017472:	039b      	lsls	r3, r3, #14
34017474:	d544      	bpl.n	34017500 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
34017476:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
3401747a:	4a81      	ldr	r2, [pc, #516]	@ (34017680 <HAL_RCCEx_PeriphCLKConfig+0x1e80>)
3401747c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017480:	4291      	cmp	r1, r2
34017482:	d00e      	beq.n	340174a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34017484:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017488:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401748c:	4291      	cmp	r1, r2
3401748e:	d008      	beq.n	340174a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34017490:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017494:	4293      	cmp	r3, r2
34017496:	d004      	beq.n	340174a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34017498:	f640 01af 	movw	r1, #2223	@ 0x8af
3401749c:	4873      	ldr	r0, [pc, #460]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401749e:	f008 f8af 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
340174a2:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
340174a6:	4a77      	ldr	r2, [pc, #476]	@ (34017684 <HAL_RCCEx_PeriphCLKConfig+0x1e84>)
340174a8:	4293      	cmp	r3, r2
340174aa:	f041 8121 	bne.w	340186f0 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340174ae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340174b0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340174b4:	d004      	beq.n	340174c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
340174b6:	f640 01b4 	movw	r1, #2228	@ 0x8b4
340174ba:	486c      	ldr	r0, [pc, #432]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340174bc:	f008 f8a0 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340174c0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340174c2:	3b01      	subs	r3, #1
340174c4:	2bff      	cmp	r3, #255	@ 0xff
340174c6:	d904      	bls.n	340174d2 <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
340174c8:	f640 01b5 	movw	r1, #2229	@ 0x8b5
340174cc:	4867      	ldr	r0, [pc, #412]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340174ce:	f008 f897 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340174d2:	4a68      	ldr	r2, [pc, #416]	@ (34017674 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
340174d4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340174d6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340174da:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340174dc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340174e0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340174e4:	3901      	subs	r1, #1
340174e6:	4303      	orrs	r3, r0
340174e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340174ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340174f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340174f4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340174f8:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
340174fc:	f7fe f89c 	bl	34015638 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34017500:	6863      	ldr	r3, [r4, #4]
34017502:	035e      	lsls	r6, r3, #13
34017504:	d51e      	bpl.n	34017544 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
34017506:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
3401750a:	4a5f      	ldr	r2, [pc, #380]	@ (34017688 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
3401750c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017510:	4291      	cmp	r1, r2
34017512:	d00a      	beq.n	3401752a <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34017514:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34017518:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
3401751c:	4293      	cmp	r3, r2
3401751e:	d004      	beq.n	3401752a <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34017520:	f640 01dc 	movw	r1, #2268	@ 0x8dc
34017524:	4851      	ldr	r0, [pc, #324]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34017526:	f008 f86b 	bl	3401f600 <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3401752a:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
3401752e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34017532:	f7fe f881 	bl	34015638 <LL_RCC_SetClockSource>
34017536:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
3401753a:	2b00      	cmp	r3, #0
3401753c:	f281 8109 	bge.w	34018752 <HAL_RCCEx_PeriphCLKConfig+0x2f52>
34017540:	f7fe f84a 	bl	340155d8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34017544:	6863      	ldr	r3, [r4, #4]
34017546:	02d8      	lsls	r0, r3, #11
34017548:	d51e      	bpl.n	34017588 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
3401754a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
3401754e:	4a4f      	ldr	r2, [pc, #316]	@ (3401768c <HAL_RCCEx_PeriphCLKConfig+0x1e8c>)
34017550:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017554:	4291      	cmp	r1, r2
34017556:	d00a      	beq.n	3401756e <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34017558:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3401755c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34017560:	4293      	cmp	r3, r2
34017562:	d004      	beq.n	3401756e <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34017564:	f640 01e6 	movw	r1, #2278	@ 0x8e6
34017568:	4840      	ldr	r0, [pc, #256]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401756a:	f008 f849 	bl	3401f600 <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3401756e:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
34017572:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34017576:	f7fe f85f 	bl	34015638 <LL_RCC_SetClockSource>
3401757a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
3401757e:	2b00      	cmp	r3, #0
34017580:	f281 80eb 	bge.w	3401875a <HAL_RCCEx_PeriphCLKConfig+0x2f5a>
34017584:	f7fe f828 	bl	340155d8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34017588:	6863      	ldr	r3, [r4, #4]
3401758a:	0319      	lsls	r1, r3, #12
3401758c:	d549      	bpl.n	34017622 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
3401758e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34017592:	4a3f      	ldr	r2, [pc, #252]	@ (34017690 <HAL_RCCEx_PeriphCLKConfig+0x1e90>)
34017594:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017598:	4291      	cmp	r1, r2
3401759a:	d00a      	beq.n	340175b2 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
3401759c:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
340175a0:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
340175a4:	4293      	cmp	r3, r2
340175a6:	d004      	beq.n	340175b2 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
340175a8:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
340175ac:	482f      	ldr	r0, [pc, #188]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340175ae:	f008 f827 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
340175b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
340175b6:	4a37      	ldr	r2, [pc, #220]	@ (34017694 <HAL_RCCEx_PeriphCLKConfig+0x1e94>)
340175b8:	4293      	cmp	r3, r2
340175ba:	f041 80d2 	bne.w	34018762 <HAL_RCCEx_PeriphCLKConfig+0x2f62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340175be:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340175c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340175c4:	d004      	beq.n	340175d0 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
340175c6:	f640 01f5 	movw	r1, #2293	@ 0x8f5
340175ca:	4828      	ldr	r0, [pc, #160]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340175cc:	f008 f818 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340175d0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340175d2:	3b01      	subs	r3, #1
340175d4:	2bff      	cmp	r3, #255	@ 0xff
340175d6:	d904      	bls.n	340175e2 <HAL_RCCEx_PeriphCLKConfig+0x1de2>
340175d8:	f640 01f6 	movw	r1, #2294	@ 0x8f6
340175dc:	4823      	ldr	r0, [pc, #140]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340175de:	f008 f80f 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340175e2:	4a24      	ldr	r2, [pc, #144]	@ (34017674 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
340175e4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340175e6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340175ea:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340175ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340175f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340175f4:	3901      	subs	r1, #1
340175f6:	4303      	orrs	r3, r0
340175f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340175fc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017600:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017604:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34017608:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
3401760c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34017610:	f7fe f812 	bl	34015638 <LL_RCC_SetClockSource>
34017614:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34017618:	2b00      	cmp	r3, #0
3401761a:	f281 80ab 	bge.w	34018774 <HAL_RCCEx_PeriphCLKConfig+0x2f74>
3401761e:	f7fd ffdb 	bl	340155d8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34017622:	6863      	ldr	r3, [r4, #4]
34017624:	029a      	lsls	r2, r3, #10
34017626:	d564      	bpl.n	340176f2 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
34017628:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
3401762c:	4a1a      	ldr	r2, [pc, #104]	@ (34017698 <HAL_RCCEx_PeriphCLKConfig+0x1e98>)
3401762e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017632:	4291      	cmp	r1, r2
34017634:	d00a      	beq.n	3401764c <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34017636:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
3401763a:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
3401763e:	4293      	cmp	r3, r2
34017640:	d004      	beq.n	3401764c <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34017642:	f44f 6111 	mov.w	r1, #2320	@ 0x910
34017646:	4809      	ldr	r0, [pc, #36]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34017648:	f007 ffda 	bl	3401f600 <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
3401764c:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34017650:	4a12      	ldr	r2, [pc, #72]	@ (3401769c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>)
34017652:	4293      	cmp	r3, r2
34017654:	f041 8092 	bne.w	3401877c <HAL_RCCEx_PeriphCLKConfig+0x2f7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017658:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3401765a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401765e:	d01f      	beq.n	340176a0 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34017660:	f640 1115 	movw	r1, #2325	@ 0x915
34017664:	4801      	ldr	r0, [pc, #4]	@ (3401766c <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34017666:	f007 ffcb 	bl	3401f600 <assert_failed>
3401766a:	e019      	b.n	340176a0 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
3401766c:	3402f73a 	.word	0x3402f73a
34017670:	07021c30 	.word	0x07021c30
34017674:	56028000 	.word	0x56028000
34017678:	07000034 	.word	0x07000034
3401767c:	07020034 	.word	0x07020034
34017680:	07000434 	.word	0x07000434
34017684:	07020434 	.word	0x07020434
34017688:	01001014 	.word	0x01001014
3401768c:	01001814 	.word	0x01001814
34017690:	03000c14 	.word	0x03000c14
34017694:	03020c14 	.word	0x03020c14
34017698:	03001414 	.word	0x03001414
3401769c:	03021414 	.word	0x03021414
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340176a0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340176a2:	3b01      	subs	r3, #1
340176a4:	2bff      	cmp	r3, #255	@ 0xff
340176a6:	d904      	bls.n	340176b2 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
340176a8:	f640 1116 	movw	r1, #2326	@ 0x916
340176ac:	48b1      	ldr	r0, [pc, #708]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340176ae:	f007 ffa7 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340176b2:	4ab1      	ldr	r2, [pc, #708]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340176b4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340176b6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340176ba:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340176bc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340176c0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340176c4:	3901      	subs	r1, #1
340176c6:	4303      	orrs	r3, r0
340176c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340176cc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340176d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340176d4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340176d8:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
340176dc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
340176e0:	f7fd ffaa 	bl	34015638 <LL_RCC_SetClockSource>
340176e4:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
340176e8:	2b00      	cmp	r3, #0
340176ea:	f281 8050 	bge.w	3401878e <HAL_RCCEx_PeriphCLKConfig+0x2f8e>
340176ee:	f7fd ff73 	bl	340155d8 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
340176f2:	6863      	ldr	r3, [r4, #4]
340176f4:	061b      	lsls	r3, r3, #24
340176f6:	d511      	bpl.n	3401771c <HAL_RCCEx_PeriphCLKConfig+0x1f1c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
340176f8:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
340176fc:	2b03      	cmp	r3, #3
340176fe:	d904      	bls.n	3401770a <HAL_RCCEx_PeriphCLKConfig+0x1f0a>
34017700:	f44f 6113 	mov.w	r1, #2352	@ 0x930
34017704:	489b      	ldr	r0, [pc, #620]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017706:	f007 ff7b 	bl	3401f600 <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
3401770a:	4a9b      	ldr	r2, [pc, #620]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3401770c:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
34017710:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34017712:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34017716:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
3401771a:	6253      	str	r3, [r2, #36]	@ 0x24
}
3401771c:	1e28      	subs	r0, r5, #0
3401771e:	bf18      	it	ne
34017720:	2001      	movne	r0, #1
34017722:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34017724:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34017726:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401772a:	d003      	beq.n	34017734 <HAL_RCCEx_PeriphCLKConfig+0x1f34>
3401772c:	21e6      	movs	r1, #230	@ 0xe6
3401772e:	4891      	ldr	r0, [pc, #580]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017730:	f007 ff66 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34017734:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34017736:	3b01      	subs	r3, #1
34017738:	2bff      	cmp	r3, #255	@ 0xff
3401773a:	d903      	bls.n	34017744 <HAL_RCCEx_PeriphCLKConfig+0x1f44>
3401773c:	21e7      	movs	r1, #231	@ 0xe7
3401773e:	488d      	ldr	r0, [pc, #564]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017740:	f007 ff5e 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34017744:	4a8c      	ldr	r2, [pc, #560]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34017746:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34017748:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
3401774c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3401774e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017752:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017756:	3901      	subs	r1, #1
34017758:	4303      	orrs	r3, r0
3401775a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401775e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34017762:	f44f 7300 	mov.w	r3, #512	@ 0x200
34017766:	f7fe b941 	b.w	340159ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3401776a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3401776c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017770:	d003      	beq.n	3401777a <HAL_RCCEx_PeriphCLKConfig+0x1f7a>
34017772:	21f3      	movs	r1, #243	@ 0xf3
34017774:	487f      	ldr	r0, [pc, #508]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017776:	f007 ff43 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3401777a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3401777c:	3b01      	subs	r3, #1
3401777e:	2bff      	cmp	r3, #255	@ 0xff
34017780:	d903      	bls.n	3401778a <HAL_RCCEx_PeriphCLKConfig+0x1f8a>
34017782:	21f4      	movs	r1, #244	@ 0xf4
34017784:	487b      	ldr	r0, [pc, #492]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017786:	f007 ff3b 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3401778a:	4a7b      	ldr	r2, [pc, #492]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3401778c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3401778e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017792:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017794:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017798:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401779c:	3901      	subs	r1, #1
3401779e:	4303      	orrs	r3, r0
340177a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340177a4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340177a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340177ac:	f7fe b91e 	b.w	340159ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
340177b0:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
340177b4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340177b8:	d004      	beq.n	340177c4 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
340177ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
340177be:	486d      	ldr	r0, [pc, #436]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340177c0:	f007 ff1e 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
340177c4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
340177c8:	3b01      	subs	r3, #1
340177ca:	2bff      	cmp	r3, #255	@ 0xff
340177cc:	d904      	bls.n	340177d8 <HAL_RCCEx_PeriphCLKConfig+0x1fd8>
340177ce:	f240 1101 	movw	r1, #257	@ 0x101
340177d2:	4868      	ldr	r0, [pc, #416]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340177d4:	f007 ff14 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
340177d8:	4a67      	ldr	r2, [pc, #412]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340177da:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
340177de:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
340177e2:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
340177e6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340177ea:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340177ee:	3901      	subs	r1, #1
340177f0:	4303      	orrs	r3, r0
340177f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340177f6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
340177fa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
340177fe:	f7fe b8f5 	b.w	340159ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34017802:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34017806:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401780a:	d004      	beq.n	34017816 <HAL_RCCEx_PeriphCLKConfig+0x2016>
3401780c:	f240 110d 	movw	r1, #269	@ 0x10d
34017810:	4858      	ldr	r0, [pc, #352]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017812:	f007 fef5 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34017816:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
3401781a:	3b01      	subs	r3, #1
3401781c:	2bff      	cmp	r3, #255	@ 0xff
3401781e:	d904      	bls.n	3401782a <HAL_RCCEx_PeriphCLKConfig+0x202a>
34017820:	f44f 7187 	mov.w	r1, #270	@ 0x10e
34017824:	4853      	ldr	r0, [pc, #332]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017826:	f007 feeb 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3401782a:	4a53      	ldr	r2, [pc, #332]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3401782c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34017830:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
34017834:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34017838:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401783c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017840:	3901      	subs	r1, #1
34017842:	4303      	orrs	r3, r0
34017844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017848:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
3401784c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34017850:	f7fe b8cc 	b.w	340159ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34017854:	4a49      	ldr	r2, [pc, #292]	@ (3401797c <HAL_RCCEx_PeriphCLKConfig+0x217c>)
34017856:	4293      	cmp	r3, r2
34017858:	d123      	bne.n	340178a2 <HAL_RCCEx_PeriphCLKConfig+0x20a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3401785a:	6a23      	ldr	r3, [r4, #32]
3401785c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017860:	d004      	beq.n	3401786c <HAL_RCCEx_PeriphCLKConfig+0x206c>
34017862:	f44f 719b 	mov.w	r1, #310	@ 0x136
34017866:	4843      	ldr	r0, [pc, #268]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017868:	f007 feca 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3401786c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401786e:	3b01      	subs	r3, #1
34017870:	2bff      	cmp	r3, #255	@ 0xff
34017872:	d904      	bls.n	3401787e <HAL_RCCEx_PeriphCLKConfig+0x207e>
34017874:	f240 1137 	movw	r1, #311	@ 0x137
34017878:	483e      	ldr	r0, [pc, #248]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401787a:	f007 fec1 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3401787e:	4a3e      	ldr	r2, [pc, #248]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34017880:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34017882:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34017886:	6a20      	ldr	r0, [r4, #32]
34017888:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401788c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017890:	3901      	subs	r1, #1
34017892:	4303      	orrs	r3, r0
34017894:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017898:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3401789c:	2308      	movs	r3, #8
3401789e:	f7fe b8e8 	b.w	34015a72 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
340178a2:	4a37      	ldr	r2, [pc, #220]	@ (34017980 <HAL_RCCEx_PeriphCLKConfig+0x2180>)
340178a4:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340178a6:	bf02      	ittt	eq
340178a8:	2240      	moveq	r2, #64	@ 0x40
340178aa:	4b33      	ldreq	r3, [pc, #204]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340178ac:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340178b0:	f7fe b8e1 	b.w	34015a76 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
340178b4:	4a33      	ldr	r2, [pc, #204]	@ (34017984 <HAL_RCCEx_PeriphCLKConfig+0x2184>)
340178b6:	4293      	cmp	r3, r2
340178b8:	d123      	bne.n	34017902 <HAL_RCCEx_PeriphCLKConfig+0x2102>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340178ba:	6a23      	ldr	r3, [r4, #32]
340178bc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340178c0:	d004      	beq.n	340178cc <HAL_RCCEx_PeriphCLKConfig+0x20cc>
340178c2:	f240 1163 	movw	r1, #355	@ 0x163
340178c6:	482b      	ldr	r0, [pc, #172]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340178c8:	f007 fe9a 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340178cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340178ce:	3b01      	subs	r3, #1
340178d0:	2bff      	cmp	r3, #255	@ 0xff
340178d2:	d904      	bls.n	340178de <HAL_RCCEx_PeriphCLKConfig+0x20de>
340178d4:	f44f 71b2 	mov.w	r1, #356	@ 0x164
340178d8:	4826      	ldr	r0, [pc, #152]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340178da:	f007 fe91 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340178de:	4a26      	ldr	r2, [pc, #152]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340178e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340178e2:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340178e6:	6a20      	ldr	r0, [r4, #32]
340178e8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340178ec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340178f0:	3901      	subs	r1, #1
340178f2:	4303      	orrs	r3, r0
340178f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340178f8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340178fc:	2308      	movs	r3, #8
340178fe:	f7fe b8f5 	b.w	34015aec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
34017902:	4a21      	ldr	r2, [pc, #132]	@ (34017988 <HAL_RCCEx_PeriphCLKConfig+0x2188>)
34017904:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017906:	bf02      	ittt	eq
34017908:	2240      	moveq	r2, #64	@ 0x40
3401790a:	4b1b      	ldreq	r3, [pc, #108]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3401790c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017910:	f7fe b8ee 	b.w	34015af0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34017914:	4a1d      	ldr	r2, [pc, #116]	@ (3401798c <HAL_RCCEx_PeriphCLKConfig+0x218c>)
34017916:	4293      	cmp	r3, r2
34017918:	d123      	bne.n	34017962 <HAL_RCCEx_PeriphCLKConfig+0x2162>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3401791a:	6a23      	ldr	r3, [r4, #32]
3401791c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017920:	d004      	beq.n	3401792c <HAL_RCCEx_PeriphCLKConfig+0x212c>
34017922:	f44f 71c8 	mov.w	r1, #400	@ 0x190
34017926:	4813      	ldr	r0, [pc, #76]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017928:	f007 fe6a 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3401792c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401792e:	3b01      	subs	r3, #1
34017930:	2bff      	cmp	r3, #255	@ 0xff
34017932:	d904      	bls.n	3401793e <HAL_RCCEx_PeriphCLKConfig+0x213e>
34017934:	f240 1191 	movw	r1, #401	@ 0x191
34017938:	480e      	ldr	r0, [pc, #56]	@ (34017974 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401793a:	f007 fe61 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3401793e:	4a0e      	ldr	r2, [pc, #56]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34017940:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34017942:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34017946:	6a20      	ldr	r0, [r4, #32]
34017948:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401794c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017950:	3901      	subs	r1, #1
34017952:	4303      	orrs	r3, r0
34017954:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017958:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3401795c:	2308      	movs	r3, #8
3401795e:	f7fe b902 	b.w	34015b66 <HAL_RCCEx_PeriphCLKConfig+0x366>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34017962:	4a0b      	ldr	r2, [pc, #44]	@ (34017990 <HAL_RCCEx_PeriphCLKConfig+0x2190>)
34017964:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017966:	bf02      	ittt	eq
34017968:	2240      	moveq	r2, #64	@ 0x40
3401796a:	4b03      	ldreq	r3, [pc, #12]	@ (34017978 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3401796c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017970:	f7fe b8fb 	b.w	34015b6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
34017974:	3402f73a 	.word	0x3402f73a
34017978:	56028000 	.word	0x56028000
3401797c:	03030014 	.word	0x03030014
34017980:	03010014 	.word	0x03010014
34017984:	03030414 	.word	0x03030414
34017988:	03010414 	.word	0x03010414
3401798c:	03030814 	.word	0x03030814
34017990:	03010814 	.word	0x03010814
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34017994:	2b30      	cmp	r3, #48	@ 0x30
34017996:	d123      	bne.n	340179e0 <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34017998:	6a23      	ldr	r3, [r4, #32]
3401799a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401799e:	d004      	beq.n	340179aa <HAL_RCCEx_PeriphCLKConfig+0x21aa>
340179a0:	f240 11bd 	movw	r1, #445	@ 0x1bd
340179a4:	48b2      	ldr	r0, [pc, #712]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340179a6:	f007 fe2b 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340179aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340179ac:	3b01      	subs	r3, #1
340179ae:	2bff      	cmp	r3, #255	@ 0xff
340179b0:	d904      	bls.n	340179bc <HAL_RCCEx_PeriphCLKConfig+0x21bc>
340179b2:	f44f 71df 	mov.w	r1, #446	@ 0x1be
340179b6:	48ae      	ldr	r0, [pc, #696]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340179b8:	f007 fe22 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340179bc:	4aad      	ldr	r2, [pc, #692]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340179be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340179c0:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340179c4:	6a20      	ldr	r0, [r4, #32]
340179c6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340179ca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340179ce:	3901      	subs	r1, #1
340179d0:	4303      	orrs	r3, r0
340179d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340179d6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340179da:	2308      	movs	r3, #8
340179dc:	f7fe b8fd 	b.w	34015bda <HAL_RCCEx_PeriphCLKConfig+0x3da>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
340179e0:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340179e2:	bf02      	ittt	eq
340179e4:	2240      	moveq	r2, #64	@ 0x40
340179e6:	4ba3      	ldreq	r3, [pc, #652]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340179e8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340179ec:	f7fe b8f7 	b.w	34015bde <HAL_RCCEx_PeriphCLKConfig+0x3de>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
340179f0:	4aa1      	ldr	r2, [pc, #644]	@ (34017c78 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
340179f2:	4293      	cmp	r3, r2
340179f4:	d123      	bne.n	34017a3e <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340179f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340179f8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340179fc:	d004      	beq.n	34017a08 <HAL_RCCEx_PeriphCLKConfig+0x2208>
340179fe:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
34017a02:	489b      	ldr	r0, [pc, #620]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017a04:	f007 fdfc 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34017a08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34017a0a:	3b01      	subs	r3, #1
34017a0c:	2bff      	cmp	r3, #255	@ 0xff
34017a0e:	d904      	bls.n	34017a1a <HAL_RCCEx_PeriphCLKConfig+0x221a>
34017a10:	f240 11eb 	movw	r1, #491	@ 0x1eb
34017a14:	4896      	ldr	r0, [pc, #600]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017a16:	f007 fdf3 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34017a1a:	4a96      	ldr	r2, [pc, #600]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017a1c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34017a1e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34017a22:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34017a24:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017a28:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017a2c:	3901      	subs	r1, #1
34017a2e:	4303      	orrs	r3, r0
34017a30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017a34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34017a38:	2310      	movs	r3, #16
34017a3a:	f7fe b911 	b.w	34015c60 <HAL_RCCEx_PeriphCLKConfig+0x460>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
34017a3e:	4a8f      	ldr	r2, [pc, #572]	@ (34017c7c <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34017a40:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017a42:	bf02      	ittt	eq
34017a44:	2240      	moveq	r2, #64	@ 0x40
34017a46:	4b8b      	ldreq	r3, [pc, #556]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017a48:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017a4c:	f7fe b90a 	b.w	34015c64 <HAL_RCCEx_PeriphCLKConfig+0x464>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34017a50:	4a8b      	ldr	r2, [pc, #556]	@ (34017c80 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
34017a52:	4293      	cmp	r3, r2
34017a54:	d123      	bne.n	34017a9e <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34017a56:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34017a58:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017a5c:	d004      	beq.n	34017a68 <HAL_RCCEx_PeriphCLKConfig+0x2268>
34017a5e:	f240 2117 	movw	r1, #535	@ 0x217
34017a62:	4883      	ldr	r0, [pc, #524]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017a64:	f007 fdcc 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34017a68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34017a6a:	3b01      	subs	r3, #1
34017a6c:	2bff      	cmp	r3, #255	@ 0xff
34017a6e:	d904      	bls.n	34017a7a <HAL_RCCEx_PeriphCLKConfig+0x227a>
34017a70:	f44f 7106 	mov.w	r1, #536	@ 0x218
34017a74:	487e      	ldr	r0, [pc, #504]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017a76:	f007 fdc3 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34017a7a:	4a7e      	ldr	r2, [pc, #504]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017a7c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34017a7e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34017a82:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34017a84:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017a88:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017a8c:	3901      	subs	r1, #1
34017a8e:	4303      	orrs	r3, r0
34017a90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017a94:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34017a98:	2310      	movs	r3, #16
34017a9a:	f7fe b938 	b.w	34015d0e <HAL_RCCEx_PeriphCLKConfig+0x50e>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34017a9e:	4a79      	ldr	r2, [pc, #484]	@ (34017c84 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34017aa0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017aa2:	bf02      	ittt	eq
34017aa4:	2240      	moveq	r2, #64	@ 0x40
34017aa6:	4b73      	ldreq	r3, [pc, #460]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017aa8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017aac:	f7fe b931 	b.w	34015d12 <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34017ab0:	2b30      	cmp	r3, #48	@ 0x30
34017ab2:	d123      	bne.n	34017afc <HAL_RCCEx_PeriphCLKConfig+0x22fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017ab6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017aba:	d004      	beq.n	34017ac6 <HAL_RCCEx_PeriphCLKConfig+0x22c6>
34017abc:	f240 2145 	movw	r1, #581	@ 0x245
34017ac0:	486b      	ldr	r0, [pc, #428]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017ac2:	f007 fd9d 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017ac6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017ac8:	3b01      	subs	r3, #1
34017aca:	2bff      	cmp	r3, #255	@ 0xff
34017acc:	d904      	bls.n	34017ad8 <HAL_RCCEx_PeriphCLKConfig+0x22d8>
34017ace:	f240 2146 	movw	r1, #582	@ 0x246
34017ad2:	4867      	ldr	r0, [pc, #412]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017ad4:	f007 fd94 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017ad8:	4a66      	ldr	r2, [pc, #408]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017ada:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017adc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017ae0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017ae2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017ae6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017aea:	3901      	subs	r1, #1
34017aec:	4303      	orrs	r3, r0
34017aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017af6:	2380      	movs	r3, #128	@ 0x80
34017af8:	f7fe b94f 	b.w	34015d9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34017afc:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017afe:	bf02      	ittt	eq
34017b00:	2240      	moveq	r2, #64	@ 0x40
34017b02:	4b5c      	ldreq	r3, [pc, #368]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017b04:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017b08:	f7fe b949 	b.w	34015d9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34017b0c:	2b03      	cmp	r3, #3
34017b0e:	d123      	bne.n	34017b58 <HAL_RCCEx_PeriphCLKConfig+0x2358>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017b10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017b12:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017b16:	d004      	beq.n	34017b22 <HAL_RCCEx_PeriphCLKConfig+0x2322>
34017b18:	f240 2173 	movw	r1, #627	@ 0x273
34017b1c:	4854      	ldr	r0, [pc, #336]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017b1e:	f007 fd6f 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017b22:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017b24:	3b01      	subs	r3, #1
34017b26:	2bff      	cmp	r3, #255	@ 0xff
34017b28:	d904      	bls.n	34017b34 <HAL_RCCEx_PeriphCLKConfig+0x2334>
34017b2a:	f44f 711d 	mov.w	r1, #628	@ 0x274
34017b2e:	4850      	ldr	r0, [pc, #320]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017b30:	f007 fd66 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017b34:	4a4f      	ldr	r2, [pc, #316]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017b36:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017b38:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017b3c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017b3e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017b42:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017b46:	3901      	subs	r1, #1
34017b48:	4303      	orrs	r3, r0
34017b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017b52:	2380      	movs	r3, #128	@ 0x80
34017b54:	f7fe b967 	b.w	34015e26 <HAL_RCCEx_PeriphCLKConfig+0x626>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
34017b58:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017b5a:	bf02      	ittt	eq
34017b5c:	2240      	moveq	r2, #64	@ 0x40
34017b5e:	4b45      	ldreq	r3, [pc, #276]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017b60:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017b64:	f7fe b961 	b.w	34015e2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
34017b68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017b6c:	bf02      	ittt	eq
34017b6e:	2240      	moveq	r2, #64	@ 0x40
34017b70:	4b40      	ldreq	r3, [pc, #256]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017b72:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017b76:	f7fe b9ca 	b.w	34015f0e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
34017b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017b7e:	bf02      	ittt	eq
34017b80:	2240      	moveq	r2, #64	@ 0x40
34017b82:	4b3c      	ldreq	r3, [pc, #240]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017b84:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017b88:	f7fe ba03 	b.w	34015f92 <HAL_RCCEx_PeriphCLKConfig+0x792>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
34017b8c:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017b8e:	bf02      	ittt	eq
34017b90:	2240      	moveq	r2, #64	@ 0x40
34017b92:	4b38      	ldreq	r3, [pc, #224]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017b94:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017b98:	f7fe ba92 	b.w	340160c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34017b9c:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017b9e:	bf02      	ittt	eq
34017ba0:	2240      	moveq	r2, #64	@ 0x40
34017ba2:	4b34      	ldreq	r3, [pc, #208]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017ba4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017ba8:	f7fe bad3 	b.w	34016152 <HAL_RCCEx_PeriphCLKConfig+0x952>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34017bac:	4a36      	ldr	r2, [pc, #216]	@ (34017c88 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34017bae:	4293      	cmp	r3, r2
34017bb0:	d124      	bne.n	34017bfc <HAL_RCCEx_PeriphCLKConfig+0x23fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017bb2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017bb4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017bb8:	d004      	beq.n	34017bc4 <HAL_RCCEx_PeriphCLKConfig+0x23c4>
34017bba:	f240 314f 	movw	r1, #847	@ 0x34f
34017bbe:	482c      	ldr	r0, [pc, #176]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017bc0:	f007 fd1e 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017bc4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017bc6:	3b01      	subs	r3, #1
34017bc8:	2bff      	cmp	r3, #255	@ 0xff
34017bca:	d904      	bls.n	34017bd6 <HAL_RCCEx_PeriphCLKConfig+0x23d6>
34017bcc:	f44f 7154 	mov.w	r1, #848	@ 0x350
34017bd0:	4827      	ldr	r0, [pc, #156]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017bd2:	f007 fd15 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017bd6:	4a27      	ldr	r2, [pc, #156]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017bd8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017bda:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017bde:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017be0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017be4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017be8:	3901      	subs	r1, #1
34017bea:	4303      	orrs	r3, r0
34017bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017bf0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017bf4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017bf8:	f7fe baf3 	b.w	340161e2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34017bfc:	4a23      	ldr	r2, [pc, #140]	@ (34017c8c <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34017bfe:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017c00:	bf02      	ittt	eq
34017c02:	2240      	moveq	r2, #64	@ 0x40
34017c04:	4b1b      	ldreq	r3, [pc, #108]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017c06:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017c0a:	f7fe baec 	b.w	340161e6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34017c0e:	4a20      	ldr	r2, [pc, #128]	@ (34017c90 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34017c10:	4293      	cmp	r3, r2
34017c12:	d124      	bne.n	34017c5e <HAL_RCCEx_PeriphCLKConfig+0x245e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017c14:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017c16:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017c1a:	d004      	beq.n	34017c26 <HAL_RCCEx_PeriphCLKConfig+0x2426>
34017c1c:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34017c20:	4813      	ldr	r0, [pc, #76]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017c22:	f007 fced 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017c26:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017c28:	3b01      	subs	r3, #1
34017c2a:	2bff      	cmp	r3, #255	@ 0xff
34017c2c:	d904      	bls.n	34017c38 <HAL_RCCEx_PeriphCLKConfig+0x2438>
34017c2e:	f240 317d 	movw	r1, #893	@ 0x37d
34017c32:	480f      	ldr	r0, [pc, #60]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017c34:	f007 fce4 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017c38:	4a0e      	ldr	r2, [pc, #56]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017c3a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017c3c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017c40:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017c42:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017c46:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017c4a:	3901      	subs	r1, #1
34017c4c:	4303      	orrs	r3, r0
34017c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017c52:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017c56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017c5a:	f7fe bb06 	b.w	3401626a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34017c5e:	4a0d      	ldr	r2, [pc, #52]	@ (34017c94 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
34017c60:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017c62:	bf02      	ittt	eq
34017c64:	2240      	moveq	r2, #64	@ 0x40
34017c66:	4b03      	ldreq	r3, [pc, #12]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017c68:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017c6c:	f7fe baff 	b.w	3401626e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
34017c70:	3402f73a 	.word	0x3402f73a
34017c74:	56028000 	.word	0x56028000
34017c78:	0303001c 	.word	0x0303001c
34017c7c:	0301001c 	.word	0x0301001c
34017c80:	0303041c 	.word	0x0303041c
34017c84:	0301041c 	.word	0x0301041c
34017c88:	0703000c 	.word	0x0703000c
34017c8c:	0701000c 	.word	0x0701000c
34017c90:	0703040c 	.word	0x0703040c
34017c94:	0701040c 	.word	0x0701040c
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34017c98:	4ab1      	ldr	r2, [pc, #708]	@ (34017f60 <HAL_RCCEx_PeriphCLKConfig+0x2760>)
34017c9a:	4293      	cmp	r3, r2
34017c9c:	d124      	bne.n	34017ce8 <HAL_RCCEx_PeriphCLKConfig+0x24e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017c9e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017ca0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017ca4:	d004      	beq.n	34017cb0 <HAL_RCCEx_PeriphCLKConfig+0x24b0>
34017ca6:	f240 31a9 	movw	r1, #937	@ 0x3a9
34017caa:	48ae      	ldr	r0, [pc, #696]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017cac:	f007 fca8 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017cb0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017cb2:	3b01      	subs	r3, #1
34017cb4:	2bff      	cmp	r3, #255	@ 0xff
34017cb6:	d904      	bls.n	34017cc2 <HAL_RCCEx_PeriphCLKConfig+0x24c2>
34017cb8:	f240 31aa 	movw	r1, #938	@ 0x3aa
34017cbc:	48a9      	ldr	r0, [pc, #676]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017cbe:	f007 fc9f 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017cc2:	4aa9      	ldr	r2, [pc, #676]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017cc4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017cc6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017cca:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017ccc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017cd0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017cd4:	3901      	subs	r1, #1
34017cd6:	4303      	orrs	r3, r0
34017cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017cdc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017ce0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017ce4:	f7fe bb05 	b.w	340162f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34017ce8:	4aa0      	ldr	r2, [pc, #640]	@ (34017f6c <HAL_RCCEx_PeriphCLKConfig+0x276c>)
34017cea:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017cec:	bf02      	ittt	eq
34017cee:	2240      	moveq	r2, #64	@ 0x40
34017cf0:	4b9d      	ldreq	r3, [pc, #628]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017cf2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017cf6:	f7fe bafe 	b.w	340162f6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34017cfa:	4a9d      	ldr	r2, [pc, #628]	@ (34017f70 <HAL_RCCEx_PeriphCLKConfig+0x2770>)
34017cfc:	4293      	cmp	r3, r2
34017cfe:	d124      	bne.n	34017d4a <HAL_RCCEx_PeriphCLKConfig+0x254a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017d00:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017d02:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017d06:	d004      	beq.n	34017d12 <HAL_RCCEx_PeriphCLKConfig+0x2512>
34017d08:	f240 31d6 	movw	r1, #982	@ 0x3d6
34017d0c:	4895      	ldr	r0, [pc, #596]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017d0e:	f007 fc77 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017d12:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017d14:	3b01      	subs	r3, #1
34017d16:	2bff      	cmp	r3, #255	@ 0xff
34017d18:	d904      	bls.n	34017d24 <HAL_RCCEx_PeriphCLKConfig+0x2524>
34017d1a:	f240 31d7 	movw	r1, #983	@ 0x3d7
34017d1e:	4891      	ldr	r0, [pc, #580]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017d20:	f007 fc6e 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017d24:	4a90      	ldr	r2, [pc, #576]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017d26:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017d28:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017d2c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017d2e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017d32:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017d36:	3901      	subs	r1, #1
34017d38:	4303      	orrs	r3, r0
34017d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017d3e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017d42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017d46:	f7fe bb2c 	b.w	340163a2 <HAL_RCCEx_PeriphCLKConfig+0xba2>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34017d4a:	4a8a      	ldr	r2, [pc, #552]	@ (34017f74 <HAL_RCCEx_PeriphCLKConfig+0x2774>)
34017d4c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017d4e:	bf02      	ittt	eq
34017d50:	2240      	moveq	r2, #64	@ 0x40
34017d52:	4b85      	ldreq	r3, [pc, #532]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017d54:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017d58:	f7fe bb25 	b.w	340163a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34017d5c:	4a86      	ldr	r2, [pc, #536]	@ (34017f78 <HAL_RCCEx_PeriphCLKConfig+0x2778>)
34017d5e:	4293      	cmp	r3, r2
34017d60:	d124      	bne.n	34017dac <HAL_RCCEx_PeriphCLKConfig+0x25ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017d62:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017d64:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017d68:	d004      	beq.n	34017d74 <HAL_RCCEx_PeriphCLKConfig+0x2574>
34017d6a:	f240 4103 	movw	r1, #1027	@ 0x403
34017d6e:	487d      	ldr	r0, [pc, #500]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017d70:	f007 fc46 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017d74:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017d76:	3b01      	subs	r3, #1
34017d78:	2bff      	cmp	r3, #255	@ 0xff
34017d7a:	d904      	bls.n	34017d86 <HAL_RCCEx_PeriphCLKConfig+0x2586>
34017d7c:	f240 4104 	movw	r1, #1028	@ 0x404
34017d80:	4878      	ldr	r0, [pc, #480]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017d82:	f007 fc3d 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017d86:	4a78      	ldr	r2, [pc, #480]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017d88:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017d8a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017d8e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017d90:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017d94:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017d98:	3901      	subs	r1, #1
34017d9a:	4303      	orrs	r3, r0
34017d9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017da0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017da4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017da8:	f7fe bb3f 	b.w	3401642a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34017dac:	4a73      	ldr	r2, [pc, #460]	@ (34017f7c <HAL_RCCEx_PeriphCLKConfig+0x277c>)
34017dae:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017db0:	bf02      	ittt	eq
34017db2:	2240      	moveq	r2, #64	@ 0x40
34017db4:	4b6c      	ldreq	r3, [pc, #432]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017db6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017dba:	f7fe bb38 	b.w	3401642e <HAL_RCCEx_PeriphCLKConfig+0xc2e>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34017dbe:	4a70      	ldr	r2, [pc, #448]	@ (34017f80 <HAL_RCCEx_PeriphCLKConfig+0x2780>)
34017dc0:	4293      	cmp	r3, r2
34017dc2:	d124      	bne.n	34017e0e <HAL_RCCEx_PeriphCLKConfig+0x260e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017dc4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017dc6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017dca:	d004      	beq.n	34017dd6 <HAL_RCCEx_PeriphCLKConfig+0x25d6>
34017dcc:	f44f 6186 	mov.w	r1, #1072	@ 0x430
34017dd0:	4864      	ldr	r0, [pc, #400]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017dd2:	f007 fc15 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017dd6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017dd8:	3b01      	subs	r3, #1
34017dda:	2bff      	cmp	r3, #255	@ 0xff
34017ddc:	d904      	bls.n	34017de8 <HAL_RCCEx_PeriphCLKConfig+0x25e8>
34017dde:	f240 4131 	movw	r1, #1073	@ 0x431
34017de2:	4860      	ldr	r0, [pc, #384]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017de4:	f007 fc0c 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017de8:	4a5f      	ldr	r2, [pc, #380]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017dea:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017dec:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017df0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017df2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017df6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017dfa:	3901      	subs	r1, #1
34017dfc:	4303      	orrs	r3, r0
34017dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017e02:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017e06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017e0a:	f7fe bb52 	b.w	340164b2 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34017e0e:	4a5d      	ldr	r2, [pc, #372]	@ (34017f84 <HAL_RCCEx_PeriphCLKConfig+0x2784>)
34017e10:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017e12:	bf02      	ittt	eq
34017e14:	2240      	moveq	r2, #64	@ 0x40
34017e16:	4b54      	ldreq	r3, [pc, #336]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017e18:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017e1c:	f7fe bb4b 	b.w	340164b6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34017e20:	4a59      	ldr	r2, [pc, #356]	@ (34017f88 <HAL_RCCEx_PeriphCLKConfig+0x2788>)
34017e22:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017e24:	bf02      	ittt	eq
34017e26:	2240      	moveq	r2, #64	@ 0x40
34017e28:	4b4f      	ldreq	r3, [pc, #316]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017e2a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017e2e:	f7fe bb86 	b.w	3401653e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34017e32:	4a56      	ldr	r2, [pc, #344]	@ (34017f8c <HAL_RCCEx_PeriphCLKConfig+0x278c>)
34017e34:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017e36:	bf02      	ittt	eq
34017e38:	2240      	moveq	r2, #64	@ 0x40
34017e3a:	4b4b      	ldreq	r3, [pc, #300]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017e3c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017e40:	f7fe bbc1 	b.w	340165c6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34017e44:	4a52      	ldr	r2, [pc, #328]	@ (34017f90 <HAL_RCCEx_PeriphCLKConfig+0x2790>)
34017e46:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017e48:	bf02      	ittt	eq
34017e4a:	2240      	moveq	r2, #64	@ 0x40
34017e4c:	4b46      	ldreq	r3, [pc, #280]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017e4e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017e52:	f7fe bc17 	b.w	34016684 <HAL_RCCEx_PeriphCLKConfig+0xe84>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34017e56:	4a4f      	ldr	r2, [pc, #316]	@ (34017f94 <HAL_RCCEx_PeriphCLKConfig+0x2794>)
34017e58:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017e5a:	bf02      	ittt	eq
34017e5c:	2240      	moveq	r2, #64	@ 0x40
34017e5e:	4b42      	ldreq	r3, [pc, #264]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017e60:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017e64:	f7fe bc52 	b.w	3401670c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34017e68:	4a4b      	ldr	r2, [pc, #300]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x2798>)
34017e6a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017e6c:	bf02      	ittt	eq
34017e6e:	2240      	moveq	r2, #64	@ 0x40
34017e70:	4b3d      	ldreq	r3, [pc, #244]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017e72:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017e76:	f7fe bc8d 	b.w	34016794 <HAL_RCCEx_PeriphCLKConfig+0xf94>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34017e7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34017e7e:	d124      	bne.n	34017eca <HAL_RCCEx_PeriphCLKConfig+0x26ca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34017e80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34017e82:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017e86:	d004      	beq.n	34017e92 <HAL_RCCEx_PeriphCLKConfig+0x2692>
34017e88:	f240 41fd 	movw	r1, #1277	@ 0x4fd
34017e8c:	4835      	ldr	r0, [pc, #212]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017e8e:	f007 fbb7 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34017e92:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34017e94:	3b01      	subs	r3, #1
34017e96:	2bff      	cmp	r3, #255	@ 0xff
34017e98:	d904      	bls.n	34017ea4 <HAL_RCCEx_PeriphCLKConfig+0x26a4>
34017e9a:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34017e9e:	4831      	ldr	r0, [pc, #196]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017ea0:	f007 fbae 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34017ea4:	4a30      	ldr	r2, [pc, #192]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017ea6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34017ea8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34017eac:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34017eae:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017eb2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017eb6:	3901      	subs	r1, #1
34017eb8:	4303      	orrs	r3, r0
34017eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017ebe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34017ec6:	f7fe bca7 	b.w	34016818 <HAL_RCCEx_PeriphCLKConfig+0x1018>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34017eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017ece:	bf02      	ittt	eq
34017ed0:	2240      	moveq	r2, #64	@ 0x40
34017ed2:	4b25      	ldreq	r3, [pc, #148]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017ed4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017ed8:	f7fe bca0 	b.w	3401681c <HAL_RCCEx_PeriphCLKConfig+0x101c>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34017edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017ee0:	bf02      	ittt	eq
34017ee2:	2240      	moveq	r2, #64	@ 0x40
34017ee4:	4b20      	ldreq	r3, [pc, #128]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017ee6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017eea:	f7fe bcdd 	b.w	340168a8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34017eee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34017ef2:	d123      	bne.n	34017f3c <HAL_RCCEx_PeriphCLKConfig+0x273c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017ef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017ef6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017efa:	d004      	beq.n	34017f06 <HAL_RCCEx_PeriphCLKConfig+0x2706>
34017efc:	f240 514a 	movw	r1, #1354	@ 0x54a
34017f00:	4818      	ldr	r0, [pc, #96]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017f02:	f007 fb7d 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017f06:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017f08:	3b01      	subs	r3, #1
34017f0a:	2bff      	cmp	r3, #255	@ 0xff
34017f0c:	d904      	bls.n	34017f18 <HAL_RCCEx_PeriphCLKConfig+0x2718>
34017f0e:	f240 514b 	movw	r1, #1355	@ 0x54b
34017f12:	4814      	ldr	r0, [pc, #80]	@ (34017f64 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017f14:	f007 fb74 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017f18:	4a13      	ldr	r2, [pc, #76]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017f1a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017f1c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017f20:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017f22:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017f26:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017f2a:	3901      	subs	r1, #1
34017f2c:	4303      	orrs	r3, r0
34017f2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017f36:	2380      	movs	r3, #128	@ 0x80
34017f38:	f7fe bcf8 	b.w	3401692c <HAL_RCCEx_PeriphCLKConfig+0x112c>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34017f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017f40:	bf02      	ittt	eq
34017f42:	2240      	moveq	r2, #64	@ 0x40
34017f44:	4b08      	ldreq	r3, [pc, #32]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017f46:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017f4a:	f7fe bcf1 	b.w	34016930 <HAL_RCCEx_PeriphCLKConfig+0x1130>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34017f4e:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017f50:	bf02      	ittt	eq
34017f52:	2240      	moveq	r2, #64	@ 0x40
34017f54:	4b04      	ldreq	r3, [pc, #16]	@ (34017f68 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017f56:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017f5a:	f7fe bd3b 	b.w	340169d4 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
34017f5e:	bf00      	nop
34017f60:	0703080c 	.word	0x0703080c
34017f64:	3402f73a 	.word	0x3402f73a
34017f68:	56028000 	.word	0x56028000
34017f6c:	0701080c 	.word	0x0701080c
34017f70:	07030c0c 	.word	0x07030c0c
34017f74:	07010c0c 	.word	0x07010c0c
34017f78:	0703100c 	.word	0x0703100c
34017f7c:	0701100c 	.word	0x0701100c
34017f80:	0703140c 	.word	0x0703140c
34017f84:	0701140c 	.word	0x0701140c
34017f88:	0701082c 	.word	0x0701082c
34017f8c:	07010c2c 	.word	0x07010c2c
34017f90:	0701102c 	.word	0x0701102c
34017f94:	0701142c 	.word	0x0701142c
34017f98:	0701182c 	.word	0x0701182c
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34017f9c:	4aa8      	ldr	r2, [pc, #672]	@ (34018240 <HAL_RCCEx_PeriphCLKConfig+0x2a40>)
34017f9e:	4293      	cmp	r3, r2
34017fa0:	d123      	bne.n	34017fea <HAL_RCCEx_PeriphCLKConfig+0x27ea>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017fa2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017fa4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017fa8:	d004      	beq.n	34017fb4 <HAL_RCCEx_PeriphCLKConfig+0x27b4>
34017faa:	f240 5197 	movw	r1, #1431	@ 0x597
34017fae:	48a5      	ldr	r0, [pc, #660]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017fb0:	f007 fb26 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017fb4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017fb6:	3b01      	subs	r3, #1
34017fb8:	2bff      	cmp	r3, #255	@ 0xff
34017fba:	d904      	bls.n	34017fc6 <HAL_RCCEx_PeriphCLKConfig+0x27c6>
34017fbc:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
34017fc0:	48a0      	ldr	r0, [pc, #640]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017fc2:	f007 fb1d 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017fc6:	4aa0      	ldr	r2, [pc, #640]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017fc8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017fca:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017fce:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017fd0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017fd4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017fd8:	3901      	subs	r1, #1
34017fda:	4303      	orrs	r3, r0
34017fdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017fe4:	2380      	movs	r3, #128	@ 0x80
34017fe6:	f7fe bd3a 	b.w	34016a5e <HAL_RCCEx_PeriphCLKConfig+0x125e>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34017fea:	4a98      	ldr	r2, [pc, #608]	@ (3401824c <HAL_RCCEx_PeriphCLKConfig+0x2a4c>)
34017fec:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017fee:	bf02      	ittt	eq
34017ff0:	2240      	moveq	r2, #64	@ 0x40
34017ff2:	4b95      	ldreq	r3, [pc, #596]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017ff4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017ff8:	f7fe bd33 	b.w	34016a62 <HAL_RCCEx_PeriphCLKConfig+0x1262>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34017ffc:	4a94      	ldr	r2, [pc, #592]	@ (34018250 <HAL_RCCEx_PeriphCLKConfig+0x2a50>)
34017ffe:	4293      	cmp	r3, r2
34018000:	d123      	bne.n	3401804a <HAL_RCCEx_PeriphCLKConfig+0x284a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34018002:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34018004:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018008:	d004      	beq.n	34018014 <HAL_RCCEx_PeriphCLKConfig+0x2814>
3401800a:	f240 51c4 	movw	r1, #1476	@ 0x5c4
3401800e:	488d      	ldr	r0, [pc, #564]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018010:	f007 faf6 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34018014:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34018016:	3b01      	subs	r3, #1
34018018:	2bff      	cmp	r3, #255	@ 0xff
3401801a:	d904      	bls.n	34018026 <HAL_RCCEx_PeriphCLKConfig+0x2826>
3401801c:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34018020:	4888      	ldr	r0, [pc, #544]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018022:	f007 faed 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34018026:	4a88      	ldr	r2, [pc, #544]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018028:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3401802a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3401802e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34018030:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018034:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018038:	3901      	subs	r1, #1
3401803a:	4303      	orrs	r3, r0
3401803c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34018044:	2380      	movs	r3, #128	@ 0x80
34018046:	f7fe bd4b 	b.w	34016ae0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3401804a:	4a82      	ldr	r2, [pc, #520]	@ (34018254 <HAL_RCCEx_PeriphCLKConfig+0x2a54>)
3401804c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401804e:	bf02      	ittt	eq
34018050:	2240      	moveq	r2, #64	@ 0x40
34018052:	4b7d      	ldreq	r3, [pc, #500]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018054:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018058:	f7fe bd44 	b.w	34016ae4 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
3401805c:	2b03      	cmp	r3, #3
3401805e:	d123      	bne.n	340180a8 <HAL_RCCEx_PeriphCLKConfig+0x28a8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34018060:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34018062:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018066:	d004      	beq.n	34018072 <HAL_RCCEx_PeriphCLKConfig+0x2872>
34018068:	f240 51f1 	movw	r1, #1521	@ 0x5f1
3401806c:	4875      	ldr	r0, [pc, #468]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3401806e:	f007 fac7 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34018072:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34018074:	3b01      	subs	r3, #1
34018076:	2bff      	cmp	r3, #255	@ 0xff
34018078:	d904      	bls.n	34018084 <HAL_RCCEx_PeriphCLKConfig+0x2884>
3401807a:	f240 51f2 	movw	r1, #1522	@ 0x5f2
3401807e:	4871      	ldr	r0, [pc, #452]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018080:	f007 fabe 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34018084:	4a70      	ldr	r2, [pc, #448]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018086:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34018088:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3401808c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3401808e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018092:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018096:	3901      	subs	r1, #1
34018098:	4303      	orrs	r3, r0
3401809a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401809e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340180a2:	2380      	movs	r3, #128	@ 0x80
340180a4:	f7fe bd55 	b.w	34016b52 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
340180a8:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340180aa:	bf02      	ittt	eq
340180ac:	2240      	moveq	r2, #64	@ 0x40
340180ae:	4b66      	ldreq	r3, [pc, #408]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340180b0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340180b4:	f7fe bd4f 	b.w	34016b56 <HAL_RCCEx_PeriphCLKConfig+0x1356>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
340180b8:	4a67      	ldr	r2, [pc, #412]	@ (34018258 <HAL_RCCEx_PeriphCLKConfig+0x2a58>)
340180ba:	4293      	cmp	r3, r2
340180bc:	d124      	bne.n	34018108 <HAL_RCCEx_PeriphCLKConfig+0x2908>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340180be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340180c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340180c4:	d004      	beq.n	340180d0 <HAL_RCCEx_PeriphCLKConfig+0x28d0>
340180c6:	f240 611e 	movw	r1, #1566	@ 0x61e
340180ca:	485e      	ldr	r0, [pc, #376]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340180cc:	f007 fa98 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340180d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340180d2:	3b01      	subs	r3, #1
340180d4:	2bff      	cmp	r3, #255	@ 0xff
340180d6:	d904      	bls.n	340180e2 <HAL_RCCEx_PeriphCLKConfig+0x28e2>
340180d8:	f240 611f 	movw	r1, #1567	@ 0x61f
340180dc:	4859      	ldr	r0, [pc, #356]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340180de:	f007 fa8f 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340180e2:	4a59      	ldr	r2, [pc, #356]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340180e4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340180e6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340180ea:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340180ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340180f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340180f4:	3901      	subs	r1, #1
340180f6:	4303      	orrs	r3, r0
340180f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340180fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34018100:	f44f 7380 	mov.w	r3, #256	@ 0x100
34018104:	f7fe bd72 	b.w	34016bec <HAL_RCCEx_PeriphCLKConfig+0x13ec>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34018108:	4a54      	ldr	r2, [pc, #336]	@ (3401825c <HAL_RCCEx_PeriphCLKConfig+0x2a5c>)
3401810a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401810c:	bf02      	ittt	eq
3401810e:	2240      	moveq	r2, #64	@ 0x40
34018110:	4b4d      	ldreq	r3, [pc, #308]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018112:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018116:	f7fe bd6b 	b.w	34016bf0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
3401811a:	4a51      	ldr	r2, [pc, #324]	@ (34018260 <HAL_RCCEx_PeriphCLKConfig+0x2a60>)
3401811c:	4293      	cmp	r3, r2
3401811e:	d124      	bne.n	3401816a <HAL_RCCEx_PeriphCLKConfig+0x296a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34018120:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34018122:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018126:	d004      	beq.n	34018132 <HAL_RCCEx_PeriphCLKConfig+0x2932>
34018128:	f240 614b 	movw	r1, #1611	@ 0x64b
3401812c:	4845      	ldr	r0, [pc, #276]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3401812e:	f007 fa67 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34018132:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34018134:	3b01      	subs	r3, #1
34018136:	2bff      	cmp	r3, #255	@ 0xff
34018138:	d904      	bls.n	34018144 <HAL_RCCEx_PeriphCLKConfig+0x2944>
3401813a:	f240 614c 	movw	r1, #1612	@ 0x64c
3401813e:	4841      	ldr	r0, [pc, #260]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018140:	f007 fa5e 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34018144:	4a40      	ldr	r2, [pc, #256]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018146:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34018148:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3401814c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3401814e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018152:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018156:	3901      	subs	r1, #1
34018158:	4303      	orrs	r3, r0
3401815a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401815e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34018162:	f44f 7380 	mov.w	r3, #256	@ 0x100
34018166:	f7fe bd88 	b.w	34016c7a <HAL_RCCEx_PeriphCLKConfig+0x147a>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3401816a:	4a3e      	ldr	r2, [pc, #248]	@ (34018264 <HAL_RCCEx_PeriphCLKConfig+0x2a64>)
3401816c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401816e:	bf02      	ittt	eq
34018170:	2240      	moveq	r2, #64	@ 0x40
34018172:	4b35      	ldreq	r3, [pc, #212]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018174:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018178:	f7fe bd81 	b.w	34016c7e <HAL_RCCEx_PeriphCLKConfig+0x147e>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
3401817c:	4a3a      	ldr	r2, [pc, #232]	@ (34018268 <HAL_RCCEx_PeriphCLKConfig+0x2a68>)
3401817e:	4293      	cmp	r3, r2
34018180:	d124      	bne.n	340181cc <HAL_RCCEx_PeriphCLKConfig+0x29cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34018182:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34018184:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018188:	d004      	beq.n	34018194 <HAL_RCCEx_PeriphCLKConfig+0x2994>
3401818a:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
3401818e:	482d      	ldr	r0, [pc, #180]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018190:	f007 fa36 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34018194:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34018196:	3b01      	subs	r3, #1
34018198:	2bff      	cmp	r3, #255	@ 0xff
3401819a:	d904      	bls.n	340181a6 <HAL_RCCEx_PeriphCLKConfig+0x29a6>
3401819c:	f240 6179 	movw	r1, #1657	@ 0x679
340181a0:	4828      	ldr	r0, [pc, #160]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340181a2:	f007 fa2d 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340181a6:	4a28      	ldr	r2, [pc, #160]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340181a8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340181aa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340181ae:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340181b0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340181b4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340181b8:	3901      	subs	r1, #1
340181ba:	4303      	orrs	r3, r0
340181bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340181c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340181c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
340181c8:	f7fe bdb8 	b.w	34016d3c <HAL_RCCEx_PeriphCLKConfig+0x153c>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
340181cc:	4a27      	ldr	r2, [pc, #156]	@ (3401826c <HAL_RCCEx_PeriphCLKConfig+0x2a6c>)
340181ce:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340181d0:	bf02      	ittt	eq
340181d2:	2240      	moveq	r2, #64	@ 0x40
340181d4:	4b1c      	ldreq	r3, [pc, #112]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340181d6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340181da:	f7fe bdb1 	b.w	34016d40 <HAL_RCCEx_PeriphCLKConfig+0x1540>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
340181de:	4a24      	ldr	r2, [pc, #144]	@ (34018270 <HAL_RCCEx_PeriphCLKConfig+0x2a70>)
340181e0:	4293      	cmp	r3, r2
340181e2:	d124      	bne.n	3401822e <HAL_RCCEx_PeriphCLKConfig+0x2a2e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340181e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340181e6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340181ea:	d004      	beq.n	340181f6 <HAL_RCCEx_PeriphCLKConfig+0x29f6>
340181ec:	f240 61a5 	movw	r1, #1701	@ 0x6a5
340181f0:	4814      	ldr	r0, [pc, #80]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340181f2:	f007 fa05 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340181f6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340181f8:	3b01      	subs	r3, #1
340181fa:	2bff      	cmp	r3, #255	@ 0xff
340181fc:	d904      	bls.n	34018208 <HAL_RCCEx_PeriphCLKConfig+0x2a08>
340181fe:	f240 61a6 	movw	r1, #1702	@ 0x6a6
34018202:	4810      	ldr	r0, [pc, #64]	@ (34018244 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018204:	f007 f9fc 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34018208:	4a0f      	ldr	r2, [pc, #60]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
3401820a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401820c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34018210:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018212:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018216:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401821a:	3901      	subs	r1, #1
3401821c:	4303      	orrs	r3, r0
3401821e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018222:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401822a:	f7fe bdcf 	b.w	34016dcc <HAL_RCCEx_PeriphCLKConfig+0x15cc>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
3401822e:	4a11      	ldr	r2, [pc, #68]	@ (34018274 <HAL_RCCEx_PeriphCLKConfig+0x2a74>)
34018230:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018232:	bf02      	ittt	eq
34018234:	2240      	moveq	r2, #64	@ 0x40
34018236:	4b04      	ldreq	r3, [pc, #16]	@ (34018248 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018238:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401823c:	f7fe bdc8 	b.w	34016dd0 <HAL_RCCEx_PeriphCLKConfig+0x15d0>
34018240:	07031418 	.word	0x07031418
34018244:	3402f73a 	.word	0x3402f73a
34018248:	56028000 	.word	0x56028000
3401824c:	07011418 	.word	0x07011418
34018250:	07031818 	.word	0x07031818
34018254:	07011818 	.word	0x07011818
34018258:	07030420 	.word	0x07030420
3401825c:	07010420 	.word	0x07010420
34018260:	07030820 	.word	0x07030820
34018264:	07010820 	.word	0x07010820
34018268:	07030c20 	.word	0x07030c20
3401826c:	07010c20 	.word	0x07010c20
34018270:	07031020 	.word	0x07031020
34018274:	07011020 	.word	0x07011020
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34018278:	4aab      	ldr	r2, [pc, #684]	@ (34018528 <HAL_RCCEx_PeriphCLKConfig+0x2d28>)
3401827a:	4293      	cmp	r3, r2
3401827c:	d124      	bne.n	340182c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3401827e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018280:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018284:	d004      	beq.n	34018290 <HAL_RCCEx_PeriphCLKConfig+0x2a90>
34018286:	f240 61d2 	movw	r1, #1746	@ 0x6d2
3401828a:	48a8      	ldr	r0, [pc, #672]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3401828c:	f007 f9b8 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018290:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018292:	3b01      	subs	r3, #1
34018294:	2bff      	cmp	r3, #255	@ 0xff
34018296:	d904      	bls.n	340182a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa2>
34018298:	f240 61d3 	movw	r1, #1747	@ 0x6d3
3401829c:	48a3      	ldr	r0, [pc, #652]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3401829e:	f007 f9af 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340182a2:	4aa3      	ldr	r2, [pc, #652]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340182a4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340182a6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340182aa:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340182ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340182b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340182b4:	3901      	subs	r1, #1
340182b6:	4303      	orrs	r3, r0
340182b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340182bc:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340182c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340182c4:	f7fe bdca 	b.w	34016e5c <HAL_RCCEx_PeriphCLKConfig+0x165c>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
340182c8:	4a9a      	ldr	r2, [pc, #616]	@ (34018534 <HAL_RCCEx_PeriphCLKConfig+0x2d34>)
340182ca:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340182cc:	bf02      	ittt	eq
340182ce:	2240      	moveq	r2, #64	@ 0x40
340182d0:	4b97      	ldreq	r3, [pc, #604]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340182d2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340182d6:	f7fe bdc3 	b.w	34016e60 <HAL_RCCEx_PeriphCLKConfig+0x1660>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
340182da:	4a97      	ldr	r2, [pc, #604]	@ (34018538 <HAL_RCCEx_PeriphCLKConfig+0x2d38>)
340182dc:	4293      	cmp	r3, r2
340182de:	d124      	bne.n	3401832a <HAL_RCCEx_PeriphCLKConfig+0x2b2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340182e0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340182e2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340182e6:	d004      	beq.n	340182f2 <HAL_RCCEx_PeriphCLKConfig+0x2af2>
340182e8:	f240 61ff 	movw	r1, #1791	@ 0x6ff
340182ec:	488f      	ldr	r0, [pc, #572]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340182ee:	f007 f987 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340182f2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340182f4:	3b01      	subs	r3, #1
340182f6:	2bff      	cmp	r3, #255	@ 0xff
340182f8:	d904      	bls.n	34018304 <HAL_RCCEx_PeriphCLKConfig+0x2b04>
340182fa:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
340182fe:	488b      	ldr	r0, [pc, #556]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018300:	f007 f97e 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34018304:	4a8a      	ldr	r2, [pc, #552]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34018306:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34018308:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3401830c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3401830e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018312:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018316:	3901      	subs	r1, #1
34018318:	4303      	orrs	r3, r0
3401831a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401831e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34018322:	f44f 7380 	mov.w	r3, #256	@ 0x100
34018326:	f7fe bde0 	b.w	34016eea <HAL_RCCEx_PeriphCLKConfig+0x16ea>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
3401832a:	4a84      	ldr	r2, [pc, #528]	@ (3401853c <HAL_RCCEx_PeriphCLKConfig+0x2d3c>)
3401832c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401832e:	bf02      	ittt	eq
34018330:	2240      	moveq	r2, #64	@ 0x40
34018332:	4b7f      	ldreq	r3, [pc, #508]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34018334:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018338:	f7fe bdd9 	b.w	34016eee <HAL_RCCEx_PeriphCLKConfig+0x16ee>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
3401833c:	4a80      	ldr	r2, [pc, #512]	@ (34018540 <HAL_RCCEx_PeriphCLKConfig+0x2d40>)
3401833e:	4293      	cmp	r3, r2
34018340:	d124      	bne.n	3401838c <HAL_RCCEx_PeriphCLKConfig+0x2b8c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34018342:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018344:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018348:	d004      	beq.n	34018354 <HAL_RCCEx_PeriphCLKConfig+0x2b54>
3401834a:	f240 712c 	movw	r1, #1836	@ 0x72c
3401834e:	4877      	ldr	r0, [pc, #476]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018350:	f007 f956 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018354:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018356:	3b01      	subs	r3, #1
34018358:	2bff      	cmp	r3, #255	@ 0xff
3401835a:	d904      	bls.n	34018366 <HAL_RCCEx_PeriphCLKConfig+0x2b66>
3401835c:	f240 712d 	movw	r1, #1837	@ 0x72d
34018360:	4872      	ldr	r0, [pc, #456]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018362:	f007 f94d 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34018366:	4a72      	ldr	r2, [pc, #456]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34018368:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401836a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401836e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018370:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018374:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018378:	3901      	subs	r1, #1
3401837a:	4303      	orrs	r3, r0
3401837c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018380:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018384:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018388:	f7fe bdf7 	b.w	34016f7a <HAL_RCCEx_PeriphCLKConfig+0x177a>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
3401838c:	4a6d      	ldr	r2, [pc, #436]	@ (34018544 <HAL_RCCEx_PeriphCLKConfig+0x2d44>)
3401838e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018390:	bf02      	ittt	eq
34018392:	2240      	moveq	r2, #64	@ 0x40
34018394:	4b66      	ldreq	r3, [pc, #408]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34018396:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401839a:	f7fe bdf0 	b.w	34016f7e <HAL_RCCEx_PeriphCLKConfig+0x177e>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
3401839e:	4a6a      	ldr	r2, [pc, #424]	@ (34018548 <HAL_RCCEx_PeriphCLKConfig+0x2d48>)
340183a0:	4293      	cmp	r3, r2
340183a2:	d124      	bne.n	340183ee <HAL_RCCEx_PeriphCLKConfig+0x2bee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340183a4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340183a6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340183aa:	d004      	beq.n	340183b6 <HAL_RCCEx_PeriphCLKConfig+0x2bb6>
340183ac:	f240 7159 	movw	r1, #1881	@ 0x759
340183b0:	485e      	ldr	r0, [pc, #376]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340183b2:	f007 f925 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340183b6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340183b8:	3b01      	subs	r3, #1
340183ba:	2bff      	cmp	r3, #255	@ 0xff
340183bc:	d904      	bls.n	340183c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc8>
340183be:	f240 715a 	movw	r1, #1882	@ 0x75a
340183c2:	485a      	ldr	r0, [pc, #360]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340183c4:	f007 f91c 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340183c8:	4a59      	ldr	r2, [pc, #356]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340183ca:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340183cc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340183d0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340183d2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340183d6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340183da:	3901      	subs	r1, #1
340183dc:	4303      	orrs	r3, r0
340183de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340183e2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340183e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340183ea:	f7fe be27 	b.w	3401703c <HAL_RCCEx_PeriphCLKConfig+0x183c>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
340183ee:	4a57      	ldr	r2, [pc, #348]	@ (3401854c <HAL_RCCEx_PeriphCLKConfig+0x2d4c>)
340183f0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340183f2:	bf02      	ittt	eq
340183f4:	2240      	moveq	r2, #64	@ 0x40
340183f6:	4b4e      	ldreq	r3, [pc, #312]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340183f8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340183fc:	f7fe be20 	b.w	34017040 <HAL_RCCEx_PeriphCLKConfig+0x1840>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34018400:	4a53      	ldr	r2, [pc, #332]	@ (34018550 <HAL_RCCEx_PeriphCLKConfig+0x2d50>)
34018402:	4293      	cmp	r3, r2
34018404:	d124      	bne.n	34018450 <HAL_RCCEx_PeriphCLKConfig+0x2c50>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34018406:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018408:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401840c:	d004      	beq.n	34018418 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
3401840e:	f240 7186 	movw	r1, #1926	@ 0x786
34018412:	4846      	ldr	r0, [pc, #280]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018414:	f007 f8f4 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018418:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3401841a:	3b01      	subs	r3, #1
3401841c:	2bff      	cmp	r3, #255	@ 0xff
3401841e:	d904      	bls.n	3401842a <HAL_RCCEx_PeriphCLKConfig+0x2c2a>
34018420:	f240 7187 	movw	r1, #1927	@ 0x787
34018424:	4841      	ldr	r0, [pc, #260]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018426:	f007 f8eb 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401842a:	4a41      	ldr	r2, [pc, #260]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401842c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401842e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34018432:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018434:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018438:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401843c:	3901      	subs	r1, #1
3401843e:	4303      	orrs	r3, r0
34018440:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018444:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401844c:	f7fe be3e 	b.w	340170cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34018450:	4a40      	ldr	r2, [pc, #256]	@ (34018554 <HAL_RCCEx_PeriphCLKConfig+0x2d54>)
34018452:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018454:	bf02      	ittt	eq
34018456:	2240      	moveq	r2, #64	@ 0x40
34018458:	4b35      	ldreq	r3, [pc, #212]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401845a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401845e:	f7fe be37 	b.w	340170d0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34018462:	4a3d      	ldr	r2, [pc, #244]	@ (34018558 <HAL_RCCEx_PeriphCLKConfig+0x2d58>)
34018464:	4293      	cmp	r3, r2
34018466:	d124      	bne.n	340184b2 <HAL_RCCEx_PeriphCLKConfig+0x2cb2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34018468:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3401846a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401846e:	d004      	beq.n	3401847a <HAL_RCCEx_PeriphCLKConfig+0x2c7a>
34018470:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34018474:	482d      	ldr	r0, [pc, #180]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018476:	f007 f8c3 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401847a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3401847c:	3b01      	subs	r3, #1
3401847e:	2bff      	cmp	r3, #255	@ 0xff
34018480:	d904      	bls.n	3401848c <HAL_RCCEx_PeriphCLKConfig+0x2c8c>
34018482:	f240 71b4 	movw	r1, #1972	@ 0x7b4
34018486:	4829      	ldr	r0, [pc, #164]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018488:	f007 f8ba 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401848c:	4a28      	ldr	r2, [pc, #160]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401848e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34018490:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34018494:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018496:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401849a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401849e:	3901      	subs	r1, #1
340184a0:	4303      	orrs	r3, r0
340184a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340184a6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340184aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340184ae:	f7fe be55 	b.w	3401715c <HAL_RCCEx_PeriphCLKConfig+0x195c>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
340184b2:	4a2a      	ldr	r2, [pc, #168]	@ (3401855c <HAL_RCCEx_PeriphCLKConfig+0x2d5c>)
340184b4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340184b6:	bf02      	ittt	eq
340184b8:	2240      	moveq	r2, #64	@ 0x40
340184ba:	4b1d      	ldreq	r3, [pc, #116]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340184bc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340184c0:	f7fe be4e 	b.w	34017160 <HAL_RCCEx_PeriphCLKConfig+0x1960>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
340184c4:	4a26      	ldr	r2, [pc, #152]	@ (34018560 <HAL_RCCEx_PeriphCLKConfig+0x2d60>)
340184c6:	4293      	cmp	r3, r2
340184c8:	d124      	bne.n	34018514 <HAL_RCCEx_PeriphCLKConfig+0x2d14>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340184ca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340184cc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340184d0:	d004      	beq.n	340184dc <HAL_RCCEx_PeriphCLKConfig+0x2cdc>
340184d2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
340184d6:	4815      	ldr	r0, [pc, #84]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340184d8:	f007 f892 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340184dc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340184de:	3b01      	subs	r3, #1
340184e0:	2bff      	cmp	r3, #255	@ 0xff
340184e2:	d904      	bls.n	340184ee <HAL_RCCEx_PeriphCLKConfig+0x2cee>
340184e4:	f240 71e1 	movw	r1, #2017	@ 0x7e1
340184e8:	4810      	ldr	r0, [pc, #64]	@ (3401852c <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340184ea:	f007 f889 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340184ee:	4a10      	ldr	r2, [pc, #64]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340184f0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340184f2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340184f6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340184f8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340184fc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018500:	3901      	subs	r1, #1
34018502:	4303      	orrs	r3, r0
34018504:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018508:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3401850c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018510:	f7fe be6c 	b.w	340171ec <HAL_RCCEx_PeriphCLKConfig+0x19ec>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34018514:	4a13      	ldr	r2, [pc, #76]	@ (34018564 <HAL_RCCEx_PeriphCLKConfig+0x2d64>)
34018516:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018518:	bf02      	ittt	eq
3401851a:	2240      	moveq	r2, #64	@ 0x40
3401851c:	4b04      	ldreq	r3, [pc, #16]	@ (34018530 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401851e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018522:	f7fe be65 	b.w	340171f0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
34018526:	bf00      	nop
34018528:	07031420 	.word	0x07031420
3401852c:	3402f73a 	.word	0x3402f73a
34018530:	56028000 	.word	0x56028000
34018534:	07011420 	.word	0x07011420
34018538:	07031820 	.word	0x07031820
3401853c:	07011820 	.word	0x07011820
34018540:	07030030 	.word	0x07030030
34018544:	07010030 	.word	0x07010030
34018548:	07030430 	.word	0x07030430
3401854c:	07010430 	.word	0x07010430
34018550:	07030830 	.word	0x07030830
34018554:	07010830 	.word	0x07010830
34018558:	07030c30 	.word	0x07030c30
3401855c:	07010c30 	.word	0x07010c30
34018560:	07031030 	.word	0x07031030
34018564:	07011030 	.word	0x07011030
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34018568:	4a8b      	ldr	r2, [pc, #556]	@ (34018798 <HAL_RCCEx_PeriphCLKConfig+0x2f98>)
3401856a:	4293      	cmp	r3, r2
3401856c:	d124      	bne.n	340185b8 <HAL_RCCEx_PeriphCLKConfig+0x2db8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3401856e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018570:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018574:	d004      	beq.n	34018580 <HAL_RCCEx_PeriphCLKConfig+0x2d80>
34018576:	f640 010d 	movw	r1, #2061	@ 0x80d
3401857a:	4888      	ldr	r0, [pc, #544]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3401857c:	f007 f840 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018580:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018582:	3b01      	subs	r3, #1
34018584:	2bff      	cmp	r3, #255	@ 0xff
34018586:	d904      	bls.n	34018592 <HAL_RCCEx_PeriphCLKConfig+0x2d92>
34018588:	f640 010e 	movw	r1, #2062	@ 0x80e
3401858c:	4883      	ldr	r0, [pc, #524]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3401858e:	f007 f837 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34018592:	4a83      	ldr	r2, [pc, #524]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018594:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34018596:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401859a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3401859c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340185a0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340185a4:	3901      	subs	r1, #1
340185a6:	4303      	orrs	r3, r0
340185a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340185ac:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340185b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340185b4:	f7fe be62 	b.w	3401727c <HAL_RCCEx_PeriphCLKConfig+0x1a7c>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
340185b8:	4a7a      	ldr	r2, [pc, #488]	@ (340187a4 <HAL_RCCEx_PeriphCLKConfig+0x2fa4>)
340185ba:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340185bc:	bf02      	ittt	eq
340185be:	2240      	moveq	r2, #64	@ 0x40
340185c0:	4b77      	ldreq	r3, [pc, #476]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340185c2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340185c6:	f7fe be5b 	b.w	34017280 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
340185ca:	4a77      	ldr	r2, [pc, #476]	@ (340187a8 <HAL_RCCEx_PeriphCLKConfig+0x2fa8>)
340185cc:	4293      	cmp	r3, r2
340185ce:	d124      	bne.n	3401861a <HAL_RCCEx_PeriphCLKConfig+0x2e1a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340185d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340185d2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340185d6:	d004      	beq.n	340185e2 <HAL_RCCEx_PeriphCLKConfig+0x2de2>
340185d8:	f640 013a 	movw	r1, #2106	@ 0x83a
340185dc:	486f      	ldr	r0, [pc, #444]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340185de:	f007 f80f 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340185e2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340185e4:	3b01      	subs	r3, #1
340185e6:	2bff      	cmp	r3, #255	@ 0xff
340185e8:	d904      	bls.n	340185f4 <HAL_RCCEx_PeriphCLKConfig+0x2df4>
340185ea:	f640 013b 	movw	r1, #2107	@ 0x83b
340185ee:	486b      	ldr	r0, [pc, #428]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340185f0:	f007 f806 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340185f4:	4a6a      	ldr	r2, [pc, #424]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340185f6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340185f8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340185fc:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340185fe:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018602:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018606:	3901      	subs	r1, #1
34018608:	4303      	orrs	r3, r0
3401860a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401860e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018616:	f7fe be79 	b.w	3401730c <HAL_RCCEx_PeriphCLKConfig+0x1b0c>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
3401861a:	4a64      	ldr	r2, [pc, #400]	@ (340187ac <HAL_RCCEx_PeriphCLKConfig+0x2fac>)
3401861c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401861e:	bf02      	ittt	eq
34018620:	2240      	moveq	r2, #64	@ 0x40
34018622:	4b5f      	ldreq	r3, [pc, #380]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018624:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018628:	f7fe be72 	b.w	34017310 <HAL_RCCEx_PeriphCLKConfig+0x1b10>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3401862c:	4a60      	ldr	r2, [pc, #384]	@ (340187b0 <HAL_RCCEx_PeriphCLKConfig+0x2fb0>)
3401862e:	4293      	cmp	r3, r2
34018630:	d124      	bne.n	3401867c <HAL_RCCEx_PeriphCLKConfig+0x2e7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34018632:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018634:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018638:	d004      	beq.n	34018644 <HAL_RCCEx_PeriphCLKConfig+0x2e44>
3401863a:	f640 0167 	movw	r1, #2151	@ 0x867
3401863e:	4857      	ldr	r0, [pc, #348]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34018640:	f006 ffde 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018644:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018646:	3b01      	subs	r3, #1
34018648:	2bff      	cmp	r3, #255	@ 0xff
3401864a:	d904      	bls.n	34018656 <HAL_RCCEx_PeriphCLKConfig+0x2e56>
3401864c:	f640 0168 	movw	r1, #2152	@ 0x868
34018650:	4852      	ldr	r0, [pc, #328]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34018652:	f006 ffd5 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34018656:	4a52      	ldr	r2, [pc, #328]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018658:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401865a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401865e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018660:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018664:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018668:	3901      	subs	r1, #1
3401866a:	4303      	orrs	r3, r0
3401866c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018670:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018674:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018678:	f7fe beac 	b.w	340173d4 <HAL_RCCEx_PeriphCLKConfig+0x1bd4>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
3401867c:	4a4d      	ldr	r2, [pc, #308]	@ (340187b4 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
3401867e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018680:	bf02      	ittt	eq
34018682:	2240      	moveq	r2, #64	@ 0x40
34018684:	4b46      	ldreq	r3, [pc, #280]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018686:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401868a:	f7fe bea5 	b.w	340173d8 <HAL_RCCEx_PeriphCLKConfig+0x1bd8>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3401868e:	4a4a      	ldr	r2, [pc, #296]	@ (340187b8 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
34018690:	4293      	cmp	r3, r2
34018692:	d124      	bne.n	340186de <HAL_RCCEx_PeriphCLKConfig+0x2ede>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34018694:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018696:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401869a:	d004      	beq.n	340186a6 <HAL_RCCEx_PeriphCLKConfig+0x2ea6>
3401869c:	f640 0194 	movw	r1, #2196	@ 0x894
340186a0:	483e      	ldr	r0, [pc, #248]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340186a2:	f006 ffad 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340186a6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340186a8:	3b01      	subs	r3, #1
340186aa:	2bff      	cmp	r3, #255	@ 0xff
340186ac:	d904      	bls.n	340186b8 <HAL_RCCEx_PeriphCLKConfig+0x2eb8>
340186ae:	f640 0195 	movw	r1, #2197	@ 0x895
340186b2:	483a      	ldr	r0, [pc, #232]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340186b4:	f006 ffa4 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340186b8:	4a39      	ldr	r2, [pc, #228]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340186ba:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340186bc:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340186c0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340186c2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340186c6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340186ca:	3901      	subs	r1, #1
340186cc:	4303      	orrs	r3, r0
340186ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340186d2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340186d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340186da:	f7fe bec3 	b.w	34017464 <HAL_RCCEx_PeriphCLKConfig+0x1c64>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
340186de:	4a37      	ldr	r2, [pc, #220]	@ (340187bc <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
340186e0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340186e2:	bf02      	ittt	eq
340186e4:	2240      	moveq	r2, #64	@ 0x40
340186e6:	4b2e      	ldreq	r3, [pc, #184]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340186e8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340186ec:	f7fe bebc 	b.w	34017468 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
340186f0:	4a33      	ldr	r2, [pc, #204]	@ (340187c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
340186f2:	4293      	cmp	r3, r2
340186f4:	d124      	bne.n	34018740 <HAL_RCCEx_PeriphCLKConfig+0x2f40>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340186f6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340186f8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340186fc:	d004      	beq.n	34018708 <HAL_RCCEx_PeriphCLKConfig+0x2f08>
340186fe:	f640 01c1 	movw	r1, #2241	@ 0x8c1
34018702:	4826      	ldr	r0, [pc, #152]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34018704:	f006 ff7c 	bl	3401f600 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018708:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3401870a:	3b01      	subs	r3, #1
3401870c:	2bff      	cmp	r3, #255	@ 0xff
3401870e:	d904      	bls.n	3401871a <HAL_RCCEx_PeriphCLKConfig+0x2f1a>
34018710:	f640 01c2 	movw	r1, #2242	@ 0x8c2
34018714:	4821      	ldr	r0, [pc, #132]	@ (3401879c <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34018716:	f006 ff73 	bl	3401f600 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401871a:	4a21      	ldr	r2, [pc, #132]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3401871c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401871e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34018722:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018724:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018728:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401872c:	3901      	subs	r1, #1
3401872e:	4303      	orrs	r3, r0
34018730:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018734:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018738:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401873c:	f7fe beda 	b.w	340174f4 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34018740:	4a20      	ldr	r2, [pc, #128]	@ (340187c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
34018742:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018744:	bf02      	ittt	eq
34018746:	2240      	moveq	r2, #64	@ 0x40
34018748:	4b15      	ldreq	r3, [pc, #84]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3401874a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401874e:	f7fe bed3 	b.w	340174f8 <HAL_RCCEx_PeriphCLKConfig+0x1cf8>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34018752:	f7fc ff39 	bl	340155c8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34018756:	f7fe bef5 	b.w	34017544 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3401875a:	f7fc ff35 	bl	340155c8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
3401875e:	f7fe bf13 	b.w	34017588 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34018762:	4a19      	ldr	r2, [pc, #100]	@ (340187c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
34018764:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018766:	bf02      	ittt	eq
34018768:	2240      	moveq	r2, #64	@ 0x40
3401876a:	4b0d      	ldreq	r3, [pc, #52]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3401876c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018770:	f7fe bf4a 	b.w	34017608 <HAL_RCCEx_PeriphCLKConfig+0x1e08>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34018774:	f7fc ff28 	bl	340155c8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34018778:	f7fe bf53 	b.w	34017622 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
3401877c:	4a13      	ldr	r2, [pc, #76]	@ (340187cc <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
3401877e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018780:	bf02      	ittt	eq
34018782:	2240      	moveq	r2, #64	@ 0x40
34018784:	4b06      	ldreq	r3, [pc, #24]	@ (340187a0 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018786:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401878a:	f7fe bfa5 	b.w	340176d8 <HAL_RCCEx_PeriphCLKConfig+0x1ed8>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3401878e:	f7fc ff1b 	bl	340155c8 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34018792:	f7fe bfae 	b.w	340176f2 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
34018796:	bf00      	nop
34018798:	07031430 	.word	0x07031430
3401879c:	3402f73a 	.word	0x3402f73a
340187a0:	56028000 	.word	0x56028000
340187a4:	07011430 	.word	0x07011430
340187a8:	07031830 	.word	0x07031830
340187ac:	07011830 	.word	0x07011830
340187b0:	07031c30 	.word	0x07031c30
340187b4:	07011c30 	.word	0x07011c30
340187b8:	07030034 	.word	0x07030034
340187bc:	07010034 	.word	0x07010034
340187c0:	07030434 	.word	0x07030434
340187c4:	07010434 	.word	0x07010434
340187c8:	03010c14 	.word	0x03010c14
340187cc:	03011414 	.word	0x03011414

340187d0 <HAL_RCCEx_GetPLL1CLKFreq>:
{
340187d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
340187d2:	4c1e      	ldr	r4, [pc, #120]	@ (3401884c <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
340187d4:	6863      	ldr	r3, [r4, #4]
340187d6:	05d9      	lsls	r1, r3, #23
340187d8:	d506      	bpl.n	340187e8 <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
340187da:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
340187de:	005a      	lsls	r2, r3, #1
340187e0:	d40f      	bmi.n	34018802 <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340187e2:	2000      	movs	r0, #0
}
340187e4:	b003      	add	sp, #12
340187e6:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
340187e8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
340187ec:	011b      	lsls	r3, r3, #4
340187ee:	d5f8      	bpl.n	340187e2 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340187f0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340187f4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340187f8:	b003      	add	sp, #12
340187fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340187fe:	f7fc bf9d 	b.w	3401573c <RCCEx_GetPLLSourceFreq>
34018802:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34018806:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3401880a:	f7fc ff97 	bl	3401573c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3401880e:	2800      	cmp	r0, #0
34018810:	d0e7      	beq.n	340187e2 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34018812:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
34018816:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3401881a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3401881e:	d0e0      	beq.n	340187e2 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34018820:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34018824:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34018828:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3401882c:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34018830:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34018834:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34018838:	9401      	str	r4, [sp, #4]
3401883a:	9500      	str	r5, [sp, #0]
3401883c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34018840:	f3c2 220b 	ubfx	r2, r2, #8, #12
34018844:	f7fc ffb0 	bl	340157a8 <RCCEx_CalcPLLFreq>
34018848:	e7cc      	b.n	340187e4 <HAL_RCCEx_GetPLL1CLKFreq+0x14>
3401884a:	bf00      	nop
3401884c:	56028000 	.word	0x56028000

34018850 <HAL_RCCEx_GetPLL2CLKFreq>:
{
34018850:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34018852:	4c1e      	ldr	r4, [pc, #120]	@ (340188cc <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
34018854:	6863      	ldr	r3, [r4, #4]
34018856:	0599      	lsls	r1, r3, #22
34018858:	d506      	bpl.n	34018868 <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
3401885a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3401885e:	005a      	lsls	r2, r3, #1
34018860:	d40f      	bmi.n	34018882 <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34018862:	2000      	movs	r0, #0
}
34018864:	b003      	add	sp, #12
34018866:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34018868:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
3401886c:	011b      	lsls	r3, r3, #4
3401886e:	d5f8      	bpl.n	34018862 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34018870:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34018874:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34018878:	b003      	add	sp, #12
3401887a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3401887e:	f7fc bf5d 	b.w	3401573c <RCCEx_GetPLLSourceFreq>
34018882:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34018886:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3401888a:	f7fc ff57 	bl	3401573c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3401888e:	2800      	cmp	r0, #0
34018890:	d0e7      	beq.n	34018862 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34018892:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
34018896:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3401889a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3401889e:	d0e0      	beq.n	34018862 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
340188a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
340188a4:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340188a8:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340188ac:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340188b0:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340188b4:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
340188b8:	9401      	str	r4, [sp, #4]
340188ba:	9500      	str	r5, [sp, #0]
340188bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340188c0:	f3c2 220b 	ubfx	r2, r2, #8, #12
340188c4:	f7fc ff70 	bl	340157a8 <RCCEx_CalcPLLFreq>
340188c8:	e7cc      	b.n	34018864 <HAL_RCCEx_GetPLL2CLKFreq+0x14>
340188ca:	bf00      	nop
340188cc:	56028000 	.word	0x56028000

340188d0 <HAL_RCCEx_GetPLL3CLKFreq>:
{
340188d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340188d2:	4c1e      	ldr	r4, [pc, #120]	@ (3401894c <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
340188d4:	6863      	ldr	r3, [r4, #4]
340188d6:	0559      	lsls	r1, r3, #21
340188d8:	d506      	bpl.n	340188e8 <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
340188da:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340188de:	005a      	lsls	r2, r3, #1
340188e0:	d40f      	bmi.n	34018902 <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340188e2:	2000      	movs	r0, #0
}
340188e4:	b003      	add	sp, #12
340188e6:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340188e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340188ec:	011b      	lsls	r3, r3, #4
340188ee:	d5f8      	bpl.n	340188e2 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
340188f0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340188f4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
340188f8:	b003      	add	sp, #12
340188fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340188fe:	f7fc bf1d 	b.w	3401573c <RCCEx_GetPLLSourceFreq>
34018902:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34018906:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3401890a:	f7fc ff17 	bl	3401573c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3401890e:	2800      	cmp	r0, #0
34018910:	d0e7      	beq.n	340188e2 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34018912:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
34018916:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3401891a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3401891e:	d0e0      	beq.n	340188e2 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34018920:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34018924:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34018928:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3401892c:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34018930:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34018934:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34018938:	9401      	str	r4, [sp, #4]
3401893a:	9500      	str	r5, [sp, #0]
3401893c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34018940:	f3c2 220b 	ubfx	r2, r2, #8, #12
34018944:	f7fc ff30 	bl	340157a8 <RCCEx_CalcPLLFreq>
34018948:	e7cc      	b.n	340188e4 <HAL_RCCEx_GetPLL3CLKFreq+0x14>
3401894a:	bf00      	nop
3401894c:	56028000 	.word	0x56028000

34018950 <HAL_RCCEx_GetPLL4CLKFreq>:
{
34018950:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34018952:	4c1e      	ldr	r4, [pc, #120]	@ (340189cc <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
34018954:	6863      	ldr	r3, [r4, #4]
34018956:	0519      	lsls	r1, r3, #20
34018958:	d506      	bpl.n	34018968 <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3401895a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3401895e:	005a      	lsls	r2, r3, #1
34018960:	d40f      	bmi.n	34018982 <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34018962:	2000      	movs	r0, #0
}
34018964:	b003      	add	sp, #12
34018966:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34018968:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
3401896c:	011b      	lsls	r3, r3, #4
3401896e:	d5f8      	bpl.n	34018962 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34018970:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34018974:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34018978:	b003      	add	sp, #12
3401897a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3401897e:	f7fc bedd 	b.w	3401573c <RCCEx_GetPLLSourceFreq>
34018982:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34018986:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3401898a:	f7fc fed7 	bl	3401573c <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3401898e:	2800      	cmp	r0, #0
34018990:	d0e7      	beq.n	34018962 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34018992:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
34018996:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3401899a:	f3c3 5105 	ubfx	r1, r3, #20, #6
3401899e:	d0e0      	beq.n	34018962 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
340189a0:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
340189a4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340189a8:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340189ac:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340189b0:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340189b4:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
340189b8:	9401      	str	r4, [sp, #4]
340189ba:	9500      	str	r5, [sp, #0]
340189bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340189c0:	f3c2 220b 	ubfx	r2, r2, #8, #12
340189c4:	f7fc fef0 	bl	340157a8 <RCCEx_CalcPLLFreq>
340189c8:	e7cc      	b.n	34018964 <HAL_RCCEx_GetPLL4CLKFreq+0x14>
340189ca:	bf00      	nop
340189cc:	56028000 	.word	0x56028000

340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
340189d0:	4b3e      	ldr	r3, [pc, #248]	@ (34018acc <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
340189d2:	b510      	push	{r4, lr}
340189d4:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
340189d8:	0652      	lsls	r2, r2, #25
340189da:	d56b      	bpl.n	34018ab4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
340189dc:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
340189e0:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
340189e4:	3a01      	subs	r2, #1
340189e6:	2a06      	cmp	r2, #6
340189e8:	d805      	bhi.n	340189f6 <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
340189ea:	e8df f002 	tbb	[pc, r2]
340189ee:	150f      	.short	0x150f
340189f0:	3e321b48 	.word	0x3e321b48
340189f4:	54          	.byte	0x54
340189f5:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
340189f6:	f7fc fe07 	bl	34015608 <LL_RCC_HSI_IsReady>
340189fa:	2800      	cmp	r0, #0
340189fc:	d05a      	beq.n	34018ab4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340189fe:	4b33      	ldr	r3, [pc, #204]	@ (34018acc <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018a00:	4833      	ldr	r0, [pc, #204]	@ (34018ad0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
34018a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34018a04:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34018a08:	40d8      	lsrs	r0, r3
34018a0a:	e054      	b.n	34018ab6 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34018a0c:	f7fc fe04 	bl	34015618 <LL_RCC_MSI_IsReady>
34018a10:	2800      	cmp	r0, #0
34018a12:	d04f      	beq.n	34018ab4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = MSI_VALUE;
34018a14:	482f      	ldr	r0, [pc, #188]	@ (34018ad4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
34018a16:	e04e      	b.n	34018ab6 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34018a18:	f7fc fdee 	bl	340155f8 <LL_RCC_HSE_IsReady>
34018a1c:	2800      	cmp	r0, #0
34018a1e:	d049      	beq.n	34018ab4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = HSE_VALUE;
34018a20:	482d      	ldr	r0, [pc, #180]	@ (34018ad8 <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
34018a22:	e048      	b.n	34018ab6 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34018a24:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34018a28:	06d4      	lsls	r4, r2, #27
34018a2a:	d543      	bpl.n	34018ab4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34018a2c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34018a30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34018a34:	f3c0 4007 	ubfx	r0, r0, #16, #8
34018a38:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34018a3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          switch (LL_RCC_IC20_GetSource())
34018a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018a42:	d03c      	beq.n	34018abe <RCCEx_GetCLKPCLKFreq.constprop.0+0xee>
34018a44:	d833      	bhi.n	34018aae <RCCEx_GetCLKPCLKFreq.constprop.0+0xde>
34018a46:	bbbb      	cbnz	r3, 34018ab8 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe8>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34018a48:	f7ff fec2 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
34018a4c:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
34018a50:	e031      	b.n	34018ab6 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34018a52:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34018a56:	0590      	lsls	r0, r2, #22
34018a58:	d52c      	bpl.n	34018ab4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34018a5a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34018a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34018a62:	f3c0 4007 	ubfx	r0, r0, #16, #8
34018a66:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34018a68:	e7e7      	b.n	34018a3a <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
        if (LL_RCC_IC15_IsEnabled() != 0U)
34018a6a:	f7fc fe4d 	bl	34015708 <LL_RCC_IC15_IsEnabled>
34018a6e:	b308      	cbz	r0, 34018ab4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
          ic_divider = LL_RCC_IC15_GetDivider();
34018a70:	f7fc fe52 	bl	34015718 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34018a74:	4b15      	ldr	r3, [pc, #84]	@ (34018acc <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
34018a76:	4604      	mov	r4, r0
34018a78:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34018a7c:	e7dd      	b.n	34018a3a <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34018a7e:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34018a82:	0351      	lsls	r1, r2, #13
34018a84:	d516      	bpl.n	34018ab4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34018a86:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34018a8a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34018a8e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34018a92:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34018a94:	e7d1      	b.n	34018a3a <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34018a96:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34018a9a:	0312      	lsls	r2, r2, #12
34018a9c:	d50a      	bpl.n	34018ab4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34018a9e:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34018aa2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34018aa6:	f3c0 4007 	ubfx	r0, r0, #16, #8
34018aaa:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34018aac:	e7c5      	b.n	34018a3a <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
          switch (LL_RCC_IC20_GetSource())
34018aae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34018ab2:	d007      	beq.n	34018ac4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf4>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34018ab4:	2000      	movs	r0, #0
}
34018ab6:	bd10      	pop	{r4, pc}
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34018ab8:	f7ff feca 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
34018abc:	e7c6      	b.n	34018a4c <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34018abe:	f7ff ff07 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
34018ac2:	e7c3      	b.n	34018a4c <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34018ac4:	f7ff ff44 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34018ac8:	e7c0      	b.n	34018a4c <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
34018aca:	bf00      	nop
34018acc:	56028000 	.word	0x56028000
34018ad0:	03d09000 	.word	0x03d09000
34018ad4:	003d0900 	.word	0x003d0900
34018ad8:	02dc6c00 	.word	0x02dc6c00

34018adc <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
34018adc:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34018ade:	4d2b      	ldr	r5, [pc, #172]	@ (34018b8c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb0>)
34018ae0:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
34018ae4:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34018ae8:	2b06      	cmp	r3, #6
34018aea:	d835      	bhi.n	34018b58 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
34018aec:	e8df f003 	tbb	[pc, r3]
34018af0:	28110d04 	.word	0x28110d04
34018af4:	3c45      	.short	0x3c45
34018af6:	4b          	.byte	0x4b
34018af7:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018af8:	f7fc fd48 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34018afc:	f7fc fe16 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34018b00:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34018b02:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018b06:	40d8      	lsrs	r0, r3
34018b08:	e027      	b.n	34018b5a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
34018b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34018b0e:	f7ff bf5f 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34018b12:	f7fc fdb1 	bl	34015678 <LL_RCC_IC7_IsEnabled>
34018b16:	b1f8      	cbz	r0, 34018b58 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC7_GetDivider();
34018b18:	f7fc fdb6 	bl	34015688 <LL_RCC_IC7_GetDivider>
34018b1c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34018b1e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34018b22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34018b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018b2a:	d017      	beq.n	34018b5c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x80>
34018b2c:	d811      	bhi.n	34018b52 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x76>
34018b2e:	b913      	cbnz	r3, 34018b36 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34018b30:	f7ff fe4e 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
34018b34:	e001      	b.n	34018b3a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34018b36:	f7ff fe8b 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34018b3a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34018b3e:	e00c      	b.n	34018b5a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34018b40:	f7fc fdac 	bl	3401569c <LL_RCC_IC8_IsEnabled>
34018b44:	b140      	cbz	r0, 34018b58 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC8_GetDivider();
34018b46:	f7fc fdb1 	bl	340156ac <LL_RCC_IC8_GetDivider>
34018b4a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34018b4e:	4604      	mov	r4, r0
34018b50:	e7e7      	b.n	34018b22 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
        switch (LL_RCC_IC8_GetSource())
34018b52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34018b56:	d004      	beq.n	34018b62 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x86>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34018b58:	2000      	movs	r0, #0
}
34018b5a:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34018b5c:	f7ff feb8 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
34018b60:	e7eb      	b.n	34018b3a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34018b62:	f7ff fef5 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34018b66:	e7e8      	b.n	34018b3a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
      if (LL_RCC_HSI_IsReady() != 0U)
34018b68:	f7fc fd4e 	bl	34015608 <LL_RCC_HSI_IsReady>
34018b6c:	2800      	cmp	r0, #0
34018b6e:	d0f3      	beq.n	34018b58 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34018b70:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018b72:	4807      	ldr	r0, [pc, #28]	@ (34018b90 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb4>)
34018b74:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34018b78:	e7c5      	b.n	34018b06 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
34018b7a:	f7fc fd4d 	bl	34015618 <LL_RCC_MSI_IsReady>
34018b7e:	2800      	cmp	r0, #0
34018b80:	d0ea      	beq.n	34018b58 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        spdifrx_frequency = MSI_VALUE;
34018b82:	4804      	ldr	r0, [pc, #16]	@ (34018b94 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
34018b84:	e7e9      	b.n	34018b5a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34018b86:	4804      	ldr	r0, [pc, #16]	@ (34018b98 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
  return spdifrx_frequency;
34018b88:	e7e7      	b.n	34018b5a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
34018b8a:	bf00      	nop
34018b8c:	56028000 	.word	0x56028000
34018b90:	03d09000 	.word	0x03d09000
34018b94:	003d0900 	.word	0x003d0900
34018b98:	00bb8000 	.word	0x00bb8000

34018b9c <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34018b9c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34018b9e:	f7fc fd5d 	bl	3401565c <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34018ba2:	4b36      	ldr	r3, [pc, #216]	@ (34018c7c <RCCEx_GetXSPICLKFreq+0xe0>)
34018ba4:	4298      	cmp	r0, r3
34018ba6:	d028      	beq.n	34018bfa <RCCEx_GetXSPICLKFreq+0x5e>
34018ba8:	d81b      	bhi.n	34018be2 <RCCEx_GetXSPICLKFreq+0x46>
34018baa:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34018bae:	4298      	cmp	r0, r3
34018bb0:	d013      	beq.n	34018bda <RCCEx_GetXSPICLKFreq+0x3e>
34018bb2:	d80b      	bhi.n	34018bcc <RCCEx_GetXSPICLKFreq+0x30>
34018bb4:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34018bb8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34018bbc:	429a      	cmp	r2, r3
34018bbe:	d04a      	beq.n	34018c56 <RCCEx_GetXSPICLKFreq+0xba>
34018bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34018bc4:	4298      	cmp	r0, r3
34018bc6:	d046      	beq.n	34018c56 <RCCEx_GetXSPICLKFreq+0xba>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34018bc8:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
34018bca:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34018bcc:	4b2c      	ldr	r3, [pc, #176]	@ (34018c80 <RCCEx_GetXSPICLKFreq+0xe4>)
34018bce:	4298      	cmp	r0, r3
34018bd0:	d003      	beq.n	34018bda <RCCEx_GetXSPICLKFreq+0x3e>
34018bd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018bd6:	4298      	cmp	r0, r3
34018bd8:	d1f6      	bne.n	34018bc8 <RCCEx_GetXSPICLKFreq+0x2c>
}
34018bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34018bde:	f7ff bef7 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34018be2:	4b28      	ldr	r3, [pc, #160]	@ (34018c84 <RCCEx_GetXSPICLKFreq+0xe8>)
34018be4:	4298      	cmp	r0, r3
34018be6:	d028      	beq.n	34018c3a <RCCEx_GetXSPICLKFreq+0x9e>
34018be8:	d820      	bhi.n	34018c2c <RCCEx_GetXSPICLKFreq+0x90>
34018bea:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34018bee:	4298      	cmp	r0, r3
34018bf0:	d003      	beq.n	34018bfa <RCCEx_GetXSPICLKFreq+0x5e>
34018bf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018bf6:	4298      	cmp	r0, r3
34018bf8:	d1e6      	bne.n	34018bc8 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34018bfa:	4b23      	ldr	r3, [pc, #140]	@ (34018c88 <RCCEx_GetXSPICLKFreq+0xec>)
34018bfc:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34018c00:	f010 0004 	ands.w	r0, r0, #4
34018c04:	d0e1      	beq.n	34018bca <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34018c06:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34018c0a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34018c0e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34018c12:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34018c14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC4_GetSource())
34018c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018c1c:	d02a      	beq.n	34018c74 <RCCEx_GetXSPICLKFreq+0xd8>
34018c1e:	d820      	bhi.n	34018c62 <RCCEx_GetXSPICLKFreq+0xc6>
34018c20:	bb2b      	cbnz	r3, 34018c6e <RCCEx_GetXSPICLKFreq+0xd2>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34018c22:	f7ff fdd5 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
34018c26:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
34018c2a:	e7ce      	b.n	34018bca <RCCEx_GetXSPICLKFreq+0x2e>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34018c2c:	4b17      	ldr	r3, [pc, #92]	@ (34018c8c <RCCEx_GetXSPICLKFreq+0xf0>)
34018c2e:	4298      	cmp	r0, r3
34018c30:	d003      	beq.n	34018c3a <RCCEx_GetXSPICLKFreq+0x9e>
34018c32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018c36:	4298      	cmp	r0, r3
34018c38:	d1c6      	bne.n	34018bc8 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34018c3a:	4b13      	ldr	r3, [pc, #76]	@ (34018c88 <RCCEx_GetXSPICLKFreq+0xec>)
34018c3c:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34018c40:	f010 0008 	ands.w	r0, r0, #8
34018c44:	d0c1      	beq.n	34018bca <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34018c46:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34018c4a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34018c4e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34018c52:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34018c54:	e7de      	b.n	34018c14 <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34018c56:	f7fc fc99 	bl	3401558c <HAL_RCC_GetSysClockFreq>
}
34018c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34018c5e:	f7fc bd65 	b.w	3401572c <RCCEx_GetHCLKFreq>
        switch (LL_RCC_IC4_GetSource())
34018c62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34018c66:	d1af      	bne.n	34018bc8 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34018c68:	f7ff fe72 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34018c6c:	e7db      	b.n	34018c26 <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34018c6e:	f7ff fdef 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
34018c72:	e7d8      	b.n	34018c26 <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34018c74:	f7ff fe2c 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
34018c78:	e7d5      	b.n	34018c26 <RCCEx_GetXSPICLKFreq+0x8a>
34018c7a:	bf00      	nop
34018c7c:	03020014 	.word	0x03020014
34018c80:	03010414 	.word	0x03010414
34018c84:	03030014 	.word	0x03030014
34018c88:	56028000 	.word	0x56028000
34018c8c:	03030414 	.word	0x03030414

34018c90 <RCCEx_GetOTGPHYCLKFreq>:
{
34018c90:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34018c92:	f7fc fce3 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34018c96:	4b2b      	ldr	r3, [pc, #172]	@ (34018d44 <RCCEx_GetOTGPHYCLKFreq+0xb4>)
34018c98:	4298      	cmp	r0, r3
34018c9a:	d021      	beq.n	34018ce0 <RCCEx_GetOTGPHYCLKFreq+0x50>
34018c9c:	d815      	bhi.n	34018cca <RCCEx_GetOTGPHYCLKFreq+0x3a>
34018c9e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34018ca2:	4298      	cmp	r0, r3
34018ca4:	d00d      	beq.n	34018cc2 <RCCEx_GetOTGPHYCLKFreq+0x32>
34018ca6:	d809      	bhi.n	34018cbc <RCCEx_GetOTGPHYCLKFreq+0x2c>
34018ca8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34018cac:	4298      	cmp	r0, r3
34018cae:	d02d      	beq.n	34018d0c <RCCEx_GetOTGPHYCLKFreq+0x7c>
34018cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34018cb4:	4298      	cmp	r0, r3
34018cb6:	d029      	beq.n	34018d0c <RCCEx_GetOTGPHYCLKFreq+0x7c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34018cb8:	2000      	movs	r0, #0
}
34018cba:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34018cbc:	4b22      	ldr	r3, [pc, #136]	@ (34018d48 <RCCEx_GetOTGPHYCLKFreq+0xb8>)
34018cbe:	4298      	cmp	r0, r3
34018cc0:	d1fa      	bne.n	34018cb8 <RCCEx_GetOTGPHYCLKFreq+0x28>
}
34018cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34018cc6:	f7ff be83 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34018cca:	4b20      	ldr	r3, [pc, #128]	@ (34018d4c <RCCEx_GetOTGPHYCLKFreq+0xbc>)
34018ccc:	4298      	cmp	r0, r3
34018cce:	d023      	beq.n	34018d18 <RCCEx_GetOTGPHYCLKFreq+0x88>
34018cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34018cd4:	4298      	cmp	r0, r3
34018cd6:	d01f      	beq.n	34018d18 <RCCEx_GetOTGPHYCLKFreq+0x88>
34018cd8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34018cdc:	4298      	cmp	r0, r3
34018cde:	d1eb      	bne.n	34018cb8 <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34018ce0:	f7fc fd12 	bl	34015708 <LL_RCC_IC15_IsEnabled>
34018ce4:	2800      	cmp	r0, #0
34018ce6:	d0e7      	beq.n	34018cb8 <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34018ce8:	f7fc fd16 	bl	34015718 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34018cec:	4b18      	ldr	r3, [pc, #96]	@ (34018d50 <RCCEx_GetOTGPHYCLKFreq+0xc0>)
34018cee:	4604      	mov	r4, r0
34018cf0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34018cf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34018cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018cfc:	d01f      	beq.n	34018d3e <RCCEx_GetOTGPHYCLKFreq+0xae>
34018cfe:	d815      	bhi.n	34018d2c <RCCEx_GetOTGPHYCLKFreq+0x9c>
34018d00:	b9d3      	cbnz	r3, 34018d38 <RCCEx_GetOTGPHYCLKFreq+0xa8>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34018d02:	f7ff fd65 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
34018d06:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34018d0a:	e7d6      	b.n	34018cba <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34018d0c:	f7fc fc74 	bl	340155f8 <LL_RCC_HSE_IsReady>
34018d10:	2800      	cmp	r0, #0
34018d12:	d0d1      	beq.n	34018cb8 <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
34018d14:	480f      	ldr	r0, [pc, #60]	@ (34018d54 <RCCEx_GetOTGPHYCLKFreq+0xc4>)
34018d16:	e7d0      	b.n	34018cba <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34018d18:	f7fc fc6e 	bl	340155f8 <LL_RCC_HSE_IsReady>
34018d1c:	2800      	cmp	r0, #0
34018d1e:	d0cb      	beq.n	34018cb8 <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34018d20:	f7fc fc62 	bl	340155e8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34018d24:	2800      	cmp	r0, #0
34018d26:	d1f5      	bne.n	34018d14 <RCCEx_GetOTGPHYCLKFreq+0x84>
          usb_frequency = HSE_VALUE;
34018d28:	480b      	ldr	r0, [pc, #44]	@ (34018d58 <RCCEx_GetOTGPHYCLKFreq+0xc8>)
  return usb_frequency;
34018d2a:	e7c6      	b.n	34018cba <RCCEx_GetOTGPHYCLKFreq+0x2a>
        switch (LL_RCC_IC15_GetSource())
34018d2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34018d30:	d1c2      	bne.n	34018cb8 <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34018d32:	f7ff fe0d 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34018d36:	e7e6      	b.n	34018d06 <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34018d38:	f7ff fd8a 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
34018d3c:	e7e3      	b.n	34018d06 <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34018d3e:	f7ff fdc7 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
34018d42:	e7e0      	b.n	34018d06 <RCCEx_GetOTGPHYCLKFreq+0x76>
34018d44:	03020c14 	.word	0x03020c14
34018d48:	03011414 	.word	0x03011414
34018d4c:	03030c14 	.word	0x03030c14
34018d50:	56028000 	.word	0x56028000
34018d54:	016e3600 	.word	0x016e3600
34018d58:	02dc6c00 	.word	0x02dc6c00

34018d5c <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
34018d5c:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
34018d5e:	f7fc fc7d 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34018d62:	4b11      	ldr	r3, [pc, #68]	@ (34018da8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
34018d64:	4298      	cmp	r0, r3
34018d66:	d01c      	beq.n	34018da2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
34018d68:	d805      	bhi.n	34018d76 <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
34018d6a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34018d6e:	4298      	cmp	r0, r3
34018d70:	d012      	beq.n	34018d98 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34018d72:	2000      	movs	r0, #0
}
34018d74:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34018d76:	4b0d      	ldr	r3, [pc, #52]	@ (34018dac <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
34018d78:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34018d7c:	4298      	cmp	r0, r3
34018d7e:	d1f8      	bne.n	34018d72 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
34018d80:	f7fc fc3a 	bl	340155f8 <LL_RCC_HSE_IsReady>
34018d84:	2800      	cmp	r0, #0
34018d86:	d0f4      	beq.n	34018d72 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34018d88:	f7fc fc2e 	bl	340155e8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
34018d8c:	4b08      	ldr	r3, [pc, #32]	@ (34018db0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
34018d8e:	2800      	cmp	r0, #0
34018d90:	4808      	ldr	r0, [pc, #32]	@ (34018db4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
34018d92:	bf08      	it	eq
34018d94:	4618      	moveq	r0, r3
34018d96:	e7ed      	b.n	34018d74 <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34018d98:	4807      	ldr	r0, [pc, #28]	@ (34018db8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
34018d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34018d9e:	f7ff bf77 	b.w	34018c90 <RCCEx_GetOTGPHYCLKFreq>
34018da2:	4806      	ldr	r0, [pc, #24]	@ (34018dbc <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
34018da4:	e7f9      	b.n	34018d9a <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
34018da6:	bf00      	nop
34018da8:	01001814 	.word	0x01001814
34018dac:	01011014 	.word	0x01011014
34018db0:	02dc6c00 	.word	0x02dc6c00
34018db4:	016e3600 	.word	0x016e3600
34018db8:	03000c14 	.word	0x03000c14
34018dbc:	03001414 	.word	0x03001414

34018dc0 <RCCEx_GetUSARTCLKFreq>:
{
34018dc0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34018dc2:	f7fc fc4b 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018dc6:	4b6f      	ldr	r3, [pc, #444]	@ (34018f84 <RCCEx_GetUSARTCLKFreq+0x1c4>)
34018dc8:	4298      	cmp	r0, r3
34018dca:	d039      	beq.n	34018e40 <RCCEx_GetUSARTCLKFreq+0x80>
34018dcc:	d852      	bhi.n	34018e74 <RCCEx_GetUSARTCLKFreq+0xb4>
34018dce:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34018dd2:	4298      	cmp	r0, r3
34018dd4:	f000 80b5 	beq.w	34018f42 <RCCEx_GetUSARTCLKFreq+0x182>
34018dd8:	d813      	bhi.n	34018e02 <RCCEx_GetUSARTCLKFreq+0x42>
34018dda:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34018dde:	4298      	cmp	r0, r3
34018de0:	f000 80af 	beq.w	34018f42 <RCCEx_GetUSARTCLKFreq+0x182>
34018de4:	d80b      	bhi.n	34018dfe <RCCEx_GetUSARTCLKFreq+0x3e>
34018de6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34018dea:	4298      	cmp	r0, r3
34018dec:	f000 80a9 	beq.w	34018f42 <RCCEx_GetUSARTCLKFreq+0x182>
34018df0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018df4:	4298      	cmp	r0, r3
34018df6:	f000 80ae 	beq.w	34018f56 <RCCEx_GetUSARTCLKFreq+0x196>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34018dfa:	2000      	movs	r0, #0
}
34018dfc:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018dfe:	4b62      	ldr	r3, [pc, #392]	@ (34018f88 <RCCEx_GetUSARTCLKFreq+0x1c8>)
34018e00:	e7f8      	b.n	34018df4 <RCCEx_GetUSARTCLKFreq+0x34>
34018e02:	4b62      	ldr	r3, [pc, #392]	@ (34018f8c <RCCEx_GetUSARTCLKFreq+0x1cc>)
34018e04:	4298      	cmp	r0, r3
34018e06:	d00c      	beq.n	34018e22 <RCCEx_GetUSARTCLKFreq+0x62>
34018e08:	d80f      	bhi.n	34018e2a <RCCEx_GetUSARTCLKFreq+0x6a>
34018e0a:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34018e0e:	4298      	cmp	r0, r3
34018e10:	d007      	beq.n	34018e22 <RCCEx_GetUSARTCLKFreq+0x62>
34018e12:	bf8e      	itee	hi
34018e14:	4b5e      	ldrhi	r3, [pc, #376]	@ (34018f90 <RCCEx_GetUSARTCLKFreq+0x1d0>)
34018e16:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34018e1a:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34018e1e:	4298      	cmp	r0, r3
34018e20:	d1eb      	bne.n	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
}
34018e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34018e26:	f7ff bdd3 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018e2a:	4b5a      	ldr	r3, [pc, #360]	@ (34018f94 <RCCEx_GetUSARTCLKFreq+0x1d4>)
34018e2c:	4298      	cmp	r0, r3
34018e2e:	d007      	beq.n	34018e40 <RCCEx_GetUSARTCLKFreq+0x80>
34018e30:	bf8e      	itee	hi
34018e32:	4b59      	ldrhi	r3, [pc, #356]	@ (34018f98 <RCCEx_GetUSARTCLKFreq+0x1d8>)
34018e34:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34018e38:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34018e3c:	4298      	cmp	r0, r3
34018e3e:	d1dc      	bne.n	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34018e40:	f7fc fc3e 	bl	340156c0 <LL_RCC_IC9_IsEnabled>
34018e44:	2800      	cmp	r0, #0
34018e46:	d0d8      	beq.n	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
34018e48:	f7fc fc42 	bl	340156d0 <LL_RCC_IC9_GetDivider>
34018e4c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34018e4e:	4b53      	ldr	r3, [pc, #332]	@ (34018f9c <RCCEx_GetUSARTCLKFreq+0x1dc>)
34018e50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34018e54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34018e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018e5c:	f000 808e 	beq.w	34018f7c <RCCEx_GetUSARTCLKFreq+0x1bc>
34018e60:	f200 8082 	bhi.w	34018f68 <RCCEx_GetUSARTCLKFreq+0x1a8>
34018e64:	2b00      	cmp	r3, #0
34018e66:	f040 8086 	bne.w	34018f76 <RCCEx_GetUSARTCLKFreq+0x1b6>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34018e6a:	f7ff fcb1 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
34018e6e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34018e72:	e7c3      	b.n	34018dfc <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018e74:	4b4a      	ldr	r3, [pc, #296]	@ (34018fa0 <RCCEx_GetUSARTCLKFreq+0x1e0>)
34018e76:	4298      	cmp	r0, r3
34018e78:	d045      	beq.n	34018f06 <RCCEx_GetUSARTCLKFreq+0x146>
34018e7a:	d833      	bhi.n	34018ee4 <RCCEx_GetUSARTCLKFreq+0x124>
34018e7c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34018e80:	4298      	cmp	r0, r3
34018e82:	d028      	beq.n	34018ed6 <RCCEx_GetUSARTCLKFreq+0x116>
34018e84:	d81c      	bhi.n	34018ec0 <RCCEx_GetUSARTCLKFreq+0x100>
34018e86:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
34018e8a:	3bfc      	subs	r3, #252	@ 0xfc
34018e8c:	4298      	cmp	r0, r3
34018e8e:	d006      	beq.n	34018e9e <RCCEx_GetUSARTCLKFreq+0xde>
34018e90:	d810      	bhi.n	34018eb4 <RCCEx_GetUSARTCLKFreq+0xf4>
34018e92:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34018e96:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34018e9a:	4298      	cmp	r0, r3
34018e9c:	d1ad      	bne.n	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34018e9e:	f7fc fc21 	bl	340156e4 <LL_RCC_IC14_IsEnabled>
34018ea2:	2800      	cmp	r0, #0
34018ea4:	d0a9      	beq.n	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
34018ea6:	f7fc fc25 	bl	340156f4 <LL_RCC_IC14_GetDivider>
34018eaa:	4b3c      	ldr	r3, [pc, #240]	@ (34018f9c <RCCEx_GetUSARTCLKFreq+0x1dc>)
34018eac:	4604      	mov	r4, r0
34018eae:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34018eb2:	e7cf      	b.n	34018e54 <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018eb4:	4b3b      	ldr	r3, [pc, #236]	@ (34018fa4 <RCCEx_GetUSARTCLKFreq+0x1e4>)
34018eb6:	4298      	cmp	r0, r3
34018eb8:	d0f1      	beq.n	34018e9e <RCCEx_GetUSARTCLKFreq+0xde>
34018eba:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
34018ebe:	e7ec      	b.n	34018e9a <RCCEx_GetUSARTCLKFreq+0xda>
34018ec0:	4b39      	ldr	r3, [pc, #228]	@ (34018fa8 <RCCEx_GetUSARTCLKFreq+0x1e8>)
34018ec2:	4298      	cmp	r0, r3
34018ec4:	d007      	beq.n	34018ed6 <RCCEx_GetUSARTCLKFreq+0x116>
34018ec6:	bf8e      	itee	hi
34018ec8:	4b38      	ldrhi	r3, [pc, #224]	@ (34018fac <RCCEx_GetUSARTCLKFreq+0x1ec>)
34018eca:	f020 0004 	bicls.w	r0, r0, #4
34018ece:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34018ed2:	4298      	cmp	r0, r3
34018ed4:	d191      	bne.n	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
34018ed6:	f7fc fba7 	bl	34015628 <LL_RCC_LSE_IsReady>
34018eda:	3800      	subs	r0, #0
34018edc:	bf18      	it	ne
34018ede:	2001      	movne	r0, #1
34018ee0:	03c0      	lsls	r0, r0, #15
34018ee2:	e78b      	b.n	34018dfc <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018ee4:	4b32      	ldr	r3, [pc, #200]	@ (34018fb0 <RCCEx_GetUSARTCLKFreq+0x1f0>)
34018ee6:	4298      	cmp	r0, r3
34018ee8:	d020      	beq.n	34018f2c <RCCEx_GetUSARTCLKFreq+0x16c>
34018eea:	d813      	bhi.n	34018f14 <RCCEx_GetUSARTCLKFreq+0x154>
34018eec:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34018ef0:	4298      	cmp	r0, r3
34018ef2:	d008      	beq.n	34018f06 <RCCEx_GetUSARTCLKFreq+0x146>
34018ef4:	bf8e      	itee	hi
34018ef6:	4b2f      	ldrhi	r3, [pc, #188]	@ (34018fb4 <RCCEx_GetUSARTCLKFreq+0x1f4>)
34018ef8:	f020 0004 	bicls.w	r0, r0, #4
34018efc:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34018f00:	4298      	cmp	r0, r3
34018f02:	f47f af7a 	bne.w	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
34018f06:	f7fc fb87 	bl	34015618 <LL_RCC_MSI_IsReady>
34018f0a:	2800      	cmp	r0, #0
34018f0c:	f43f af75 	beq.w	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
34018f10:	4829      	ldr	r0, [pc, #164]	@ (34018fb8 <RCCEx_GetUSARTCLKFreq+0x1f8>)
  return usart_frequency;
34018f12:	e773      	b.n	34018dfc <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018f14:	4b29      	ldr	r3, [pc, #164]	@ (34018fbc <RCCEx_GetUSARTCLKFreq+0x1fc>)
34018f16:	4298      	cmp	r0, r3
34018f18:	d008      	beq.n	34018f2c <RCCEx_GetUSARTCLKFreq+0x16c>
34018f1a:	bf8e      	itee	hi
34018f1c:	4b28      	ldrhi	r3, [pc, #160]	@ (34018fc0 <RCCEx_GetUSARTCLKFreq+0x200>)
34018f1e:	f020 0004 	bicls.w	r0, r0, #4
34018f22:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34018f26:	4298      	cmp	r0, r3
34018f28:	f47f af67 	bne.w	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
34018f2c:	f7fc fb6c 	bl	34015608 <LL_RCC_HSI_IsReady>
34018f30:	2800      	cmp	r0, #0
34018f32:	f43f af62 	beq.w	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34018f36:	4b19      	ldr	r3, [pc, #100]	@ (34018f9c <RCCEx_GetUSARTCLKFreq+0x1dc>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018f38:	4822      	ldr	r0, [pc, #136]	@ (34018fc4 <RCCEx_GetUSARTCLKFreq+0x204>)
34018f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34018f3c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34018f40:	e007      	b.n	34018f52 <RCCEx_GetUSARTCLKFreq+0x192>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018f42:	f7fc fb23 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34018f46:	f7fc fbf1 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34018f4a:	4b14      	ldr	r3, [pc, #80]	@ (34018f9c <RCCEx_GetUSARTCLKFreq+0x1dc>)
34018f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34018f4e:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018f52:	40d8      	lsrs	r0, r3
34018f54:	e752      	b.n	34018dfc <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018f56:	f7fc fb19 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34018f5a:	f7fc fbe7 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34018f5e:	4b0f      	ldr	r3, [pc, #60]	@ (34018f9c <RCCEx_GetUSARTCLKFreq+0x1dc>)
34018f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018f62:	f003 0307 	and.w	r3, r3, #7
34018f66:	e7f4      	b.n	34018f52 <RCCEx_GetUSARTCLKFreq+0x192>
        switch (LL_RCC_IC14_GetSource())
34018f68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34018f6c:	f47f af45 	bne.w	34018dfa <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34018f70:	f7ff fcee 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34018f74:	e77b      	b.n	34018e6e <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34018f76:	f7ff fc6b 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
34018f7a:	e778      	b.n	34018e6e <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34018f7c:	f7ff fca8 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
34018f80:	e775      	b.n	34018e6e <RCCEx_GetUSARTCLKFreq+0xae>
34018f82:	bf00      	nop
34018f84:	07021430 	.word	0x07021430
34018f88:	07000830 	.word	0x07000830
34018f8c:	07011430 	.word	0x07011430
34018f90:	07010830 	.word	0x07010830
34018f94:	07020434 	.word	0x07020434
34018f98:	07020830 	.word	0x07020830
34018f9c:	56028000 	.word	0x56028000
34018fa0:	07050030 	.word	0x07050030
34018fa4:	07030830 	.word	0x07030830
34018fa8:	07040830 	.word	0x07040830
34018fac:	07041430 	.word	0x07041430
34018fb0:	07060030 	.word	0x07060030
34018fb4:	07051430 	.word	0x07051430
34018fb8:	003d0900 	.word	0x003d0900
34018fbc:	07060830 	.word	0x07060830
34018fc0:	07061430 	.word	0x07061430
34018fc4:	03d09000 	.word	0x03d09000

34018fc8 <RCCEx_GetUARTCLKFreq>:
{
34018fc8:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34018fca:	f7fc fb47 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34018fce:	4b77      	ldr	r3, [pc, #476]	@ (340191ac <RCCEx_GetUARTCLKFreq+0x1e4>)
34018fd0:	4298      	cmp	r0, r3
34018fd2:	d03e      	beq.n	34019052 <RCCEx_GetUARTCLKFreq+0x8a>
34018fd4:	d859      	bhi.n	3401908a <RCCEx_GetUARTCLKFreq+0xc2>
34018fd6:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34018fda:	4298      	cmp	r0, r3
34018fdc:	f000 80c6 	beq.w	3401916c <RCCEx_GetUARTCLKFreq+0x1a4>
34018fe0:	d814      	bhi.n	3401900c <RCCEx_GetUARTCLKFreq+0x44>
34018fe2:	4b73      	ldr	r3, [pc, #460]	@ (340191b0 <RCCEx_GetUARTCLKFreq+0x1e8>)
34018fe4:	4298      	cmp	r0, r3
34018fe6:	f000 80cb 	beq.w	34019180 <RCCEx_GetUARTCLKFreq+0x1b8>
34018fea:	3b01      	subs	r3, #1
34018fec:	4298      	cmp	r0, r3
34018fee:	d90b      	bls.n	34019008 <RCCEx_GetUARTCLKFreq+0x40>
34018ff0:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
34018ff4:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34018ff8:	429a      	cmp	r2, r3
34018ffa:	f000 80b7 	beq.w	3401916c <RCCEx_GetUARTCLKFreq+0x1a4>
34018ffe:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34019002:	4298      	cmp	r0, r3
34019004:	f000 80b2 	beq.w	3401916c <RCCEx_GetUARTCLKFreq+0x1a4>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34019008:	2000      	movs	r0, #0
}
3401900a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3401900c:	4b69      	ldr	r3, [pc, #420]	@ (340191b4 <RCCEx_GetUARTCLKFreq+0x1ec>)
3401900e:	4298      	cmp	r0, r3
34019010:	d00d      	beq.n	3401902e <RCCEx_GetUARTCLKFreq+0x66>
34019012:	d812      	bhi.n	3401903a <RCCEx_GetUARTCLKFreq+0x72>
34019014:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34019018:	4298      	cmp	r0, r3
3401901a:	d008      	beq.n	3401902e <RCCEx_GetUARTCLKFreq+0x66>
3401901c:	d80b      	bhi.n	34019036 <RCCEx_GetUARTCLKFreq+0x6e>
3401901e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34019022:	4298      	cmp	r0, r3
34019024:	d003      	beq.n	3401902e <RCCEx_GetUARTCLKFreq+0x66>
34019026:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
3401902a:	4298      	cmp	r0, r3
3401902c:	d1ec      	bne.n	34019008 <RCCEx_GetUARTCLKFreq+0x40>
}
3401902e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019032:	f7ff bccd 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34019036:	4b60      	ldr	r3, [pc, #384]	@ (340191b8 <RCCEx_GetUARTCLKFreq+0x1f0>)
34019038:	e7f7      	b.n	3401902a <RCCEx_GetUARTCLKFreq+0x62>
3401903a:	4b60      	ldr	r3, [pc, #384]	@ (340191bc <RCCEx_GetUARTCLKFreq+0x1f4>)
3401903c:	4298      	cmp	r0, r3
3401903e:	d008      	beq.n	34019052 <RCCEx_GetUARTCLKFreq+0x8a>
34019040:	d821      	bhi.n	34019086 <RCCEx_GetUARTCLKFreq+0xbe>
34019042:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34019046:	4298      	cmp	r0, r3
34019048:	d003      	beq.n	34019052 <RCCEx_GetUARTCLKFreq+0x8a>
3401904a:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
3401904e:	4298      	cmp	r0, r3
34019050:	d1da      	bne.n	34019008 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34019052:	f7fc fb35 	bl	340156c0 <LL_RCC_IC9_IsEnabled>
34019056:	2800      	cmp	r0, #0
34019058:	d0d6      	beq.n	34019008 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
3401905a:	f7fc fb39 	bl	340156d0 <LL_RCC_IC9_GetDivider>
3401905e:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34019060:	4b57      	ldr	r3, [pc, #348]	@ (340191c0 <RCCEx_GetUARTCLKFreq+0x1f8>)
34019062:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34019066:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
3401906a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401906e:	f000 809a 	beq.w	340191a6 <RCCEx_GetUARTCLKFreq+0x1de>
34019072:	f200 808e 	bhi.w	34019192 <RCCEx_GetUARTCLKFreq+0x1ca>
34019076:	2b00      	cmp	r3, #0
34019078:	f040 8092 	bne.w	340191a0 <RCCEx_GetUARTCLKFreq+0x1d8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401907c:	f7ff fba8 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
34019080:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34019084:	e7c1      	b.n	3401900a <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34019086:	4b4f      	ldr	r3, [pc, #316]	@ (340191c4 <RCCEx_GetUARTCLKFreq+0x1fc>)
34019088:	e7e1      	b.n	3401904e <RCCEx_GetUARTCLKFreq+0x86>
3401908a:	4b4f      	ldr	r3, [pc, #316]	@ (340191c8 <RCCEx_GetUARTCLKFreq+0x200>)
3401908c:	4298      	cmp	r0, r3
3401908e:	d04a      	beq.n	34019126 <RCCEx_GetUARTCLKFreq+0x15e>
34019090:	d836      	bhi.n	34019100 <RCCEx_GetUARTCLKFreq+0x138>
34019092:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019096:	4298      	cmp	r0, r3
34019098:	d029      	beq.n	340190ee <RCCEx_GetUARTCLKFreq+0x126>
3401909a:	d81c      	bhi.n	340190d6 <RCCEx_GetUARTCLKFreq+0x10e>
3401909c:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
340190a0:	3b04      	subs	r3, #4
340190a2:	4298      	cmp	r0, r3
340190a4:	d008      	beq.n	340190b8 <RCCEx_GetUARTCLKFreq+0xf0>
340190a6:	d812      	bhi.n	340190ce <RCCEx_GetUARTCLKFreq+0x106>
340190a8:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
340190ac:	4298      	cmp	r0, r3
340190ae:	d003      	beq.n	340190b8 <RCCEx_GetUARTCLKFreq+0xf0>
340190b0:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
340190b4:	4298      	cmp	r0, r3
340190b6:	d1a7      	bne.n	34019008 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
340190b8:	f7fc fb14 	bl	340156e4 <LL_RCC_IC14_IsEnabled>
340190bc:	2800      	cmp	r0, #0
340190be:	d0a3      	beq.n	34019008 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
340190c0:	f7fc fb18 	bl	340156f4 <LL_RCC_IC14_GetDivider>
340190c4:	4b3e      	ldr	r3, [pc, #248]	@ (340191c0 <RCCEx_GetUARTCLKFreq+0x1f8>)
340190c6:	4604      	mov	r4, r0
340190c8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340190cc:	e7cb      	b.n	34019066 <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
340190ce:	4b3f      	ldr	r3, [pc, #252]	@ (340191cc <RCCEx_GetUARTCLKFreq+0x204>)
340190d0:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340190d4:	e7ee      	b.n	340190b4 <RCCEx_GetUARTCLKFreq+0xec>
340190d6:	4b3e      	ldr	r3, [pc, #248]	@ (340191d0 <RCCEx_GetUARTCLKFreq+0x208>)
340190d8:	4298      	cmp	r0, r3
340190da:	d008      	beq.n	340190ee <RCCEx_GetUARTCLKFreq+0x126>
340190dc:	d80e      	bhi.n	340190fc <RCCEx_GetUARTCLKFreq+0x134>
340190de:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
340190e2:	4298      	cmp	r0, r3
340190e4:	d003      	beq.n	340190ee <RCCEx_GetUARTCLKFreq+0x126>
340190e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340190ea:	4298      	cmp	r0, r3
340190ec:	d18c      	bne.n	34019008 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
340190ee:	f7fc fa9b 	bl	34015628 <LL_RCC_LSE_IsReady>
340190f2:	3800      	subs	r0, #0
340190f4:	bf18      	it	ne
340190f6:	2001      	movne	r0, #1
340190f8:	03c0      	lsls	r0, r0, #15
340190fa:	e786      	b.n	3401900a <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
340190fc:	4b35      	ldr	r3, [pc, #212]	@ (340191d4 <RCCEx_GetUARTCLKFreq+0x20c>)
340190fe:	e7f4      	b.n	340190ea <RCCEx_GetUARTCLKFreq+0x122>
34019100:	4b35      	ldr	r3, [pc, #212]	@ (340191d8 <RCCEx_GetUARTCLKFreq+0x210>)
34019102:	4298      	cmp	r0, r3
34019104:	d025      	beq.n	34019152 <RCCEx_GetUARTCLKFreq+0x18a>
34019106:	d817      	bhi.n	34019138 <RCCEx_GetUARTCLKFreq+0x170>
34019108:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
3401910c:	3b04      	subs	r3, #4
3401910e:	4298      	cmp	r0, r3
34019110:	d009      	beq.n	34019126 <RCCEx_GetUARTCLKFreq+0x15e>
34019112:	d80f      	bhi.n	34019134 <RCCEx_GetUARTCLKFreq+0x16c>
34019114:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34019118:	4298      	cmp	r0, r3
3401911a:	d004      	beq.n	34019126 <RCCEx_GetUARTCLKFreq+0x15e>
3401911c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019120:	4298      	cmp	r0, r3
34019122:	f47f af71 	bne.w	34019008 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
34019126:	f7fc fa77 	bl	34015618 <LL_RCC_MSI_IsReady>
3401912a:	2800      	cmp	r0, #0
3401912c:	f43f af6c 	beq.w	34019008 <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
34019130:	482a      	ldr	r0, [pc, #168]	@ (340191dc <RCCEx_GetUARTCLKFreq+0x214>)
  return uart_frequency;
34019132:	e76a      	b.n	3401900a <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34019134:	4b2a      	ldr	r3, [pc, #168]	@ (340191e0 <RCCEx_GetUARTCLKFreq+0x218>)
34019136:	e7f3      	b.n	34019120 <RCCEx_GetUARTCLKFreq+0x158>
34019138:	4b2a      	ldr	r3, [pc, #168]	@ (340191e4 <RCCEx_GetUARTCLKFreq+0x21c>)
3401913a:	4298      	cmp	r0, r3
3401913c:	d009      	beq.n	34019152 <RCCEx_GetUARTCLKFreq+0x18a>
3401913e:	d813      	bhi.n	34019168 <RCCEx_GetUARTCLKFreq+0x1a0>
34019140:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34019144:	4298      	cmp	r0, r3
34019146:	d004      	beq.n	34019152 <RCCEx_GetUARTCLKFreq+0x18a>
34019148:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401914c:	4298      	cmp	r0, r3
3401914e:	f47f af5b 	bne.w	34019008 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
34019152:	f7fc fa59 	bl	34015608 <LL_RCC_HSI_IsReady>
34019156:	2800      	cmp	r0, #0
34019158:	f43f af56 	beq.w	34019008 <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401915c:	4b18      	ldr	r3, [pc, #96]	@ (340191c0 <RCCEx_GetUARTCLKFreq+0x1f8>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401915e:	4822      	ldr	r0, [pc, #136]	@ (340191e8 <RCCEx_GetUARTCLKFreq+0x220>)
34019160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34019162:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34019166:	e009      	b.n	3401917c <RCCEx_GetUARTCLKFreq+0x1b4>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34019168:	4b20      	ldr	r3, [pc, #128]	@ (340191ec <RCCEx_GetUARTCLKFreq+0x224>)
3401916a:	e7ef      	b.n	3401914c <RCCEx_GetUARTCLKFreq+0x184>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401916c:	f7fc fa0e 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34019170:	f7fc fadc 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34019174:	4b12      	ldr	r3, [pc, #72]	@ (340191c0 <RCCEx_GetUARTCLKFreq+0x1f8>)
34019176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019178:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401917c:	40d8      	lsrs	r0, r3
3401917e:	e744      	b.n	3401900a <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019180:	f7fc fa04 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34019184:	f7fc fad2 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34019188:	4b0d      	ldr	r3, [pc, #52]	@ (340191c0 <RCCEx_GetUARTCLKFreq+0x1f8>)
3401918a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3401918c:	f3c3 1302 	ubfx	r3, r3, #4, #3
34019190:	e7f4      	b.n	3401917c <RCCEx_GetUARTCLKFreq+0x1b4>
        switch (LL_RCC_IC14_GetSource())
34019192:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019196:	f47f af37 	bne.w	34019008 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401919a:	f7ff fbd9 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
3401919e:	e76f      	b.n	34019080 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340191a0:	f7ff fb56 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
340191a4:	e76c      	b.n	34019080 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340191a6:	f7ff fb93 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
340191aa:	e769      	b.n	34019080 <RCCEx_GetUARTCLKFreq+0xb8>
340191ac:	07021c30 	.word	0x07021c30
340191b0:	07000034 	.word	0x07000034
340191b4:	07011c30 	.word	0x07011c30
340191b8:	07011830 	.word	0x07011830
340191bc:	07021030 	.word	0x07021030
340191c0:	56028000 	.word	0x56028000
340191c4:	07021830 	.word	0x07021830
340191c8:	07050034 	.word	0x07050034
340191cc:	07031830 	.word	0x07031830
340191d0:	07041830 	.word	0x07041830
340191d4:	07041c30 	.word	0x07041c30
340191d8:	07060034 	.word	0x07060034
340191dc:	003d0900 	.word	0x003d0900
340191e0:	07051c30 	.word	0x07051c30
340191e4:	07061830 	.word	0x07061830
340191e8:	03d09000 	.word	0x03d09000
340191ec:	07061c30 	.word	0x07061c30

340191f0 <RCCEx_GetSPICLKFreq>:
{
340191f0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340191f2:	f7fc fa33 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
340191f6:	4b89      	ldr	r3, [pc, #548]	@ (3401941c <RCCEx_GetSPICLKFreq+0x22c>)
340191f8:	4298      	cmp	r0, r3
340191fa:	d055      	beq.n	340192a8 <RCCEx_GetSPICLKFreq+0xb8>
340191fc:	d865      	bhi.n	340192ca <RCCEx_GetSPICLKFreq+0xda>
340191fe:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
34019202:	4298      	cmp	r0, r3
34019204:	f000 80ca 	beq.w	3401939c <RCCEx_GetSPICLKFreq+0x1ac>
34019208:	d81e      	bhi.n	34019248 <RCCEx_GetSPICLKFreq+0x58>
3401920a:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3401920e:	4298      	cmp	r0, r3
34019210:	f000 80ba 	beq.w	34019388 <RCCEx_GetSPICLKFreq+0x198>
34019214:	d80a      	bhi.n	3401922c <RCCEx_GetSPICLKFreq+0x3c>
34019216:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401921a:	4298      	cmp	r0, r3
3401921c:	d00b      	beq.n	34019236 <RCCEx_GetSPICLKFreq+0x46>
3401921e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019222:	4298      	cmp	r0, r3
34019224:	f000 80b0 	beq.w	34019388 <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34019228:	2000      	movs	r0, #0
}
3401922a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401922c:	4b7c      	ldr	r3, [pc, #496]	@ (34019420 <RCCEx_GetSPICLKFreq+0x230>)
3401922e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019232:	4298      	cmp	r0, r3
34019234:	d1f8      	bne.n	34019228 <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019236:	f7fc f9a9 	bl	3401558c <HAL_RCC_GetSysClockFreq>
3401923a:	f7fc fa77 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
3401923e:	4b79      	ldr	r3, [pc, #484]	@ (34019424 <RCCEx_GetSPICLKFreq+0x234>)
34019240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34019242:	f3c3 1302 	ubfx	r3, r3, #4, #3
34019246:	e0a7      	b.n	34019398 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34019248:	4b77      	ldr	r3, [pc, #476]	@ (34019428 <RCCEx_GetSPICLKFreq+0x238>)
3401924a:	4298      	cmp	r0, r3
3401924c:	f000 80af 	beq.w	340193ae <RCCEx_GetSPICLKFreq+0x1be>
34019250:	d81d      	bhi.n	3401928e <RCCEx_GetSPICLKFreq+0x9e>
34019252:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34019256:	4298      	cmp	r0, r3
34019258:	d00a      	beq.n	34019270 <RCCEx_GetSPICLKFreq+0x80>
3401925a:	d80d      	bhi.n	34019278 <RCCEx_GetSPICLKFreq+0x88>
3401925c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34019260:	4298      	cmp	r0, r3
34019262:	d005      	beq.n	34019270 <RCCEx_GetSPICLKFreq+0x80>
34019264:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34019268:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
3401926c:	4298      	cmp	r0, r3
3401926e:	d1db      	bne.n	34019228 <RCCEx_GetSPICLKFreq+0x38>
}
34019270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019274:	f7ff bbac 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34019278:	4b6c      	ldr	r3, [pc, #432]	@ (3401942c <RCCEx_GetSPICLKFreq+0x23c>)
3401927a:	4298      	cmp	r0, r3
3401927c:	d0f8      	beq.n	34019270 <RCCEx_GetSPICLKFreq+0x80>
3401927e:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34019282:	4298      	cmp	r0, r3
34019284:	f000 8093 	beq.w	340193ae <RCCEx_GetSPICLKFreq+0x1be>
34019288:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
3401928c:	e7ee      	b.n	3401926c <RCCEx_GetSPICLKFreq+0x7c>
3401928e:	4b68      	ldr	r3, [pc, #416]	@ (34019430 <RCCEx_GetSPICLKFreq+0x240>)
34019290:	4298      	cmp	r0, r3
34019292:	d009      	beq.n	340192a8 <RCCEx_GetSPICLKFreq+0xb8>
34019294:	d813      	bhi.n	340192be <RCCEx_GetSPICLKFreq+0xce>
34019296:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401929a:	4298      	cmp	r0, r3
3401929c:	f000 8087 	beq.w	340193ae <RCCEx_GetSPICLKFreq+0x1be>
340192a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340192a4:	4298      	cmp	r0, r3
340192a6:	d1bf      	bne.n	34019228 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
340192a8:	f7fc fa0a 	bl	340156c0 <LL_RCC_IC9_IsEnabled>
340192ac:	2800      	cmp	r0, #0
340192ae:	d0bb      	beq.n	34019228 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
340192b0:	f7fc fa0e 	bl	340156d0 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
340192b4:	4b5b      	ldr	r3, [pc, #364]	@ (34019424 <RCCEx_GetSPICLKFreq+0x234>)
340192b6:	4604      	mov	r4, r0
340192b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340192bc:	e082      	b.n	340193c4 <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
340192be:	4b5d      	ldr	r3, [pc, #372]	@ (34019434 <RCCEx_GetSPICLKFreq+0x244>)
340192c0:	4298      	cmp	r0, r3
340192c2:	d074      	beq.n	340193ae <RCCEx_GetSPICLKFreq+0x1be>
340192c4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
340192c8:	e7ec      	b.n	340192a4 <RCCEx_GetSPICLKFreq+0xb4>
340192ca:	4b5b      	ldr	r3, [pc, #364]	@ (34019438 <RCCEx_GetSPICLKFreq+0x248>)
340192cc:	4298      	cmp	r0, r3
340192ce:	d043      	beq.n	34019358 <RCCEx_GetSPICLKFreq+0x168>
340192d0:	d830      	bhi.n	34019334 <RCCEx_GetSPICLKFreq+0x144>
340192d2:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
340192d6:	4298      	cmp	r0, r3
340192d8:	d0e6      	beq.n	340192a8 <RCCEx_GetSPICLKFreq+0xb8>
340192da:	d808      	bhi.n	340192ee <RCCEx_GetSPICLKFreq+0xfe>
340192dc:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340192e0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340192e4:	429a      	cmp	r2, r3
340192e6:	d079      	beq.n	340193dc <RCCEx_GetSPICLKFreq+0x1ec>
340192e8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
340192ec:	e7da      	b.n	340192a4 <RCCEx_GetSPICLKFreq+0xb4>
340192ee:	4b53      	ldr	r3, [pc, #332]	@ (3401943c <RCCEx_GetSPICLKFreq+0x24c>)
340192f0:	4298      	cmp	r0, r3
340192f2:	d00d      	beq.n	34019310 <RCCEx_GetSPICLKFreq+0x120>
340192f4:	d814      	bhi.n	34019320 <RCCEx_GetSPICLKFreq+0x130>
340192f6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340192fa:	4298      	cmp	r0, r3
340192fc:	d008      	beq.n	34019310 <RCCEx_GetSPICLKFreq+0x120>
340192fe:	d80d      	bhi.n	3401931c <RCCEx_GetSPICLKFreq+0x12c>
34019300:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34019304:	4298      	cmp	r0, r3
34019306:	d003      	beq.n	34019310 <RCCEx_GetSPICLKFreq+0x120>
34019308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401930c:	4298      	cmp	r0, r3
3401930e:	d18b      	bne.n	34019228 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34019310:	f7fc f982 	bl	34015618 <LL_RCC_MSI_IsReady>
34019314:	2800      	cmp	r0, #0
34019316:	d087      	beq.n	34019228 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34019318:	4849      	ldr	r0, [pc, #292]	@ (34019440 <RCCEx_GetSPICLKFreq+0x250>)
  return spi_frequency;
3401931a:	e786      	b.n	3401922a <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401931c:	4b49      	ldr	r3, [pc, #292]	@ (34019444 <RCCEx_GetSPICLKFreq+0x254>)
3401931e:	e7f5      	b.n	3401930c <RCCEx_GetSPICLKFreq+0x11c>
34019320:	4b49      	ldr	r3, [pc, #292]	@ (34019448 <RCCEx_GetSPICLKFreq+0x258>)
34019322:	4298      	cmp	r0, r3
34019324:	d018      	beq.n	34019358 <RCCEx_GetSPICLKFreq+0x168>
34019326:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401932a:	4298      	cmp	r0, r3
3401932c:	d014      	beq.n	34019358 <RCCEx_GetSPICLKFreq+0x168>
3401932e:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34019332:	e7eb      	b.n	3401930c <RCCEx_GetSPICLKFreq+0x11c>
34019334:	4b45      	ldr	r3, [pc, #276]	@ (3401944c <RCCEx_GetSPICLKFreq+0x25c>)
34019336:	4298      	cmp	r0, r3
34019338:	d069      	beq.n	3401940e <RCCEx_GetSPICLKFreq+0x21e>
3401933a:	d81e      	bhi.n	3401937a <RCCEx_GetSPICLKFreq+0x18a>
3401933c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34019340:	4298      	cmp	r0, r3
34019342:	d018      	beq.n	34019376 <RCCEx_GetSPICLKFreq+0x186>
34019344:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34019348:	d811      	bhi.n	3401936e <RCCEx_GetSPICLKFreq+0x17e>
3401934a:	4a41      	ldr	r2, [pc, #260]	@ (34019450 <RCCEx_GetSPICLKFreq+0x260>)
3401934c:	4293      	cmp	r3, r2
3401934e:	d003      	beq.n	34019358 <RCCEx_GetSPICLKFreq+0x168>
34019350:	4b40      	ldr	r3, [pc, #256]	@ (34019454 <RCCEx_GetSPICLKFreq+0x264>)
34019352:	4298      	cmp	r0, r3
34019354:	f47f af68 	bne.w	34019228 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
34019358:	f7fc f956 	bl	34015608 <LL_RCC_HSI_IsReady>
3401935c:	2800      	cmp	r0, #0
3401935e:	f43f af63 	beq.w	34019228 <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019362:	4b30      	ldr	r3, [pc, #192]	@ (34019424 <RCCEx_GetSPICLKFreq+0x234>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019364:	483c      	ldr	r0, [pc, #240]	@ (34019458 <RCCEx_GetSPICLKFreq+0x268>)
34019366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34019368:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401936c:	e014      	b.n	34019398 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401936e:	4a3b      	ldr	r2, [pc, #236]	@ (3401945c <RCCEx_GetSPICLKFreq+0x26c>)
34019370:	4293      	cmp	r3, r2
34019372:	f47f af59 	bne.w	34019228 <RCCEx_GetSPICLKFreq+0x38>
34019376:	483a      	ldr	r0, [pc, #232]	@ (34019460 <RCCEx_GetSPICLKFreq+0x270>)
34019378:	e757      	b.n	3401922a <RCCEx_GetSPICLKFreq+0x3a>
3401937a:	4b3a      	ldr	r3, [pc, #232]	@ (34019464 <RCCEx_GetSPICLKFreq+0x274>)
3401937c:	4298      	cmp	r0, r3
3401937e:	d046      	beq.n	3401940e <RCCEx_GetSPICLKFreq+0x21e>
34019380:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019384:	4298      	cmp	r0, r3
34019386:	e7f4      	b.n	34019372 <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019388:	f7fc f900 	bl	3401558c <HAL_RCC_GetSysClockFreq>
3401938c:	f7fc f9ce 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34019390:	4b24      	ldr	r3, [pc, #144]	@ (34019424 <RCCEx_GetSPICLKFreq+0x234>)
34019392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019394:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34019398:	40d8      	lsrs	r0, r3
      break;
3401939a:	e746      	b.n	3401922a <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401939c:	f7fc f8f6 	bl	3401558c <HAL_RCC_GetSysClockFreq>
340193a0:	f7fc f9c4 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
340193a4:	4b1f      	ldr	r3, [pc, #124]	@ (34019424 <RCCEx_GetSPICLKFreq+0x234>)
340193a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
340193a8:	f3c3 3302 	ubfx	r3, r3, #12, #3
340193ac:	e7f4      	b.n	34019398 <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340193ae:	f7fc f975 	bl	3401569c <LL_RCC_IC8_IsEnabled>
340193b2:	2800      	cmp	r0, #0
340193b4:	f43f af38 	beq.w	34019228 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
340193b8:	f7fc f978 	bl	340156ac <LL_RCC_IC8_GetDivider>
340193bc:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340193be:	4b19      	ldr	r3, [pc, #100]	@ (34019424 <RCCEx_GetSPICLKFreq+0x234>)
340193c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
340193c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
340193c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340193cc:	d01c      	beq.n	34019408 <RCCEx_GetSPICLKFreq+0x218>
340193ce:	d811      	bhi.n	340193f4 <RCCEx_GetSPICLKFreq+0x204>
340193d0:	b9bb      	cbnz	r3, 34019402 <RCCEx_GetSPICLKFreq+0x212>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340193d2:	f7ff f9fd 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
340193d6:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340193da:	e726      	b.n	3401922a <RCCEx_GetSPICLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
340193dc:	f7fc f982 	bl	340156e4 <LL_RCC_IC14_IsEnabled>
340193e0:	2800      	cmp	r0, #0
340193e2:	f43f af21 	beq.w	34019228 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
340193e6:	f7fc f985 	bl	340156f4 <LL_RCC_IC14_GetDivider>
340193ea:	4b0e      	ldr	r3, [pc, #56]	@ (34019424 <RCCEx_GetSPICLKFreq+0x234>)
340193ec:	4604      	mov	r4, r0
340193ee:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340193f2:	e7e7      	b.n	340193c4 <RCCEx_GetSPICLKFreq+0x1d4>
        switch (LL_RCC_IC14_GetSource())
340193f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340193f8:	f47f af16 	bne.w	34019228 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340193fc:	f7ff faa8 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34019400:	e7e9      	b.n	340193d6 <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019402:	f7ff fa25 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
34019406:	e7e6      	b.n	340193d6 <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019408:	f7ff fa62 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
3401940c:	e7e3      	b.n	340193d6 <RCCEx_GetSPICLKFreq+0x1e6>
      if (LL_RCC_HSE_IsReady() != 0U)
3401940e:	f7fc f8f3 	bl	340155f8 <LL_RCC_HSE_IsReady>
34019412:	2800      	cmp	r0, #0
34019414:	f43f af08 	beq.w	34019228 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
34019418:	4813      	ldr	r0, [pc, #76]	@ (34019468 <RCCEx_GetSPICLKFreq+0x278>)
3401941a:	e706      	b.n	3401922a <RCCEx_GetSPICLKFreq+0x3a>
3401941c:	07030820 	.word	0x07030820
34019420:	07001020 	.word	0x07001020
34019424:	56028000 	.word	0x56028000
34019428:	07020820 	.word	0x07020820
3401942c:	07011820 	.word	0x07011820
34019430:	07021420 	.word	0x07021420
34019434:	07021820 	.word	0x07021820
34019438:	07050c20 	.word	0x07050c20
3401943c:	07041420 	.word	0x07041420
34019440:	003d0900 	.word	0x003d0900
34019444:	07041020 	.word	0x07041020
34019448:	07050420 	.word	0x07050420
3401944c:	07061020 	.word	0x07061020
34019450:	07051020 	.word	0x07051020
34019454:	07051820 	.word	0x07051820
34019458:	03d09000 	.word	0x03d09000
3401945c:	07060820 	.word	0x07060820
34019460:	00bb8000 	.word	0x00bb8000
34019464:	07061420 	.word	0x07061420
34019468:	02dc6c00 	.word	0x02dc6c00

3401946c <RCCEx_GetSAICLKFreq>:
{
3401946c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401946e:	f7fc f8f5 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34019472:	4b49      	ldr	r3, [pc, #292]	@ (34019598 <RCCEx_GetSAICLKFreq+0x12c>)
34019474:	4298      	cmp	r0, r3
34019476:	d04a      	beq.n	3401950e <RCCEx_GetSAICLKFreq+0xa2>
34019478:	d839      	bhi.n	340194ee <RCCEx_GetSAICLKFreq+0x82>
3401947a:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
3401947e:	4298      	cmp	r0, r3
34019480:	d021      	beq.n	340194c6 <RCCEx_GetSAICLKFreq+0x5a>
34019482:	d815      	bhi.n	340194b0 <RCCEx_GetSAICLKFreq+0x44>
34019484:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019488:	4298      	cmp	r0, r3
3401948a:	d00d      	beq.n	340194a8 <RCCEx_GetSAICLKFreq+0x3c>
3401948c:	d809      	bhi.n	340194a2 <RCCEx_GetSAICLKFreq+0x36>
3401948e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019492:	4298      	cmp	r0, r3
34019494:	d04e      	beq.n	34019534 <RCCEx_GetSAICLKFreq+0xc8>
34019496:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401949a:	4298      	cmp	r0, r3
3401949c:	d04a      	beq.n	34019534 <RCCEx_GetSAICLKFreq+0xc8>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
3401949e:	2000      	movs	r0, #0
}
340194a0:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
340194a2:	4b3e      	ldr	r3, [pc, #248]	@ (3401959c <RCCEx_GetSAICLKFreq+0x130>)
340194a4:	4298      	cmp	r0, r3
340194a6:	d1fa      	bne.n	3401949e <RCCEx_GetSAICLKFreq+0x32>
}
340194a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340194ac:	f7ff ba90 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
340194b0:	4b3b      	ldr	r3, [pc, #236]	@ (340195a0 <RCCEx_GetSAICLKFreq+0x134>)
340194b2:	4298      	cmp	r0, r3
340194b4:	d04d      	beq.n	34019552 <RCCEx_GetSAICLKFreq+0xe6>
340194b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340194ba:	4298      	cmp	r0, r3
340194bc:	d049      	beq.n	34019552 <RCCEx_GetSAICLKFreq+0xe6>
340194be:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340194c2:	4298      	cmp	r0, r3
340194c4:	d1eb      	bne.n	3401949e <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
340194c6:	f7fc f8d7 	bl	34015678 <LL_RCC_IC7_IsEnabled>
340194ca:	2800      	cmp	r0, #0
340194cc:	d0e7      	beq.n	3401949e <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
340194ce:	f7fc f8db 	bl	34015688 <LL_RCC_IC7_GetDivider>
340194d2:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
340194d4:	4b33      	ldr	r3, [pc, #204]	@ (340195a4 <RCCEx_GetSAICLKFreq+0x138>)
340194d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340194da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
340194de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340194e2:	d047      	beq.n	34019574 <RCCEx_GetSAICLKFreq+0x108>
340194e4:	d840      	bhi.n	34019568 <RCCEx_GetSAICLKFreq+0xfc>
340194e6:	bb7b      	cbnz	r3, 34019548 <RCCEx_GetSAICLKFreq+0xdc>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340194e8:	f7ff f972 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
340194ec:	e02e      	b.n	3401954c <RCCEx_GetSAICLKFreq+0xe0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
340194ee:	4b2e      	ldr	r3, [pc, #184]	@ (340195a8 <RCCEx_GetSAICLKFreq+0x13c>)
340194f0:	4298      	cmp	r0, r3
340194f2:	d01d      	beq.n	34019530 <RCCEx_GetSAICLKFreq+0xc4>
340194f4:	d811      	bhi.n	3401951a <RCCEx_GetSAICLKFreq+0xae>
340194f6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340194fa:	4298      	cmp	r0, r3
340194fc:	d03d      	beq.n	3401957a <RCCEx_GetSAICLKFreq+0x10e>
340194fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019502:	4298      	cmp	r0, r3
34019504:	d039      	beq.n	3401957a <RCCEx_GetSAICLKFreq+0x10e>
34019506:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401950a:	4298      	cmp	r0, r3
3401950c:	d1c7      	bne.n	3401949e <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
3401950e:	f7fc f883 	bl	34015618 <LL_RCC_MSI_IsReady>
34019512:	2800      	cmp	r0, #0
34019514:	d0c3      	beq.n	3401949e <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
34019516:	4825      	ldr	r0, [pc, #148]	@ (340195ac <RCCEx_GetSAICLKFreq+0x140>)
  return sai_frequency;
34019518:	e7c2      	b.n	340194a0 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3401951a:	4b25      	ldr	r3, [pc, #148]	@ (340195b0 <RCCEx_GetSAICLKFreq+0x144>)
3401951c:	4298      	cmp	r0, r3
3401951e:	d036      	beq.n	3401958e <RCCEx_GetSAICLKFreq+0x122>
34019520:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019524:	4298      	cmp	r0, r3
34019526:	d032      	beq.n	3401958e <RCCEx_GetSAICLKFreq+0x122>
34019528:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401952c:	4298      	cmp	r0, r3
3401952e:	d1b6      	bne.n	3401949e <RCCEx_GetSAICLKFreq+0x32>
34019530:	4820      	ldr	r0, [pc, #128]	@ (340195b4 <RCCEx_GetSAICLKFreq+0x148>)
34019532:	e7b5      	b.n	340194a0 <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019534:	f7fc f82a 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34019538:	f7fc f8f8 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
3401953c:	4b19      	ldr	r3, [pc, #100]	@ (340195a4 <RCCEx_GetSAICLKFreq+0x138>)
3401953e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34019540:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019544:	40d8      	lsrs	r0, r3
34019546:	e7ab      	b.n	340194a0 <RCCEx_GetSAICLKFreq+0x34>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019548:	f7ff f982 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
3401954c:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34019550:	e7a6      	b.n	340194a0 <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34019552:	f7fc f8a3 	bl	3401569c <LL_RCC_IC8_IsEnabled>
34019556:	2800      	cmp	r0, #0
34019558:	d0a1      	beq.n	3401949e <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
3401955a:	f7fc f8a7 	bl	340156ac <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3401955e:	4b11      	ldr	r3, [pc, #68]	@ (340195a4 <RCCEx_GetSAICLKFreq+0x138>)
34019560:	4604      	mov	r4, r0
34019562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34019566:	e7b8      	b.n	340194da <RCCEx_GetSAICLKFreq+0x6e>
        switch (LL_RCC_IC8_GetSource())
34019568:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401956c:	d197      	bne.n	3401949e <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401956e:	f7ff f9ef 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34019572:	e7eb      	b.n	3401954c <RCCEx_GetSAICLKFreq+0xe0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019574:	f7ff f9ac 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
34019578:	e7e8      	b.n	3401954c <RCCEx_GetSAICLKFreq+0xe0>
      if (LL_RCC_HSI_IsReady() != 0U)
3401957a:	f7fc f845 	bl	34015608 <LL_RCC_HSI_IsReady>
3401957e:	2800      	cmp	r0, #0
34019580:	d08d      	beq.n	3401949e <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019582:	4b08      	ldr	r3, [pc, #32]	@ (340195a4 <RCCEx_GetSAICLKFreq+0x138>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019584:	480c      	ldr	r0, [pc, #48]	@ (340195b8 <RCCEx_GetSAICLKFreq+0x14c>)
34019586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34019588:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401958c:	e7da      	b.n	34019544 <RCCEx_GetSAICLKFreq+0xd8>
}
3401958e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34019592:	f7ff baa3 	b.w	34018adc <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
34019596:	bf00      	nop
34019598:	07041418 	.word	0x07041418
3401959c:	07011818 	.word	0x07011818
340195a0:	07031418 	.word	0x07031418
340195a4:	56028000 	.word	0x56028000
340195a8:	07061418 	.word	0x07061418
340195ac:	003d0900 	.word	0x003d0900
340195b0:	07071418 	.word	0x07071418
340195b4:	00bb8000 	.word	0x00bb8000
340195b8:	03d09000 	.word	0x03d09000

340195bc <RCCEx_GetI3CCLKFreq>:
{
340195bc:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340195be:	f7fc f84d 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340195c2:	4b3d      	ldr	r3, [pc, #244]	@ (340196b8 <RCCEx_GetI3CCLKFreq+0xfc>)
340195c4:	4298      	cmp	r0, r3
340195c6:	d060      	beq.n	3401968a <RCCEx_GetI3CCLKFreq+0xce>
340195c8:	d830      	bhi.n	3401962c <RCCEx_GetI3CCLKFreq+0x70>
340195ca:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
340195ce:	4298      	cmp	r0, r3
340195d0:	d057      	beq.n	34019682 <RCCEx_GetI3CCLKFreq+0xc6>
340195d2:	d80d      	bhi.n	340195f0 <RCCEx_GetI3CCLKFreq+0x34>
340195d4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340195d8:	4298      	cmp	r0, r3
340195da:	d048      	beq.n	3401966e <RCCEx_GetI3CCLKFreq+0xb2>
340195dc:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
340195e0:	4298      	cmp	r0, r3
340195e2:	d04e      	beq.n	34019682 <RCCEx_GetI3CCLKFreq+0xc6>
340195e4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340195e8:	4298      	cmp	r0, r3
340195ea:	d040      	beq.n	3401966e <RCCEx_GetI3CCLKFreq+0xb2>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
340195ec:	2000      	movs	r0, #0
}
340195ee:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340195f0:	4b32      	ldr	r3, [pc, #200]	@ (340196bc <RCCEx_GetI3CCLKFreq+0x100>)
340195f2:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340195f6:	4298      	cmp	r0, r3
340195f8:	d1f8      	bne.n	340195ec <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340195fa:	4b31      	ldr	r3, [pc, #196]	@ (340196c0 <RCCEx_GetI3CCLKFreq+0x104>)
340195fc:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34019600:	0592      	lsls	r2, r2, #22
34019602:	d5f3      	bpl.n	340195ec <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34019604:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34019608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3401960c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019610:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34019612:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34019616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401961a:	d04a      	beq.n	340196b2 <RCCEx_GetI3CCLKFreq+0xf6>
3401961c:	d840      	bhi.n	340196a0 <RCCEx_GetI3CCLKFreq+0xe4>
3401961e:	2b00      	cmp	r3, #0
34019620:	d144      	bne.n	340196ac <RCCEx_GetI3CCLKFreq+0xf0>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019622:	f7ff f8d5 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
34019626:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401962a:	e7e0      	b.n	340195ee <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3401962c:	4b25      	ldr	r3, [pc, #148]	@ (340196c4 <RCCEx_GetI3CCLKFreq+0x108>)
3401962e:	4298      	cmp	r0, r3
34019630:	d008      	beq.n	34019644 <RCCEx_GetI3CCLKFreq+0x88>
34019632:	d80d      	bhi.n	34019650 <RCCEx_GetI3CCLKFreq+0x94>
34019634:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019638:	4298      	cmp	r0, r3
3401963a:	d026      	beq.n	3401968a <RCCEx_GetI3CCLKFreq+0xce>
3401963c:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34019640:	4298      	cmp	r0, r3
34019642:	d1d3      	bne.n	340195ec <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
34019644:	f7fb ffe8 	bl	34015618 <LL_RCC_MSI_IsReady>
34019648:	2800      	cmp	r0, #0
3401964a:	d0cf      	beq.n	340195ec <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
3401964c:	481e      	ldr	r0, [pc, #120]	@ (340196c8 <RCCEx_GetI3CCLKFreq+0x10c>)
  return i3c_frequency;
3401964e:	e7ce      	b.n	340195ee <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34019650:	4b1e      	ldr	r3, [pc, #120]	@ (340196cc <RCCEx_GetI3CCLKFreq+0x110>)
34019652:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019656:	4298      	cmp	r0, r3
34019658:	d1c8      	bne.n	340195ec <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
3401965a:	f7fb ffd5 	bl	34015608 <LL_RCC_HSI_IsReady>
3401965e:	2800      	cmp	r0, #0
34019660:	d0c4      	beq.n	340195ec <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019662:	4b17      	ldr	r3, [pc, #92]	@ (340196c0 <RCCEx_GetI3CCLKFreq+0x104>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019664:	481a      	ldr	r0, [pc, #104]	@ (340196d0 <RCCEx_GetI3CCLKFreq+0x114>)
34019666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34019668:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401966c:	e007      	b.n	3401967e <RCCEx_GetI3CCLKFreq+0xc2>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401966e:	f7fb ff8d 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34019672:	f7fc f85b 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34019676:	4b12      	ldr	r3, [pc, #72]	@ (340196c0 <RCCEx_GetI3CCLKFreq+0x104>)
34019678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401967a:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401967e:	40d8      	lsrs	r0, r3
34019680:	e7b5      	b.n	340195ee <RCCEx_GetI3CCLKFreq+0x32>
}
34019682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019686:	f7ff b9a3 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401968a:	f7fc f83d 	bl	34015708 <LL_RCC_IC15_IsEnabled>
3401968e:	2800      	cmp	r0, #0
34019690:	d0ac      	beq.n	340195ec <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
34019692:	f7fc f841 	bl	34015718 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34019696:	4b0a      	ldr	r3, [pc, #40]	@ (340196c0 <RCCEx_GetI3CCLKFreq+0x104>)
34019698:	4604      	mov	r4, r0
3401969a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3401969e:	e7b8      	b.n	34019612 <RCCEx_GetI3CCLKFreq+0x56>
        switch (LL_RCC_IC15_GetSource())
340196a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340196a4:	d1a2      	bne.n	340195ec <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340196a6:	f7ff f953 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
340196aa:	e7bc      	b.n	34019626 <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340196ac:	f7ff f8d0 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
340196b0:	e7b9      	b.n	34019626 <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340196b2:	f7ff f90d 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
340196b6:	e7b6      	b.n	34019626 <RCCEx_GetI3CCLKFreq+0x6a>
340196b8:	0703100c 	.word	0x0703100c
340196bc:	0702100c 	.word	0x0702100c
340196c0:	56028000 	.word	0x56028000
340196c4:	0704140c 	.word	0x0704140c
340196c8:	003d0900 	.word	0x003d0900
340196cc:	0705100c 	.word	0x0705100c
340196d0:	03d09000 	.word	0x03d09000

340196d4 <RCCEx_GetSDMMCCLKFreq>:
{
340196d4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340196d6:	f7fb ffc1 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
340196da:	4b2d      	ldr	r3, [pc, #180]	@ (34019790 <RCCEx_GetSDMMCCLKFreq+0xbc>)
340196dc:	4298      	cmp	r0, r3
340196de:	d01d      	beq.n	3401971c <RCCEx_GetSDMMCCLKFreq+0x48>
340196e0:	d813      	bhi.n	3401970a <RCCEx_GetSDMMCCLKFreq+0x36>
340196e2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340196e6:	4298      	cmp	r0, r3
340196e8:	d00b      	beq.n	34019702 <RCCEx_GetSDMMCCLKFreq+0x2e>
340196ea:	d807      	bhi.n	340196fc <RCCEx_GetSDMMCCLKFreq+0x28>
340196ec:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340196f0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340196f4:	4298      	cmp	r0, r3
340196f6:	d02a      	beq.n	3401974e <RCCEx_GetSDMMCCLKFreq+0x7a>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
340196f8:	2000      	movs	r0, #0
}
340196fa:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
340196fc:	4b25      	ldr	r3, [pc, #148]	@ (34019794 <RCCEx_GetSDMMCCLKFreq+0xc0>)
340196fe:	4298      	cmp	r0, r3
34019700:	d1fa      	bne.n	340196f8 <RCCEx_GetSDMMCCLKFreq+0x24>
}
34019702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019706:	f7ff b963 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3401970a:	4b23      	ldr	r3, [pc, #140]	@ (34019798 <RCCEx_GetSDMMCCLKFreq+0xc4>)
3401970c:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34019710:	429a      	cmp	r2, r3
34019712:	d022      	beq.n	3401975a <RCCEx_GetSDMMCCLKFreq+0x86>
34019714:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34019718:	4298      	cmp	r0, r3
3401971a:	d1ed      	bne.n	340196f8 <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3401971c:	4b1f      	ldr	r3, [pc, #124]	@ (3401979c <RCCEx_GetSDMMCCLKFreq+0xc8>)
3401971e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34019722:	f010 0008 	ands.w	r0, r0, #8
34019726:	d0e8      	beq.n	340196fa <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34019728:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3401972c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34019730:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019734:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34019736:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC5_GetSource())
3401973a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401973e:	d023      	beq.n	34019788 <RCCEx_GetSDMMCCLKFreq+0xb4>
34019740:	d819      	bhi.n	34019776 <RCCEx_GetSDMMCCLKFreq+0xa2>
34019742:	b9f3      	cbnz	r3, 34019782 <RCCEx_GetSDMMCCLKFreq+0xae>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019744:	f7ff f844 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34019748:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
3401974c:	e7d5      	b.n	340196fa <RCCEx_GetSDMMCCLKFreq+0x26>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401974e:	f7fb ff1d 	bl	3401558c <HAL_RCC_GetSysClockFreq>
}
34019752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34019756:	f7fb bfe9 	b.w	3401572c <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3401975a:	4b10      	ldr	r3, [pc, #64]	@ (3401979c <RCCEx_GetSDMMCCLKFreq+0xc8>)
3401975c:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34019760:	f010 0010 	ands.w	r0, r0, #16
34019764:	d0c9      	beq.n	340196fa <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34019766:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3401976a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3401976e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019772:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34019774:	e7df      	b.n	34019736 <RCCEx_GetSDMMCCLKFreq+0x62>
        switch (LL_RCC_IC5_GetSource())
34019776:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401977a:	d1bd      	bne.n	340196f8 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401977c:	f7ff f8e8 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34019780:	e7e2      	b.n	34019748 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019782:	f7ff f865 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
34019786:	e7df      	b.n	34019748 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019788:	f7ff f8a2 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
3401978c:	e7dc      	b.n	34019748 <RCCEx_GetSDMMCCLKFreq+0x74>
3401978e:	bf00      	nop
34019790:	0302001c 	.word	0x0302001c
34019794:	0301041c 	.word	0x0301041c
34019798:	0303001c 	.word	0x0303001c
3401979c:	56028000 	.word	0x56028000

340197a0 <RCCEx_GetI2CCLKFreq>:
{
340197a0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340197a2:	f7fb ff5b 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340197a6:	4b50      	ldr	r3, [pc, #320]	@ (340198e8 <RCCEx_GetI2CCLKFreq+0x148>)
340197a8:	4298      	cmp	r0, r3
340197aa:	f000 8085 	beq.w	340198b8 <RCCEx_GetI2CCLKFreq+0x118>
340197ae:	d84b      	bhi.n	34019848 <RCCEx_GetI2CCLKFreq+0xa8>
340197b0:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
340197b4:	4298      	cmp	r0, r3
340197b6:	d01a      	beq.n	340197ee <RCCEx_GetI2CCLKFreq+0x4e>
340197b8:	d81d      	bhi.n	340197f6 <RCCEx_GetI2CCLKFreq+0x56>
340197ba:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340197be:	4298      	cmp	r0, r3
340197c0:	d008      	beq.n	340197d4 <RCCEx_GetI2CCLKFreq+0x34>
340197c2:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
340197c6:	d80f      	bhi.n	340197e8 <RCCEx_GetI2CCLKFreq+0x48>
340197c8:	4a48      	ldr	r2, [pc, #288]	@ (340198ec <RCCEx_GetI2CCLKFreq+0x14c>)
340197ca:	4293      	cmp	r3, r2
340197cc:	d002      	beq.n	340197d4 <RCCEx_GetI2CCLKFreq+0x34>
340197ce:	4b48      	ldr	r3, [pc, #288]	@ (340198f0 <RCCEx_GetI2CCLKFreq+0x150>)
340197d0:	4298      	cmp	r0, r3
340197d2:	d14a      	bne.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340197d4:	f7fb feda 	bl	3401558c <HAL_RCC_GetSysClockFreq>
340197d8:	f7fb ffa8 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340197dc:	4b45      	ldr	r3, [pc, #276]	@ (340198f4 <RCCEx_GetI2CCLKFreq+0x154>)
340197de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340197e0:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340197e4:	40d8      	lsrs	r0, r3
340197e6:	e041      	b.n	3401986c <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340197e8:	4a43      	ldr	r2, [pc, #268]	@ (340198f8 <RCCEx_GetI2CCLKFreq+0x158>)
340197ea:	4293      	cmp	r3, r2
340197ec:	d13d      	bne.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
}
340197ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340197f2:	f7ff b8ed 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340197f6:	4b41      	ldr	r3, [pc, #260]	@ (340198fc <RCCEx_GetI2CCLKFreq+0x15c>)
340197f8:	4298      	cmp	r0, r3
340197fa:	d008      	beq.n	3401980e <RCCEx_GetI2CCLKFreq+0x6e>
340197fc:	d820      	bhi.n	34019840 <RCCEx_GetI2CCLKFreq+0xa0>
340197fe:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34019802:	4298      	cmp	r0, r3
34019804:	d0f3      	beq.n	340197ee <RCCEx_GetI2CCLKFreq+0x4e>
34019806:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
3401980a:	4298      	cmp	r0, r3
3401980c:	d12d      	bne.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3401980e:	4b39      	ldr	r3, [pc, #228]	@ (340198f4 <RCCEx_GetI2CCLKFreq+0x154>)
34019810:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34019814:	0592      	lsls	r2, r2, #22
34019816:	d528      	bpl.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34019818:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3401981c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34019820:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019824:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34019826:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3401982a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401982e:	d057      	beq.n	340198e0 <RCCEx_GetI2CCLKFreq+0x140>
34019830:	d84d      	bhi.n	340198ce <RCCEx_GetI2CCLKFreq+0x12e>
34019832:	2b00      	cmp	r3, #0
34019834:	d151      	bne.n	340198da <RCCEx_GetI2CCLKFreq+0x13a>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019836:	f7fe ffcb 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
3401983a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401983e:	e015      	b.n	3401986c <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34019840:	4b2f      	ldr	r3, [pc, #188]	@ (34019900 <RCCEx_GetI2CCLKFreq+0x160>)
34019842:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019846:	e7e0      	b.n	3401980a <RCCEx_GetI2CCLKFreq+0x6a>
34019848:	4b2e      	ldr	r3, [pc, #184]	@ (34019904 <RCCEx_GetI2CCLKFreq+0x164>)
3401984a:	4298      	cmp	r0, r3
3401984c:	d014      	beq.n	34019878 <RCCEx_GetI2CCLKFreq+0xd8>
3401984e:	d819      	bhi.n	34019884 <RCCEx_GetI2CCLKFreq+0xe4>
34019850:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34019854:	4298      	cmp	r0, r3
34019856:	d02f      	beq.n	340198b8 <RCCEx_GetI2CCLKFreq+0x118>
34019858:	d809      	bhi.n	3401986e <RCCEx_GetI2CCLKFreq+0xce>
3401985a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401985e:	4298      	cmp	r0, r3
34019860:	d02a      	beq.n	340198b8 <RCCEx_GetI2CCLKFreq+0x118>
34019862:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019866:	4298      	cmp	r0, r3
34019868:	d026      	beq.n	340198b8 <RCCEx_GetI2CCLKFreq+0x118>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3401986a:	2000      	movs	r0, #0
}
3401986c:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401986e:	4b26      	ldr	r3, [pc, #152]	@ (34019908 <RCCEx_GetI2CCLKFreq+0x168>)
34019870:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019874:	4298      	cmp	r0, r3
34019876:	d1f8      	bne.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_MSI_IsReady() != 0U)
34019878:	f7fb fece 	bl	34015618 <LL_RCC_MSI_IsReady>
3401987c:	2800      	cmp	r0, #0
3401987e:	d0f4      	beq.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
        i2c_frequency = MSI_VALUE;
34019880:	4822      	ldr	r0, [pc, #136]	@ (3401990c <RCCEx_GetI2CCLKFreq+0x16c>)
  return i2c_frequency;
34019882:	e7f3      	b.n	3401986c <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34019884:	4b22      	ldr	r3, [pc, #136]	@ (34019910 <RCCEx_GetI2CCLKFreq+0x170>)
34019886:	4298      	cmp	r0, r3
34019888:	d008      	beq.n	3401989c <RCCEx_GetI2CCLKFreq+0xfc>
3401988a:	d811      	bhi.n	340198b0 <RCCEx_GetI2CCLKFreq+0x110>
3401988c:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34019890:	4298      	cmp	r0, r3
34019892:	d0f1      	beq.n	34019878 <RCCEx_GetI2CCLKFreq+0xd8>
34019894:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34019898:	4298      	cmp	r0, r3
3401989a:	d1e6      	bne.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_HSI_IsReady() != 0U)
3401989c:	f7fb feb4 	bl	34015608 <LL_RCC_HSI_IsReady>
340198a0:	2800      	cmp	r0, #0
340198a2:	d0e2      	beq.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340198a4:	4b13      	ldr	r3, [pc, #76]	@ (340198f4 <RCCEx_GetI2CCLKFreq+0x154>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340198a6:	481b      	ldr	r0, [pc, #108]	@ (34019914 <RCCEx_GetI2CCLKFreq+0x174>)
340198a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340198aa:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340198ae:	e799      	b.n	340197e4 <RCCEx_GetI2CCLKFreq+0x44>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340198b0:	4b19      	ldr	r3, [pc, #100]	@ (34019918 <RCCEx_GetI2CCLKFreq+0x178>)
340198b2:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340198b6:	e7ef      	b.n	34019898 <RCCEx_GetI2CCLKFreq+0xf8>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340198b8:	f7fb ff26 	bl	34015708 <LL_RCC_IC15_IsEnabled>
340198bc:	2800      	cmp	r0, #0
340198be:	d0d4      	beq.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
        ic_divider = LL_RCC_IC15_GetDivider();
340198c0:	f7fb ff2a 	bl	34015718 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340198c4:	4b0b      	ldr	r3, [pc, #44]	@ (340198f4 <RCCEx_GetI2CCLKFreq+0x154>)
340198c6:	4604      	mov	r4, r0
340198c8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340198cc:	e7ab      	b.n	34019826 <RCCEx_GetI2CCLKFreq+0x86>
        switch (LL_RCC_IC15_GetSource())
340198ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340198d2:	d1ca      	bne.n	3401986a <RCCEx_GetI2CCLKFreq+0xca>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340198d4:	f7ff f83c 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
340198d8:	e7af      	b.n	3401983a <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340198da:	f7fe ffb9 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
340198de:	e7ac      	b.n	3401983a <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340198e0:	f7fe fff6 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
340198e4:	e7a9      	b.n	3401983a <RCCEx_GetI2CCLKFreq+0x9a>
340198e6:	bf00      	nop
340198e8:	0703000c 	.word	0x0703000c
340198ec:	0700000c 	.word	0x0700000c
340198f0:	0700080c 	.word	0x0700080c
340198f4:	56028000 	.word	0x56028000
340198f8:	0701000c 	.word	0x0701000c
340198fc:	0702040c 	.word	0x0702040c
34019900:	0702080c 	.word	0x0702080c
34019904:	0704080c 	.word	0x0704080c
34019908:	0704000c 	.word	0x0704000c
3401990c:	003d0900 	.word	0x003d0900
34019910:	0705040c 	.word	0x0705040c
34019914:	03d09000 	.word	0x03d09000
34019918:	0705080c 	.word	0x0705080c

3401991c <RCCEx_GetLPTIMCLKFreq>:
{
3401991c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401991e:	f7fb fe9d 	bl	3401565c <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34019922:	4b63      	ldr	r3, [pc, #396]	@ (34019ab0 <RCCEx_GetLPTIMCLKFreq+0x194>)
34019924:	4298      	cmp	r0, r3
34019926:	d03a      	beq.n	3401999e <RCCEx_GetLPTIMCLKFreq+0x82>
34019928:	d850      	bhi.n	340199cc <RCCEx_GetLPTIMCLKFreq+0xb0>
3401992a:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
3401992e:	4298      	cmp	r0, r3
34019930:	f000 80a7 	beq.w	34019a82 <RCCEx_GetLPTIMCLKFreq+0x166>
34019934:	d813      	bhi.n	3401995e <RCCEx_GetLPTIMCLKFreq+0x42>
34019936:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3401993a:	4298      	cmp	r0, r3
3401993c:	f000 8097 	beq.w	34019a6e <RCCEx_GetLPTIMCLKFreq+0x152>
34019940:	3b01      	subs	r3, #1
34019942:	4298      	cmp	r0, r3
34019944:	d909      	bls.n	3401995a <RCCEx_GetLPTIMCLKFreq+0x3e>
34019946:	f203 4301 	addw	r3, r3, #1025	@ 0x401
3401994a:	4298      	cmp	r0, r3
3401994c:	f000 8099 	beq.w	34019a82 <RCCEx_GetLPTIMCLKFreq+0x166>
34019950:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019954:	4298      	cmp	r0, r3
34019956:	f000 8094 	beq.w	34019a82 <RCCEx_GetLPTIMCLKFreq+0x166>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
3401995a:	2000      	movs	r0, #0
}
3401995c:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401995e:	4b55      	ldr	r3, [pc, #340]	@ (34019ab4 <RCCEx_GetLPTIMCLKFreq+0x198>)
34019960:	4298      	cmp	r0, r3
34019962:	d015      	beq.n	34019990 <RCCEx_GetLPTIMCLKFreq+0x74>
34019964:	d808      	bhi.n	34019978 <RCCEx_GetLPTIMCLKFreq+0x5c>
34019966:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3401996a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401996e:	429a      	cmp	r2, r3
34019970:	d00e      	beq.n	34019990 <RCCEx_GetLPTIMCLKFreq+0x74>
34019972:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34019976:	e7ed      	b.n	34019954 <RCCEx_GetLPTIMCLKFreq+0x38>
34019978:	4b4f      	ldr	r3, [pc, #316]	@ (34019ab8 <RCCEx_GetLPTIMCLKFreq+0x19c>)
3401997a:	4298      	cmp	r0, r3
3401997c:	d00f      	beq.n	3401999e <RCCEx_GetLPTIMCLKFreq+0x82>
3401997e:	d80b      	bhi.n	34019998 <RCCEx_GetLPTIMCLKFreq+0x7c>
34019980:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34019984:	4298      	cmp	r0, r3
34019986:	d003      	beq.n	34019990 <RCCEx_GetLPTIMCLKFreq+0x74>
34019988:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401998c:	4298      	cmp	r0, r3
3401998e:	d1e4      	bne.n	3401995a <RCCEx_GetLPTIMCLKFreq+0x3e>
}
34019990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019994:	f7ff b81c 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34019998:	4b48      	ldr	r3, [pc, #288]	@ (34019abc <RCCEx_GetLPTIMCLKFreq+0x1a0>)
3401999a:	4298      	cmp	r0, r3
3401999c:	d1dd      	bne.n	3401995a <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401999e:	f7fb feb3 	bl	34015708 <LL_RCC_IC15_IsEnabled>
340199a2:	2800      	cmp	r0, #0
340199a4:	d0d9      	beq.n	3401995a <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
340199a6:	f7fb feb7 	bl	34015718 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340199aa:	4b45      	ldr	r3, [pc, #276]	@ (34019ac0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340199ac:	4604      	mov	r4, r0
340199ae:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340199b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
340199b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340199ba:	d075      	beq.n	34019aa8 <RCCEx_GetLPTIMCLKFreq+0x18c>
340199bc:	d86a      	bhi.n	34019a94 <RCCEx_GetLPTIMCLKFreq+0x178>
340199be:	2b00      	cmp	r3, #0
340199c0:	d16f      	bne.n	34019aa2 <RCCEx_GetLPTIMCLKFreq+0x186>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340199c2:	f7fe ff05 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
340199c6:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340199ca:	e7c7      	b.n	3401995c <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340199cc:	4b3d      	ldr	r3, [pc, #244]	@ (34019ac4 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
340199ce:	4298      	cmp	r0, r3
340199d0:	d034      	beq.n	34019a3c <RCCEx_GetLPTIMCLKFreq+0x120>
340199d2:	d824      	bhi.n	34019a1e <RCCEx_GetLPTIMCLKFreq+0x102>
340199d4:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340199d8:	4298      	cmp	r0, r3
340199da:	d00f      	beq.n	340199fc <RCCEx_GetLPTIMCLKFreq+0xe0>
340199dc:	d815      	bhi.n	34019a0a <RCCEx_GetLPTIMCLKFreq+0xee>
340199de:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340199e2:	4298      	cmp	r0, r3
340199e4:	d00a      	beq.n	340199fc <RCCEx_GetLPTIMCLKFreq+0xe0>
340199e6:	d806      	bhi.n	340199f6 <RCCEx_GetLPTIMCLKFreq+0xda>
340199e8:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340199ec:	4298      	cmp	r0, r3
340199ee:	d0d6      	beq.n	3401999e <RCCEx_GetLPTIMCLKFreq+0x82>
340199f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340199f4:	e7d1      	b.n	3401999a <RCCEx_GetLPTIMCLKFreq+0x7e>
340199f6:	4b34      	ldr	r3, [pc, #208]	@ (34019ac8 <RCCEx_GetLPTIMCLKFreq+0x1ac>)
340199f8:	4298      	cmp	r0, r3
340199fa:	d1ae      	bne.n	3401995a <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
340199fc:	f7fb fe14 	bl	34015628 <LL_RCC_LSE_IsReady>
34019a00:	3800      	subs	r0, #0
34019a02:	bf18      	it	ne
34019a04:	2001      	movne	r0, #1
34019a06:	03c0      	lsls	r0, r0, #15
34019a08:	e7a8      	b.n	3401995c <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34019a0a:	4b30      	ldr	r3, [pc, #192]	@ (34019acc <RCCEx_GetLPTIMCLKFreq+0x1b0>)
34019a0c:	4298      	cmp	r0, r3
34019a0e:	d0f5      	beq.n	340199fc <RCCEx_GetLPTIMCLKFreq+0xe0>
34019a10:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
34019a14:	4298      	cmp	r0, r3
34019a16:	d011      	beq.n	34019a3c <RCCEx_GetLPTIMCLKFreq+0x120>
34019a18:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34019a1c:	e7ec      	b.n	340199f8 <RCCEx_GetLPTIMCLKFreq+0xdc>
34019a1e:	4b2c      	ldr	r3, [pc, #176]	@ (34019ad0 <RCCEx_GetLPTIMCLKFreq+0x1b4>)
34019a20:	4298      	cmp	r0, r3
34019a22:	d015      	beq.n	34019a50 <RCCEx_GetLPTIMCLKFreq+0x134>
34019a24:	d81b      	bhi.n	34019a5e <RCCEx_GetLPTIMCLKFreq+0x142>
34019a26:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34019a2a:	4298      	cmp	r0, r3
34019a2c:	d006      	beq.n	34019a3c <RCCEx_GetLPTIMCLKFreq+0x120>
34019a2e:	d80c      	bhi.n	34019a4a <RCCEx_GetLPTIMCLKFreq+0x12e>
34019a30:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019a34:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34019a38:	4298      	cmp	r0, r3
34019a3a:	d18e      	bne.n	3401995a <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34019a3c:	4b20      	ldr	r3, [pc, #128]	@ (34019ac0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34019a3e:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34019a40:	07db      	lsls	r3, r3, #31
34019a42:	d58a      	bpl.n	3401995a <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
34019a44:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
34019a48:	e788      	b.n	3401995c <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34019a4a:	4b22      	ldr	r3, [pc, #136]	@ (34019ad4 <RCCEx_GetLPTIMCLKFreq+0x1b8>)
34019a4c:	4298      	cmp	r0, r3
34019a4e:	d184      	bne.n	3401995a <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
34019a50:	f7fb fd9c 	bl	3401558c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34019a54:	4b1a      	ldr	r3, [pc, #104]	@ (34019ac0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34019a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019a58:	f3c3 6301 	ubfx	r3, r3, #24, #2
34019a5c:	e00f      	b.n	34019a7e <RCCEx_GetLPTIMCLKFreq+0x162>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34019a5e:	4b1e      	ldr	r3, [pc, #120]	@ (34019ad8 <RCCEx_GetLPTIMCLKFreq+0x1bc>)
34019a60:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34019a64:	429a      	cmp	r2, r3
34019a66:	d0f3      	beq.n	34019a50 <RCCEx_GetLPTIMCLKFreq+0x134>
34019a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34019a6c:	e7ee      	b.n	34019a4c <RCCEx_GetLPTIMCLKFreq+0x130>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019a6e:	f7fb fd8d 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34019a72:	f7fb fe5b 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34019a76:	4b12      	ldr	r3, [pc, #72]	@ (34019ac0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34019a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019a7a:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34019a7e:	40d8      	lsrs	r0, r3
      break;
34019a80:	e76c      	b.n	3401995c <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019a82:	f7fb fd83 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34019a86:	f7fb fe51 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34019a8a:	4b0d      	ldr	r3, [pc, #52]	@ (34019ac0 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34019a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34019a8e:	f3c3 3302 	ubfx	r3, r3, #12, #3
34019a92:	e7f4      	b.n	34019a7e <RCCEx_GetLPTIMCLKFreq+0x162>
        switch (LL_RCC_IC15_GetSource())
34019a94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019a98:	f47f af5f 	bne.w	3401995a <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019a9c:	f7fe ff58 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34019aa0:	e791      	b.n	340199c6 <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019aa2:	f7fe fed5 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
34019aa6:	e78e      	b.n	340199c6 <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019aa8:	f7fe ff12 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
34019aac:	e78b      	b.n	340199c6 <RCCEx_GetLPTIMCLKFreq+0xaa>
34019aae:	bf00      	nop
34019ab0:	0702102c 	.word	0x0702102c
34019ab4:	0701102c 	.word	0x0701102c
34019ab8:	0702082c 	.word	0x0702082c
34019abc:	07020c2c 	.word	0x07020c2c
34019ac0:	56028000 	.word	0x56028000
34019ac4:	07040c2c 	.word	0x07040c2c
34019ac8:	07030c2c 	.word	0x07030c2c
34019acc:	0703182c 	.word	0x0703182c
34019ad0:	07050c2c 	.word	0x07050c2c
34019ad4:	0705082c 	.word	0x0705082c
34019ad8:	0705102c 	.word	0x0705102c

34019adc <HAL_RCCEx_GetPeriphCLKFreq>:
{
34019adc:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
34019ade:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
34019ae2:	430b      	orrs	r3, r1
34019ae4:	f000 8447 	beq.w	3401a376 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
34019ae8:	4bbf      	ldr	r3, [pc, #764]	@ (34019de8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
34019aea:	4298      	cmp	r0, r3
34019aec:	f171 0300 	sbcs.w	r3, r1, #0
34019af0:	f080 80e6 	bcs.w	34019cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
34019af4:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
34019af8:	430b      	orrs	r3, r1
34019afa:	f000 835b 	beq.w	3401a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34019afe:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34019b02:	f171 0300 	sbcs.w	r3, r1, #0
34019b06:	d26a      	bcs.n	34019bde <HAL_RCCEx_GetPeriphCLKFreq+0x102>
34019b08:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
34019b0c:	430b      	orrs	r3, r1
34019b0e:	f000 82b9 	beq.w	3401a084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
34019b12:	f240 2301 	movw	r3, #513	@ 0x201
34019b16:	4298      	cmp	r0, r3
34019b18:	f171 0300 	sbcs.w	r3, r1, #0
34019b1c:	d224      	bcs.n	34019b68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
34019b1e:	2809      	cmp	r0, #9
34019b20:	f171 0300 	sbcs.w	r3, r1, #0
34019b24:	d215      	bcs.n	34019b52 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
34019b26:	ea50 0301 	orrs.w	r3, r0, r1
34019b2a:	d01b      	beq.n	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34019b2c:	3801      	subs	r0, #1
34019b2e:	f141 31ff 	adc.w	r1, r1, #4294967295
34019b32:	2808      	cmp	r0, #8
34019b34:	f171 0100 	sbcs.w	r1, r1, #0
34019b38:	d214      	bcs.n	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34019b3a:	2807      	cmp	r0, #7
34019b3c:	d812      	bhi.n	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34019b3e:	e8df f010 	tbh	[pc, r0, lsl #1]
34019b42:	01a6      	.short	0x01a6
34019b44:	0011020f 	.word	0x0011020f
34019b48:	00110285 	.word	0x00110285
34019b4c:	00110011 	.word	0x00110011
34019b50:	0235      	.short	0x0235
34019b52:	f1a0 0310 	sub.w	r3, r0, #16
34019b56:	430b      	orrs	r3, r1
34019b58:	f000 8242 	beq.w	34019fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
34019b5c:	3820      	subs	r0, #32
34019b5e:	4308      	orrs	r0, r1
34019b60:	f000 8268 	beq.w	3401a034 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34019b64:	2000      	movs	r0, #0
34019b66:	e219      	b.n	34019f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
34019b68:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
34019b6c:	430b      	orrs	r3, r1
34019b6e:	f000 831d 	beq.w	3401a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
34019b72:	f242 0301 	movw	r3, #8193	@ 0x2001
34019b76:	4298      	cmp	r0, r3
34019b78:	f171 0300 	sbcs.w	r3, r1, #0
34019b7c:	d224      	bcs.n	34019bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
34019b7e:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
34019b82:	430b      	orrs	r3, r1
34019b84:	f000 82df 	beq.w	3401a146 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
34019b88:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
34019b8c:	430b      	orrs	r3, r1
34019b8e:	f000 8308 	beq.w	3401a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
34019b92:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
34019b96:	4308      	orrs	r0, r1
34019b98:	d1e4      	bne.n	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34019b9a:	4d94      	ldr	r5, [pc, #592]	@ (34019dec <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34019b9c:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
34019ba0:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34019ba4:	2b02      	cmp	r3, #2
34019ba6:	f000 82c1 	beq.w	3401a12c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
34019baa:	2b03      	cmp	r3, #3
34019bac:	f000 8256 	beq.w	3401a05c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
34019bb0:	2b01      	cmp	r3, #1
34019bb2:	f000 824b 	beq.w	3401a04c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019bb6:	f7fb fce9 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34019bba:	f7fb fdb7 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34019bbe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34019bc0:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019bc4:	40d8      	lsrs	r0, r3
34019bc6:	e1e9      	b.n	34019f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
34019bc8:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
34019bcc:	430b      	orrs	r3, r1
34019bce:	f000 82ef 	beq.w	3401a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
34019bd2:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
34019bd6:	4308      	orrs	r0, r1
34019bd8:	d1c4      	bne.n	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34019bda:	4885      	ldr	r0, [pc, #532]	@ (34019df0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
34019bdc:	e2e2      	b.n	3401a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
  switch (PeriphClk)
34019bde:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
34019be2:	430b      	orrs	r3, r1
34019be4:	f000 82f6 	beq.w	3401a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
34019be8:	4b82      	ldr	r3, [pc, #520]	@ (34019df4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
34019bea:	4298      	cmp	r0, r3
34019bec:	f171 0300 	sbcs.w	r3, r1, #0
34019bf0:	d224      	bcs.n	34019c3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
34019bf2:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
34019bf6:	430b      	orrs	r3, r1
34019bf8:	f000 82e8 	beq.w	3401a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
34019bfc:	4b7e      	ldr	r3, [pc, #504]	@ (34019df8 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
34019bfe:	4298      	cmp	r0, r3
34019c00:	f171 0300 	sbcs.w	r3, r1, #0
34019c04:	d20f      	bcs.n	34019c26 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
34019c06:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
34019c0a:	430b      	orrs	r3, r1
34019c0c:	f000 82d7 	beq.w	3401a1be <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34019c10:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
34019c14:	430b      	orrs	r3, r1
34019c16:	f000 82d7 	beq.w	3401a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34019c1a:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
34019c1e:	4308      	orrs	r0, r1
34019c20:	d1a0      	bne.n	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34019c22:	4876      	ldr	r0, [pc, #472]	@ (34019dfc <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
34019c24:	e2c7      	b.n	3401a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
  switch (PeriphClk)
34019c26:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
34019c2a:	430b      	orrs	r3, r1
34019c2c:	f000 82d0 	beq.w	3401a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
34019c30:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
34019c34:	4308      	orrs	r0, r1
34019c36:	d195      	bne.n	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34019c38:	4871      	ldr	r0, [pc, #452]	@ (34019e00 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
34019c3a:	e2c1      	b.n	3401a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  switch (PeriphClk)
34019c3c:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
34019c40:	430b      	orrs	r3, r1
34019c42:	f000 834d 	beq.w	3401a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
34019c46:	4b6f      	ldr	r3, [pc, #444]	@ (34019e04 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
34019c48:	4298      	cmp	r0, r3
34019c4a:	f171 0300 	sbcs.w	r3, r1, #0
34019c4e:	d228      	bcs.n	34019ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
34019c50:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
34019c54:	430b      	orrs	r3, r1
34019c56:	f000 8302 	beq.w	3401a25e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
34019c5a:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
34019c5e:	4308      	orrs	r0, r1
34019c60:	d180      	bne.n	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34019c62:	4d62      	ldr	r5, [pc, #392]	@ (34019dec <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34019c64:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
34019c68:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34019c6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34019c70:	f000 8195 	beq.w	34019f9e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34019c74:	f200 8319 	bhi.w	3401a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
34019c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34019c7c:	f000 831f 	beq.w	3401a2be <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
34019c80:	f240 81e1 	bls.w	3401a046 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34019c84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34019c88:	f47f af6c 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34019c8c:	f7fb fd06 	bl	3401569c <LL_RCC_IC8_IsEnabled>
34019c90:	2800      	cmp	r0, #0
34019c92:	f43f af67 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
34019c96:	f7fb fd09 	bl	340156ac <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34019c9a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34019c9e:	4604      	mov	r4, r0
34019ca0:	e191      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (PeriphClk)
34019ca2:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
34019ca6:	430b      	orrs	r3, r1
34019ca8:	f000 8344 	beq.w	3401a334 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34019cac:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
34019cb0:	4308      	orrs	r0, r1
34019cb2:	f47f af57 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34019cb6:	4854      	ldr	r0, [pc, #336]	@ (34019e08 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
}
34019cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34019cbc:	f7ff bbd6 	b.w	3401946c <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
34019cc0:	2300      	movs	r3, #0
34019cc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34019cc6:	4291      	cmp	r1, r2
34019cc8:	bf08      	it	eq
34019cca:	4298      	cmpeq	r0, r3
34019ccc:	f000 836f 	beq.w	3401a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
34019cd0:	4283      	cmp	r3, r0
34019cd2:	418a      	sbcs	r2, r1
34019cd4:	d35f      	bcc.n	34019d96 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
34019cd6:	2210      	movs	r2, #16
34019cd8:	4291      	cmp	r1, r2
34019cda:	bf08      	it	eq
34019cdc:	4298      	cmpeq	r0, r3
34019cde:	f000 8359 	beq.w	3401a394 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
34019ce2:	4283      	cmp	r3, r0
34019ce4:	418a      	sbcs	r2, r1
34019ce6:	d329      	bcc.n	34019d3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
34019ce8:	2202      	movs	r2, #2
34019cea:	4291      	cmp	r1, r2
34019cec:	bf08      	it	eq
34019cee:	4298      	cmpeq	r0, r3
34019cf0:	f000 8349 	beq.w	3401a386 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
34019cf4:	4283      	cmp	r3, r0
34019cf6:	418a      	sbcs	r2, r1
34019cf8:	d314      	bcc.n	34019d24 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
34019cfa:	4299      	cmp	r1, r3
34019cfc:	bf08      	it	eq
34019cfe:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
34019d02:	f000 833a 	beq.w	3401a37a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
34019d06:	2901      	cmp	r1, #1
34019d08:	bf08      	it	eq
34019d0a:	4298      	cmpeq	r0, r3
34019d0c:	f000 8337 	beq.w	3401a37e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
34019d10:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
34019d14:	4308      	orrs	r0, r1
34019d16:	f47f af25 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34019d1a:	483c      	ldr	r0, [pc, #240]	@ (34019e0c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
}
34019d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34019d20:	f7ff bcd8 	b.w	340196d4 <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
34019d24:	2904      	cmp	r1, #4
34019d26:	bf08      	it	eq
34019d28:	4298      	cmpeq	r0, r3
34019d2a:	f000 8331 	beq.w	3401a390 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
34019d2e:	2908      	cmp	r1, #8
34019d30:	bf08      	it	eq
34019d32:	4298      	cmpeq	r0, r3
34019d34:	f47f af16 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34019d38:	4835      	ldr	r0, [pc, #212]	@ (34019e10 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
34019d3a:	e325      	b.n	3401a388 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34019d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
34019d40:	4291      	cmp	r1, r2
34019d42:	bf08      	it	eq
34019d44:	4298      	cmpeq	r0, r3
34019d46:	f000 832e 	beq.w	3401a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
34019d4a:	4283      	cmp	r3, r0
34019d4c:	418a      	sbcs	r2, r1
34019d4e:	d311      	bcc.n	34019d74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
34019d50:	2940      	cmp	r1, #64	@ 0x40
34019d52:	bf08      	it	eq
34019d54:	4298      	cmpeq	r0, r3
34019d56:	f000 831f 	beq.w	3401a398 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
34019d5a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
34019d5e:	bf08      	it	eq
34019d60:	4298      	cmpeq	r0, r3
34019d62:	f000 831b 	beq.w	3401a39c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
34019d66:	2920      	cmp	r1, #32
34019d68:	bf08      	it	eq
34019d6a:	2800      	cmpeq	r0, #0
34019d6c:	f47f aefa 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34019d70:	4828      	ldr	r0, [pc, #160]	@ (34019e14 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
34019d72:	e309      	b.n	3401a388 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34019d74:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
34019d78:	bf08      	it	eq
34019d7a:	4298      	cmpeq	r0, r3
34019d7c:	f000 8315 	beq.w	3401a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
34019d80:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
34019d84:	bf08      	it	eq
34019d86:	4298      	cmpeq	r0, r3
34019d88:	f47f aeec 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34019d8c:	4822      	ldr	r0, [pc, #136]	@ (34019e18 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
}
34019d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34019d92:	f7ff b919 	b.w	34018fc8 <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
34019d96:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34019d9a:	4291      	cmp	r1, r2
34019d9c:	bf08      	it	eq
34019d9e:	4298      	cmpeq	r0, r3
34019da0:	f000 830f 	beq.w	3401a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
34019da4:	4283      	cmp	r3, r0
34019da6:	418a      	sbcs	r2, r1
34019da8:	d34b      	bcc.n	34019e42 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
34019daa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34019dae:	4291      	cmp	r1, r2
34019db0:	bf08      	it	eq
34019db2:	4298      	cmpeq	r0, r3
34019db4:	f000 8301 	beq.w	3401a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
34019db8:	4283      	cmp	r3, r0
34019dba:	418a      	sbcs	r2, r1
34019dbc:	d330      	bcc.n	34019e20 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
34019dbe:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
34019dc2:	bf08      	it	eq
34019dc4:	4298      	cmpeq	r0, r3
34019dc6:	f000 82f4 	beq.w	3401a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
34019dca:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
34019dce:	bf08      	it	eq
34019dd0:	4298      	cmpeq	r0, r3
34019dd2:	f000 82f0 	beq.w	3401a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
34019dd6:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
34019dda:	bf08      	it	eq
34019ddc:	2800      	cmpeq	r0, #0
34019dde:	f47f aec1 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34019de2:	480e      	ldr	r0, [pc, #56]	@ (34019e1c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
34019de4:	e2db      	b.n	3401a39e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
34019de6:	bf00      	nop
34019de8:	20000001 	.word	0x20000001
34019dec:	56028000 	.word	0x56028000
34019df0:	07000c0c 	.word	0x07000c0c
34019df4:	00800001 	.word	0x00800001
34019df8:	00100001 	.word	0x00100001
34019dfc:	0700140c 	.word	0x0700140c
34019e00:	0700182c 	.word	0x0700182c
34019e04:	04000001 	.word	0x04000001
34019e08:	07001418 	.word	0x07001418
34019e0c:	0300001c 	.word	0x0300001c
34019e10:	07000c20 	.word	0x07000c20
34019e14:	07001420 	.word	0x07001420
34019e18:	07000c30 	.word	0x07000c30
34019e1c:	07001430 	.word	0x07001430
  switch (PeriphClk)
34019e20:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
34019e24:	bf08      	it	eq
34019e26:	4298      	cmpeq	r0, r3
34019e28:	f000 82c9 	beq.w	3401a3be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
34019e2c:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
34019e30:	bf08      	it	eq
34019e32:	4298      	cmpeq	r0, r3
34019e34:	f47f ae96 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34019e38:	48b4      	ldr	r0, [pc, #720]	@ (3401a10c <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
}
34019e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34019e3e:	f7fe bf8d 	b.w	34018d5c <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
34019e42:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
34019e46:	4291      	cmp	r1, r2
34019e48:	bf08      	it	eq
34019e4a:	4298      	cmpeq	r0, r3
34019e4c:	f000 82c0 	beq.w	3401a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
34019e50:	4283      	cmp	r3, r0
34019e52:	418a      	sbcs	r2, r1
34019e54:	d30d      	bcc.n	34019e72 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
34019e56:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
34019e5a:	bf08      	it	eq
34019e5c:	4298      	cmpeq	r0, r3
34019e5e:	f000 82b5 	beq.w	3401a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
34019e62:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
34019e66:	bf08      	it	eq
34019e68:	4298      	cmpeq	r0, r3
34019e6a:	f47f ae7b 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34019e6e:	48a8      	ldr	r0, [pc, #672]	@ (3401a110 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
34019e70:	e2a8      	b.n	3401a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  switch (PeriphClk)
34019e72:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34019e76:	bf08      	it	eq
34019e78:	4298      	cmpeq	r0, r3
34019e7a:	f000 82ae 	beq.w	3401a3da <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
34019e7e:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
34019e82:	bf08      	it	eq
34019e84:	4298      	cmpeq	r0, r3
34019e86:	f47f ae6d 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34019e8a:	48a2      	ldr	r0, [pc, #648]	@ (3401a114 <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
34019e8c:	e2a1      	b.n	3401a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34019e8e:	4da2      	ldr	r5, [pc, #648]	@ (3401a118 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019e90:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34019e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34019e98:	2b40      	cmp	r3, #64	@ 0x40
34019e9a:	d053      	beq.n	34019f44 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
34019e9c:	d814      	bhi.n	34019ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
34019e9e:	2b20      	cmp	r3, #32
34019ea0:	d025      	beq.n	34019eee <HAL_RCCEx_GetPeriphCLKFreq+0x412>
34019ea2:	d805      	bhi.n	34019eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
34019ea4:	bb03      	cbnz	r3, 34019ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34019ea6:	f7fb fb71 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34019eaa:	f7fb fc3f 	bl	3401572c <RCCEx_GetHCLKFreq>
      break;
34019eae:	e002      	b.n	34019eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34019eb0:	2b30      	cmp	r3, #48	@ 0x30
34019eb2:	d034      	beq.n	34019f1e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34019eb4:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34019eb6:	4b98      	ldr	r3, [pc, #608]	@ (3401a118 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019eb8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34019ebc:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34019ec0:	3301      	adds	r3, #1
34019ec2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
34019ec6:	e069      	b.n	34019f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34019ec8:	2b60      	cmp	r3, #96	@ 0x60
34019eca:	d047      	beq.n	34019f5c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
34019ecc:	2b70      	cmp	r3, #112	@ 0x70
34019ece:	d03f      	beq.n	34019f50 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
34019ed0:	2b50      	cmp	r3, #80	@ 0x50
34019ed2:	d1ef      	bne.n	34019eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34019ed4:	f7fb fb98 	bl	34015608 <LL_RCC_HSI_IsReady>
34019ed8:	2800      	cmp	r0, #0
34019eda:	d0eb      	beq.n	34019eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019edc:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019ede:	488f      	ldr	r0, [pc, #572]	@ (3401a11c <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
34019ee0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
34019ee4:	40d8      	lsrs	r0, r3
      break;
34019ee6:	e7e6      	b.n	34019eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019ee8:	f7fe fd72 	bl	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34019eec:	e7e3      	b.n	34019eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34019eee:	f7fb fbc3 	bl	34015678 <LL_RCC_IC7_IsEnabled>
34019ef2:	2800      	cmp	r0, #0
34019ef4:	d0de      	beq.n	34019eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC7_GetDivider();
34019ef6:	f7fb fbc7 	bl	34015688 <LL_RCC_IC7_GetDivider>
34019efa:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34019efc:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34019f00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34019f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34019f08:	d019      	beq.n	34019f3e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
34019f0a:	d812      	bhi.n	34019f32 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
34019f0c:	b913      	cbnz	r3, 34019f14 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019f0e:	f7fe fc5f 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
34019f12:	e001      	b.n	34019f18 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019f14:	f7fe fc9c 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
34019f18:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34019f1c:	e7cb      	b.n	34019eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34019f1e:	f7fb fbbd 	bl	3401569c <LL_RCC_IC8_IsEnabled>
34019f22:	2800      	cmp	r0, #0
34019f24:	d0c6      	beq.n	34019eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34019f26:	f7fb fbc1 	bl	340156ac <LL_RCC_IC8_GetDivider>
34019f2a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34019f2e:	4604      	mov	r4, r0
34019f30:	e7e6      	b.n	34019f00 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
        switch (LL_RCC_IC8_GetSource())
34019f32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019f36:	d1bd      	bne.n	34019eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019f38:	f7fe fd0a 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
34019f3c:	e7ec      	b.n	34019f18 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019f3e:	f7fe fcc7 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
34019f42:	e7e9      	b.n	34019f18 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
      if (LL_RCC_MSI_IsReady() != 0U)
34019f44:	f7fb fb68 	bl	34015618 <LL_RCC_MSI_IsReady>
34019f48:	2800      	cmp	r0, #0
34019f4a:	d0b3      	beq.n	34019eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        adc_frequency = MSI_VALUE;
34019f4c:	4874      	ldr	r0, [pc, #464]	@ (3401a120 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34019f4e:	e7b2      	b.n	34019eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
34019f50:	f7fb fb1c 	bl	3401558c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34019f54:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34019f56:	f3c3 6301 	ubfx	r3, r3, #24, #2
34019f5a:	e7c3      	b.n	34019ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34019f5c:	4871      	ldr	r0, [pc, #452]	@ (3401a124 <HAL_RCCEx_GetPeriphCLKFreq+0x648>)
34019f5e:	e7aa      	b.n	34019eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34019f60:	4d6d      	ldr	r5, [pc, #436]	@ (3401a118 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019f62:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34019f66:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
34019f6a:	3b01      	subs	r3, #1
34019f6c:	2b06      	cmp	r3, #6
34019f6e:	f200 80f5 	bhi.w	3401a15c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
34019f72:	a201      	add	r2, pc, #4	@ (adr r2, 34019f78 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>)
34019f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34019f78:	3401a04d 	.word	0x3401a04d
34019f7c:	3401a2bf 	.word	0x3401a2bf
34019f80:	34019c8d 	.word	0x34019c8d
34019f84:	34019f9f 	.word	0x34019f9f
34019f88:	3401a00d 	.word	0x3401a00d
34019f8c:	3401a3df 	.word	0x3401a3df
34019f90:	3401a2d5 	.word	0x3401a2d5
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019f94:	f7fe fc5c 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34019f98:	fbb0 f0f4 	udiv	r0, r0, r4
}
34019f9c:	bd38      	pop	{r3, r4, r5, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34019f9e:	f7fb fb3b 	bl	34015618 <LL_RCC_MSI_IsReady>
34019fa2:	2800      	cmp	r0, #0
34019fa4:	f43f adde 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
34019fa8:	485d      	ldr	r0, [pc, #372]	@ (3401a120 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34019faa:	e7f7      	b.n	34019f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34019fac:	4b5a      	ldr	r3, [pc, #360]	@ (3401a118 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019fae:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34019fb2:	0395      	lsls	r5, r2, #14
34019fb4:	f57f add6 	bpl.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34019fb8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34019fbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34019fc0:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019fc4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34019fc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC20_GetSource())
34019fca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34019fce:	f000 81ae 	beq.w	3401a32e <HAL_RCCEx_GetPeriphCLKFreq+0x852>
34019fd2:	f200 81a5 	bhi.w	3401a320 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34019fd6:	2b00      	cmp	r3, #0
34019fd8:	d1dc      	bne.n	34019f94 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019fda:	f7fe fbf9 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
34019fde:	e7db      	b.n	34019f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34019fe0:	4d4d      	ldr	r5, [pc, #308]	@ (3401a118 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019fe2:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34019fe6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34019fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34019fee:	d014      	beq.n	3401a01a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
34019ff0:	d808      	bhi.n	3401a004 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34019ff2:	bb5b      	cbnz	r3, 3401a04c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019ff4:	f7fb faca 	bl	3401558c <HAL_RCC_GetSysClockFreq>
34019ff8:	f7fb fb98 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34019ffc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34019ffe:	f3c3 4302 	ubfx	r3, r3, #16, #3
3401a002:	e5df      	b.n	34019bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
3401a004:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3401a008:	f47f adac 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
3401a00c:	f7fb fafc 	bl	34015608 <LL_RCC_HSI_IsReady>
3401a010:	2800      	cmp	r0, #0
3401a012:	f43f ada7 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401a016:	6cab      	ldr	r3, [r5, #72]	@ 0x48
3401a018:	e136      	b.n	3401a288 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
3401a01a:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3401a01e:	03dc      	lsls	r4, r3, #15
3401a020:	f57f ada0 	bpl.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
3401a024:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
3401a028:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
3401a02c:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a030:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
3401a032:	e7c8      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
3401a034:	4a38      	ldr	r2, [pc, #224]	@ (3401a118 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401a036:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
3401a03a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
3401a03e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3401a042:	d012      	beq.n	3401a06a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
3401a044:	d806      	bhi.n	3401a054 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
3401a046:	2b00      	cmp	r3, #0
3401a048:	f000 8088 	beq.w	3401a15c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
}
3401a04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401a050:	f7fe bcbe 	b.w	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
3401a054:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3401a058:	f47f ad84 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
3401a05c:	f7fb facc 	bl	340155f8 <LL_RCC_HSE_IsReady>
3401a060:	2800      	cmp	r0, #0
3401a062:	f43f ad7f 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
3401a066:	4830      	ldr	r0, [pc, #192]	@ (3401a128 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
3401a068:	e798      	b.n	34019f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
3401a06a:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
3401a06e:	0518      	lsls	r0, r3, #20
3401a070:	f57f ad78 	bpl.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
3401a074:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
3401a078:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
3401a07c:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a080:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
3401a082:	e7a0      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
3401a084:	4a24      	ldr	r2, [pc, #144]	@ (3401a118 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401a086:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
3401a08a:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
3401a08e:	2b02      	cmp	r3, #2
3401a090:	d010      	beq.n	3401a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
3401a092:	2b03      	cmp	r3, #3
3401a094:	d034      	beq.n	3401a100 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
3401a096:	2b01      	cmp	r3, #1
3401a098:	d009      	beq.n	3401a0ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401a09a:	f7fb fa77 	bl	3401558c <HAL_RCC_GetSysClockFreq>
3401a09e:	f7fb fb45 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
3401a0a2:	4b1d      	ldr	r3, [pc, #116]	@ (3401a118 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401a0a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
3401a0a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
3401a0ac:	e708      	b.n	34019ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401a0ae:	f7fe fc8f 	bl	340189d0 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
3401a0b2:	e7f6      	b.n	3401a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
3401a0b4:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
3401a0b8:	04d9      	lsls	r1, r3, #19
3401a0ba:	d516      	bpl.n	3401a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3401a0bc:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
3401a0c0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3401a0c4:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
3401a0c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC13_GetSource())
3401a0cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3401a0d0:	f100 0401 	add.w	r4, r0, #1
3401a0d4:	d00e      	beq.n	3401a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
3401a0d6:	d805      	bhi.n	3401a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
3401a0d8:	b94b      	cbnz	r3, 3401a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401a0da:	f7fe fb79 	bl	340187d0 <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3401a0de:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401a0e2:	e7de      	b.n	3401a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        switch (LL_RCC_IC13_GetSource())
3401a0e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401a0e8:	d007      	beq.n	3401a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
        eth1ptp_frequency = HSE_VALUE;
3401a0ea:	2000      	movs	r0, #0
3401a0ec:	e7d9      	b.n	3401a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401a0ee:	f7fe fbaf 	bl	34018850 <HAL_RCCEx_GetPLL2CLKFreq>
3401a0f2:	e7f4      	b.n	3401a0de <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401a0f4:	f7fe fbec 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
3401a0f8:	e7f1      	b.n	3401a0de <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401a0fa:	f7fe fc29 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
3401a0fe:	e7ee      	b.n	3401a0de <HAL_RCCEx_GetPeriphCLKFreq+0x602>
      if (LL_RCC_HSE_IsReady() != 0U)
3401a100:	f7fb fa7a 	bl	340155f8 <LL_RCC_HSE_IsReady>
3401a104:	2800      	cmp	r0, #0
3401a106:	d0f0      	beq.n	3401a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        eth1ptp_frequency = HSE_VALUE;
3401a108:	4807      	ldr	r0, [pc, #28]	@ (3401a128 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
3401a10a:	e7ca      	b.n	3401a0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
3401a10c:	01001014 	.word	0x01001014
3401a110:	03001414 	.word	0x03001414
3401a114:	03000814 	.word	0x03000814
3401a118:	56028000 	.word	0x56028000
3401a11c:	03d09000 	.word	0x03d09000
3401a120:	003d0900 	.word	0x003d0900
3401a124:	00bb8000 	.word	0x00bb8000
3401a128:	02dc6c00 	.word	0x02dc6c00
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
3401a12c:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3401a130:	035b      	lsls	r3, r3, #13
3401a132:	f57f ad17 	bpl.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3401a136:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
3401a13a:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3401a13e:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a142:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
3401a144:	e73f      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
3401a146:	4ba7      	ldr	r3, [pc, #668]	@ (3401a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401a148:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
3401a14c:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
3401a150:	2a20      	cmp	r2, #32
3401a152:	d019      	beq.n	3401a188 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
3401a154:	d808      	bhi.n	3401a168 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
3401a156:	2a00      	cmp	r2, #0
3401a158:	f47f af78 	bne.w	3401a04c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401a15c:	f7fb fa16 	bl	3401558c <HAL_RCC_GetSysClockFreq>
}
3401a160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401a164:	f7fb bae2 	b.w	3401572c <RCCEx_GetHCLKFreq>
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
3401a168:	2a30      	cmp	r2, #48	@ 0x30
3401a16a:	f47f acfb 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3401a16e:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3401a172:	0714      	lsls	r4, r2, #28
3401a174:	f57f acf6 	bpl.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3401a178:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3401a17c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3401a180:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a184:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3401a186:	e71e      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
3401a188:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3401a18c:	0755      	lsls	r5, r2, #29
3401a18e:	f57f ace9 	bpl.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3401a192:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3401a196:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3401a19a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a19e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3401a1a0:	e711      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
3401a1a2:	4891      	ldr	r0, [pc, #580]	@ (3401a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
}
3401a1a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
3401a1a8:	f7ff bafa 	b.w	340197a0 <RCCEx_GetI2CCLKFreq>
3401a1ac:	488f      	ldr	r0, [pc, #572]	@ (3401a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
3401a1ae:	e7f9      	b.n	3401a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
3401a1b0:	488f      	ldr	r0, [pc, #572]	@ (3401a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
3401a1b2:	e7f7      	b.n	3401a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
3401a1b4:	488f      	ldr	r0, [pc, #572]	@ (3401a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
}
3401a1b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3401a1ba:	f7ff b9ff 	b.w	340195bc <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
3401a1be:	488e      	ldr	r0, [pc, #568]	@ (3401a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
}
3401a1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
3401a1c4:	f7ff bbaa 	b.w	3401991c <RCCEx_GetLPTIMCLKFreq>
3401a1c8:	488c      	ldr	r0, [pc, #560]	@ (3401a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
3401a1ca:	e7f9      	b.n	3401a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
3401a1cc:	488c      	ldr	r0, [pc, #560]	@ (3401a400 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
3401a1ce:	e7f7      	b.n	3401a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
3401a1d0:	488c      	ldr	r0, [pc, #560]	@ (3401a404 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
3401a1d2:	e7f5      	b.n	3401a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
3401a1d4:	4a83      	ldr	r2, [pc, #524]	@ (3401a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401a1d6:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
3401a1da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3401a1de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3401a1e2:	d031      	beq.n	3401a248 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
3401a1e4:	d812      	bhi.n	3401a20c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
3401a1e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401a1ea:	f43f af2f 	beq.w	3401a04c <HAL_RCCEx_GetPeriphCLKFreq+0x570>
3401a1ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401a1f2:	d01d      	beq.n	3401a230 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
3401a1f4:	2b00      	cmp	r3, #0
3401a1f6:	f47f acb5 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401a1fa:	f7fb f9c7 	bl	3401558c <HAL_RCC_GetSysClockFreq>
3401a1fe:	f7fb fa95 	bl	3401572c <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3401a202:	4b78      	ldr	r3, [pc, #480]	@ (3401a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401a204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3401a206:	f3c3 3302 	ubfx	r3, r3, #12, #3
3401a20a:	e4db      	b.n	34019bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3401a20c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3401a210:	f43f aec5 	beq.w	34019f9e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
3401a214:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401a218:	d02f      	beq.n	3401a27a <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
3401a21a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
3401a21e:	f47f aca1 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
3401a222:	f7fb fa01 	bl	34015628 <LL_RCC_LSE_IsReady>
3401a226:	3800      	subs	r0, #0
3401a228:	bf18      	it	ne
3401a22a:	2001      	movne	r0, #1
3401a22c:	03c0      	lsls	r0, r0, #15
3401a22e:	e6b5      	b.n	34019f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3401a230:	f7fb fa46 	bl	340156c0 <LL_RCC_IC9_IsEnabled>
3401a234:	2800      	cmp	r0, #0
3401a236:	f43f ac95 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
3401a23a:	f7fb fa49 	bl	340156d0 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3401a23e:	4b69      	ldr	r3, [pc, #420]	@ (3401a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401a240:	4604      	mov	r4, r0
3401a242:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3401a246:	e6be      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3401a248:	f7fb fa4c 	bl	340156e4 <LL_RCC_IC14_IsEnabled>
3401a24c:	2800      	cmp	r0, #0
3401a24e:	f43f ac89 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
3401a252:	f7fb fa4f 	bl	340156f4 <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
3401a256:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401a25a:	4604      	mov	r4, r0
3401a25c:	e6b3      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
3401a25e:	4d61      	ldr	r5, [pc, #388]	@ (3401a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401a260:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
3401a264:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3401a268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401a26c:	d010      	beq.n	3401a290 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
3401a26e:	f67f aec0 	bls.w	34019ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
3401a272:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3401a276:	f47f ac75 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
3401a27a:	f7fb f9c5 	bl	34015608 <LL_RCC_HSI_IsReady>
3401a27e:	2800      	cmp	r0, #0
3401a280:	f43f ac70 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401a284:	4b57      	ldr	r3, [pc, #348]	@ (3401a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401a286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a288:	485f      	ldr	r0, [pc, #380]	@ (3401a408 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
3401a28a:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401a28e:	e499      	b.n	34019bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
3401a290:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3401a294:	0418      	lsls	r0, r3, #16
3401a296:	f57f ac65 	bpl.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3401a29a:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3401a29e:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3401a2a2:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a2a6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3401a2a8:	e68d      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3401a2aa:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3401a2ae:	f000 8096 	beq.w	3401a3de <HAL_RCCEx_GetPeriphCLKFreq+0x902>
3401a2b2:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3401a2b6:	d00d      	beq.n	3401a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
3401a2b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3401a2bc:	e6a4      	b.n	3401a008 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401a2be:	f7fb f9db 	bl	34015678 <LL_RCC_IC7_IsEnabled>
3401a2c2:	2800      	cmp	r0, #0
3401a2c4:	f43f ac4e 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
3401a2c8:	f7fb f9de 	bl	34015688 <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3401a2cc:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
3401a2d0:	4604      	mov	r4, r0
3401a2d2:	e678      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      adf_frequency = LL_RCC_CALC_TIMG_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetTIMPrescaler());
3401a2d4:	f7fb f95a 	bl	3401558c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
3401a2d8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3401a2da:	f3c3 6301 	ubfx	r3, r3, #24, #2
3401a2de:	e471      	b.n	34019bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
3401a2e0:	4a40      	ldr	r2, [pc, #256]	@ (3401a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401a2e2:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3401a2e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
3401a2ea:	2b20      	cmp	r3, #32
3401a2ec:	d00b      	beq.n	3401a306 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
3401a2ee:	f67f aeaa 	bls.w	3401a046 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
3401a2f2:	2b30      	cmp	r3, #48	@ 0x30
3401a2f4:	f47f ac36 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
3401a2f8:	f7fb f986 	bl	34015608 <LL_RCC_HSI_IsReady>
3401a2fc:	2800      	cmp	r0, #0
3401a2fe:	f43f ac31 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401a302:	6c93      	ldr	r3, [r2, #72]	@ 0x48
3401a304:	e7c0      	b.n	3401a288 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
3401a306:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
3401a30a:	0319      	lsls	r1, r3, #12
3401a30c:	f57f ac2a 	bpl.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3401a310:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3401a314:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3401a318:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a31c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3401a31e:	e652      	b.n	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        switch (LL_RCC_IC20_GetSource())
3401a320:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401a324:	f47f ac1e 	bne.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401a328:	f7fe fb12 	bl	34018950 <HAL_RCCEx_GetPLL4CLKFreq>
3401a32c:	e634      	b.n	34019f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401a32e:	f7fe facf 	bl	340188d0 <HAL_RCCEx_GetPLL3CLKFreq>
3401a332:	e631      	b.n	34019f98 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3401a334:	4a2b      	ldr	r2, [pc, #172]	@ (3401a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401a336:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3401a33a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
3401a33e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401a342:	d005      	beq.n	3401a350 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
3401a344:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3401a348:	d009      	beq.n	3401a35e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
3401a34a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401a34e:	e766      	b.n	3401a21e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3401a350:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
3401a352:	07db      	lsls	r3, r3, #31
3401a354:	f57f ac06 	bpl.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
3401a358:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
3401a35c:	e61e      	b.n	34019f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_HSE_IsReady() != 0U)
3401a35e:	f7fb f94b 	bl	340155f8 <LL_RCC_HSE_IsReady>
3401a362:	2800      	cmp	r0, #0
3401a364:	f43f abfe 	beq.w	34019b64 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3401a368:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
3401a36c:	4827      	ldr	r0, [pc, #156]	@ (3401a40c <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3401a36e:	f3c3 3305 	ubfx	r3, r3, #12, #6
3401a372:	3301      	adds	r3, #1
3401a374:	e5a5      	b.n	34019ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
3401a376:	4826      	ldr	r0, [pc, #152]	@ (3401a410 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
3401a378:	e49e      	b.n	34019cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3401a37a:	4826      	ldr	r0, [pc, #152]	@ (3401a414 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
3401a37c:	e4ce      	b.n	34019d1c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
3401a37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3401a382:	f7fe bbab 	b.w	34018adc <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
3401a386:	4824      	ldr	r0, [pc, #144]	@ (3401a418 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
}
3401a388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
3401a38c:	f7fe bf30 	b.w	340191f0 <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
3401a390:	4822      	ldr	r0, [pc, #136]	@ (3401a41c <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
3401a392:	e7f9      	b.n	3401a388 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
3401a394:	4822      	ldr	r0, [pc, #136]	@ (3401a420 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
3401a396:	e7f7      	b.n	3401a388 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
3401a398:	4822      	ldr	r0, [pc, #136]	@ (3401a424 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
3401a39a:	e7f5      	b.n	3401a388 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
3401a39c:	4822      	ldr	r0, [pc, #136]	@ (3401a428 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
}
3401a39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
3401a3a2:	f7fe bd0d 	b.w	34018dc0 <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
3401a3a6:	4821      	ldr	r0, [pc, #132]	@ (3401a42c <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
3401a3a8:	e7f9      	b.n	3401a39e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
3401a3aa:	4821      	ldr	r0, [pc, #132]	@ (3401a430 <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
3401a3ac:	e7f7      	b.n	3401a39e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
3401a3ae:	4821      	ldr	r0, [pc, #132]	@ (3401a434 <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
3401a3b0:	e4ed      	b.n	34019d8e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
3401a3b2:	4821      	ldr	r0, [pc, #132]	@ (3401a438 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
3401a3b4:	e4eb      	b.n	34019d8e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
3401a3b6:	4821      	ldr	r0, [pc, #132]	@ (3401a43c <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
3401a3b8:	e4e9      	b.n	34019d8e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3401a3ba:	4821      	ldr	r0, [pc, #132]	@ (3401a440 <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
3401a3bc:	e4e7      	b.n	34019d8e <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
3401a3be:	4821      	ldr	r0, [pc, #132]	@ (3401a444 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
3401a3c0:	e7ed      	b.n	3401a39e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3401a3c2:	4821      	ldr	r0, [pc, #132]	@ (3401a448 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
}
3401a3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3401a3c8:	f7fe bc62 	b.w	34018c90 <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3401a3cc:	481f      	ldr	r0, [pc, #124]	@ (3401a44c <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
3401a3ce:	e534      	b.n	34019e3a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
3401a3d0:	481f      	ldr	r0, [pc, #124]	@ (3401a450 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
}
3401a3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3401a3d6:	f7fe bbe1 	b.w	34018b9c <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
3401a3da:	481e      	ldr	r0, [pc, #120]	@ (3401a454 <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
3401a3dc:	e7f9      	b.n	3401a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3401a3de:	481e      	ldr	r0, [pc, #120]	@ (3401a458 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
3401a3e0:	e5dc      	b.n	34019f9c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
3401a3e2:	bf00      	nop
3401a3e4:	56028000 	.word	0x56028000
3401a3e8:	0700000c 	.word	0x0700000c
3401a3ec:	0700040c 	.word	0x0700040c
3401a3f0:	0700080c 	.word	0x0700080c
3401a3f4:	0700100c 	.word	0x0700100c
3401a3f8:	0700082c 	.word	0x0700082c
3401a3fc:	07000c2c 	.word	0x07000c2c
3401a400:	0700102c 	.word	0x0700102c
3401a404:	0700142c 	.word	0x0700142c
3401a408:	03d09000 	.word	0x03d09000
3401a40c:	02dc6c00 	.word	0x02dc6c00
3401a410:	07001818 	.word	0x07001818
3401a414:	0300041c 	.word	0x0300041c
3401a418:	07000420 	.word	0x07000420
3401a41c:	07000820 	.word	0x07000820
3401a420:	07001020 	.word	0x07001020
3401a424:	07001820 	.word	0x07001820
3401a428:	07000030 	.word	0x07000030
3401a42c:	07000430 	.word	0x07000430
3401a430:	07000830 	.word	0x07000830
3401a434:	07001030 	.word	0x07001030
3401a438:	07001830 	.word	0x07001830
3401a43c:	07001c30 	.word	0x07001c30
3401a440:	07000034 	.word	0x07000034
3401a444:	07000434 	.word	0x07000434
3401a448:	03000c14 	.word	0x03000c14
3401a44c:	01001814 	.word	0x01001814
3401a450:	03000014 	.word	0x03000014
3401a454:	03000414 	.word	0x03000414
3401a458:	00bb8000 	.word	0x00bb8000

3401a45c <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
3401a45c:	b538      	push	{r3, r4, r5, lr}
3401a45e:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
3401a460:	460d      	mov	r5, r1
3401a462:	b921      	cbnz	r1, 3401a46e <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
3401a464:	f240 1111 	movw	r1, #273	@ 0x111
3401a468:	4825      	ldr	r0, [pc, #148]	@ (3401a500 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a46a:	f005 f8c9 	bl	3401f600 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
3401a46e:	2c0c      	cmp	r4, #12
3401a470:	d904      	bls.n	3401a47c <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
3401a472:	f44f 7189 	mov.w	r1, #274	@ 0x112
3401a476:	4822      	ldr	r0, [pc, #136]	@ (3401a500 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a478:	f005 f8c2 	bl	3401f600 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3401a47c:	682b      	ldr	r3, [r5, #0]
3401a47e:	2b20      	cmp	r3, #32
3401a480:	d838      	bhi.n	3401a4f4 <HAL_RIF_RIMC_ConfigMasterAttributes+0x98>
3401a482:	2b03      	cmp	r3, #3
3401a484:	d82a      	bhi.n	3401a4dc <HAL_RIF_RIMC_ConfigMasterAttributes+0x80>
3401a486:	3b01      	subs	r3, #1
3401a488:	2b01      	cmp	r3, #1
3401a48a:	d82d      	bhi.n	3401a4e8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
3401a48c:	682b      	ldr	r3, [r5, #0]
3401a48e:	2b80      	cmp	r3, #128	@ 0x80
3401a490:	d001      	beq.n	3401a496 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3a>
3401a492:	2bff      	cmp	r3, #255	@ 0xff
3401a494:	d904      	bls.n	3401a4a0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x44>
3401a496:	f44f 718a 	mov.w	r1, #276	@ 0x114
3401a49a:	4819      	ldr	r0, [pc, #100]	@ (3401a500 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a49c:	f005 f8b0 	bl	3401f600 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
3401a4a0:	686b      	ldr	r3, [r5, #4]
3401a4a2:	2b03      	cmp	r3, #3
3401a4a4:	d904      	bls.n	3401a4b0 <HAL_RIF_RIMC_ConfigMasterAttributes+0x54>
3401a4a6:	f240 1115 	movw	r1, #277	@ 0x115
3401a4aa:	4815      	ldr	r0, [pc, #84]	@ (3401a500 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a4ac:	f005 f8a8 	bl	3401f600 <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3401a4b0:	682b      	ldr	r3, [r5, #0]
3401a4b2:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
3401a4b6:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3401a4ba:	00a0      	lsls	r0, r4, #2
3401a4bc:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3401a4c0:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3401a4c4:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3401a4c8:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3401a4ca:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3401a4ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3401a4d2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3401a4d6:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
3401a4da:	bd38      	pop	{r3, r4, r5, pc}
3401a4dc:	4a09      	ldr	r2, [pc, #36]	@ (3401a504 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa8>)
3401a4de:	3b04      	subs	r3, #4
3401a4e0:	fa22 f303 	lsr.w	r3, r2, r3
3401a4e4:	07db      	lsls	r3, r3, #31
3401a4e6:	d4d1      	bmi.n	3401a48c <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3401a4e8:	f240 1113 	movw	r1, #275	@ 0x113
3401a4ec:	4804      	ldr	r0, [pc, #16]	@ (3401a500 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a4ee:	f005 f887 	bl	3401f600 <assert_failed>
3401a4f2:	e7cb      	b.n	3401a48c <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3401a4f4:	2b40      	cmp	r3, #64	@ 0x40
3401a4f6:	d0c9      	beq.n	3401a48c <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3401a4f8:	2b80      	cmp	r3, #128	@ 0x80
3401a4fa:	d1f5      	bne.n	3401a4e8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
3401a4fc:	e7c6      	b.n	3401a48c <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3401a4fe:	bf00      	nop
3401a500:	3402f7b1 	.word	0x3402f7b1
3401a504:	10001011 	.word	0x10001011

3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3401a508:	4b38      	ldr	r3, [pc, #224]	@ (3401a5ec <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
3401a50a:	b537      	push	{r0, r1, r2, r4, r5, lr}
3401a50c:	4298      	cmp	r0, r3
3401a50e:	4604      	mov	r4, r0
3401a510:	460d      	mov	r5, r1
3401a512:	d85c      	bhi.n	3401a5ce <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
3401a514:	3b1e      	subs	r3, #30
3401a516:	4298      	cmp	r0, r3
3401a518:	d83b      	bhi.n	3401a592 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
3401a51a:	4b35      	ldr	r3, [pc, #212]	@ (3401a5f0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
3401a51c:	4298      	cmp	r0, r3
3401a51e:	d84b      	bhi.n	3401a5b8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
3401a520:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
3401a524:	d23a      	bcs.n	3401a59c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
3401a526:	4b33      	ldr	r3, [pc, #204]	@ (3401a5f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
3401a528:	4298      	cmp	r0, r3
3401a52a:	d840      	bhi.n	3401a5ae <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
3401a52c:	1fc2      	subs	r2, r0, #7
3401a52e:	3b22      	subs	r3, #34	@ 0x22
3401a530:	429a      	cmp	r2, r3
3401a532:	d937      	bls.n	3401a5a4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
3401a534:	2d03      	cmp	r5, #3
3401a536:	d904      	bls.n	3401a542 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
3401a538:	f44f 71ba 	mov.w	r1, #372	@ 0x174
3401a53c:	482e      	ldr	r0, [pc, #184]	@ (3401a5f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3401a53e:	f005 f85f 	bl	3401f600 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1UL << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401a542:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401a544:	0f20      	lsrs	r0, r4, #28
3401a546:	0080      	lsls	r0, r0, #2
3401a548:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3401a54c:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3401a550:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1UL << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401a552:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401a556:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1UL << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401a558:	9b01      	ldr	r3, [sp, #4]
3401a55a:	40a2      	lsls	r2, r4
3401a55c:	ea23 0302 	bic.w	r3, r3, r2
3401a560:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401a562:	9901      	ldr	r1, [sp, #4]
3401a564:	f005 0301 	and.w	r3, r5, #1
3401a568:	40a3      	lsls	r3, r4
3401a56a:	430b      	orrs	r3, r1
3401a56c:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401a56e:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1UL << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401a570:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401a574:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401a576:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401a578:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401a57a:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1UL << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401a57c:	9b01      	ldr	r3, [sp, #4]
3401a57e:	ea23 0302 	bic.w	r3, r3, r2
3401a582:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401a584:	9b01      	ldr	r3, [sp, #4]
3401a586:	4319      	orrs	r1, r3
3401a588:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401a58a:	9b01      	ldr	r3, [sp, #4]
3401a58c:	6303      	str	r3, [r0, #48]	@ 0x30
}
3401a58e:	b003      	add	sp, #12
3401a590:	bd30      	pop	{r4, r5, pc}
3401a592:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
3401a596:	4b19      	ldr	r3, [pc, #100]	@ (3401a5fc <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
3401a598:	3a02      	subs	r2, #2
3401a59a:	e01d      	b.n	3401a5d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3401a59c:	4b18      	ldr	r3, [pc, #96]	@ (3401a600 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
3401a59e:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
3401a5a2:	e019      	b.n	3401a5d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3401a5a4:	f1a0 0308 	sub.w	r3, r0, #8
3401a5a8:	2b17      	cmp	r3, #23
3401a5aa:	d9c3      	bls.n	3401a534 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401a5ac:	e017      	b.n	3401a5de <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401a5ae:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
3401a5b2:	3b1c      	subs	r3, #28
3401a5b4:	2b02      	cmp	r3, #2
3401a5b6:	e7f8      	b.n	3401a5aa <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
3401a5b8:	4b12      	ldr	r3, [pc, #72]	@ (3401a604 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
3401a5ba:	4298      	cmp	r0, r3
3401a5bc:	d803      	bhi.n	3401a5c6 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
3401a5be:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3401a5c2:	d2b7      	bcs.n	3401a534 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401a5c4:	e00b      	b.n	3401a5de <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401a5c6:	4b10      	ldr	r3, [pc, #64]	@ (3401a608 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
3401a5c8:	4298      	cmp	r0, r3
3401a5ca:	d0b3      	beq.n	3401a534 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401a5cc:	e007      	b.n	3401a5de <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401a5ce:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
3401a5d2:	2a1e      	cmp	r2, #30
3401a5d4:	d803      	bhi.n	3401a5de <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401a5d6:	4b0d      	ldr	r3, [pc, #52]	@ (3401a60c <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
3401a5d8:	40d3      	lsrs	r3, r2
3401a5da:	07db      	lsls	r3, r3, #31
3401a5dc:	d4aa      	bmi.n	3401a534 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3401a5de:	f240 1173 	movw	r1, #371	@ 0x173
3401a5e2:	4805      	ldr	r0, [pc, #20]	@ (3401a5f8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3401a5e4:	f005 f80c 	bl	3401f600 <assert_failed>
3401a5e8:	e7a4      	b.n	3401a534 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401a5ea:	bf00      	nop
3401a5ec:	4000001f 	.word	0x4000001f
3401a5f0:	2000001e 	.word	0x2000001e
3401a5f4:	1000001a 	.word	0x1000001a
3401a5f8:	3402f7b1 	.word	0x3402f7b1
3401a5fc:	2e838c0b 	.word	0x2e838c0b
3401a600:	77dff03b 	.word	0x77dff03b
3401a604:	30000008 	.word	0x30000008
3401a608:	3000000a 	.word	0x3000000a
3401a60c:	49deef7f 	.word	0x49deef7f

3401a610 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
3401a610:	4770      	bx	lr
	...

3401a614 <HAL_TIM_Base_Start>:
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401a614:	6803      	ldr	r3, [r0, #0]
{
3401a616:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401a618:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
{
3401a61c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401a61e:	d07d      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a620:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3401a624:	d07a      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a626:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401a62a:	d077      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a62c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401a630:	d074      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a632:	4a65      	ldr	r2, [pc, #404]	@ (3401a7c8 <HAL_TIM_Base_Start+0x1b4>)
3401a634:	4293      	cmp	r3, r2
3401a636:	d071      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a638:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a63c:	4293      	cmp	r3, r2
3401a63e:	d06d      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a640:	4a62      	ldr	r2, [pc, #392]	@ (3401a7cc <HAL_TIM_Base_Start+0x1b8>)
3401a642:	4293      	cmp	r3, r2
3401a644:	d06a      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a646:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a64a:	4293      	cmp	r3, r2
3401a64c:	d066      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a64e:	4a60      	ldr	r2, [pc, #384]	@ (3401a7d0 <HAL_TIM_Base_Start+0x1bc>)
3401a650:	4293      	cmp	r3, r2
3401a652:	d063      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a654:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a658:	4293      	cmp	r3, r2
3401a65a:	d05f      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a65c:	4a5d      	ldr	r2, [pc, #372]	@ (3401a7d4 <HAL_TIM_Base_Start+0x1c0>)
3401a65e:	4293      	cmp	r3, r2
3401a660:	d05c      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a662:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a666:	4293      	cmp	r3, r2
3401a668:	d058      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a66a:	4a5b      	ldr	r2, [pc, #364]	@ (3401a7d8 <HAL_TIM_Base_Start+0x1c4>)
3401a66c:	4293      	cmp	r3, r2
3401a66e:	d055      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a670:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a674:	4293      	cmp	r3, r2
3401a676:	d051      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a678:	4a58      	ldr	r2, [pc, #352]	@ (3401a7dc <HAL_TIM_Base_Start+0x1c8>)
3401a67a:	4293      	cmp	r3, r2
3401a67c:	d04e      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a67e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a682:	4293      	cmp	r3, r2
3401a684:	d04a      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a686:	4a56      	ldr	r2, [pc, #344]	@ (3401a7e0 <HAL_TIM_Base_Start+0x1cc>)
3401a688:	4293      	cmp	r3, r2
3401a68a:	d047      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a68c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a690:	4293      	cmp	r3, r2
3401a692:	d043      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a694:	4a53      	ldr	r2, [pc, #332]	@ (3401a7e4 <HAL_TIM_Base_Start+0x1d0>)
3401a696:	4293      	cmp	r3, r2
3401a698:	d040      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a69a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a69e:	4293      	cmp	r3, r2
3401a6a0:	d03c      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6a2:	4a51      	ldr	r2, [pc, #324]	@ (3401a7e8 <HAL_TIM_Base_Start+0x1d4>)
3401a6a4:	4293      	cmp	r3, r2
3401a6a6:	d039      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6a8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a6ac:	4293      	cmp	r3, r2
3401a6ae:	d035      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6b0:	4a4e      	ldr	r2, [pc, #312]	@ (3401a7ec <HAL_TIM_Base_Start+0x1d8>)
3401a6b2:	4293      	cmp	r3, r2
3401a6b4:	d032      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6b6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a6ba:	4293      	cmp	r3, r2
3401a6bc:	d02e      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6be:	4a4c      	ldr	r2, [pc, #304]	@ (3401a7f0 <HAL_TIM_Base_Start+0x1dc>)
3401a6c0:	4293      	cmp	r3, r2
3401a6c2:	d02b      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6c4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a6c8:	4293      	cmp	r3, r2
3401a6ca:	d027      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6cc:	4a49      	ldr	r2, [pc, #292]	@ (3401a7f4 <HAL_TIM_Base_Start+0x1e0>)
3401a6ce:	4293      	cmp	r3, r2
3401a6d0:	d024      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6d2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a6d6:	4293      	cmp	r3, r2
3401a6d8:	d020      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6da:	4a47      	ldr	r2, [pc, #284]	@ (3401a7f8 <HAL_TIM_Base_Start+0x1e4>)
3401a6dc:	4293      	cmp	r3, r2
3401a6de:	d01d      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6e0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a6e4:	4293      	cmp	r3, r2
3401a6e6:	d019      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6e8:	4a44      	ldr	r2, [pc, #272]	@ (3401a7fc <HAL_TIM_Base_Start+0x1e8>)
3401a6ea:	4293      	cmp	r3, r2
3401a6ec:	d016      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6ee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a6f2:	4293      	cmp	r3, r2
3401a6f4:	d012      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6f6:	4a42      	ldr	r2, [pc, #264]	@ (3401a800 <HAL_TIM_Base_Start+0x1ec>)
3401a6f8:	4293      	cmp	r3, r2
3401a6fa:	d00f      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a6fc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a700:	4293      	cmp	r3, r2
3401a702:	d00b      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a704:	4a3f      	ldr	r2, [pc, #252]	@ (3401a804 <HAL_TIM_Base_Start+0x1f0>)
3401a706:	4293      	cmp	r3, r2
3401a708:	d008      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a70a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a70e:	4293      	cmp	r3, r2
3401a710:	d004      	beq.n	3401a71c <HAL_TIM_Base_Start+0x108>
3401a712:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
3401a716:	483c      	ldr	r0, [pc, #240]	@ (3401a808 <HAL_TIM_Base_Start+0x1f4>)
3401a718:	f004 ff72 	bl	3401f600 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
3401a71c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
3401a720:	2b01      	cmp	r3, #1
3401a722:	d14e      	bne.n	3401a7c2 <HAL_TIM_Base_Start+0x1ae>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
3401a724:	2302      	movs	r3, #2
3401a726:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
3401a72a:	6823      	ldr	r3, [r4, #0]
3401a72c:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3401a730:	d039      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a732:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3401a736:	d036      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401a73c:	d033      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401a742:	d030      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a744:	4a20      	ldr	r2, [pc, #128]	@ (3401a7c8 <HAL_TIM_Base_Start+0x1b4>)
3401a746:	4293      	cmp	r3, r2
3401a748:	d02d      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a74a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a74e:	4293      	cmp	r3, r2
3401a750:	d029      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a752:	4a1e      	ldr	r2, [pc, #120]	@ (3401a7cc <HAL_TIM_Base_Start+0x1b8>)
3401a754:	4293      	cmp	r3, r2
3401a756:	d026      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a758:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a75c:	4293      	cmp	r3, r2
3401a75e:	d022      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a760:	4a1b      	ldr	r2, [pc, #108]	@ (3401a7d0 <HAL_TIM_Base_Start+0x1bc>)
3401a762:	4293      	cmp	r3, r2
3401a764:	d01f      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a766:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a76a:	4293      	cmp	r3, r2
3401a76c:	d01b      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a76e:	4a1b      	ldr	r2, [pc, #108]	@ (3401a7dc <HAL_TIM_Base_Start+0x1c8>)
3401a770:	4293      	cmp	r3, r2
3401a772:	d018      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a774:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a778:	4293      	cmp	r3, r2
3401a77a:	d014      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a77c:	4a18      	ldr	r2, [pc, #96]	@ (3401a7e0 <HAL_TIM_Base_Start+0x1cc>)
3401a77e:	4293      	cmp	r3, r2
3401a780:	d011      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a782:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a786:	4293      	cmp	r3, r2
3401a788:	d00d      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a78a:	4a18      	ldr	r2, [pc, #96]	@ (3401a7ec <HAL_TIM_Base_Start+0x1d8>)
3401a78c:	4293      	cmp	r3, r2
3401a78e:	d00a      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a790:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a794:	4293      	cmp	r3, r2
3401a796:	d006      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a798:	4a17      	ldr	r2, [pc, #92]	@ (3401a7f8 <HAL_TIM_Base_Start+0x1e4>)
3401a79a:	4293      	cmp	r3, r2
3401a79c:	d003      	beq.n	3401a7a6 <HAL_TIM_Base_Start+0x192>
3401a79e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a7a2:	4293      	cmp	r3, r2
3401a7a4:	d107      	bne.n	3401a7b6 <HAL_TIM_Base_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
3401a7a6:	6899      	ldr	r1, [r3, #8]
3401a7a8:	4a18      	ldr	r2, [pc, #96]	@ (3401a80c <HAL_TIM_Base_Start+0x1f8>)
3401a7aa:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
3401a7ac:	2a06      	cmp	r2, #6
3401a7ae:	d006      	beq.n	3401a7be <HAL_TIM_Base_Start+0x1aa>
3401a7b0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3401a7b4:	d003      	beq.n	3401a7be <HAL_TIM_Base_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
3401a7b6:	681a      	ldr	r2, [r3, #0]
3401a7b8:	f042 0201 	orr.w	r2, r2, #1
3401a7bc:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
3401a7be:	2000      	movs	r0, #0
}
3401a7c0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3401a7c2:	2001      	movs	r0, #1
3401a7c4:	e7fc      	b.n	3401a7c0 <HAL_TIM_Base_Start+0x1ac>
3401a7c6:	bf00      	nop
3401a7c8:	50000400 	.word	0x50000400
3401a7cc:	50000800 	.word	0x50000800
3401a7d0:	50000c00 	.word	0x50000c00
3401a7d4:	50001000 	.word	0x50001000
3401a7d8:	50001400 	.word	0x50001400
3401a7dc:	52000400 	.word	0x52000400
3401a7e0:	52004c00 	.word	0x52004c00
3401a7e4:	50003000 	.word	0x50003000
3401a7e8:	50003400 	.word	0x50003400
3401a7ec:	50001800 	.word	0x50001800
3401a7f0:	50001c00 	.word	0x50001c00
3401a7f4:	50002000 	.word	0x50002000
3401a7f8:	52004000 	.word	0x52004000
3401a7fc:	52004400 	.word	0x52004400
3401a800:	52004800 	.word	0x52004800
3401a804:	52003c00 	.word	0x52003c00
3401a808:	3402f825 	.word	0x3402f825
3401a80c:	00010007 	.word	0x00010007

3401a810 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
3401a810:	f1b0 4fa4 	cmp.w	r0, #1375731712	@ 0x52000000
  tmpcr1 = TIMx->CR1;
3401a814:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
3401a816:	d024      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a818:	f1b0 4f84 	cmp.w	r0, #1107296256	@ 0x42000000
3401a81c:	d021      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a81e:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
3401a822:	d01e      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a824:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
3401a828:	d01b      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a82a:	4a3e      	ldr	r2, [pc, #248]	@ (3401a924 <TIM_Base_SetConfig+0x114>)
3401a82c:	4290      	cmp	r0, r2
3401a82e:	d018      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a830:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a834:	4290      	cmp	r0, r2
3401a836:	d014      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a838:	4a3b      	ldr	r2, [pc, #236]	@ (3401a928 <TIM_Base_SetConfig+0x118>)
3401a83a:	4290      	cmp	r0, r2
3401a83c:	d011      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a83e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a842:	4290      	cmp	r0, r2
3401a844:	d00d      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a846:	4a39      	ldr	r2, [pc, #228]	@ (3401a92c <TIM_Base_SetConfig+0x11c>)
3401a848:	4290      	cmp	r0, r2
3401a84a:	d00a      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a84c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a850:	4290      	cmp	r0, r2
3401a852:	d006      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a854:	4a36      	ldr	r2, [pc, #216]	@ (3401a930 <TIM_Base_SetConfig+0x120>)
3401a856:	4290      	cmp	r0, r2
3401a858:	d003      	beq.n	3401a862 <TIM_Base_SetConfig+0x52>
3401a85a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a85e:	4290      	cmp	r0, r2
3401a860:	d108      	bne.n	3401a874 <TIM_Base_SetConfig+0x64>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
3401a862:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
3401a864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
3401a868:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
3401a86a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
3401a86c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
3401a870:	4313      	orrs	r3, r2
3401a872:	e022      	b.n	3401a8ba <TIM_Base_SetConfig+0xaa>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
3401a874:	4a2f      	ldr	r2, [pc, #188]	@ (3401a934 <TIM_Base_SetConfig+0x124>)
3401a876:	4290      	cmp	r0, r2
3401a878:	d0f7      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
3401a87a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a87e:	4290      	cmp	r0, r2
3401a880:	d0f3      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
3401a882:	4a2d      	ldr	r2, [pc, #180]	@ (3401a938 <TIM_Base_SetConfig+0x128>)
3401a884:	4290      	cmp	r0, r2
3401a886:	d0f0      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
3401a888:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a88c:	4290      	cmp	r0, r2
3401a88e:	d0ec      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
3401a890:	4a2a      	ldr	r2, [pc, #168]	@ (3401a93c <TIM_Base_SetConfig+0x12c>)
3401a892:	4290      	cmp	r0, r2
3401a894:	d0e9      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
3401a896:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a89a:	4290      	cmp	r0, r2
3401a89c:	d0e5      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
3401a89e:	4a28      	ldr	r2, [pc, #160]	@ (3401a940 <TIM_Base_SetConfig+0x130>)
3401a8a0:	4290      	cmp	r0, r2
3401a8a2:	d0e2      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
3401a8a4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a8a8:	4290      	cmp	r0, r2
3401a8aa:	d0de      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
3401a8ac:	4a25      	ldr	r2, [pc, #148]	@ (3401a944 <TIM_Base_SetConfig+0x134>)
3401a8ae:	4290      	cmp	r0, r2
3401a8b0:	d0db      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
3401a8b2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a8b6:	4290      	cmp	r0, r2
3401a8b8:	d0d7      	beq.n	3401a86a <TIM_Base_SetConfig+0x5a>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
3401a8ba:	694a      	ldr	r2, [r1, #20]
3401a8bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3401a8c0:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
3401a8c2:	688a      	ldr	r2, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
3401a8c4:	f1b0 4fa4 	cmp.w	r0, #1375731712	@ 0x52000000
  TIMx->ARR = (uint32_t)Structure->Period ;
3401a8c8:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
3401a8ca:	680a      	ldr	r2, [r1, #0]
3401a8cc:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
3401a8ce:	d01e      	beq.n	3401a90e <TIM_Base_SetConfig+0xfe>
3401a8d0:	f1b0 4f84 	cmp.w	r0, #1107296256	@ 0x42000000
3401a8d4:	d01b      	beq.n	3401a90e <TIM_Base_SetConfig+0xfe>
3401a8d6:	4a16      	ldr	r2, [pc, #88]	@ (3401a930 <TIM_Base_SetConfig+0x120>)
3401a8d8:	4290      	cmp	r0, r2
3401a8da:	d018      	beq.n	3401a90e <TIM_Base_SetConfig+0xfe>
3401a8dc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a8e0:	4290      	cmp	r0, r2
3401a8e2:	d014      	beq.n	3401a90e <TIM_Base_SetConfig+0xfe>
3401a8e4:	4a15      	ldr	r2, [pc, #84]	@ (3401a93c <TIM_Base_SetConfig+0x12c>)
3401a8e6:	4290      	cmp	r0, r2
3401a8e8:	d011      	beq.n	3401a90e <TIM_Base_SetConfig+0xfe>
3401a8ea:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a8ee:	4290      	cmp	r0, r2
3401a8f0:	d00d      	beq.n	3401a90e <TIM_Base_SetConfig+0xfe>
3401a8f2:	4a13      	ldr	r2, [pc, #76]	@ (3401a940 <TIM_Base_SetConfig+0x130>)
3401a8f4:	4290      	cmp	r0, r2
3401a8f6:	d00a      	beq.n	3401a90e <TIM_Base_SetConfig+0xfe>
3401a8f8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a8fc:	4290      	cmp	r0, r2
3401a8fe:	d006      	beq.n	3401a90e <TIM_Base_SetConfig+0xfe>
3401a900:	4a10      	ldr	r2, [pc, #64]	@ (3401a944 <TIM_Base_SetConfig+0x134>)
3401a902:	4290      	cmp	r0, r2
3401a904:	d003      	beq.n	3401a90e <TIM_Base_SetConfig+0xfe>
3401a906:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a90a:	4290      	cmp	r0, r2
3401a90c:	d101      	bne.n	3401a912 <TIM_Base_SetConfig+0x102>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
3401a90e:	690a      	ldr	r2, [r1, #16]
3401a910:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
3401a912:	6802      	ldr	r2, [r0, #0]
3401a914:	f042 0204 	orr.w	r2, r2, #4
3401a918:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
3401a91a:	2201      	movs	r2, #1
3401a91c:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
3401a91e:	6003      	str	r3, [r0, #0]
}
3401a920:	4770      	bx	lr
3401a922:	bf00      	nop
3401a924:	50000400 	.word	0x50000400
3401a928:	50000800 	.word	0x50000800
3401a92c:	50000c00 	.word	0x50000c00
3401a930:	52000400 	.word	0x52000400
3401a934:	52004c00 	.word	0x52004c00
3401a938:	50001800 	.word	0x50001800
3401a93c:	52004000 	.word	0x52004000
3401a940:	52004400 	.word	0x52004400
3401a944:	52004800 	.word	0x52004800

3401a948 <HAL_TIM_Base_Init>:
{
3401a948:	b510      	push	{r4, lr}
  if (htim == NULL)
3401a94a:	4604      	mov	r4, r0
3401a94c:	2800      	cmp	r0, #0
3401a94e:	f000 8100 	beq.w	3401ab52 <HAL_TIM_Base_Init+0x20a>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401a952:	6803      	ldr	r3, [r0, #0]
3401a954:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3401a958:	d07d      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a95a:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3401a95e:	d07a      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401a964:	d077      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401a96a:	d074      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a96c:	4a7a      	ldr	r2, [pc, #488]	@ (3401ab58 <HAL_TIM_Base_Init+0x210>)
3401a96e:	4293      	cmp	r3, r2
3401a970:	d071      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a972:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a976:	4293      	cmp	r3, r2
3401a978:	d06d      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a97a:	4a78      	ldr	r2, [pc, #480]	@ (3401ab5c <HAL_TIM_Base_Init+0x214>)
3401a97c:	4293      	cmp	r3, r2
3401a97e:	d06a      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a980:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a984:	4293      	cmp	r3, r2
3401a986:	d066      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a988:	4a75      	ldr	r2, [pc, #468]	@ (3401ab60 <HAL_TIM_Base_Init+0x218>)
3401a98a:	4293      	cmp	r3, r2
3401a98c:	d063      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a98e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a992:	4293      	cmp	r3, r2
3401a994:	d05f      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a996:	4a73      	ldr	r2, [pc, #460]	@ (3401ab64 <HAL_TIM_Base_Init+0x21c>)
3401a998:	4293      	cmp	r3, r2
3401a99a:	d05c      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a99c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a9a0:	4293      	cmp	r3, r2
3401a9a2:	d058      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9a4:	4a70      	ldr	r2, [pc, #448]	@ (3401ab68 <HAL_TIM_Base_Init+0x220>)
3401a9a6:	4293      	cmp	r3, r2
3401a9a8:	d055      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9aa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a9ae:	4293      	cmp	r3, r2
3401a9b0:	d051      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9b2:	4a6e      	ldr	r2, [pc, #440]	@ (3401ab6c <HAL_TIM_Base_Init+0x224>)
3401a9b4:	4293      	cmp	r3, r2
3401a9b6:	d04e      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9b8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a9bc:	4293      	cmp	r3, r2
3401a9be:	d04a      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9c0:	4a6b      	ldr	r2, [pc, #428]	@ (3401ab70 <HAL_TIM_Base_Init+0x228>)
3401a9c2:	4293      	cmp	r3, r2
3401a9c4:	d047      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9c6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a9ca:	4293      	cmp	r3, r2
3401a9cc:	d043      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9ce:	4a69      	ldr	r2, [pc, #420]	@ (3401ab74 <HAL_TIM_Base_Init+0x22c>)
3401a9d0:	4293      	cmp	r3, r2
3401a9d2:	d040      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9d4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a9d8:	4293      	cmp	r3, r2
3401a9da:	d03c      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9dc:	4a66      	ldr	r2, [pc, #408]	@ (3401ab78 <HAL_TIM_Base_Init+0x230>)
3401a9de:	4293      	cmp	r3, r2
3401a9e0:	d039      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9e2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a9e6:	4293      	cmp	r3, r2
3401a9e8:	d035      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9ea:	4a64      	ldr	r2, [pc, #400]	@ (3401ab7c <HAL_TIM_Base_Init+0x234>)
3401a9ec:	4293      	cmp	r3, r2
3401a9ee:	d032      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9f0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a9f4:	4293      	cmp	r3, r2
3401a9f6:	d02e      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9f8:	4a61      	ldr	r2, [pc, #388]	@ (3401ab80 <HAL_TIM_Base_Init+0x238>)
3401a9fa:	4293      	cmp	r3, r2
3401a9fc:	d02b      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401a9fe:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401aa02:	4293      	cmp	r3, r2
3401aa04:	d027      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa06:	4a5f      	ldr	r2, [pc, #380]	@ (3401ab84 <HAL_TIM_Base_Init+0x23c>)
3401aa08:	4293      	cmp	r3, r2
3401aa0a:	d024      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa0c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401aa10:	4293      	cmp	r3, r2
3401aa12:	d020      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa14:	4a5c      	ldr	r2, [pc, #368]	@ (3401ab88 <HAL_TIM_Base_Init+0x240>)
3401aa16:	4293      	cmp	r3, r2
3401aa18:	d01d      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa1a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401aa1e:	4293      	cmp	r3, r2
3401aa20:	d019      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa22:	4a5a      	ldr	r2, [pc, #360]	@ (3401ab8c <HAL_TIM_Base_Init+0x244>)
3401aa24:	4293      	cmp	r3, r2
3401aa26:	d016      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa28:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401aa2c:	4293      	cmp	r3, r2
3401aa2e:	d012      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa30:	4a57      	ldr	r2, [pc, #348]	@ (3401ab90 <HAL_TIM_Base_Init+0x248>)
3401aa32:	4293      	cmp	r3, r2
3401aa34:	d00f      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa36:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401aa3a:	4293      	cmp	r3, r2
3401aa3c:	d00b      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa3e:	4a55      	ldr	r2, [pc, #340]	@ (3401ab94 <HAL_TIM_Base_Init+0x24c>)
3401aa40:	4293      	cmp	r3, r2
3401aa42:	d008      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa44:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401aa48:	4293      	cmp	r3, r2
3401aa4a:	d004      	beq.n	3401aa56 <HAL_TIM_Base_Init+0x10e>
3401aa4c:	f44f 718d 	mov.w	r1, #282	@ 0x11a
3401aa50:	4851      	ldr	r0, [pc, #324]	@ (3401ab98 <HAL_TIM_Base_Init+0x250>)
3401aa52:	f004 fdd5 	bl	3401f600 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
3401aa56:	68a3      	ldr	r3, [r4, #8]
3401aa58:	f033 0210 	bics.w	r2, r3, #16
3401aa5c:	d00a      	beq.n	3401aa74 <HAL_TIM_Base_Init+0x12c>
3401aa5e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
3401aa62:	2a20      	cmp	r2, #32
3401aa64:	d006      	beq.n	3401aa74 <HAL_TIM_Base_Init+0x12c>
3401aa66:	2b40      	cmp	r3, #64	@ 0x40
3401aa68:	d004      	beq.n	3401aa74 <HAL_TIM_Base_Init+0x12c>
3401aa6a:	f240 111b 	movw	r1, #283	@ 0x11b
3401aa6e:	484a      	ldr	r0, [pc, #296]	@ (3401ab98 <HAL_TIM_Base_Init+0x250>)
3401aa70:	f004 fdc6 	bl	3401f600 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
3401aa74:	6923      	ldr	r3, [r4, #16]
3401aa76:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
3401aa7a:	d007      	beq.n	3401aa8c <HAL_TIM_Base_Init+0x144>
3401aa7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401aa80:	d004      	beq.n	3401aa8c <HAL_TIM_Base_Init+0x144>
3401aa82:	f44f 718e 	mov.w	r1, #284	@ 0x11c
3401aa86:	4844      	ldr	r0, [pc, #272]	@ (3401ab98 <HAL_TIM_Base_Init+0x250>)
3401aa88:	f004 fdba 	bl	3401f600 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
3401aa8c:	6823      	ldr	r3, [r4, #0]
3401aa8e:	68e2      	ldr	r2, [r4, #12]
3401aa90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401aa94:	d026      	beq.n	3401aae4 <HAL_TIM_Base_Init+0x19c>
3401aa96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401aa9a:	d023      	beq.n	3401aae4 <HAL_TIM_Base_Init+0x19c>
3401aa9c:	492e      	ldr	r1, [pc, #184]	@ (3401ab58 <HAL_TIM_Base_Init+0x210>)
3401aa9e:	428b      	cmp	r3, r1
3401aaa0:	d020      	beq.n	3401aae4 <HAL_TIM_Base_Init+0x19c>
3401aaa2:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401aaa6:	428b      	cmp	r3, r1
3401aaa8:	d01c      	beq.n	3401aae4 <HAL_TIM_Base_Init+0x19c>
3401aaaa:	492c      	ldr	r1, [pc, #176]	@ (3401ab5c <HAL_TIM_Base_Init+0x214>)
3401aaac:	428b      	cmp	r3, r1
3401aaae:	d019      	beq.n	3401aae4 <HAL_TIM_Base_Init+0x19c>
3401aab0:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401aab4:	428b      	cmp	r3, r1
3401aab6:	d015      	beq.n	3401aae4 <HAL_TIM_Base_Init+0x19c>
3401aab8:	4929      	ldr	r1, [pc, #164]	@ (3401ab60 <HAL_TIM_Base_Init+0x218>)
3401aaba:	428b      	cmp	r3, r1
3401aabc:	d012      	beq.n	3401aae4 <HAL_TIM_Base_Init+0x19c>
3401aabe:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401aac2:	428b      	cmp	r3, r1
3401aac4:	d00e      	beq.n	3401aae4 <HAL_TIM_Base_Init+0x19c>
3401aac6:	681b      	ldr	r3, [r3, #0]
3401aac8:	3a01      	subs	r2, #1
3401aaca:	04db      	lsls	r3, r3, #19
3401aacc:	bf54      	ite	pl
3401aace:	f64f 73fe 	movwpl	r3, #65534	@ 0xfffe
3401aad2:	4b32      	ldrmi	r3, [pc, #200]	@ (3401ab9c <HAL_TIM_Base_Init+0x254>)
3401aad4:	429a      	cmp	r2, r3
3401aad6:	d907      	bls.n	3401aae8 <HAL_TIM_Base_Init+0x1a0>
3401aad8:	f240 111d 	movw	r1, #285	@ 0x11d
3401aadc:	482e      	ldr	r0, [pc, #184]	@ (3401ab98 <HAL_TIM_Base_Init+0x250>)
3401aade:	f004 fd8f 	bl	3401f600 <assert_failed>
3401aae2:	e001      	b.n	3401aae8 <HAL_TIM_Base_Init+0x1a0>
3401aae4:	2a00      	cmp	r2, #0
3401aae6:	d0f7      	beq.n	3401aad8 <HAL_TIM_Base_Init+0x190>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
3401aae8:	69a3      	ldr	r3, [r4, #24]
3401aaea:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
3401aaee:	d004      	beq.n	3401aafa <HAL_TIM_Base_Init+0x1b2>
3401aaf0:	f44f 718f 	mov.w	r1, #286	@ 0x11e
3401aaf4:	4828      	ldr	r0, [pc, #160]	@ (3401ab98 <HAL_TIM_Base_Init+0x250>)
3401aaf6:	f004 fd83 	bl	3401f600 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
3401aafa:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
3401aafe:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
3401ab02:	b923      	cbnz	r3, 3401ab0e <HAL_TIM_Base_Init+0x1c6>
    HAL_TIM_Base_MspInit(htim);
3401ab04:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
3401ab06:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
3401ab0a:	f7ff fd81 	bl	3401a610 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
3401ab0e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
3401ab10:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
3401ab12:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
3401ab16:	1d21      	adds	r1, r4, #4
3401ab18:	f7ff fe7a 	bl	3401a810 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
3401ab1c:	2301      	movs	r3, #1
  return HAL_OK;
3401ab1e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
3401ab20:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
3401ab24:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
3401ab28:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
3401ab2c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
3401ab30:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
3401ab34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3401ab38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
3401ab3c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
3401ab40:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
3401ab44:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
3401ab48:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
3401ab4c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
3401ab50:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3401ab52:	2001      	movs	r0, #1
3401ab54:	e7fc      	b.n	3401ab50 <HAL_TIM_Base_Init+0x208>
3401ab56:	bf00      	nop
3401ab58:	50000400 	.word	0x50000400
3401ab5c:	50000800 	.word	0x50000800
3401ab60:	50000c00 	.word	0x50000c00
3401ab64:	50001000 	.word	0x50001000
3401ab68:	50001400 	.word	0x50001400
3401ab6c:	52000400 	.word	0x52000400
3401ab70:	52004c00 	.word	0x52004c00
3401ab74:	50003000 	.word	0x50003000
3401ab78:	50003400 	.word	0x50003400
3401ab7c:	50001800 	.word	0x50001800
3401ab80:	50001c00 	.word	0x50001c00
3401ab84:	50002000 	.word	0x50002000
3401ab88:	52004000 	.word	0x52004000
3401ab8c:	52004400 	.word	0x52004400
3401ab90:	52004800 	.word	0x52004800
3401ab94:	52003c00 	.word	0x52003c00
3401ab98:	3402f825 	.word	0x3402f825
3401ab9c:	000fffee 	.word	0x000fffee

3401aba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3401aba0:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3401aba2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401aba4:	e852 3f00 	ldrex	r3, [r2]
3401aba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401abac:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3401abb0:	6802      	ldr	r2, [r0, #0]
3401abb2:	2900      	cmp	r1, #0
3401abb4:	d1f5      	bne.n	3401aba2 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3401abb6:	4c0f      	ldr	r4, [pc, #60]	@ (3401abf4 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401abb8:	f102 0308 	add.w	r3, r2, #8
3401abbc:	e853 3f00 	ldrex	r3, [r3]
3401abc0:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401abc2:	f102 0c08 	add.w	ip, r2, #8
3401abc6:	e84c 3100 	strex	r1, r3, [ip]
3401abca:	2900      	cmp	r1, #0
3401abcc:	d1f4      	bne.n	3401abb8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3401abce:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
3401abd0:	2b01      	cmp	r3, #1
3401abd2:	d107      	bne.n	3401abe4 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401abd4:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3401abd8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401abdc:	e842 3100 	strex	r1, r3, [r2]
3401abe0:	2900      	cmp	r1, #0
3401abe2:	d1f7      	bne.n	3401abd4 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3401abe4:	2320      	movs	r3, #32
3401abe6:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401abea:	2300      	movs	r3, #0
3401abec:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3401abee:	6743      	str	r3, [r0, #116]	@ 0x74
}
3401abf0:	bd10      	pop	{r4, pc}
3401abf2:	bf00      	nop
3401abf4:	effffffe 	.word	0xeffffffe

3401abf8 <HAL_UART_MspInit>:
}
3401abf8:	4770      	bx	lr
	...

3401abfc <UART_SetConfig>:
{
3401abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3401abfe:	6842      	ldr	r2, [r0, #4]
3401ac00:	4bb0      	ldr	r3, [pc, #704]	@ (3401aec4 <UART_SetConfig+0x2c8>)
{
3401ac02:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3401ac04:	429a      	cmp	r2, r3
3401ac06:	d904      	bls.n	3401ac12 <UART_SetConfig+0x16>
3401ac08:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
3401ac0c:	48ae      	ldr	r0, [pc, #696]	@ (3401aec8 <UART_SetConfig+0x2cc>)
3401ac0e:	f004 fcf7 	bl	3401f600 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
3401ac12:	68a3      	ldr	r3, [r4, #8]
3401ac14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401ac18:	d007      	beq.n	3401ac2a <UART_SetConfig+0x2e>
3401ac1a:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3401ac1e:	d004      	beq.n	3401ac2a <UART_SetConfig+0x2e>
3401ac20:	f640 4151 	movw	r1, #3153	@ 0xc51
3401ac24:	48a8      	ldr	r0, [pc, #672]	@ (3401aec8 <UART_SetConfig+0x2cc>)
3401ac26:	f004 fceb 	bl	3401f600 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
3401ac2a:	6822      	ldr	r2, [r4, #0]
3401ac2c:	49a7      	ldr	r1, [pc, #668]	@ (3401aecc <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3401ac2e:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
3401ac30:	428a      	cmp	r2, r1
3401ac32:	d004      	beq.n	3401ac3e <UART_SetConfig+0x42>
3401ac34:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401ac38:	428a      	cmp	r2, r1
3401ac3a:	f040 80af 	bne.w	3401ad9c <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3401ac3e:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3401ac42:	d004      	beq.n	3401ac4e <UART_SetConfig+0x52>
3401ac44:	f640 4154 	movw	r1, #3156	@ 0xc54
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3401ac48:	489f      	ldr	r0, [pc, #636]	@ (3401aec8 <UART_SetConfig+0x2cc>)
3401ac4a:	f004 fcd9 	bl	3401f600 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
3401ac4e:	6923      	ldr	r3, [r4, #16]
3401ac50:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
3401ac54:	d007      	beq.n	3401ac66 <UART_SetConfig+0x6a>
3401ac56:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401ac5a:	d004      	beq.n	3401ac66 <UART_SetConfig+0x6a>
3401ac5c:	f640 415c 	movw	r1, #3164	@ 0xc5c
3401ac60:	4899      	ldr	r0, [pc, #612]	@ (3401aec8 <UART_SetConfig+0x2cc>)
3401ac62:	f004 fccd 	bl	3401f600 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3401ac66:	6963      	ldr	r3, [r4, #20]
3401ac68:	f033 020c 	bics.w	r2, r3, #12
3401ac6c:	d100      	bne.n	3401ac70 <UART_SetConfig+0x74>
3401ac6e:	b923      	cbnz	r3, 3401ac7a <UART_SetConfig+0x7e>
3401ac70:	f640 415d 	movw	r1, #3165	@ 0xc5d
3401ac74:	4894      	ldr	r0, [pc, #592]	@ (3401aec8 <UART_SetConfig+0x2cc>)
3401ac76:	f004 fcc3 	bl	3401f600 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
3401ac7a:	69a3      	ldr	r3, [r4, #24]
3401ac7c:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
3401ac80:	d004      	beq.n	3401ac8c <UART_SetConfig+0x90>
3401ac82:	f640 415e 	movw	r1, #3166	@ 0xc5e
3401ac86:	4890      	ldr	r0, [pc, #576]	@ (3401aec8 <UART_SetConfig+0x2cc>)
3401ac88:	f004 fcba 	bl	3401f600 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
3401ac8c:	69e3      	ldr	r3, [r4, #28]
3401ac8e:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3401ac92:	d004      	beq.n	3401ac9e <UART_SetConfig+0xa2>
3401ac94:	f640 415f 	movw	r1, #3167	@ 0xc5f
3401ac98:	488b      	ldr	r0, [pc, #556]	@ (3401aec8 <UART_SetConfig+0x2cc>)
3401ac9a:	f004 fcb1 	bl	3401f600 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
3401ac9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401aca0:	2b0b      	cmp	r3, #11
3401aca2:	d904      	bls.n	3401acae <UART_SetConfig+0xb2>
3401aca4:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
3401aca8:	4887      	ldr	r0, [pc, #540]	@ (3401aec8 <UART_SetConfig+0x2cc>)
3401acaa:	f004 fca9 	bl	3401f600 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401acae:	6921      	ldr	r1, [r4, #16]
3401acb0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401acb2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401acb4:	430a      	orrs	r2, r1
3401acb6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401acb8:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401acba:	69e5      	ldr	r5, [r4, #28]
3401acbc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401acbe:	4984      	ldr	r1, [pc, #528]	@ (3401aed0 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401acc0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401acc2:	4001      	ands	r1, r0
3401acc4:	430a      	orrs	r2, r1
3401acc6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3401acc8:	685a      	ldr	r2, [r3, #4]
3401acca:	68e1      	ldr	r1, [r4, #12]
3401accc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
3401acd0:	430a      	orrs	r2, r1
3401acd2:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3401acd4:	4a7d      	ldr	r2, [pc, #500]	@ (3401aecc <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3401acd6:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3401acd8:	4293      	cmp	r3, r2
3401acda:	d005      	beq.n	3401ace8 <UART_SetConfig+0xec>
3401acdc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ace0:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
3401ace2:	bf1c      	itt	ne
3401ace4:	6a22      	ldrne	r2, [r4, #32]
3401ace6:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3401ace8:	689a      	ldr	r2, [r3, #8]
3401acea:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
3401acee:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
3401acf2:	430a      	orrs	r2, r1
3401acf4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3401acf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3401acf8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401acfa:	f022 020f 	bic.w	r2, r2, #15
3401acfe:	430a      	orrs	r2, r1
3401ad00:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
3401ad02:	4a74      	ldr	r2, [pc, #464]	@ (3401aed4 <UART_SetConfig+0x2d8>)
3401ad04:	4293      	cmp	r3, r2
3401ad06:	d07a      	beq.n	3401adfe <UART_SetConfig+0x202>
3401ad08:	4a73      	ldr	r2, [pc, #460]	@ (3401aed8 <UART_SetConfig+0x2dc>)
3401ad0a:	4293      	cmp	r3, r2
3401ad0c:	f000 809c 	beq.w	3401ae48 <UART_SetConfig+0x24c>
3401ad10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401ad14:	4293      	cmp	r3, r2
3401ad16:	f000 809b 	beq.w	3401ae50 <UART_SetConfig+0x254>
3401ad1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401ad1e:	4293      	cmp	r3, r2
3401ad20:	f000 809a 	beq.w	3401ae58 <UART_SetConfig+0x25c>
3401ad24:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401ad28:	f000 809a 	beq.w	3401ae60 <UART_SetConfig+0x264>
3401ad2c:	4a6b      	ldr	r2, [pc, #428]	@ (3401aedc <UART_SetConfig+0x2e0>)
3401ad2e:	4293      	cmp	r3, r2
3401ad30:	f000 809a 	beq.w	3401ae68 <UART_SetConfig+0x26c>
3401ad34:	4a6a      	ldr	r2, [pc, #424]	@ (3401aee0 <UART_SetConfig+0x2e4>)
3401ad36:	4293      	cmp	r3, r2
3401ad38:	f000 809a 	beq.w	3401ae70 <UART_SetConfig+0x274>
3401ad3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401ad40:	4293      	cmp	r3, r2
3401ad42:	f000 8099 	beq.w	3401ae78 <UART_SetConfig+0x27c>
3401ad46:	4a67      	ldr	r2, [pc, #412]	@ (3401aee4 <UART_SetConfig+0x2e8>)
3401ad48:	4293      	cmp	r3, r2
3401ad4a:	f000 8099 	beq.w	3401ae80 <UART_SetConfig+0x284>
3401ad4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401ad52:	4293      	cmp	r3, r2
3401ad54:	f000 8098 	beq.w	3401ae88 <UART_SetConfig+0x28c>
3401ad58:	4a5c      	ldr	r2, [pc, #368]	@ (3401aecc <UART_SetConfig+0x2d0>)
3401ad5a:	4293      	cmp	r3, r2
3401ad5c:	d02e      	beq.n	3401adbc <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
3401ad5e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ad62:	4293      	cmp	r3, r2
3401ad64:	f04f 0000 	mov.w	r0, #0
3401ad68:	f04f 0100 	mov.w	r1, #0
3401ad6c:	d14a      	bne.n	3401ae04 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401ad6e:	f7fe feb5 	bl	34019adc <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3401ad72:	2800      	cmp	r0, #0
3401ad74:	d041      	beq.n	3401adfa <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401ad76:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401ad78:	4a5b      	ldr	r2, [pc, #364]	@ (3401aee8 <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401ad7a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401ad7c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401ad80:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401ad84:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401ad88:	4299      	cmp	r1, r3
3401ad8a:	d91b      	bls.n	3401adc4 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
3401ad8c:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
3401ad8e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
3401ad92:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
3401ad94:	2300      	movs	r3, #0
  huart->TxISR = NULL;
3401ad96:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
3401ad9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3401ad9c:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3401ada0:	d004      	beq.n	3401adac <UART_SetConfig+0x1b0>
3401ada2:	f640 4158 	movw	r1, #3160	@ 0xc58
3401ada6:	4848      	ldr	r0, [pc, #288]	@ (3401aec8 <UART_SetConfig+0x2cc>)
3401ada8:	f004 fc2a 	bl	3401f600 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3401adac:	6a23      	ldr	r3, [r4, #32]
3401adae:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3401adb2:	f43f af4c 	beq.w	3401ac4e <UART_SetConfig+0x52>
3401adb6:	f640 4159 	movw	r1, #3161	@ 0xc59
3401adba:	e745      	b.n	3401ac48 <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
3401adbc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
3401adc0:	2100      	movs	r1, #0
3401adc2:	e7d4      	b.n	3401ad6e <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401adc4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
3401adc8:	d8e0      	bhi.n	3401ad8c <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401adca:	2300      	movs	r3, #0
3401adcc:	4619      	mov	r1, r3
3401adce:	f7e6 fec9 	bl	34001b64 <__aeabi_uldivmod>
3401add2:	4606      	mov	r6, r0
3401add4:	460f      	mov	r7, r1
3401add6:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
3401adda:	0868      	lsrs	r0, r5, #1
3401addc:	1830      	adds	r0, r6, r0
3401adde:	462a      	mov	r2, r5
3401ade0:	f04f 0300 	mov.w	r3, #0
3401ade4:	f147 0100 	adc.w	r1, r7, #0
3401ade8:	f7e6 febc 	bl	34001b64 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3401adec:	4b3f      	ldr	r3, [pc, #252]	@ (3401aeec <UART_SetConfig+0x2f0>)
3401adee:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
3401adf2:	429a      	cmp	r2, r3
3401adf4:	d8ca      	bhi.n	3401ad8c <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
3401adf6:	6823      	ldr	r3, [r4, #0]
3401adf8:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
3401adfa:	2000      	movs	r0, #0
3401adfc:	e7c7      	b.n	3401ad8e <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
3401adfe:	2000      	movs	r0, #0
3401ae00:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3401ae04:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
3401ae08:	d142      	bne.n	3401ae90 <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401ae0a:	f7fe fe67 	bl	34019adc <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3401ae0e:	2800      	cmp	r0, #0
3401ae10:	d0f3      	beq.n	3401adfa <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401ae12:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401ae14:	4b34      	ldr	r3, [pc, #208]	@ (3401aee8 <UART_SetConfig+0x2ec>)
3401ae16:	6862      	ldr	r2, [r4, #4]
3401ae18:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3401ae1c:	fbb0 f0f3 	udiv	r0, r0, r3
3401ae20:	0853      	lsrs	r3, r2, #1
3401ae22:	eb03 0340 	add.w	r3, r3, r0, lsl #1
3401ae26:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3401ae2a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3401ae2e:	f1a3 0110 	sub.w	r1, r3, #16
3401ae32:	4291      	cmp	r1, r2
3401ae34:	d8aa      	bhi.n	3401ad8c <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3401ae36:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
3401ae3a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3401ae3c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3401ae3e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
3401ae42:	4313      	orrs	r3, r2
3401ae44:	60cb      	str	r3, [r1, #12]
3401ae46:	e7d8      	b.n	3401adfa <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
3401ae48:	2000      	movs	r0, #0
3401ae4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
3401ae4e:	e7d9      	b.n	3401ae04 <UART_SetConfig+0x208>
3401ae50:	2000      	movs	r0, #0
3401ae52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3401ae56:	e7d5      	b.n	3401ae04 <UART_SetConfig+0x208>
3401ae58:	2000      	movs	r0, #0
3401ae5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3401ae5e:	e7d1      	b.n	3401ae04 <UART_SetConfig+0x208>
3401ae60:	2000      	movs	r0, #0
3401ae62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3401ae66:	e7cd      	b.n	3401ae04 <UART_SetConfig+0x208>
3401ae68:	2000      	movs	r0, #0
3401ae6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3401ae6e:	e7c9      	b.n	3401ae04 <UART_SetConfig+0x208>
3401ae70:	2000      	movs	r0, #0
3401ae72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
3401ae76:	e7c5      	b.n	3401ae04 <UART_SetConfig+0x208>
3401ae78:	2000      	movs	r0, #0
3401ae7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3401ae7e:	e7c1      	b.n	3401ae04 <UART_SetConfig+0x208>
3401ae80:	2000      	movs	r0, #0
3401ae82:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
3401ae86:	e7bd      	b.n	3401ae04 <UART_SetConfig+0x208>
3401ae88:	2000      	movs	r0, #0
3401ae8a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3401ae8e:	e7b9      	b.n	3401ae04 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401ae90:	f7fe fe24 	bl	34019adc <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3401ae94:	2800      	cmp	r0, #0
3401ae96:	d0b0      	beq.n	3401adfa <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401ae98:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401ae9a:	4b13      	ldr	r3, [pc, #76]	@ (3401aee8 <UART_SetConfig+0x2ec>)
3401ae9c:	6862      	ldr	r2, [r4, #4]
3401ae9e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3401aea2:	fbb0 f3f3 	udiv	r3, r0, r3
3401aea6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
3401aeaa:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3401aeae:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3401aeb2:	f1a3 0110 	sub.w	r1, r3, #16
3401aeb6:	4291      	cmp	r1, r2
3401aeb8:	f63f af68 	bhi.w	3401ad8c <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
3401aebc:	6822      	ldr	r2, [r4, #0]
3401aebe:	60d3      	str	r3, [r2, #12]
3401aec0:	e79b      	b.n	3401adfa <UART_SetConfig+0x1fe>
3401aec2:	bf00      	nop
3401aec4:	00bebc1f 	.word	0x00bebc1f
3401aec8:	3402f899 	.word	0x3402f899
3401aecc:	56000c00 	.word	0x56000c00
3401aed0:	cfff69f3 	.word	0xcfff69f3
3401aed4:	52001000 	.word	0x52001000
3401aed8:	50004400 	.word	0x50004400
3401aedc:	52001400 	.word	0x52001400
3401aee0:	50007800 	.word	0x50007800
3401aee4:	52001800 	.word	0x52001800
3401aee8:	340c870a 	.word	0x340c870a
3401aeec:	000ffcff 	.word	0x000ffcff

3401aef0 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401aef0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
3401aef2:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401aef4:	2bff      	cmp	r3, #255	@ 0xff
{
3401aef6:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401aef8:	d904      	bls.n	3401af04 <UART_AdvFeatureConfig+0x14>
3401aefa:	f640 41e5 	movw	r1, #3301	@ 0xce5
3401aefe:	487e      	ldr	r0, [pc, #504]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401af00:	f004 fb7e 	bl	3401f600 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3401af04:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401af06:	0718      	lsls	r0, r3, #28
3401af08:	d50f      	bpl.n	3401af2a <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3401af0a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401af0c:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3401af10:	d004      	beq.n	3401af1c <UART_AdvFeatureConfig+0x2c>
3401af12:	f640 41ea 	movw	r1, #3306	@ 0xcea
3401af16:	4878      	ldr	r0, [pc, #480]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401af18:	f004 fb72 	bl	3401f600 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3401af1c:	6822      	ldr	r2, [r4, #0]
3401af1e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3401af20:	6853      	ldr	r3, [r2, #4]
3401af22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3401af26:	430b      	orrs	r3, r1
3401af28:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3401af2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401af2c:	07d9      	lsls	r1, r3, #31
3401af2e:	d50f      	bpl.n	3401af50 <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3401af30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401af32:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
3401af36:	d004      	beq.n	3401af42 <UART_AdvFeatureConfig+0x52>
3401af38:	f640 41f1 	movw	r1, #3313	@ 0xcf1
3401af3c:	486e      	ldr	r0, [pc, #440]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401af3e:	f004 fb5f 	bl	3401f600 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3401af42:	6822      	ldr	r2, [r4, #0]
3401af44:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3401af46:	6853      	ldr	r3, [r2, #4]
3401af48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3401af4c:	430b      	orrs	r3, r1
3401af4e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3401af50:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401af52:	079a      	lsls	r2, r3, #30
3401af54:	d50f      	bpl.n	3401af76 <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3401af56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3401af58:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3401af5c:	d004      	beq.n	3401af68 <UART_AdvFeatureConfig+0x78>
3401af5e:	f640 41f8 	movw	r1, #3320	@ 0xcf8
3401af62:	4865      	ldr	r0, [pc, #404]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401af64:	f004 fb4c 	bl	3401f600 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3401af68:	6822      	ldr	r2, [r4, #0]
3401af6a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3401af6c:	6853      	ldr	r3, [r2, #4]
3401af6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401af72:	430b      	orrs	r3, r1
3401af74:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3401af76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401af78:	075b      	lsls	r3, r3, #29
3401af7a:	d50f      	bpl.n	3401af9c <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3401af7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401af7e:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
3401af82:	d004      	beq.n	3401af8e <UART_AdvFeatureConfig+0x9e>
3401af84:	f640 41ff 	movw	r1, #3327	@ 0xcff
3401af88:	485b      	ldr	r0, [pc, #364]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401af8a:	f004 fb39 	bl	3401f600 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3401af8e:	6822      	ldr	r2, [r4, #0]
3401af90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401af92:	6853      	ldr	r3, [r2, #4]
3401af94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
3401af98:	430b      	orrs	r3, r1
3401af9a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3401af9c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401af9e:	06d8      	lsls	r0, r3, #27
3401afa0:	d50f      	bpl.n	3401afc2 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3401afa2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401afa4:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3401afa8:	d004      	beq.n	3401afb4 <UART_AdvFeatureConfig+0xc4>
3401afaa:	f640 5106 	movw	r1, #3334	@ 0xd06
3401afae:	4852      	ldr	r0, [pc, #328]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401afb0:	f004 fb26 	bl	3401f600 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3401afb4:	6822      	ldr	r2, [r4, #0]
3401afb6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3401afb8:	6893      	ldr	r3, [r2, #8]
3401afba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3401afbe:	430b      	orrs	r3, r1
3401afc0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3401afc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401afc4:	0699      	lsls	r1, r3, #26
3401afc6:	d50f      	bpl.n	3401afe8 <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3401afc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401afca:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3401afce:	d004      	beq.n	3401afda <UART_AdvFeatureConfig+0xea>
3401afd0:	f640 510e 	movw	r1, #3342	@ 0xd0e
3401afd4:	4848      	ldr	r0, [pc, #288]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401afd6:	f004 fb13 	bl	3401f600 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3401afda:	6822      	ldr	r2, [r4, #0]
3401afdc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
3401afde:	6893      	ldr	r3, [r2, #8]
3401afe0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
3401afe4:	430b      	orrs	r3, r1
3401afe6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3401afe8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401afea:	065a      	lsls	r2, r3, #25
3401afec:	d56f      	bpl.n	3401b0ce <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3401afee:	6823      	ldr	r3, [r4, #0]
3401aff0:	4a42      	ldr	r2, [pc, #264]	@ (3401b0fc <UART_AdvFeatureConfig+0x20c>)
3401aff2:	4293      	cmp	r3, r2
3401aff4:	d047      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401aff6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401affa:	4293      	cmp	r3, r2
3401affc:	d043      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401affe:	4a40      	ldr	r2, [pc, #256]	@ (3401b100 <UART_AdvFeatureConfig+0x210>)
3401b000:	4293      	cmp	r3, r2
3401b002:	d040      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b004:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b008:	4293      	cmp	r3, r2
3401b00a:	d03c      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b00c:	4a3d      	ldr	r2, [pc, #244]	@ (3401b104 <UART_AdvFeatureConfig+0x214>)
3401b00e:	4293      	cmp	r3, r2
3401b010:	d039      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b012:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b016:	4293      	cmp	r3, r2
3401b018:	d035      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b01a:	4a3b      	ldr	r2, [pc, #236]	@ (3401b108 <UART_AdvFeatureConfig+0x218>)
3401b01c:	4293      	cmp	r3, r2
3401b01e:	d032      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b020:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b024:	4293      	cmp	r3, r2
3401b026:	d02e      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b028:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401b02c:	d02b      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b02e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401b032:	4293      	cmp	r3, r2
3401b034:	d027      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b036:	4a35      	ldr	r2, [pc, #212]	@ (3401b10c <UART_AdvFeatureConfig+0x21c>)
3401b038:	4293      	cmp	r3, r2
3401b03a:	d024      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b03c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b040:	4293      	cmp	r3, r2
3401b042:	d020      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b044:	4a32      	ldr	r2, [pc, #200]	@ (3401b110 <UART_AdvFeatureConfig+0x220>)
3401b046:	4293      	cmp	r3, r2
3401b048:	d01d      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b04a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b04e:	4293      	cmp	r3, r2
3401b050:	d019      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b052:	4a30      	ldr	r2, [pc, #192]	@ (3401b114 <UART_AdvFeatureConfig+0x224>)
3401b054:	4293      	cmp	r3, r2
3401b056:	d016      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b058:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b05c:	4293      	cmp	r3, r2
3401b05e:	d012      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b060:	4a2d      	ldr	r2, [pc, #180]	@ (3401b118 <UART_AdvFeatureConfig+0x228>)
3401b062:	4293      	cmp	r3, r2
3401b064:	d00f      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b066:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b06a:	4293      	cmp	r3, r2
3401b06c:	d00b      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b06e:	4a2b      	ldr	r2, [pc, #172]	@ (3401b11c <UART_AdvFeatureConfig+0x22c>)
3401b070:	4293      	cmp	r3, r2
3401b072:	d008      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b074:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b078:	4293      	cmp	r3, r2
3401b07a:	d004      	beq.n	3401b086 <UART_AdvFeatureConfig+0x196>
3401b07c:	f640 5116 	movw	r1, #3350	@ 0xd16
3401b080:	481d      	ldr	r0, [pc, #116]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401b082:	f004 fabd 	bl	3401f600 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3401b086:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401b088:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
3401b08c:	d004      	beq.n	3401b098 <UART_AdvFeatureConfig+0x1a8>
3401b08e:	f640 5117 	movw	r1, #3351	@ 0xd17
3401b092:	4819      	ldr	r0, [pc, #100]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401b094:	f004 fab4 	bl	3401f600 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3401b098:	6821      	ldr	r1, [r4, #0]
3401b09a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3401b09c:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3401b09e:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3401b0a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3401b0a6:	ea43 0302 	orr.w	r3, r3, r2
3401b0aa:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3401b0ac:	d10f      	bne.n	3401b0ce <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3401b0ae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401b0b0:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
3401b0b4:	d004      	beq.n	3401b0c0 <UART_AdvFeatureConfig+0x1d0>
3401b0b6:	f640 511c 	movw	r1, #3356	@ 0xd1c
3401b0ba:	480f      	ldr	r0, [pc, #60]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401b0bc:	f004 faa0 	bl	3401f600 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3401b0c0:	6822      	ldr	r2, [r4, #0]
3401b0c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3401b0c4:	6853      	ldr	r3, [r2, #4]
3401b0c6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
3401b0ca:	430b      	orrs	r3, r1
3401b0cc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3401b0ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401b0d0:	061b      	lsls	r3, r3, #24
3401b0d2:	d50f      	bpl.n	3401b0f4 <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3401b0d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401b0d6:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3401b0da:	d004      	beq.n	3401b0e6 <UART_AdvFeatureConfig+0x1f6>
3401b0dc:	f640 5124 	movw	r1, #3364	@ 0xd24
3401b0e0:	4805      	ldr	r0, [pc, #20]	@ (3401b0f8 <UART_AdvFeatureConfig+0x208>)
3401b0e2:	f004 fa8d 	bl	3401f600 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3401b0e6:	6822      	ldr	r2, [r4, #0]
3401b0e8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401b0ea:	6853      	ldr	r3, [r2, #4]
3401b0ec:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
3401b0f0:	430b      	orrs	r3, r1
3401b0f2:	6053      	str	r3, [r2, #4]
}
3401b0f4:	bd10      	pop	{r4, pc}
3401b0f6:	bf00      	nop
3401b0f8:	3402f899 	.word	0x3402f899
3401b0fc:	52001000 	.word	0x52001000
3401b100:	50004400 	.word	0x50004400
3401b104:	50004800 	.word	0x50004800
3401b108:	50004c00 	.word	0x50004c00
3401b10c:	52001400 	.word	0x52001400
3401b110:	50007800 	.word	0x50007800
3401b114:	50007c00 	.word	0x50007c00
3401b118:	52001800 	.word	0x52001800
3401b11c:	52001c00 	.word	0x52001c00

3401b120 <UART_WaitOnFlagUntilTimeout>:
{
3401b120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401b124:	4604      	mov	r4, r0
3401b126:	460d      	mov	r5, r1
3401b128:	4617      	mov	r7, r2
3401b12a:	4698      	mov	r8, r3
3401b12c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3401b130:	6822      	ldr	r2, [r4, #0]
3401b132:	69d3      	ldr	r3, [r2, #28]
3401b134:	ea35 0303 	bics.w	r3, r5, r3
3401b138:	bf0c      	ite	eq
3401b13a:	2301      	moveq	r3, #1
3401b13c:	2300      	movne	r3, #0
3401b13e:	42bb      	cmp	r3, r7
3401b140:	d001      	beq.n	3401b146 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
3401b142:	2000      	movs	r0, #0
3401b144:	e022      	b.n	3401b18c <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
3401b146:	f1b9 3fff 	cmp.w	r9, #4294967295
3401b14a:	d0f2      	beq.n	3401b132 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401b14c:	f003 fec6 	bl	3401eedc <HAL_GetTick>
3401b150:	eba0 0008 	sub.w	r0, r0, r8
3401b154:	4548      	cmp	r0, r9
3401b156:	d829      	bhi.n	3401b1ac <UART_WaitOnFlagUntilTimeout+0x8c>
3401b158:	f1b9 0f00 	cmp.w	r9, #0
3401b15c:	d026      	beq.n	3401b1ac <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3401b15e:	6821      	ldr	r1, [r4, #0]
3401b160:	680b      	ldr	r3, [r1, #0]
3401b162:	075a      	lsls	r2, r3, #29
3401b164:	d5e4      	bpl.n	3401b130 <UART_WaitOnFlagUntilTimeout+0x10>
3401b166:	2d80      	cmp	r5, #128	@ 0x80
3401b168:	d0e2      	beq.n	3401b130 <UART_WaitOnFlagUntilTimeout+0x10>
3401b16a:	2d40      	cmp	r5, #64	@ 0x40
3401b16c:	d0e0      	beq.n	3401b130 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3401b16e:	69ce      	ldr	r6, [r1, #28]
3401b170:	f016 0608 	ands.w	r6, r6, #8
3401b174:	d00c      	beq.n	3401b190 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3401b176:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
3401b178:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3401b17a:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3401b17c:	f7ff fd10 	bl	3401aba0 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
3401b180:	2300      	movs	r3, #0
          return HAL_ERROR;
3401b182:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
3401b184:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
3401b188:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3401b18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3401b190:	69cb      	ldr	r3, [r1, #28]
3401b192:	051b      	lsls	r3, r3, #20
3401b194:	d5cc      	bpl.n	3401b130 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3401b196:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
3401b19a:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3401b19c:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
3401b19e:	f7ff fcff 	bl	3401aba0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3401b1a2:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
3401b1a4:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3401b1a8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
3401b1ac:	2003      	movs	r0, #3
3401b1ae:	e7ed      	b.n	3401b18c <UART_WaitOnFlagUntilTimeout+0x6c>

3401b1b0 <HAL_UART_Transmit>:
{
3401b1b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3401b1b4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
3401b1b6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
3401b1ba:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
3401b1bc:	2b20      	cmp	r3, #32
{
3401b1be:	460d      	mov	r5, r1
3401b1c0:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
3401b1c2:	d148      	bne.n	3401b256 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
3401b1c4:	2900      	cmp	r1, #0
3401b1c6:	d048      	beq.n	3401b25a <HAL_UART_Transmit+0xaa>
3401b1c8:	2a00      	cmp	r2, #0
3401b1ca:	d046      	beq.n	3401b25a <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
3401b1cc:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
3401b1ce:	f04f 0900 	mov.w	r9, #0
3401b1d2:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3401b1d6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
3401b1da:	f003 fe7f 	bl	3401eedc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401b1de:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
3401b1e0:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401b1e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
3401b1e8:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
3401b1ec:	4607      	mov	r7, r0
      pdata16bits = NULL;
3401b1ee:	464e      	mov	r6, r9
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401b1f0:	d103      	bne.n	3401b1fa <HAL_UART_Transmit+0x4a>
3401b1f2:	6923      	ldr	r3, [r4, #16]
3401b1f4:	b90b      	cbnz	r3, 3401b1fa <HAL_UART_Transmit+0x4a>
      pdata16bits = (const uint16_t *) pData;
3401b1f6:	462e      	mov	r6, r5
      pdata8bits  = NULL;
3401b1f8:	461d      	mov	r5, r3
    while (huart->TxXferCount > 0U)
3401b1fa:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3401b1fe:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
3401b200:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3401b202:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
3401b206:	b942      	cbnz	r2, 3401b21a <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3401b208:	2140      	movs	r1, #64	@ 0x40
3401b20a:	4620      	mov	r0, r4
3401b20c:	f7ff ff88 	bl	3401b120 <UART_WaitOnFlagUntilTimeout>
3401b210:	2320      	movs	r3, #32
3401b212:	b948      	cbnz	r0, 3401b228 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
3401b214:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
3401b218:	e009      	b.n	3401b22e <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3401b21a:	2200      	movs	r2, #0
3401b21c:	2180      	movs	r1, #128	@ 0x80
3401b21e:	4620      	mov	r0, r4
3401b220:	f7ff ff7e 	bl	3401b120 <UART_WaitOnFlagUntilTimeout>
3401b224:	b130      	cbz	r0, 3401b234 <HAL_UART_Transmit+0x84>
        huart->gState = HAL_UART_STATE_READY;
3401b226:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
3401b228:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
3401b22a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
3401b22e:	b003      	add	sp, #12
3401b230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3401b234:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
3401b236:	b95d      	cbnz	r5, 3401b250 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3401b238:	f836 3b02 	ldrh.w	r3, [r6], #2
3401b23c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3401b240:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
3401b242:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
3401b246:	3a01      	subs	r2, #1
3401b248:	b292      	uxth	r2, r2
3401b24a:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
3401b24e:	e7d4      	b.n	3401b1fa <HAL_UART_Transmit+0x4a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3401b250:	f815 3b01 	ldrb.w	r3, [r5], #1
3401b254:	e7f4      	b.n	3401b240 <HAL_UART_Transmit+0x90>
    return HAL_BUSY;
3401b256:	2002      	movs	r0, #2
3401b258:	e7e9      	b.n	3401b22e <HAL_UART_Transmit+0x7e>
      return  HAL_ERROR;
3401b25a:	2001      	movs	r0, #1
3401b25c:	e7e7      	b.n	3401b22e <HAL_UART_Transmit+0x7e>

3401b25e <UART_CheckIdleState>:
{
3401b25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3401b260:	2600      	movs	r6, #0
{
3401b262:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3401b264:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
3401b268:	f003 fe38 	bl	3401eedc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3401b26c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
3401b26e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3401b270:	681b      	ldr	r3, [r3, #0]
3401b272:	071a      	lsls	r2, r3, #28
3401b274:	d51c      	bpl.n	3401b2b0 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3401b276:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401b27a:	4632      	mov	r2, r6
3401b27c:	9300      	str	r3, [sp, #0]
3401b27e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3401b282:	4603      	mov	r3, r0
3401b284:	4620      	mov	r0, r4
3401b286:	f7ff ff4b 	bl	3401b120 <UART_WaitOnFlagUntilTimeout>
3401b28a:	b188      	cbz	r0, 3401b2b0 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3401b28c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401b28e:	e852 3f00 	ldrex	r3, [r2]
3401b292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401b296:	e842 3100 	strex	r1, r3, [r2]
3401b29a:	2900      	cmp	r1, #0
3401b29c:	d1f6      	bne.n	3401b28c <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
3401b29e:	2320      	movs	r3, #32
3401b2a0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
3401b2a4:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
3401b2a6:	2300      	movs	r3, #0
3401b2a8:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3401b2ac:	b002      	add	sp, #8
3401b2ae:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3401b2b0:	6823      	ldr	r3, [r4, #0]
3401b2b2:	681b      	ldr	r3, [r3, #0]
3401b2b4:	075b      	lsls	r3, r3, #29
3401b2b6:	d524      	bpl.n	3401b302 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3401b2b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401b2bc:	2200      	movs	r2, #0
3401b2be:	9300      	str	r3, [sp, #0]
3401b2c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3401b2c4:	462b      	mov	r3, r5
3401b2c6:	4620      	mov	r0, r4
3401b2c8:	f7ff ff2a 	bl	3401b120 <UART_WaitOnFlagUntilTimeout>
3401b2cc:	b1c8      	cbz	r0, 3401b302 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3401b2ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401b2d0:	e852 3f00 	ldrex	r3, [r2]
3401b2d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401b2d8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3401b2dc:	6822      	ldr	r2, [r4, #0]
3401b2de:	2900      	cmp	r1, #0
3401b2e0:	d1f5      	bne.n	3401b2ce <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401b2e2:	f102 0308 	add.w	r3, r2, #8
3401b2e6:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3401b2ea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401b2ee:	f102 0008 	add.w	r0, r2, #8
3401b2f2:	e840 3100 	strex	r1, r3, [r0]
3401b2f6:	2900      	cmp	r1, #0
3401b2f8:	d1f3      	bne.n	3401b2e2 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3401b2fa:	2320      	movs	r3, #32
3401b2fc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
3401b300:	e7d0      	b.n	3401b2a4 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
3401b302:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401b304:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
3401b306:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3401b30a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401b30e:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3401b310:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
3401b312:	e7c8      	b.n	3401b2a6 <UART_CheckIdleState+0x48>

3401b314 <HAL_UART_Init>:
{
3401b314:	b510      	push	{r4, lr}
  if (huart == NULL)
3401b316:	4604      	mov	r4, r0
3401b318:	2800      	cmp	r0, #0
3401b31a:	f000 80d0 	beq.w	3401b4be <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3401b31e:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3401b320:	6803      	ldr	r3, [r0, #0]
3401b322:	4a68      	ldr	r2, [pc, #416]	@ (3401b4c4 <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3401b324:	2900      	cmp	r1, #0
3401b326:	d07c      	beq.n	3401b422 <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3401b328:	4293      	cmp	r3, r2
3401b32a:	d04e      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b32c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b330:	4293      	cmp	r3, r2
3401b332:	d04a      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b334:	4a64      	ldr	r2, [pc, #400]	@ (3401b4c8 <HAL_UART_Init+0x1b4>)
3401b336:	4293      	cmp	r3, r2
3401b338:	d047      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b33a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b33e:	4293      	cmp	r3, r2
3401b340:	d043      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b342:	4a62      	ldr	r2, [pc, #392]	@ (3401b4cc <HAL_UART_Init+0x1b8>)
3401b344:	4293      	cmp	r3, r2
3401b346:	d040      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b348:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b34c:	4293      	cmp	r3, r2
3401b34e:	d03c      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b350:	4a5f      	ldr	r2, [pc, #380]	@ (3401b4d0 <HAL_UART_Init+0x1bc>)
3401b352:	4293      	cmp	r3, r2
3401b354:	d039      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b356:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b35a:	4293      	cmp	r3, r2
3401b35c:	d035      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b35e:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401b362:	d032      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b364:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401b368:	4293      	cmp	r3, r2
3401b36a:	d02e      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b36c:	4a59      	ldr	r2, [pc, #356]	@ (3401b4d4 <HAL_UART_Init+0x1c0>)
3401b36e:	4293      	cmp	r3, r2
3401b370:	d02b      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b372:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b376:	4293      	cmp	r3, r2
3401b378:	d027      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b37a:	4a57      	ldr	r2, [pc, #348]	@ (3401b4d8 <HAL_UART_Init+0x1c4>)
3401b37c:	4293      	cmp	r3, r2
3401b37e:	d024      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b380:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b384:	4293      	cmp	r3, r2
3401b386:	d020      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b388:	4a54      	ldr	r2, [pc, #336]	@ (3401b4dc <HAL_UART_Init+0x1c8>)
3401b38a:	4293      	cmp	r3, r2
3401b38c:	d01d      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b38e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b392:	4293      	cmp	r3, r2
3401b394:	d019      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b396:	4a52      	ldr	r2, [pc, #328]	@ (3401b4e0 <HAL_UART_Init+0x1cc>)
3401b398:	4293      	cmp	r3, r2
3401b39a:	d016      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b39c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b3a0:	4293      	cmp	r3, r2
3401b3a2:	d012      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b3a4:	4a4f      	ldr	r2, [pc, #316]	@ (3401b4e4 <HAL_UART_Init+0x1d0>)
3401b3a6:	4293      	cmp	r3, r2
3401b3a8:	d00f      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b3aa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b3ae:	4293      	cmp	r3, r2
3401b3b0:	d00b      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b3b2:	4a4d      	ldr	r2, [pc, #308]	@ (3401b4e8 <HAL_UART_Init+0x1d4>)
3401b3b4:	4293      	cmp	r3, r2
3401b3b6:	d008      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b3b8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b3bc:	4293      	cmp	r3, r2
3401b3be:	d004      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b3c0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3401b3c4:	4849      	ldr	r0, [pc, #292]	@ (3401b4ec <HAL_UART_Init+0x1d8>)
3401b3c6:	f004 f91b 	bl	3401f600 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3401b3ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3401b3ce:	b923      	cbnz	r3, 3401b3da <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
3401b3d0:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
3401b3d2:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3401b3d6:	f7ff fc0f 	bl	3401abf8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3401b3da:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
3401b3dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3401b3de:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
3401b3e2:	6813      	ldr	r3, [r2, #0]
3401b3e4:	f023 0301 	bic.w	r3, r3, #1
3401b3e8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3401b3ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401b3ec:	b113      	cbz	r3, 3401b3f4 <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
3401b3ee:	4620      	mov	r0, r4
3401b3f0:	f7ff fd7e 	bl	3401aef0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
3401b3f4:	4620      	mov	r0, r4
3401b3f6:	f7ff fc01 	bl	3401abfc <UART_SetConfig>
3401b3fa:	2801      	cmp	r0, #1
3401b3fc:	d05f      	beq.n	3401b4be <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3401b3fe:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
3401b400:	4620      	mov	r0, r4
}
3401b402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3401b406:	685a      	ldr	r2, [r3, #4]
3401b408:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3401b40c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3401b40e:	689a      	ldr	r2, [r3, #8]
3401b410:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3401b414:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3401b416:	681a      	ldr	r2, [r3, #0]
3401b418:	f042 0201 	orr.w	r2, r2, #1
3401b41c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
3401b41e:	f7ff bf1e 	b.w	3401b25e <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3401b422:	4293      	cmp	r3, r2
3401b424:	d0d1      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b426:	4a32      	ldr	r2, [pc, #200]	@ (3401b4f0 <HAL_UART_Init+0x1dc>)
3401b428:	4293      	cmp	r3, r2
3401b42a:	d0ce      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b42c:	4a26      	ldr	r2, [pc, #152]	@ (3401b4c8 <HAL_UART_Init+0x1b4>)
3401b42e:	4293      	cmp	r3, r2
3401b430:	d0cb      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b432:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b436:	4293      	cmp	r3, r2
3401b438:	d0c7      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b43a:	4a24      	ldr	r2, [pc, #144]	@ (3401b4cc <HAL_UART_Init+0x1b8>)
3401b43c:	4293      	cmp	r3, r2
3401b43e:	d0c4      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b440:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b444:	4293      	cmp	r3, r2
3401b446:	d0c0      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b448:	4a21      	ldr	r2, [pc, #132]	@ (3401b4d0 <HAL_UART_Init+0x1bc>)
3401b44a:	4293      	cmp	r3, r2
3401b44c:	d0bd      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b44e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b452:	4293      	cmp	r3, r2
3401b454:	d0b9      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b456:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401b45a:	d0b6      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b45c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401b460:	4293      	cmp	r3, r2
3401b462:	d0b2      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b464:	4a1b      	ldr	r2, [pc, #108]	@ (3401b4d4 <HAL_UART_Init+0x1c0>)
3401b466:	4293      	cmp	r3, r2
3401b468:	d0af      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b46a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b46e:	4293      	cmp	r3, r2
3401b470:	d0ab      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b472:	4a19      	ldr	r2, [pc, #100]	@ (3401b4d8 <HAL_UART_Init+0x1c4>)
3401b474:	4293      	cmp	r3, r2
3401b476:	d0a8      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b478:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b47c:	4293      	cmp	r3, r2
3401b47e:	d0a4      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b480:	4a16      	ldr	r2, [pc, #88]	@ (3401b4dc <HAL_UART_Init+0x1c8>)
3401b482:	4293      	cmp	r3, r2
3401b484:	d0a1      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b486:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b48a:	4293      	cmp	r3, r2
3401b48c:	d09d      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b48e:	4a14      	ldr	r2, [pc, #80]	@ (3401b4e0 <HAL_UART_Init+0x1cc>)
3401b490:	4293      	cmp	r3, r2
3401b492:	d09a      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b494:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b498:	4293      	cmp	r3, r2
3401b49a:	d096      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b49c:	4a11      	ldr	r2, [pc, #68]	@ (3401b4e4 <HAL_UART_Init+0x1d0>)
3401b49e:	4293      	cmp	r3, r2
3401b4a0:	d093      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b4a2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b4a6:	4293      	cmp	r3, r2
3401b4a8:	d08f      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b4aa:	4a0f      	ldr	r2, [pc, #60]	@ (3401b4e8 <HAL_UART_Init+0x1d4>)
3401b4ac:	4293      	cmp	r3, r2
3401b4ae:	d08c      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b4b0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b4b4:	4293      	cmp	r3, r2
3401b4b6:	d088      	beq.n	3401b3ca <HAL_UART_Init+0xb6>
3401b4b8:	f240 1145 	movw	r1, #325	@ 0x145
3401b4bc:	e782      	b.n	3401b3c4 <HAL_UART_Init+0xb0>
}
3401b4be:	2001      	movs	r0, #1
3401b4c0:	bd10      	pop	{r4, pc}
3401b4c2:	bf00      	nop
3401b4c4:	52001000 	.word	0x52001000
3401b4c8:	50004400 	.word	0x50004400
3401b4cc:	50004800 	.word	0x50004800
3401b4d0:	50004c00 	.word	0x50004c00
3401b4d4:	52001400 	.word	0x52001400
3401b4d8:	50007800 	.word	0x50007800
3401b4dc:	50007c00 	.word	0x50007c00
3401b4e0:	52001800 	.word	0x52001800
3401b4e4:	52001c00 	.word	0x52001c00
3401b4e8:	56000c00 	.word	0x56000c00
3401b4ec:	3402f899 	.word	0x3402f899
3401b4f0:	42001000 	.word	0x42001000

3401b4f4 <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401b4f4:	6802      	ldr	r2, [r0, #0]
{
3401b4f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401b4fa:	6813      	ldr	r3, [r2, #0]
{
3401b4fc:	4605      	mov	r5, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401b4fe:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401b502:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3401b504:	6883      	ldr	r3, [r0, #8]
{
3401b506:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3401b508:	b97b      	cbnz	r3, 3401b52a <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3401b50a:	684b      	ldr	r3, [r1, #4]
3401b50c:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3401b510:	d004      	beq.n	3401b51c <XSPI_ConfigCmd+0x28>
3401b512:	f640 41a2 	movw	r1, #3234	@ 0xca2
3401b516:	4886      	ldr	r0, [pc, #536]	@ (3401b730 <XSPI_ConfigCmd+0x23c>)
3401b518:	f004 f872 	bl	3401f600 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3401b51c:	682a      	ldr	r2, [r5, #0]
3401b51e:	6861      	ldr	r1, [r4, #4]
3401b520:	6813      	ldr	r3, [r2, #0]
3401b522:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
3401b526:	430b      	orrs	r3, r1
3401b528:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401b52a:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3401b52c:	682a      	ldr	r2, [r5, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401b52e:	2b02      	cmp	r3, #2
3401b530:	d16f      	bne.n	3401b612 <XSPI_ConfigCmd+0x11e>
    ccr_reg = &(hxspi->Instance->WCCR);
3401b532:	f502 71c0 	add.w	r1, r2, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
3401b536:	f502 76c4 	add.w	r6, r2, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
3401b53a:	f502 70c8 	add.w	r0, r2, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
3401b53e:	f502 73d0 	add.w	r3, r2, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3401b542:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
3401b544:	600f      	str	r7, [r1, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3401b546:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
3401b548:	b167      	cbz	r7, 3401b564 <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3401b54a:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3401b54c:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3401b54e:	6b67      	ldr	r7, [r4, #52]	@ 0x34
3401b550:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401b552:	f8d1 c000 	ldr.w	ip, [r1]
3401b556:	433b      	orrs	r3, r7
3401b558:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3401b55a:	433b      	orrs	r3, r7
3401b55c:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
3401b560:	433b      	orrs	r3, r7
3401b562:	600b      	str	r3, [r1, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3401b564:	6833      	ldr	r3, [r6, #0]
3401b566:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3401b568:	f023 031f 	bic.w	r3, r3, #31
3401b56c:	433b      	orrs	r3, r7
3401b56e:	6033      	str	r3, [r6, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b570:	f8d4 a038 	ldr.w	sl, [r4, #56]	@ 0x38
3401b574:	f1ba 0f00 	cmp.w	sl, #0
3401b578:	d00e      	beq.n	3401b598 <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401b57a:	6823      	ldr	r3, [r4, #0]
3401b57c:	b913      	cbnz	r3, 3401b584 <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3401b57e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401b580:	3b01      	subs	r3, #1
3401b582:	6413      	str	r3, [r2, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3401b584:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401b586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3401b58a:	d156      	bne.n	3401b63a <XSPI_ConfigCmd+0x146>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3401b58c:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
3401b590:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3401b594:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401b598:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401b59a:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401b59e:	2b00      	cmp	r3, #0
3401b5a0:	f000 8097 	beq.w	3401b6d2 <XSPI_ConfigCmd+0x1de>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b5a4:	e9d4 e804 	ldrd	lr, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401b5a8:	f1b9 0f00 	cmp.w	r9, #0
3401b5ac:	d06d      	beq.n	3401b68a <XSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b5ae:	e9d4 7c08 	ldrd	r7, ip, [r4, #32]
3401b5b2:	680e      	ldr	r6, [r1, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b5b4:	f1ba 0f00 	cmp.w	sl, #0
3401b5b8:	d048      	beq.n	3401b64c <XSPI_ConfigCmd+0x158>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b5ba:	ea4a 0303 	orr.w	r3, sl, r3
3401b5be:	ea43 0309 	orr.w	r3, r3, r9
3401b5c2:	ea43 0308 	orr.w	r3, r3, r8
3401b5c6:	ea43 030e 	orr.w	r3, r3, lr
3401b5ca:	ea43 030c 	orr.w	r3, r3, ip
3401b5ce:	433b      	orrs	r3, r7
3401b5d0:	6c27      	ldr	r7, [r4, #64]	@ 0x40
3401b5d2:	433b      	orrs	r3, r7
3401b5d4:	4f57      	ldr	r7, [pc, #348]	@ (3401b734 <XSPI_ConfigCmd+0x240>)
3401b5d6:	4037      	ands	r7, r6
3401b5d8:	433b      	orrs	r3, r7
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* DDTR bit should be activated */
        if (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE)
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401b5da:	600b      	str	r3, [r1, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3401b5dc:	68a3      	ldr	r3, [r4, #8]
3401b5de:	6003      	str	r3, [r0, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
3401b5e0:	69a3      	ldr	r3, [r4, #24]

      if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401b5e2:	6821      	ldr	r1, [r4, #0]
      hxspi->Instance->AR = pCmd->Address;
3401b5e4:	6493      	str	r3, [r2, #72]	@ 0x48
      if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401b5e6:	2900      	cmp	r1, #0
3401b5e8:	d046      	beq.n	3401b678 <XSPI_ConfigCmd+0x184>
  HAL_StatusTypeDef status = HAL_OK;
3401b5ea:	2600      	movs	r6, #0
      status = HAL_ERROR;
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b5ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401b5ee:	b16b      	cbz	r3, 3401b60c <XSPI_ConfigCmd+0x118>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401b5f0:	6823      	ldr	r3, [r4, #0]
3401b5f2:	b95b      	cbnz	r3, 3401b60c <XSPI_ConfigCmd+0x118>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3401b5f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401b5f6:	682a      	ldr	r2, [r5, #0]
3401b5f8:	3b01      	subs	r3, #1
3401b5fa:	6413      	str	r3, [r2, #64]	@ 0x40

      /* Verify if programmed data fit with requirement of Reference Manual 28.5 chapter */
      assert_param(IS_XSPI_PROG_DATA(hxspi->Instance->DLR, (pCmd->DataLength - 1U)));
3401b5fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3401b5fe:	4293      	cmp	r3, r2
3401b600:	d004      	beq.n	3401b60c <XSPI_ConfigCmd+0x118>
3401b602:	f640 5164 	movw	r1, #3428	@ 0xd64
3401b606:	484a      	ldr	r0, [pc, #296]	@ (3401b730 <XSPI_ConfigCmd+0x23c>)
3401b608:	f003 fffa 	bl	3401f600 <assert_failed>
    }
  }

  return status;
}
3401b60c:	4630      	mov	r0, r6
3401b60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3401b612:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
3401b614:	bf01      	itttt	eq
3401b616:	f502 71a0 	addeq.w	r1, r2, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
3401b61a:	f502 76a4 	addeq.w	r6, r2, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
3401b61e:	f502 70a8 	addeq.w	r0, r2, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
3401b622:	f502 73b0 	addeq.w	r3, r2, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
3401b626:	bf1f      	itttt	ne
3401b628:	f502 7180 	addne.w	r1, r2, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
3401b62c:	f502 7684 	addne.w	r6, r2, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
3401b630:	f502 7088 	addne.w	r0, r2, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
3401b634:	f502 7390 	addne.w	r3, r2, #288	@ 0x120
3401b638:	e783      	b.n	3401b542 <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3401b63a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
3401b63c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401b640:	d1aa      	bne.n	3401b598 <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3401b642:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
3401b646:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401b64a:	e7a3      	b.n	3401b594 <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b64c:	ea43 0309 	orr.w	r3, r3, r9
3401b650:	ea43 0308 	orr.w	r3, r3, r8
3401b654:	ea43 030e 	orr.w	r3, r3, lr
3401b658:	ea43 030c 	orr.w	r3, r3, ip
3401b65c:	f426 567c 	bic.w	r6, r6, #16128	@ 0x3f00
3401b660:	433b      	orrs	r3, r7
3401b662:	f026 063f 	bic.w	r6, r6, #63	@ 0x3f
3401b666:	4333      	orrs	r3, r6
3401b668:	600b      	str	r3, [r1, #0]
        if (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE)
3401b66a:	6963      	ldr	r3, [r4, #20]
3401b66c:	2b08      	cmp	r3, #8
3401b66e:	d1b5      	bne.n	3401b5dc <XSPI_ConfigCmd+0xe8>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401b670:	680b      	ldr	r3, [r1, #0]
3401b672:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3401b676:	e7b0      	b.n	3401b5da <XSPI_ConfigCmd+0xe6>
        assert_param(IS_XSPI_PROG_ADDR(hxspi->Instance->AR, pCmd->Address));
3401b678:	6c92      	ldr	r2, [r2, #72]	@ 0x48
3401b67a:	4293      	cmp	r3, r2
3401b67c:	d0b5      	beq.n	3401b5ea <XSPI_ConfigCmd+0xf6>
3401b67e:	f640 5111 	movw	r1, #3345	@ 0xd11
        assert_param(IS_XSPI_PROG_ADDR(hxspi->Instance->AR, pCmd->Address));
3401b682:	482b      	ldr	r0, [pc, #172]	@ (3401b730 <XSPI_ConfigCmd+0x23c>)
3401b684:	f003 ffbc 	bl	3401f600 <assert_failed>
3401b688:	e7af      	b.n	3401b5ea <XSPI_ConfigCmd+0xf6>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3401b68a:	680a      	ldr	r2, [r1, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b68c:	f1ba 0f00 	cmp.w	sl, #0
3401b690:	d010      	beq.n	3401b6b4 <XSPI_ConfigCmd+0x1c0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3401b692:	ea4a 0303 	orr.w	r3, sl, r3
3401b696:	6c26      	ldr	r6, [r4, #64]	@ 0x40
3401b698:	ea43 0308 	orr.w	r3, r3, r8
3401b69c:	ea43 030e 	orr.w	r3, r3, lr
3401b6a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
3401b6a4:	4333      	orrs	r3, r6
3401b6a6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
3401b6aa:	4313      	orrs	r3, r2
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401b6ac:	600b      	str	r3, [r1, #0]
      *ir_reg = pCmd->Instruction;
3401b6ae:	68a3      	ldr	r3, [r4, #8]
3401b6b0:	6003      	str	r3, [r0, #0]
3401b6b2:	e79a      	b.n	3401b5ea <XSPI_ConfigCmd+0xf6>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3401b6b4:	ea43 0308 	orr.w	r3, r3, r8
3401b6b8:	ea43 030e 	orr.w	r3, r3, lr
3401b6bc:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
3401b6c0:	4313      	orrs	r3, r2
3401b6c2:	600b      	str	r3, [r1, #0]
        if (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE)
3401b6c4:	6963      	ldr	r3, [r4, #20]
3401b6c6:	2b08      	cmp	r3, #8
3401b6c8:	d1f1      	bne.n	3401b6ae <XSPI_ConfigCmd+0x1ba>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401b6ca:	680b      	ldr	r3, [r1, #0]
3401b6cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3401b6d0:	e7ec      	b.n	3401b6ac <XSPI_ConfigCmd+0x1b8>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401b6d2:	f1b9 0f00 	cmp.w	r9, #0
3401b6d6:	d027      	beq.n	3401b728 <XSPI_ConfigCmd+0x234>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b6d8:	e9d4 7008 	ldrd	r7, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b6dc:	f1ba 0f00 	cmp.w	sl, #0
3401b6e0:	d019      	beq.n	3401b716 <XSPI_ConfigCmd+0x222>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3401b6e2:	ea4a 0309 	orr.w	r3, sl, r9
3401b6e6:	680e      	ldr	r6, [r1, #0]
3401b6e8:	4303      	orrs	r3, r0
3401b6ea:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3401b6ec:	433b      	orrs	r3, r7
3401b6ee:	4303      	orrs	r3, r0
3401b6f0:	f026 6070 	bic.w	r0, r6, #251658240	@ 0xf000000
3401b6f4:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
3401b6f8:	4303      	orrs	r3, r0
3401b6fa:	600b      	str	r3, [r1, #0]
      hxspi->Instance->AR = pCmd->Address;
3401b6fc:	69a3      	ldr	r3, [r4, #24]
      if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401b6fe:	6821      	ldr	r1, [r4, #0]
      hxspi->Instance->AR = pCmd->Address;
3401b700:	6493      	str	r3, [r2, #72]	@ 0x48
      if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401b702:	2900      	cmp	r1, #0
3401b704:	f47f af71 	bne.w	3401b5ea <XSPI_ConfigCmd+0xf6>
        assert_param(IS_XSPI_PROG_ADDR(hxspi->Instance->AR, pCmd->Address));
3401b708:	6c92      	ldr	r2, [r2, #72]	@ 0x48
3401b70a:	4293      	cmp	r3, r2
3401b70c:	f43f af6d 	beq.w	3401b5ea <XSPI_ConfigCmd+0xf6>
3401b710:	f640 5151 	movw	r1, #3409	@ 0xd51
3401b714:	e7b5      	b.n	3401b682 <XSPI_ConfigCmd+0x18e>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3401b716:	680b      	ldr	r3, [r1, #0]
3401b718:	ea40 0009 	orr.w	r0, r0, r9
3401b71c:	4338      	orrs	r0, r7
3401b71e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3401b722:	4318      	orrs	r0, r3
3401b724:	6008      	str	r0, [r1, #0]
3401b726:	e7e9      	b.n	3401b6fc <XSPI_ConfigCmd+0x208>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401b728:	2308      	movs	r3, #8
      status = HAL_ERROR;
3401b72a:	2601      	movs	r6, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401b72c:	65eb      	str	r3, [r5, #92]	@ 0x5c
3401b72e:	e75d      	b.n	3401b5ec <XSPI_ConfigCmd+0xf8>
3401b730:	3402f90e 	.word	0x3402f90e
3401b734:	f0ffc0c0 	.word	0xf0ffc0c0

3401b738 <XSPI_WaitFlagStateUntilTimeout>:
{
3401b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401b73c:	4604      	mov	r4, r0
3401b73e:	460e      	mov	r6, r1
3401b740:	4615      	mov	r5, r2
3401b742:	461f      	mov	r7, r3
3401b744:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3401b748:	6822      	ldr	r2, [r4, #0]
3401b74a:	6a13      	ldr	r3, [r2, #32]
3401b74c:	4233      	tst	r3, r6
3401b74e:	bf14      	ite	ne
3401b750:	2301      	movne	r3, #1
3401b752:	2300      	moveq	r3, #0
3401b754:	42ab      	cmp	r3, r5
3401b756:	d101      	bne.n	3401b75c <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
3401b758:	2000      	movs	r0, #0
3401b75a:	e00e      	b.n	3401b77a <XSPI_WaitFlagStateUntilTimeout+0x42>
    if (Timeout != HAL_MAX_DELAY)
3401b75c:	f1b8 3fff 	cmp.w	r8, #4294967295
3401b760:	d0f3      	beq.n	3401b74a <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401b762:	f003 fbbb 	bl	3401eedc <HAL_GetTick>
3401b766:	1bc0      	subs	r0, r0, r7
3401b768:	4540      	cmp	r0, r8
3401b76a:	d908      	bls.n	3401b77e <XSPI_WaitFlagStateUntilTimeout+0x46>
        hxspi->State     = HAL_XSPI_STATE_READY;
3401b76c:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3401b76e:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
3401b770:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3401b772:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3401b774:	f043 0301 	orr.w	r3, r3, #1
3401b778:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
3401b77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401b77e:	f1b8 0f00 	cmp.w	r8, #0
3401b782:	d1e1      	bne.n	3401b748 <XSPI_WaitFlagStateUntilTimeout+0x10>
3401b784:	e7f2      	b.n	3401b76c <XSPI_WaitFlagStateUntilTimeout+0x34>

3401b786 <HAL_XSPI_MspInit>:
}
3401b786:	4770      	bx	lr

3401b788 <HAL_XSPI_Init>:
{
3401b788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401b78a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3401b78c:	f003 fba6 	bl	3401eedc <HAL_GetTick>
3401b790:	4606      	mov	r6, r0
  if (hxspi == NULL)
3401b792:	2c00      	cmp	r4, #0
3401b794:	f000 811f 	beq.w	3401b9d6 <HAL_XSPI_Init+0x24e>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3401b798:	68a3      	ldr	r3, [r4, #8]
3401b79a:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3401b79e:	d004      	beq.n	3401b7aa <HAL_XSPI_Init+0x22>
3401b7a0:	f240 1161 	movw	r1, #353	@ 0x161
3401b7a4:	488d      	ldr	r0, [pc, #564]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b7a6:	f003 ff2b 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3401b7aa:	68e3      	ldr	r3, [r4, #12]
3401b7ac:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
3401b7b0:	d009      	beq.n	3401b7c6 <HAL_XSPI_Init+0x3e>
3401b7b2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3401b7b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401b7ba:	d004      	beq.n	3401b7c6 <HAL_XSPI_Init+0x3e>
3401b7bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401b7c0:	4886      	ldr	r0, [pc, #536]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b7c2:	f003 ff1d 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3401b7c6:	6923      	ldr	r3, [r4, #16]
3401b7c8:	2b1f      	cmp	r3, #31
3401b7ca:	d904      	bls.n	3401b7d6 <HAL_XSPI_Init+0x4e>
3401b7cc:	f240 1163 	movw	r1, #355	@ 0x163
3401b7d0:	4882      	ldr	r0, [pc, #520]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b7d2:	f003 ff15 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3401b7d6:	6963      	ldr	r3, [r4, #20]
3401b7d8:	3b01      	subs	r3, #1
3401b7da:	2b3f      	cmp	r3, #63	@ 0x3f
3401b7dc:	d904      	bls.n	3401b7e8 <HAL_XSPI_Init+0x60>
3401b7de:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3401b7e2:	487e      	ldr	r0, [pc, #504]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b7e4:	f003 ff0c 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
3401b7e8:	69a3      	ldr	r3, [r4, #24]
3401b7ea:	f033 0302 	bics.w	r3, r3, #2
3401b7ee:	d004      	beq.n	3401b7fa <HAL_XSPI_Init+0x72>
3401b7f0:	f240 1165 	movw	r1, #357	@ 0x165
3401b7f4:	4879      	ldr	r0, [pc, #484]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b7f6:	f003 ff03 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3401b7fa:	69e3      	ldr	r3, [r4, #28]
3401b7fc:	2b01      	cmp	r3, #1
3401b7fe:	d904      	bls.n	3401b80a <HAL_XSPI_Init+0x82>
3401b800:	f44f 71b3 	mov.w	r1, #358	@ 0x166
3401b804:	4875      	ldr	r0, [pc, #468]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b806:	f003 fefb 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3401b80a:	6a23      	ldr	r3, [r4, #32]
3401b80c:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
3401b810:	d00c      	beq.n	3401b82c <HAL_XSPI_Init+0xa4>
3401b812:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3401b816:	d009      	beq.n	3401b82c <HAL_XSPI_Init+0xa4>
3401b818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401b81c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401b820:	d004      	beq.n	3401b82c <HAL_XSPI_Init+0xa4>
3401b822:	f240 1167 	movw	r1, #359	@ 0x167
3401b826:	486d      	ldr	r0, [pc, #436]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b828:	f003 feea 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
3401b82c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401b82e:	2bff      	cmp	r3, #255	@ 0xff
3401b830:	d904      	bls.n	3401b83c <HAL_XSPI_Init+0xb4>
3401b832:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3401b836:	4869      	ldr	r0, [pc, #420]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b838:	f003 fee2 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
3401b83c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401b83e:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
3401b842:	d004      	beq.n	3401b84e <HAL_XSPI_Init+0xc6>
3401b844:	f240 1169 	movw	r1, #361	@ 0x169
3401b848:	4864      	ldr	r0, [pc, #400]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b84a:	f003 fed9 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
3401b84e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3401b850:	2b1f      	cmp	r3, #31
3401b852:	d904      	bls.n	3401b85e <HAL_XSPI_Init+0xd6>
3401b854:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3401b858:	4860      	ldr	r0, [pc, #384]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b85a:	f003 fed1 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
3401b85e:	6863      	ldr	r3, [r4, #4]
3401b860:	3b01      	subs	r3, #1
3401b862:	2b3f      	cmp	r3, #63	@ 0x3f
3401b864:	d904      	bls.n	3401b870 <HAL_XSPI_Init+0xe8>
3401b866:	f240 116b 	movw	r1, #363	@ 0x16b
3401b86a:	485c      	ldr	r0, [pc, #368]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b86c:	f003 fec8 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3401b870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401b872:	2bff      	cmp	r3, #255	@ 0xff
3401b874:	d904      	bls.n	3401b880 <HAL_XSPI_Init+0xf8>
3401b876:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3401b87a:	4858      	ldr	r0, [pc, #352]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b87c:	f003 fec0 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3401b880:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401b882:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3401b886:	d004      	beq.n	3401b892 <HAL_XSPI_Init+0x10a>
3401b888:	f240 116d 	movw	r1, #365	@ 0x16d
3401b88c:	4853      	ldr	r0, [pc, #332]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b88e:	f003 feb7 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
3401b892:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401b894:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3401b898:	d004      	beq.n	3401b8a4 <HAL_XSPI_Init+0x11c>
3401b89a:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3401b89e:	484f      	ldr	r0, [pc, #316]	@ (3401b9dc <HAL_XSPI_Init+0x254>)
3401b8a0:	f003 feae 	bl	3401f600 <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3401b8a4:	2300      	movs	r3, #0
3401b8a6:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3401b8a8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3401b8aa:	2f00      	cmp	r7, #0
3401b8ac:	f040 8085 	bne.w	3401b9ba <HAL_XSPI_Init+0x232>
      HAL_XSPI_MspInit(hxspi);
3401b8b0:	4620      	mov	r0, r4
3401b8b2:	f7ff ff68 	bl	3401b786 <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
3401b8b6:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3401b8ba:	69e3      	ldr	r3, [r4, #28]
3401b8bc:	68e5      	ldr	r5, [r4, #12]
3401b8be:	6821      	ldr	r1, [r4, #0]
3401b8c0:	431d      	orrs	r5, r3
3401b8c2:	6923      	ldr	r3, [r4, #16]
3401b8c4:	6888      	ldr	r0, [r1, #8]
3401b8c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3401b8ca:	4b45      	ldr	r3, [pc, #276]	@ (3401b9e0 <HAL_XSPI_Init+0x258>)
  hxspi->Timeout = Timeout;
3401b8cc:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
3401b8ce:	4003      	ands	r3, r0
3401b8d0:	431d      	orrs	r5, r3
3401b8d2:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3401b8d4:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
3401b8d6:	3b01      	subs	r3, #1
3401b8d8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3401b8dc:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3401b8de:	68cb      	ldr	r3, [r1, #12]
3401b8e0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3401b8e4:	4303      	orrs	r3, r0
3401b8e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3401b8e8:	690b      	ldr	r3, [r1, #16]
3401b8ea:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3401b8ec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3401b8f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401b8f4:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3401b8f6:	690b      	ldr	r3, [r1, #16]
3401b8f8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3401b8fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3401b8fe:	4303      	orrs	r3, r0
3401b900:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3401b902:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3401b904:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3401b906:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3401b908:	680b      	ldr	r3, [r1, #0]
3401b90a:	3801      	subs	r0, #1
3401b90c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3401b910:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
3401b914:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401b916:	4620      	mov	r0, r4
3401b918:	9200      	str	r2, [sp, #0]
3401b91a:	4633      	mov	r3, r6
3401b91c:	463a      	mov	r2, r7
3401b91e:	2120      	movs	r1, #32
3401b920:	f7ff ff0a 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3401b924:	2800      	cmp	r0, #0
3401b926:	d154      	bne.n	3401b9d2 <HAL_XSPI_Init+0x24a>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3401b928:	6823      	ldr	r3, [r4, #0]
3401b92a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401b92c:	68da      	ldr	r2, [r3, #12]
3401b92e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
3401b932:	430a      	orrs	r2, r1
3401b934:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3401b936:	4a2b      	ldr	r2, [pc, #172]	@ (3401b9e4 <HAL_XSPI_Init+0x25c>)
3401b938:	4293      	cmp	r3, r2
3401b93a:	d040      	beq.n	3401b9be <HAL_XSPI_Init+0x236>
3401b93c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b940:	4293      	cmp	r3, r2
3401b942:	d03c      	beq.n	3401b9be <HAL_XSPI_Init+0x236>
3401b944:	4a28      	ldr	r2, [pc, #160]	@ (3401b9e8 <HAL_XSPI_Init+0x260>)
3401b946:	4293      	cmp	r3, r2
3401b948:	d039      	beq.n	3401b9be <HAL_XSPI_Init+0x236>
3401b94a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b94e:	4293      	cmp	r3, r2
3401b950:	d035      	beq.n	3401b9be <HAL_XSPI_Init+0x236>
3401b952:	4a26      	ldr	r2, [pc, #152]	@ (3401b9ec <HAL_XSPI_Init+0x264>)
3401b954:	4293      	cmp	r3, r2
3401b956:	d032      	beq.n	3401b9be <HAL_XSPI_Init+0x236>
3401b958:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b95c:	4293      	cmp	r3, r2
3401b95e:	d02e      	beq.n	3401b9be <HAL_XSPI_Init+0x236>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3401b960:	6823      	ldr	r3, [r4, #0]
3401b962:	68a2      	ldr	r2, [r4, #8]
3401b964:	6819      	ldr	r1, [r3, #0]
3401b966:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
3401b968:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3401b96c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3401b970:	4302      	orrs	r2, r0
3401b972:	430a      	orrs	r2, r1
3401b974:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT), hxspi->Init.SampleShifting);
3401b976:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3401b97a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
3401b97c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
3401b980:	430a      	orrs	r2, r1
3401b982:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3401b986:	681a      	ldr	r2, [r3, #0]
3401b988:	f042 0201 	orr.w	r2, r2, #1
3401b98c:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3401b98e:	69a2      	ldr	r2, [r4, #24]
3401b990:	2a02      	cmp	r2, #2
3401b992:	d103      	bne.n	3401b99c <HAL_XSPI_Init+0x214>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3401b994:	689a      	ldr	r2, [r3, #8]
3401b996:	f042 0202 	orr.w	r2, r2, #2
3401b99a:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3401b99c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3401b99e:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3401b9a2:	bf02      	ittt	eq
3401b9a4:	689a      	ldreq	r2, [r3, #8]
3401b9a6:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
3401b9aa:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401b9ac:	68e3      	ldr	r3, [r4, #12]
3401b9ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3401b9b2:	bf0c      	ite	eq
3401b9b4:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3401b9b6:	2302      	movne	r3, #2
3401b9b8:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
3401b9ba:	2000      	movs	r0, #0
3401b9bc:	e009      	b.n	3401b9d2 <HAL_XSPI_Init+0x24a>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401b9be:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3401b9c0:	2200      	movs	r2, #0
3401b9c2:	9300      	str	r3, [sp, #0]
3401b9c4:	2120      	movs	r1, #32
3401b9c6:	4633      	mov	r3, r6
3401b9c8:	4620      	mov	r0, r4
3401b9ca:	f7ff feb5 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
3401b9ce:	2800      	cmp	r0, #0
3401b9d0:	d0c6      	beq.n	3401b960 <HAL_XSPI_Init+0x1d8>
}
3401b9d2:	b003      	add	sp, #12
3401b9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3401b9d6:	2001      	movs	r0, #1
3401b9d8:	e7fb      	b.n	3401b9d2 <HAL_XSPI_Init+0x24a>
3401b9da:	bf00      	nop
3401b9dc:	3402f90e 	.word	0x3402f90e
3401b9e0:	f8e0c0fc 	.word	0xf8e0c0fc
3401b9e4:	58025000 	.word	0x58025000
3401b9e8:	5802a000 	.word	0x5802a000
3401b9ec:	5802d000 	.word	0x5802d000

3401b9f0 <HAL_XSPI_Command>:
{
3401b9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401b9f2:	460c      	mov	r4, r1
3401b9f4:	4605      	mov	r5, r0
3401b9f6:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3401b9f8:	f003 fa70 	bl	3401eedc <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3401b9fc:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401b9fe:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3401ba00:	2b03      	cmp	r3, #3
3401ba02:	d904      	bls.n	3401ba0e <HAL_XSPI_Command+0x1e>
3401ba04:	f44f 714f 	mov.w	r1, #828	@ 0x33c
3401ba08:	4884      	ldr	r0, [pc, #528]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401ba0a:	f003 fdf9 	bl	3401f600 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3401ba0e:	68ab      	ldr	r3, [r5, #8]
3401ba10:	b943      	cbnz	r3, 3401ba24 <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3401ba12:	6863      	ldr	r3, [r4, #4]
3401ba14:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3401ba18:	d004      	beq.n	3401ba24 <HAL_XSPI_Command+0x34>
3401ba1a:	f240 313f 	movw	r1, #831	@ 0x33f
3401ba1e:	487f      	ldr	r0, [pc, #508]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401ba20:	f003 fdee 	bl	3401f600 <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3401ba24:	68e3      	ldr	r3, [r4, #12]
3401ba26:	2b04      	cmp	r3, #4
3401ba28:	d904      	bls.n	3401ba34 <HAL_XSPI_Command+0x44>
3401ba2a:	f240 3142 	movw	r1, #834	@ 0x342
3401ba2e:	487b      	ldr	r0, [pc, #492]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401ba30:	f003 fde6 	bl	3401f600 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401ba34:	68e3      	ldr	r3, [r4, #12]
3401ba36:	b18b      	cbz	r3, 3401ba5c <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
3401ba38:	6923      	ldr	r3, [r4, #16]
3401ba3a:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3401ba3e:	d004      	beq.n	3401ba4a <HAL_XSPI_Command+0x5a>
3401ba40:	f240 3145 	movw	r1, #837	@ 0x345
3401ba44:	4875      	ldr	r0, [pc, #468]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401ba46:	f003 fddb 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3401ba4a:	6963      	ldr	r3, [r4, #20]
3401ba4c:	f033 0308 	bics.w	r3, r3, #8
3401ba50:	d004      	beq.n	3401ba5c <HAL_XSPI_Command+0x6c>
3401ba52:	f240 3146 	movw	r1, #838	@ 0x346
3401ba56:	4871      	ldr	r0, [pc, #452]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401ba58:	f003 fdd2 	bl	3401f600 <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3401ba5c:	69e3      	ldr	r3, [r4, #28]
3401ba5e:	b303      	cbz	r3, 3401baa2 <HAL_XSPI_Command+0xb2>
3401ba60:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3401ba64:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3401ba68:	d10d      	bne.n	3401ba86 <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3401ba6a:	6a23      	ldr	r3, [r4, #32]
3401ba6c:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3401ba70:	d12c      	bne.n	3401bacc <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3401ba72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401ba74:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3401ba78:	d013      	beq.n	3401baa2 <HAL_XSPI_Command+0xb2>
3401ba7a:	f240 314d 	movw	r1, #845	@ 0x34d
3401ba7e:	4867      	ldr	r0, [pc, #412]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401ba80:	f003 fdbe 	bl	3401f600 <assert_failed>
3401ba84:	e00d      	b.n	3401baa2 <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3401ba86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401ba8a:	d0ee      	beq.n	3401ba6a <HAL_XSPI_Command+0x7a>
3401ba8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3401ba90:	d0eb      	beq.n	3401ba6a <HAL_XSPI_Command+0x7a>
3401ba92:	f240 3149 	movw	r1, #841	@ 0x349
3401ba96:	4861      	ldr	r0, [pc, #388]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401ba98:	f003 fdb2 	bl	3401f600 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401ba9c:	69e3      	ldr	r3, [r4, #28]
3401ba9e:	2b00      	cmp	r3, #0
3401baa0:	d1e3      	bne.n	3401ba6a <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3401baa2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401baa4:	b333      	cbz	r3, 3401baf4 <HAL_XSPI_Command+0x104>
3401baa6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3401baaa:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3401baae:	d113      	bne.n	3401bad8 <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3401bab0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3401bab2:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3401bab6:	d13d      	bne.n	3401bb34 <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3401bab8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401baba:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3401babe:	d019      	beq.n	3401baf4 <HAL_XSPI_Command+0x104>
3401bac0:	f44f 7155 	mov.w	r1, #852	@ 0x354
3401bac4:	4855      	ldr	r0, [pc, #340]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401bac6:	f003 fd9b 	bl	3401f600 <assert_failed>
3401baca:	e013      	b.n	3401baf4 <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3401bacc:	f44f 7153 	mov.w	r1, #844	@ 0x34c
3401bad0:	4852      	ldr	r0, [pc, #328]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401bad2:	f003 fd95 	bl	3401f600 <assert_failed>
3401bad6:	e7cc      	b.n	3401ba72 <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3401bad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3401badc:	d0e8      	beq.n	3401bab0 <HAL_XSPI_Command+0xc0>
3401bade:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401bae2:	d0e5      	beq.n	3401bab0 <HAL_XSPI_Command+0xc0>
3401bae4:	f44f 7154 	mov.w	r1, #848	@ 0x350
3401bae8:	484c      	ldr	r0, [pc, #304]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401baea:	f003 fd89 	bl	3401f600 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3401baee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401baf0:	2b00      	cmp	r3, #0
3401baf2:	d1dd      	bne.n	3401bab0 <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3401baf4:	68eb      	ldr	r3, [r5, #12]
3401baf6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3401baf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401bafc:	d120      	bne.n	3401bb40 <HAL_XSPI_Command+0x150>
3401bafe:	b389      	cbz	r1, 3401bb64 <HAL_XSPI_Command+0x174>
3401bb00:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3401bb04:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
3401bb08:	d124      	bne.n	3401bb54 <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401bb0a:	6823      	ldr	r3, [r4, #0]
3401bb0c:	2b00      	cmp	r3, #0
3401bb0e:	d03d      	beq.n	3401bb8c <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3401bb10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401bb12:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
3401bb16:	d004      	beq.n	3401bb22 <HAL_XSPI_Command+0x132>
3401bb18:	f240 315f 	movw	r1, #863	@ 0x35f
3401bb1c:	483f      	ldr	r0, [pc, #252]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401bb1e:	f003 fd6f 	bl	3401f600 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3401bb22:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401bb24:	2b1f      	cmp	r3, #31
3401bb26:	d91d      	bls.n	3401bb64 <HAL_XSPI_Command+0x174>
3401bb28:	f44f 7158 	mov.w	r1, #864	@ 0x360
3401bb2c:	483b      	ldr	r0, [pc, #236]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401bb2e:	f003 fd67 	bl	3401f600 <assert_failed>
3401bb32:	e017      	b.n	3401bb64 <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3401bb34:	f240 3153 	movw	r1, #851	@ 0x353
3401bb38:	4838      	ldr	r0, [pc, #224]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401bb3a:	f003 fd61 	bl	3401f600 <assert_failed>
3401bb3e:	e7bb      	b.n	3401bab8 <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3401bb40:	b181      	cbz	r1, 3401bb64 <HAL_XSPI_Command+0x174>
3401bb42:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
3401bb46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401bb4a:	d0de      	beq.n	3401bb0a <HAL_XSPI_Command+0x11a>
3401bb4c:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
3401bb50:	d1d6      	bne.n	3401bb00 <HAL_XSPI_Command+0x110>
3401bb52:	e7da      	b.n	3401bb0a <HAL_XSPI_Command+0x11a>
3401bb54:	f240 3157 	movw	r1, #855	@ 0x357
3401bb58:	4830      	ldr	r0, [pc, #192]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401bb5a:	f003 fd51 	bl	3401f600 <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401bb5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401bb60:	2b00      	cmp	r3, #0
3401bb62:	d1d2      	bne.n	3401bb0a <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3401bb64:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401bb66:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3401bb6a:	d004      	beq.n	3401bb76 <HAL_XSPI_Command+0x186>
3401bb6c:	f240 3163 	movw	r1, #867	@ 0x363
3401bb70:	482a      	ldr	r0, [pc, #168]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401bb72:	f003 fd45 	bl	3401f600 <assert_failed>
  state = hxspi->State;
3401bb76:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3401bb78:	2b02      	cmp	r3, #2
3401bb7a:	d110      	bne.n	3401bb9e <HAL_XSPI_Command+0x1ae>
3401bb7c:	68eb      	ldr	r3, [r5, #12]
3401bb7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401bb82:	d112      	bne.n	3401bbaa <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bb84:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401bb86:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bb88:	65eb      	str	r3, [r5, #92]	@ 0x5c
3401bb8a:	e028      	b.n	3401bbde <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3401bb8c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401bb8e:	2b00      	cmp	r3, #0
3401bb90:	d1be      	bne.n	3401bb10 <HAL_XSPI_Command+0x120>
3401bb92:	f240 315d 	movw	r1, #861	@ 0x35d
3401bb96:	4821      	ldr	r0, [pc, #132]	@ (3401bc1c <HAL_XSPI_Command+0x22c>)
3401bb98:	f003 fd32 	bl	3401f600 <assert_failed>
3401bb9c:	e7b8      	b.n	3401bb10 <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3401bb9e:	2b14      	cmp	r3, #20
3401bba0:	d11f      	bne.n	3401bbe2 <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3401bba2:	6823      	ldr	r3, [r4, #0]
3401bba4:	3b02      	subs	r3, #2
3401bba6:	2b01      	cmp	r3, #1
3401bba8:	d8ec      	bhi.n	3401bb84 <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401bbaa:	4633      	mov	r3, r6
3401bbac:	2200      	movs	r2, #0
3401bbae:	2120      	movs	r1, #32
3401bbb0:	4628      	mov	r0, r5
3401bbb2:	9700      	str	r7, [sp, #0]
3401bbb4:	f7ff fdc0 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3401bbb8:	bb70      	cbnz	r0, 3401bc18 <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3401bbba:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
3401bbbc:	4621      	mov	r1, r4
3401bbbe:	4628      	mov	r0, r5
3401bbc0:	f7ff fc98 	bl	3401b4f4 <XSPI_ConfigCmd>
      if (status == HAL_OK)
3401bbc4:	b958      	cbnz	r0, 3401bbde <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3401bbc6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401bbc8:	b99b      	cbnz	r3, 3401bbf2 <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401bbca:	4602      	mov	r2, r0
3401bbcc:	4633      	mov	r3, r6
3401bbce:	2120      	movs	r1, #32
3401bbd0:	4628      	mov	r0, r5
3401bbd2:	9700      	str	r7, [sp, #0]
3401bbd4:	f7ff fdb0 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401bbd8:	2202      	movs	r2, #2
3401bbda:	682b      	ldr	r3, [r5, #0]
3401bbdc:	625a      	str	r2, [r3, #36]	@ 0x24
}
3401bbde:	b003      	add	sp, #12
3401bbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3401bbe2:	2b24      	cmp	r3, #36	@ 0x24
3401bbe4:	d1ce      	bne.n	3401bb84 <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3401bbe6:	6823      	ldr	r3, [r4, #0]
3401bbe8:	f023 0302 	bic.w	r3, r3, #2
3401bbec:	2b01      	cmp	r3, #1
3401bbee:	d1c9      	bne.n	3401bb84 <HAL_XSPI_Command+0x194>
3401bbf0:	e7db      	b.n	3401bbaa <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401bbf2:	6823      	ldr	r3, [r4, #0]
3401bbf4:	b90b      	cbnz	r3, 3401bbfa <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3401bbf6:	2304      	movs	r3, #4
3401bbf8:	e005      	b.n	3401bc06 <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3401bbfa:	2b01      	cmp	r3, #1
3401bbfc:	d105      	bne.n	3401bc0a <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3401bbfe:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3401bc00:	2b24      	cmp	r3, #36	@ 0x24
3401bc02:	d0f8      	beq.n	3401bbf6 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3401bc04:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3401bc06:	65ab      	str	r3, [r5, #88]	@ 0x58
3401bc08:	e7e9      	b.n	3401bbde <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401bc0a:	2b02      	cmp	r3, #2
3401bc0c:	d1e7      	bne.n	3401bbde <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3401bc0e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3401bc10:	2b14      	cmp	r3, #20
3401bc12:	d0f0      	beq.n	3401bbf6 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3401bc14:	2324      	movs	r3, #36	@ 0x24
3401bc16:	e7f6      	b.n	3401bc06 <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
3401bc18:	2002      	movs	r0, #2
3401bc1a:	e7e0      	b.n	3401bbde <HAL_XSPI_Command+0x1ee>
3401bc1c:	3402f90e 	.word	0x3402f90e

3401bc20 <HAL_XSPI_Transmit>:
{
3401bc20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3401bc24:	4604      	mov	r4, r0
3401bc26:	4688      	mov	r8, r1
3401bc28:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
3401bc2a:	f003 f957 	bl	3401eedc <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3401bc2e:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401bc30:	4605      	mov	r5, r0
  if (pData == NULL)
3401bc32:	f1b8 0f00 	cmp.w	r8, #0
3401bc36:	d103      	bne.n	3401bc40 <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401bc38:	2308      	movs	r3, #8
    status = HAL_ERROR;
3401bc3a:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bc3c:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401bc3e:	e02e      	b.n	3401bc9e <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401bc40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401bc42:	2b04      	cmp	r3, #4
3401bc44:	d12e      	bne.n	3401bca4 <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401bc46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
3401bc48:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401bc4c:	3301      	adds	r3, #1
3401bc4e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3401bc50:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401bc52:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3401bc54:	683b      	ldr	r3, [r7, #0]
3401bc56:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401bc5a:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3401bc5c:	462b      	mov	r3, r5
3401bc5e:	2201      	movs	r2, #1
3401bc60:	2104      	movs	r1, #4
3401bc62:	4620      	mov	r0, r4
3401bc64:	9600      	str	r6, [sp, #0]
3401bc66:	f7ff fd67 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3401bc6a:	b9c0      	cbnz	r0, 3401bc9e <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3401bc6c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401bc6e:	781b      	ldrb	r3, [r3, #0]
3401bc70:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
3401bc74:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401bc76:	3301      	adds	r3, #1
3401bc78:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3401bc7a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401bc7c:	3b01      	subs	r3, #1
3401bc7e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401bc80:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401bc82:	2b00      	cmp	r3, #0
3401bc84:	d1ea      	bne.n	3401bc5c <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401bc86:	462b      	mov	r3, r5
3401bc88:	2201      	movs	r2, #1
3401bc8a:	2102      	movs	r1, #2
3401bc8c:	4620      	mov	r0, r4
3401bc8e:	9600      	str	r6, [sp, #0]
3401bc90:	f7ff fd52 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3401bc94:	b918      	cbnz	r0, 3401bc9e <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401bc96:	2302      	movs	r3, #2
3401bc98:	6822      	ldr	r2, [r4, #0]
3401bc9a:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3401bc9c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3401bc9e:	b002      	add	sp, #8
3401bca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bca4:	2310      	movs	r3, #16
3401bca6:	e7c8      	b.n	3401bc3a <HAL_XSPI_Transmit+0x1a>

3401bca8 <HAL_XSPI_Receive>:
{
3401bca8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3401bcac:	4604      	mov	r4, r0
3401bcae:	4616      	mov	r6, r2
3401bcb0:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
3401bcb2:	f003 f913 	bl	3401eedc <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3401bcb6:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401bcb8:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3401bcba:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3401bcbc:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
3401bcc0:	f1b8 0f00 	cmp.w	r8, #0
3401bcc4:	d103      	bne.n	3401bcce <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401bcc6:	2308      	movs	r3, #8
    status = HAL_ERROR;
3401bcc8:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bcca:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401bccc:	e035      	b.n	3401bd3a <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401bcce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401bcd0:	2b04      	cmp	r3, #4
3401bcd2:	d13d      	bne.n	3401bd50 <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401bcd4:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3401bcd6:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401bcda:	3301      	adds	r3, #1
3401bcdc:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3401bcde:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401bce0:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3401bce2:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401bce4:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3401bce6:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3401bcea:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401bcee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3401bcf2:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401bcf4:	d124      	bne.n	3401bd40 <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3401bcf6:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3401bcf8:	463b      	mov	r3, r7
3401bcfa:	2201      	movs	r2, #1
3401bcfc:	2106      	movs	r1, #6
3401bcfe:	4620      	mov	r0, r4
3401bd00:	9600      	str	r6, [sp, #0]
3401bd02:	f7ff fd19 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3401bd06:	b9c0      	cbnz	r0, 3401bd3a <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3401bd08:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
3401bd0c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401bd0e:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3401bd10:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401bd12:	3301      	adds	r3, #1
3401bd14:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3401bd16:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401bd18:	3b01      	subs	r3, #1
3401bd1a:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401bd1c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401bd1e:	2b00      	cmp	r3, #0
3401bd20:	d1ea      	bne.n	3401bcf8 <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401bd22:	463b      	mov	r3, r7
3401bd24:	2201      	movs	r2, #1
3401bd26:	2102      	movs	r1, #2
3401bd28:	4620      	mov	r0, r4
3401bd2a:	9600      	str	r6, [sp, #0]
3401bd2c:	f7ff fd04 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3401bd30:	b918      	cbnz	r0, 3401bd3a <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401bd32:	2302      	movs	r3, #2
3401bd34:	6822      	ldr	r2, [r4, #0]
3401bd36:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3401bd38:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3401bd3a:	b002      	add	sp, #8
3401bd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3401bd40:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
3401bd44:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3401bd48:	d1d5      	bne.n	3401bcf6 <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3401bd4a:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
3401bd4e:	e7d3      	b.n	3401bcf8 <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bd50:	2310      	movs	r3, #16
3401bd52:	e7b9      	b.n	3401bcc8 <HAL_XSPI_Receive+0x20>

3401bd54 <HAL_XSPI_AutoPolling>:
{
3401bd54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3401bd58:	4604      	mov	r4, r0
3401bd5a:	460d      	mov	r5, r1
3401bd5c:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3401bd5e:	f003 f8bd 	bl	3401eedc <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
3401bd62:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401bd64:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3401bd66:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3401bd6a:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
3401bd6e:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
3401bd72:	68ab      	ldr	r3, [r5, #8]
3401bd74:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3401bd78:	d004      	beq.n	3401bd84 <HAL_XSPI_AutoPolling+0x30>
3401bd7a:	f240 7132 	movw	r1, #1842	@ 0x732
3401bd7e:	4832      	ldr	r0, [pc, #200]	@ (3401be48 <HAL_XSPI_AutoPolling+0xf4>)
3401bd80:	f003 fc3e 	bl	3401f600 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3401bd84:	68eb      	ldr	r3, [r5, #12]
3401bd86:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3401bd8a:	d004      	beq.n	3401bd96 <HAL_XSPI_AutoPolling+0x42>
3401bd8c:	f240 7133 	movw	r1, #1843	@ 0x733
3401bd90:	482d      	ldr	r0, [pc, #180]	@ (3401be48 <HAL_XSPI_AutoPolling+0xf4>)
3401bd92:	f003 fc35 	bl	3401f600 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3401bd96:	692b      	ldr	r3, [r5, #16]
3401bd98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401bd9c:	d304      	bcc.n	3401bda8 <HAL_XSPI_AutoPolling+0x54>
3401bd9e:	f240 7134 	movw	r1, #1844	@ 0x734
3401bda2:	4829      	ldr	r0, [pc, #164]	@ (3401be48 <HAL_XSPI_AutoPolling+0xf4>)
3401bda4:	f003 fc2c 	bl	3401f600 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3401bda8:	f1ba 0f03 	cmp.w	sl, #3
3401bdac:	d904      	bls.n	3401bdb8 <HAL_XSPI_AutoPolling+0x64>
3401bdae:	f240 7135 	movw	r1, #1845	@ 0x735
3401bdb2:	4825      	ldr	r0, [pc, #148]	@ (3401be48 <HAL_XSPI_AutoPolling+0xf4>)
3401bdb4:	f003 fc24 	bl	3401f600 <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3401bdb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401bdba:	2b04      	cmp	r3, #4
3401bdbc:	d13e      	bne.n	3401be3c <HAL_XSPI_AutoPolling+0xe8>
3401bdbe:	68eb      	ldr	r3, [r5, #12]
3401bdc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3401bdc4:	d13a      	bne.n	3401be3c <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401bdc6:	4633      	mov	r3, r6
3401bdc8:	2200      	movs	r2, #0
3401bdca:	2120      	movs	r1, #32
3401bdcc:	4620      	mov	r0, r4
3401bdce:	9700      	str	r7, [sp, #0]
3401bdd0:	f7ff fcb2 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3401bdd4:	2800      	cmp	r0, #0
3401bdd6:	d135      	bne.n	3401be44 <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3401bdd8:	682b      	ldr	r3, [r5, #0]
3401bdda:	6821      	ldr	r1, [r4, #0]
3401bddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3401bde0:	686b      	ldr	r3, [r5, #4]
3401bde2:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3401bde6:	692b      	ldr	r3, [r5, #16]
3401bde8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3401bdec:	680a      	ldr	r2, [r1, #0]
3401bdee:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
3401bdf2:	431d      	orrs	r5, r3
3401bdf4:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3401bdf8:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401bdfa:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3401bdfc:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401be00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3401be04:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401be06:	d111      	bne.n	3401be2c <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3401be08:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3401be0c:	4633      	mov	r3, r6
3401be0e:	2201      	movs	r2, #1
3401be10:	2108      	movs	r1, #8
3401be12:	4620      	mov	r0, r4
3401be14:	9700      	str	r7, [sp, #0]
3401be16:	f7ff fc8f 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3401be1a:	b920      	cbnz	r0, 3401be26 <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3401be1c:	2208      	movs	r2, #8
3401be1e:	6823      	ldr	r3, [r4, #0]
3401be20:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
3401be22:	2302      	movs	r3, #2
3401be24:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3401be26:	b002      	add	sp, #8
3401be28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3401be2c:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
3401be30:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3401be34:	d1e8      	bne.n	3401be08 <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3401be36:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
3401be3a:	e7e7      	b.n	3401be0c <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401be3c:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401be3e:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401be40:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401be42:	e7f0      	b.n	3401be26 <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
3401be44:	2002      	movs	r0, #2
3401be46:	e7ee      	b.n	3401be26 <HAL_XSPI_AutoPolling+0xd2>
3401be48:	3402f90e 	.word	0x3402f90e

3401be4c <HAL_XSPI_MemoryMapped>:
{
3401be4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
3401be4e:	460c      	mov	r4, r1
3401be50:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
3401be52:	f003 f843 	bl	3401eedc <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3401be56:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401be58:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3401be5a:	f033 0308 	bics.w	r3, r3, #8
3401be5e:	d004      	beq.n	3401be6a <HAL_XSPI_MemoryMapped+0x1e>
3401be60:	f240 71c6 	movw	r1, #1990	@ 0x7c6
3401be64:	482f      	ldr	r0, [pc, #188]	@ (3401bf24 <HAL_XSPI_MemoryMapped+0xd8>)
3401be66:	f003 fbcb 	bl	3401f600 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3401be6a:	68a3      	ldr	r3, [r4, #8]
3401be6c:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
3401be70:	d004      	beq.n	3401be7c <HAL_XSPI_MemoryMapped+0x30>
3401be72:	f240 71c7 	movw	r1, #1991	@ 0x7c7
3401be76:	482b      	ldr	r0, [pc, #172]	@ (3401bf24 <HAL_XSPI_MemoryMapped+0xd8>)
3401be78:	f003 fbc2 	bl	3401f600 <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401be7c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3401be7e:	2b04      	cmp	r3, #4
3401be80:	d14b      	bne.n	3401bf1a <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401be82:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
3401be84:	2200      	movs	r2, #0
3401be86:	9300      	str	r3, [sp, #0]
3401be88:	2120      	movs	r1, #32
3401be8a:	4633      	mov	r3, r6
3401be8c:	4628      	mov	r0, r5
3401be8e:	f7ff fc53 	bl	3401b738 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3401be92:	4606      	mov	r6, r0
3401be94:	bb58      	cbnz	r0, 3401beee <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3401be96:	2388      	movs	r3, #136	@ 0x88
3401be98:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3401be9a:	68a3      	ldr	r3, [r4, #8]
3401be9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401bea0:	d128      	bne.n	3401bef4 <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3401bea2:	682a      	ldr	r2, [r5, #0]
3401bea4:	6813      	ldr	r3, [r2, #0]
3401bea6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3401beaa:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3401beac:	6823      	ldr	r3, [r4, #0]
3401beae:	2b08      	cmp	r3, #8
3401beb0:	d112      	bne.n	3401bed8 <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3401beb2:	6863      	ldr	r3, [r4, #4]
3401beb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401beb8:	d304      	bcc.n	3401bec4 <HAL_XSPI_MemoryMapped+0x78>
3401beba:	f240 71e3 	movw	r1, #2019	@ 0x7e3
3401bebe:	4819      	ldr	r0, [pc, #100]	@ (3401bf24 <HAL_XSPI_MemoryMapped+0xd8>)
3401bec0:	f003 fb9e 	bl	3401f600 <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3401bec4:	682b      	ldr	r3, [r5, #0]
3401bec6:	6862      	ldr	r2, [r4, #4]
3401bec8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3401becc:	2210      	movs	r2, #16
3401bece:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3401bed0:	681a      	ldr	r2, [r3, #0]
3401bed2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3401bed6:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3401bed8:	682a      	ldr	r2, [r5, #0]
3401beda:	6821      	ldr	r1, [r4, #0]
3401bedc:	6813      	ldr	r3, [r2, #0]
3401bede:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401bee2:	f023 0308 	bic.w	r3, r3, #8
3401bee6:	430b      	orrs	r3, r1
3401bee8:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
3401beec:	6013      	str	r3, [r2, #0]
}
3401beee:	4630      	mov	r0, r6
3401bef0:	b002      	add	sp, #8
3401bef2:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
3401bef4:	68e3      	ldr	r3, [r4, #12]
3401bef6:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3401befa:	d004      	beq.n	3401bf06 <HAL_XSPI_MemoryMapped+0xba>
3401befc:	f240 71db 	movw	r1, #2011	@ 0x7db
3401bf00:	4808      	ldr	r0, [pc, #32]	@ (3401bf24 <HAL_XSPI_MemoryMapped+0xd8>)
3401bf02:	f003 fb7d 	bl	3401f600 <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3401bf06:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
3401bf0a:	6829      	ldr	r1, [r5, #0]
3401bf0c:	4303      	orrs	r3, r0
3401bf0e:	680a      	ldr	r2, [r1, #0]
3401bf10:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
3401bf14:	4313      	orrs	r3, r2
3401bf16:	600b      	str	r3, [r1, #0]
3401bf18:	e7c8      	b.n	3401beac <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bf1a:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401bf1c:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bf1e:	65eb      	str	r3, [r5, #92]	@ 0x5c
3401bf20:	e7e5      	b.n	3401beee <HAL_XSPI_MemoryMapped+0xa2>
3401bf22:	bf00      	nop
3401bf24:	3402f90e 	.word	0x3402f90e

3401bf28 <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3401bf28:	29ff      	cmp	r1, #255	@ 0xff
{
3401bf2a:	b538      	push	{r3, r4, r5, lr}
3401bf2c:	4604      	mov	r4, r0
3401bf2e:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3401bf30:	d904      	bls.n	3401bf3c <HAL_XSPI_SetClockPrescaler+0x14>
3401bf32:	f640 2191 	movw	r1, #2705	@ 0xa91
3401bf36:	4809      	ldr	r0, [pc, #36]	@ (3401bf5c <HAL_XSPI_SetClockPrescaler+0x34>)
3401bf38:	f003 fb62 	bl	3401f600 <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3401bf3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401bf3e:	f010 0008 	ands.w	r0, r0, #8
3401bf42:	d107      	bne.n	3401bf54 <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3401bf44:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
3401bf46:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3401bf48:	68d3      	ldr	r3, [r2, #12]
3401bf4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3401bf4e:	432b      	orrs	r3, r5
3401bf50:	60d3      	str	r3, [r2, #12]
}
3401bf52:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bf54:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401bf56:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bf58:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401bf5a:	e7fa      	b.n	3401bf52 <HAL_XSPI_SetClockPrescaler+0x2a>
3401bf5c:	3402f90e 	.word	0x3402f90e

3401bf60 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
3401bf60:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
3401bf62:	2600      	movs	r6, #0
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
3401bf64:	4c16      	ldr	r4, [pc, #88]	@ (3401bfc0 <UTIL_LCD_SetFuncDriver+0x60>)
3401bf66:	6803      	ldr	r3, [r0, #0]
  FuncDriver.GetYSize       = pDrv->GetYSize;
3401bf68:	6a02      	ldr	r2, [r0, #32]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
3401bf6a:	6023      	str	r3, [r4, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
3401bf6c:	6843      	ldr	r3, [r0, #4]
  FuncDriver.GetYSize       = pDrv->GetYSize;
3401bf6e:	6222      	str	r2, [r4, #32]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
3401bf70:	6063      	str	r3, [r4, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
3401bf72:	6883      	ldr	r3, [r0, #8]
  FuncDriver.SetLayer       = pDrv->SetLayer;
3401bf74:	6a42      	ldr	r2, [r0, #36]	@ 0x24
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
3401bf76:	60a3      	str	r3, [r4, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
3401bf78:	68c3      	ldr	r3, [r0, #12]
  DrawProp->LcdLayer = 0;
3401bf7a:	4d12      	ldr	r5, [pc, #72]	@ (3401bfc4 <UTIL_LCD_SetFuncDriver+0x64>)
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
3401bf7c:	60e3      	str	r3, [r4, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
3401bf7e:	6903      	ldr	r3, [r0, #16]
  FuncDriver.SetLayer       = pDrv->SetLayer;
3401bf80:	6262      	str	r2, [r4, #36]	@ 0x24
  FuncDriver.FillRect       = pDrv->FillRect;
3401bf82:	6123      	str	r3, [r4, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
3401bf84:	6943      	ldr	r3, [r0, #20]
  FuncDriver.GetFormat      = pDrv->GetFormat;
3401bf86:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  FuncDriver.GetPixel       = pDrv->GetPixel;
3401bf88:	6163      	str	r3, [r4, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
3401bf8a:	6983      	ldr	r3, [r0, #24]
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bf8c:	f105 0114 	add.w	r1, r5, #20
  FuncDriver.SetPixel       = pDrv->SetPixel;
3401bf90:	61a3      	str	r3, [r4, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
3401bf92:	69c3      	ldr	r3, [r0, #28]
  DrawProp->LcdDevice = 0;
3401bf94:	e9c5 6603 	strd	r6, r6, [r5, #12]
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bf98:	4630      	mov	r0, r6
  FuncDriver.GetXSize       = pDrv->GetXSize;
3401bf9a:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
3401bf9c:	62a2      	str	r2, [r4, #40]	@ 0x28
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bf9e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp[DrawProp->LcdLayer].LcdYsize);
3401bfa0:	68e9      	ldr	r1, [r5, #12]
3401bfa2:	6a23      	ldr	r3, [r4, #32]
3401bfa4:	eb05 1141 	add.w	r1, r5, r1, lsl #5
3401bfa8:	4630      	mov	r0, r6
3401bfaa:	3118      	adds	r1, #24
3401bfac:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401bfae:	68eb      	ldr	r3, [r5, #12]
3401bfb0:	4630      	mov	r0, r6
3401bfb2:	eb05 1143 	add.w	r1, r5, r3, lsl #5
3401bfb6:	311c      	adds	r1, #28
3401bfb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
}
3401bfba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401bfbe:	4718      	bx	r3
3401bfc0:	340daf80 	.word	0x340daf80
3401bfc4:	340dafac 	.word	0x340dafac

3401bfc8 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
3401bfc8:	b570      	push	{r4, r5, r6, lr}
  if(FuncDriver.SetLayer != NULL)
3401bfca:	4e10      	ldr	r6, [pc, #64]	@ (3401c00c <UTIL_LCD_SetLayer+0x44>)
{
3401bfcc:	4605      	mov	r5, r0
  if(FuncDriver.SetLayer != NULL)
3401bfce:	6a73      	ldr	r3, [r6, #36]	@ 0x24
3401bfd0:	b1db      	cbz	r3, 3401c00a <UTIL_LCD_SetLayer+0x42>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
3401bfd2:	4c0f      	ldr	r4, [pc, #60]	@ (3401c010 <UTIL_LCD_SetLayer+0x48>)
3401bfd4:	4601      	mov	r1, r0
3401bfd6:	6920      	ldr	r0, [r4, #16]
3401bfd8:	4798      	blx	r3
3401bfda:	b9b0      	cbnz	r0, 3401c00a <UTIL_LCD_SetLayer+0x42>
    {
      DrawProp->LcdLayer = Layer;
      FuncDriver.GetXSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bfdc:	eb04 1145 	add.w	r1, r4, r5, lsl #5
3401bfe0:	69f3      	ldr	r3, [r6, #28]
3401bfe2:	6920      	ldr	r0, [r4, #16]
      DrawProp->LcdLayer = Layer;
3401bfe4:	60e5      	str	r5, [r4, #12]
      FuncDriver.GetXSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bfe6:	3114      	adds	r1, #20
3401bfe8:	4798      	blx	r3
      FuncDriver.GetYSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdYsize);
3401bfea:	68e1      	ldr	r1, [r4, #12]
3401bfec:	6a33      	ldr	r3, [r6, #32]
3401bfee:	eb04 1141 	add.w	r1, r4, r1, lsl #5
3401bff2:	6920      	ldr	r0, [r4, #16]
3401bff4:	3118      	adds	r1, #24
3401bff6:	4798      	blx	r3
      FuncDriver.GetFormat(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401bff8:	68e1      	ldr	r1, [r4, #12]
3401bffa:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3401bffc:	eb04 1141 	add.w	r1, r4, r1, lsl #5
3401c000:	6920      	ldr	r0, [r4, #16]
3401c002:	311c      	adds	r1, #28
    }
  }
}
3401c004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      FuncDriver.GetFormat(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401c008:	4718      	bx	r3
}
3401c00a:	bd70      	pop	{r4, r5, r6, pc}
3401c00c:	340daf80 	.word	0x340daf80
3401c010:	340dafac 	.word	0x340dafac

3401c014 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
3401c014:	4a02      	ldr	r2, [pc, #8]	@ (3401c020 <UTIL_LCD_SetTextColor+0xc>)
3401c016:	68d3      	ldr	r3, [r2, #12]
3401c018:	015b      	lsls	r3, r3, #5
3401c01a:	50d0      	str	r0, [r2, r3]
}
3401c01c:	4770      	bx	lr
3401c01e:	bf00      	nop
3401c020:	340dafac 	.word	0x340dafac

3401c024 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
3401c024:	4b02      	ldr	r3, [pc, #8]	@ (3401c030 <UTIL_LCD_SetFont+0xc>)
3401c026:	68da      	ldr	r2, [r3, #12]
3401c028:	eb03 1342 	add.w	r3, r3, r2, lsl #5
3401c02c:	6098      	str	r0, [r3, #8]
}
3401c02e:	4770      	bx	lr
3401c030:	340dafac 	.word	0x340dafac

3401c034 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
3401c034:	4b02      	ldr	r3, [pc, #8]	@ (3401c040 <UTIL_LCD_GetFont+0xc>)
3401c036:	68da      	ldr	r2, [r3, #12]
3401c038:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
3401c03c:	6898      	ldr	r0, [r3, #8]
3401c03e:	4770      	bx	lr
3401c040:	340dafac 	.word	0x340dafac

3401c044 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
3401c044:	b513      	push	{r0, r1, r4, lr}
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
3401c046:	9c04      	ldr	r4, [sp, #16]
3401c048:	e9cd 3400 	strd	r3, r4, [sp]
3401c04c:	4b04      	ldr	r3, [pc, #16]	@ (3401c060 <UTIL_LCD_FillRGBRect+0x1c>)
3401c04e:	685c      	ldr	r4, [r3, #4]
3401c050:	4613      	mov	r3, r2
3401c052:	460a      	mov	r2, r1
3401c054:	4601      	mov	r1, r0
3401c056:	4803      	ldr	r0, [pc, #12]	@ (3401c064 <UTIL_LCD_FillRGBRect+0x20>)
3401c058:	6900      	ldr	r0, [r0, #16]
3401c05a:	47a0      	blx	r4
}
3401c05c:	b002      	add	sp, #8
3401c05e:	bd10      	pop	{r4, pc}
3401c060:	340daf80 	.word	0x340daf80
3401c064:	340dafac 	.word	0x340dafac

3401c068 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
3401c068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401c06a:	4606      	mov	r6, r0
  /* Write line */
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c06c:	4817      	ldr	r0, [pc, #92]	@ (3401c0cc <UTIL_LCD_DrawHLine+0x64>)
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401c06e:	4d18      	ldr	r5, [pc, #96]	@ (3401c0d0 <UTIL_LCD_DrawHLine+0x68>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c070:	68c4      	ldr	r4, [r0, #12]
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401c072:	68ad      	ldr	r5, [r5, #8]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c074:	eb00 1444 	add.w	r4, r0, r4, lsl #5
3401c078:	69e4      	ldr	r4, [r4, #28]
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401c07a:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c07c:	2c02      	cmp	r4, #2
3401c07e:	d110      	bne.n	3401c0a2 <UTIL_LCD_DrawHLine+0x3a>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401c080:	095c      	lsrs	r4, r3, #5
3401c082:	0a1f      	lsrs	r7, r3, #8
3401c084:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
3401c088:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
3401c08c:	433c      	orrs	r4, r7
3401c08e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
  }
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401c092:	431c      	orrs	r4, r3
3401c094:	9400      	str	r4, [sp, #0]
  }
  else /*LCD_PIXEL_FORMAT_ARGB8888*/
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401c096:	4613      	mov	r3, r2
3401c098:	460a      	mov	r2, r1
3401c09a:	4631      	mov	r1, r6
3401c09c:	47a8      	blx	r5
  }
}
3401c09e:	b003      	add	sp, #12
3401c0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401c0a2:	2c01      	cmp	r4, #1
3401c0a4:	d103      	bne.n	3401c0ae <UTIL_LCD_DrawHLine+0x46>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
3401c0a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401c0aa:	9300      	str	r3, [sp, #0]
3401c0ac:	e7f3      	b.n	3401c096 <UTIL_LCD_DrawHLine+0x2e>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401c0ae:	2c04      	cmp	r4, #4
3401c0b0:	d1fb      	bne.n	3401c0aa <UTIL_LCD_DrawHLine+0x42>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401c0b2:	0f1f      	lsrs	r7, r3, #28
3401c0b4:	f3c3 1403 	ubfx	r4, r3, #4, #4
3401c0b8:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
3401c0bc:	0a1f      	lsrs	r7, r3, #8
3401c0be:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
3401c0c2:	0b1b      	lsrs	r3, r3, #12
3401c0c4:	433c      	orrs	r4, r7
3401c0c6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401c0ca:	e7e2      	b.n	3401c092 <UTIL_LCD_DrawHLine+0x2a>
3401c0cc:	340dafac 	.word	0x340dafac
3401c0d0:	340daf80 	.word	0x340daf80

3401c0d4 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
3401c0d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401c0d6:	4606      	mov	r6, r0
  /* Write line */
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c0d8:	4817      	ldr	r0, [pc, #92]	@ (3401c138 <UTIL_LCD_DrawVLine+0x64>)
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401c0da:	4d18      	ldr	r5, [pc, #96]	@ (3401c13c <UTIL_LCD_DrawVLine+0x68>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c0dc:	68c4      	ldr	r4, [r0, #12]
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401c0de:	68ed      	ldr	r5, [r5, #12]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c0e0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
3401c0e4:	69e4      	ldr	r4, [r4, #28]
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401c0e6:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c0e8:	2c02      	cmp	r4, #2
3401c0ea:	d110      	bne.n	3401c10e <UTIL_LCD_DrawVLine+0x3a>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401c0ec:	095c      	lsrs	r4, r3, #5
3401c0ee:	0a1f      	lsrs	r7, r3, #8
3401c0f0:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
3401c0f4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
3401c0f8:	433c      	orrs	r4, r7
3401c0fa:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
  }
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401c0fe:	431c      	orrs	r4, r3
3401c100:	9400      	str	r4, [sp, #0]
  }
  else /*LCD_PIXEL_FORMAT_ARGB888*/
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401c102:	4613      	mov	r3, r2
3401c104:	460a      	mov	r2, r1
3401c106:	4631      	mov	r1, r6
3401c108:	47a8      	blx	r5
  }
}
3401c10a:	b003      	add	sp, #12
3401c10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401c10e:	2c01      	cmp	r4, #1
3401c110:	d103      	bne.n	3401c11a <UTIL_LCD_DrawVLine+0x46>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
3401c112:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401c116:	9300      	str	r3, [sp, #0]
3401c118:	e7f3      	b.n	3401c102 <UTIL_LCD_DrawVLine+0x2e>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401c11a:	2c04      	cmp	r4, #4
3401c11c:	d1fb      	bne.n	3401c116 <UTIL_LCD_DrawVLine+0x42>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401c11e:	0f1f      	lsrs	r7, r3, #28
3401c120:	f3c3 1403 	ubfx	r4, r3, #4, #4
3401c124:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
3401c128:	0a1f      	lsrs	r7, r3, #8
3401c12a:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
3401c12e:	0b1b      	lsrs	r3, r3, #12
3401c130:	433c      	orrs	r4, r7
3401c132:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401c136:	e7e2      	b.n	3401c0fe <UTIL_LCD_DrawVLine+0x2a>
3401c138:	340dafac 	.word	0x340dafac
3401c13c:	340daf80 	.word	0x340daf80

3401c140 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
3401c140:	b470      	push	{r4, r5, r6}
3401c142:	4606      	mov	r6, r0
  /* Set Pixel */
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c144:	4816      	ldr	r0, [pc, #88]	@ (3401c1a0 <UTIL_LCD_SetPixel+0x60>)
{
3401c146:	4613      	mov	r3, r2
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c148:	68c2      	ldr	r2, [r0, #12]
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
3401c14a:	4c16      	ldr	r4, [pc, #88]	@ (3401c1a4 <UTIL_LCD_SetPixel+0x64>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c14c:	eb00 1242 	add.w	r2, r0, r2, lsl #5
3401c150:	69d2      	ldr	r2, [r2, #28]
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
3401c152:	69a5      	ldr	r5, [r4, #24]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c154:	2a02      	cmp	r2, #2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
3401c156:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c158:	d10a      	bne.n	3401c170 <UTIL_LCD_SetPixel+0x30>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
3401c15a:	095c      	lsrs	r4, r3, #5
3401c15c:	0a1a      	lsrs	r2, r3, #8
3401c15e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
3401c162:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
3401c166:	4314      	orrs	r4, r2
3401c168:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB888(Color));
  }
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882ARGB4444(Color));
3401c16c:	4323      	orrs	r3, r4
3401c16e:	e003      	b.n	3401c178 <UTIL_LCD_SetPixel+0x38>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401c170:	2a01      	cmp	r2, #1
3401c172:	d106      	bne.n	3401c182 <UTIL_LCD_SetPixel+0x42>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB888(Color));
3401c174:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
  }
  else /*LCD_PIXEL_FORMAT_ARGB888*/
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
3401c178:	460a      	mov	r2, r1
3401c17a:	46ac      	mov	ip, r5
3401c17c:	4631      	mov	r1, r6
  }
}
3401c17e:	bc70      	pop	{r4, r5, r6}
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
3401c180:	4760      	bx	ip
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401c182:	2a04      	cmp	r2, #4
3401c184:	d1f8      	bne.n	3401c178 <UTIL_LCD_SetPixel+0x38>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882ARGB4444(Color));
3401c186:	0f1a      	lsrs	r2, r3, #28
3401c188:	f3c3 1403 	ubfx	r4, r3, #4, #4
3401c18c:	ea44 3402 	orr.w	r4, r4, r2, lsl #12
3401c190:	0a1a      	lsrs	r2, r3, #8
3401c192:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
3401c196:	0b1b      	lsrs	r3, r3, #12
3401c198:	4314      	orrs	r4, r2
3401c19a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401c19e:	e7e5      	b.n	3401c16c <UTIL_LCD_SetPixel+0x2c>
3401c1a0:	340dafac 	.word	0x340dafac
3401c1a4:	340daf80 	.word	0x340daf80

3401c1a8 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
3401c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401c1ac:	f8df 81e0 	ldr.w	r8, [pc, #480]	@ 3401c390 <UTIL_LCD_DisplayChar+0x1e8>
{
3401c1b0:	b0a3      	sub	sp, #140	@ 0x8c
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401c1b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
{
3401c1b6:	9108      	str	r1, [sp, #32]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401c1b8:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401c1bc:	6899      	ldr	r1, [r3, #8]
{
3401c1be:	9005      	str	r0, [sp, #20]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
3401c1c0:	88cb      	ldrh	r3, [r1, #6]
3401c1c2:	888c      	ldrh	r4, [r1, #4]
3401c1c4:	9307      	str	r3, [sp, #28]
  uint8_t rgb8[24*4];
  uint16_t* rgb16 = (uint16_t*)rgb8;
  uint32_t* argb32 = (uint32_t*)rgb8;
  uint16_t* argb4444 = (uint16_t*)rgb8;

  offset =  8 *((width + 7)/8) -  width ;
3401c1c6:	1de3      	adds	r3, r4, #7
3401c1c8:	f023 0007 	bic.w	r0, r3, #7
3401c1cc:	9003      	str	r0, [sp, #12]

  for(i = 0; i < height; i++)
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
3401c1ce:	08d8      	lsrs	r0, r3, #3
3401c1d0:	9006      	str	r0, [sp, #24]
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
    }
    else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
    {
      for (j = 0; j < width*3; j = j+ 3)
3401c1d2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
3401c1d6:	9009      	str	r0, [sp, #36]	@ 0x24
3401c1d8:	9808      	ldr	r0, [sp, #32]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401c1da:	3a20      	subs	r2, #32
3401c1dc:	3001      	adds	r0, #1
3401c1de:	9004      	str	r0, [sp, #16]
3401c1e0:	9807      	ldr	r0, [sp, #28]
3401c1e2:	680d      	ldr	r5, [r1, #0]
3401c1e4:	4342      	muls	r2, r0
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
3401c1e6:	10db      	asrs	r3, r3, #3
3401c1e8:	fb03 5502 	mla	r5, r3, r2, r5
3401c1ec:	9b04      	ldr	r3, [sp, #16]
  for(i = 0; i < height; i++)
3401c1ee:	9a08      	ldr	r2, [sp, #32]
3401c1f0:	1e59      	subs	r1, r3, #1
3401c1f2:	1a9b      	subs	r3, r3, r2
3401c1f4:	9a07      	ldr	r2, [sp, #28]
3401c1f6:	3b01      	subs	r3, #1
3401c1f8:	429a      	cmp	r2, r3
3401c1fa:	d802      	bhi.n	3401c202 <UTIL_LCD_DisplayChar+0x5a>
}
3401c1fc:	b023      	add	sp, #140	@ 0x8c
3401c1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
3401c202:	9806      	ldr	r0, [sp, #24]
      line =  pchar[0];
3401c204:	782b      	ldrb	r3, [r5, #0]
    switch(((width + 7)/8))
3401c206:	2801      	cmp	r0, #1
      line =  pchar[0];
3401c208:	461a      	mov	r2, r3
    switch(((width + 7)/8))
3401c20a:	d004      	beq.n	3401c216 <UTIL_LCD_DisplayChar+0x6e>
3401c20c:	2802      	cmp	r0, #2
3401c20e:	d127      	bne.n	3401c260 <UTIL_LCD_DisplayChar+0xb8>
      line =  (pchar[0]<< 8) | pchar[1];
3401c210:	882a      	ldrh	r2, [r5, #0]
3401c212:	ba52      	rev16	r2, r2
3401c214:	b292      	uxth	r2, r2
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c216:	f8d8 000c 	ldr.w	r0, [r8, #12]
3401c21a:	eb08 1040 	add.w	r0, r8, r0, lsl #5
3401c21e:	69c7      	ldr	r7, [r0, #28]
3401c220:	2f02      	cmp	r7, #2
3401c222:	d13c      	bne.n	3401c29e <UTIL_LCD_DisplayChar+0xf6>
3401c224:	f04f 0c01 	mov.w	ip, #1
        if(line & (1 << (width- j + offset- 1)))
3401c228:	9b03      	ldr	r3, [sp, #12]
      for (j = 0; j < width; j++)
3401c22a:	f04f 0e00 	mov.w	lr, #0
        if(line & (1 << (width- j + offset- 1)))
3401c22e:	f103 3aff 	add.w	sl, r3, #4294967295
3401c232:	4663      	mov	r3, ip
3401c234:	4574      	cmp	r4, lr
3401c236:	eb04 0603 	add.w	r6, r4, r3
3401c23a:	bf08      	it	eq
3401c23c:	4666      	moveq	r6, ip
3401c23e:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
      for (j = 0; j < width; j++)
3401c242:	3e01      	subs	r6, #1
3401c244:	d113      	bne.n	3401c26e <UTIL_LCD_DisplayChar+0xc6>
        else
        {
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb4444[0], width, 1);
3401c246:	f8cd c000 	str.w	ip, [sp]
        else
        {
          argb32[j] = DrawProp[DrawProp->LcdLayer].BackColor;
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
3401c24a:	4623      	mov	r3, r4
3401c24c:	9805      	ldr	r0, [sp, #20]
3401c24e:	aa0a      	add	r2, sp, #40	@ 0x28
3401c250:	f7ff fef8 	bl	3401c044 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
3401c254:	9b04      	ldr	r3, [sp, #16]
3401c256:	3301      	adds	r3, #1
3401c258:	9304      	str	r3, [sp, #16]
3401c25a:	9b06      	ldr	r3, [sp, #24]
3401c25c:	441d      	add	r5, r3
3401c25e:	e7c5      	b.n	3401c1ec <UTIL_LCD_DisplayChar+0x44>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
3401c260:	786a      	ldrb	r2, [r5, #1]
3401c262:	041b      	lsls	r3, r3, #16
3401c264:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
3401c268:	78aa      	ldrb	r2, [r5, #2]
3401c26a:	431a      	orrs	r2, r3
      break;
3401c26c:	e7d3      	b.n	3401c216 <UTIL_LCD_DisplayChar+0x6e>
        if(line & (1 << (width- j + offset- 1)))
3401c26e:	ebaa 030e 	sub.w	r3, sl, lr
3401c272:	fa0c f303 	lsl.w	r3, ip, r3
3401c276:	4213      	tst	r3, r2
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
3401c278:	bf14      	ite	ne
3401c27a:	6807      	ldrne	r7, [r0, #0]
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
3401c27c:	6847      	ldreq	r7, [r0, #4]
      for (j = 0; j < width; j++)
3401c27e:	f10e 0e01 	add.w	lr, lr, #1
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
3401c282:	f3c7 03c4 	ubfx	r3, r7, #3, #5
3401c286:	ea4f 4bd7 	mov.w	fp, r7, lsr #19
3401c28a:	097f      	lsrs	r7, r7, #5
3401c28c:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
3401c290:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
3401c294:	433b      	orrs	r3, r7
3401c296:	b29b      	uxth	r3, r3
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
3401c298:	f829 3b02 	strh.w	r3, [r9], #2
      for (j = 0; j < width; j++)
3401c29c:	e7d1      	b.n	3401c242 <UTIL_LCD_DisplayChar+0x9a>
    else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401c29e:	2f01      	cmp	r7, #1
3401c2a0:	d126      	bne.n	3401c2f0 <UTIL_LCD_DisplayChar+0x148>
      for (j = 0; j < width*3; j = j+ 3)
3401c2a2:	f04f 0c00 	mov.w	ip, #0
        if(line & (1 << (width- j/3 + offset- 1)))
3401c2a6:	f04f 0b03 	mov.w	fp, #3
3401c2aa:	9b03      	ldr	r3, [sp, #12]
3401c2ac:	ae0a      	add	r6, sp, #40	@ 0x28
3401c2ae:	f103 3aff 	add.w	sl, r3, #4294967295
      for (j = 0; j < width*3; j = j+ 3)
3401c2b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401c2b4:	459c      	cmp	ip, r3
3401c2b6:	d302      	bcc.n	3401c2be <UTIL_LCD_DisplayChar+0x116>
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
3401c2b8:	2301      	movs	r3, #1
3401c2ba:	9300      	str	r3, [sp, #0]
3401c2bc:	e7c5      	b.n	3401c24a <UTIL_LCD_DisplayChar+0xa2>
        if(line & (1 << (width- j/3 + offset- 1)))
3401c2be:	fbbc f3fb 	udiv	r3, ip, fp
3401c2c2:	ebaa 0303 	sub.w	r3, sl, r3
3401c2c6:	fa07 f303 	lsl.w	r3, r7, r3
3401c2ca:	4213      	tst	r3, r2
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) & 0xFFU;
3401c2cc:	bf14      	ite	ne
3401c2ce:	6803      	ldrne	r3, [r0, #0]
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) & 0xFFU;
3401c2d0:	6843      	ldreq	r3, [r0, #4]
      for (j = 0; j < width*3; j = j+ 3)
3401c2d2:	f10c 0c03 	add.w	ip, ip, #3
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) & 0xFFU;
3401c2d6:	fa5f f983 	uxtb.w	r9, r3
          rgb8[j + 1U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) >> 8) & 0xFFU;
3401c2da:	f3c3 2e07 	ubfx	lr, r3, #8, #8
          rgb8[j + 2U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) >> 16) & 0xFFU;
3401c2de:	f3c3 4307 	ubfx	r3, r3, #16, #8
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) & 0xFFU;
3401c2e2:	f886 9000 	strb.w	r9, [r6]
          rgb8[j + 1U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) >> 8) & 0xFFU;
3401c2e6:	f886 e001 	strb.w	lr, [r6, #1]
          rgb8[j + 2U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) >> 16) & 0xFFU;
3401c2ea:	70b3      	strb	r3, [r6, #2]
      for (j = 0; j < width*3; j = j+ 3)
3401c2ec:	3603      	adds	r6, #3
3401c2ee:	e7e0      	b.n	3401c2b2 <UTIL_LCD_DisplayChar+0x10a>
    else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401c2f0:	2f04      	cmp	r7, #4
3401c2f2:	d01f      	beq.n	3401c334 <UTIL_LCD_DisplayChar+0x18c>
        if(line & (1 << (width- j + offset- 1)))
3401c2f4:	f04f 0a01 	mov.w	sl, #1
      for (j = 0; j < width; j++)
3401c2f8:	2700      	movs	r7, #0
3401c2fa:	4656      	mov	r6, sl
        if(line & (1 << (width- j + offset- 1)))
3401c2fc:	9b03      	ldr	r3, [sp, #12]
3401c2fe:	42bc      	cmp	r4, r7
3401c300:	f103 3bff 	add.w	fp, r3, #4294967295
3401c304:	eb04 0306 	add.w	r3, r4, r6
3401c308:	bf14      	ite	ne
3401c30a:	469c      	movne	ip, r3
3401c30c:	46d4      	moveq	ip, sl
3401c30e:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
      for (j = 0; j < width; j++)
3401c312:	f1bc 0c01 	subs.w	ip, ip, #1
3401c316:	d0cf      	beq.n	3401c2b8 <UTIL_LCD_DisplayChar+0x110>
        if(line & (1 << (width- j + offset- 1)))
3401c318:	ebab 0e07 	sub.w	lr, fp, r7
3401c31c:	6843      	ldr	r3, [r0, #4]
3401c31e:	fa0a fe0e 	lsl.w	lr, sl, lr
3401c322:	ea1e 0f02 	tst.w	lr, r2
          argb32[j] = DrawProp[DrawProp->LcdLayer].TextColor;
3401c326:	6806      	ldr	r6, [r0, #0]
        if(line & (1 << (width- j + offset- 1)))
3401c328:	bf08      	it	eq
3401c32a:	461e      	moveq	r6, r3
      for (j = 0; j < width; j++)
3401c32c:	3701      	adds	r7, #1
          argb32[j] = DrawProp[DrawProp->LcdLayer].TextColor;
3401c32e:	f849 6b04 	str.w	r6, [r9], #4
      for (j = 0; j < width; j++)
3401c332:	e7ee      	b.n	3401c312 <UTIL_LCD_DisplayChar+0x16a>
3401c334:	f04f 0c01 	mov.w	ip, #1
        if(line & (1 << (width- j + offset- 1)))
3401c338:	9b03      	ldr	r3, [sp, #12]
      for (j = 0; j < width; j++)
3401c33a:	f04f 0e00 	mov.w	lr, #0
        if(line & (1 << (width- j + offset- 1)))
3401c33e:	f103 3bff 	add.w	fp, r3, #4294967295
3401c342:	4663      	mov	r3, ip
3401c344:	4574      	cmp	r4, lr
3401c346:	eb04 0603 	add.w	r6, r4, r3
3401c34a:	bf08      	it	eq
3401c34c:	4666      	moveq	r6, ip
3401c34e:	f10d 0a28 	add.w	sl, sp, #40	@ 0x28
      for (j = 0; j < width; j++)
3401c352:	3e01      	subs	r6, #1
3401c354:	f43f af77 	beq.w	3401c246 <UTIL_LCD_DisplayChar+0x9e>
        if(line & (1 << (width- j + offset- 1)))
3401c358:	ebab 030e 	sub.w	r3, fp, lr
3401c35c:	fa0c f303 	lsl.w	r3, ip, r3
3401c360:	4213      	tst	r3, r2
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].TextColor);
3401c362:	bf14      	ite	ne
3401c364:	6807      	ldrne	r7, [r0, #0]
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
3401c366:	6847      	ldreq	r7, [r0, #4]
      for (j = 0; j < width; j++)
3401c368:	f10e 0e01 	add.w	lr, lr, #1
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
3401c36c:	0f3b      	lsrs	r3, r7, #28
3401c36e:	f3c7 1903 	ubfx	r9, r7, #4, #4
3401c372:	ea49 3903 	orr.w	r9, r9, r3, lsl #12
3401c376:	0a3b      	lsrs	r3, r7, #8
3401c378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
3401c37c:	0b3f      	lsrs	r7, r7, #12
3401c37e:	ea49 0303 	orr.w	r3, r9, r3
3401c382:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
3401c386:	433b      	orrs	r3, r7
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].TextColor);
3401c388:	f82a 3b02 	strh.w	r3, [sl], #2
      for (j = 0; j < width; j++)
3401c38c:	e7e1      	b.n	3401c352 <UTIL_LCD_DisplayChar+0x1aa>
3401c38e:	bf00      	nop
3401c390:	340dafac 	.word	0x340dafac

3401c394 <UTIL_LCD_DisplayStringAt>:
{
3401c394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
3401c398:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 3401c424 <UTIL_LCD_DisplayStringAt+0x90>
{
3401c39c:	4605      	mov	r5, r0
  while (*ptr++) size ++ ;
3401c39e:	4610      	mov	r0, r2
{
3401c3a0:	4699      	mov	r9, r3
3401c3a2:	4616      	mov	r6, r2
3401c3a4:	460f      	mov	r7, r1
  while (*ptr++) size ++ ;
3401c3a6:	f7e4 f9f3 	bl	34000790 <strlen>
  xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
3401c3aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
  switch (Mode)
3401c3ae:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
3401c3b2:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401c3b6:	689a      	ldr	r2, [r3, #8]
3401c3b8:	695c      	ldr	r4, [r3, #20]
3401c3ba:	8892      	ldrh	r2, [r2, #4]
3401c3bc:	fbb4 f4f2 	udiv	r4, r4, r2
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
3401c3c0:	eba4 0400 	sub.w	r4, r4, r0
3401c3c4:	fb02 f404 	mul.w	r4, r2, r4
  switch (Mode)
3401c3c8:	d01b      	beq.n	3401c402 <UTIL_LCD_DisplayStringAt+0x6e>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
3401c3ca:	1b64      	subs	r4, r4, r5
3401c3cc:	f1b9 0f02 	cmp.w	r9, #2
3401c3d0:	bf08      	it	eq
3401c3d2:	4625      	moveq	r5, r4
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
3401c3d4:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
3401c3d8:	1e6a      	subs	r2, r5, #1
    refcolumn = 1;
3401c3da:	429a      	cmp	r2, r3
3401c3dc:	bf88      	it	hi
3401c3de:	2501      	movhi	r5, #1
3401c3e0:	2400      	movs	r4, #0
  while ((*Text != 0) & (((DrawProp[DrawProp->LcdLayer].LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
3401c3e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
3401c3e6:	5d32      	ldrb	r2, [r6, r4]
3401c3e8:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401c3ec:	6899      	ldr	r1, [r3, #8]
3401c3ee:	695b      	ldr	r3, [r3, #20]
3401c3f0:	8889      	ldrh	r1, [r1, #4]
3401c3f2:	fb04 3311 	mls	r3, r4, r1, r3
3401c3f6:	b29b      	uxth	r3, r3
3401c3f8:	4299      	cmp	r1, r3
3401c3fa:	d800      	bhi.n	3401c3fe <UTIL_LCD_DisplayStringAt+0x6a>
3401c3fc:	b922      	cbnz	r2, 3401c408 <UTIL_LCD_DisplayStringAt+0x74>
}
3401c3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
3401c402:	eb05 0554 	add.w	r5, r5, r4, lsr #1
      break;
3401c406:	e7e5      	b.n	3401c3d4 <UTIL_LCD_DisplayStringAt+0x40>
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
3401c408:	4628      	mov	r0, r5
3401c40a:	4639      	mov	r1, r7
3401c40c:	f7ff fecc 	bl	3401c1a8 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
3401c410:	f8d8 300c 	ldr.w	r3, [r8, #12]
    i++;
3401c414:	3401      	adds	r4, #1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
3401c416:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401c41a:	689b      	ldr	r3, [r3, #8]
3401c41c:	889b      	ldrh	r3, [r3, #4]
3401c41e:	441d      	add	r5, r3
    i++;
3401c420:	e7df      	b.n	3401c3e2 <UTIL_LCD_DisplayStringAt+0x4e>
3401c422:	bf00      	nop
3401c424:	340dafac 	.word	0x340dafac

3401c428 <UTIL_LCD_DrawLine>:
{
3401c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  x_diff = Xpos2 - Xpos1;
3401c42c:	1a14      	subs	r4, r2, r0
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
3401c42e:	2c00      	cmp	r4, #0
  y_diff = Ypos2 - Ypos1;
3401c430:	eba3 0601 	sub.w	r6, r3, r1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
3401c434:	bfb8      	it	lt
3401c436:	4264      	neglt	r4, r4
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
3401c438:	2e00      	cmp	r6, #0
3401c43a:	bfb8      	it	lt
3401c43c:	4276      	neglt	r6, r6
    xinc1 = 1;
3401c43e:	4282      	cmp	r2, r0
3401c440:	bf34      	ite	cc
3401c442:	f04f 39ff 	movcc.w	r9, #4294967295
3401c446:	f04f 0901 	movcs.w	r9, #1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
3401c44a:	b224      	sxth	r4, r4
    yinc1 = 1;
3401c44c:	428b      	cmp	r3, r1
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
3401c44e:	b236      	sxth	r6, r6
    yinc1 = 1;
3401c450:	bf34      	ite	cc
3401c452:	f04f 3aff 	movcc.w	sl, #4294967295
3401c456:	f04f 0a01 	movcs.w	sl, #1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
3401c45a:	42b4      	cmp	r4, r6
{
3401c45c:	b085      	sub	sp, #20
  x = Xpos1;                       /* Start x off at the first pixel */
3401c45e:	b207      	sxth	r7, r0
  y = Ypos1;                       /* Start y off at the first pixel */
3401c460:	fa0f f881 	sxth.w	r8, r1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
3401c464:	db10      	blt.n	3401c488 <UTIL_LCD_DrawLine+0x60>
    num = deltax / 2;
3401c466:	f8cd 9000 	str.w	r9, [sp]
    yinc2 = 0;                  /* Don't change the y for every iteration */
3401c46a:	f04f 0900 	mov.w	r9, #0
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
3401c46e:	464b      	mov	r3, r9
    num = deltax / 2;
3401c470:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
3401c474:	106d      	asrs	r5, r5, #1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
3401c476:	f04f 0b00 	mov.w	fp, #0
3401c47a:	fa0f f28b 	sxth.w	r2, fp
3401c47e:	4294      	cmp	r4, r2
3401c480:	da0f      	bge.n	3401c4a2 <UTIL_LCD_DrawLine+0x7a>
}
3401c482:	b005      	add	sp, #20
3401c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
3401c488:	4623      	mov	r3, r4
3401c48a:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
    den = deltay;
3401c48e:	4634      	mov	r4, r6
    numadd = deltax;
3401c490:	461e      	mov	r6, r3
    num = deltay / 2;
3401c492:	4653      	mov	r3, sl
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
3401c494:	f04f 0a00 	mov.w	sl, #0
    num = deltay / 2;
3401c498:	f345 054f 	sbfx	r5, r5, #1, #16
    xinc2 = 0;                  /* Don't change the x for every iteration */
3401c49c:	f8cd a000 	str.w	sl, [sp]
3401c4a0:	e7e9      	b.n	3401c476 <UTIL_LCD_DrawLine+0x4e>
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
3401c4a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401c4a4:	b2b8      	uxth	r0, r7
3401c4a6:	fa1f f188 	uxth.w	r1, r8
    num += numadd;                            /* Increase the numerator by the top of the fraction */
3401c4aa:	4435      	add	r5, r6
3401c4ac:	9303      	str	r3, [sp, #12]
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
3401c4ae:	e9cd 0101 	strd	r0, r1, [sp, #4]
3401c4b2:	f7ff fe45 	bl	3401c140 <UTIL_LCD_SetPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
3401c4b6:	b2aa      	uxth	r2, r5
3401c4b8:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
3401c4ba:	42ac      	cmp	r4, r5
3401c4bc:	9b03      	ldr	r3, [sp, #12]
3401c4be:	dc08      	bgt.n	3401c4d2 <UTIL_LCD_DrawLine+0xaa>
      x += xinc1;                             /* Change the x as appropriate */
3401c4c0:	9801      	ldr	r0, [sp, #4]
      y += yinc1;                             /* Change the y as appropriate */
3401c4c2:	9902      	ldr	r1, [sp, #8]
      num -= den;                             /* Calculate the new numerator value */
3401c4c4:	1b12      	subs	r2, r2, r4
      x += xinc1;                             /* Change the x as appropriate */
3401c4c6:	4448      	add	r0, r9
      y += yinc1;                             /* Change the y as appropriate */
3401c4c8:	4451      	add	r1, sl
      num -= den;                             /* Calculate the new numerator value */
3401c4ca:	b215      	sxth	r5, r2
      x += xinc1;                             /* Change the x as appropriate */
3401c4cc:	b207      	sxth	r7, r0
      y += yinc1;                             /* Change the y as appropriate */
3401c4ce:	fa0f f881 	sxth.w	r8, r1
    x += xinc2;                               /* Change the x as appropriate */
3401c4d2:	9a00      	ldr	r2, [sp, #0]
    y += yinc2;                               /* Change the y as appropriate */
3401c4d4:	4498      	add	r8, r3
    x += xinc2;                               /* Change the x as appropriate */
3401c4d6:	4417      	add	r7, r2
3401c4d8:	b23f      	sxth	r7, r7
    y += yinc2;                               /* Change the y as appropriate */
3401c4da:	fa0f f888 	sxth.w	r8, r8
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
3401c4de:	f10b 0b01 	add.w	fp, fp, #1
3401c4e2:	e7ca      	b.n	3401c47a <UTIL_LCD_DrawLine+0x52>

3401c4e4 <UTIL_LCD_DrawRect>:
{
3401c4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401c4e8:	461f      	mov	r7, r3
3401c4ea:	460e      	mov	r6, r1
3401c4ec:	4605      	mov	r5, r0
3401c4ee:	4614      	mov	r4, r2
3401c4f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
3401c4f4:	4643      	mov	r3, r8
3401c4f6:	f7ff fdb7 	bl	3401c068 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
3401c4fa:	1e79      	subs	r1, r7, #1
3401c4fc:	4643      	mov	r3, r8
3401c4fe:	4622      	mov	r2, r4
3401c500:	4628      	mov	r0, r5
3401c502:	4431      	add	r1, r6
3401c504:	f7ff fdb0 	bl	3401c068 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
3401c508:	3c01      	subs	r4, #1
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
3401c50a:	4643      	mov	r3, r8
3401c50c:	463a      	mov	r2, r7
3401c50e:	4631      	mov	r1, r6
3401c510:	4628      	mov	r0, r5
3401c512:	f7ff fddf 	bl	3401c0d4 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
3401c516:	4643      	mov	r3, r8
3401c518:	463a      	mov	r2, r7
3401c51a:	4631      	mov	r1, r6
3401c51c:	1960      	adds	r0, r4, r5
}
3401c51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
3401c522:	f7ff bdd7 	b.w	3401c0d4 <UTIL_LCD_DrawVLine>
	...

3401c528 <UTIL_LCD_DrawCircle>:
{
3401c528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c52c:	4680      	mov	r8, r0
3401c52e:	468a      	mov	sl, r1
3401c530:	4615      	mov	r5, r2
3401c532:	4699      	mov	r9, r3
  current_x = 0;
3401c534:	2600      	movs	r6, #0
  decision = 3 - (Radius << 1);
3401c536:	0057      	lsls	r7, r2, #1
    if((Ypos - current_y) < DrawProp[DrawProp->LcdLayer].LcdYsize)
3401c538:	4c4d      	ldr	r4, [pc, #308]	@ (3401c670 <UTIL_LCD_DrawCircle+0x148>)
  decision = 3 - (Radius << 1);
3401c53a:	f1c7 0703 	rsb	r7, r7, #3
    if((Ypos - current_y) < DrawProp[DrawProp->LcdLayer].LcdYsize)
3401c53e:	68e3      	ldr	r3, [r4, #12]
3401c540:	ebaa 0b05 	sub.w	fp, sl, r5
3401c544:	eb04 1343 	add.w	r3, r4, r3, lsl #5
3401c548:	699a      	ldr	r2, [r3, #24]
3401c54a:	4593      	cmp	fp, r2
3401c54c:	d218      	bcs.n	3401c580 <UTIL_LCD_DrawCircle+0x58>
      if((Xpos + current_x) < DrawProp[DrawProp->LcdLayer].LcdXsize)
3401c54e:	695b      	ldr	r3, [r3, #20]
3401c550:	eb08 0006 	add.w	r0, r8, r6
3401c554:	4283      	cmp	r3, r0
3401c556:	d905      	bls.n	3401c564 <UTIL_LCD_DrawCircle+0x3c>
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
3401c558:	464a      	mov	r2, r9
3401c55a:	fa1f f18b 	uxth.w	r1, fp
3401c55e:	b280      	uxth	r0, r0
3401c560:	f7ff fdee 	bl	3401c140 <UTIL_LCD_SetPixel>
      if((Xpos - current_x) < DrawProp[DrawProp->LcdLayer].LcdXsize)
3401c564:	68e3      	ldr	r3, [r4, #12]
3401c566:	eba8 0006 	sub.w	r0, r8, r6
3401c56a:	eb04 1343 	add.w	r3, r4, r3, lsl #5
3401c56e:	695b      	ldr	r3, [r3, #20]
3401c570:	4283      	cmp	r3, r0
3401c572:	d905      	bls.n	3401c580 <UTIL_LCD_DrawCircle+0x58>
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
3401c574:	464a      	mov	r2, r9
3401c576:	fa1f f18b 	uxth.w	r1, fp
3401c57a:	b280      	uxth	r0, r0
3401c57c:	f7ff fde0 	bl	3401c140 <UTIL_LCD_SetPixel>
    if((Ypos - current_x) < DrawProp[DrawProp->LcdLayer].LcdYsize)
3401c580:	68e3      	ldr	r3, [r4, #12]
3401c582:	ebaa 0b06 	sub.w	fp, sl, r6
3401c586:	eb04 1343 	add.w	r3, r4, r3, lsl #5
3401c58a:	699a      	ldr	r2, [r3, #24]
3401c58c:	455a      	cmp	r2, fp
3401c58e:	d918      	bls.n	3401c5c2 <UTIL_LCD_DrawCircle+0x9a>
      if((Xpos + current_y) < DrawProp[DrawProp->LcdLayer].LcdXsize)
3401c590:	695b      	ldr	r3, [r3, #20]
3401c592:	eb08 0005 	add.w	r0, r8, r5
3401c596:	4298      	cmp	r0, r3
3401c598:	d205      	bcs.n	3401c5a6 <UTIL_LCD_DrawCircle+0x7e>
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
3401c59a:	464a      	mov	r2, r9
3401c59c:	fa1f f18b 	uxth.w	r1, fp
3401c5a0:	b280      	uxth	r0, r0
3401c5a2:	f7ff fdcd 	bl	3401c140 <UTIL_LCD_SetPixel>
      if((Xpos - current_y) < DrawProp[DrawProp->LcdLayer].LcdXsize)
3401c5a6:	68e3      	ldr	r3, [r4, #12]
3401c5a8:	eba8 0005 	sub.w	r0, r8, r5
3401c5ac:	eb04 1343 	add.w	r3, r4, r3, lsl #5
3401c5b0:	695b      	ldr	r3, [r3, #20]
3401c5b2:	4298      	cmp	r0, r3
3401c5b4:	d205      	bcs.n	3401c5c2 <UTIL_LCD_DrawCircle+0x9a>
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
3401c5b6:	464a      	mov	r2, r9
3401c5b8:	fa1f f18b 	uxth.w	r1, fp
3401c5bc:	b280      	uxth	r0, r0
3401c5be:	f7ff fdbf 	bl	3401c140 <UTIL_LCD_SetPixel>
    if((Ypos + current_y) < DrawProp[DrawProp->LcdLayer].LcdYsize)
3401c5c2:	68e3      	ldr	r3, [r4, #12]
3401c5c4:	eb0a 0b05 	add.w	fp, sl, r5
3401c5c8:	eb04 1343 	add.w	r3, r4, r3, lsl #5
3401c5cc:	699a      	ldr	r2, [r3, #24]
3401c5ce:	4593      	cmp	fp, r2
3401c5d0:	d218      	bcs.n	3401c604 <UTIL_LCD_DrawCircle+0xdc>
      if((Xpos + current_x) < DrawProp[DrawProp->LcdLayer].LcdXsize)
3401c5d2:	695b      	ldr	r3, [r3, #20]
3401c5d4:	eb08 0006 	add.w	r0, r8, r6
3401c5d8:	4283      	cmp	r3, r0
3401c5da:	d905      	bls.n	3401c5e8 <UTIL_LCD_DrawCircle+0xc0>
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
3401c5dc:	464a      	mov	r2, r9
3401c5de:	fa1f f18b 	uxth.w	r1, fp
3401c5e2:	b280      	uxth	r0, r0
3401c5e4:	f7ff fdac 	bl	3401c140 <UTIL_LCD_SetPixel>
      if((Xpos - current_x) < DrawProp[DrawProp->LcdLayer].LcdXsize)
3401c5e8:	68e3      	ldr	r3, [r4, #12]
3401c5ea:	eba8 0006 	sub.w	r0, r8, r6
3401c5ee:	eb04 1343 	add.w	r3, r4, r3, lsl #5
3401c5f2:	695b      	ldr	r3, [r3, #20]
3401c5f4:	4283      	cmp	r3, r0
3401c5f6:	d905      	bls.n	3401c604 <UTIL_LCD_DrawCircle+0xdc>
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
3401c5f8:	464a      	mov	r2, r9
3401c5fa:	fa1f f18b 	uxth.w	r1, fp
3401c5fe:	b280      	uxth	r0, r0
3401c600:	f7ff fd9e 	bl	3401c140 <UTIL_LCD_SetPixel>
    if((Ypos + current_x) < DrawProp[DrawProp->LcdLayer].LcdYsize)
3401c604:	68e3      	ldr	r3, [r4, #12]
3401c606:	eb0a 0b06 	add.w	fp, sl, r6
3401c60a:	eb04 1343 	add.w	r3, r4, r3, lsl #5
3401c60e:	699a      	ldr	r2, [r3, #24]
3401c610:	455a      	cmp	r2, fp
3401c612:	d918      	bls.n	3401c646 <UTIL_LCD_DrawCircle+0x11e>
      if((Xpos + current_y) < DrawProp[DrawProp->LcdLayer].LcdXsize)
3401c614:	695b      	ldr	r3, [r3, #20]
3401c616:	eb08 0005 	add.w	r0, r8, r5
3401c61a:	4298      	cmp	r0, r3
3401c61c:	d205      	bcs.n	3401c62a <UTIL_LCD_DrawCircle+0x102>
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
3401c61e:	464a      	mov	r2, r9
3401c620:	fa1f f18b 	uxth.w	r1, fp
3401c624:	b280      	uxth	r0, r0
3401c626:	f7ff fd8b 	bl	3401c140 <UTIL_LCD_SetPixel>
      if((Xpos - current_y) < DrawProp[DrawProp->LcdLayer].LcdXsize)
3401c62a:	68e3      	ldr	r3, [r4, #12]
3401c62c:	eba8 0005 	sub.w	r0, r8, r5
3401c630:	eb04 1343 	add.w	r3, r4, r3, lsl #5
3401c634:	695b      	ldr	r3, [r3, #20]
3401c636:	4298      	cmp	r0, r3
3401c638:	d205      	bcs.n	3401c646 <UTIL_LCD_DrawCircle+0x11e>
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
3401c63a:	464a      	mov	r2, r9
3401c63c:	fa1f f18b 	uxth.w	r1, fp
3401c640:	b280      	uxth	r0, r0
3401c642:	f7ff fd7d 	bl	3401c140 <UTIL_LCD_SetPixel>
    if (decision < 0)
3401c646:	2f00      	cmp	r7, #0
      decision += (current_x << 2) + 6;
3401c648:	bfb5      	itete	lt
3401c64a:	3706      	addlt	r7, #6
      decision += ((current_x - current_y) << 2) + 10;
3401c64c:	1b73      	subge	r3, r6, r5
      decision += (current_x << 2) + 6;
3401c64e:	eb07 0786 	addlt.w	r7, r7, r6, lsl #2
      decision += ((current_x - current_y) << 2) + 10;
3401c652:	370a      	addge	r7, #10
      current_y--;
3401c654:	bfa8      	it	ge
3401c656:	f105 35ff 	addge.w	r5, r5, #4294967295
    current_x++;
3401c65a:	f106 0601 	add.w	r6, r6, #1
      decision += ((current_x - current_y) << 2) + 10;
3401c65e:	bfa8      	it	ge
3401c660:	eb07 0783 	addge.w	r7, r7, r3, lsl #2
  while (current_x <= current_y)
3401c664:	42b5      	cmp	r5, r6
3401c666:	f4bf af6a 	bcs.w	3401c53e <UTIL_LCD_DrawCircle+0x16>
}
3401c66a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401c66e:	bf00      	nop
3401c670:	340dafac 	.word	0x340dafac

3401c674 <UTIL_LCD_FillRect>:
{
3401c674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401c676:	4607      	mov	r7, r0
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c678:	481a      	ldr	r0, [pc, #104]	@ (3401c6e4 <UTIL_LCD_FillRect+0x70>)
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401c67a:	4e1b      	ldr	r6, [pc, #108]	@ (3401c6e8 <UTIL_LCD_FillRect+0x74>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c67c:	68c5      	ldr	r5, [r0, #12]
{
3401c67e:	9c08      	ldr	r4, [sp, #32]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c680:	eb00 1545 	add.w	r5, r0, r5, lsl #5
3401c684:	69ed      	ldr	r5, [r5, #28]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401c686:	6936      	ldr	r6, [r6, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c688:	2d02      	cmp	r5, #2
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401c68a:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c68c:	d10c      	bne.n	3401c6a8 <UTIL_LCD_FillRect+0x34>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401c68e:	0965      	lsrs	r5, r4, #5
3401c690:	ea4f 2c14 	mov.w	ip, r4, lsr #8
3401c694:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
3401c698:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
3401c69c:	ea45 050c 	orr.w	r5, r5, ip
3401c6a0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882ARGB4444(Color));
3401c6a4:	432c      	orrs	r4, r5
3401c6a6:	e003      	b.n	3401c6b0 <UTIL_LCD_FillRect+0x3c>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401c6a8:	2d01      	cmp	r5, #1
3401c6aa:	d109      	bne.n	3401c6c0 <UTIL_LCD_FillRect+0x4c>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB888(Color));
3401c6ac:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
3401c6b0:	e9cd 3400 	strd	r3, r4, [sp]
3401c6b4:	4613      	mov	r3, r2
3401c6b6:	460a      	mov	r2, r1
3401c6b8:	4639      	mov	r1, r7
3401c6ba:	47b0      	blx	r6
}
3401c6bc:	b003      	add	sp, #12
3401c6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401c6c0:	2d04      	cmp	r5, #4
3401c6c2:	d1f5      	bne.n	3401c6b0 <UTIL_LCD_FillRect+0x3c>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882ARGB4444(Color));
3401c6c4:	ea4f 7c14 	mov.w	ip, r4, lsr #28
3401c6c8:	f3c4 1503 	ubfx	r5, r4, #4, #4
3401c6cc:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
3401c6d0:	ea4f 2c14 	mov.w	ip, r4, lsr #8
3401c6d4:	f00c 0cf0 	and.w	ip, ip, #240	@ 0xf0
3401c6d8:	0b24      	lsrs	r4, r4, #12
3401c6da:	ea45 050c 	orr.w	r5, r5, ip
3401c6de:	f404 6470 	and.w	r4, r4, #3840	@ 0xf00
3401c6e2:	e7df      	b.n	3401c6a4 <UTIL_LCD_FillRect+0x30>
3401c6e4:	340dafac 	.word	0x340dafac
3401c6e8:	340daf80 	.word	0x340daf80

3401c6ec <UTIL_LCD_Clear>:
{
3401c6ec:	b507      	push	{r0, r1, r2, lr}
  UTIL_LCD_FillRect(0, 0, DrawProp[DrawProp->LcdLayer].LcdXsize, DrawProp[DrawProp->LcdLayer].LcdYsize, Color);
3401c6ee:	2100      	movs	r1, #0
3401c6f0:	4a06      	ldr	r2, [pc, #24]	@ (3401c70c <UTIL_LCD_Clear+0x20>)
3401c6f2:	68d3      	ldr	r3, [r2, #12]
3401c6f4:	9000      	str	r0, [sp, #0]
3401c6f6:	eb02 1243 	add.w	r2, r2, r3, lsl #5
3401c6fa:	4608      	mov	r0, r1
3401c6fc:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
3401c700:	f7ff ffb8 	bl	3401c674 <UTIL_LCD_FillRect>
}
3401c704:	b003      	add	sp, #12
3401c706:	f85d fb04 	ldr.w	pc, [sp], #4
3401c70a:	bf00      	nop
3401c70c:	340dafac 	.word	0x340dafac

3401c710 <UTIL_LCD_FillCircle>:
{
3401c710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c714:	4680      	mov	r8, r0
3401c716:	4689      	mov	r9, r1
3401c718:	4692      	mov	sl, r2
3401c71a:	461d      	mov	r5, r3
  current_y = Radius;
3401c71c:	4616      	mov	r6, r2
  current_x = 0;
3401c71e:	2400      	movs	r4, #0
  decision = 3 - (Radius << 1);
3401c720:	0057      	lsls	r7, r2, #1
3401c722:	f1c7 0703 	rsb	r7, r7, #3
    if(current_y > 0)
3401c726:	b196      	cbz	r6, 3401c74e <UTIL_LCD_FillCircle+0x3e>
      if(current_y >= Xpos)
3401c728:	45b0      	cmp	r8, r6
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
3401c72a:	eb09 0104 	add.w	r1, r9, r4
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
3401c72e:	eba9 0b04 	sub.w	fp, r9, r4
      if(current_y >= Xpos)
3401c732:	d83a      	bhi.n	3401c7aa <UTIL_LCD_FillCircle+0x9a>
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
3401c734:	eb08 0206 	add.w	r2, r8, r6
3401c738:	462b      	mov	r3, r5
3401c73a:	2000      	movs	r0, #0
3401c73c:	9200      	str	r2, [sp, #0]
3401c73e:	f7ff fc93 	bl	3401c068 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
3401c742:	462b      	mov	r3, r5
3401c744:	4659      	mov	r1, fp
3401c746:	2000      	movs	r0, #0
3401c748:	9a00      	ldr	r2, [sp, #0]
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
3401c74a:	f7ff fc8d 	bl	3401c068 <UTIL_LCD_DrawHLine>
    if(current_x > 0)
3401c74e:	b194      	cbz	r4, 3401c776 <UTIL_LCD_FillCircle+0x66>
      if(current_x >= Xpos)
3401c750:	45a0      	cmp	r8, r4
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
3401c752:	eba9 0106 	sub.w	r1, r9, r6
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
3401c756:	eb09 0b06 	add.w	fp, r9, r6
      if(current_x >= Xpos)
3401c75a:	d833      	bhi.n	3401c7c4 <UTIL_LCD_FillCircle+0xb4>
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
3401c75c:	eb08 0204 	add.w	r2, r8, r4
3401c760:	462b      	mov	r3, r5
3401c762:	2000      	movs	r0, #0
3401c764:	9200      	str	r2, [sp, #0]
3401c766:	f7ff fc7f 	bl	3401c068 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
3401c76a:	462b      	mov	r3, r5
3401c76c:	4659      	mov	r1, fp
3401c76e:	2000      	movs	r0, #0
3401c770:	9a00      	ldr	r2, [sp, #0]
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
3401c772:	f7ff fc79 	bl	3401c068 <UTIL_LCD_DrawHLine>
    if (decision < 0)
3401c776:	2f00      	cmp	r7, #0
      decision += (current_x << 2) + 6;
3401c778:	bfb5      	itete	lt
3401c77a:	3706      	addlt	r7, #6
      decision += ((current_x - current_y) << 2) + 10;
3401c77c:	1ba3      	subge	r3, r4, r6
      decision += (current_x << 2) + 6;
3401c77e:	eb07 0784 	addlt.w	r7, r7, r4, lsl #2
      decision += ((current_x - current_y) << 2) + 10;
3401c782:	370a      	addge	r7, #10
      current_y--;
3401c784:	bfa8      	it	ge
3401c786:	f106 36ff 	addge.w	r6, r6, #4294967295
    current_x++;
3401c78a:	f104 0401 	add.w	r4, r4, #1
      decision += ((current_x - current_y) << 2) + 10;
3401c78e:	bfa8      	it	ge
3401c790:	eb07 0783 	addge.w	r7, r7, r3, lsl #2
  while (current_x <= current_y)
3401c794:	42a6      	cmp	r6, r4
3401c796:	d2c6      	bcs.n	3401c726 <UTIL_LCD_FillCircle+0x16>
  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
3401c798:	462b      	mov	r3, r5
3401c79a:	4652      	mov	r2, sl
3401c79c:	4649      	mov	r1, r9
3401c79e:	4640      	mov	r0, r8
}
3401c7a0:	b003      	add	sp, #12
3401c7a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
3401c7a6:	f7ff bebf 	b.w	3401c528 <UTIL_LCD_DrawCircle>
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
3401c7aa:	0072      	lsls	r2, r6, #1
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
3401c7ac:	eba8 0006 	sub.w	r0, r8, r6
3401c7b0:	462b      	mov	r3, r5
3401c7b2:	e9cd 0200 	strd	r0, r2, [sp]
3401c7b6:	f7ff fc57 	bl	3401c068 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
3401c7ba:	462b      	mov	r3, r5
3401c7bc:	4659      	mov	r1, fp
3401c7be:	9a01      	ldr	r2, [sp, #4]
3401c7c0:	9800      	ldr	r0, [sp, #0]
3401c7c2:	e7c2      	b.n	3401c74a <UTIL_LCD_FillCircle+0x3a>
3401c7c4:	0062      	lsls	r2, r4, #1
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
3401c7c6:	eba8 0004 	sub.w	r0, r8, r4
3401c7ca:	462b      	mov	r3, r5
3401c7cc:	e9cd 0200 	strd	r0, r2, [sp]
3401c7d0:	f7ff fc4a 	bl	3401c068 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
3401c7d4:	462b      	mov	r3, r5
3401c7d6:	4659      	mov	r1, fp
3401c7d8:	9a01      	ldr	r2, [sp, #4]
3401c7da:	9800      	ldr	r0, [sp, #0]
3401c7dc:	e7c9      	b.n	3401c772 <UTIL_LCD_FillCircle+0x62>

3401c7de <LL_Buffer_addr_start>:
    return eb->blob_address;
  }

  static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf)
  {
    if (buf->is_user_allocated)
3401c7de:	7d02      	ldrb	r2, [r0, #20]
    {
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
3401c7e0:	6843      	ldr	r3, [r0, #4]
    if (buf->is_user_allocated)
3401c7e2:	b102      	cbz	r2, 3401c7e6 <LL_Buffer_addr_start+0x8>
      return *tmp;
3401c7e4:	681b      	ldr	r3, [r3, #0]
    return buf->addr_base.p;
  }

  static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf)
  {
    return LL_Buffer_addr_base(buf) + buf->offset_start;
3401c7e6:	6880      	ldr	r0, [r0, #8]
  }
3401c7e8:	4418      	add	r0, r3
3401c7ea:	4770      	bx	lr

3401c7ec <decode_ld_landmark_fast>:
// Replace decode_ld_landmark() with a no-trig version:
static inline void decode_ld_landmark_fast(const roi_t *roi,
                                           const ld_point_t *lm,
                                           ld_point_t *decoded)
{
  float dx = (lm->x - 0.5f) * roi->w;
3401c7ec:	ed91 7a00 	vldr	s14, [r1]
3401c7f0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
3401c7f4:	edd0 7a02 	vldr	s15, [r0, #8]
3401c7f8:	ee37 7a66 	vsub.f32	s14, s14, s13
3401c7fc:	ee27 7a27 	vmul.f32	s14, s14, s15
  float dy = (lm->y - 0.5f) * roi->h;
3401c800:	edd1 7a01 	vldr	s15, [r1, #4]
3401c804:	ee77 7ae6 	vsub.f32	s15, s15, s13
3401c808:	edd0 6a03 	vldr	s13, [r0, #12]
  decoded->x = roi->cx + dx * roi->cos_r - dy * roi->sin_r;
3401c80c:	ed90 6a05 	vldr	s12, [r0, #20]
  float dy = (lm->y - 0.5f) * roi->h;
3401c810:	ee67 7aa6 	vmul.f32	s15, s15, s13
  decoded->x = roi->cx + dx * roi->cos_r - dy * roi->sin_r;
3401c814:	edd0 6a00 	vldr	s13, [r0]
3401c818:	edd0 5a06 	vldr	s11, [r0, #24]
3401c81c:	eee6 6a07 	vfma.f32	s13, s12, s14
3401c820:	eee5 6ae7 	vfms.f32	s13, s11, s15
3401c824:	edc2 6a00 	vstr	s13, [r2]
  decoded->y = roi->cy + dx * roi->sin_r + dy * roi->cos_r;
3401c828:	edd0 6a01 	vldr	s13, [r0, #4]
3401c82c:	eee5 6a87 	vfma.f32	s13, s11, s14
3401c830:	eeb0 7a66 	vmov.f32	s14, s13
3401c834:	eea6 7a27 	vfma.f32	s14, s12, s15
3401c838:	ed82 7a01 	vstr	s14, [r2, #4]
}
3401c83c:	4770      	bx	lr

3401c83e <copy_pd_box>:
  roi->rotation = 0;
#endif
}

static void copy_pd_box(pd_pp_box_t *dst, pd_pp_box_t *src)
{
3401c83e:	b530      	push	{r4, r5, lr}
  dst->prob = src->prob;
  dst->x_center = src->x_center;
  dst->y_center = src->y_center;
  dst->width = src->width;
  dst->height = src->height;
  for (i = 0 ; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++)
3401c840:	f04f 0e07 	mov.w	lr, #7
  dst->prob = src->prob;
3401c844:	680b      	ldr	r3, [r1, #0]
  for (i = 0 ; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++)
3401c846:	f04e e001 	dls	lr, lr
  dst->prob = src->prob;
3401c84a:	6003      	str	r3, [r0, #0]
  dst->x_center = src->x_center;
3401c84c:	684b      	ldr	r3, [r1, #4]
    dst->pKps[i] = src->pKps[i];
3401c84e:	694c      	ldr	r4, [r1, #20]
  dst->x_center = src->x_center;
3401c850:	6043      	str	r3, [r0, #4]
  dst->y_center = src->y_center;
3401c852:	688b      	ldr	r3, [r1, #8]
    dst->pKps[i] = src->pKps[i];
3401c854:	6945      	ldr	r5, [r0, #20]
  dst->y_center = src->y_center;
3401c856:	6083      	str	r3, [r0, #8]
  dst->width = src->width;
3401c858:	68cb      	ldr	r3, [r1, #12]
3401c85a:	60c3      	str	r3, [r0, #12]
  dst->height = src->height;
3401c85c:	690b      	ldr	r3, [r1, #16]
3401c85e:	6103      	str	r3, [r0, #16]
  for (i = 0 ; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++)
3401c860:	2300      	movs	r3, #0
    dst->pKps[i] = src->pKps[i];
3401c862:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
3401c866:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
3401c86a:	c903      	ldmia	r1, {r0, r1}
  for (i = 0 ; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++)
3401c86c:	3301      	adds	r3, #1
    dst->pKps[i] = src->pKps[i];
3401c86e:	e882 0003 	stmia.w	r2, {r0, r1}
  for (i = 0 ; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++)
3401c872:	f00f c00b 	le	lr, 3401c862 <copy_pd_box+0x24>
}
3401c876:	bd30      	pop	{r4, r5, pc}

3401c878 <clamp_point>:
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

static int clamp_point(int *x, int *y)
{
  int xi = *x;
3401c878:	6803      	ldr	r3, [r0, #0]
{
3401c87a:	b510      	push	{r4, lr}
  int yi = *y;

  if (*x < 0)
3401c87c:	2b00      	cmp	r3, #0
    *x = 0;
3401c87e:	bfb8      	it	lt
3401c880:	2400      	movlt	r4, #0
  int yi = *y;
3401c882:	680a      	ldr	r2, [r1, #0]
    *x = 0;
3401c884:	bfb8      	it	lt
3401c886:	6004      	strlt	r4, [r0, #0]
  if (*y < 0)
3401c888:	680c      	ldr	r4, [r1, #0]
3401c88a:	2c00      	cmp	r4, #0
    *y = 0;
3401c88c:	bfbc      	itt	lt
3401c88e:	2400      	movlt	r4, #0
3401c890:	600c      	strlt	r4, [r1, #0]
  if (*x >= lcd_bg_area.XSize)
3401c892:	6804      	ldr	r4, [r0, #0]
3401c894:	f5b4 7f48 	cmp.w	r4, #800	@ 0x320
    *x = lcd_bg_area.XSize - 1;
3401c898:	bf24      	itt	cs
3401c89a:	f240 341f 	movwcs	r4, #799	@ 0x31f
3401c89e:	6004      	strcs	r4, [r0, #0]
  if (*y >= lcd_bg_area.YSize)
3401c8a0:	680c      	ldr	r4, [r1, #0]
3401c8a2:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
    *y = lcd_bg_area.YSize - 1;
3401c8a6:	bf24      	itt	cs
3401c8a8:	f240 14df 	movwcs	r4, #479	@ 0x1df
3401c8ac:	600c      	strcs	r4, [r1, #0]

  return (xi != *x) || (yi != *y);
3401c8ae:	6800      	ldr	r0, [r0, #0]
3401c8b0:	4298      	cmp	r0, r3
3401c8b2:	d104      	bne.n	3401c8be <clamp_point+0x46>
3401c8b4:	6808      	ldr	r0, [r1, #0]
3401c8b6:	1a80      	subs	r0, r0, r2
3401c8b8:	bf18      	it	ne
3401c8ba:	2001      	movne	r0, #1
}
3401c8bc:	bd10      	pop	{r4, pc}
  return (xi != *x) || (yi != *y);
3401c8be:	2001      	movs	r0, #1
3401c8c0:	e7fc      	b.n	3401c8bc <clamp_point+0x44>
	...

3401c8c4 <br_write_line>:
/* Forward prototypes so later functions can call these */
static int  br_read_line(char *out, int maxlen, uint32_t timeout_ms);
static void br_write_line(const char *s);

/* Use the BSP COM handle. Make sure you did BSP_COM_Init(COM1, &c) in app_run(). */
static void br_write_line(const char *s) {
3401c8c4:	b510      	push	{r4, lr}
3401c8c6:	4604      	mov	r4, r0
  HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)s, (uint16_t)strlen(s), 20);
3401c8c8:	f7e3 ff62 	bl	34000790 <strlen>
3401c8cc:	4621      	mov	r1, r4
}
3401c8ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)s, (uint16_t)strlen(s), 20);
3401c8d2:	b282      	uxth	r2, r0
3401c8d4:	2314      	movs	r3, #20
3401c8d6:	4801      	ldr	r0, [pc, #4]	@ (3401c8dc <br_write_line+0x18>)
3401c8d8:	f7fe bc6a 	b.w	3401b1b0 <HAL_UART_Transmit>
3401c8dc:	340da1e4 	.word	0x340da1e4

3401c8e0 <try_parse_axis_feedback>:
//  // Tunables for human→robot zoom (0.75..0.95 → 0..1)
//  static RangeMap s_thumb_flex_map = { .in_lo=0.75f, .in_hi=0.95f, .dead_lo=0.03f, .dead_hi=0.03f, .gamma=0.85f };
//  static RangeMap s_thumb_opp_map  = { .in_lo=0.75f, .in_hi=0.95f, .dead_lo=0.03f, .dead_hi=0.03f, .gamma=0.85f };

  // tiny helper to parse “Axis…” feedback when present in rx
  static void try_parse_axis_feedback(const char *line) {
3401c8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (strncmp(line, "Axis1:", 6) != 0) return;
3401c8e2:	2206      	movs	r2, #6
3401c8e4:	490b      	ldr	r1, [pc, #44]	@ (3401c914 <try_parse_axis_feedback+0x34>)
  static void try_parse_axis_feedback(const char *line) {
3401c8e6:	4604      	mov	r4, r0
    if (strncmp(line, "Axis1:", 6) != 0) return;
3401c8e8:	f005 f90c 	bl	34021b04 <strncmp>
3401c8ec:	4605      	mov	r5, r0
3401c8ee:	b978      	cbnz	r0, 3401c910 <try_parse_axis_feedback+0x30>
3401c8f0:	2606      	movs	r6, #6
    const char *p = line;
    float P[6];
    for (int i=0; i<6; ++i) {
      p = strstr(p, "P=");
3401c8f2:	4f09      	ldr	r7, [pc, #36]	@ (3401c918 <try_parse_axis_feedback+0x38>)
3401c8f4:	4639      	mov	r1, r7
3401c8f6:	4620      	mov	r0, r4
3401c8f8:	f005 f916 	bl	34021b28 <strstr>
      if (!p) return;
3401c8fc:	b140      	cbz	r0, 3401c910 <try_parse_axis_feedback+0x30>
      p += 2;
      char *endp = NULL;
      P[i] = strtof(p, &endp);
3401c8fe:	a901      	add	r1, sp, #4
3401c900:	3002      	adds	r0, #2
      char *endp = NULL;
3401c902:	9501      	str	r5, [sp, #4]
      P[i] = strtof(p, &endp);
3401c904:	f003 fe58 	bl	340205b8 <strtof>
      if (!endp) return;
3401c908:	9c01      	ldr	r4, [sp, #4]
3401c90a:	b10c      	cbz	r4, 3401c910 <try_parse_axis_feedback+0x30>
    for (int i=0; i<6; ++i) {
3401c90c:	3e01      	subs	r6, #1
3401c90e:	d1f1      	bne.n	3401c8f4 <try_parse_axis_feedback+0x14>
      p = endp;
    }
    for (int i=0;i<6;i++) g_fbP[i] = P[i];
    g_have_fb = 1;
  };
3401c910:	b003      	add	sp, #12
3401c912:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401c914:	3402f983 	.word	0x3402f983
3401c918:	3402f98a 	.word	0x3402f98a

3401c91c <isp_thread_fct>:
{
3401c91c:	b510      	push	{r4, lr}
    ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
3401c91e:	4c09      	ldr	r4, [pc, #36]	@ (3401c944 <isp_thread_fct+0x28>)
3401c920:	f04f 31ff 	mov.w	r1, #4294967295
3401c924:	6820      	ldr	r0, [r4, #0]
3401c926:	f7ed ff2b 	bl	3400a780 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401c92a:	2801      	cmp	r0, #1
3401c92c:	d006      	beq.n	3401c93c <isp_thread_fct+0x20>
3401c92e:	f240 61f7 	movw	r1, #1783	@ 0x6f7
3401c932:	4b05      	ldr	r3, [pc, #20]	@ (3401c948 <isp_thread_fct+0x2c>)
3401c934:	4a05      	ldr	r2, [pc, #20]	@ (3401c94c <isp_thread_fct+0x30>)
3401c936:	4806      	ldr	r0, [pc, #24]	@ (3401c950 <isp_thread_fct+0x34>)
3401c938:	f003 f866 	bl	3401fa08 <__assert_func>
    CAM_IspUpdate();
3401c93c:	f002 fa8e 	bl	3401ee5c <CAM_IspUpdate>
    ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
3401c940:	e7ee      	b.n	3401c920 <isp_thread_fct+0x4>
3401c942:	bf00      	nop
3401c944:	340dd11c 	.word	0x340dd11c
3401c948:	3402ae28 	.word	0x3402ae28
3401c94c:	340c976d 	.word	0x340c976d
3401c950:	3402f98d 	.word	0x3402f98d

3401c954 <on_pd_toggle_button_click>:
{
3401c954:	b510      	push	{r4, lr}
  ret = xSemaphoreTake(disp->lock, portMAX_DELAY);
3401c956:	f04f 31ff 	mov.w	r1, #4294967295
{
3401c95a:	4604      	mov	r4, r0
  ret = xSemaphoreTake(disp->lock, portMAX_DELAY);
3401c95c:	6d40      	ldr	r0, [r0, #84]	@ 0x54
3401c95e:	f7ed ff0f 	bl	3400a780 <xQueueSemaphoreTake>
  assert(ret == pdTRUE);
3401c962:	2801      	cmp	r0, #1
3401c964:	d006      	beq.n	3401c974 <on_pd_toggle_button_click+0x20>
3401c966:	f240 61ba 	movw	r1, #1722	@ 0x6ba
3401c96a:	4b0d      	ldr	r3, [pc, #52]	@ (3401c9a0 <on_pd_toggle_button_click+0x4c>)
3401c96c:	4a0d      	ldr	r2, [pc, #52]	@ (3401c9a4 <on_pd_toggle_button_click+0x50>)
  assert(ret == pdTRUE);
3401c96e:	480e      	ldr	r0, [pc, #56]	@ (3401c9a8 <on_pd_toggle_button_click+0x54>)
3401c970:	f003 f84a 	bl	3401fa08 <__assert_func>
  disp->info.is_pd_displayed = !disp->info.is_pd_displayed;
3401c974:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
  ret = xSemaphoreGive(disp->lock);
3401c978:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  disp->info.is_pd_displayed = !disp->info.is_pd_displayed;
3401c97a:	fab3 f383 	clz	r3, r3
3401c97e:	095b      	lsrs	r3, r3, #5
3401c980:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
  ret = xSemaphoreGive(disp->lock);
3401c984:	2300      	movs	r3, #0
3401c986:	461a      	mov	r2, r3
3401c988:	4619      	mov	r1, r3
3401c98a:	f7ed fd55 	bl	3400a438 <xQueueGenericSend>
  assert(ret == pdTRUE);
3401c98e:	2801      	cmp	r0, #1
3401c990:	d004      	beq.n	3401c99c <on_pd_toggle_button_click+0x48>
3401c992:	f240 61bd 	movw	r1, #1725	@ 0x6bd
3401c996:	4b02      	ldr	r3, [pc, #8]	@ (3401c9a0 <on_pd_toggle_button_click+0x4c>)
3401c998:	4a02      	ldr	r2, [pc, #8]	@ (3401c9a4 <on_pd_toggle_button_click+0x50>)
3401c99a:	e7e8      	b.n	3401c96e <on_pd_toggle_button_click+0x1a>
}
3401c99c:	bd10      	pop	{r4, pc}
3401c99e:	bf00      	nop
3401c9a0:	3402ae28 	.word	0x3402ae28
3401c9a4:	340c9745 	.word	0x340c9745
3401c9a8:	3402f98d 	.word	0x3402f98d

3401c9ac <on_ld_toggle_button_click>:
{
3401c9ac:	b510      	push	{r4, lr}
  ret = xSemaphoreTake(disp->lock, portMAX_DELAY);
3401c9ae:	f04f 31ff 	mov.w	r1, #4294967295
{
3401c9b2:	4604      	mov	r4, r0
  ret = xSemaphoreTake(disp->lock, portMAX_DELAY);
3401c9b4:	6d40      	ldr	r0, [r0, #84]	@ 0x54
3401c9b6:	f7ed fee3 	bl	3400a780 <xQueueSemaphoreTake>
  assert(ret == pdTRUE);
3401c9ba:	2801      	cmp	r0, #1
3401c9bc:	d006      	beq.n	3401c9cc <on_ld_toggle_button_click+0x20>
3401c9be:	f240 61ae 	movw	r1, #1710	@ 0x6ae
3401c9c2:	4b0d      	ldr	r3, [pc, #52]	@ (3401c9f8 <on_ld_toggle_button_click+0x4c>)
3401c9c4:	4a0d      	ldr	r2, [pc, #52]	@ (3401c9fc <on_ld_toggle_button_click+0x50>)
  assert(ret == pdTRUE);
3401c9c6:	480e      	ldr	r0, [pc, #56]	@ (3401ca00 <on_ld_toggle_button_click+0x54>)
3401c9c8:	f003 f81e 	bl	3401fa08 <__assert_func>
  disp->info.is_ld_displayed = !disp->info.is_ld_displayed;
3401c9cc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
  ret = xSemaphoreGive(disp->lock);
3401c9d0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  disp->info.is_ld_displayed = !disp->info.is_ld_displayed;
3401c9d2:	fab3 f383 	clz	r3, r3
3401c9d6:	095b      	lsrs	r3, r3, #5
3401c9d8:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
  ret = xSemaphoreGive(disp->lock);
3401c9dc:	2300      	movs	r3, #0
3401c9de:	461a      	mov	r2, r3
3401c9e0:	4619      	mov	r1, r3
3401c9e2:	f7ed fd29 	bl	3400a438 <xQueueGenericSend>
  assert(ret == pdTRUE);
3401c9e6:	2801      	cmp	r0, #1
3401c9e8:	d004      	beq.n	3401c9f4 <on_ld_toggle_button_click+0x48>
3401c9ea:	f240 61b1 	movw	r1, #1713	@ 0x6b1
3401c9ee:	4b02      	ldr	r3, [pc, #8]	@ (3401c9f8 <on_ld_toggle_button_click+0x4c>)
3401c9f0:	4a02      	ldr	r2, [pc, #8]	@ (3401c9fc <on_ld_toggle_button_click+0x50>)
3401c9f2:	e7e8      	b.n	3401c9c6 <on_ld_toggle_button_click+0x1a>
}
3401c9f4:	bd10      	pop	{r4, pc}
3401c9f6:	bf00      	nop
3401c9f8:	3402ae28 	.word	0x3402ae28
3401c9fc:	340c972b 	.word	0x340c972b
3401ca00:	3402f98d 	.word	0x3402f98d

3401ca04 <button_process>:
{
3401ca04:	b538      	push	{r3, r4, r5, lr}
3401ca06:	4604      	mov	r4, r0
  int state = BSP_PB_GetState(b->button_id);
3401ca08:	7800      	ldrb	r0, [r0, #0]
3401ca0a:	f7f0 ff89 	bl	3400d920 <BSP_PB_GetState>
  if (state != b->prev_state && state && b->on_click_handler)
3401ca0e:	6863      	ldr	r3, [r4, #4]
  int state = BSP_PB_GetState(b->button_id);
3401ca10:	4605      	mov	r5, r0
  if (state != b->prev_state && state && b->on_click_handler)
3401ca12:	4283      	cmp	r3, r0
3401ca14:	d004      	beq.n	3401ca20 <button_process+0x1c>
3401ca16:	b118      	cbz	r0, 3401ca20 <button_process+0x1c>
3401ca18:	68a3      	ldr	r3, [r4, #8]
3401ca1a:	b10b      	cbz	r3, 3401ca20 <button_process+0x1c>
    b->on_click_handler(b->cb_args);
3401ca1c:	68e0      	ldr	r0, [r4, #12]
3401ca1e:	4798      	blx	r3
  b->prev_state = state;
3401ca20:	6065      	str	r5, [r4, #4]
}
3401ca22:	bd38      	pop	{r3, r4, r5, pc}

3401ca24 <joint_angle_rad>:
{
3401ca24:	b508      	push	{r3, lr}
  float v1x = a->x - b->x, v1y = a->y - b->y;
3401ca26:	edd1 7a01 	vldr	s15, [r1, #4]
{
3401ca2a:	ed2d 8b06 	vpush	{d8-d10}
  float v1x = a->x - b->x, v1y = a->y - b->y;
3401ca2e:	ed90 8a01 	vldr	s16, [r0, #4]
3401ca32:	ed91 7a00 	vldr	s14, [r1]
3401ca36:	ee38 8a67 	vsub.f32	s16, s16, s15
3401ca3a:	edd0 9a00 	vldr	s19, [r0]
  float n1 = sqrtf(v1x*v1x + v1y*v1y) + 1e-6f;
3401ca3e:	ee28 0a08 	vmul.f32	s0, s16, s16
  float v1x = a->x - b->x, v1y = a->y - b->y;
3401ca42:	ee79 9ac7 	vsub.f32	s19, s19, s14
  float v2x = c->x - b->x, v2y = c->y - b->y;
3401ca46:	ed92 9a00 	vldr	s18, [r2]
3401ca4a:	ed92 aa01 	vldr	s20, [r2, #4]
  float n1 = sqrtf(v1x*v1x + v1y*v1y) + 1e-6f;
3401ca4e:	eea9 0aa9 	vfma.f32	s0, s19, s19
  float v2x = c->x - b->x, v2y = c->y - b->y;
3401ca52:	ee3a aa67 	vsub.f32	s20, s20, s15
3401ca56:	ee39 9a47 	vsub.f32	s18, s18, s14
  float n1 = sqrtf(v1x*v1x + v1y*v1y) + 1e-6f;
3401ca5a:	eddf aa17 	vldr	s21, [pc, #92]	@ 3401cab8 <joint_angle_rad+0x94>
3401ca5e:	f007 fd79 	bl	34024554 <sqrtf>
3401ca62:	ee70 8a2a 	vadd.f32	s17, s0, s21
  float n2 = sqrtf(v2x*v2x + v2y*v2y) + 1e-6f;
3401ca66:	ee2a 0a0a 	vmul.f32	s0, s20, s20
3401ca6a:	eea9 0a09 	vfma.f32	s0, s18, s18
3401ca6e:	f007 fd71 	bl	34024554 <sqrtf>
  float dot = (v1x*v2x + v1y*v2y) / (n1*n2);
3401ca72:	ee28 8a0a 	vmul.f32	s16, s16, s20
  float n2 = sqrtf(v2x*v2x + v2y*v2y) + 1e-6f;
3401ca76:	ee30 0a2a 	vadd.f32	s0, s0, s21
  float dot = (v1x*v2x + v1y*v2y) / (n1*n2);
3401ca7a:	eea9 8a89 	vfma.f32	s16, s19, s18
3401ca7e:	ee68 8a80 	vmul.f32	s17, s17, s0
  if (dot >  1.f) dot =  1.f;
3401ca82:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  float dot = (v1x*v2x + v1y*v2y) / (n1*n2);
3401ca86:	ee88 0a28 	vdiv.f32	s0, s16, s17
  if (dot >  1.f) dot =  1.f;
3401ca8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
3401ca8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ca92:	dc0e      	bgt.n	3401cab2 <joint_angle_rad+0x8e>
  if (dot < -1.f) dot = -1.f;
3401ca94:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
3401ca98:	eeb4 0a67 	vcmp.f32	s0, s15
3401ca9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401caa0:	bf48      	it	mi
3401caa2:	eeb0 0a67 	vmovmi.f32	s0, s15
}
3401caa6:	ecbd 8b06 	vpop	{d8-d10}
3401caaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return acosf(dot);
3401caae:	f007 bd23 	b.w	340244f8 <acosf>
  if (dot >  1.f) dot =  1.f;
3401cab2:	eeb0 0a67 	vmov.f32	s0, s15
3401cab6:	e7f6      	b.n	3401caa6 <joint_angle_rad+0x82>
3401cab8:	358637bd 	.word	0x358637bd

3401cabc <button_init.part.0>:
static void button_init(button_t *b, Button_TypeDef id, void (*on_click_handler)(void *), void *cb_args)
3401cabc:	b508      	push	{r3, lr}
  assert(ret == BSP_ERROR_NONE);
3401cabe:	f240 3125 	movw	r1, #805	@ 0x325
3401cac2:	4b02      	ldr	r3, [pc, #8]	@ (3401cacc <button_init.part.0+0x10>)
3401cac4:	4a02      	ldr	r2, [pc, #8]	@ (3401cad0 <button_init.part.0+0x14>)
3401cac6:	4803      	ldr	r0, [pc, #12]	@ (3401cad4 <button_init.part.0+0x18>)
3401cac8:	f002 ff9e 	bl	3401fa08 <__assert_func>
3401cacc:	3402f9c6 	.word	0x3402f9c6
3401cad0:	340c971f 	.word	0x340c971f
3401cad4:	3402f98d 	.word	0x3402f98d

3401cad8 <br_read_line.constprop.0>:
static int br_read_line(char *out, int maxlen, uint32_t timeout_ms) {
3401cad8:	b510      	push	{r4, lr}
3401cada:	4604      	mov	r4, r0
  uint32_t t0 = HAL_GetTick();
3401cadc:	f002 f9fe 	bl	3401eedc <HAL_GetTick>
  while ((HAL_GetTick() - t0) < timeout_ms && i < (maxlen - 1)) {
3401cae0:	f002 f9fc 	bl	3401eedc <HAL_GetTick>
  out[i] = '\0';
3401cae4:	2000      	movs	r0, #0
3401cae6:	7020      	strb	r0, [r4, #0]
}
3401cae8:	bd10      	pop	{r4, pc}
	...

3401caec <display_ld_hand>:
{
3401caec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401caf0:	b0c4      	sub	sp, #272	@ 0x110
3401caf2:	4601      	mov	r1, r0
3401caf4:	ad2f      	add	r5, sp, #188	@ 0xbc
  roi_t *roi = &hand->roi;
3401caf6:	46a8      	mov	r8, r5
  for (i = 0; i < LD_LANDMARK_NB; i++) {
3401caf8:	2400      	movs	r4, #0
  roi_t *roi = &hand->roi;
3401cafa:	301c      	adds	r0, #28
  for (i = 0; i < LD_LANDMARK_NB; i++) {
3401cafc:	3138      	adds	r1, #56	@ 0x38
3401cafe:	ae05      	add	r6, sp, #20
    decode_ld_landmark_fast(roi, &hand->ld_landmarks[i], &decoded);
3401cb00:	aa03      	add	r2, sp, #12
3401cb02:	f7ff fe73 	bl	3401c7ec <decode_ld_landmark_fast>
    x[i] = (int)decoded.x;
3401cb06:	eddd 7a03 	vldr	s15, [sp, #12]
3401cb0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3401cb0e:	ee17 ca90 	vmov	ip, s15
    y[i] = (int)decoded.y;
3401cb12:	eddd 7a04 	vldr	s15, [sp, #16]
  if (*x < margin)
3401cb16:	4662      	mov	r2, ip
    y[i] = (int)decoded.y;
3401cb18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  if (*x < margin)
3401cb1c:	2a02      	cmp	r2, #2
3401cb1e:	bfb8      	it	lt
3401cb20:	2202      	movlt	r2, #2
  if (*x >= lcd_bg_area.XSize - margin)
3401cb22:	f240 371d 	movw	r7, #797	@ 0x31d
    y[i] = (int)decoded.y;
3401cb26:	ee17 3a90 	vmov	r3, s15
  if (*x >= lcd_bg_area.XSize - margin)
3401cb2a:	42ba      	cmp	r2, r7
3401cb2c:	bfa8      	it	ge
3401cb2e:	463a      	movge	r2, r7
  if (*y < margin)
3401cb30:	2b02      	cmp	r3, #2
3401cb32:	469e      	mov	lr, r3
  if (*y >= lcd_bg_area.YSize - margin)
3401cb34:	f240 17dd 	movw	r7, #477	@ 0x1dd
  if (*y < margin)
3401cb38:	bfb8      	it	lt
3401cb3a:	f04f 0e02 	movlt.w	lr, #2
  if (*y >= lcd_bg_area.YSize - margin)
3401cb3e:	45be      	cmp	lr, r7
3401cb40:	bfa8      	it	ge
3401cb42:	46be      	movge	lr, r7
  return (xi != *x) || (yi != *y);
3401cb44:	ebb3 030e 	subs.w	r3, r3, lr
3401cb48:	bf18      	it	ne
3401cb4a:	2301      	movne	r3, #1
3401cb4c:	4594      	cmp	ip, r2
3401cb4e:	bf18      	it	ne
3401cb50:	2301      	movne	r3, #1
3401cb52:	af1a      	add	r7, sp, #104	@ 0x68
3401cb54:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
  if (*y >= lcd_bg_area.YSize - margin)
3401cb58:	f847 e024 	str.w	lr, [r7, r4, lsl #2]
  for (i = 0; i < LD_LANDMARK_NB; i++) {
3401cb5c:	3401      	adds	r4, #1
3401cb5e:	2c15      	cmp	r4, #21
    is_clamped[i] = clamp_point_with_margin(&x[i], &y[i], disk_radius);
3401cb60:	f848 3b04 	str.w	r3, [r8], #4
  for (i = 0; i < LD_LANDMARK_NB; i++) {
3401cb64:	f101 0108 	add.w	r1, r1, #8
3401cb68:	d1ca      	bne.n	3401cb00 <display_ld_hand+0x14>
  for (i = 0; i < LD_LANDMARK_NB; i++) {
3401cb6a:	2400      	movs	r4, #0
    if (is_clamped[i])
3401cb6c:	f855 3b04 	ldr.w	r3, [r5], #4
3401cb70:	b943      	cbnz	r3, 3401cb84 <display_ld_hand+0x98>
    UTIL_LCD_FillCircle(x[i], y[i], disk_radius, UTIL_LCD_COLOR_YELLOW);
3401cb72:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
3401cb76:	2202      	movs	r2, #2
3401cb78:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
3401cb7c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
3401cb80:	f7ff fdc6 	bl	3401c710 <UTIL_LCD_FillCircle>
  for (i = 0; i < LD_LANDMARK_NB; i++) {
3401cb84:	3401      	adds	r4, #1
3401cb86:	2c15      	cmp	r4, #21
3401cb88:	d1f0      	bne.n	3401cb6c <display_ld_hand+0x80>
  for (i = 0; i < LD_BINDING_NB; i++) {
3401cb8a:	2500      	movs	r5, #0
    UTIL_LCD_DrawLine(x[ld_bindings_idx[i][0]], y[ld_bindings_idx[i][0]],
3401cb8c:	f04f 467f 	mov.w	r6, #4278190080	@ 0xff000000
3401cb90:	4c10      	ldr	r4, [pc, #64]	@ (3401cbd4 <display_ld_hand+0xe8>)
    if (is_clamped[ld_bindings_idx[i][0]] || is_clamped[ld_bindings_idx[i][1]])
3401cb92:	6820      	ldr	r0, [r4, #0]
3401cb94:	ab44      	add	r3, sp, #272	@ 0x110
3401cb96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
3401cb9a:	f850 3c54 	ldr.w	r3, [r0, #-84]
3401cb9e:	b98b      	cbnz	r3, 3401cbc4 <display_ld_hand+0xd8>
3401cba0:	6862      	ldr	r2, [r4, #4]
3401cba2:	ab44      	add	r3, sp, #272	@ 0x110
3401cba4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
3401cba8:	f852 3c54 	ldr.w	r3, [r2, #-84]
3401cbac:	b953      	cbnz	r3, 3401cbc4 <display_ld_hand+0xd8>
    UTIL_LCD_DrawLine(x[ld_bindings_idx[i][0]], y[ld_bindings_idx[i][0]],
3401cbae:	9600      	str	r6, [sp, #0]
3401cbb0:	f852 3ca8 	ldr.w	r3, [r2, #-168]
3401cbb4:	f850 1ca8 	ldr.w	r1, [r0, #-168]
3401cbb8:	f852 2cfc 	ldr.w	r2, [r2, #-252]
3401cbbc:	f850 0cfc 	ldr.w	r0, [r0, #-252]
3401cbc0:	f7ff fc32 	bl	3401c428 <UTIL_LCD_DrawLine>
  for (i = 0; i < LD_BINDING_NB; i++) {
3401cbc4:	3501      	adds	r5, #1
3401cbc6:	2d15      	cmp	r5, #21
3401cbc8:	f104 0408 	add.w	r4, r4, #8
3401cbcc:	d1e1      	bne.n	3401cb92 <display_ld_hand+0xa6>
}
3401cbce:	b044      	add	sp, #272	@ 0x110
3401cbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401cbd4:	340c98fc 	.word	0x340c98fc

3401cbd8 <roi_shift_and_scale.constprop.0>:
static void roi_shift_and_scale(roi_t *roi, float shift_x, float shift_y, float scale_x, float scale_y)
3401cbd8:	b510      	push	{r4, lr}
3401cbda:	ed2d 8b0c 	vpush	{d8-d13}
  sx = (roi->w * shift_x * cos(roi->rotation) - roi->h * shift_y * sin(roi->rotation));
3401cbde:	ed90 ca04 	vldr	s24, [r0, #16]
3401cbe2:	eeb7 cacc 	vcvt.f64.f32	d12, s24
static void roi_shift_and_scale(roi_t *roi, float shift_x, float shift_y, float scale_x, float scale_y)
3401cbe6:	4604      	mov	r4, r0
3401cbe8:	eeb0 aa40 	vmov.f32	s20, s0
3401cbec:	eef0 9a60 	vmov.f32	s19, s1
  sx = (roi->w * shift_x * cos(roi->rotation) - roi->h * shift_y * sin(roi->rotation));
3401cbf0:	eeb0 0b4c 	vmov.f64	d0, d12
3401cbf4:	edd0 da02 	vldr	s27, [r0, #8]
static void roi_shift_and_scale(roi_t *roi, float shift_x, float shift_y, float scale_x, float scale_y)
3401cbf8:	eeb0 da41 	vmov.f32	s26, s2
  sx = (roi->w * shift_x * cos(roi->rotation) - roi->h * shift_y * sin(roi->rotation));
3401cbfc:	f007 fbe4 	bl	340243c8 <cos>
3401cc00:	ed94 9a03 	vldr	s18, [r4, #12]
3401cc04:	ed9f ba1c 	vldr	s22, [pc, #112]	@ 3401cc78 <roi_shift_and_scale.constprop.0+0xa0>
3401cc08:	ee29 aa0a 	vmul.f32	s20, s18, s20
3401cc0c:	eeb0 8b40 	vmov.f64	d8, d0
3401cc10:	eeb0 0b4c 	vmov.f64	d0, d12
3401cc14:	f007 fc24 	bl	34024460 <sin>
3401cc18:	eeb7 aaca 	vcvt.f64.f32	d10, s20
3401cc1c:	ee2d ba8b 	vmul.f32	s22, s27, s22
3401cc20:	ee20 7b4a 	vnmul.f64	d7, d0, d10
3401cc24:	eeb7 bacb 	vcvt.f64.f32	d11, s22
3401cc28:	eeab 7b08 	vfma.f64	d7, d11, d8
  sy = (roi->w * shift_x * sin(roi->rotation) + roi->h * shift_y * cos(roi->rotation));
3401cc2c:	ee28 8b0a 	vmul.f64	d8, d8, d10
  sx = (roi->w * shift_x * cos(roi->rotation) - roi->h * shift_y * sin(roi->rotation));
3401cc30:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  roi->cx += sx;
3401cc34:	edd4 7a00 	vldr	s15, [r4]
  long_side = MAX(roi->w, roi->h);
3401cc38:	eef4 da49 	vcmp.f32	s27, s18
  sy = (roi->w * shift_x * sin(roi->rotation) + roi->h * shift_y * cos(roi->rotation));
3401cc3c:	eeab 8b00 	vfma.f64	d8, d11, d0
  roi->cx += sx;
3401cc40:	ee77 7a87 	vadd.f32	s15, s15, s14
  long_side = MAX(roi->w, roi->h);
3401cc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  sy = (roi->w * shift_x * sin(roi->rotation) + roi->h * shift_y * cos(roi->rotation));
3401cc48:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
  roi->cx += sx;
3401cc4c:	edc4 7a00 	vstr	s15, [r4]
  roi->cy += sy;
3401cc50:	edd4 7a01 	vldr	s15, [r4, #4]
  long_side = MAX(roi->w, roi->h);
3401cc54:	fe3d 9a89 	vselgt.f32	s18, s27, s18
  roi->w *= scale_x;
3401cc58:	ee69 9a29 	vmul.f32	s19, s18, s19
  roi->cy += sy;
3401cc5c:	ee77 7a88 	vadd.f32	s15, s15, s16
  roi->h *= scale_y;
3401cc60:	ee29 9a0d 	vmul.f32	s18, s18, s26
  roi->w *= scale_x;
3401cc64:	edc4 9a02 	vstr	s19, [r4, #8]
  roi->h *= scale_y;
3401cc68:	ed84 9a03 	vstr	s18, [r4, #12]
}
3401cc6c:	ecbd 8b0c 	vpop	{d8-d13}
  roi->cy += sy;
3401cc70:	edc4 7a01 	vstr	s15, [r4, #4]
}
3401cc74:	bd10      	pop	{r4, pc}
3401cc76:	bf00      	nop
	...

3401cc80 <nn_thread_fct>:
{
3401cc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401cc84:	ed2d 8b10 	vpush	{d8-d15}
3401cc88:	f5ad 7d1f 	sub.w	sp, sp, #636	@ 0x27c
  const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_palm_detector();
3401cc8c:	f7f0 fa4a 	bl	3400d124 <LL_ATON_Output_Buffers_Info_palm_detector>
3401cc90:	4604      	mov	r4, r0
  const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_palm_detector();
3401cc92:	f7f0 fa43 	bl	3400d11c <LL_ATON_Input_Buffers_Info_palm_detector>
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
    return buf->offset_end - buf->offset_start;
3401cc96:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
  info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[0]);
3401cc9a:	4620      	mov	r0, r4
3401cc9c:	1a9b      	subs	r3, r3, r2
  info->nn_in_len = LL_Buffer_len(&nn_in_info[0]);
3401cc9e:	9362      	str	r3, [sp, #392]	@ 0x188
  info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[0]);
3401cca0:	f7ff fd9d 	bl	3401c7de <LL_Buffer_addr_start>
3401cca4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
3401cca8:	1a9b      	subs	r3, r3, r2
  assert(info->prob_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float));
3401ccaa:	f5b3 5ffc 	cmp.w	r3, #8064	@ 0x1f80
  info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[0]);
3401ccae:	9063      	str	r0, [sp, #396]	@ 0x18c
  info->prob_out_len = LL_Buffer_len(&nn_out_info[0]);
3401ccb0:	9364      	str	r3, [sp, #400]	@ 0x190
  assert(info->prob_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float));
3401ccb2:	d006      	beq.n	3401ccc2 <nn_thread_fct+0x42>
3401ccb4:	f240 41e9 	movw	r1, #1257	@ 0x4e9
3401ccb8:	4b9d      	ldr	r3, [pc, #628]	@ (3401cf30 <nn_thread_fct+0x2b0>)
3401ccba:	4a9e      	ldr	r2, [pc, #632]	@ (3401cf34 <nn_thread_fct+0x2b4>)
  assert(info->boxes_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float) * 18);
3401ccbc:	489e      	ldr	r0, [pc, #632]	@ (3401cf38 <nn_thread_fct+0x2b8>)
3401ccbe:	f002 fea3 	bl	3401fa08 <__assert_func>
  info->boxes_out = (float *) LL_Buffer_addr_start(&nn_out_info[1]);
3401ccc2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
3401ccc6:	f7ff fd8a 	bl	3401c7de <LL_Buffer_addr_start>
3401ccca:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
3401ccce:	1a9b      	subs	r3, r3, r2
  assert(info->boxes_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float) * 18);
3401ccd0:	4a9a      	ldr	r2, [pc, #616]	@ (3401cf3c <nn_thread_fct+0x2bc>)
  info->boxes_out = (float *) LL_Buffer_addr_start(&nn_out_info[1]);
3401ccd2:	9065      	str	r0, [sp, #404]	@ 0x194
  assert(info->boxes_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float) * 18);
3401ccd4:	4293      	cmp	r3, r2
  info->boxes_out_len = LL_Buffer_len(&nn_out_info[1]);
3401ccd6:	9366      	str	r3, [sp, #408]	@ 0x198
  assert(info->boxes_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float) * 18);
3401ccd8:	d004      	beq.n	3401cce4 <nn_thread_fct+0x64>
3401ccda:	f240 41ec 	movw	r1, #1260	@ 0x4ec
3401ccde:	4b98      	ldr	r3, [pc, #608]	@ (3401cf40 <nn_thread_fct+0x2c0>)
3401cce0:	4a94      	ldr	r2, [pc, #592]	@ (3401cf34 <nn_thread_fct+0x2b4>)
3401cce2:	e7eb      	b.n	3401ccbc <nn_thread_fct+0x3c>
  ret = app_postprocess_init(&info->static_param, &NN_Instance_palm_detector);
3401cce4:	4997      	ldr	r1, [pc, #604]	@ (3401cf44 <nn_thread_fct+0x2c4>)
3401cce6:	a867      	add	r0, sp, #412	@ 0x19c
3401cce8:	f7ef f894 	bl	3400be14 <app_postprocess_init>
  assert(ret == AI_PD_POSTPROCESS_ERROR_NO);
3401ccec:	4605      	mov	r5, r0
3401ccee:	b120      	cbz	r0, 3401ccfa <nn_thread_fct+0x7a>
3401ccf0:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
3401ccf4:	4b94      	ldr	r3, [pc, #592]	@ (3401cf48 <nn_thread_fct+0x2c8>)
3401ccf6:	4a8f      	ldr	r2, [pc, #572]	@ (3401cf34 <nn_thread_fct+0x2b4>)
3401ccf8:	e7e0      	b.n	3401ccbc <nn_thread_fct+0x3c>
  box_next.pKps = box_next_keypoints;
3401ccfa:	ab54      	add	r3, sp, #336	@ 0x150
3401ccfc:	9332      	str	r3, [sp, #200]	@ 0xc8
  const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_hand_landmark();
3401ccfe:	f7ef febf 	bl	3400ca80 <LL_ATON_Output_Buffers_Info_hand_landmark>
3401cd02:	4604      	mov	r4, r0
  const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_hand_landmark();
3401cd04:	f7ef feb8 	bl	3400ca78 <LL_ATON_Input_Buffers_Info_hand_landmark>
3401cd08:	4601      	mov	r1, r0
  info->nn_in = LL_Buffer_addr_start(&nn_in_info[0]);
3401cd0a:	f7ff fd68 	bl	3401c7de <LL_Buffer_addr_start>
3401cd0e:	e9d1 7802 	ldrd	r7, r8, [r1, #8]
3401cd12:	4606      	mov	r6, r0
  info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[2]);
3401cd14:	f104 0070 	add.w	r0, r4, #112	@ 0x70
3401cd18:	f7ff fd61 	bl	3401c7de <LL_Buffer_addr_start>
3401cd1c:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	@ 0x78
3401cd20:	1a9b      	subs	r3, r3, r2
  assert(info->prob_out_len == sizeof(float));
3401cd22:	2b04      	cmp	r3, #4
  info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[2]);
3401cd24:	9004      	str	r0, [sp, #16]
  assert(info->prob_out_len == sizeof(float));
3401cd26:	d004      	beq.n	3401cd32 <nn_thread_fct+0xb2>
3401cd28:	f240 511c 	movw	r1, #1308	@ 0x51c
3401cd2c:	4b87      	ldr	r3, [pc, #540]	@ (3401cf4c <nn_thread_fct+0x2cc>)
3401cd2e:	4a88      	ldr	r2, [pc, #544]	@ (3401cf50 <nn_thread_fct+0x2d0>)
3401cd30:	e7c4      	b.n	3401ccbc <nn_thread_fct+0x3c>
  info->landmarks_out = (float *) LL_Buffer_addr_start(&nn_out_info[3]);
3401cd32:	f104 00a8 	add.w	r0, r4, #168	@ 0xa8
3401cd36:	f7ff fd52 	bl	3401c7de <LL_Buffer_addr_start>
3401cd3a:	e9d4 232c 	ldrd	r2, r3, [r4, #176]	@ 0xb0
3401cd3e:	1a9b      	subs	r3, r3, r2
  assert(info->landmarks_out_len == sizeof(float) * 63);
3401cd40:	2bfc      	cmp	r3, #252	@ 0xfc
  info->landmarks_out = (float *) LL_Buffer_addr_start(&nn_out_info[3]);
3401cd42:	9005      	str	r0, [sp, #20]
  assert(info->landmarks_out_len == sizeof(float) * 63);
3401cd44:	d004      	beq.n	3401cd50 <nn_thread_fct+0xd0>
3401cd46:	f240 511f 	movw	r1, #1311	@ 0x51f
3401cd4a:	4b82      	ldr	r3, [pc, #520]	@ (3401cf54 <nn_thread_fct+0x2d4>)
3401cd4c:	4a80      	ldr	r2, [pc, #512]	@ (3401cf50 <nn_thread_fct+0x2d0>)
3401cd4e:	e7b5      	b.n	3401ccbc <nn_thread_fct+0x3c>
  GFXMMU_PackingTypeDef packing = { 0 };
3401cd50:	4629      	mov	r1, r5
3401cd52:	2224      	movs	r2, #36	@ 0x24
3401cd54:	a874      	add	r0, sp, #464	@ 0x1d0
3401cd56:	f004 fcdd 	bl	34021714 <memset>
  printf("init nema\n");
3401cd5a:	487f      	ldr	r0, [pc, #508]	@ (3401cf58 <nn_thread_fct+0x2d8>)
3401cd5c:	f004 fb6e 	bl	3402143c <puts>
  nema_init();
3401cd60:	f00c fd2a 	bl	340297b8 <nema_init>
  assert(!nema_get_error());
3401cd64:	f00c fd64 	bl	34029830 <nema_get_error>
3401cd68:	4605      	mov	r5, r0
3401cd6a:	b120      	cbz	r0, 3401cd76 <nn_thread_fct+0xf6>
3401cd6c:	f240 51c2 	movw	r1, #1474	@ 0x5c2
3401cd70:	4b7a      	ldr	r3, [pc, #488]	@ (3401cf5c <nn_thread_fct+0x2dc>)
3401cd72:	4a7b      	ldr	r2, [pc, #492]	@ (3401cf60 <nn_thread_fct+0x2e0>)
3401cd74:	e7a2      	b.n	3401ccbc <nn_thread_fct+0x3c>
  nema_ext_hold_enable(2);
3401cd76:	2002      	movs	r0, #2
3401cd78:	f00d fcba 	bl	3402a6f0 <nema_ext_hold_enable>
  nema_ext_hold_irq_enable(2);
3401cd7c:	2002      	movs	r0, #2
3401cd7e:	f00d fca5 	bl	3402a6cc <nema_ext_hold_irq_enable>
  nema_ext_hold_enable(3);
3401cd82:	2003      	movs	r0, #3
3401cd84:	f00d fcb4 	bl	3402a6f0 <nema_ext_hold_enable>
  nema_ext_hold_irq_enable(3);
3401cd88:	2003      	movs	r0, #3
3401cd8a:	f00d fc9f 	bl	3402a6cc <nema_ext_hold_irq_enable>
  printf("init nema DONE %s\n", nema_get_sw_device_name());
3401cd8e:	f00c ffc1 	bl	34029d14 <nema_get_sw_device_name>
3401cd92:	4601      	mov	r1, r0
3401cd94:	4873      	ldr	r0, [pc, #460]	@ (3401cf64 <nn_thread_fct+0x2e4>)
3401cd96:	f004 fae9 	bl	3402136c <iprintf>
  hgfxmmu.Init.BlockSize = GFXMMU_12BYTE_BLOCKS;
3401cd9a:	2340      	movs	r3, #64	@ 0x40
  hgfxmmu.Instance = GFXMMU;
3401cd9c:	4c72      	ldr	r4, [pc, #456]	@ (3401cf68 <nn_thread_fct+0x2e8>)
  hgfxmmu.Init.BlockSize = GFXMMU_12BYTE_BLOCKS;
3401cd9e:	4a73      	ldr	r2, [pc, #460]	@ (3401cf6c <nn_thread_fct+0x2ec>)
  ret = HAL_GFXMMU_Init(&hgfxmmu);
3401cda0:	4620      	mov	r0, r4
  hgfxmmu.Init.BlockSize = GFXMMU_12BYTE_BLOCKS;
3401cda2:	e9c4 2300 	strd	r2, r3, [r4]
  hgfxmmu.Init.AddressTranslation = DISABLE;
3401cda6:	7325      	strb	r5, [r4, #12]
  ret = HAL_GFXMMU_Init(&hgfxmmu);
3401cda8:	f7f5 fb22 	bl	340123f0 <HAL_GFXMMU_Init>
  assert(ret == HAL_OK);
3401cdac:	b120      	cbz	r0, 3401cdb8 <nn_thread_fct+0x138>
3401cdae:	f240 51cd 	movw	r1, #1485	@ 0x5cd
3401cdb2:	4b6f      	ldr	r3, [pc, #444]	@ (3401cf70 <nn_thread_fct+0x2f0>)
3401cdb4:	4a6a      	ldr	r2, [pc, #424]	@ (3401cf60 <nn_thread_fct+0x2e0>)
3401cdb6:	e781      	b.n	3401ccbc <nn_thread_fct+0x3c>
  packing.Buffer0Activation = ENABLE;
3401cdb8:	2301      	movs	r3, #1
3401cdba:	f88d 31d0 	strb.w	r3, [sp, #464]	@ 0x1d0
  packing.DefaultAlpha      = 0xff;
3401cdbe:	23ff      	movs	r3, #255	@ 0xff
  packing.Buffer0Mode       = GFXMMU_PACKING_MSB_REMOVE;
3401cdc0:	9075      	str	r0, [sp, #468]	@ 0x1d4
  ret = HAL_GFXMMU_ConfigPacking(&hgfxmmu, &packing);
3401cdc2:	a974      	add	r1, sp, #464	@ 0x1d0
3401cdc4:	4620      	mov	r0, r4
  packing.DefaultAlpha      = 0xff;
3401cdc6:	937c      	str	r3, [sp, #496]	@ 0x1f0
  ret = HAL_GFXMMU_ConfigPacking(&hgfxmmu, &packing);
3401cdc8:	f7f5 fbd4 	bl	34012574 <HAL_GFXMMU_ConfigPacking>
  assert(ret == HAL_OK);
3401cdcc:	4605      	mov	r5, r0
3401cdce:	b120      	cbz	r0, 3401cdda <nn_thread_fct+0x15a>
3401cdd0:	f240 51d3 	movw	r1, #1491	@ 0x5d3
3401cdd4:	4b66      	ldr	r3, [pc, #408]	@ (3401cf70 <nn_thread_fct+0x2f0>)
3401cdd6:	4a62      	ldr	r2, [pc, #392]	@ (3401cf60 <nn_thread_fct+0x2e0>)
3401cdd8:	e770      	b.n	3401ccbc <nn_thread_fct+0x3c>
  cl = nema_cl_create_sized(8192);
3401cdda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3401cdde:	a80c      	add	r0, sp, #48	@ 0x30
3401cde0:	f00b fb96 	bl	34028510 <nema_cl_create_sized>
3401cde4:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 3401cfa0 <nn_thread_fct+0x320>
3401cde8:	ac0c      	add	r4, sp, #48	@ 0x30
3401cdea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3401cdec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401cdf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3401cdf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401cdf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3401cdf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401cdfc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
3401ce00:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  nema_cl_bind_circular(&cl);
3401ce04:	f1ac 0030 	sub.w	r0, ip, #48	@ 0x30
3401ce08:	f00b fcd6 	bl	340287b8 <nema_cl_bind_circular>
  nn_period[1] = HAL_GetTick();
3401ce0c:	f002 f866 	bl	3401eedc <HAL_GetTick>
  ret = xSemaphoreTake(bq->free, is_blocking ? portMAX_DELAY : 0);
3401ce10:	f8df 916c 	ldr.w	r9, [pc, #364]	@ 3401cf80 <nn_thread_fct+0x300>
  nn_period[1] = HAL_GetTick();
3401ce14:	4604      	mov	r4, r0
  ret = xSemaphoreTake(bq->free, is_blocking ? portMAX_DELAY : 0);
3401ce16:	4629      	mov	r1, r5
3401ce18:	f8d9 0000 	ldr.w	r0, [r9]
3401ce1c:	f7ed fcb0 	bl	3400a780 <xQueueSemaphoreTake>
  if (ret == pdFALSE)
3401ce20:	b920      	cbnz	r0, 3401ce2c <nn_thread_fct+0x1ac>
  assert(nn_pipe_dst);
3401ce22:	f44f 61c9 	mov.w	r1, #1608	@ 0x648
3401ce26:	4b53      	ldr	r3, [pc, #332]	@ (3401cf74 <nn_thread_fct+0x2f4>)
3401ce28:	4a53      	ldr	r2, [pc, #332]	@ (3401cf78 <nn_thread_fct+0x2f8>)
3401ce2a:	e747      	b.n	3401ccbc <nn_thread_fct+0x3c>
  res = bq->buffers[bq->free_idx];
3401ce2c:	f8d9 30b4 	ldr.w	r3, [r9, #180]	@ 0xb4
3401ce30:	eb09 0283 	add.w	r2, r9, r3, lsl #2
3401ce34:	f8d2 00ac 	ldr.w	r0, [r2, #172]	@ 0xac
  bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
3401ce38:	f8d9 20a8 	ldr.w	r2, [r9, #168]	@ 0xa8
3401ce3c:	3301      	adds	r3, #1
3401ce3e:	fb93 f1f2 	sdiv	r1, r3, r2
3401ce42:	fb02 3311 	mls	r3, r2, r1, r3
3401ce46:	f8c9 30b4 	str.w	r3, [r9, #180]	@ 0xb4
  assert(nn_pipe_dst);
3401ce4a:	2800      	cmp	r0, #0
3401ce4c:	d0e9      	beq.n	3401ce22 <nn_thread_fct+0x1a2>
  float ld_filtered_ms = 0;
3401ce4e:	ed9f aa4b 	vldr	s20, [pc, #300]	@ 3401cf7c <nn_thread_fct+0x2fc>
3401ce52:	eba8 0307 	sub.w	r3, r8, r7
  CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS);
3401ce56:	2100      	movs	r1, #0
3401ce58:	9307      	str	r3, [sp, #28]
  int is_tracking = 0;
3401ce5a:	2500      	movs	r5, #0
  CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS);
3401ce5c:	f001 ffea 	bl	3401ee34 <CAM_NNPipe_Start>
  float pd_filtered_ms = 0;
3401ce60:	eef0 aa4a 	vmov.f32	s21, s20
  float nn_period_filtered_ms = 0;
3401ce64:	eef0 8a4a 	vmov.f32	s17, s20
  rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
3401ce68:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 3401cf28 <nn_thread_fct+0x2a8>
  ret = xSemaphoreTake(bq->ready, portMAX_DELAY);
3401ce6c:	4f44      	ldr	r7, [pc, #272]	@ (3401cf80 <nn_thread_fct+0x300>)
    nn_period[1] = HAL_GetTick();
3401ce6e:	f002 f835 	bl	3401eedc <HAL_GetTick>
    nn_period_ms = nn_period[1] - nn_period[0];
3401ce72:	1b03      	subs	r3, r0, r4
3401ce74:	ee07 3a90 	vmov	s15, r3
    nn_period_filtered_ms = USE_FILTERED_TS ? (15 * nn_period_filtered_ms + nn_period_ms) / 16 : nn_period_ms;
3401ce78:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
3401ce7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
3401ce80:	eee8 7a87 	vfma.f32	s15, s17, s14
3401ce84:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 3401cf84 <nn_thread_fct+0x304>
    nn_period[1] = HAL_GetTick();
3401ce88:	9006      	str	r0, [sp, #24]
  ret = xSemaphoreTake(bq->ready, portMAX_DELAY);
3401ce8a:	f04f 31ff 	mov.w	r1, #4294967295
3401ce8e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
    nn_period_filtered_ms = USE_FILTERED_TS ? (15 * nn_period_filtered_ms + nn_period_ms) / 16 : nn_period_ms;
3401ce90:	ee67 8aa8 	vmul.f32	s17, s15, s17
  ret = xSemaphoreTake(bq->ready, portMAX_DELAY);
3401ce94:	f7ed fc74 	bl	3400a780 <xQueueSemaphoreTake>
  assert(ret == pdTRUE);
3401ce98:	2801      	cmp	r0, #1
3401ce9a:	d004      	beq.n	3401cea6 <nn_thread_fct+0x226>
3401ce9c:	f240 3195 	movw	r1, #917	@ 0x395
3401cea0:	4b39      	ldr	r3, [pc, #228]	@ (3401cf88 <nn_thread_fct+0x308>)
3401cea2:	4a3a      	ldr	r2, [pc, #232]	@ (3401cf8c <nn_thread_fct+0x30c>)
3401cea4:	e70a      	b.n	3401ccbc <nn_thread_fct+0x3c>
  res = bq->buffers[bq->ready_idx];
3401cea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
3401ceaa:	eb07 0283 	add.w	r2, r7, r3, lsl #2
3401ceae:	f8d2 90ac 	ldr.w	r9, [r2, #172]	@ 0xac
  bq->ready_idx = (bq->ready_idx + 1) % bq->buffer_nb;
3401ceb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
3401ceb6:	3301      	adds	r3, #1
3401ceb8:	fb93 f1f2 	sdiv	r1, r3, r2
3401cebc:	fb02 3311 	mls	r3, r2, r1, r3
3401cec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    assert(capture_buffer);
3401cec4:	f1b9 0f00 	cmp.w	r9, #0
3401cec8:	d104      	bne.n	3401ced4 <nn_thread_fct+0x254>
3401ceca:	f240 6155 	movw	r1, #1621	@ 0x655
3401cece:	4b30      	ldr	r3, [pc, #192]	@ (3401cf90 <nn_thread_fct+0x310>)
3401ced0:	4a29      	ldr	r2, [pc, #164]	@ (3401cf78 <nn_thread_fct+0x2f8>)
3401ced2:	e6f3      	b.n	3401ccbc <nn_thread_fct+0x3c>
    idx_for_resize = frame_event_nb_for_resize % DISPLAY_BUFFER_NB;
3401ced4:	4b2f      	ldr	r3, [pc, #188]	@ (3401cf94 <nn_thread_fct+0x314>)
3401ced6:	681c      	ldr	r4, [r3, #0]
    if (!is_tracking) {
3401ced8:	2d00      	cmp	r5, #0
3401ceda:	f040 8149 	bne.w	3401d170 <nn_thread_fct+0x4f0>
  start_ts = HAL_GetTick();
3401cede:	f001 fffd 	bl	3401eedc <HAL_GetTick>
  ret = LL_ATON_Set_User_Input_Buffer_palm_detector(0, buffer, info->nn_in_len);
3401cee2:	4649      	mov	r1, r9
  start_ts = HAL_GetTick();
3401cee4:	4680      	mov	r8, r0
  ret = LL_ATON_Set_User_Input_Buffer_palm_detector(0, buffer, info->nn_in_len);
3401cee6:	9a62      	ldr	r2, [sp, #392]	@ 0x188
3401cee8:	4628      	mov	r0, r5
3401ceea:	f7f0 f8a9 	bl	3400d040 <LL_ATON_Set_User_Input_Buffer_palm_detector>
  assert(ret == LL_ATON_User_IO_NOERROR);
3401ceee:	b120      	cbz	r0, 3401cefa <nn_thread_fct+0x27a>
3401cef0:	f240 41fd 	movw	r1, #1277	@ 0x4fd
3401cef4:	4b28      	ldr	r3, [pc, #160]	@ (3401cf98 <nn_thread_fct+0x318>)
3401cef6:	4a29      	ldr	r2, [pc, #164]	@ (3401cf9c <nn_thread_fct+0x31c>)
3401cef8:	e6e0      	b.n	3401ccbc <nn_thread_fct+0x3c>
  LL_ATON_RT_Main(&NN_Instance_palm_detector);
3401cefa:	4812      	ldr	r0, [pc, #72]	@ (3401cf44 <nn_thread_fct+0x2c4>)
3401cefc:	f7e7 f96c 	bl	340041d8 <LL_ATON_RT_Main>
  ret = app_postprocess_run((void * []){info->prob_out, info->boxes_out}, 2, &info->pd_out, &info->static_param);
3401cf00:	9b63      	ldr	r3, [sp, #396]	@ 0x18c
3401cf02:	2102      	movs	r1, #2
3401cf04:	9374      	str	r3, [sp, #464]	@ 0x1d0
3401cf06:	9b65      	ldr	r3, [sp, #404]	@ 0x194
3401cf08:	aa72      	add	r2, sp, #456	@ 0x1c8
3401cf0a:	9375      	str	r3, [sp, #468]	@ 0x1d4
3401cf0c:	a874      	add	r0, sp, #464	@ 0x1d0
3401cf0e:	ab67      	add	r3, sp, #412	@ 0x19c
3401cf10:	f7ee ffa8 	bl	3400be64 <app_postprocess_run>
  assert(ret == AI_PD_POSTPROCESS_ERROR_NO);
3401cf14:	2800      	cmp	r0, #0
3401cf16:	d047      	beq.n	3401cfa8 <nn_thread_fct+0x328>
3401cf18:	f240 5102 	movw	r1, #1282	@ 0x502
3401cf1c:	4b0a      	ldr	r3, [pc, #40]	@ (3401cf48 <nn_thread_fct+0x2c8>)
3401cf1e:	4a1f      	ldr	r2, [pc, #124]	@ (3401cf9c <nn_thread_fct+0x31c>)
3401cf20:	e6cc      	b.n	3401ccbc <nn_thread_fct+0x3c>
3401cf22:	bf00      	nop
3401cf24:	f3af 8000 	nop.w
3401cf28:	54442d18 	.word	0x54442d18
3401cf2c:	3ff921fb 	.word	0x3ff921fb
3401cf30:	3402f9dc 	.word	0x3402f9dc
3401cf34:	340c96d0 	.word	0x340c96d0
3401cf38:	3402f98d 	.word	0x3402f98d
3401cf3c:	00023700 	.word	0x00023700
3401cf40:	3402fa22 	.word	0x3402fa22
3401cf44:	340d06e0 	.word	0x340d06e0
3401cf48:	3402fa6e 	.word	0x3402fa6e
3401cf4c:	3402fa90 	.word	0x3402fa90
3401cf50:	340c96bd 	.word	0x340c96bd
3401cf54:	3402fab4 	.word	0x3402fab4
3401cf58:	3402fae2 	.word	0x3402fae2
3401cf5c:	3402faec 	.word	0x3402faec
3401cf60:	340c96b0 	.word	0x340c96b0
3401cf64:	3402fafe 	.word	0x3402fafe
3401cf68:	340dd09c 	.word	0x340dd09c
3401cf6c:	58030000 	.word	0x58030000
3401cf70:	3402fb11 	.word	0x3402fb11
3401cf74:	3402fb1f 	.word	0x3402fb1f
3401cf78:	340c96e3 	.word	0x340c96e3
3401cf7c:	00000000 	.word	0x00000000
3401cf80:	340e3240 	.word	0x340e3240
3401cf84:	3d800000 	.word	0x3d800000
3401cf88:	3402ae28 	.word	0x3402ae28
3401cf8c:	340c969f 	.word	0x340c969f
3401cf90:	3402fb2b 	.word	0x3402fb2b
3401cf94:	340e32fc 	.word	0x340e32fc
3401cf98:	3402fb3a 	.word	0x3402fb3a
3401cf9c:	340c968d 	.word	0x340c968d
3401cfa0:	340dd060 	.word	0x340dd060
3401cfa4:	44480000 	.word	0x44480000
  hand_nb = MIN(info->pd_out.box_nb, PD_MAX_HAND_NB);
3401cfa8:	9b73      	ldr	r3, [sp, #460]	@ 0x1cc
3401cfaa:	2b00      	cmp	r3, #0
3401cfac:	bf14      	ite	ne
3401cfae:	2501      	movne	r5, #1
3401cfb0:	2500      	moveq	r5, #0
  for (i = 0; i < hand_nb; i++) {
3401cfb2:	d07a      	beq.n	3401d0aa <nn_thread_fct+0x42a>
    cvt_pd_coord_to_screen_coord(&info->pd_out.pOutData[i]);
3401cfb4:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
  box->x_center *= LCD_BG_WIDTH;
3401cfb6:	ed5f 7a05 	vldr	s15, [pc, #-20]	@ 3401cfa4 <nn_thread_fct+0x324>
3401cfba:	edd3 5a01 	vldr	s11, [r3, #4]
  box->y_center *= LCD_BG_WIDTH;
3401cfbe:	ed93 6a02 	vldr	s12, [r3, #8]
  box->width *= LCD_BG_WIDTH;
3401cfc2:	edd3 6a03 	vldr	s13, [r3, #12]
  box->height *= LCD_BG_WIDTH;
3401cfc6:	ed93 7a04 	vldr	s14, [r3, #16]
  box->x_center *= LCD_BG_WIDTH;
3401cfca:	ee65 5aa7 	vmul.f32	s11, s11, s15
  box->y_center *= LCD_BG_WIDTH;
3401cfce:	ee26 6a27 	vmul.f32	s12, s12, s15
  box->width *= LCD_BG_WIDTH;
3401cfd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
  box->height *= LCD_BG_WIDTH;
3401cfd6:	ee27 7a27 	vmul.f32	s14, s14, s15
3401cfda:	f04f 0e07 	mov.w	lr, #7
    box->pKps[i].x *= LCD_BG_WIDTH;
3401cfde:	695a      	ldr	r2, [r3, #20]
  box->x_center *= LCD_BG_WIDTH;
3401cfe0:	edc3 5a01 	vstr	s11, [r3, #4]
  box->y_center *= LCD_BG_WIDTH;
3401cfe4:	ed83 6a02 	vstr	s12, [r3, #8]
  box->width *= LCD_BG_WIDTH;
3401cfe8:	edc3 6a03 	vstr	s13, [r3, #12]
  box->height *= LCD_BG_WIDTH;
3401cfec:	ed83 7a04 	vstr	s14, [r3, #16]
  for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
3401cff0:	f04e e001 	dls	lr, lr
3401cff4:	4613      	mov	r3, r2
    box->pKps[i].x *= LCD_BG_WIDTH;
3401cff6:	ed93 5a00 	vldr	s10, [r3]
3401cffa:	ee25 5a27 	vmul.f32	s10, s10, s15
3401cffe:	ed83 5a00 	vstr	s10, [r3]
    box->pKps[i].y *= LCD_BG_WIDTH;
3401d002:	ed93 5a01 	vldr	s10, [r3, #4]
3401d006:	ee25 5a27 	vmul.f32	s10, s10, s15
  for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
3401d00a:	3308      	adds	r3, #8
    box->pKps[i].y *= LCD_BG_WIDTH;
3401d00c:	ed03 5a01 	vstr	s10, [r3, #-4]
  for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
3401d010:	f00f c80f 	le	lr, 3401cff6 <nn_thread_fct+0x376>
  roi->cx = box->x_center;
3401d014:	f8df 934c 	ldr.w	r9, [pc, #844]	@ 3401d364 <nn_thread_fct+0x6e4>
  rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
3401d018:	ed92 0a05 	vldr	s0, [r2, #20]
  roi->h = box->height;
3401d01c:	ed89 7a03 	vstr	s14, [r9, #12]
  rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
3401d020:	ed92 7a01 	vldr	s14, [r2, #4]
3401d024:	edd2 7a00 	vldr	s15, [r2]
3401d028:	edd2 0a04 	vldr	s1, [r2, #16]
3401d02c:	ee30 0a47 	vsub.f32	s0, s0, s14
3401d030:	ee70 0ae7 	vsub.f32	s1, s1, s15
3401d034:	eeb1 0a40 	vneg.f32	s0, s0
  roi->cx = box->x_center;
3401d038:	edc9 5a00 	vstr	s11, [r9]
  roi->cy = box->y_center;
3401d03c:	ed89 6a01 	vstr	s12, [r9, #4]
  roi->w = box->width;
3401d040:	edc9 6a02 	vstr	s13, [r9, #8]
  rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
3401d044:	f007 fa84 	bl	34024550 <atan2f>
3401d048:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3401d04c:	ee39 0b40 	vsub.f64	d0, d9, d0
3401d050:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
  return angle - 2 * M_PI * floorf((angle - (-M_PI)) / (2 * M_PI));
3401d054:	ed9f 6bb6 	vldr	d6, [pc, #728]	@ 3401d330 <nn_thread_fct+0x6b0>
3401d058:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3401d05c:	ed9f 5bb6 	vldr	d5, [pc, #728]	@ 3401d338 <nn_thread_fct+0x6b8>
3401d060:	ee30 6b06 	vadd.f64	d6, d0, d6
3401d064:	ee86 7b05 	vdiv.f64	d7, d6, d5
3401d068:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
3401d06c:	febb 7a47 	vrintm.f32	s14, s14
3401d070:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401d074:	eea7 0b45 	vfms.f64	d0, d7, d5
3401d078:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
  roi->cos_r = cosf(roi->rotation);
3401d07c:	eeb0 0a48 	vmov.f32	s0, s16
  roi->rotation = pd_compute_rotation(box);
3401d080:	ed89 8a04 	vstr	s16, [r9, #16]
  roi->cos_r = cosf(roi->rotation);
3401d084:	f008 f8cc 	bl	34025220 <cosf>
3401d088:	ed89 0a05 	vstr	s0, [r9, #20]
  roi->sin_r = sinf(roi->rotation);
3401d08c:	eeb0 0a48 	vmov.f32	s0, s16
3401d090:	f008 f802 	bl	34025098 <sinf>
  roi_shift_and_scale(roi, shift_x, shift_y, scale, scale);
3401d094:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 3401d340 <nn_thread_fct+0x6c0>
  roi->sin_r = sinf(roi->rotation);
3401d098:	ed89 0a06 	vstr	s0, [r9, #24]
  roi_shift_and_scale(roi, shift_x, shift_y, scale, scale);
3401d09c:	eef0 0a41 	vmov.f32	s1, s2
3401d0a0:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
3401d0a4:	4648      	mov	r0, r9
3401d0a6:	f7ff fd97 	bl	3401cbd8 <roi_shift_and_scale.constprop.0>
  CACHE_OP(SCB_InvalidateDCache_by_Addr(info->prob_out, info->prob_out_len));
3401d0aa:	9a64      	ldr	r2, [sp, #400]	@ 0x190
    if ( dsize > 0 ) {
3401d0ac:	2a00      	cmp	r2, #0
3401d0ae:	dd1d      	ble.n	3401d0ec <nn_thread_fct+0x46c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401d0b0:	9b63      	ldr	r3, [sp, #396]	@ 0x18c
3401d0b2:	f003 001f 	and.w	r0, r3, #31
3401d0b6:	4410      	add	r0, r2
  __ASM volatile ("dsb 0xF":::"memory");
3401d0b8:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401d0bc:	43da      	mvns	r2, r3
3401d0be:	eb03 0c00 	add.w	ip, r3, r0
3401d0c2:	4462      	add	r2, ip
3401d0c4:	3820      	subs	r0, #32
3401d0c6:	0952      	lsrs	r2, r2, #5
3401d0c8:	3020      	adds	r0, #32
3401d0ca:	f102 0e01 	add.w	lr, r2, #1
3401d0ce:	bfd8      	it	le
3401d0d0:	f04f 0e01 	movle.w	lr, #1
3401d0d4:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401d0d8:	499a      	ldr	r1, [pc, #616]	@ (3401d344 <nn_thread_fct+0x6c4>)
3401d0da:	f8c1 325c 	str.w	r3, [r1, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401d0de:	3320      	adds	r3, #32
      } while ( op_size > 0 );
3401d0e0:	f00f c805 	le	lr, 3401d0da <nn_thread_fct+0x45a>
3401d0e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d0e8:	f3bf 8f6f 	isb	sy
  CACHE_OP(SCB_InvalidateDCache_by_Addr(info->boxes_out, info->boxes_out_len));
3401d0ec:	9a66      	ldr	r2, [sp, #408]	@ 0x198
    if ( dsize > 0 ) {
3401d0ee:	2a00      	cmp	r2, #0
3401d0f0:	dd1d      	ble.n	3401d12e <nn_thread_fct+0x4ae>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401d0f2:	9b65      	ldr	r3, [sp, #404]	@ 0x194
3401d0f4:	f003 001f 	and.w	r0, r3, #31
3401d0f8:	4410      	add	r0, r2
  __ASM volatile ("dsb 0xF":::"memory");
3401d0fa:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401d0fe:	43da      	mvns	r2, r3
3401d100:	eb03 0c00 	add.w	ip, r3, r0
3401d104:	4462      	add	r2, ip
3401d106:	3820      	subs	r0, #32
3401d108:	0952      	lsrs	r2, r2, #5
3401d10a:	3020      	adds	r0, #32
3401d10c:	f102 0e01 	add.w	lr, r2, #1
3401d110:	bfd8      	it	le
3401d112:	f04f 0e01 	movle.w	lr, #1
3401d116:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401d11a:	498a      	ldr	r1, [pc, #552]	@ (3401d344 <nn_thread_fct+0x6c4>)
3401d11c:	f8c1 325c 	str.w	r3, [r1, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401d120:	3320      	adds	r3, #32
      } while ( op_size > 0 );
3401d122:	f00f c805 	le	lr, 3401d11c <nn_thread_fct+0x49c>
3401d126:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d12a:	f3bf 8f6f 	isb	sy
  *pd_exec_time = HAL_GetTick() - start_ts;
3401d12e:	f001 fed5 	bl	3401eedc <HAL_GetTick>
      box_next.prob = pd_info.pd_out.pOutData[0].prob;
3401d132:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
  *pd_exec_time = HAL_GetTick() - start_ts;
3401d134:	eba0 0008 	sub.w	r0, r0, r8
      box_next.prob = pd_info.pd_out.pOutData[0].prob;
3401d138:	681b      	ldr	r3, [r3, #0]
3401d13a:	932d      	str	r3, [sp, #180]	@ 0xb4
    pd_filtered_ms = USE_FILTERED_TS ? (7 * pd_filtered_ms + pd_ms) / 8 : pd_ms;
3401d13c:	ee07 0a90 	vmov	s15, r0
3401d140:	eef1 ba0c 	vmov.f32	s23, #28	@ 0x40e00000  7.0
3401d144:	eef8 7a67 	vcvt.f32.u32	s15, s15
  ret = xSemaphoreGive(bq->free);
3401d148:	2300      	movs	r3, #0
    pd_filtered_ms = USE_FILTERED_TS ? (7 * pd_filtered_ms + pd_ms) / 8 : pd_ms;
3401d14a:	eeea 7aab 	vfma.f32	s15, s21, s23
3401d14e:	eeb4 ba00 	vmov.f32	s22, #64	@ 0x3e000000  0.125
  ret = xSemaphoreGive(bq->free);
3401d152:	461a      	mov	r2, r3
3401d154:	4619      	mov	r1, r3
3401d156:	6838      	ldr	r0, [r7, #0]
    pd_filtered_ms = USE_FILTERED_TS ? (7 * pd_filtered_ms + pd_ms) / 8 : pd_ms;
3401d158:	ee67 aa8b 	vmul.f32	s21, s15, s22
  ret = xSemaphoreGive(bq->free);
3401d15c:	f7ed f96c 	bl	3400a438 <xQueueGenericSend>
  assert(ret == pdTRUE);
3401d160:	2801      	cmp	r0, #1
  ret = xSemaphoreGive(bq->free);
3401d162:	4680      	mov	r8, r0
  assert(ret == pdTRUE);
3401d164:	d016      	beq.n	3401d194 <nn_thread_fct+0x514>
3401d166:	f44f 7163 	mov.w	r1, #908	@ 0x38c
3401d16a:	4b77      	ldr	r3, [pc, #476]	@ (3401d348 <nn_thread_fct+0x6c8>)
3401d16c:	4a77      	ldr	r2, [pc, #476]	@ (3401d34c <nn_thread_fct+0x6cc>)
3401d16e:	e5a5      	b.n	3401ccbc <nn_thread_fct+0x3c>
      rois[0] = roi_next;
3401d170:	f8df c1f0 	ldr.w	ip, [pc, #496]	@ 3401d364 <nn_thread_fct+0x6e4>
3401d174:	f10d 0ecc 	add.w	lr, sp, #204	@ 0xcc
3401d178:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
3401d17c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401d180:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
3401d184:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
      copy_pd_box(&pd_info.pd_out.pOutData[0], &box_next);
3401d188:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
3401d18a:	a92d      	add	r1, sp, #180	@ 0xb4
3401d18c:	f7ff fb57 	bl	3401c83e <copy_pd_box>
      pd_ms = 0;
3401d190:	2000      	movs	r0, #0
3401d192:	e7d3      	b.n	3401d13c <nn_thread_fct+0x4bc>
      hl_ms = 0;
3401d194:	4628      	mov	r0, r5
    if (is_tracking) {
3401d196:	2d00      	cmp	r5, #0
3401d198:	f000 845a 	beq.w	3401da50 <nn_thread_fct+0xdd0>
      hl_ms = HAL_GetTick();
3401d19c:	f001 fe9e 	bl	3401eedc <HAL_GetTick>
      is_tracking = hand_landmark_run(lcd_bg_buffer[idx_for_resize], &hl_info, &rois[0], ld_landmarks[0]);
3401d1a0:	4d6b      	ldr	r5, [pc, #428]	@ (3401d350 <nn_thread_fct+0x6d0>)
3401d1a2:	4b6c      	ldr	r3, [pc, #432]	@ (3401d354 <nn_thread_fct+0x6d4>)
3401d1a4:	f004 0403 	and.w	r4, r4, #3
  app_v3_t vertex[] = {
3401d1a8:	f8df c1d0 	ldr.w	ip, [pc, #464]	@ 3401d37c <nn_thread_fct+0x6fc>
      is_tracking = hand_landmark_run(lcd_bg_buffer[idx_for_resize], &hl_info, &rois[0], ld_landmarks[0]);
3401d1ac:	fb03 5504 	mla	r5, r3, r4, r5
  app_v3_t vertex[] = {
3401d1b0:	ac74      	add	r4, sp, #464	@ 0x1d0
      hl_ms = HAL_GetTick();
3401d1b2:	900b      	str	r0, [sp, #44]	@ 0x2c
  app_v3_t vertex[] = {
3401d1b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
3401d1b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3401d1ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
3401d1be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3401d1c0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
3401d1c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GFXMMU_BuffersTypeDef buffers = { 0 };
3401d1c8:	2300      	movs	r3, #0
  ret = HAL_GFXMMU_ModifyBuffers(&hgfxmmu, &buffers);
3401d1ca:	4863      	ldr	r0, [pc, #396]	@ (3401d358 <nn_thread_fct+0x6d8>)
3401d1cc:	a941      	add	r1, sp, #260	@ 0x104
  GFXMMU_BuffersTypeDef buffers = { 0 };
3401d1ce:	e9cd 3342 	strd	r3, r3, [sp, #264]	@ 0x108
3401d1d2:	9344      	str	r3, [sp, #272]	@ 0x110
  buffers.Buf0Address = (uint32_t) info->nn_in;
3401d1d4:	9641      	str	r6, [sp, #260]	@ 0x104
  ret = HAL_GFXMMU_ModifyBuffers(&hgfxmmu, &buffers);
3401d1d6:	f7f5 f987 	bl	340124e8 <HAL_GFXMMU_ModifyBuffers>
  assert(ret == HAL_OK);
3401d1da:	4604      	mov	r4, r0
3401d1dc:	b120      	cbz	r0, 3401d1e8 <nn_thread_fct+0x568>
3401d1de:	f240 5184 	movw	r1, #1412	@ 0x584
3401d1e2:	4b5e      	ldr	r3, [pc, #376]	@ (3401d35c <nn_thread_fct+0x6dc>)
3401d1e4:	4a5e      	ldr	r2, [pc, #376]	@ (3401d360 <nn_thread_fct+0x6e0>)
3401d1e6:	e569      	b.n	3401ccbc <nn_thread_fct+0x3c>
  nema_bind_dst_tex(GFXMMU_VIRTUAL_BUFFER0_BASE, LD_WIDTH, LD_HEIGHT, NEMA_RGBA8888, -1);
3401d1e8:	f04f 3aff 	mov.w	sl, #4294967295
3401d1ec:	22e0      	movs	r2, #224	@ 0xe0
3401d1ee:	4643      	mov	r3, r8
3401d1f0:	4611      	mov	r1, r2
3401d1f2:	f04f 5054 	mov.w	r0, #889192448	@ 0x35000000
3401d1f6:	f8cd a000 	str.w	sl, [sp]
3401d1fa:	f00c fbf7 	bl	340299ec <nema_bind_dst_tex>
  nema_set_clip(0, 0, LD_WIDTH, LD_HEIGHT);
3401d1fe:	23e0      	movs	r3, #224	@ 0xe0
3401d200:	4621      	mov	r1, r4
3401d202:	461a      	mov	r2, r3
3401d204:	4620      	mov	r0, r4
3401d206:	f00c fb1b 	bl	34029840 <nema_set_clip>
  nema_clear(0);
3401d20a:	4620      	mov	r0, r4
3401d20c:	f00c fd08 	bl	34029c20 <nema_clear>
  nema_bind_src_tex((uintptr_t) buffer, LCD_BG_WIDTH, LCD_BG_HEIGHT, NEMA_RGBA8888, -1, NEMA_FILTER_BL);
3401d210:	4643      	mov	r3, r8
3401d212:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
3401d216:	f44f 7148 	mov.w	r1, #800	@ 0x320
3401d21a:	4628      	mov	r0, r5
3401d21c:	e9cd a800 	strd	sl, r8, [sp]
3401d220:	f00c fb44 	bl	340298ac <nema_bind_src_tex>
  nema_enable_tiling(1);
3401d224:	4640      	mov	r0, r8
3401d226:	f00d f8bd 	bl	3402a3a4 <nema_enable_tiling>
  nema_bind_src_tex((uintptr_t) buffer, LCD_BG_WIDTH, LCD_BG_HEIGHT, NEMA_RGBA8888, -1, NEMA_FILTER_BL);
3401d22a:	46a9      	mov	r9, r5
 *
 * \param blending_mode Blending mode to be set
 *
 */
static inline void nema_set_blend_blit(uint32_t blending_mode) {
    nema_set_blend(blending_mode, NEMA_TEX0, NEMA_TEX1, NEMA_NOTEX);
3401d22c:	4653      	mov	r3, sl
3401d22e:	4642      	mov	r2, r8
3401d230:	4621      	mov	r1, r4
  nema_mat3x3_translate(t, -roi->cx, -roi->cy);
3401d232:	4d4c      	ldr	r5, [pc, #304]	@ (3401d364 <nn_thread_fct+0x6e4>)
3401d234:	4640      	mov	r0, r8
3401d236:	f00b ff29 	bl	3402908c <nema_set_blend>
  nema_mat3x3_load_identity(t);
3401d23a:	a848      	add	r0, sp, #288	@ 0x120
3401d23c:	f00c fe7a 	bl	34029f34 <nema_mat3x3_load_identity>
  nema_mat3x3_translate(t, -roi->cx, -roi->cy);
3401d240:	edd5 0a01 	vldr	s1, [r5, #4]
3401d244:	ed95 0a00 	vldr	s0, [r5]
3401d248:	eef1 0a60 	vneg.f32	s1, s1
3401d24c:	eeb1 0a40 	vneg.f32	s0, s0
3401d250:	a848      	add	r0, sp, #288	@ 0x120
3401d252:	f00c fe7d 	bl	34029f50 <nema_mat3x3_translate>
  nema_mat3x3_rotate(t, nema_rad_to_deg(-roi->rotation));
3401d256:	eddf 7a44 	vldr	s15, [pc, #272]	@ 3401d368 <nn_thread_fct+0x6e8>
3401d25a:	ed95 0a04 	vldr	s0, [r5, #16]
3401d25e:	a848      	add	r0, sp, #288	@ 0x120
3401d260:	ee20 0a67 	vnmul.f32	s0, s0, s15
3401d264:	f00c fed2 	bl	3402a00c <nema_mat3x3_rotate>
  nema_mat3x3_scale(t, LD_WIDTH / roi->w, LD_HEIGHT / roi->h);
3401d268:	eddf 7a40 	vldr	s15, [pc, #256]	@ 3401d36c <nn_thread_fct+0x6ec>
3401d26c:	edd5 0a03 	vldr	s1, [r5, #12]
3401d270:	ed95 0a02 	vldr	s0, [r5, #8]
3401d274:	eec7 0aa0 	vdiv.f32	s1, s15, s1
3401d278:	ee87 0a80 	vdiv.f32	s0, s15, s0
3401d27c:	a848      	add	r0, sp, #288	@ 0x120
3401d27e:	f00c fe9f 	bl	34029fc0 <nema_mat3x3_scale>
  nema_mat3x3_translate(t, LD_WIDTH / 2, LD_HEIGHT / 2);
3401d282:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 3401d370 <nn_thread_fct+0x6f0>
3401d286:	a848      	add	r0, sp, #288	@ 0x120
3401d288:	eeb0 0a60 	vmov.f32	s0, s1
3401d28c:	f00c fe60 	bl	34029f50 <nema_mat3x3_translate>
  for (i = 0 ; i < 4; i++)
3401d290:	ab74      	add	r3, sp, #464	@ 0x1d0
  for (i = 0; i < 3; i++)
3401d292:	ad3a      	add	r5, sp, #232	@ 0xe8
    r[i] = t[i][0] * v[0] + t[i][1] * v[1] + t[i][2] * v[2];
3401d294:	ed93 6a00 	vldr	s12, [r3]
3401d298:	edd3 5a01 	vldr	s11, [r3, #4]
3401d29c:	ed93 7a02 	vldr	s14, [r3, #8]
  for (i = 0; i < 3; i++)
3401d2a0:	2000      	movs	r0, #0
3401d2a2:	4629      	mov	r1, r5
3401d2a4:	aa48      	add	r2, sp, #288	@ 0x120
    r[i] = t[i][0] * v[0] + t[i][1] * v[1] + t[i][2] * v[2];
3401d2a6:	edd2 7a01 	vldr	s15, [r2, #4]
3401d2aa:	edd2 6a00 	vldr	s13, [r2]
3401d2ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
3401d2b2:	eee6 7a86 	vfma.f32	s15, s13, s12
3401d2b6:	edd2 6a02 	vldr	s13, [r2, #8]
3401d2ba:	eee6 7a87 	vfma.f32	s15, s13, s14
  for (i = 0; i < 3; i++)
3401d2be:	3001      	adds	r0, #1
3401d2c0:	2803      	cmp	r0, #3
    r[i] = t[i][0] * v[0] + t[i][1] * v[1] + t[i][2] * v[2];
3401d2c2:	ece5 7a01 	vstmia	r5!, {s15}
  for (i = 0; i < 3; i++)
3401d2c6:	f102 020c 	add.w	r2, r2, #12
3401d2ca:	d1ec      	bne.n	3401d2a6 <nn_thread_fct+0x626>
    v[i] = r[i];
3401d2cc:	680a      	ldr	r2, [r1, #0]
  for (i = 0 ; i < 4; i++)
3401d2ce:	3401      	adds	r4, #1
    v[i] = r[i];
3401d2d0:	601a      	str	r2, [r3, #0]
3401d2d2:	684a      	ldr	r2, [r1, #4]
  for (i = 0 ; i < 4; i++)
3401d2d4:	2c04      	cmp	r4, #4
    v[i] = r[i];
3401d2d6:	605a      	str	r2, [r3, #4]
3401d2d8:	688a      	ldr	r2, [r1, #8]
  for (i = 0 ; i < 4; i++)
3401d2da:	f103 030c 	add.w	r3, r3, #12
    v[i] = r[i];
3401d2de:	f843 2c04 	str.w	r2, [r3, #-4]
  for (i = 0 ; i < 4; i++)
3401d2e2:	d1d6      	bne.n	3401d292 <nn_thread_fct+0x612>
  nema_blit_quad_fit(vertex[0][0], vertex[0][1], vertex[1][0], vertex[1][1],
3401d2e4:	eddd 3a7e 	vldr	s7, [sp, #504]	@ 0x1f8
3401d2e8:	ed9d 3a7d 	vldr	s6, [sp, #500]	@ 0x1f4
3401d2ec:	eddd 2a7b 	vldr	s5, [sp, #492]	@ 0x1ec
3401d2f0:	ed9d 2a7a 	vldr	s4, [sp, #488]	@ 0x1e8
3401d2f4:	eddd 1a78 	vldr	s3, [sp, #480]	@ 0x1e0
3401d2f8:	ed9d 1a77 	vldr	s2, [sp, #476]	@ 0x1dc
3401d2fc:	eddd 0a75 	vldr	s1, [sp, #468]	@ 0x1d4
3401d300:	ed9d 0a74 	vldr	s0, [sp, #464]	@ 0x1d0
3401d304:	f00c fca6 	bl	34029c54 <nema_blit_quad_fit>
  nema_cl_submit(&cl);
3401d308:	481a      	ldr	r0, [pc, #104]	@ (3401d374 <nn_thread_fct+0x6f4>)
3401d30a:	f00b fb7b 	bl	34028a04 <nema_cl_submit>
  nema_cl_wait(&cl);
3401d30e:	4819      	ldr	r0, [pc, #100]	@ (3401d374 <nn_thread_fct+0x6f4>)
3401d310:	f00b fc5a 	bl	34028bc8 <nema_cl_wait>
  HAL_ICACHE_Invalidate();
3401d314:	f7f6 fb44 	bl	340139a0 <HAL_ICACHE_Invalidate>
  assert(!nema_get_error());
3401d318:	f00c fa8a 	bl	34029830 <nema_get_error>
3401d31c:	4604      	mov	r4, r0
3401d31e:	b378      	cbz	r0, 3401d380 <nn_thread_fct+0x700>
3401d320:	f240 519e 	movw	r1, #1438	@ 0x59e
3401d324:	4b14      	ldr	r3, [pc, #80]	@ (3401d378 <nn_thread_fct+0x6f8>)
3401d326:	4a0e      	ldr	r2, [pc, #56]	@ (3401d360 <nn_thread_fct+0x6e0>)
3401d328:	e4c8      	b.n	3401ccbc <nn_thread_fct+0x3c>
3401d32a:	bf00      	nop
3401d32c:	f3af 8000 	nop.w
3401d330:	54442d18 	.word	0x54442d18
3401d334:	400921fb 	.word	0x400921fb
3401d338:	54442d18 	.word	0x54442d18
3401d33c:	401921fb 	.word	0x401921fb
3401d340:	40266666 	.word	0x40266666
3401d344:	e000ed00 	.word	0xe000ed00
3401d348:	3402ae28 	.word	0x3402ae28
3401d34c:	340c967d 	.word	0x340c967d
3401d350:	91268800 	.word	0x91268800
3401d354:	00177000 	.word	0x00177000
3401d358:	340dd09c 	.word	0x340dd09c
3401d35c:	3402fb11 	.word	0x3402fb11
3401d360:	340c9661 	.word	0x340c9661
3401d364:	340e33ac 	.word	0x340e33ac
3401d368:	42652ee1 	.word	0x42652ee1
3401d36c:	43600000 	.word	0x43600000
3401d370:	42e00000 	.word	0x42e00000
3401d374:	340dd060 	.word	0x340dd060
3401d378:	3402faec 	.word	0x3402faec
3401d37c:	3402ad34 	.word	0x3402ad34
    if ( dsize > 0 ) {
3401d380:	9b07      	ldr	r3, [sp, #28]
3401d382:	2b00      	cmp	r3, #0
3401d384:	dd1c      	ble.n	3401d3c0 <nn_thread_fct+0x740>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401d386:	f006 021f 	and.w	r2, r6, #31
3401d38a:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3401d38c:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401d390:	43f3      	mvns	r3, r6
3401d392:	18b5      	adds	r5, r6, r2
3401d394:	442b      	add	r3, r5
3401d396:	3a20      	subs	r2, #32
3401d398:	095b      	lsrs	r3, r3, #5
3401d39a:	3220      	adds	r2, #32
3401d39c:	f103 0e01 	add.w	lr, r3, #1
3401d3a0:	bfd8      	it	le
3401d3a2:	f04f 0e01 	movle.w	lr, #1
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
3401d3a6:	4631      	mov	r1, r6
3401d3a8:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401d3ac:	48c0      	ldr	r0, [pc, #768]	@ (3401d6b0 <nn_thread_fct+0xa30>)
3401d3ae:	f8c0 1270 	str.w	r1, [r0, #624]	@ 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
3401d3b2:	3120      	adds	r1, #32
      } while ( op_size > 0 );
3401d3b4:	f00f c805 	le	lr, 3401d3ae <nn_thread_fct+0x72e>
3401d3b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d3bc:	f3bf 8f6f 	isb	sy
  LL_ATON_RT_Main(&NN_Instance_hand_landmark);
3401d3c0:	48bc      	ldr	r0, [pc, #752]	@ (3401d6b4 <nn_thread_fct+0xa34>)
3401d3c2:	f7e6 ff09 	bl	340041d8 <LL_ATON_RT_Main>
  is_valid = ld_post_process(info->prob_out, info->landmarks_out, ld_landmarks);
3401d3c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
3401d3ca:	4abb      	ldr	r2, [pc, #748]	@ (3401d6b8 <nn_thread_fct+0xa38>)
3401d3cc:	f001 fdf8 	bl	3401efc0 <ld_post_process>
3401d3d0:	4605      	mov	r5, r0
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401d3d2:	9804      	ldr	r0, [sp, #16]
3401d3d4:	f000 031f 	and.w	r3, r0, #31
  __ASM volatile ("dsb 0xF":::"memory");
3401d3d8:	f3bf 8f4f 	dsb	sy
3401d3dc:	1cd9      	adds	r1, r3, #3
3401d3de:	3b1c      	subs	r3, #28
3401d3e0:	0949      	lsrs	r1, r1, #5
3401d3e2:	3320      	adds	r3, #32
3401d3e4:	f101 0e01 	add.w	lr, r1, #1
3401d3e8:	bfd8      	it	le
3401d3ea:	f04f 0e01 	movle.w	lr, #1
3401d3ee:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401d3f2:	4aaf      	ldr	r2, [pc, #700]	@ (3401d6b0 <nn_thread_fct+0xa30>)
3401d3f4:	f8c2 025c 	str.w	r0, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401d3f8:	3020      	adds	r0, #32
      } while ( op_size > 0 );
3401d3fa:	f00f c805 	le	lr, 3401d3f4 <nn_thread_fct+0x774>
3401d3fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d402:	f3bf 8f6f 	isb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401d406:	9b05      	ldr	r3, [sp, #20]
3401d408:	f003 0e1f 	and.w	lr, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
3401d40c:	f3bf 8f4f 	dsb	sy
3401d410:	f10e 0efb 	add.w	lr, lr, #251	@ 0xfb
3401d414:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
3401d418:	f10e 0e01 	add.w	lr, lr, #1
3401d41c:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401d420:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401d424:	3320      	adds	r3, #32
      } while ( op_size > 0 );
3401d426:	f00f c805 	le	lr, 3401d420 <nn_thread_fct+0x7a0>
3401d42a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d42e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
3401d432:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401d436:	f64b 3e80 	movw	lr, #48000	@ 0xbb80
3401d43a:	f04e e001 	dls	lr, lr
3401d43e:	4b9c      	ldr	r3, [pc, #624]	@ (3401d6b0 <nn_thread_fct+0xa30>)
3401d440:	f8c3 925c 	str.w	r9, [r3, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401d444:	f109 0920 	add.w	r9, r9, #32
      } while ( op_size > 0 );
3401d448:	f00f c007 	le	lr, 3401d440 <nn_thread_fct+0x7c0>
3401d44c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d450:	f3bf 8f6f 	isb	sy
      if (is_tracking)
3401d454:	2d00      	cmp	r5, #0
3401d456:	f000 82f7 	beq.w	3401da48 <nn_thread_fct+0xdc8>
    decode_ld_landmark_fast(src, &lm_in[i], &lm[i]);
3401d45a:	4b97      	ldr	r3, [pc, #604]	@ (3401d6b8 <nn_thread_fct+0xa38>)
3401d45c:	4897      	ldr	r0, [pc, #604]	@ (3401d6bc <nn_thread_fct+0xa3c>)
3401d45e:	aa74      	add	r2, sp, #464	@ 0x1d0
3401d460:	4422      	add	r2, r4
3401d462:	1919      	adds	r1, r3, r4
  for (i = 0; i < LD_LANDMARK_NB; i++)
3401d464:	3408      	adds	r4, #8
    decode_ld_landmark_fast(src, &lm_in[i], &lm[i]);
3401d466:	f7ff f9c1 	bl	3401c7ec <decode_ld_landmark_fast>
  for (i = 0; i < LD_LANDMARK_NB; i++)
3401d46a:	2ca8      	cmp	r4, #168	@ 0xa8
3401d46c:	d1f7      	bne.n	3401d45e <nn_thread_fct+0x7de>
  const int pd_to_ld_idx[AI_PD_MODEL_PP_NB_KEYPOINTS] = {0, 5, 9, 13, 17, 1, 2};
3401d46e:	4c94      	ldr	r4, [pc, #592]	@ (3401d6c0 <nn_thread_fct+0xa40>)
3401d470:	f50d 7c82 	add.w	ip, sp, #260	@ 0x104
3401d474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3401d476:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401d47a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  const int indices[] = {0, 1, 2, 3, 5, 6, 9, 10, 13, 14, 17, 18};
3401d47e:	340c      	adds	r4, #12
  const int pd_to_ld_idx[AI_PD_MODEL_PP_NB_KEYPOINTS] = {0, 5, 9, 13, 17, 1, 2};
3401d480:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  const int indices[] = {0, 1, 2, 3, 5, 6, 9, 10, 13, 14, 17, 18};
3401d484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3401d486:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
3401d48a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401d48e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3401d490:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401d494:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
3401d498:	eddd 7a75 	vldr	s15, [sp, #468]	@ 0x1d4
3401d49c:	ed9d 0a87 	vldr	s0, [sp, #540]	@ 0x21c
3401d4a0:	eddd 0a86 	vldr	s1, [sp, #536]	@ 0x218
3401d4a4:	ee30 0a67 	vsub.f32	s0, s0, s15
3401d4a8:	eddd 7a74 	vldr	s15, [sp, #464]	@ 0x1d0
  const int indices[] = {0, 1, 2, 3, 5, 6, 9, 10, 13, 14, 17, 18};
3401d4ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
3401d4b0:	ee70 0ae7 	vsub.f32	s1, s1, s15
3401d4b4:	eeb1 0a40 	vneg.f32	s0, s0
3401d4b8:	f007 f84a 	bl	34024550 <atan2f>
3401d4bc:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
3401d4c0:	ed9f 0b75 	vldr	d0, [pc, #468]	@ 3401d698 <nn_thread_fct+0xa18>
3401d4c4:	ee30 0b47 	vsub.f64	d0, d0, d7
3401d4c8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
  return angle - 2 * M_PI * floorf((angle - (-M_PI)) / (2 * M_PI));
3401d4cc:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 3401d6a0 <nn_thread_fct+0xa20>
3401d4d0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3401d4d4:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 3401d6a8 <nn_thread_fct+0xa28>
3401d4d8:	ee30 5b05 	vadd.f64	d5, d0, d5
3401d4dc:	ee85 7b06 	vdiv.f64	d7, d5, d6
3401d4e0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
3401d4e4:	febb 7a47 	vrintm.f32	s14, s14
3401d4e8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401d4ec:	eea7 0b46 	vfms.f64	d0, d7, d6
3401d4f0:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
  roi->cos_r = cosf(roi->rotation);
3401d4f4:	eeb0 0a48 	vmov.f32	s0, s16
  roi->rotation = ld_compute_rotation(lm);
3401d4f8:	ed8d 8a3e 	vstr	s16, [sp, #248]	@ 0xf8
  roi->cos_r = cosf(roi->rotation);
3401d4fc:	f007 fe90 	bl	34025220 <cosf>
3401d500:	ed8d 0a3f 	vstr	s0, [sp, #252]	@ 0xfc
  roi->sin_r = sinf(roi->rotation);
3401d504:	eeb0 0a48 	vmov.f32	s0, s16
3401d508:	f007 fdc6 	bl	34025098 <sinf>
  min_x = min_y =  10000;
3401d50c:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 3401d6c4 <nn_thread_fct+0xa44>
  max_x = max_y = -10000;
3401d510:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 3401d6c8 <nn_thread_fct+0xa48>
  roi->sin_r = sinf(roi->rotation);
3401d514:	ed8d 0a40 	vstr	s0, [sp, #256]	@ 0x100
  min_x = min_y =  10000;
3401d518:	eeb0 6a66 	vmov.f32	s12, s13
  max_x = max_y = -10000;
3401d51c:	eeb0 7a67 	vmov.f32	s14, s15
3401d520:	210c      	movs	r1, #12
3401d522:	ab48      	add	r3, sp, #288	@ 0x120
    max_x = MAX(max_x, lm[indices[i]].x);
3401d524:	f853 2b04 	ldr.w	r2, [r3], #4
3401d528:	a874      	add	r0, sp, #464	@ 0x1d0
3401d52a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
3401d52e:	ed92 5a00 	vldr	s10, [r2]
    max_y = MAX(max_y, lm[indices[i]].y);
3401d532:	edd2 5a01 	vldr	s11, [r2, #4]
    max_x = MAX(max_x, lm[indices[i]].x);
3401d536:	eeb4 7ac5 	vcmpe.f32	s14, s10
3401d53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    max_y = MAX(max_y, lm[indices[i]].y);
3401d53e:	eef4 5ae7 	vcmpe.f32	s11, s15
    max_x = MAX(max_x, lm[indices[i]].x);
3401d542:	fe37 7a05 	vselgt.f32	s14, s14, s10
    max_y = MAX(max_y, lm[indices[i]].y);
3401d546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    min_x = MIN(min_x, lm[indices[i]].x);
3401d54a:	eeb4 6ac5 	vcmpe.f32	s12, s10
    max_y = MAX(max_y, lm[indices[i]].y);
3401d54e:	bf58      	it	pl
3401d550:	eef0 7a65 	vmovpl.f32	s15, s11
    min_x = MIN(min_x, lm[indices[i]].x);
3401d554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    min_y = MIN(min_y, lm[indices[i]].y);
3401d558:	eef4 6ae5 	vcmpe.f32	s13, s11
    min_x = MIN(min_x, lm[indices[i]].x);
3401d55c:	bf58      	it	pl
3401d55e:	eeb0 6a45 	vmovpl.f32	s12, s10
    min_y = MIN(min_y, lm[indices[i]].y);
3401d562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d566:	bf58      	it	pl
3401d568:	eef0 6a65 	vmovpl.f32	s13, s11
  for (i = 0; i < ARRAY_NB(indices); i++) {
3401d56c:	3901      	subs	r1, #1
3401d56e:	d1d9      	bne.n	3401d524 <nn_thread_fct+0x8a4>
  roi->cx = (max_x + min_x) / 2;
3401d570:	ee37 5a06 	vadd.f32	s10, s14, s12
3401d574:	eeb6 ca00 	vmov.f32	s24, #96	@ 0x3f000000  0.5
  roi->cy = (max_y + min_y) / 2;
3401d578:	ee77 5aa6 	vadd.f32	s11, s15, s13
  roi->cx = (max_x + min_x) / 2;
3401d57c:	ee25 5a0c 	vmul.f32	s10, s10, s24
  roi->cy = (max_y + min_y) / 2;
3401d580:	ee65 5a8c 	vmul.f32	s11, s11, s24
  roi->w = (max_x - min_x);
3401d584:	ee37 7a46 	vsub.f32	s14, s14, s12
  roi->h = (max_y - min_y);
3401d588:	ee77 7ae6 	vsub.f32	s15, s15, s13
3401d58c:	f04f 0e07 	mov.w	lr, #7
  roi->cx = (max_x + min_x) / 2;
3401d590:	ed8d 5a3a 	vstr	s10, [sp, #232]	@ 0xe8
  roi->cy = (max_y + min_y) / 2;
3401d594:	edcd 5a3b 	vstr	s11, [sp, #236]	@ 0xec
  roi->w = (max_x - min_x);
3401d598:	ed8d 7a3c 	vstr	s14, [sp, #240]	@ 0xf0
  roi->h = (max_y - min_y);
3401d59c:	edcd 7a3d 	vstr	s15, [sp, #244]	@ 0xf4
  next_pd->x_center = roi->cx;
3401d5a0:	ed8d 5a2e 	vstr	s10, [sp, #184]	@ 0xb8
  next_pd->y_center = roi->cy;
3401d5a4:	edcd 5a2f 	vstr	s11, [sp, #188]	@ 0xbc
  next_pd->width = roi->w;
3401d5a8:	ed8d 7a30 	vstr	s14, [sp, #192]	@ 0xc0
  next_pd->height = roi->h;
3401d5ac:	edcd 7a31 	vstr	s15, [sp, #196]	@ 0xc4
  for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
3401d5b0:	f04e e001 	dls	lr, lr
3401d5b4:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
3401d5b6:	a941      	add	r1, sp, #260	@ 0x104
    next_pd->pKps[i].x = lm[pd_to_ld_idx[i]].x;
3401d5b8:	f851 2b04 	ldr.w	r2, [r1], #4
3401d5bc:	a874      	add	r0, sp, #464	@ 0x1d0
3401d5be:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
3401d5c2:	6810      	ldr	r0, [r2, #0]
    next_pd->pKps[i].y = lm[pd_to_ld_idx[i]].y;
3401d5c4:	6852      	ldr	r2, [r2, #4]
    next_pd->pKps[i].x = lm[pd_to_ld_idx[i]].x;
3401d5c6:	6018      	str	r0, [r3, #0]
    next_pd->pKps[i].y = lm[pd_to_ld_idx[i]].y;
3401d5c8:	605a      	str	r2, [r3, #4]
  for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
3401d5ca:	3308      	adds	r3, #8
3401d5cc:	f00f c00d 	le	lr, 3401d5b8 <nn_thread_fct+0x938>
  roi_shift_and_scale(&roi, shift_x, shift_y, scale, scale);
3401d5d0:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
3401d5d4:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 3401d6cc <nn_thread_fct+0xa4c>
3401d5d8:	eef0 0a41 	vmov.f32	s1, s2
3401d5dc:	a83a      	add	r0, sp, #232	@ 0xe8
3401d5de:	f7ff fafb 	bl	3401cbd8 <roi_shift_and_scale.constprop.0>
  *next = roi;
3401d5e2:	ac3a      	add	r4, sp, #232	@ 0xe8
3401d5e4:	f10d 0ccc 	add.w	ip, sp, #204	@ 0xcc
3401d5e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3401d5ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401d5ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
3401d5f2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        motion_update_from21(&rois[0], ld_landmarks[0], HAL_GetTick());
3401d5f6:	f001 fc71 	bl	3401eedc <HAL_GetTick>
3401d5fa:	ac74      	add	r4, sp, #464	@ 0x1d0
  cmd.t_ms = t_ms;
3401d5fc:	46a2      	mov	sl, r4
  for (int f=0; f<5; ++f) {
3401d5fe:	f04f 0b00 	mov.w	fp, #0
  while (a >= 180.f) a -= 360.f;
3401d602:	eddf ca33 	vldr	s25, [pc, #204]	@ 3401d6d0 <nn_thread_fct+0xa50>
        motion_update_from21(&rois[0], ld_landmarks[0], HAL_GetTick());
3401d606:	9003      	str	r0, [sp, #12]
  FingerCmd cmd = (FingerCmd){0};
3401d608:	227c      	movs	r2, #124	@ 0x7c
3401d60a:	2100      	movs	r1, #0
3401d60c:	a874      	add	r0, sp, #464	@ 0x1d0
3401d60e:	f004 f881 	bl	34021714 <memset>
  cmd.t_ms = t_ms;
3401d612:	9b03      	ldr	r3, [sp, #12]
3401d614:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 3401d6e0 <nn_thread_fct+0xa60>
3401d618:	9393      	str	r3, [sp, #588]	@ 0x24c
  for (int f=0; f<5; ++f) {
3401d61a:	4b2e      	ldr	r3, [pc, #184]	@ (3401d6d4 <nn_thread_fct+0xa54>)
3401d61c:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 3401d6e4 <nn_thread_fct+0xa64>
3401d620:	930a      	str	r3, [sp, #40]	@ 0x28
3401d622:	4b2d      	ldr	r3, [pc, #180]	@ (3401d6d8 <nn_thread_fct+0xa58>)
3401d624:	9309      	str	r3, [sp, #36]	@ 0x24
3401d626:	4b2d      	ldr	r3, [pc, #180]	@ (3401d6dc <nn_thread_fct+0xa5c>)
3401d628:	9308      	str	r3, [sp, #32]
    ld_point_t mcp = lm21[MCP_IDX[f]];
3401d62a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401d62c:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
3401d630:	f813 2b01 	ldrb.w	r2, [r3], #1
3401d634:	eeb7 da00 	vmov.f32	s26, #112	@ 0x3f800000  1.0
3401d638:	930a      	str	r3, [sp, #40]	@ 0x28
3401d63a:	4b1f      	ldr	r3, [pc, #124]	@ (3401d6b8 <nn_thread_fct+0xa38>)
3401d63c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
3401d640:	e892 0003 	ldmia.w	r2, {r0, r1}
3401d644:	e88c 0003 	stmia.w	ip, {r0, r1}
    ld_point_t pip = lm21[PIP_IDX[f]];
3401d648:	9909      	ldr	r1, [sp, #36]	@ 0x24
3401d64a:	f811 2b01 	ldrb.w	r2, [r1], #1
3401d64e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
3401d652:	9109      	str	r1, [sp, #36]	@ 0x24
3401d654:	e892 0003 	ldmia.w	r2, {r0, r1}
3401d658:	aa1f      	add	r2, sp, #124	@ 0x7c
3401d65a:	e882 0003 	stmia.w	r2, {r0, r1}
    ld_point_t tip = lm21[TIP_IDX[f]];
3401d65e:	9908      	ldr	r1, [sp, #32]
3401d660:	f811 2b01 	ldrb.w	r2, [r1], #1
3401d664:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
3401d668:	9108      	str	r1, [sp, #32]
3401d66a:	e892 0003 	ldmia.w	r2, {r0, r1}
3401d66e:	aa21      	add	r2, sp, #132	@ 0x84
3401d670:	e882 0003 	stmia.w	r2, {r0, r1}
    decode_ld_landmark_fast((roi_t*)roi, &mcp, &d_mcp);
3401d674:	4661      	mov	r1, ip
3401d676:	4811      	ldr	r0, [pc, #68]	@ (3401d6bc <nn_thread_fct+0xa3c>)
3401d678:	aa23      	add	r2, sp, #140	@ 0x8c
3401d67a:	f7ff f8b7 	bl	3401c7ec <decode_ld_landmark_fast>
    decode_ld_landmark_fast((roi_t*)roi, &pip, &d_pip);
3401d67e:	aa25      	add	r2, sp, #148	@ 0x94
3401d680:	a91f      	add	r1, sp, #124	@ 0x7c
3401d682:	f7ff f8b3 	bl	3401c7ec <decode_ld_landmark_fast>
    decode_ld_landmark_fast((roi_t*)roi, &tip, &d_tip);
3401d686:	aa27      	add	r2, sp, #156	@ 0x9c
3401d688:	a921      	add	r1, sp, #132	@ 0x84
3401d68a:	f7ff f8af 	bl	3401c7ec <decode_ld_landmark_fast>
    if (f == 0) {
3401d68e:	f1bb 0f00 	cmp.w	fp, #0
3401d692:	f040 81fd 	bne.w	3401da90 <nn_thread_fct+0xe10>
3401d696:	e035      	b.n	3401d704 <nn_thread_fct+0xa84>
3401d698:	54442d18 	.word	0x54442d18
3401d69c:	3ff921fb 	.word	0x3ff921fb
3401d6a0:	54442d18 	.word	0x54442d18
3401d6a4:	400921fb 	.word	0x400921fb
3401d6a8:	54442d18 	.word	0x54442d18
3401d6ac:	401921fb 	.word	0x401921fb
3401d6b0:	e000ed00 	.word	0xe000ed00
3401d6b4:	340d06b0 	.word	0x340d06b0
3401d6b8:	340e3304 	.word	0x340e3304
3401d6bc:	340e33ac 	.word	0x340e33ac
3401d6c0:	3402ad64 	.word	0x3402ad64
3401d6c4:	461c4000 	.word	0x461c4000
3401d6c8:	c61c4000 	.word	0xc61c4000
3401d6cc:	bdcccccd 	.word	0xbdcccccd
3401d6d0:	43b40000 	.word	0x43b40000
3401d6d4:	340c983e 	.word	0x340c983e
3401d6d8:	340c9839 	.word	0x340c9839
3401d6dc:	340c9834 	.word	0x340c9834
3401d6e0:	340c9820 	.word	0x340c9820
3401d6e4:	340c980c 	.word	0x340c980c
3401d6e8:	3f99999a 	.word	0x3f99999a
3401d6ec:	3ecccccd 	.word	0x3ecccccd
3401d6f0:	3fe66667 	.word	0x3fe66667
3401d6f4:	40066666 	.word	0x40066666
3401d6f8:	3f19999a 	.word	0x3f19999a
3401d6fc:	3dcccccd 	.word	0x3dcccccd
3401d700:	3e99999a 	.word	0x3e99999a
      decode_ld_landmark_fast((roi_t*)roi, (ld_point_t*)&lm21[0], &d_wrs); // wrist
3401d704:	4619      	mov	r1, r3
3401d706:	aa29      	add	r2, sp, #164	@ 0xa4
3401d708:	f7ff f870 	bl	3401c7ec <decode_ld_landmark_fast>
      decode_ld_landmark_fast((roi_t*)roi, (ld_point_t*)&lm21[1], &d_cmc); // CMC
3401d70c:	f103 0108 	add.w	r1, r3, #8
3401d710:	aa2b      	add	r2, sp, #172	@ 0xac
3401d712:	f7ff f86b 	bl	3401c7ec <decode_ld_landmark_fast>
      decode_ld_landmark_fast((roi_t*)roi, (ld_point_t*)&lm21[2], &d_mcp2);// MCP
3401d716:	f103 0110 	add.w	r1, r3, #16
3401d71a:	aa3a      	add	r2, sp, #232	@ 0xe8
3401d71c:	f7ff f866 	bl	3401c7ec <decode_ld_landmark_fast>
      decode_ld_landmark_fast((roi_t*)roi, (ld_point_t*)&lm21[3], &d_ip);  // IP
3401d720:	f103 0118 	add.w	r1, r3, #24
3401d724:	aa41      	add	r2, sp, #260	@ 0x104
3401d726:	f7ff f861 	bl	3401c7ec <decode_ld_landmark_fast>
      decode_ld_landmark_fast((roi_t*)roi, (ld_point_t*)&lm21[4], &d_tip2);// TIP
3401d72a:	f103 0120 	add.w	r1, r3, #32
3401d72e:	aa48      	add	r2, sp, #288	@ 0x120
3401d730:	f7ff f85c 	bl	3401c7ec <decode_ld_landmark_fast>
      float ang_cmc = joint_angle_rad(&d_wrs,  &d_cmc,  &d_mcp2);
3401d734:	aa3a      	add	r2, sp, #232	@ 0xe8
3401d736:	a92b      	add	r1, sp, #172	@ 0xac
3401d738:	a829      	add	r0, sp, #164	@ 0xa4
3401d73a:	f7ff f973 	bl	3401ca24 <joint_angle_rad>
      float ang_mcp = joint_angle_rad(&d_cmc,  &d_mcp2, &d_ip);
3401d73e:	aa41      	add	r2, sp, #260	@ 0x104
3401d740:	a93a      	add	r1, sp, #232	@ 0xe8
3401d742:	a82b      	add	r0, sp, #172	@ 0xac
      float ang_cmc = joint_angle_rad(&d_wrs,  &d_cmc,  &d_mcp2);
3401d744:	eef0 da40 	vmov.f32	s27, s0
      float ang_mcp = joint_angle_rad(&d_cmc,  &d_mcp2, &d_ip);
3401d748:	f7ff f96c 	bl	3401ca24 <joint_angle_rad>
      float ang_ip  = joint_angle_rad(&d_mcp2, &d_ip,   &d_tip2);
3401d74c:	aa48      	add	r2, sp, #288	@ 0x120
3401d74e:	a941      	add	r1, sp, #260	@ 0x104
3401d750:	a83a      	add	r0, sp, #232	@ 0xe8
      float ang_mcp = joint_angle_rad(&d_cmc,  &d_mcp2, &d_ip);
3401d752:	eeb0 8a40 	vmov.f32	s16, s0
      float ang_ip  = joint_angle_rad(&d_mcp2, &d_ip,   &d_tip2);
3401d756:	f7ff f965 	bl	3401ca24 <joint_angle_rad>
      if (!(ang_cmc==ang_cmc)) ang_cmc = 1.0f;
3401d75a:	eef4 da6d 	vcmp.f32	s27, s27
3401d75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (!(ang_mcp==ang_mcp)) ang_mcp = 1.2f;
3401d762:	eeb4 8a48 	vcmp.f32	s16, s16
3401d766:	ed5f 7a20 	vldr	s15, [pc, #-128]	@ 3401d6e8 <nn_thread_fct+0xa68>
      if (!(ang_cmc==ang_cmc)) ang_cmc = 1.0f;
3401d76a:	fe4d da8d 	vseleq.f32	s27, s27, s26
      if (!(ang_mcp==ang_mcp)) ang_mcp = 1.2f;
3401d76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (!(ang_ip ==ang_ip )) ang_ip  = 1.2f;
3401d772:	eeb4 0a40 	vcmp.f32	s0, s0
      if (!(ang_mcp==ang_mcp)) ang_mcp = 1.2f;
3401d776:	fe08 8a27 	vseleq.f32	s16, s16, s15
      if (!(ang_ip ==ang_ip )) ang_ip  = 1.2f;
3401d77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d77e:	fe00 0a27 	vseleq.f32	s0, s0, s15
      float u_cmc = (ang_cmc - CMC_MIN) / (CMC_MAX - CMC_MIN);
3401d782:	ed5f 7a26 	vldr	s15, [pc, #-152]	@ 3401d6ec <nn_thread_fct+0xa6c>
3401d786:	ed5f 6a26 	vldr	s13, [pc, #-152]	@ 3401d6f0 <nn_thread_fct+0xa70>
3401d78a:	ee7d dae7 	vsub.f32	s27, s27, s15
3401d78e:	ee8d 7aa6 	vdiv.f32	s14, s27, s13
      CLAMP01(u_cmc);
3401d792:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
      float u_mcp = (ang_mcp - MCP_MIN) / (MCP_MAX - MCP_MIN);
3401d796:	ee38 8a67 	vsub.f32	s16, s16, s15
      float u_ip  = (ang_ip  -  IP_MIN) / ( IP_MAX -  IP_MIN);
3401d79a:	ee30 0a67 	vsub.f32	s0, s0, s15
3401d79e:	ed5f 6a2b 	vldr	s13, [pc, #-172]	@ 3401d6f4 <nn_thread_fct+0xa74>
      CLAMP01(u_cmc);
3401d7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      float u_mcp = (ang_mcp - MCP_MIN) / (MCP_MAX - MCP_MIN);
3401d7a6:	ee28 8a0c 	vmul.f32	s16, s16, s24
      float u_ip  = (ang_ip  -  IP_MIN) / ( IP_MAX -  IP_MIN);
3401d7aa:	eec0 7a26 	vdiv.f32	s15, s0, s13
      CLAMP01(u_cmc);
3401d7ae:	f100 8166 	bmi.w	3401da7e <nn_thread_fct+0xdfe>
3401d7b2:	eeb4 7a4d 	vcmp.f32	s14, s26
3401d7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d7ba:	fe3d 7a07 	vselgt.f32	s14, s26, s14
      CLAMP01(u_mcp);
3401d7be:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
3401d7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d7c6:	f100 815d 	bmi.w	3401da84 <nn_thread_fct+0xe04>
3401d7ca:	eeb4 8a4d 	vcmp.f32	s16, s26
3401d7ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
3401d7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d7d6:	fe36 8a88 	vselgt.f32	s16, s13, s16
      CLAMP01(u_ip);
3401d7da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3401d7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d7e2:	f100 8152 	bmi.w	3401da8a <nn_thread_fct+0xe0a>
3401d7e6:	eef4 7a4d 	vcmp.f32	s15, s26
3401d7ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
3401d7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d7f2:	fe76 7aa7 	vselgt.f32	s15, s13, s15
      float bend = TH_W_CMC*u_cmc + TH_W_MCP*u_mcp + TH_W_IP*u_ip;
3401d7f6:	ed5f 6a40 	vldr	s13, [pc, #-256]	@ 3401d6f8 <nn_thread_fct+0xa78>
3401d7fa:	ee28 8a26 	vmul.f32	s16, s16, s13
3401d7fe:	ed5f 6a41 	vldr	s13, [pc, #-260]	@ 3401d6fc <nn_thread_fct+0xa7c>
3401d802:	eea7 8a26 	vfma.f32	s16, s14, s13
3401d806:	ed1f 7a42 	vldr	s14, [pc, #-264]	@ 3401d700 <nn_thread_fct+0xa80>
3401d80a:	eea7 8a87 	vfma.f32	s16, s15, s14
      CLAMP01(bend);
3401d80e:	eeb4 8a4d 	vcmp.f32	s16, s26
3401d812:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3401d816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d81a:	fe37 8a88 	vselgt.f32	s16, s15, s16
    float dx = d_tip.x - d_mcp.x, dy = d_tip.y - d_mcp.y;
3401d81e:	eddd 7a23 	vldr	s15, [sp, #140]	@ 0x8c
3401d822:	ed9d fa27 	vldr	s30, [sp, #156]	@ 0x9c
3401d826:	eddd ea28 	vldr	s29, [sp, #160]	@ 0xa0
3401d82a:	ee3f fa67 	vsub.f32	s30, s30, s15
3401d82e:	eddd 7a24 	vldr	s15, [sp, #144]	@ 0x90
3401d832:	ee7e eae7 	vsub.f32	s29, s29, s15
    float len = sqrtf(dx*dx + dy*dy);
3401d836:	ee2e 0aae 	vmul.f32	s0, s29, s29
3401d83a:	eeaf 0a0f 	vfma.f32	s0, s30, s30
3401d83e:	f006 fe89 	bl	34024554 <sqrtf>
    float ref_len = fmaxf(1.0f, 0.35f * roi->w);
3401d842:	4bd2      	ldr	r3, [pc, #840]	@ (3401db8c <nn_thread_fct+0xf0c>)
3401d844:	eddf 7ad2 	vldr	s15, [pc, #840]	@ 3401db90 <nn_thread_fct+0xf10>
3401d848:	ed93 7a02 	vldr	s14, [r3, #8]
3401d84c:	ee27 7a27 	vmul.f32	s14, s14, s15
3401d850:	fe87 7a0d 	vmaxnm.f32	s14, s14, s26
    float flex_len = len / ref_len; if (flex_len>1.f) flex_len=1.f;
3401d854:	eec0 7a07 	vdiv.f32	s15, s0, s14
3401d858:	eef4 7a4d 	vcmp.f32	s15, s26
3401d85c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
3401d860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float flex = 0.85f*flex_ang + 0.15f*flex_len;
3401d864:	eddf dacb 	vldr	s27, [pc, #812]	@ 3401db94 <nn_thread_fct+0xf14>
    float flex_len = len / ref_len; if (flex_len>1.f) flex_len=1.f;
3401d868:	fe77 7a27 	vselgt.f32	s15, s14, s15
    float flex = 0.85f*flex_ang + 0.15f*flex_len;
3401d86c:	ee27 eaad 	vmul.f32	s28, s15, s27
3401d870:	eddf 7ac9 	vldr	s15, [pc, #804]	@ 3401db98 <nn_thread_fct+0xf18>
    float len = sqrtf(dx*dx + dy*dy);
3401d874:	eef0 fa40 	vmov.f32	s31, s0
    cmd.angle_deg[f] = deg_norm(atan2f(dy, dx) * 180.0f / (float)M_PI);
3401d878:	eef0 0a4f 	vmov.f32	s1, s30
3401d87c:	eeb0 0a6e 	vmov.f32	s0, s29
    float flex = 0.85f*flex_ang + 0.15f*flex_len;
3401d880:	eea8 ea27 	vfma.f32	s28, s16, s15
    cmd.angle_deg[f] = deg_norm(atan2f(dy, dx) * 180.0f / (float)M_PI);
3401d884:	f006 fe64 	bl	34024550 <atan2f>
3401d888:	ed9f 8ac4 	vldr	s16, [pc, #784]	@ 3401db9c <nn_thread_fct+0xf1c>
3401d88c:	ed9f 7ac4 	vldr	s14, [pc, #784]	@ 3401dba0 <nn_thread_fct+0xf20>
3401d890:	ee20 0a08 	vmul.f32	s0, s0, s16
3401d894:	eec0 7a07 	vdiv.f32	s15, s0, s14
  while (a >= 180.f) a -= 360.f;
3401d898:	eef4 7ac8 	vcmpe.f32	s15, s16
3401d89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d8a0:	f280 811b 	bge.w	3401dada <nn_thread_fct+0xe5a>
  while (a <  -180.f) a += 360.f;
3401d8a4:	eddf eabf 	vldr	s29, [pc, #764]	@ 3401dba4 <nn_thread_fct+0xf24>
3401d8a8:	eef4 7aee 	vcmpe.f32	s15, s29
3401d8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d8b0:	f100 8116 	bmi.w	3401dae0 <nn_thread_fct+0xe60>
    cmd.angle_deg[f] = deg_norm(atan2f(dy, dx) * 180.0f / (float)M_PI);
3401d8b4:	ecea 7a01 	vstmia	sl!, {s15}
  for (int f=0; f<5; ++f) {
3401d8b8:	f10b 0b01 	add.w	fp, fp, #1
3401d8bc:	f1bb 0f05 	cmp.w	fp, #5
    cmd.length_px[f] = len;
3401d8c0:	edca fa04 	vstr	s31, [sl, #16]
    cmd.flex01[f]    = flex;
3401d8c4:	ed8a ea09 	vstr	s28, [sl, #36]	@ 0x24
  for (int f=0; f<5; ++f) {
3401d8c8:	f109 0904 	add.w	r9, r9, #4
3401d8cc:	f108 0804 	add.w	r8, r8, #4
3401d8d0:	f47f aeab 	bne.w	3401d62a <nn_thread_fct+0x9aa>
    decode_ld_landmark_fast((roi_t*)roi, (ld_point_t*)&lm21[5],  &d_idx);   // index MCP
3401d8d4:	49b4      	ldr	r1, [pc, #720]	@ (3401dba8 <nn_thread_fct+0xf28>)
3401d8d6:	48ad      	ldr	r0, [pc, #692]	@ (3401db8c <nn_thread_fct+0xf0c>)
3401d8d8:	aa3a      	add	r2, sp, #232	@ 0xe8
3401d8da:	f7fe ff87 	bl	3401c7ec <decode_ld_landmark_fast>
    decode_ld_landmark_fast((roi_t*)roi, (ld_point_t*)&lm21[17], &d_pinky); // pinky MCP
3401d8de:	aa41      	add	r2, sp, #260	@ 0x104
3401d8e0:	3160      	adds	r1, #96	@ 0x60
3401d8e2:	f7fe ff83 	bl	3401c7ec <decode_ld_landmark_fast>
    decode_ld_landmark_fast((roi_t*)roi, (ld_point_t*)&lm21[4],  &d_tip);   // thumb TIP
3401d8e6:	aa48      	add	r2, sp, #288	@ 0x120
3401d8e8:	3968      	subs	r1, #104	@ 0x68
3401d8ea:	f7fe ff7f 	bl	3401c7ec <decode_ld_landmark_fast>
    float ux = d_pinky.x - d_idx.x, uy = d_pinky.y - d_idx.y;
3401d8ee:	eddd ca3b 	vldr	s25, [sp, #236]	@ 0xec
3401d8f2:	ed9d 0a42 	vldr	s0, [sp, #264]	@ 0x108
3401d8f6:	ed9d ea3a 	vldr	s28, [sp, #232]	@ 0xe8
3401d8fa:	eddd 7a41 	vldr	s15, [sp, #260]	@ 0x104
3401d8fe:	ee30 0a6c 	vsub.f32	s0, s0, s25
3401d902:	ee77 7ace 	vsub.f32	s15, s15, s28
    float Lp = sqrtf(ux*ux + uy*uy);
3401d906:	ee20 0a00 	vmul.f32	s0, s0, s0
3401d90a:	eea7 0aa7 	vfma.f32	s0, s15, s15
3401d90e:	f006 fe21 	bl	34024554 <sqrtf>
    if (Lp < 1e-3f) {
3401d912:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 3401dbac <nn_thread_fct+0xf2c>
3401d916:	eeb4 0ae7 	vcmpe.f32	s0, s15
3401d91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float Lp = sqrtf(ux*ux + uy*uy);
3401d91e:	eeb0 ca40 	vmov.f32	s24, s0
    if (Lp < 1e-3f) {
3401d922:	f140 80e0 	bpl.w	3401dae6 <nn_thread_fct+0xe66>
      cmd.opp01 = g_last_cmd.opp01;  /* keep last if geometry invalid */
3401d926:	4ba2      	ldr	r3, [pc, #648]	@ (3401dbb0 <nn_thread_fct+0xf30>)
3401d928:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
  if (g_motion_state.has_prev) {
3401d92c:	f8df 82bc 	ldr.w	r8, [pc, #700]	@ 3401dbec <nn_thread_fct+0xf6c>
      cmd.opp01 = g_last_cmd.opp01;  /* keep last if geometry invalid */
3401d930:	edcd 7a92 	vstr	s15, [sp, #584]	@ 0x248
  if (g_motion_state.has_prev) {
3401d934:	f8d8 e000 	ldr.w	lr, [r8]
3401d938:	f1be 0f00 	cmp.w	lr, #0
3401d93c:	f000 8106 	beq.w	3401db4c <nn_thread_fct+0xecc>
    float dt = (t_ms - g_motion_state.t_prev_ms) / 1000.0f;
3401d940:	9a03      	ldr	r2, [sp, #12]
3401d942:	f8d8 3040 	ldr.w	r3, [r8, #64]	@ 0x40
3401d946:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 3401dbb4 <nn_thread_fct+0xf34>
3401d94a:	1ad3      	subs	r3, r2, r3
3401d94c:	ee07 3a90 	vmov	s15, r3
3401d950:	eef8 7a67 	vcvt.f32.u32	s15, s15
3401d954:	eec7 6a87 	vdiv.f32	s13, s15, s14
    if (dt < 1e-4f) dt = 1e-4f;
3401d958:	eddf 7a97 	vldr	s15, [pc, #604]	@ 3401dbb8 <nn_thread_fct+0xf38>
3401d95c:	eef4 6a67 	vcmp.f32	s13, s15
3401d960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    for (int f=0; f<5; ++f) {
3401d964:	f04f 0200 	mov.w	r2, #0
    if (dt < 1e-4f) dt = 1e-4f;
3401d968:	bf48      	it	mi
3401d96a:	eef0 6a67 	vmovmi.f32	s13, s15
  while (a >= 180.f) a -= 360.f;
3401d96e:	eddf 5a93 	vldr	s11, [pc, #588]	@ 3401dbbc <nn_thread_fct+0xf3c>
      float flex_sm   = flex_prev + 0.12f * (cmd.flex01[f] - flex_prev);
3401d972:	ed9f 4a93 	vldr	s8, [pc, #588]	@ 3401dbc0 <nn_thread_fct+0xf40>
      CLAMP01(flex_sm);
3401d976:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
3401d97a:	f108 0304 	add.w	r3, r8, #4
      float a_prev  = g_motion_state.angle_deg_prev[f];
3401d97e:	ecf3 7a01 	vldmia	r3!, {s15}
      float a_delta = deg_norm(cmd.angle_deg[f] - a_prev);
3401d982:	ecb4 7a01 	vldmia	r4!, {s14}
3401d986:	ee37 7a67 	vsub.f32	s14, s14, s15
  while (a >= 180.f) a -= 360.f;
3401d98a:	eeb4 7ac8 	vcmpe.f32	s14, s16
3401d98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d992:	f280 80cc 	bge.w	3401db2e <nn_thread_fct+0xeae>
  while (a <  -180.f) a += 360.f;
3401d996:	eeb4 7aee 	vcmpe.f32	s14, s29
3401d99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d99e:	f100 80c9 	bmi.w	3401db34 <nn_thread_fct+0xeb4>
      cmd.angle_deg[f] = deg_norm(a_prev + 0.15f * a_delta);
3401d9a2:	eee7 7a2d 	vfma.f32	s15, s14, s27
  while (a >= 180.f) a -= 360.f;
3401d9a6:	eef4 7ac8 	vcmpe.f32	s15, s16
3401d9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d9ae:	f280 80c4 	bge.w	3401db3a <nn_thread_fct+0xeba>
  while (a <  -180.f) a += 360.f;
3401d9b2:	eef4 7aee 	vcmpe.f32	s15, s29
3401d9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d9ba:	f100 80c1 	bmi.w	3401db40 <nn_thread_fct+0xec0>
      cmd.d_angle_dps[f] = a_delta / dt;
3401d9be:	ee87 6a26 	vdiv.f32	s12, s14, s13
      float flex_sm   = flex_prev + 0.12f * (cmd.flex01[f] - flex_prev);
3401d9c2:	ed94 5a09 	vldr	s10, [r4, #36]	@ 0x24
      cmd.d_angle_dps[f] = a_delta / dt;
3401d9c6:	ed84 6a0e 	vstr	s12, [r4, #56]	@ 0x38
      float flex_prev = g_motion_state.flex_prev[f];
3401d9ca:	ed93 6a04 	vldr	s12, [r3, #16]
      float flex_sm   = flex_prev + 0.12f * (cmd.flex01[f] - flex_prev);
3401d9ce:	ee35 5a46 	vsub.f32	s10, s10, s12
3401d9d2:	eeb0 7a46 	vmov.f32	s14, s12
3401d9d6:	eea5 7a04 	vfma.f32	s14, s10, s8
      float d_flex    = (flex_sm - flex_prev) / dt;
3401d9da:	ee37 6a46 	vsub.f32	s12, s14, s12
      CLAMP01(flex_sm);
3401d9de:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
      float d_flex    = (flex_sm - flex_prev) / dt;
3401d9e2:	ee86 5a26 	vdiv.f32	s10, s12, s13
      float dd_flex   = (d_flex - g_motion_state.d_flex_prev[f]) / dt;
3401d9e6:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
      CLAMP01(flex_sm);
3401d9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      float dd_flex   = (d_flex - g_motion_state.d_flex_prev[f]) / dt;
3401d9ee:	ee35 6a46 	vsub.f32	s12, s10, s12
      cmd.angle_deg[f] = deg_norm(a_prev + 0.15f * a_delta);
3401d9f2:	ed44 7a01 	vstr	s15, [r4, #-4]
      float dd_flex   = (d_flex - g_motion_state.d_flex_prev[f]) / dt;
3401d9f6:	eec6 4a26 	vdiv.f32	s9, s12, s13
      CLAMP01(flex_sm);
3401d9fa:	f100 80a4 	bmi.w	3401db46 <nn_thread_fct+0xec6>
3401d9fe:	eeb4 7a4d 	vcmp.f32	s14, s26
3401da02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401da06:	fe33 7a87 	vselgt.f32	s14, s7, s14
    for (int f=0; f<5; ++f) {
3401da0a:	3201      	adds	r2, #1
3401da0c:	2a05      	cmp	r2, #5
      cmd.flex01[f] = flex_sm; cmd.d_flex[f] = d_flex; cmd.dd_flex[f] = dd_flex;
3401da0e:	ed84 7a09 	vstr	s14, [r4, #36]	@ 0x24
3401da12:	ed84 5a13 	vstr	s10, [r4, #76]	@ 0x4c
3401da16:	edc4 4a18 	vstr	s9, [r4, #96]	@ 0x60
      g_motion_state.angle_deg_prev[f] = cmd.angle_deg[f];
3401da1a:	ed43 7a01 	vstr	s15, [r3, #-4]
      g_motion_state.flex_prev[f]      = cmd.flex01[f];
3401da1e:	ed83 7a04 	vstr	s14, [r3, #16]
      g_motion_state.d_flex_prev[f]    = d_flex;
3401da22:	ed83 5a09 	vstr	s10, [r3, #36]	@ 0x24
    for (int f=0; f<5; ++f) {
3401da26:	d1aa      	bne.n	3401d97e <nn_thread_fct+0xcfe>
    g_motion_state.t_prev_ms = t_ms;
3401da28:	9b03      	ldr	r3, [sp, #12]
3401da2a:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
  if (s_motion_q) xQueueOverwrite(s_motion_q, &cmd);
3401da2e:	4b65      	ldr	r3, [pc, #404]	@ (3401dbc4 <nn_thread_fct+0xf44>)
3401da30:	6818      	ldr	r0, [r3, #0]
3401da32:	b120      	cbz	r0, 3401da3e <nn_thread_fct+0xdbe>
3401da34:	2302      	movs	r3, #2
3401da36:	2200      	movs	r2, #0
3401da38:	a974      	add	r1, sp, #464	@ 0x1d0
3401da3a:	f7ec fcfd 	bl	3400a438 <xQueueGenericSend>
  g_last_cmd = cmd;
3401da3e:	2280      	movs	r2, #128	@ 0x80
3401da40:	485b      	ldr	r0, [pc, #364]	@ (3401dbb0 <nn_thread_fct+0xf30>)
3401da42:	a974      	add	r1, sp, #464	@ 0x1d0
3401da44:	f004 f915 	bl	34021c72 <memcpy>
      hl_ms = HAL_GetTick() - hl_ms;
3401da48:	f001 fa48 	bl	3401eedc <HAL_GetTick>
3401da4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401da4e:	1ac0      	subs	r0, r0, r3
    ld_filtered_ms = USE_FILTERED_TS ? (7 * ld_filtered_ms + hl_ms) / 8 : hl_ms;
3401da50:	ee07 0a90 	vmov	s15, r0
3401da54:	eef8 7a67 	vcvt.f32.u32	s15, s15
3401da58:	eeea 7a2b 	vfma.f32	s15, s20, s23
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401da5c:	4c5a      	ldr	r4, [pc, #360]	@ (3401dbc8 <nn_thread_fct+0xf48>)
3401da5e:	f04f 31ff 	mov.w	r1, #4294967295
3401da62:	6d60      	ldr	r0, [r4, #84]	@ 0x54
    ld_filtered_ms = USE_FILTERED_TS ? (7 * ld_filtered_ms + hl_ms) / 8 : hl_ms;
3401da64:	ee27 aa8b 	vmul.f32	s20, s15, s22
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401da68:	f7ec fe8a 	bl	3400a780 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401da6c:	2801      	cmp	r0, #1
3401da6e:	f000 80bf 	beq.w	3401dbf0 <nn_thread_fct+0xf70>
3401da72:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
3401da76:	4b55      	ldr	r3, [pc, #340]	@ (3401dbcc <nn_thread_fct+0xf4c>)
3401da78:	4a55      	ldr	r2, [pc, #340]	@ (3401dbd0 <nn_thread_fct+0xf50>)
3401da7a:	f7ff b91f 	b.w	3401ccbc <nn_thread_fct+0x3c>
      CLAMP01(u_cmc);
3401da7e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 3401dbd4 <nn_thread_fct+0xf54>
3401da82:	e69c      	b.n	3401d7be <nn_thread_fct+0xb3e>
      CLAMP01(u_mcp);
3401da84:	ed9f 8a53 	vldr	s16, [pc, #332]	@ 3401dbd4 <nn_thread_fct+0xf54>
3401da88:	e6a7      	b.n	3401d7da <nn_thread_fct+0xb5a>
      CLAMP01(u_ip);
3401da8a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 3401dbd4 <nn_thread_fct+0xf54>
3401da8e:	e6b2      	b.n	3401d7f6 <nn_thread_fct+0xb76>
      float ang = joint_angle_rad(&d_mcp, &d_pip, &d_tip);
3401da90:	a925      	add	r1, sp, #148	@ 0x94
3401da92:	a823      	add	r0, sp, #140	@ 0x8c
3401da94:	f7fe ffc6 	bl	3401ca24 <joint_angle_rad>
      if (!(ang==ang)) ang = 1.2f;  /* guard */
3401da98:	eeb4 0a40 	vcmp.f32	s0, s0
3401da9c:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 3401dbd8 <nn_thread_fct+0xf58>
3401daa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float flex = (ang_rad - ANG_MIN_F[f]) / (ANG_MAX_F[f] - ANG_MIN_F[f]);
3401daa4:	ed99 7a00 	vldr	s14, [r9]
      if (!(ang==ang)) ang = 1.2f;  /* guard */
3401daa8:	fe00 0a27 	vseleq.f32	s0, s0, s15
  float flex = (ang_rad - ANG_MIN_F[f]) / (ANG_MAX_F[f] - ANG_MIN_F[f]);
3401daac:	edd8 7a00 	vldr	s15, [r8]
3401dab0:	ee30 0a47 	vsub.f32	s0, s0, s14
3401dab4:	ee77 7ac7 	vsub.f32	s15, s15, s14
3401dab8:	ee80 8a27 	vdiv.f32	s16, s0, s15
static inline float clamp01f(float x) { return x < 0.f ? 0.f : (x > 1.f ? 1.f : x); }
3401dabc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
3401dac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dac4:	d406      	bmi.n	3401dad4 <nn_thread_fct+0xe54>
3401dac6:	eeb4 8a4d 	vcmp.f32	s16, s26
3401daca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dace:	fe3d 8a08 	vselgt.f32	s16, s26, s16
3401dad2:	e6a4      	b.n	3401d81e <nn_thread_fct+0xb9e>
3401dad4:	ed9f 8a3f 	vldr	s16, [pc, #252]	@ 3401dbd4 <nn_thread_fct+0xf54>
3401dad8:	e6a1      	b.n	3401d81e <nn_thread_fct+0xb9e>
  while (a >= 180.f) a -= 360.f;
3401dada:	ee77 7aec 	vsub.f32	s15, s15, s25
3401dade:	e6db      	b.n	3401d898 <nn_thread_fct+0xc18>
  while (a <  -180.f) a += 360.f;
3401dae0:	ee77 7aac 	vadd.f32	s15, s15, s25
3401dae4:	e6e0      	b.n	3401d8a8 <nn_thread_fct+0xc28>
      float dx = d_tip.x - d_idx.x, dy = d_tip.y - d_idx.y;
3401dae6:	eddd 7a49 	vldr	s15, [sp, #292]	@ 0x124
3401daea:	ed9d 7a48 	vldr	s14, [sp, #288]	@ 0x120
3401daee:	ee77 7aec 	vsub.f32	s15, s15, s25
3401daf2:	ee37 7a4e 	vsub.f32	s14, s14, s28
      float dist_idx = sqrtf(dx*dx + dy*dy) / Lp;
3401daf6:	ee27 0aa7 	vmul.f32	s0, s15, s15
3401dafa:	eea7 0a07 	vfma.f32	s0, s14, s14
3401dafe:	f006 fd29 	bl	34024554 <sqrtf>
      float u_raw = (FAR - dist_idx) / (FAR - NEAR);
3401db02:	eddf 6a36 	vldr	s13, [pc, #216]	@ 3401dbdc <nn_thread_fct+0xf5c>
      float dist_idx = sqrtf(dx*dx + dy*dy) / Lp;
3401db06:	ee80 7a0c 	vdiv.f32	s14, s0, s24
      float u_raw = (FAR - dist_idx) / (FAR - NEAR);
3401db0a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 3401dbe0 <nn_thread_fct+0xf60>
3401db0e:	ee76 6ac7 	vsub.f32	s13, s13, s14
      float opp_sm = opp_prev + ema_a * (u_raw - opp_prev);
3401db12:	4b34      	ldr	r3, [pc, #208]	@ (3401dbe4 <nn_thread_fct+0xf64>)
      float u_raw = (FAR - dist_idx) / (FAR - NEAR);
3401db14:	ee86 7a86 	vdiv.f32	s14, s13, s12
      float opp_sm = opp_prev + ema_a * (u_raw - opp_prev);
3401db18:	edd3 7a00 	vldr	s15, [r3]
3401db1c:	eddf 6a32 	vldr	s13, [pc, #200]	@ 3401dbe8 <nn_thread_fct+0xf68>
3401db20:	ee37 7a67 	vsub.f32	s14, s14, s15
3401db24:	eee7 7a26 	vfma.f32	s15, s14, s13
      opp_prev = opp_sm;
3401db28:	edc3 7a00 	vstr	s15, [r3]
      cmd.opp01 = opp_sm;
3401db2c:	e6fe      	b.n	3401d92c <nn_thread_fct+0xcac>
  while (a >= 180.f) a -= 360.f;
3401db2e:	ee37 7a65 	vsub.f32	s14, s14, s11
3401db32:	e72a      	b.n	3401d98a <nn_thread_fct+0xd0a>
  while (a <  -180.f) a += 360.f;
3401db34:	ee37 7a25 	vadd.f32	s14, s14, s11
3401db38:	e72d      	b.n	3401d996 <nn_thread_fct+0xd16>
  while (a >= 180.f) a -= 360.f;
3401db3a:	ee77 7ae5 	vsub.f32	s15, s15, s11
3401db3e:	e732      	b.n	3401d9a6 <nn_thread_fct+0xd26>
  while (a <  -180.f) a += 360.f;
3401db40:	ee77 7aa5 	vadd.f32	s15, s15, s11
3401db44:	e735      	b.n	3401d9b2 <nn_thread_fct+0xd32>
      CLAMP01(flex_sm);
3401db46:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 3401dbd4 <nn_thread_fct+0xf54>
3401db4a:	e75e      	b.n	3401da0a <nn_thread_fct+0xd8a>
      g_motion_state.angle_deg_prev[f] = cmd.angle_deg[f];
3401db4c:	f108 0c04 	add.w	ip, r8, #4
3401db50:	ac74      	add	r4, sp, #464	@ 0x1d0
3401db52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3401db54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401db58:	6823      	ldr	r3, [r4, #0]
3401db5a:	4664      	mov	r4, ip
      g_motion_state.flex_prev[f]      = cmd.flex01[f];
3401db5c:	f50d 79fc 	add.w	r9, sp, #504	@ 0x1f8
      g_motion_state.angle_deg_prev[f] = cmd.angle_deg[f];
3401db60:	f844 3b04 	str.w	r3, [r4], #4
      g_motion_state.flex_prev[f]      = cmd.flex01[f];
3401db64:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
3401db68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3401db6a:	f8d9 3000 	ldr.w	r3, [r9]
      g_motion_state.d_flex_prev[f]    = 0.f;
3401db6e:	2214      	movs	r2, #20
3401db70:	4671      	mov	r1, lr
3401db72:	f10c 0018 	add.w	r0, ip, #24
      g_motion_state.flex_prev[f]      = cmd.flex01[f];
3401db76:	6023      	str	r3, [r4, #0]
      g_motion_state.d_flex_prev[f]    = 0.f;
3401db78:	f003 fdcc 	bl	34021714 <memset>
    g_motion_state.t_prev_ms = t_ms;
3401db7c:	9b03      	ldr	r3, [sp, #12]
3401db7e:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
    g_motion_state.has_prev  = 1;
3401db82:	2301      	movs	r3, #1
3401db84:	f8c8 3000 	str.w	r3, [r8]
3401db88:	e751      	b.n	3401da2e <nn_thread_fct+0xdae>
3401db8a:	bf00      	nop
3401db8c:	340e33ac 	.word	0x340e33ac
3401db90:	3eb33333 	.word	0x3eb33333
3401db94:	3e19999a 	.word	0x3e19999a
3401db98:	3f59999a 	.word	0x3f59999a
3401db9c:	43340000 	.word	0x43340000
3401dba0:	40490fdb 	.word	0x40490fdb
3401dba4:	c3340000 	.word	0xc3340000
3401dba8:	340e332c 	.word	0x340e332c
3401dbac:	3a83126f 	.word	0x3a83126f
3401dbb0:	340e35c8 	.word	0x340e35c8
3401dbb4:	447a0000 	.word	0x447a0000
3401dbb8:	38d1b717 	.word	0x38d1b717
3401dbbc:	43b40000 	.word	0x43b40000
3401dbc0:	3df5c28f 	.word	0x3df5c28f
3401dbc4:	340e34f4 	.word	0x340e34f4
3401dbc8:	340d0710 	.word	0x340d0710
3401dbcc:	3402ae28 	.word	0x3402ae28
3401dbd0:	340c96e3 	.word	0x340c96e3
3401dbd4:	00000000 	.word	0x00000000
3401dbd8:	3f99999a 	.word	0x3f99999a
3401dbdc:	3f8ccccd 	.word	0x3f8ccccd
3401dbe0:	3f333334 	.word	0x3f333334
3401dbe4:	340dafec 	.word	0x340dafec
3401dbe8:	3e99999a 	.word	0x3e99999a
3401dbec:	340e34b0 	.word	0x340e34b0
    disp.info.pd_ms = is_tracking ? 0 : (int)pd_filtered_ms;
3401dbf0:	b39d      	cbz	r5, 3401dc5a <nn_thread_fct+0xfda>
    disp.info.hl_ms = is_tracking ? (int)ld_filtered_ms : 0;
3401dbf2:	eefd 7aca 	vcvt.s32.f32	s15, s20
    disp.info.pd_ms = is_tracking ? 0 : (int)pd_filtered_ms;
3401dbf6:	2200      	movs	r2, #0
    disp.info.hl_ms = is_tracking ? (int)ld_filtered_ms : 0;
3401dbf8:	ee17 3a90 	vmov	r3, s15
    disp.info.pd_max_prob = pd_info.pd_out.pOutData[0].prob;
3401dbfc:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
    disp.info.hl_ms = is_tracking ? (int)ld_filtered_ms : 0;
3401dbfe:	e9c4 232b 	strd	r2, r3, [r4, #172]	@ 0xac
    disp.info.pd_max_prob = pd_info.pd_out.pOutData[0].prob;
3401dc02:	680b      	ldr	r3, [r1, #0]
    copy_pd_box(&disp.info.hands[0].pd_hands, &pd_info.pd_out.pOutData[0]);
3401dc04:	481c      	ldr	r0, [pc, #112]	@ (3401dc78 <nn_thread_fct+0xff8>)
    disp.info.pd_max_prob = pd_info.pd_out.pOutData[0].prob;
3401dc06:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
    disp.info.nn_period_ms = nn_period_filtered_ms;
3401dc0a:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
    disp.info.pd_hand_nb = is_tracking;
3401dc0e:	f8c4 50c4 	str.w	r5, [r4, #196]	@ 0xc4
    disp.info.hands[0].is_valid = is_tracking;
3401dc12:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
    copy_pd_box(&disp.info.hands[0].pd_hands, &pd_info.pd_out.pOutData[0]);
3401dc16:	f7fe fe12 	bl	3401c83e <copy_pd_box>
    disp.info.hands[0].roi = rois[0];
3401dc1a:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 3401dc88 <nn_thread_fct+0x1008>
3401dc1e:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 3401dc8c <nn_thread_fct+0x100c>
3401dc22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
3401dc26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3401dc2a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
3401dc2e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
      disp.info.hands[0].ld_landmarks[j] = ld_landmarks[0][j];
3401dc32:	22a8      	movs	r2, #168	@ 0xa8
3401dc34:	4911      	ldr	r1, [pc, #68]	@ (3401dc7c <nn_thread_fct+0xffc>)
3401dc36:	f10c 000c 	add.w	r0, ip, #12
3401dc3a:	f004 f81a 	bl	34021c72 <memcpy>
    ret = xSemaphoreGive(disp.lock);
3401dc3e:	2300      	movs	r3, #0
3401dc40:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401dc42:	461a      	mov	r2, r3
3401dc44:	4619      	mov	r1, r3
3401dc46:	f7ec fbf7 	bl	3400a438 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401dc4a:	2801      	cmp	r0, #1
3401dc4c:	d00b      	beq.n	3401dc66 <nn_thread_fct+0xfe6>
3401dc4e:	f240 6184 	movw	r1, #1668	@ 0x684
3401dc52:	4b0b      	ldr	r3, [pc, #44]	@ (3401dc80 <nn_thread_fct+0x1000>)
3401dc54:	4a0b      	ldr	r2, [pc, #44]	@ (3401dc84 <nn_thread_fct+0x1004>)
3401dc56:	f7ff b831 	b.w	3401ccbc <nn_thread_fct+0x3c>
    disp.info.pd_ms = is_tracking ? 0 : (int)pd_filtered_ms;
3401dc5a:	eefd 7aea 	vcvt.s32.f32	s15, s21
    disp.info.hl_ms = is_tracking ? (int)ld_filtered_ms : 0;
3401dc5e:	462b      	mov	r3, r5
    disp.info.pd_ms = is_tracking ? 0 : (int)pd_filtered_ms;
3401dc60:	ee17 2a90 	vmov	r2, s15
    disp.info.hl_ms = is_tracking ? (int)ld_filtered_ms : 0;
3401dc64:	e7ca      	b.n	3401dbfc <nn_thread_fct+0xf7c>
    xSemaphoreGive(disp.update);
3401dc66:	2300      	movs	r3, #0
3401dc68:	6820      	ldr	r0, [r4, #0]
3401dc6a:	461a      	mov	r2, r3
3401dc6c:	4619      	mov	r1, r3
3401dc6e:	f7ec fbe3 	bl	3400a438 <xQueueGenericSend>
    nn_period[1] = HAL_GetTick();
3401dc72:	9c06      	ldr	r4, [sp, #24]
  {
3401dc74:	f7ff b8fb 	b.w	3401ce6e <nn_thread_fct+0x1ee>
3401dc78:	340d07e0 	.word	0x340d07e0
3401dc7c:	340e3304 	.word	0x340e3304
3401dc80:	3402ae28 	.word	0x3402ae28
3401dc84:	340c96e3 	.word	0x340c96e3
3401dc88:	340d07f8 	.word	0x340d07f8
3401dc8c:	340e33ac 	.word	0x340e33ac

3401dc90 <map_window01>:
    float lo = m->in_lo, hi = m->in_hi;
3401dc90:	ed90 7a00 	vldr	s14, [r0]
    if (hi - lo < 1e-6f) return clamp01f_local(u_raw);  // safety
3401dc94:	edd0 7a01 	vldr	s15, [r0, #4]
3401dc98:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 3401dd4c <map_window01+0xbc>
3401dc9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
3401dca0:	eef4 7ae6 	vcmpe.f32	s15, s13
3401dca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
3401dca8:	b510      	push	{r4, lr}
3401dcaa:	4604      	mov	r4, r0
    if (hi - lo < 1e-6f) return clamp01f_local(u_raw);  // safety
3401dcac:	d511      	bpl.n	3401dcd2 <map_window01+0x42>
static inline float clamp01f(float x) { return x < 0.f ? 0.f : (x > 1.f ? 1.f : x); }
3401dcae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
3401dcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dcb6:	d502      	bpl.n	3401dcbe <map_window01+0x2e>
3401dcb8:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 3401dd50 <map_window01+0xc0>
  }
3401dcbc:	bd10      	pop	{r4, pc}
static inline float clamp01f(float x) { return x < 0.f ? 0.f : (x > 1.f ? 1.f : x); }
3401dcbe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3401dcc2:	eeb4 0ae7 	vcmpe.f32	s0, s15
3401dcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dcca:	ddf7      	ble.n	3401dcbc <map_window01+0x2c>
3401dccc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3401dcd0:	e7f4      	b.n	3401dcbc <map_window01+0x2c>
    float u = (u_raw - lo) / (hi - lo);                 // linear 0..1
3401dcd2:	ee30 7a47 	vsub.f32	s14, s0, s14
3401dcd6:	ee87 0a27 	vdiv.f32	s0, s14, s15
    if (u < 0.f) u = 0.f; else if (u > 1.f) u = 1.f;
3401dcda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
3401dcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dce2:	d41c      	bmi.n	3401dd1e <map_window01+0x8e>
3401dce4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3401dce8:	eeb4 0a67 	vcmp.f32	s0, s15
3401dcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dcf0:	fe37 0a80 	vselgt.f32	s0, s15, s0
    if (m->gamma > 0.f) u = powf(u, m->gamma);
3401dcf4:	edd4 0a04 	vldr	s1, [r4, #16]
3401dcf8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
3401dcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dd00:	dd01      	ble.n	3401dd06 <map_window01+0x76>
3401dd02:	f007 f83d 	bl	34024d80 <powf>
    if (u < m->dead_lo) {
3401dd06:	edd4 7a02 	vldr	s15, [r4, #8]
3401dd0a:	eef4 7ac0 	vcmpe.f32	s15, s0
3401dd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dd12:	dd07      	ble.n	3401dd24 <map_window01+0x94>
      u = u * 0.5f;
3401dd14:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
3401dd18:	ee20 0a27 	vmul.f32	s0, s0, s15
3401dd1c:	e7c7      	b.n	3401dcae <map_window01+0x1e>
    if (u < 0.f) u = 0.f; else if (u > 1.f) u = 1.f;
3401dd1e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 3401dd50 <map_window01+0xc0>
3401dd22:	e7e7      	b.n	3401dcf4 <map_window01+0x64>
    } else if (u > 1.f - m->dead_hi) {
3401dd24:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3401dd28:	ed94 7a03 	vldr	s14, [r4, #12]
3401dd2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
3401dd30:	eeb4 7ac0 	vcmpe.f32	s14, s0
3401dd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dd38:	d5b9      	bpl.n	3401dcae <map_window01+0x1e>
      float d = 1.f - u;
3401dd3a:	ee77 6ac0 	vsub.f32	s13, s15, s0
      u = 1.f - 0.5f * d;
3401dd3e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
3401dd42:	eee6 7ac7 	vfms.f32	s15, s13, s14
3401dd46:	eeb0 0a67 	vmov.f32	s0, s15
static inline float clamp01f(float x) { return x < 0.f ? 0.f : (x > 1.f ? 1.f : x); }
3401dd4a:	e7b0      	b.n	3401dcae <map_window01+0x1e>
3401dd4c:	358637bd 	.word	0x358637bd
3401dd50:	00000000 	.word	0x00000000

3401dd54 <comms_task>:
//  }


  // 2) In comms_task(), send on new data and do tiny sleeps
  static void comms_task(void *arg)
  {
3401dd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401dd58:	ed2d 8b0e 	vpush	{d8-d14}
3401dd5c:	f5ad 7d2d 	sub.w	sp, sp, #692	@ 0x2b4
    (void)arg;
    char rx[256];
    TickType_t last = xTaskGetTickCount();
3401dd60:	f7ed f866 	bl	3400ae30 <xTaskGetTickCount>

    // Run ~66 Hz
    const TickType_t period = pdMS_TO_TICKS(15);
    uint32_t last_sent_stamp = 0;
3401dd64:	2600      	movs	r6, #0
static QueueHandle_t motion_get_queue(void) { return s_motion_q; }
3401dd66:	f8df 8304 	ldr.w	r8, [pc, #772]	@ 3401e06c <comms_task+0x318>
          if (tflex_raw < -0.25f) tflex_raw = -0.25f;
          if (tflex_raw >  1.25f) tflex_raw =  1.25f;

          /* EMA + spike drop to kill single-frame jitters */
          static float tflex_prev = 0.f;
          float tflex_sm = tflex_prev + 0.25f * (tflex_raw - tflex_prev);  // EMA
3401dd6a:	4db1      	ldr	r5, [pc, #708]	@ (3401e030 <comms_task+0x2dc>)
    TickType_t last = xTaskGetTickCount();
3401dd6c:	900d      	str	r0, [sp, #52]	@ 0x34
      if (xQueueReceive(motion_get_queue(), &latest, pdMS_TO_TICKS(2)) == pdTRUE) {
3401dd6e:	2202      	movs	r2, #2
3401dd70:	f8d8 0000 	ldr.w	r0, [r8]
3401dd74:	a914      	add	r1, sp, #80	@ 0x50
3401dd76:	f7ec fc73 	bl	3400a660 <xQueueReceive>
3401dd7a:	2801      	cmp	r0, #1
3401dd7c:	4604      	mov	r4, r0
3401dd7e:	f040 813d 	bne.w	3401dffc <comms_task+0x2a8>
        if (latest.t_ms != last_sent_stamp) {
3401dd82:	f8dd 90cc 	ldr.w	r9, [sp, #204]	@ 0xcc
3401dd86:	45b1      	cmp	r9, r6
3401dd88:	f000 8138 	beq.w	3401dffc <comms_task+0x2a8>
          float tflex_raw = latest.flex01[0];
3401dd8c:	eddd 7a1e 	vldr	s15, [sp, #120]	@ 0x78
          if (!isfinite(tflex_raw)) tflex_raw = 0.f;
3401dd90:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 3401e034 <comms_task+0x2e0>
3401dd94:	eef0 6ae7 	vabs.f32	s13, s15
3401dd98:	eef4 6a47 	vcmp.f32	s13, s14
3401dd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dda0:	d86c      	bhi.n	3401de7c <comms_task+0x128>
          if (tflex_raw < -0.25f) tflex_raw = -0.25f;
3401dda2:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
3401dda6:	eef4 7ac7 	vcmpe.f32	s15, s14
3401ddaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ddae:	d468      	bmi.n	3401de82 <comms_task+0x12e>
          if (tflex_raw >  1.25f) tflex_raw =  1.25f;
3401ddb0:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
3401ddb4:	eef4 7a47 	vcmp.f32	s15, s14
3401ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ddbc:	fe77 7a27 	vselgt.f32	s15, s14, s15
          float tflex_sm = tflex_prev + 0.25f * (tflex_raw - tflex_prev);  // EMA
3401ddc0:	ed95 0a00 	vldr	s0, [r5]
3401ddc4:	eeb5 ea00 	vmov.f32	s28, #80	@ 0x3e800000  0.250
3401ddc8:	ee77 7ac0 	vsub.f32	s15, s15, s0
3401ddcc:	eeb0 7a40 	vmov.f32	s14, s0
3401ddd0:	eea7 7a8e 	vfma.f32	s14, s15, s28
          if (fabsf(tflex_sm - tflex_prev) > 0.50f) tflex_sm = tflex_prev; // single-frame spike guard
3401ddd4:	ee77 7a40 	vsub.f32	s15, s14, s0
3401ddd8:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
3401dddc:	eef0 7ae7 	vabs.f32	s15, s15
          float tflex_sm = tflex_prev + 0.25f * (tflex_raw - tflex_prev);  // EMA
3401dde0:	eef4 7ae9 	vcmpe.f32	s15, s19
3401dde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          tflex_prev = tflex_sm;

          /* Map bend through your chosen window (e.g. 0.83..0.93 -> 0..1) */
          float tflex_mapped = map_window01(tflex_sm, &s_thumb_flex_map);
3401dde8:	4893      	ldr	r0, [pc, #588]	@ (3401e038 <comms_task+0x2e4>)
          float tflex_sm = tflex_prev + 0.25f * (tflex_raw - tflex_prev);  // EMA
3401ddea:	fe30 0a07 	vselgt.f32	s0, s0, s14
          tflex_prev = tflex_sm;
3401ddee:	ed85 0a00 	vstr	s0, [r5]
          float tflex_mapped = map_window01(tflex_sm, &s_thumb_flex_map);
3401ddf2:	f7ff ff4d 	bl	3401dc90 <map_window01>
          tflex_mapped = CLAMP01(tflex_mapped);
3401ddf6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
3401ddfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ddfe:	d443      	bmi.n	3401de88 <comms_task+0x134>
3401de00:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3401de04:	eeb4 0a67 	vcmp.f32	s0, s15
3401de08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401de0c:	fe37 8a80 	vselgt.f32	s16, s15, s0

          /* Opposition: use raw (unbounded) from motion_update_from21(), window-map to 0..1 here */
          float opp_win = map_window01(latest.opp01, &s_thumb_opp_map);  // stays 0..1 here
3401de10:	ed9d 0a32 	vldr	s0, [sp, #200]	@ 0xc8
3401de14:	4889      	ldr	r0, [pc, #548]	@ (3401e03c <comms_task+0x2e8>)
3401de16:	f7ff ff3b 	bl	3401dc90 <map_window01>
          opp_win = CLAMP01(opp_win);
3401de1a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
3401de1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401de22:	d434      	bmi.n	3401de8e <comms_task+0x13a>
3401de24:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3401de28:	eeb4 0a67 	vcmp.f32	s0, s15
3401de2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401de30:	fe77 8a80 	vselgt.f32	s17, s15, s0
          opp_win = 1.f - opp_win;
        #endif

          /* Build targets for all 6 axes */
          float targets_mm[6];
          for (int f = 0; f < 5; ++f) {
3401de34:	aa0e      	add	r2, sp, #56	@ 0x38
3401de36:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
            float flex01 = (f == 0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401de3a:	4651      	mov	r1, sl
3401de3c:	eef0 7a48 	vmov.f32	s15, s16
3401de40:	4613      	mov	r3, r2
3401de42:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
3401de46:	2705      	movs	r7, #5
3401de48:	4e7d      	ldr	r6, [pc, #500]	@ (3401e040 <comms_task+0x2ec>)
3401de4a:	487e      	ldr	r0, [pc, #504]	@ (3401e044 <comms_task+0x2f0>)
            float span = HOME_OPEN_MM[f] - HOME_CLOSED_MM[f];
3401de4c:	ed90 7a00 	vldr	s14, [r0]
3401de50:	edd6 6a00 	vldr	s13, [r6]
3401de54:	ee76 6ac7 	vsub.f32	s13, s13, s14
            targets_mm[f] = HOME_CLOSED_MM[f] + flex01 * span;
3401de58:	eea7 7aa6 	vfma.f32	s14, s15, s13
          for (int f = 0; f < 5; ++f) {
3401de5c:	3f01      	subs	r7, #1
            targets_mm[f] = HOME_CLOSED_MM[f] + flex01 * span;
3401de5e:	ed82 7a00 	vstr	s14, [r2]
          for (int f = 0; f < 5; ++f) {
3401de62:	f101 0104 	add.w	r1, r1, #4
3401de66:	d01f      	beq.n	3401dea8 <comms_task+0x154>
            float flex01 = (f == 0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401de68:	edd1 7a0a 	vldr	s15, [r1, #40]	@ 0x28
3401de6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3401de70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401de74:	d50e      	bpl.n	3401de94 <comms_task+0x140>
3401de76:	eddf 7a74 	vldr	s15, [pc, #464]	@ 3401e048 <comms_task+0x2f4>
3401de7a:	e011      	b.n	3401dea0 <comms_task+0x14c>
          if (!isfinite(tflex_raw)) tflex_raw = 0.f;
3401de7c:	eddf 7a72 	vldr	s15, [pc, #456]	@ 3401e048 <comms_task+0x2f4>
3401de80:	e79e      	b.n	3401ddc0 <comms_task+0x6c>
          if (tflex_raw < -0.25f) tflex_raw = -0.25f;
3401de82:	eef0 7a47 	vmov.f32	s15, s14
3401de86:	e79b      	b.n	3401ddc0 <comms_task+0x6c>
          tflex_mapped = CLAMP01(tflex_mapped);
3401de88:	ed9f 8a6f 	vldr	s16, [pc, #444]	@ 3401e048 <comms_task+0x2f4>
3401de8c:	e7c0      	b.n	3401de10 <comms_task+0xbc>
          opp_win = CLAMP01(opp_win);
3401de8e:	eddf 8a6e 	vldr	s17, [pc, #440]	@ 3401e048 <comms_task+0x2f4>
3401de92:	e7cf      	b.n	3401de34 <comms_task+0xe0>
            float flex01 = (f == 0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401de94:	eef4 7a46 	vcmp.f32	s15, s12
3401de98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401de9c:	fe76 7a27 	vselgt.f32	s15, s12, s15
3401dea0:	3604      	adds	r6, #4
3401dea2:	3004      	adds	r0, #4
3401dea4:	3204      	adds	r2, #4
3401dea6:	e7d1      	b.n	3401de4c <comms_task+0xf8>
          //commentedout 0710new
//          // Axis 6 from opposition window
//          // was: targets_mm[5] = lerp(OPP_MIN_MM, OPP_MAX_MM, opp_win);
//          targets_mm[5] = LERP(OPP_MIN_MM, OPP_MAX_MM, opp_win);
          /* Axis 6 (thumb opposition) */
          if (g_thumb_hold_enabled) {
3401dea8:	4a68      	ldr	r2, [pc, #416]	@ (3401e04c <comms_task+0x2f8>)
3401deaa:	6812      	ldr	r2, [r2, #0]
3401deac:	2a00      	cmp	r2, #0
3401deae:	d074      	beq.n	3401df9a <comms_task+0x246>
            /* Force to fixed mm, clamped within mechanical limits */
            targets_mm[5] = clampf_mm(g_thumb_hold_mm, OPP_MIN_MM, OPP_MAX_MM);
3401deb0:	4a67      	ldr	r2, [pc, #412]	@ (3401e050 <comms_task+0x2fc>)
3401deb2:	ed92 9a00 	vldr	s18, [r2]
  { return x < a ? a : (x > b ? b : x); }
3401deb6:	eeb4 9ae9 	vcmpe.f32	s18, s19
3401deba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401debe:	d469      	bmi.n	3401df94 <comms_task+0x240>
3401dec0:	eef3 7a0c 	vmov.f32	s15, #60	@ 0x41e00000  28.0
3401dec4:	eeb4 9a67 	vcmp.f32	s18, s15
3401dec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401decc:	fe37 9a89 	vselgt.f32	s18, s15, s18


          // ---- send targets to robot ----
          {
            char line[224];
            int n = snprintf(line, sizeof(line),
3401ded0:	edd3 7a00 	vldr	s15, [r3]
3401ded4:	ed93 aa01 	vldr	s20, [r3, #4]
3401ded8:	ed93 ba02 	vldr	s22, [r3, #8]
3401dedc:	ed93 ca03 	vldr	s24, [r3, #12]
3401dee0:	ed93 da04 	vldr	s26, [r3, #16]
            targets_mm[5] = clampf_mm(g_thumb_hold_mm, OPP_MIN_MM, OPP_MAX_MM);
3401dee4:	ed83 9a05 	vstr	s18, [r3, #20]
            int n = snprintf(line, sizeof(line),
3401dee8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
3401deec:	eeb7 aaca 	vcvt.f64.f32	d10, s20
3401def0:	eeb7 bacb 	vcvt.f64.f32	d11, s22
3401def4:	eeb7 cacc 	vcvt.f64.f32	d12, s24
3401def8:	eeb7 dacd 	vcvt.f64.f32	d13, s26
3401defc:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
3401df00:	ed8d db08 	vstr	d13, [sp, #32]
3401df04:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
3401df08:	ed8d cb06 	vstr	d12, [sp, #24]
3401df0c:	ed8d bb04 	vstr	d11, [sp, #16]
3401df10:	ed8d ab02 	vstr	d10, [sp, #8]
3401df14:	ed8d 7b00 	vstr	d7, [sp]
3401df18:	21e0      	movs	r1, #224	@ 0xe0
3401df1a:	4a4e      	ldr	r2, [pc, #312]	@ (3401e054 <comms_task+0x300>)
3401df1c:	a834      	add	r0, sp, #208	@ 0xd0
3401df1e:	ec57 6b17 	vmov	r6, r7, d7
3401df22:	f003 fa93 	bl	3402144c <sniprintf>
              "{\"cmd\":\"set_targets\",\"targets_mm\":[%.2f,%.2f,%.2f,%.2f,%.2f,%.2f],"
              "\"speed\":80,\"accel\":60,\"force\":90}\n",
              targets_mm[0], targets_mm[1], targets_mm[2],
              targets_mm[3], targets_mm[4], targets_mm[5]);
            if (n > 0 && n < (int)sizeof(line)) {
3401df26:	3801      	subs	r0, #1
3401df28:	28de      	cmp	r0, #222	@ 0xde
3401df2a:	d80a      	bhi.n	3401df42 <comms_task+0x1ee>
              br_write_line(line);
3401df2c:	a834      	add	r0, sp, #208	@ 0xd0
3401df2e:	f7fe fcc9 	bl	3401c8c4 <br_write_line>
  return br_read_line(out, maxlen, 0);
3401df32:	a86c      	add	r0, sp, #432	@ 0x1b0
3401df34:	f7fe fdd0 	bl	3401cad8 <br_read_line.constprop.0>
              if (br_read_line_nb(rx, sizeof(rx)) > 0) {
3401df38:	2800      	cmp	r0, #0
3401df3a:	dd02      	ble.n	3401df42 <comms_task+0x1ee>
                try_parse_axis_feedback(rx);
3401df3c:	a86c      	add	r0, sp, #432	@ 0x1b0
3401df3e:	f7fe fccf 	bl	3401c8e0 <try_parse_axis_feedback>
          }

          // ---- Detect OPEN/CLOSED pose with hysteresis (use mapped thumb + mapped opp) ----
          int all_open  = 1, all_close = 1;
          for (int f=0; f<5; ++f) {
            float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401df42:	2201      	movs	r2, #1
3401df44:	eef0 7a48 	vmov.f32	s15, s16
            all_open  &= (x < OPEN_ON);
3401df48:	eddf 6a43 	vldr	s13, [pc, #268]	@ 3401e058 <comms_task+0x304>
            all_close &= (x > CLOSED_ON);
3401df4c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 3401e05c <comms_task+0x308>
            float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401df50:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
3401df54:	2105      	movs	r1, #5
3401df56:	ab14      	add	r3, sp, #80	@ 0x50
            all_open  &= (x < OPEN_ON);
3401df58:	eef4 7ae6 	vcmpe.f32	s15, s13
3401df5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            all_close &= (x > CLOSED_ON);
3401df60:	eef4 7ac7 	vcmpe.f32	s15, s14
            all_open  &= (x < OPEN_ON);
3401df64:	f004 0401 	and.w	r4, r4, #1
3401df68:	bf58      	it	pl
3401df6a:	2400      	movpl	r4, #0
            all_close &= (x > CLOSED_ON);
3401df6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401df70:	f002 0201 	and.w	r2, r2, #1
3401df74:	bfd8      	it	le
3401df76:	2200      	movle	r2, #0
          for (int f=0; f<5; ++f) {
3401df78:	3901      	subs	r1, #1
3401df7a:	f103 0304 	add.w	r3, r3, #4
3401df7e:	d01a      	beq.n	3401dfb6 <comms_task+0x262>
            float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401df80:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
3401df84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3401df88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401df8c:	d50c      	bpl.n	3401dfa8 <comms_task+0x254>
3401df8e:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 3401e048 <comms_task+0x2f4>
3401df92:	e7e1      	b.n	3401df58 <comms_task+0x204>
  { return x < a ? a : (x > b ? b : x); }
3401df94:	eeb6 9a00 	vmov.f32	s18, #96	@ 0x3f000000  0.5
3401df98:	e79a      	b.n	3401ded0 <comms_task+0x17c>
            targets_mm[5] = LERP(OPP_MIN_MM, OPP_MAX_MM, opp_win);
3401df9a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 3401e060 <comms_task+0x30c>
3401df9e:	eeb0 9a69 	vmov.f32	s18, s19
3401dfa2:	eea8 9aa7 	vfma.f32	s18, s17, s15
3401dfa6:	e793      	b.n	3401ded0 <comms_task+0x17c>
            float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401dfa8:	eef4 7a46 	vcmp.f32	s15, s12
3401dfac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dfb0:	fe76 7a27 	vselgt.f32	s15, s12, s15
3401dfb4:	e7d0      	b.n	3401df58 <comms_task+0x204>
          }
          all_open  &= (opp_win < OPEN_ON);
          all_close &= (opp_win > CLOSED_ON);

          PoseState new_pose = s_pose;
3401dfb6:	f8df b0b8 	ldr.w	fp, [pc, #184]	@ 3401e070 <comms_task+0x31c>
3401dfba:	f89b 3000 	ldrb.w	r3, [fp]
          switch (s_pose) {
3401dfbe:	2b01      	cmp	r3, #1
3401dfc0:	d058      	beq.n	3401e074 <comms_task+0x320>
3401dfc2:	2b02      	cmp	r3, #2
3401dfc4:	f000 80b9 	beq.w	3401e13a <comms_task+0x3e6>
          all_open  &= (opp_win < OPEN_ON);
3401dfc8:	eef4 8ae6 	vcmpe.f32	s17, s13
3401dfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dfd0:	f004 0401 	and.w	r4, r4, #1
3401dfd4:	bf58      	it	pl
3401dfd6:	2400      	movpl	r4, #0
                if (x < CLOSED_OFF) { new_pose = POSE_OTHER; break; }
              }
              if (opp_win < CLOSED_OFF) new_pose = POSE_OTHER;
              break;
            default:
              if (all_open)       new_pose = POSE_OPEN;
3401dfd8:	2c00      	cmp	r4, #0
3401dfda:	f040 80b4 	bne.w	3401e146 <comms_task+0x3f2>
          all_close &= (opp_win > CLOSED_ON);
3401dfde:	eef4 8ac7 	vcmpe.f32	s17, s14
3401dfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dfe6:	f002 0201 	and.w	r2, r2, #1
3401dfea:	bfd8      	it	le
3401dfec:	2200      	movle	r2, #0
              else if (all_close) new_pose = POSE_CLOSED;
3401dfee:	2a00      	cmp	r2, #0
3401dff0:	f040 80c9 	bne.w	3401e186 <comms_task+0x432>
              else                new_pose = POSE_OTHER;
              break;
          }

          if (new_pose != s_pose) {
3401dff4:	2b00      	cmp	r3, #0
3401dff6:	f040 809e 	bne.w	3401e136 <comms_task+0x3e2>
          last_sent_stamp = latest.t_ms;
3401dffa:	464e      	mov	r6, r9
        }
      }

      // Lightweight periodic "fb" ping without blocking
      static uint32_t ctr=0;
      if ((++ctr % 20) == 0) {
3401dffc:	4a19      	ldr	r2, [pc, #100]	@ (3401e064 <comms_task+0x310>)
3401dffe:	6813      	ldr	r3, [r2, #0]
3401e000:	3301      	adds	r3, #1
3401e002:	6013      	str	r3, [r2, #0]
3401e004:	2214      	movs	r2, #20
3401e006:	fbb3 f1f2 	udiv	r1, r3, r2
3401e00a:	fb02 3311 	mls	r3, r2, r1, r3
3401e00e:	b953      	cbnz	r3, 3401e026 <comms_task+0x2d2>
        br_write_line("{\"cmd\":\"fb\"}\n");
3401e010:	4815      	ldr	r0, [pc, #84]	@ (3401e068 <comms_task+0x314>)
3401e012:	f7fe fc57 	bl	3401c8c4 <br_write_line>
  return br_read_line(out, maxlen, 0);
3401e016:	a86c      	add	r0, sp, #432	@ 0x1b0
3401e018:	f7fe fd5e 	bl	3401cad8 <br_read_line.constprop.0>
        if (br_read_line_nb(rx, sizeof(rx)) > 0) {
3401e01c:	2800      	cmp	r0, #0
3401e01e:	dd02      	ble.n	3401e026 <comms_task+0x2d2>
          try_parse_axis_feedback(rx);
3401e020:	a86c      	add	r0, sp, #432	@ 0x1b0
3401e022:	f7fe fc5d 	bl	3401c8e0 <try_parse_axis_feedback>
          // have_fb = g_have_fb; memcpy(fbP, g_fbP, sizeof(fbP));
        }
      }

      vTaskDelayUntil(&last, period);
3401e026:	210f      	movs	r1, #15
3401e028:	a80d      	add	r0, sp, #52	@ 0x34
3401e02a:	f7ed f863 	bl	3400b0f4 <xTaskDelayUntil>
    for (;;) {
3401e02e:	e69e      	b.n	3401dd6e <comms_task+0x1a>
3401e030:	340daffc 	.word	0x340daffc
3401e034:	7f7fffff 	.word	0x7f7fffff
3401e038:	340d069c 	.word	0x340d069c
3401e03c:	340d0688 	.word	0x340d0688
3401e040:	340c979c 	.word	0x340c979c
3401e044:	340c9784 	.word	0x340c9784
3401e048:	00000000 	.word	0x00000000
3401e04c:	340d0684 	.word	0x340d0684
3401e050:	340d0680 	.word	0x340d0680
3401e054:	3402fb65 	.word	0x3402fb65
3401e058:	3e3851ec 	.word	0x3e3851ec
3401e05c:	3f51eb85 	.word	0x3f51eb85
3401e060:	41dc0000 	.word	0x41dc0000
3401e064:	340daff0 	.word	0x340daff0
3401e068:	3402fc15 	.word	0x3402fc15
3401e06c:	340e34f4 	.word	0x340e34f4
3401e070:	340daff8 	.word	0x340daff8
          switch (s_pose) {
3401e074:	2200      	movs	r2, #0
                float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401e076:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
                if (x > OPEN_OFF) { new_pose = POSE_OTHER; break; }
3401e07a:	eeb4 8ace 	vcmpe.f32	s16, s28
3401e07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e082:	dc13      	bgt.n	3401e0ac <comms_task+0x358>
3401e084:	f1c2 0105 	rsb	r1, r2, #5
              for (int f=0; f<5; ++f) {
3401e088:	3901      	subs	r1, #1
3401e08a:	f102 0201 	add.w	r2, r2, #1
3401e08e:	f10a 0a04 	add.w	sl, sl, #4
3401e092:	d00c      	beq.n	3401e0ae <comms_task+0x35a>
                float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401e094:	ed9a 8a0a 	vldr	s16, [sl, #40]	@ 0x28
3401e098:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
3401e09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e0a0:	d4f2      	bmi.n	3401e088 <comms_task+0x334>
3401e0a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
3401e0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e0aa:	dde6      	ble.n	3401e07a <comms_task+0x326>
                if (x > OPEN_OFF) { new_pose = POSE_OTHER; break; }
3401e0ac:	2300      	movs	r3, #0
              if (opp_win > OPEN_OFF) new_pose = POSE_OTHER;
3401e0ae:	eef4 8ace 	vcmpe.f32	s17, s28
3401e0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e0b6:	dc3e      	bgt.n	3401e136 <comms_task+0x3e2>
          if (new_pose != s_pose) {
3401e0b8:	2b01      	cmp	r3, #1
3401e0ba:	d145      	bne.n	3401e148 <comms_task+0x3f4>
            uint32_t now = HAL_GetTick();
3401e0bc:	f000 ff0e 	bl	3401eedc <HAL_GetTick>
            if (now - last_pose_print_ms > 2000) {
3401e0c0:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 3401e1a4 <comms_task+0x450>
            uint32_t now = HAL_GetTick();
3401e0c4:	4604      	mov	r4, r0
            if (now - last_pose_print_ms > 2000) {
3401e0c6:	f8da 3000 	ldr.w	r3, [sl]
3401e0ca:	1ac3      	subs	r3, r0, r3
3401e0cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
3401e0d0:	d993      	bls.n	3401dffa <comms_task+0x2a6>
              const char *name = (s_pose == POSE_OPEN) ? "OPEN" : "CLOSED";
3401e0d2:	f89b 3000 	ldrb.w	r3, [fp]
              printf("[POSE %s] targets_mm = "
3401e0d6:	4830      	ldr	r0, [pc, #192]	@ (3401e198 <comms_task+0x444>)
              const char *name = (s_pose == POSE_OPEN) ? "OPEN" : "CLOSED";
3401e0d8:	2b01      	cmp	r3, #1
              printf("[POSE %s] targets_mm = "
3401e0da:	4930      	ldr	r1, [pc, #192]	@ (3401e19c <comms_task+0x448>)
3401e0dc:	ed8d 9b08 	vstr	d9, [sp, #32]
3401e0e0:	bf18      	it	ne
3401e0e2:	4601      	movne	r1, r0
3401e0e4:	ed8d db06 	vstr	d13, [sp, #24]
3401e0e8:	ed8d cb04 	vstr	d12, [sp, #16]
3401e0ec:	ed8d bb02 	vstr	d11, [sp, #8]
3401e0f0:	ed8d ab00 	vstr	d10, [sp]
3401e0f4:	4632      	mov	r2, r6
3401e0f6:	463b      	mov	r3, r7
3401e0f8:	4829      	ldr	r0, [pc, #164]	@ (3401e1a0 <comms_task+0x44c>)
3401e0fa:	f003 f937 	bl	3402136c <iprintf>
              last_pose_print_ms = now;
3401e0fe:	f8ca 4000 	str.w	r4, [sl]
3401e102:	e77a      	b.n	3401dffa <comms_task+0x2a6>
                float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401e104:	eeb4 8ac7 	vcmpe.f32	s16, s14
3401e108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e10c:	dc06      	bgt.n	3401e11c <comms_task+0x3c8>
                if (x < CLOSED_OFF) { new_pose = POSE_OTHER; break; }
3401e10e:	eeb4 8ae7 	vcmpe.f32	s16, s15
3401e112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e116:	d40e      	bmi.n	3401e136 <comms_task+0x3e2>
                float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401e118:	f1c3 0205 	rsb	r2, r3, #5
              for (int f=0; f<5; ++f) {
3401e11c:	3a01      	subs	r2, #1
3401e11e:	f103 0301 	add.w	r3, r3, #1
3401e122:	f10a 0a04 	add.w	sl, sl, #4
3401e126:	d030      	beq.n	3401e18a <comms_task+0x436>
                float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401e128:	ed9a 8a0a 	vldr	s16, [sl, #40]	@ 0x28
3401e12c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
3401e130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e134:	d5e6      	bpl.n	3401e104 <comms_task+0x3b0>
              if (opp_win > OPEN_OFF) new_pose = POSE_OTHER;
3401e136:	2300      	movs	r3, #0
3401e138:	e006      	b.n	3401e148 <comms_task+0x3f4>
          switch (s_pose) {
3401e13a:	2300      	movs	r3, #0
                if (x < CLOSED_OFF) { new_pose = POSE_OTHER; break; }
3401e13c:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
                float x = (f==0) ? tflex_mapped : CLAMP01(latest.flex01[f]);
3401e140:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
3401e144:	e7e3      	b.n	3401e10e <comms_task+0x3ba>
              if (all_open)       new_pose = POSE_OPEN;
3401e146:	2301      	movs	r3, #1
            if (s_pose == POSE_OPEN || s_pose == POSE_CLOSED) {
3401e148:	1e5a      	subs	r2, r3, #1
3401e14a:	2a01      	cmp	r2, #1
            s_pose = new_pose;
3401e14c:	f88b 3000 	strb.w	r3, [fp]
            if (s_pose == POSE_OPEN || s_pose == POSE_CLOSED) {
3401e150:	f63f af53 	bhi.w	3401dffa <comms_task+0x2a6>
              printf("[POSE %s] targets_mm = "
3401e154:	4810      	ldr	r0, [pc, #64]	@ (3401e198 <comms_task+0x444>)
              const char *name = (s_pose == POSE_OPEN) ? "OPEN" : "CLOSED";
3401e156:	2b01      	cmp	r3, #1
              printf("[POSE %s] targets_mm = "
3401e158:	4910      	ldr	r1, [pc, #64]	@ (3401e19c <comms_task+0x448>)
3401e15a:	463b      	mov	r3, r7
3401e15c:	bf18      	it	ne
3401e15e:	4601      	movne	r1, r0
3401e160:	4632      	mov	r2, r6
3401e162:	ed8d 9b08 	vstr	d9, [sp, #32]
3401e166:	ed8d db06 	vstr	d13, [sp, #24]
3401e16a:	ed8d cb04 	vstr	d12, [sp, #16]
3401e16e:	ed8d bb02 	vstr	d11, [sp, #8]
3401e172:	ed8d ab00 	vstr	d10, [sp]
3401e176:	480a      	ldr	r0, [pc, #40]	@ (3401e1a0 <comms_task+0x44c>)
3401e178:	f003 f8f8 	bl	3402136c <iprintf>
              last_pose_print_ms = HAL_GetTick();
3401e17c:	f000 feae 	bl	3401eedc <HAL_GetTick>
3401e180:	4b08      	ldr	r3, [pc, #32]	@ (3401e1a4 <comms_task+0x450>)
3401e182:	6018      	str	r0, [r3, #0]
3401e184:	e739      	b.n	3401dffa <comms_task+0x2a6>
              else if (all_close) new_pose = POSE_CLOSED;
3401e186:	2302      	movs	r3, #2
3401e188:	e7de      	b.n	3401e148 <comms_task+0x3f4>
              if (opp_win < CLOSED_OFF) new_pose = POSE_OTHER;
3401e18a:	eef4 8ae7 	vcmpe.f32	s17, s15
3401e18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e192:	d4d0      	bmi.n	3401e136 <comms_task+0x3e2>
3401e194:	e792      	b.n	3401e0bc <comms_task+0x368>
3401e196:	bf00      	nop
3401e198:	3402fb5e 	.word	0x3402fb5e
3401e19c:	3402fb59 	.word	0x3402fb59
3401e1a0:	3402fbca 	.word	0x3402fbca
3401e1a4:	340daff4 	.word	0x340daff4

3401e1a8 <display_hand>:
{
3401e1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401e1ac:	ed2d 8b04 	vpush	{d8-d9}
  if (info->is_pd_displayed) {
3401e1b0:	6983      	ldr	r3, [r0, #24]
{
3401e1b2:	4605      	mov	r5, r0
3401e1b4:	460c      	mov	r4, r1
3401e1b6:	b094      	sub	sp, #80	@ 0x50
  if (info->is_pd_displayed) {
3401e1b8:	2b00      	cmp	r3, #0
3401e1ba:	f000 80fd 	beq.w	3401e3b8 <display_hand+0x210>
  xc = (int)hand->x_center;
3401e1be:	edd1 7a02 	vldr	s15, [r1, #8]
3401e1c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3401e1c6:	ee17 0a90 	vmov	r0, s15
  yc = (int)hand->y_center;
3401e1ca:	edd1 7a03 	vldr	s15, [r1, #12]
3401e1ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3401e1d2:	ee17 1a90 	vmov	r1, s15
  h = (int)hand->height;
3401e1d6:	edd4 7a05 	vldr	s15, [r4, #20]
3401e1da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3401e1de:	ee17 3a90 	vmov	r3, s15
  w = (int)hand->width;
3401e1e2:	edd4 7a04 	vldr	s15, [r4, #16]
3401e1e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3401e1ea:	ee17 2a90 	vmov	r2, s15
  x0 = xc - (w + 1) / 2;
3401e1ee:	3201      	adds	r2, #1
3401e1f0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
  y0 = yc - (h + 1) / 2;
3401e1f4:	3301      	adds	r3, #1
  x0 = xc - (w + 1) / 2;
3401e1f6:	1052      	asrs	r2, r2, #1
  y0 = yc - (h + 1) / 2;
3401e1f8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  x0 = xc - (w + 1) / 2;
3401e1fc:	4252      	negs	r2, r2
  y0 = yc - (h + 1) / 2;
3401e1fe:	105b      	asrs	r3, r3, #1
  x0 = xc - (w + 1) / 2;
3401e200:	1886      	adds	r6, r0, r2
  y0 = yc - (h + 1) / 2;
3401e202:	425b      	negs	r3, r3
  x1 = xc + (w + 1) / 2;
3401e204:	1a80      	subs	r0, r0, r2
  x0 = xc - (w + 1) / 2;
3401e206:	9602      	str	r6, [sp, #8]
  y0 = yc - (h + 1) / 2;
3401e208:	18ce      	adds	r6, r1, r3
  y1 = yc + (h + 1) / 2;
3401e20a:	1ac9      	subs	r1, r1, r3
  x1 = xc + (w + 1) / 2;
3401e20c:	9004      	str	r0, [sp, #16]
  y1 = yc + (h + 1) / 2;
3401e20e:	910c      	str	r1, [sp, #48]	@ 0x30
  clamp_point(&x0, &y0);
3401e210:	a802      	add	r0, sp, #8
3401e212:	a903      	add	r1, sp, #12
  y0 = yc - (h + 1) / 2;
3401e214:	9603      	str	r6, [sp, #12]
  clamp_point(&x0, &y0);
3401e216:	f7fe fb2f 	bl	3401c878 <clamp_point>
  clamp_point(&x1, &y1);
3401e21a:	a90c      	add	r1, sp, #48	@ 0x30
3401e21c:	a804      	add	r0, sp, #16
3401e21e:	f7fe fb2b 	bl	3401c878 <clamp_point>
  UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, UTIL_LCD_COLOR_GREEN);
3401e222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
3401e226:	f04f 23ff 	mov.w	r3, #4278255360	@ 0xff00ff00
3401e22a:	9a04      	ldr	r2, [sp, #16]
3401e22c:	9300      	str	r3, [sp, #0]
3401e22e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3401e230:	1a12      	subs	r2, r2, r0
3401e232:	1a5b      	subs	r3, r3, r1
3401e234:	f7fe f956 	bl	3401c4e4 <UTIL_LCD_DrawRect>
  for (i = 0; i < 7; i++) {
3401e238:	2600      	movs	r6, #0
    uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
3401e23a:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 3401e3dc <display_hand+0x234>
3401e23e:	4f66      	ldr	r7, [pc, #408]	@ (3401e3d8 <display_hand+0x230>)
    x0 = (int)hand->pKps[i].x;
3401e240:	69a2      	ldr	r2, [r4, #24]
    uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
3401e242:	f036 0302 	bics.w	r3, r6, #2
    x0 = (int)hand->pKps[i].x;
3401e246:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
3401e24a:	edd2 7a00 	vldr	s15, [r2]
3401e24e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3401e252:	edcd 7a02 	vstr	s15, [sp, #8]
    y0 = (int)hand->pKps[i].y;
3401e256:	edd2 7a01 	vldr	s15, [r2, #4]
    uint32_t color = (i != 0 && i != 2) ? UTIL_LCD_COLOR_RED : UTIL_LCD_COLOR_BLUE;
3401e25a:	bf0c      	ite	eq
3401e25c:	46c1      	moveq	r9, r8
3401e25e:	46b9      	movne	r9, r7
    y0 = (int)hand->pKps[i].y;
3401e260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    clamp_point(&x0, &y0);
3401e264:	a903      	add	r1, sp, #12
3401e266:	a802      	add	r0, sp, #8
    y0 = (int)hand->pKps[i].y;
3401e268:	edcd 7a03 	vstr	s15, [sp, #12]
  for (i = 0; i < 7; i++) {
3401e26c:	3601      	adds	r6, #1
    clamp_point(&x0, &y0);
3401e26e:	f7fe fb03 	bl	3401c878 <clamp_point>
    UTIL_LCD_FillCircle(x0, y0, 2, color);
3401e272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
3401e276:	464b      	mov	r3, r9
3401e278:	2202      	movs	r2, #2
3401e27a:	f7fe fa49 	bl	3401c710 <UTIL_LCD_FillCircle>
  for (i = 0; i < 7; i++) {
3401e27e:	2e07      	cmp	r6, #7
3401e280:	d1de      	bne.n	3401e240 <display_hand+0x98>
    {-roi->w / 2, -roi->h / 2},
3401e282:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
3401e286:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
3401e28a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
  pt[0] = cos(rotation) * x - sin(rotation) * y;
3401e28e:	ed94 9a0b 	vldr	s18, [r4, #44]	@ 0x2c
    {-roi->w / 2, -roi->h / 2},
3401e292:	ee67 7ae6 	vnmul.f32	s15, s15, s13
3401e296:	ee27 7a66 	vnmul.f32	s14, s14, s13
  pt[0] = cos(rotation) * x - sin(rotation) * y;
3401e29a:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
3401e29e:	eeb1 6a67 	vneg.f32	s12, s15
3401e2a2:	eef1 6a47 	vneg.f32	s13, s14
3401e2a6:	eeb0 0b49 	vmov.f64	d0, d9
  memcpy(corners, corners_init, sizeof(corners_init));
3401e2aa:	edcd 7a04 	vstr	s15, [sp, #16]
3401e2ae:	ed8d 7a05 	vstr	s14, [sp, #20]
3401e2b2:	ed8d 6a06 	vstr	s12, [sp, #24]
3401e2b6:	ed8d 7a07 	vstr	s14, [sp, #28]
3401e2ba:	ed8d 6a08 	vstr	s12, [sp, #32]
3401e2be:	edcd 6a09 	vstr	s13, [sp, #36]	@ 0x24
3401e2c2:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
3401e2c6:	edcd 6a0b 	vstr	s13, [sp, #44]	@ 0x2c
  pt[0] = cos(rotation) * x - sin(rotation) * y;
3401e2ca:	f006 f87d 	bl	340243c8 <cos>
3401e2ce:	eeb0 8b40 	vmov.f64	d8, d0
3401e2d2:	eeb0 0b49 	vmov.f64	d0, d9
3401e2d6:	f006 f8c3 	bl	34024460 <sin>
  for (i = 0; i < 4; i++)
3401e2da:	f04f 0e04 	mov.w	lr, #4
3401e2de:	f10d 0910 	add.w	r9, sp, #16
  pt[0] = cos(rotation) * x - sin(rotation) * y;
3401e2e2:	464b      	mov	r3, r9
  for (i = 0; i < 4; i++)
3401e2e4:	f04e e001 	dls	lr, lr
  pt[0] = cos(rotation) * x - sin(rotation) * y;
3401e2e8:	ed93 7a01 	vldr	s14, [r3, #4]
3401e2ec:	ed93 5a00 	vldr	s10, [r3]
3401e2f0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401e2f4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
3401e2f8:	ee27 6b40 	vnmul.f64	d6, d7, d0
  pt[1] = sin(rotation) * x + cos(rotation) * y;
3401e2fc:	ee28 7b07 	vmul.f64	d7, d8, d7
  pt[0] = cos(rotation) * x - sin(rotation) * y;
3401e300:	eea8 6b05 	vfma.f64	d6, d8, d5
  pt[1] = sin(rotation) * x + cos(rotation) * y;
3401e304:	eea5 7b00 	vfma.f64	d7, d5, d0
  pt[0] = cos(rotation) * x - sin(rotation) * y;
3401e308:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  pt[1] = sin(rotation) * x + cos(rotation) * y;
3401e30c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  pt[0] = cos(rotation) * x - sin(rotation) * y;
3401e310:	ed83 6a00 	vstr	s12, [r3]
  pt[1] = sin(rotation) * x + cos(rotation) * y;
3401e314:	ed83 7a01 	vstr	s14, [r3, #4]
  for (i = 0; i < 4; i++)
3401e318:	3308      	adds	r3, #8
3401e31a:	f00f c81b 	le	lr, 3401e2e8 <display_hand+0x140>
  for (i = 0; i < 4; i++) {
3401e31e:	f04f 0e04 	mov.w	lr, #4
    corners[i][0] += roi->cx;
3401e322:	edd4 6a07 	vldr	s13, [r4, #28]
    corners[i][1] += roi->cy;
3401e326:	ed94 7a08 	vldr	s14, [r4, #32]
  for (i = 0; i < 4; i++) {
3401e32a:	f04e e001 	dls	lr, lr
    corners[i][1] += roi->cy;
3401e32e:	ab04      	add	r3, sp, #16
    corners[i][0] += roi->cx;
3401e330:	edd3 7a00 	vldr	s15, [r3]
3401e334:	ee77 7aa6 	vadd.f32	s15, s15, s13
3401e338:	edc3 7a00 	vstr	s15, [r3]
    corners[i][1] += roi->cy;
3401e33c:	edd3 7a01 	vldr	s15, [r3, #4]
3401e340:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (i = 0; i < 4; i++) {
3401e344:	3308      	adds	r3, #8
    corners[i][1] += roi->cy;
3401e346:	ed43 7a01 	vstr	s15, [r3, #-4]
  for (i = 0; i < 4; i++) {
3401e34a:	f00f c80f 	le	lr, 3401e330 <display_hand+0x188>
  int is_clamp = 0;
3401e34e:	2600      	movs	r6, #0
3401e350:	af0c      	add	r7, sp, #48	@ 0x30
  for (i = 0; i < 4; i++) {
3401e352:	46b8      	mov	r8, r7
  for (i = 0; i < 4; i++) {
3401e354:	46b2      	mov	sl, r6
    corners_out[i][0] = (int)corners_in[i][0];
3401e356:	edd9 7a00 	vldr	s15, [r9]
3401e35a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3401e35e:	edc8 7a00 	vstr	s15, [r8]
    corners_out[i][1] = (int)corners_in[i][1];
3401e362:	edd9 7a01 	vldr	s15, [r9, #4]
3401e366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3401e36a:	4641      	mov	r1, r8
3401e36c:	ee17 3a90 	vmov	r3, s15
    is_clamp |= clamp_point(&corners_out[i][0], &corners_out[i][1]);
3401e370:	4640      	mov	r0, r8
    corners_out[i][1] = (int)corners_in[i][1];
3401e372:	f841 3f04 	str.w	r3, [r1, #4]!
    is_clamp |= clamp_point(&corners_out[i][0], &corners_out[i][1]);
3401e376:	f7fe fa7f 	bl	3401c878 <clamp_point>
  for (i = 0; i < 4; i++) {
3401e37a:	f10a 0a01 	add.w	sl, sl, #1
3401e37e:	f1ba 0f04 	cmp.w	sl, #4
    is_clamp |= clamp_point(&corners_out[i][0], &corners_out[i][1]);
3401e382:	ea46 0600 	orr.w	r6, r6, r0
  for (i = 0; i < 4; i++) {
3401e386:	f109 0908 	add.w	r9, r9, #8
3401e38a:	f108 0808 	add.w	r8, r8, #8
3401e38e:	d1e2      	bne.n	3401e356 <display_hand+0x1ae>
  if (is_clamp)
3401e390:	b996      	cbnz	r6, 3401e3b8 <display_hand+0x210>
    UTIL_LCD_DrawLine(corners[i][0], corners[i][1], corners[(i + 1) % 4][0], corners[(i + 1) % 4][1],
3401e392:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 3401e3d8 <display_hand+0x230>
3401e396:	3601      	adds	r6, #1
3401e398:	ab14      	add	r3, sp, #80	@ 0x50
3401e39a:	f006 0203 	and.w	r2, r6, #3
3401e39e:	f8cd 8000 	str.w	r8, [sp]
3401e3a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
3401e3a6:	6879      	ldr	r1, [r7, #4]
3401e3a8:	e952 2308 	ldrd	r2, r3, [r2, #-32]
3401e3ac:	f857 0b08 	ldr.w	r0, [r7], #8
3401e3b0:	f7fe f83a 	bl	3401c428 <UTIL_LCD_DrawLine>
  for (i = 0; i < 4; i++)
3401e3b4:	2e04      	cmp	r6, #4
3401e3b6:	d1ee      	bne.n	3401e396 <display_hand+0x1ee>
  if (info->is_ld_displayed)
3401e3b8:	696b      	ldr	r3, [r5, #20]
3401e3ba:	b13b      	cbz	r3, 3401e3cc <display_hand+0x224>
    display_ld_hand(hand);
3401e3bc:	4620      	mov	r0, r4
}
3401e3be:	b014      	add	sp, #80	@ 0x50
3401e3c0:	ecbd 8b04 	vpop	{d8-d9}
3401e3c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    display_ld_hand(hand);
3401e3c8:	f7fe bb90 	b.w	3401caec <display_ld_hand>
}
3401e3cc:	b014      	add	sp, #80	@ 0x50
3401e3ce:	ecbd 8b04 	vpop	{d8-d9}
3401e3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401e3d6:	bf00      	nop
3401e3d8:	ffff0000 	.word	0xffff0000
3401e3dc:	ff0000ff 	.word	0xff0000ff

3401e3e0 <dp_thread_fct>:
{
3401e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ret = BSP_PB_Init(id, BUTTON_MODE_GPIO);
3401e3e4:	2100      	movs	r1, #0
{
3401e3e6:	ed2d 8b04 	vpush	{d8-d9}
  ret = BSP_PB_Init(id, BUTTON_MODE_GPIO);
3401e3ea:	4608      	mov	r0, r1
{
3401e3ec:	b0cd      	sub	sp, #308	@ 0x134
  ret = BSP_PB_Init(id, BUTTON_MODE_GPIO);
3401e3ee:	f7ef fa39 	bl	3400d864 <BSP_PB_Init>
  assert(ret == BSP_ERROR_NONE);
3401e3f2:	4601      	mov	r1, r0
3401e3f4:	b108      	cbz	r0, 3401e3fa <dp_thread_fct+0x1a>
3401e3f6:	f7fe fb61 	bl	3401cabc <button_init.part.0>
  b->on_click_handler = on_click_handler;
3401e3fa:	4b97      	ldr	r3, [pc, #604]	@ (3401e658 <dp_thread_fct+0x278>)
  b->cb_args = cb_args;
3401e3fc:	4f97      	ldr	r7, [pc, #604]	@ (3401e65c <dp_thread_fct+0x27c>)
  b->prev_state = 0;
3401e3fe:	e9cd 0304 	strd	r0, r3, [sp, #16]
  b->button_id = id;
3401e402:	f88d 000c 	strb.w	r0, [sp, #12]
  ret = BSP_PB_Init(id, BUTTON_MODE_GPIO);
3401e406:	2001      	movs	r0, #1
  b->cb_args = cb_args;
3401e408:	9706      	str	r7, [sp, #24]
  ret = BSP_PB_Init(id, BUTTON_MODE_GPIO);
3401e40a:	f7ef fa2b 	bl	3400d864 <BSP_PB_Init>
  assert(ret == BSP_ERROR_NONE);
3401e40e:	2800      	cmp	r0, #0
3401e410:	d1f1      	bne.n	3401e3f6 <dp_thread_fct+0x16>
  b->button_id = id;
3401e412:	2301      	movs	r3, #1
  uint32_t disp_ms = 0;
3401e414:	4604      	mov	r4, r0
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401e416:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 3401e650 <dp_thread_fct+0x270>
  b->button_id = id;
3401e41a:	f88d 301c 	strb.w	r3, [sp, #28]
  b->on_click_handler = on_click_handler;
3401e41e:	4b90      	ldr	r3, [pc, #576]	@ (3401e660 <dp_thread_fct+0x280>)
  ret = SCRL_SetAddress_NoReload(lcd_fg_buffer[lcd_fg_buffer_rd_idx], SCRL_LAYER_1);
3401e420:	f8df 9284 	ldr.w	r9, [pc, #644]	@ 3401e6a8 <dp_thread_fct+0x2c8>
  b->prev_state = 0;
3401e424:	e9cd 0308 	strd	r0, r3, [sp, #32]
  b->cb_args = cb_args;
3401e428:	970a      	str	r7, [sp, #40]	@ 0x28
    ret = xSemaphoreTake(disp.update, portMAX_DELAY);
3401e42a:	f04f 31ff 	mov.w	r1, #4294967295
3401e42e:	6838      	ldr	r0, [r7, #0]
3401e430:	f7ec f9a6 	bl	3400a780 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401e434:	2801      	cmp	r0, #1
3401e436:	d006      	beq.n	3401e446 <dp_thread_fct+0x66>
3401e438:	f240 61db 	movw	r1, #1755	@ 0x6db
3401e43c:	4b89      	ldr	r3, [pc, #548]	@ (3401e664 <dp_thread_fct+0x284>)
3401e43e:	4a8a      	ldr	r2, [pc, #552]	@ (3401e668 <dp_thread_fct+0x288>)
    assert(ret == pdTRUE);
3401e440:	488a      	ldr	r0, [pc, #552]	@ (3401e66c <dp_thread_fct+0x28c>)
3401e442:	f001 fae1 	bl	3401fa08 <__assert_func>
    button_process(&ld_toggle_button);
3401e446:	a803      	add	r0, sp, #12
3401e448:	f7fe fadc 	bl	3401ca04 <button_process>
    button_process(&hd_toggle_button);
3401e44c:	a807      	add	r0, sp, #28
3401e44e:	f7fe fad9 	bl	3401ca04 <button_process>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401e452:	f04f 31ff 	mov.w	r1, #4294967295
3401e456:	6d78      	ldr	r0, [r7, #84]	@ 0x54
3401e458:	f7ec f992 	bl	3400a780 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401e45c:	2801      	cmp	r0, #1
3401e45e:	d004      	beq.n	3401e46a <dp_thread_fct+0x8a>
3401e460:	f240 61e2 	movw	r1, #1762	@ 0x6e2
3401e464:	4b7f      	ldr	r3, [pc, #508]	@ (3401e664 <dp_thread_fct+0x284>)
3401e466:	4a80      	ldr	r2, [pc, #512]	@ (3401e668 <dp_thread_fct+0x288>)
3401e468:	e7ea      	b.n	3401e440 <dp_thread_fct+0x60>
    info = disp.info;
3401e46a:	f44f 7282 	mov.w	r2, #260	@ 0x104
3401e46e:	4980      	ldr	r1, [pc, #512]	@ (3401e670 <dp_thread_fct+0x290>)
3401e470:	a80b      	add	r0, sp, #44	@ 0x2c
3401e472:	f003 fbfe 	bl	34021c72 <memcpy>
    ret = xSemaphoreGive(disp.lock);
3401e476:	2300      	movs	r3, #0
3401e478:	6d78      	ldr	r0, [r7, #84]	@ 0x54
3401e47a:	461a      	mov	r2, r3
3401e47c:	4619      	mov	r1, r3
3401e47e:	f7eb ffdb 	bl	3400a438 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401e482:	2801      	cmp	r0, #1
    ret = xSemaphoreGive(disp.lock);
3401e484:	4605      	mov	r5, r0
    assert(ret == pdTRUE);
3401e486:	d004      	beq.n	3401e492 <dp_thread_fct+0xb2>
3401e488:	f240 61e5 	movw	r1, #1765	@ 0x6e5
3401e48c:	4b75      	ldr	r3, [pc, #468]	@ (3401e664 <dp_thread_fct+0x284>)
3401e48e:	4a76      	ldr	r2, [pc, #472]	@ (3401e668 <dp_thread_fct+0x288>)
3401e490:	e7d6      	b.n	3401e440 <dp_thread_fct+0x60>
    info.disp_ms = disp_ms;
3401e492:	940f      	str	r4, [sp, #60]	@ 0x3c
    ts = HAL_GetTick();
3401e494:	f000 fd22 	bl	3401eedc <HAL_GetTick>
3401e498:	4682      	mov	sl, r0
  __ASM volatile ("cpsid i" : : : "memory");
3401e49a:	b672      	cpsid	i
  ret = SCRL_SetAddress_NoReload(lcd_fg_buffer[lcd_fg_buffer_rd_idx], SCRL_LAYER_1);
3401e49c:	f8df 820c 	ldr.w	r8, [pc, #524]	@ 3401e6ac <dp_thread_fct+0x2cc>
3401e4a0:	f8d9 3000 	ldr.w	r3, [r9]
3401e4a4:	4873      	ldr	r0, [pc, #460]	@ (3401e674 <dp_thread_fct+0x294>)
3401e4a6:	4629      	mov	r1, r5
3401e4a8:	fb00 8003 	mla	r0, r0, r3, r8
3401e4ac:	f7ee f8fc 	bl	3400c6a8 <SCRL_SetAddress_NoReload>
  assert(ret == HAL_OK);
3401e4b0:	4683      	mov	fp, r0
3401e4b2:	b120      	cbz	r0, 3401e4be <dp_thread_fct+0xde>
3401e4b4:	f240 6191 	movw	r1, #1681	@ 0x691
3401e4b8:	4b6f      	ldr	r3, [pc, #444]	@ (3401e678 <dp_thread_fct+0x298>)
3401e4ba:	4a70      	ldr	r2, [pc, #448]	@ (3401e67c <dp_thread_fct+0x29c>)
3401e4bc:	e7c0      	b.n	3401e440 <dp_thread_fct+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
3401e4be:	b662      	cpsie	i
  cpu_load->history[1] = cpu_load->history[0];
3401e4c0:	4c6f      	ldr	r4, [pc, #444]	@ (3401e680 <dp_thread_fct+0x2a0>)
  UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x00000000); /* Clear previous boxes */
3401e4c2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
3401e4c6:	f44f 7248 	mov.w	r2, #800	@ 0x320
3401e4ca:	4601      	mov	r1, r0
3401e4cc:	9000      	str	r0, [sp, #0]
  cpu_load->history[1] = cpu_load->history[0];
3401e4ce:	f104 0538 	add.w	r5, r4, #56	@ 0x38
3401e4d2:	f104 0620 	add.w	r6, r4, #32
  UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x00000000); /* Clear previous boxes */
3401e4d6:	f7fe f8cd 	bl	3401c674 <UTIL_LCD_FillRect>
  cpu_load->history[1] = cpu_load->history[0];
3401e4da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
3401e4dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
3401e4de:	e896 0003 	ldmia.w	r6, {r0, r1}
3401e4e2:	e885 0003 	stmia.w	r5, {r0, r1}
  cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
3401e4e6:	f000 fd4d 	bl	3401ef84 <TIM4_Get_Value>
3401e4ea:	4605      	mov	r5, r0
3401e4ec:	e9c4 0b08 	strd	r0, fp, [r4, #32]
  cpu_load->history[0].thread = cpu_load->history[0].total - ulTaskGetIdleRunTimeCounter();
3401e4f0:	f7ed f8da 	bl	3400b6a8 <ulTaskGetIdleRunTimeCounter>
3401e4f4:	1a2d      	subs	r5, r5, r0
3401e4f6:	eb63 0303 	sbc.w	r3, r3, r3
3401e4fa:	e9c4 530a 	strd	r5, r3, [r4, #40]	@ 0x28
  cpu_load->history[0].tick = HAL_GetTick();
3401e4fe:	f000 fced 	bl	3401eedc <HAL_GetTick>
  if (cpu_load->history[1].tick - cpu_load->history[2].tick < 1000)
3401e502:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401e504:	6e22      	ldr	r2, [r4, #96]	@ 0x60
  cpu_load->history[0].tick = HAL_GetTick();
3401e506:	6320      	str	r0, [r4, #48]	@ 0x30
  if (cpu_load->history[1].tick - cpu_load->history[2].tick < 1000)
3401e508:	1a9b      	subs	r3, r3, r2
3401e50a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
3401e50e:	d306      	bcc.n	3401e51e <dp_thread_fct+0x13e>
    cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i] = cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i - 1];
3401e510:	2290      	movs	r2, #144	@ 0x90
3401e512:	f104 0138 	add.w	r1, r4, #56	@ 0x38
3401e516:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3401e51a:	f003 f8e1 	bl	340216e0 <memmove>
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401e51e:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
3401e522:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
3401e526:	1a80      	subs	r0, r0, r2
3401e528:	eb61 0103 	sbc.w	r1, r1, r3
3401e52c:	f7e3 fa94 	bl	34001a58 <__aeabi_ul2d>
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401e530:	e9d4 321a 	ldrd	r3, r2, [r4, #104]	@ 0x68
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401e534:	ec41 0b18 	vmov	d8, r0, r1
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401e538:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	@ 0x50
3401e53c:	1ac0      	subs	r0, r0, r3
3401e53e:	eb61 0102 	sbc.w	r1, r1, r2
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401e542:	f7e3 fa89 	bl	34001a58 <__aeabi_ul2d>
3401e546:	ee28 8b09 	vmul.f64	d8, d8, d9
3401e54a:	ec41 0b16 	vmov	d6, r0, r1
3401e54e:	ee88 7b06 	vdiv.f64	d7, d8, d6
3401e552:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  nn_fps = 1000.0 / info->nn_period_ms;
3401e556:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
3401e55a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 3401e684 <dp_thread_fct+0x2a4>
3401e55e:	eec7 8a27 	vdiv.f32	s17, s14, s15
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "Cpu load");
3401e562:	f7fd fd67 	bl	3401c034 <UTIL_LCD_GetFont>
3401e566:	2100      	movs	r1, #0
3401e568:	2202      	movs	r2, #2
3401e56a:	4608      	mov	r0, r1
3401e56c:	4b46      	ldr	r3, [pc, #280]	@ (3401e688 <dp_thread_fct+0x2a8>)
3401e56e:	f001 fa0f 	bl	3401f990 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "   %.1f%%", cpu_load_one_second);
3401e572:	f7fd fd5f 	bl	3401c034 <UTIL_LCD_GetFont>
3401e576:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
3401e57a:	88c1      	ldrh	r1, [r0, #6]
3401e57c:	2202      	movs	r2, #2
3401e57e:	ed8d 7b00 	vstr	d7, [sp]
3401e582:	4b42      	ldr	r3, [pc, #264]	@ (3401e68c <dp_thread_fct+0x2ac>)
3401e584:	2000      	movs	r0, #0
3401e586:	f001 fa03 	bl	3401f990 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Inferences");
3401e58a:	f7fd fd53 	bl	3401c034 <UTIL_LCD_GetFont>
3401e58e:	88c1      	ldrh	r1, [r0, #6]
3401e590:	2202      	movs	r2, #2
3401e592:	4b3f      	ldr	r3, [pc, #252]	@ (3401e690 <dp_thread_fct+0x2b0>)
3401e594:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3401e598:	2000      	movs	r0, #0
3401e59a:	f001 f9f9 	bl	3401f990 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " pd %2ums", info->pd_ms);
3401e59e:	f7fd fd49 	bl	3401c034 <UTIL_LCD_GetFont>
3401e5a2:	2202      	movs	r2, #2
3401e5a4:	88c1      	ldrh	r1, [r0, #6]
3401e5a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3401e5a8:	4091      	lsls	r1, r2
3401e5aa:	2000      	movs	r0, #0
3401e5ac:	9300      	str	r3, [sp, #0]
3401e5ae:	4b39      	ldr	r3, [pc, #228]	@ (3401e694 <dp_thread_fct+0x2b4>)
3401e5b0:	f001 f9ee 	bl	3401f990 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " hl %2ums", info->hl_ms);
3401e5b4:	f7fd fd3e 	bl	3401c034 <UTIL_LCD_GetFont>
3401e5b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
3401e5ba:	88c1      	ldrh	r1, [r0, #6]
3401e5bc:	2202      	movs	r2, #2
3401e5be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
3401e5c2:	2000      	movs	r0, #0
3401e5c4:	9300      	str	r3, [sp, #0]
3401e5c6:	4b34      	ldr	r3, [pc, #208]	@ (3401e698 <dp_thread_fct+0x2b8>)
3401e5c8:	f001 f9e2 	bl	3401f990 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "  %.1f FPS", nn_fps);
3401e5cc:	f7fd fd32 	bl	3401c034 <UTIL_LCD_GetFont>
3401e5d0:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
3401e5d4:	88c1      	ldrh	r1, [r0, #6]
3401e5d6:	4b31      	ldr	r3, [pc, #196]	@ (3401e69c <dp_thread_fct+0x2bc>)
3401e5d8:	ed8d 7b00 	vstr	d7, [sp]
3401e5dc:	2202      	movs	r2, #2
3401e5de:	2000      	movs	r0, #0
3401e5e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
3401e5e4:	f001 f9d4 	bl	3401f990 <UTIL_LCDEx_PrintfAt>
  for (i = 0; i < info->pd_hand_nb; i++) {
3401e5e8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
3401e5ea:	2b00      	cmp	r3, #0
3401e5ec:	dd05      	ble.n	3401e5fa <dp_thread_fct+0x21a>
    if (info->hands[i].is_valid)
3401e5ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
3401e5f0:	b11b      	cbz	r3, 3401e5fa <dp_thread_fct+0x21a>
      display_hand(info, &info->hands[i]);
3401e5f2:	a914      	add	r1, sp, #80	@ 0x50
3401e5f4:	a80b      	add	r0, sp, #44	@ 0x2c
3401e5f6:	f7ff fdd7 	bl	3401e1a8 <display_hand>
    SCB_CleanDCache_by_Addr(lcd_fg_buffer[lcd_fg_buffer_rd_idx], LCD_FG_WIDTH * LCD_FG_HEIGHT* 2);
3401e5fa:	f8d9 3000 	ldr.w	r3, [r9]
3401e5fe:	4a1d      	ldr	r2, [pc, #116]	@ (3401e674 <dp_thread_fct+0x294>)
3401e600:	fb02 8303 	mla	r3, r2, r3, r8
  __ASM volatile ("dsb 0xF":::"memory");
3401e604:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401e608:	f645 5ec0 	movw	lr, #24000	@ 0x5dc0
3401e60c:	f04e e001 	dls	lr, lr
3401e610:	4a23      	ldr	r2, [pc, #140]	@ (3401e6a0 <dp_thread_fct+0x2c0>)
3401e612:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401e616:	3320      	adds	r3, #32
      } while ( op_size > 0 );
3401e618:	f00f c805 	le	lr, 3401e612 <dp_thread_fct+0x232>
3401e61c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401e620:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
3401e624:	b672      	cpsid	i
  ret = SCRL_ReloadLayer(SCRL_LAYER_1);
3401e626:	2001      	movs	r0, #1
3401e628:	f7ee f848 	bl	3400c6bc <SCRL_ReloadLayer>
  assert(ret == HAL_OK);
3401e62c:	b120      	cbz	r0, 3401e638 <dp_thread_fct+0x258>
3401e62e:	f240 619b 	movw	r1, #1691	@ 0x69b
3401e632:	4b11      	ldr	r3, [pc, #68]	@ (3401e678 <dp_thread_fct+0x298>)
3401e634:	4a1b      	ldr	r2, [pc, #108]	@ (3401e6a4 <dp_thread_fct+0x2c4>)
3401e636:	e703      	b.n	3401e440 <dp_thread_fct+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
3401e638:	b662      	cpsie	i
  lcd_fg_buffer_rd_idx = 1 - lcd_fg_buffer_rd_idx;
3401e63a:	f8d9 3000 	ldr.w	r3, [r9]
3401e63e:	f1c3 0301 	rsb	r3, r3, #1
3401e642:	f8c9 3000 	str.w	r3, [r9]
    disp_ms = HAL_GetTick() - ts;
3401e646:	f000 fc49 	bl	3401eedc <HAL_GetTick>
3401e64a:	eba0 040a 	sub.w	r4, r0, sl
    ret = xSemaphoreTake(disp.update, portMAX_DELAY);
3401e64e:	e6ec      	b.n	3401e42a <dp_thread_fct+0x4a>
3401e650:	00000000 	.word	0x00000000
3401e654:	40590000 	.word	0x40590000
3401e658:	3401c9ad 	.word	0x3401c9ad
3401e65c:	340d0710 	.word	0x340d0710
3401e660:	3401c955 	.word	0x3401c955
3401e664:	3402ae28 	.word	0x3402ae28
3401e668:	340c975f 	.word	0x340c975f
3401e66c:	3402f98d 	.word	0x3402f98d
3401e670:	340d07b8 	.word	0x340d07b8
3401e674:	000bb800 	.word	0x000bb800
3401e678:	3402fb11 	.word	0x3402fb11
3401e67c:	340c9708 	.word	0x340c9708
3401e680:	340e33c8 	.word	0x340e33c8
3401e684:	447a0000 	.word	0x447a0000
3401e688:	3402fc23 	.word	0x3402fc23
3401e68c:	3402fc2c 	.word	0x3402fc2c
3401e690:	3402fc36 	.word	0x3402fc36
3401e694:	3402fc41 	.word	0x3402fc41
3401e698:	3402fc4b 	.word	0x3402fc4b
3401e69c:	3402fc55 	.word	0x3402fc55
3401e6a0:	e000ed00 	.word	0xe000ed00
3401e6a4:	340c96f1 	.word	0x340c96f1
3401e6a8:	340e34a8 	.word	0x340e34a8
3401e6ac:	910f1800 	.word	0x910f1800

3401e6b0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
3401e6b0:	b672      	cpsid	i
  while (1) { /* trap here (optional: toggle an LED) */ }
3401e6b2:	e7fe      	b.n	3401e6b2 <Error_Handler+0x2>

3401e6b4 <comms_start>:
/* Replace comms_start() with a static-task version */
static StaticTask_t s_comms_tcb;
static StackType_t  s_comms_stack[2 * configMINIMAL_STACK_SIZE];

void comms_start(void)
{
3401e6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (void)xTaskCreateStatic(
3401e6b6:	4b08      	ldr	r3, [pc, #32]	@ (3401e6d8 <comms_start+0x24>)
3401e6b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401e6bc:	9302      	str	r3, [sp, #8]
3401e6be:	4b07      	ldr	r3, [pc, #28]	@ (3401e6dc <comms_start+0x28>)
3401e6c0:	4907      	ldr	r1, [pc, #28]	@ (3401e6e0 <comms_start+0x2c>)
3401e6c2:	9301      	str	r3, [sp, #4]
3401e6c4:	2301      	movs	r3, #1
3401e6c6:	4807      	ldr	r0, [pc, #28]	@ (3401e6e4 <comms_start+0x30>)
3401e6c8:	9300      	str	r3, [sp, #0]
3401e6ca:	2300      	movs	r3, #0
3401e6cc:	f7ec fa0e 	bl	3400aaec <xTaskCreateStatic>
      NULL,
      tskIDLE_PRIORITY + 1,
      s_comms_stack,
      &s_comms_tcb
  );
}
3401e6d0:	b005      	add	sp, #20
3401e6d2:	f85d fb04 	ldr.w	pc, [sp], #4
3401e6d6:	bf00      	nop
3401e6d8:	340dd000 	.word	0x340dd000
3401e6dc:	340db000 	.word	0x340db000
3401e6e0:	3402fc60 	.word	0x3402fc60
3401e6e4:	3401dd55 	.word	0x3401dd55

3401e6e8 <app_run>:

/******************** END COMMS (inline) **************************/


void app_run()
{
3401e6e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!s_motion_q) {
3401e6ec:	4c93      	ldr	r4, [pc, #588]	@ (3401e93c <app_run+0x254>)
{
3401e6ee:	b093      	sub	sp, #76	@ 0x4c
  if (!s_motion_q) {
3401e6f0:	6823      	ldr	r3, [r4, #0]
3401e6f2:	b93b      	cbnz	r3, 3401e704 <app_run+0x1c>
    s_motion_q = xQueueCreateStatic(1, sizeof(FingerCmd), s_motion_q_buf, &s_motion_q_storage);
3401e6f4:	9300      	str	r3, [sp, #0]
3401e6f6:	2180      	movs	r1, #128	@ 0x80
3401e6f8:	2001      	movs	r0, #1
3401e6fa:	4b91      	ldr	r3, [pc, #580]	@ (3401e940 <app_run+0x258>)
3401e6fc:	4a91      	ldr	r2, [pc, #580]	@ (3401e944 <app_run+0x25c>)
3401e6fe:	f7eb fe3f 	bl	3400a380 <xQueueGenericCreateStatic>
3401e702:	6020      	str	r0, [r4, #0]
  int ret;
  motion_init();   // NEW

  printf("Init application\n");
  /* Enable DWT so DWT_CYCCNT works when debugger not attached */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401e704:	4d90      	ldr	r5, [pc, #576]	@ (3401e948 <app_run+0x260>)
  printf("Init application\n");
3401e706:	4891      	ldr	r0, [pc, #580]	@ (3401e94c <app_run+0x264>)
3401e708:	f002 fe98 	bl	3402143c <puts>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401e70c:	f8d5 30fc 	ldr.w	r3, [r5, #252]	@ 0xfc

  /* screen init */
  memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
3401e710:	4c8f      	ldr	r4, [pc, #572]	@ (3401e950 <app_run+0x268>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401e712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
3401e716:	2100      	movs	r1, #0
3401e718:	4620      	mov	r0, r4
3401e71a:	4a8e      	ldr	r2, [pc, #568]	@ (3401e954 <app_run+0x26c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401e71c:	f8c5 30fc 	str.w	r3, [r5, #252]	@ 0xfc
  memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
3401e720:	f002 fff8 	bl	34021714 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
3401e724:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401e728:	f8df e2ac 	ldr.w	lr, [pc, #684]	@ 3401e9d8 <app_run+0x2f0>
}
3401e72c:	2300      	movs	r3, #0
3401e72e:	f04e e001 	dls	lr, lr
3401e732:	18e2      	adds	r2, r4, r3
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401e734:	f8c5 2270 	str.w	r2, [r5, #624]	@ 0x270
      } while ( op_size > 0 );
3401e738:	3320      	adds	r3, #32
3401e73a:	f00f c007 	le	lr, 3401e732 <app_run+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
3401e73e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401e742:	f3bf 8f6f 	isb	sy
  CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_bg_buffer, sizeof(lcd_bg_buffer)));
  memset(lcd_fg_buffer, 0, sizeof(lcd_fg_buffer));
3401e746:	4d84      	ldr	r5, [pc, #528]	@ (3401e958 <app_run+0x270>)
3401e748:	2100      	movs	r1, #0
3401e74a:	4628      	mov	r0, r5
3401e74c:	4a83      	ldr	r2, [pc, #524]	@ (3401e95c <app_run+0x274>)
3401e74e:	f002 ffe1 	bl	34021714 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
3401e752:	f3bf 8f4f 	dsb	sy
3401e756:	f64b 3e80 	movw	lr, #48000	@ 0xbb80
}
3401e75a:	2300      	movs	r3, #0
3401e75c:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401e760:	4a79      	ldr	r2, [pc, #484]	@ (3401e948 <app_run+0x260>)
3401e762:	18e9      	adds	r1, r5, r3
3401e764:	f8c2 1270 	str.w	r1, [r2, #624]	@ 0x270
      } while ( op_size > 0 );
3401e768:	3320      	adds	r3, #32
3401e76a:	f00f c007 	le	lr, 3401e762 <app_run+0x7a>
  __ASM volatile ("dsb 0xF":::"memory");
3401e76e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401e772:	f3bf 8f6f 	isb	sy
  SCRL_LayerConfig layers_config[2] = {
3401e776:	2003      	movs	r0, #3
3401e778:	f88d 0030 	strb.w	r0, [sp, #48]	@ 0x30
      .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
3401e77c:	4878      	ldr	r0, [pc, #480]	@ (3401e960 <app_run+0x278>)
  SCRL_LayerConfig layers_config[2] = {
3401e77e:	2100      	movs	r1, #0
      .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
3401e780:	6800      	ldr	r0, [r0, #0]
  SCRL_LayerConfig layers_config[2] = {
3401e782:	2601      	movs	r6, #1
      .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
3401e784:	fb03 4400 	mla	r4, r3, r0, r4
  SCRL_LayerConfig layers_config[2] = {
3401e788:	4b76      	ldr	r3, [pc, #472]	@ (3401e964 <app_run+0x27c>)
  SCRL_ScreenConfig screen_config = {
3401e78a:	2702      	movs	r7, #2
  SCRL_LayerConfig layers_config[2] = {
3401e78c:	9311      	str	r3, [sp, #68]	@ 0x44
  SCRL_ScreenConfig screen_config = {
3401e78e:	4b76      	ldr	r3, [pc, #472]	@ (3401e968 <app_run+0x280>)
  SCRL_LayerConfig layers_config[2] = {
3401e790:	4a76      	ldr	r2, [pc, #472]	@ (3401e96c <app_run+0x284>)
  SCRL_ScreenConfig screen_config = {
3401e792:	9308      	str	r3, [sp, #32]
3401e794:	231e      	movs	r3, #30
  SCRL_LayerConfig layers_config[2] = {
3401e796:	e9cd 410d 	strd	r4, r1, [sp, #52]	@ 0x34
3401e79a:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
  SCRL_ScreenConfig screen_config = {
3401e79e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
3401e7a2:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
3401e7a6:	ab0e      	add	r3, sp, #56	@ 0x38
3401e7a8:	a906      	add	r1, sp, #24
3401e7aa:	a804      	add	r0, sp, #16
  SCRL_LayerConfig layers_config[2] = {
3401e7ac:	920f      	str	r2, [sp, #60]	@ 0x3c
3401e7ae:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
  SCRL_ScreenConfig screen_config = {
3401e7b2:	9206      	str	r2, [sp, #24]
3401e7b4:	f88d 701c 	strb.w	r7, [sp, #28]
  ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
3401e7b8:	f8cd 9010 	str.w	r9, [sp, #16]
3401e7bc:	9305      	str	r3, [sp, #20]
3401e7be:	f7ed ff17 	bl	3400c5f0 <SCRL_Init>
  assert(ret == 0);
3401e7c2:	4604      	mov	r4, r0
3401e7c4:	b130      	cbz	r0, 3401e7d4 <app_run+0xec>
3401e7c6:	f240 711e 	movw	r1, #1822	@ 0x71e
3401e7ca:	4b69      	ldr	r3, [pc, #420]	@ (3401e970 <app_run+0x288>)
3401e7cc:	4a69      	ldr	r2, [pc, #420]	@ (3401e974 <app_run+0x28c>)
  CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_fg_buffer, sizeof(lcd_fg_buffer)));
  Display_init();

  /* create buffer queues */
  ret = bqueue_init(&nn_input_queue, 2, (uint8_t *[2]){nn_input_buffers[0], nn_input_buffers[1]});
  assert(ret == 0);
3401e7ce:	486a      	ldr	r0, [pc, #424]	@ (3401e978 <app_run+0x290>)
3401e7d0:	f001 f91a 	bl	3401fa08 <__assert_func>
  UTIL_LCD_SetLayer(SCRL_LAYER_1);
3401e7d4:	4630      	mov	r0, r6
3401e7d6:	f7fd fbf7 	bl	3401bfc8 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_TRANSPARENT);
3401e7da:	4620      	mov	r0, r4
3401e7dc:	f7fd ff86 	bl	3401c6ec <UTIL_LCD_Clear>
  bq->free = xSemaphoreCreateCountingStatic(buffer_nb, buffer_nb, &bq->free_buffer);
3401e7e0:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 3401e9dc <app_run+0x2f4>
  UTIL_LCD_SetFont(&LCD_FONT);
3401e7e4:	4865      	ldr	r0, [pc, #404]	@ (3401e97c <app_run+0x294>)
3401e7e6:	f7fd fc1d 	bl	3401c024 <UTIL_LCD_SetFont>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
3401e7ea:	f04f 30ff 	mov.w	r0, #4294967295
3401e7ee:	f7fd fc11 	bl	3401c014 <UTIL_LCD_SetTextColor>
  bq->free = xSemaphoreCreateCountingStatic(buffer_nb, buffer_nb, &bq->free_buffer);
3401e7f2:	4642      	mov	r2, r8
3401e7f4:	4639      	mov	r1, r7
3401e7f6:	4638      	mov	r0, r7
3401e7f8:	f7eb fdfe 	bl	3400a3f8 <xQueueCreateCountingSemaphoreStatic>
3401e7fc:	f1a8 0504 	sub.w	r5, r8, #4
3401e800:	f848 0c04 	str.w	r0, [r8, #-4]
  if (!bq->free)
3401e804:	b158      	cbz	r0, 3401e81e <app_run+0x136>
  bq->ready = xSemaphoreCreateCountingStatic(buffer_nb, 0, &bq->ready_buffer);
3401e806:	4621      	mov	r1, r4
3401e808:	4638      	mov	r0, r7
3401e80a:	f108 0254 	add.w	r2, r8, #84	@ 0x54
3401e80e:	f7eb fdf3 	bl	3400a3f8 <xQueueCreateCountingSemaphoreStatic>
3401e812:	6568      	str	r0, [r5, #84]	@ 0x54
  if (!bq->ready)
3401e814:	b940      	cbnz	r0, 3401e828 <app_run+0x140>
  vSemaphoreDelete(bq->free);
3401e816:	f858 0c04 	ldr.w	r0, [r8, #-4]
3401e81a:	f7ec f8b1 	bl	3400a980 <vQueueDelete>
  assert(ret == 0);
3401e81e:	f44f 6115 	mov.w	r1, #2384	@ 0x950
3401e822:	4b53      	ldr	r3, [pc, #332]	@ (3401e970 <app_run+0x288>)
3401e824:	4a56      	ldr	r2, [pc, #344]	@ (3401e980 <app_run+0x298>)
3401e826:	e7d2      	b.n	3401e7ce <app_run+0xe6>
    bq->buffers[i] = buffers[i];
3401e828:	4b56      	ldr	r3, [pc, #344]	@ (3401e984 <app_run+0x29c>)
  memset(cpu_load, 0, sizeof(cpuload_info_t));
3401e82a:	22e0      	movs	r2, #224	@ 0xe0
3401e82c:	4621      	mov	r1, r4
    bq->buffers[i] = buffers[i];
3401e82e:	f8c5 30ac 	str.w	r3, [r5, #172]	@ 0xac
  memset(cpu_load, 0, sizeof(cpuload_info_t));
3401e832:	4855      	ldr	r0, [pc, #340]	@ (3401e988 <app_run+0x2a0>)
    bq->buffers[i] = buffers[i];
3401e834:	f503 33d8 	add.w	r3, r3, #110592	@ 0x1b000
  bq->free_idx = 0;
3401e838:	e9c5 342c 	strd	r3, r4, [r5, #176]	@ 0xb0
  bq->buffer_nb = buffer_nb;
3401e83c:	f8c5 70a8 	str.w	r7, [r5, #168]	@ 0xa8
  bq->ready_idx = 0;
3401e840:	f8c5 40b8 	str.w	r4, [r5, #184]	@ 0xb8
  memset(cpu_load, 0, sizeof(cpuload_info_t));
3401e844:	f002 ff66 	bl	34021714 <memset>

  cpuload_init(&cpu_load);

  /*** Camera Init ************************************************************/  
  CAM_Init();
3401e848:	f000 fa10 	bl	3401ec6c <CAM_Init>

  /* sems + mutex init */
  isp_sem = xSemaphoreCreateCountingStatic(1, 0, &isp_sem_buffer);
3401e84c:	4621      	mov	r1, r4
3401e84e:	4630      	mov	r0, r6
3401e850:	4a4e      	ldr	r2, [pc, #312]	@ (3401e98c <app_run+0x2a4>)
3401e852:	f7eb fdd1 	bl	3400a3f8 <xQueueCreateCountingSemaphoreStatic>
3401e856:	4b4e      	ldr	r3, [pc, #312]	@ (3401e990 <app_run+0x2a8>)
3401e858:	6018      	str	r0, [r3, #0]
  assert(isp_sem);
3401e85a:	b920      	cbnz	r0, 3401e866 <app_run+0x17e>
3401e85c:	f640 1159 	movw	r1, #2393	@ 0x959
3401e860:	4b4c      	ldr	r3, [pc, #304]	@ (3401e994 <app_run+0x2ac>)
3401e862:	4a47      	ldr	r2, [pc, #284]	@ (3401e980 <app_run+0x298>)
3401e864:	e7b3      	b.n	3401e7ce <app_run+0xe6>
  disp.update = xSemaphoreCreateCountingStatic(1, 0, &disp.update_buffer);
3401e866:	4d4c      	ldr	r5, [pc, #304]	@ (3401e998 <app_run+0x2b0>)
3401e868:	4621      	mov	r1, r4
3401e86a:	462a      	mov	r2, r5
3401e86c:	4630      	mov	r0, r6
3401e86e:	f7eb fdc3 	bl	3400a3f8 <xQueueCreateCountingSemaphoreStatic>
3401e872:	1f2f      	subs	r7, r5, #4
3401e874:	f845 0c04 	str.w	r0, [r5, #-4]
  assert(disp.update);
3401e878:	b920      	cbnz	r0, 3401e884 <app_run+0x19c>
3401e87a:	f640 115b 	movw	r1, #2395	@ 0x95b
3401e87e:	4b47      	ldr	r3, [pc, #284]	@ (3401e99c <app_run+0x2b4>)
3401e880:	4a3f      	ldr	r2, [pc, #252]	@ (3401e980 <app_run+0x298>)
3401e882:	e7a4      	b.n	3401e7ce <app_run+0xe6>
  disp.lock = xSemaphoreCreateMutexStatic(&disp.lock_buffer);
3401e884:	4630      	mov	r0, r6
3401e886:	f105 0154 	add.w	r1, r5, #84	@ 0x54
3401e88a:	f7eb fe77 	bl	3400a57c <xQueueCreateMutexStatic>
3401e88e:	6578      	str	r0, [r7, #84]	@ 0x54
  assert(disp.lock);
3401e890:	b920      	cbnz	r0, 3401e89c <app_run+0x1b4>
3401e892:	f640 115d 	movw	r1, #2397	@ 0x95d
3401e896:	4b42      	ldr	r3, [pc, #264]	@ (3401e9a0 <app_run+0x2b8>)
3401e898:	4a39      	ldr	r2, [pc, #228]	@ (3401e980 <app_run+0x298>)
3401e89a:	e798      	b.n	3401e7ce <app_run+0xe6>

  /* Start LCD Display camera pipe stream */
  CAM_DisplayPipe_Start(lcd_bg_buffer[0], CMW_MODE_CONTINUOUS);
3401e89c:	4621      	mov	r1, r4
3401e89e:	482c      	ldr	r0, [pc, #176]	@ (3401e950 <app_run+0x268>)
3401e8a0:	f000 fab4 	bl	3401ee0c <CAM_DisplayPipe_Start>

	#ifdef STM32N6570_DK_REV
	  /* If Error_Handler is not visible here, add this prototype near the top of the file:
		 extern void Error_Handler(void);
	  */
	  COM_InitTypeDef ci = {
3401e8a4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
		.WordLength = COM_WORDLENGTH_8B,
		.StopBits   = COM_STOPBITS_1,
		.Parity     = COM_PARITY_NONE,
		.HwFlowCtl  = COM_HWCONTROL_NONE
	  };
	  if (BSP_COM_Init(COM1, &ci) != BSP_ERROR_NONE) {
3401e8a8:	4649      	mov	r1, r9
3401e8aa:	4620      	mov	r0, r4
	  COM_InitTypeDef ci = {
3401e8ac:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
3401e8b0:	940c      	str	r4, [sp, #48]	@ 0x30
3401e8b2:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
	  if (BSP_COM_Init(COM1, &ci) != BSP_ERROR_NONE) {
3401e8b6:	f7ef f879 	bl	3400d9ac <BSP_COM_Init>
3401e8ba:	b108      	cbz	r0, 3401e8c0 <app_run+0x1d8>
		Error_Handler();
3401e8bc:	f7ff fef8 	bl	3401e6b0 <Error_Handler>
	  }
	#endif


//  /* Start COMMS task (CAN or Modbus) */
  comms_start();
3401e8c0:	f7ff fef8 	bl	3401e6b4 <comms_start>

  /* threads init */
  hdl = xTaskCreateStatic(nn_thread_fct, "nn", configMINIMAL_STACK_SIZE * 2, NULL, nn_priority, nn_thread_stack,
3401e8c4:	4b37      	ldr	r3, [pc, #220]	@ (3401e9a4 <app_run+0x2bc>)
3401e8c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401e8ca:	9302      	str	r3, [sp, #8]
3401e8cc:	4b36      	ldr	r3, [pc, #216]	@ (3401e9a8 <app_run+0x2c0>)
3401e8ce:	4937      	ldr	r1, [pc, #220]	@ (3401e9ac <app_run+0x2c4>)
3401e8d0:	9301      	str	r3, [sp, #4]
3401e8d2:	231d      	movs	r3, #29
3401e8d4:	4836      	ldr	r0, [pc, #216]	@ (3401e9b0 <app_run+0x2c8>)
3401e8d6:	9300      	str	r3, [sp, #0]
3401e8d8:	2300      	movs	r3, #0
3401e8da:	f7ec f907 	bl	3400aaec <xTaskCreateStatic>
                          &nn_thread);
  assert(hdl != NULL);
3401e8de:	b920      	cbnz	r0, 3401e8ea <app_run+0x202>
3401e8e0:	f640 1179 	movw	r1, #2425	@ 0x979
3401e8e4:	4b33      	ldr	r3, [pc, #204]	@ (3401e9b4 <app_run+0x2cc>)
3401e8e6:	4a26      	ldr	r2, [pc, #152]	@ (3401e980 <app_run+0x298>)
3401e8e8:	e771      	b.n	3401e7ce <app_run+0xe6>
  hdl = xTaskCreateStatic(dp_thread_fct, "dp", configMINIMAL_STACK_SIZE * 2, NULL, dp_priority, dp_thread_stack,
3401e8ea:	4b33      	ldr	r3, [pc, #204]	@ (3401e9b8 <app_run+0x2d0>)
3401e8ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401e8f0:	9302      	str	r3, [sp, #8]
3401e8f2:	4b32      	ldr	r3, [pc, #200]	@ (3401e9bc <app_run+0x2d4>)
3401e8f4:	4932      	ldr	r1, [pc, #200]	@ (3401e9c0 <app_run+0x2d8>)
3401e8f6:	9301      	str	r3, [sp, #4]
3401e8f8:	231a      	movs	r3, #26
3401e8fa:	4832      	ldr	r0, [pc, #200]	@ (3401e9c4 <app_run+0x2dc>)
3401e8fc:	9300      	str	r3, [sp, #0]
3401e8fe:	2300      	movs	r3, #0
3401e900:	f7ec f8f4 	bl	3400aaec <xTaskCreateStatic>
                          &dp_thread);
  assert(hdl != NULL);
3401e904:	b920      	cbnz	r0, 3401e910 <app_run+0x228>
3401e906:	f640 117c 	movw	r1, #2428	@ 0x97c
3401e90a:	4b2a      	ldr	r3, [pc, #168]	@ (3401e9b4 <app_run+0x2cc>)
3401e90c:	4a1c      	ldr	r2, [pc, #112]	@ (3401e980 <app_run+0x298>)
3401e90e:	e75e      	b.n	3401e7ce <app_run+0xe6>
  hdl = xTaskCreateStatic(isp_thread_fct, "isp", configMINIMAL_STACK_SIZE * 2, NULL, isp_priority, isp_thread_stack,
3401e910:	4b2d      	ldr	r3, [pc, #180]	@ (3401e9c8 <app_run+0x2e0>)
3401e912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401e916:	9302      	str	r3, [sp, #8]
3401e918:	4b2c      	ldr	r3, [pc, #176]	@ (3401e9cc <app_run+0x2e4>)
3401e91a:	492d      	ldr	r1, [pc, #180]	@ (3401e9d0 <app_run+0x2e8>)
3401e91c:	9301      	str	r3, [sp, #4]
3401e91e:	231e      	movs	r3, #30
3401e920:	482c      	ldr	r0, [pc, #176]	@ (3401e9d4 <app_run+0x2ec>)
3401e922:	9300      	str	r3, [sp, #0]
3401e924:	2300      	movs	r3, #0
3401e926:	f7ec f8e1 	bl	3400aaec <xTaskCreateStatic>
                          &isp_thread);
  assert(hdl != NULL);
3401e92a:	b920      	cbnz	r0, 3401e936 <app_run+0x24e>
3401e92c:	f640 117f 	movw	r1, #2431	@ 0x97f
3401e930:	4b20      	ldr	r3, [pc, #128]	@ (3401e9b4 <app_run+0x2cc>)
3401e932:	4a13      	ldr	r2, [pc, #76]	@ (3401e980 <app_run+0x298>)
3401e934:	e74b      	b.n	3401e7ce <app_run+0xe6>
}
3401e936:	b013      	add	sp, #76	@ 0x4c
3401e938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3401e93c:	340e34f4 	.word	0x340e34f4
3401e940:	340e3578 	.word	0x340e3578
3401e944:	340e34f8 	.word	0x340e34f8
3401e948:	e000ed00 	.word	0xe000ed00
3401e94c:	3402fc66 	.word	0x3402fc66
3401e950:	91268800 	.word	0x91268800
3401e954:	005dc000 	.word	0x005dc000
3401e958:	910f1800 	.word	0x910f1800
3401e95c:	00177000 	.word	0x00177000
3401e960:	340d08bc 	.word	0x340d08bc
3401e964:	911ad000 	.word	0x911ad000
3401e968:	91036000 	.word	0x91036000
3401e96c:	01e00320 	.word	0x01e00320
3401e970:	3402c4b2 	.word	0x3402c4b2
3401e974:	340c9654 	.word	0x340c9654
3401e978:	3402f98d 	.word	0x3402f98d
3401e97c:	340d0678 	.word	0x340d0678
3401e980:	340c977c 	.word	0x340c977c
3401e984:	91000000 	.word	0x91000000
3401e988:	340e33c8 	.word	0x340e33c8
3401e98c:	340dd0cc 	.word	0x340dd0cc
3401e990:	340dd11c 	.word	0x340dd11c
3401e994:	3402fc77 	.word	0x3402fc77
3401e998:	340d0714 	.word	0x340d0714
3401e99c:	3402fc7f 	.word	0x3402fc7f
3401e9a0:	3402fc8b 	.word	0x3402fc8b
3401e9a4:	340e31e0 	.word	0x340e31e0
3401e9a8:	340e11e0 	.word	0x340e11e0
3401e9ac:	3402fc95 	.word	0x3402fc95
3401e9b0:	3401cc81 	.word	0x3401cc81
3401e9b4:	3402fc98 	.word	0x3402fc98
3401e9b8:	340e1180 	.word	0x340e1180
3401e9bc:	340df180 	.word	0x340df180
3401e9c0:	3402fca4 	.word	0x3402fca4
3401e9c4:	3401e3e1 	.word	0x3401e3e1
3401e9c8:	340df120 	.word	0x340df120
3401e9cc:	340dd120 	.word	0x340dd120
3401e9d0:	3402fca7 	.word	0x3402fca7
3401e9d4:	3401c91d 	.word	0x3401c91d
3401e9d8:	0002ee00 	.word	0x0002ee00
3401e9dc:	340e3244 	.word	0x340e3244

3401e9e0 <CMW_CAMERA_PIPE_FrameEventCallback>:

int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
  if (pipe == DCMIPP_PIPE1)
3401e9e0:	2801      	cmp	r0, #1
{
3401e9e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3401e9e6:	4606      	mov	r6, r0
  if (pipe == DCMIPP_PIPE1)
3401e9e8:	d150      	bne.n	3401ea8c <CMW_CAMERA_PIPE_FrameEventCallback+0xac>
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401e9ea:	4f51      	ldr	r7, [pc, #324]	@ (3401eb30 <CMW_CAMERA_PIPE_FrameEventCallback+0x150>)
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401e9ec:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 3401eb60 <CMW_CAMERA_PIPE_FrameEventCallback+0x180>
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401e9f0:	683d      	ldr	r5, [r7, #0]
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401e9f2:	f8d8 4000 	ldr.w	r4, [r8]
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401e9f6:	3501      	adds	r5, #1
3401e9f8:	426b      	negs	r3, r5
3401e9fa:	f003 0303 	and.w	r3, r3, #3
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401e9fe:	f104 0401 	add.w	r4, r4, #1
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401ea02:	f005 0503 	and.w	r5, r5, #3
3401ea06:	ea55 b543 			@ <UNDEFINED> instruction: 0xea55b543
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401ea0a:	4263      	negs	r3, r4
3401ea0c:	f003 0303 	and.w	r3, r3, #3
                                         DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_capt_idx]);
3401ea10:	f8df a150 	ldr.w	sl, [pc, #336]	@ 3401eb64 <CMW_CAMERA_PIPE_FrameEventCallback+0x184>
3401ea14:	f8df 9150 	ldr.w	r9, [pc, #336]	@ 3401eb68 <CMW_CAMERA_PIPE_FrameEventCallback+0x188>
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401ea18:	f004 0403 	and.w	r4, r4, #3
3401ea1c:	ea54 b443 			@ <UNDEFINED> instruction: 0xea54b443
  ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE1,
3401ea20:	f7e8 fa50 	bl	34006ec4 <CMW_CAMERA_GetDCMIPPHandle>
3401ea24:	4631      	mov	r1, r6
3401ea26:	2200      	movs	r2, #0
3401ea28:	fb0a 9304 	mla	r3, sl, r4, r9
3401ea2c:	f7f3 f80c 	bl	34011a48 <HAL_DCMIPP_PIPE_SetMemoryAddress>
  assert(ret == HAL_OK);
3401ea30:	4601      	mov	r1, r0
3401ea32:	b130      	cbz	r0, 3401ea42 <CMW_CAMERA_PIPE_FrameEventCallback+0x62>
3401ea34:	f240 31c1 	movw	r1, #961	@ 0x3c1
3401ea38:	4b3e      	ldr	r3, [pc, #248]	@ (3401eb34 <CMW_CAMERA_PIPE_FrameEventCallback+0x154>)
3401ea3a:	4a3f      	ldr	r2, [pc, #252]	@ (3401eb38 <CMW_CAMERA_PIPE_FrameEventCallback+0x158>)
  assert(ret == 0);
3401ea3c:	483f      	ldr	r0, [pc, #252]	@ (3401eb3c <CMW_CAMERA_PIPE_FrameEventCallback+0x15c>)
3401ea3e:	f000 ffe3 	bl	3401fa08 <__assert_func>
  ret = SCRL_SetAddress_NoReload(lcd_bg_buffer[next_disp_idx], SCRL_LAYER_0);
3401ea42:	fb0a 9005 	mla	r0, sl, r5, r9
3401ea46:	f7ed fe2f 	bl	3400c6a8 <SCRL_SetAddress_NoReload>
  assert(ret == 0);
3401ea4a:	b120      	cbz	r0, 3401ea56 <CMW_CAMERA_PIPE_FrameEventCallback+0x76>
3401ea4c:	f240 31b1 	movw	r1, #945	@ 0x3b1
3401ea50:	4b3b      	ldr	r3, [pc, #236]	@ (3401eb40 <CMW_CAMERA_PIPE_FrameEventCallback+0x160>)
3401ea52:	4a3c      	ldr	r2, [pc, #240]	@ (3401eb44 <CMW_CAMERA_PIPE_FrameEventCallback+0x164>)
3401ea54:	e7f2      	b.n	3401ea3c <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
  ret = SCRL_ReloadLayer(SCRL_LAYER_0);
3401ea56:	f7ed fe31 	bl	3400c6bc <SCRL_ReloadLayer>
  assert(ret == 0);
3401ea5a:	b120      	cbz	r0, 3401ea66 <CMW_CAMERA_PIPE_FrameEventCallback+0x86>
3401ea5c:	f240 31b3 	movw	r1, #947	@ 0x3b3
3401ea60:	4b37      	ldr	r3, [pc, #220]	@ (3401eb40 <CMW_CAMERA_PIPE_FrameEventCallback+0x160>)
3401ea62:	4a38      	ldr	r2, [pc, #224]	@ (3401eb44 <CMW_CAMERA_PIPE_FrameEventCallback+0x164>)
3401ea64:	e7ea      	b.n	3401ea3c <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
  ret = SRCL_Update();
3401ea66:	f7ed fe33 	bl	3400c6d0 <SRCL_Update>
  assert(ret == 0);
3401ea6a:	b120      	cbz	r0, 3401ea76 <CMW_CAMERA_PIPE_FrameEventCallback+0x96>
3401ea6c:	f240 31b6 	movw	r1, #950	@ 0x3b6
3401ea70:	4b33      	ldr	r3, [pc, #204]	@ (3401eb40 <CMW_CAMERA_PIPE_FrameEventCallback+0x160>)
3401ea72:	4a34      	ldr	r2, [pc, #208]	@ (3401eb44 <CMW_CAMERA_PIPE_FrameEventCallback+0x164>)
3401ea74:	e7e2      	b.n	3401ea3c <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
  frame_event_nb++;
3401ea76:	4a34      	ldr	r2, [pc, #208]	@ (3401eb48 <CMW_CAMERA_PIPE_FrameEventCallback+0x168>)
  lcd_bg_buffer_disp_idx = next_disp_idx;
3401ea78:	603d      	str	r5, [r7, #0]
  frame_event_nb++;
3401ea7a:	6813      	ldr	r3, [r2, #0]
  lcd_bg_buffer_capt_idx = next_capt_idx;
3401ea7c:	f8c8 4000 	str.w	r4, [r8]
  frame_event_nb++;
3401ea80:	3301      	adds	r3, #1
3401ea82:	6013      	str	r3, [r2, #0]
    app_main_pipe_frame_event();
  else if (pipe == DCMIPP_PIPE2)
    app_ancillary_pipe_frame_event();

  return HAL_OK;
}
3401ea84:	2000      	movs	r0, #0
3401ea86:	b002      	add	sp, #8
3401ea88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (pipe == DCMIPP_PIPE2)
3401ea8c:	2802      	cmp	r0, #2
3401ea8e:	d1f9      	bne.n	3401ea84 <CMW_CAMERA_PIPE_FrameEventCallback+0xa4>
  ret = xSemaphoreTake(bq->free, is_blocking ? portMAX_DELAY : 0);
3401ea90:	4c2e      	ldr	r4, [pc, #184]	@ (3401eb4c <CMW_CAMERA_PIPE_FrameEventCallback+0x16c>)
3401ea92:	2100      	movs	r1, #0
3401ea94:	6820      	ldr	r0, [r4, #0]
3401ea96:	f7eb fe73 	bl	3400a780 <xQueueSemaphoreTake>
  if (ret == pdFALSE)
3401ea9a:	2800      	cmp	r0, #0
3401ea9c:	d0f2      	beq.n	3401ea84 <CMW_CAMERA_PIPE_FrameEventCallback+0xa4>
  res = bq->buffers[bq->free_idx];
3401ea9e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
3401eaa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3401eaa6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
  bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
3401eaaa:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
3401eaae:	3201      	adds	r2, #1
3401eab0:	fb92 f1f3 	sdiv	r1, r2, r3
3401eab4:	fb03 2211 	mls	r2, r3, r1, r2
3401eab8:	f8c4 20b4 	str.w	r2, [r4, #180]	@ 0xb4
  if (next_buffer) {
3401eabc:	2d00      	cmp	r5, #0
3401eabe:	d0e1      	beq.n	3401ea84 <CMW_CAMERA_PIPE_FrameEventCallback+0xa4>
    ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE2,
3401eac0:	f7e8 fa00 	bl	34006ec4 <CMW_CAMERA_GetDCMIPPHandle>
3401eac4:	462b      	mov	r3, r5
3401eac6:	2200      	movs	r2, #0
3401eac8:	4631      	mov	r1, r6
3401eaca:	f7f2 ffbd 	bl	34011a48 <HAL_DCMIPP_PIPE_SetMemoryAddress>
    assert(ret == HAL_OK);
3401eace:	b120      	cbz	r0, 3401eada <CMW_CAMERA_PIPE_FrameEventCallback+0xfa>
3401ead0:	f44f 7175 	mov.w	r1, #980	@ 0x3d4
3401ead4:	4b17      	ldr	r3, [pc, #92]	@ (3401eb34 <CMW_CAMERA_PIPE_FrameEventCallback+0x154>)
3401ead6:	4a1e      	ldr	r2, [pc, #120]	@ (3401eb50 <CMW_CAMERA_PIPE_FrameEventCallback+0x170>)
3401ead8:	e7b0      	b.n	3401ea3c <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
    frame_event_nb_for_resize = frame_event_nb - 1;
3401eada:	4b1b      	ldr	r3, [pc, #108]	@ (3401eb48 <CMW_CAMERA_PIPE_FrameEventCallback+0x168>)
3401eadc:	4a1d      	ldr	r2, [pc, #116]	@ (3401eb54 <CMW_CAMERA_PIPE_FrameEventCallback+0x174>)
3401eade:	681b      	ldr	r3, [r3, #0]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401eae0:	9001      	str	r0, [sp, #4]
    frame_event_nb_for_resize = frame_event_nb - 1;
3401eae2:	3b01      	subs	r3, #1
3401eae4:	6013      	str	r3, [r2, #0]
  if (xPortIsInsideInterrupt()) {
3401eae6:	f7ed f8cb 	bl	3400bc80 <xPortIsInsideInterrupt>
3401eaea:	4603      	mov	r3, r0
3401eaec:	b1a0      	cbz	r0, 3401eb18 <CMW_CAMERA_PIPE_FrameEventCallback+0x138>
    ret = xSemaphoreGiveFromISR(bq->ready, &xHigherPriorityTaskWoken);
3401eaee:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401eaf0:	a901      	add	r1, sp, #4
3401eaf2:	f7eb fd59 	bl	3400a5a8 <xQueueGiveFromISR>
    assert(ret == pdTRUE);
3401eaf6:	2801      	cmp	r0, #1
3401eaf8:	d004      	beq.n	3401eb04 <CMW_CAMERA_PIPE_FrameEventCallback+0x124>
3401eafa:	f44f 7169 	mov.w	r1, #932	@ 0x3a4
3401eafe:	4b16      	ldr	r3, [pc, #88]	@ (3401eb58 <CMW_CAMERA_PIPE_FrameEventCallback+0x178>)
3401eb00:	4a16      	ldr	r2, [pc, #88]	@ (3401eb5c <CMW_CAMERA_PIPE_FrameEventCallback+0x17c>)
3401eb02:	e79b      	b.n	3401ea3c <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
3401eb04:	9b01      	ldr	r3, [sp, #4]
3401eb06:	2b00      	cmp	r3, #0
3401eb08:	d0bc      	beq.n	3401ea84 <CMW_CAMERA_PIPE_FrameEventCallback+0xa4>
3401eb0a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3401eb0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3401eb12:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
3401eb16:	e7b5      	b.n	3401ea84 <CMW_CAMERA_PIPE_FrameEventCallback+0xa4>
    ret = xSemaphoreGive(bq->ready);
3401eb18:	4602      	mov	r2, r0
3401eb1a:	4601      	mov	r1, r0
3401eb1c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401eb1e:	f7eb fc8b 	bl	3400a438 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401eb22:	2801      	cmp	r0, #1
3401eb24:	d0ae      	beq.n	3401ea84 <CMW_CAMERA_PIPE_FrameEventCallback+0xa4>
3401eb26:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
3401eb2a:	4b0b      	ldr	r3, [pc, #44]	@ (3401eb58 <CMW_CAMERA_PIPE_FrameEventCallback+0x178>)
3401eb2c:	4a0b      	ldr	r2, [pc, #44]	@ (3401eb5c <CMW_CAMERA_PIPE_FrameEventCallback+0x17c>)
3401eb2e:	e785      	b.n	3401ea3c <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
3401eb30:	340d08bc 	.word	0x340d08bc
3401eb34:	3402fb11 	.word	0x3402fb11
3401eb38:	340c963a 	.word	0x340c963a
3401eb3c:	3402f98d 	.word	0x3402f98d
3401eb40:	3402c4b2 	.word	0x3402c4b2
3401eb44:	340c962a 	.word	0x340c962a
3401eb48:	340e3300 	.word	0x340e3300
3401eb4c:	340e3240 	.word	0x340e3240
3401eb50:	340c960b 	.word	0x340c960b
3401eb54:	340e32fc 	.word	0x340e32fc
3401eb58:	3402ae28 	.word	0x3402ae28
3401eb5c:	340c95fa 	.word	0x340c95fa
3401eb60:	340e34ac 	.word	0x340e34ac
3401eb64:	00177000 	.word	0x00177000
3401eb68:	91268800 	.word	0x91268800

3401eb6c <CMW_CAMERA_PIPE_VsyncEventCallback>:

int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
{
  if (pipe == DCMIPP_PIPE1)
3401eb6c:	2801      	cmp	r0, #1
{
3401eb6e:	b507      	push	{r0, r1, r2, lr}
  if (pipe == DCMIPP_PIPE1)
3401eb70:	d110      	bne.n	3401eb94 <CMW_CAMERA_PIPE_VsyncEventCallback+0x28>
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401eb72:	2300      	movs	r3, #0
3401eb74:	9301      	str	r3, [sp, #4]
  ret = xSemaphoreGiveFromISR(isp_sem, &xHigherPriorityTaskWoken);
3401eb76:	4b09      	ldr	r3, [pc, #36]	@ (3401eb9c <CMW_CAMERA_PIPE_VsyncEventCallback+0x30>)
3401eb78:	a901      	add	r1, sp, #4
3401eb7a:	6818      	ldr	r0, [r3, #0]
3401eb7c:	f7eb fd14 	bl	3400a5a8 <xQueueGiveFromISR>
  if (ret == pdTRUE)
3401eb80:	2801      	cmp	r0, #1
3401eb82:	d107      	bne.n	3401eb94 <CMW_CAMERA_PIPE_VsyncEventCallback+0x28>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
3401eb84:	9b01      	ldr	r3, [sp, #4]
3401eb86:	b12b      	cbz	r3, 3401eb94 <CMW_CAMERA_PIPE_VsyncEventCallback+0x28>
3401eb88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3401eb8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3401eb90:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    app_main_pipe_vsync_event();

  return HAL_OK;
}
3401eb94:	2000      	movs	r0, #0
3401eb96:	b003      	add	sp, #12
3401eb98:	f85d fb04 	ldr.w	pc, [sp], #4
3401eb9c:	340dd11c 	.word	0x340dd11c

3401eba0 <CAM_InitCropConfig>:
#include "utils.h"

/* Keep display output aspect ratio using crop area */
static void CAM_InitCropConfig(CMW_Manual_roi_area_t *roi, int sensor_width, int sensor_height)
{
  const float ratiox = (float)sensor_width / LCD_BG_WIDTH;
3401eba0:	ee07 1a90 	vmov	s15, r1
3401eba4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  const float ratioy = (float)sensor_height / LCD_BG_HEIGHT;
3401eba8:	ee07 2a90 	vmov	s15, r2
  const float ratiox = (float)sensor_width / LCD_BG_WIDTH;
3401ebac:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 3401ec50 <CAM_InitCropConfig+0xb0>
  const float ratioy = (float)sensor_height / LCD_BG_HEIGHT;
3401ebb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3401ebb4:	eddf 5a27 	vldr	s11, [pc, #156]	@ 3401ec54 <CAM_InitCropConfig+0xb4>
  const float ratiox = (float)sensor_width / LCD_BG_WIDTH;
3401ebb8:	ee86 5a86 	vdiv.f32	s10, s13, s12
  const float ratioy = (float)sensor_height / LCD_BG_HEIGHT;
3401ebbc:	eec7 7a25 	vdiv.f32	s15, s14, s11
  const float ratio = MIN(ratiox, ratioy);
3401ebc0:	eeb4 5a67 	vcmp.f32	s10, s15
3401ebc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ebc8:	bf48      	it	mi
3401ebca:	eef0 7a45 	vmovmi.f32	s15, s10

  assert(ratio >= 1);
3401ebce:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
3401ebd2:	eef4 7ac5 	vcmpe.f32	s15, s10
3401ebd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
3401ebda:	b508      	push	{r3, lr}
  assert(ratio >= 1);
3401ebdc:	da05      	bge.n	3401ebea <CAM_InitCropConfig+0x4a>
3401ebde:	2120      	movs	r1, #32
3401ebe0:	4b1d      	ldr	r3, [pc, #116]	@ (3401ec58 <CAM_InitCropConfig+0xb8>)
3401ebe2:	4a1e      	ldr	r2, [pc, #120]	@ (3401ec5c <CAM_InitCropConfig+0xbc>)
  assert(ratio < 64);
3401ebe4:	481e      	ldr	r0, [pc, #120]	@ (3401ec60 <CAM_InitCropConfig+0xc0>)
3401ebe6:	f000 ff0f 	bl	3401fa08 <__assert_func>
3401ebea:	ed9f 5a1e 	vldr	s10, [pc, #120]	@ 3401ec64 <CAM_InitCropConfig+0xc4>
3401ebee:	eef4 7ac5 	vcmpe.f32	s15, s10
3401ebf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ebf6:	d403      	bmi.n	3401ec00 <CAM_InitCropConfig+0x60>
3401ebf8:	2121      	movs	r1, #33	@ 0x21
3401ebfa:	4b1b      	ldr	r3, [pc, #108]	@ (3401ec68 <CAM_InitCropConfig+0xc8>)
3401ebfc:	4a17      	ldr	r2, [pc, #92]	@ (3401ec5c <CAM_InitCropConfig+0xbc>)
3401ebfe:	e7f1      	b.n	3401ebe4 <CAM_InitCropConfig+0x44>

  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401ec00:	ee27 6a86 	vmul.f32	s12, s15, s12
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401ec04:	ee67 7aa5 	vmul.f32	s15, s15, s11
  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401ec08:	eef4 6ac6 	vcmpe.f32	s13, s12
3401ec0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401ec10:	eeb4 7ae7 	vcmpe.f32	s14, s15
  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401ec14:	bfcc      	ite	gt
3401ec16:	eefc 6ac6 	vcvtgt.u32.f32	s13, s12
3401ec1a:	eefc 6ae6 	vcvtle.u32.f32	s13, s13
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401ec1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401ec22:	ee16 3a90 	vmov	r3, s13
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401ec26:	bfcc      	ite	gt
3401ec28:	eebc 7ae7 	vcvtgt.u32.f32	s14, s15
3401ec2c:	eebc 7ac7 	vcvtle.u32.f32	s14, s14
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401ec30:	3101      	adds	r1, #1
3401ec32:	1ac9      	subs	r1, r1, r3
  roi->offset_y = (sensor_height - roi->height + 1) / 2;
3401ec34:	ee17 3a10 	vmov	r3, s14
3401ec38:	3201      	adds	r2, #1
3401ec3a:	1ad2      	subs	r2, r2, r3
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401ec3c:	0849      	lsrs	r1, r1, #1
  roi->offset_y = (sensor_height - roi->height + 1) / 2;
3401ec3e:	0852      	lsrs	r2, r2, #1
  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401ec40:	edc0 6a00 	vstr	s13, [r0]
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401ec44:	ed80 7a01 	vstr	s14, [r0, #4]
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401ec48:	6081      	str	r1, [r0, #8]
  roi->offset_y = (sensor_height - roi->height + 1) / 2;
3401ec4a:	60c2      	str	r2, [r0, #12]
}
3401ec4c:	bd08      	pop	{r3, pc}
3401ec4e:	bf00      	nop
3401ec50:	44480000 	.word	0x44480000
3401ec54:	43f00000 	.word	0x43f00000
3401ec58:	3402c32d 	.word	0x3402c32d
3401ec5c:	340c98a0 	.word	0x340c98a0
3401ec60:	3402fcc7 	.word	0x3402fcc7
3401ec64:	42800000 	.word	0x42800000
3401ec68:	3402c338 	.word	0x3402c338

3401ec6c <CAM_Init>:
  ret = HAL_DCMIPP_PIPE_DisableLineEvent(hdcmipp, DCMIPP_PIPE1);
  assert(ret == HAL_OK);
}

void CAM_Init(void)
{
3401ec6c:	b5f0      	push	{r4, r5, r6, r7, lr}
3401ec6e:	b09d      	sub	sp, #116	@ 0x74
  CMW_Sensor_Config_t sensor_config;
  CMW_CameraInit_t cam_conf;
  CMW_Sensor_Name_t sensor;
  int ret;

  ret = CMW_CAMERA_GetSensorName(&sensor);
3401ec70:	f10d 0007 	add.w	r0, sp, #7
3401ec74:	f7e8 fa18 	bl	340070a8 <CMW_CAMERA_GetSensorName>
  assert(ret == CMW_ERROR_NONE);
3401ec78:	b128      	cbz	r0, 3401ec86 <CAM_Init+0x1a>
3401ec7a:	217f      	movs	r1, #127	@ 0x7f
3401ec7c:	4b5a      	ldr	r3, [pc, #360]	@ (3401ede8 <CAM_Init+0x17c>)
3401ec7e:	4a5b      	ldr	r2, [pc, #364]	@ (3401edec <CAM_Init+0x180>)
   *  - Fine tune IP Plug so we can buffer at lease one line
   *  - Increase line_len so IP Plug has enought time to empty internal FIFO before next line is coming.
   */
  sensor_config.selected_sensor = CMW_VD66GY_Sensor;
  ret = CMW_CAMERA_SetDefaultSensorValues(&sensor_config);
  assert(ret == CMW_ERROR_NONE);
3401ec80:	485b      	ldr	r0, [pc, #364]	@ (3401edf0 <CAM_Init+0x184>)
3401ec82:	f000 fec1 	bl	3401fa08 <__assert_func>
  sensor_config.selected_sensor = CMW_VD66GY_Sensor;
3401ec86:	2501      	movs	r5, #1
  ret = CMW_CAMERA_SetDefaultSensorValues(&sensor_config);
3401ec88:	ae09      	add	r6, sp, #36	@ 0x24
3401ec8a:	4630      	mov	r0, r6
  sensor_config.selected_sensor = CMW_VD66GY_Sensor;
3401ec8c:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
  ret = CMW_CAMERA_SetDefaultSensorValues(&sensor_config);
3401ec90:	f7e8 fb62 	bl	34007358 <CMW_CAMERA_SetDefaultSensorValues>
  assert(ret == CMW_ERROR_NONE);
3401ec94:	b118      	cbz	r0, 3401ec9e <CAM_Init+0x32>
3401ec96:	2187      	movs	r1, #135	@ 0x87
3401ec98:	4b53      	ldr	r3, [pc, #332]	@ (3401ede8 <CAM_Init+0x17c>)
3401ec9a:	4a54      	ldr	r2, [pc, #336]	@ (3401edec <CAM_Init+0x180>)
3401ec9c:	e7f0      	b.n	3401ec80 <CAM_Init+0x14>
  sensor_config.config.vd66gy_config.line_len = 2000;
3401ec9e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
3401eca2:	930b      	str	r3, [sp, #44]	@ 0x2c

  /* Let sensor driver choose which width/height to use */
  cam_conf.width = 0;
  cam_conf.height = 0;
  cam_conf.fps = CAMERA_FPS;
3401eca4:	231e      	movs	r3, #30
  cam_conf.pixel_format = 0; /* Default; Not implemented yet */
  cam_conf.anti_flicker = 0;
  cam_conf.mirror_flip = CAMERA_FLIP;
3401eca6:	2402      	movs	r4, #2
  cam_conf.pixel_format = 0; /* Default; Not implemented yet */
3401eca8:	e9cd 3005 	strd	r3, r0, [sp, #20]
  ret = CMW_CAMERA_Init(&cam_conf, sensor == CMW_VD66GY_Sensor ? &sensor_config : NULL);
3401ecac:	f89d 3007 	ldrb.w	r3, [sp, #7]
  cam_conf.height = 0;
3401ecb0:	e9cd 0003 	strd	r0, r0, [sp, #12]
  ret = CMW_CAMERA_Init(&cam_conf, sensor == CMW_VD66GY_Sensor ? &sensor_config : NULL);
3401ecb4:	2b01      	cmp	r3, #1
3401ecb6:	bf08      	it	eq
3401ecb8:	4631      	moveq	r1, r6
  cam_conf.anti_flicker = 0;
3401ecba:	9007      	str	r0, [sp, #28]
  ret = CMW_CAMERA_Init(&cam_conf, sensor == CMW_VD66GY_Sensor ? &sensor_config : NULL);
3401ecbc:	bf18      	it	ne
3401ecbe:	2100      	movne	r1, #0
3401ecc0:	a803      	add	r0, sp, #12
  cam_conf.mirror_flip = CAMERA_FLIP;
3401ecc2:	9408      	str	r4, [sp, #32]
  ret = CMW_CAMERA_Init(&cam_conf, sensor == CMW_VD66GY_Sensor ? &sensor_config : NULL);
3401ecc4:	f7e8 fa7e 	bl	340071c4 <CMW_CAMERA_Init>
  assert(ret == CMW_ERROR_NONE);
3401ecc8:	4606      	mov	r6, r0
3401ecca:	b118      	cbz	r0, 3401ecd4 <CAM_Init+0x68>
3401eccc:	2192      	movs	r1, #146	@ 0x92
3401ecce:	4b46      	ldr	r3, [pc, #280]	@ (3401ede8 <CAM_Init+0x17c>)
3401ecd0:	4a46      	ldr	r2, [pc, #280]	@ (3401edec <CAM_Init+0x180>)
3401ecd2:	e7d5      	b.n	3401ec80 <CAM_Init+0x14>

  /* cam_conf.width / cam_conf.height now contains choose resolution */
  DCMIPP_IpPlugInit(CMW_CAMERA_GetDCMIPPHandle());
3401ecd4:	f7e8 f8f6 	bl	34006ec4 <CMW_CAMERA_GetDCMIPPHandle>
  ipplug_conf.WLRURatio = 15; /* 16 parts of BW */
3401ecd8:	f240 2e2f 	movw	lr, #559	@ 0x22f
3401ecdc:	230f      	movs	r3, #15
  DCMIPP_IPPlugConfTypeDef ipplug_conf = { 0 };
3401ecde:	e9cd 6614 	strd	r6, r6, [sp, #80]	@ 0x50
  ipplug_conf.Traffic = DCMIPP_TRAFFIC_BURST_SIZE_128BYTES;
3401ece2:	2604      	movs	r6, #4
  ret = HAL_DCMIPP_SetIPPlugConfig(hdcmipp, &ipplug_conf);
3401ece4:	a911      	add	r1, sp, #68	@ 0x44
  DCMIPP_IpPlugInit(CMW_CAMERA_GetDCMIPPHandle());
3401ece6:	4607      	mov	r7, r0
  ipplug_conf.Client = DCMIPP_CLIENT2; /* aux pipe */
3401ece8:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  ipplug_conf.WLRURatio = 15; /* 16 parts of BW */
3401ecec:	e9cd e316 	strd	lr, r3, [sp, #88]	@ 0x58
  ipplug_conf.Traffic = DCMIPP_TRAFFIC_BURST_SIZE_128BYTES;
3401ecf0:	9613      	str	r6, [sp, #76]	@ 0x4c
  ret = HAL_DCMIPP_SetIPPlugConfig(hdcmipp, &ipplug_conf);
3401ecf2:	f7f0 fffb 	bl	3400fcec <HAL_DCMIPP_SetIPPlugConfig>
  assert(ret == HAL_OK);
3401ecf6:	b118      	cbz	r0, 3401ed00 <CAM_Init+0x94>
3401ecf8:	2161      	movs	r1, #97	@ 0x61
3401ecfa:	4b3e      	ldr	r3, [pc, #248]	@ (3401edf4 <CAM_Init+0x188>)
3401ecfc:	4a3e      	ldr	r2, [pc, #248]	@ (3401edf8 <CAM_Init+0x18c>)
3401ecfe:	e7bf      	b.n	3401ec80 <CAM_Init+0x14>
  ipplug_conf.Client = DCMIPP_CLIENT5; /* main rgb pipe */
3401ed00:	2305      	movs	r3, #5
  ipplug_conf.DPREGEnd = 639;
3401ed02:	f44f 7c0c 	mov.w	ip, #560	@ 0x230
  ipplug_conf.Client = DCMIPP_CLIENT5; /* main rgb pipe */
3401ed06:	9311      	str	r3, [sp, #68]	@ 0x44
  ipplug_conf.DPREGEnd = 639;
3401ed08:	f240 237f 	movw	r3, #639	@ 0x27f
  ipplug_conf.WLRURatio = 0; /* 1 parts of BW */
3401ed0c:	9017      	str	r0, [sp, #92]	@ 0x5c
  ret = HAL_DCMIPP_SetIPPlugConfig(hdcmipp, &ipplug_conf);
3401ed0e:	a911      	add	r1, sp, #68	@ 0x44
3401ed10:	4638      	mov	r0, r7
  ipplug_conf.MaxOutstandingTransactions = DCMIPP_OUTSTANDING_TRANSACTION_3;
3401ed12:	e9cd 6413 	strd	r6, r4, [sp, #76]	@ 0x4c
  ipplug_conf.DPREGEnd = 639;
3401ed16:	e9cd c315 	strd	ip, r3, [sp, #84]	@ 0x54
  ret = HAL_DCMIPP_SetIPPlugConfig(hdcmipp, &ipplug_conf);
3401ed1a:	f7f0 ffe7 	bl	3400fcec <HAL_DCMIPP_SetIPPlugConfig>
  assert(ret == HAL_OK);
3401ed1e:	b118      	cbz	r0, 3401ed28 <CAM_Init+0xbc>
3401ed20:	216a      	movs	r1, #106	@ 0x6a
3401ed22:	4b34      	ldr	r3, [pc, #208]	@ (3401edf4 <CAM_Init+0x188>)
3401ed24:	4a34      	ldr	r2, [pc, #208]	@ (3401edf8 <CAM_Init+0x18c>)
3401ed26:	e7ab      	b.n	3401ec80 <CAM_Init+0x14>
  dcmipp_conf.output_height = LCD_BG_HEIGHT;
3401ed28:	f44f 7148 	mov.w	r1, #800	@ 0x320
3401ed2c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  dcmipp_conf.output_bpp = DISPLAY_BPP;
3401ed30:	e9cd 4613 	strd	r4, r6, [sp, #76]	@ 0x4c
  dcmipp_conf.mode = CMW_Aspect_ratio_manual_roi;
3401ed34:	2603      	movs	r6, #3
  dcmipp_conf.output_height = LCD_BG_HEIGHT;
3401ed36:	e9cd 1311 	strd	r1, r3, [sp, #68]	@ 0x44
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401ed3a:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
  dcmipp_conf.enable_gamma_conversion = 0;
3401ed3e:	e9cd 5015 	strd	r5, r0, [sp, #84]	@ 0x54
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401ed42:	a818      	add	r0, sp, #96	@ 0x60
  dcmipp_conf.mode = CMW_Aspect_ratio_manual_roi;
3401ed44:	9617      	str	r6, [sp, #92]	@ 0x5c
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401ed46:	f7ff ff2b 	bl	3401eba0 <CAM_InitCropConfig>
  ret = CMW_CAMERA_SetPipeConfig(DCMIPP_PIPE1, &dcmipp_conf, &hw_pitch);
3401ed4a:	4628      	mov	r0, r5
3401ed4c:	aa02      	add	r2, sp, #8
3401ed4e:	a911      	add	r1, sp, #68	@ 0x44
3401ed50:	f7e8 f8bc 	bl	34006ecc <CMW_CAMERA_SetPipeConfig>
  assert(ret == HAL_OK);
3401ed54:	b118      	cbz	r0, 3401ed5e <CAM_Init+0xf2>
3401ed56:	213a      	movs	r1, #58	@ 0x3a
3401ed58:	4b26      	ldr	r3, [pc, #152]	@ (3401edf4 <CAM_Init+0x188>)
3401ed5a:	4a28      	ldr	r2, [pc, #160]	@ (3401edfc <CAM_Init+0x190>)
3401ed5c:	e790      	b.n	3401ec80 <CAM_Init+0x14>
  assert(hw_pitch == dcmipp_conf.output_width * dcmipp_conf.output_bpp);
3401ed5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
3401ed60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401ed62:	4353      	muls	r3, r2
3401ed64:	9a02      	ldr	r2, [sp, #8]
3401ed66:	4293      	cmp	r3, r2
3401ed68:	d003      	beq.n	3401ed72 <CAM_Init+0x106>
3401ed6a:	213b      	movs	r1, #59	@ 0x3b
3401ed6c:	4b24      	ldr	r3, [pc, #144]	@ (3401ee00 <CAM_Init+0x194>)
3401ed6e:	4a23      	ldr	r2, [pc, #140]	@ (3401edfc <CAM_Init+0x190>)
3401ed70:	e786      	b.n	3401ec80 <CAM_Init+0x14>
  dcmipp_conf.output_height = (int) (NN_HEIGHT * ((float)LCD_BG_HEIGHT / LCD_BG_WIDTH));
3401ed72:	22c0      	movs	r2, #192	@ 0xc0
3401ed74:	2373      	movs	r3, #115	@ 0x73
  dcmipp_conf.output_bpp = NN_BPP;
3401ed76:	e9cd 0613 	strd	r0, r6, [sp, #76]	@ 0x4c
  dcmipp_conf.output_height = (int) (NN_HEIGHT * ((float)LCD_BG_HEIGHT / LCD_BG_WIDTH));
3401ed7a:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401ed7e:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
  dcmipp_conf.enable_gamma_conversion = 0;
3401ed82:	e9cd 5015 	strd	r5, r0, [sp, #84]	@ 0x54
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401ed86:	a818      	add	r0, sp, #96	@ 0x60
  dcmipp_conf.mode = CMW_Aspect_ratio_manual_roi;
3401ed88:	9617      	str	r6, [sp, #92]	@ 0x5c
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401ed8a:	f7ff ff09 	bl	3401eba0 <CAM_InitCropConfig>
  ret = CMW_CAMERA_SetPipeConfig(DCMIPP_PIPE2, &dcmipp_conf, &hw_pitch);
3401ed8e:	4620      	mov	r0, r4
3401ed90:	aa02      	add	r2, sp, #8
3401ed92:	a911      	add	r1, sp, #68	@ 0x44
3401ed94:	f7e8 f89a 	bl	34006ecc <CMW_CAMERA_SetPipeConfig>
  assert(ret == HAL_OK);
3401ed98:	b118      	cbz	r0, 3401eda2 <CAM_Init+0x136>
3401ed9a:	214f      	movs	r1, #79	@ 0x4f
3401ed9c:	4b15      	ldr	r3, [pc, #84]	@ (3401edf4 <CAM_Init+0x188>)
3401ed9e:	4a19      	ldr	r2, [pc, #100]	@ (3401ee04 <CAM_Init+0x198>)
3401eda0:	e76e      	b.n	3401ec80 <CAM_Init+0x14>
  assert(hw_pitch == dcmipp_conf.output_width * dcmipp_conf.output_bpp);
3401eda2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
3401eda4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401eda6:	4353      	muls	r3, r2
3401eda8:	9a02      	ldr	r2, [sp, #8]
3401edaa:	4293      	cmp	r3, r2
3401edac:	d003      	beq.n	3401edb6 <CAM_Init+0x14a>
3401edae:	2150      	movs	r1, #80	@ 0x50
3401edb0:	4b13      	ldr	r3, [pc, #76]	@ (3401ee00 <CAM_Init+0x194>)
3401edb2:	4a14      	ldr	r2, [pc, #80]	@ (3401ee04 <CAM_Init+0x198>)
3401edb4:	e764      	b.n	3401ec80 <CAM_Init+0x14>
  DCMIPP_PipeInitDisplay(cam_conf.width, cam_conf.height);
  DCMIPP_PipeInitNn(cam_conf.width, cam_conf.height);
  DCMIPP_ReduceSpurious(CMW_CAMERA_GetDCMIPPHandle());
3401edb6:	f7e8 f885 	bl	34006ec4 <CMW_CAMERA_GetDCMIPPHandle>
  ret = HAL_DCMIPP_PIPE_EnableLineEvent(hdcmipp, DCMIPP_PIPE1, DCMIPP_MULTILINE_128_LINES);
3401edba:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
3401edbe:	4629      	mov	r1, r5
  DCMIPP_ReduceSpurious(CMW_CAMERA_GetDCMIPPHandle());
3401edc0:	4604      	mov	r4, r0
  ret = HAL_DCMIPP_PIPE_EnableLineEvent(hdcmipp, DCMIPP_PIPE1, DCMIPP_MULTILINE_128_LINES);
3401edc2:	f7f2 fed5 	bl	34011b70 <HAL_DCMIPP_PIPE_EnableLineEvent>
  assert(ret == HAL_OK);
3401edc6:	b118      	cbz	r0, 3401edd0 <CAM_Init+0x164>
3401edc8:	2172      	movs	r1, #114	@ 0x72
3401edca:	4b0a      	ldr	r3, [pc, #40]	@ (3401edf4 <CAM_Init+0x188>)
3401edcc:	4a0e      	ldr	r2, [pc, #56]	@ (3401ee08 <CAM_Init+0x19c>)
3401edce:	e757      	b.n	3401ec80 <CAM_Init+0x14>
  ret = HAL_DCMIPP_PIPE_DisableLineEvent(hdcmipp, DCMIPP_PIPE1);
3401edd0:	2101      	movs	r1, #1
3401edd2:	4620      	mov	r0, r4
3401edd4:	f7f2 ff24 	bl	34011c20 <HAL_DCMIPP_PIPE_DisableLineEvent>
  assert(ret == HAL_OK);
3401edd8:	b118      	cbz	r0, 3401ede2 <CAM_Init+0x176>
3401edda:	2174      	movs	r1, #116	@ 0x74
3401eddc:	4b05      	ldr	r3, [pc, #20]	@ (3401edf4 <CAM_Init+0x188>)
3401edde:	4a0a      	ldr	r2, [pc, #40]	@ (3401ee08 <CAM_Init+0x19c>)
3401ede0:	e74e      	b.n	3401ec80 <CAM_Init+0x14>
}
3401ede2:	b01d      	add	sp, #116	@ 0x74
3401ede4:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401ede6:	bf00      	nop
3401ede8:	3402fd04 	.word	0x3402fd04
3401edec:	340c98dc 	.word	0x340c98dc
3401edf0:	3402fcc7 	.word	0x3402fcc7
3401edf4:	3402fb11 	.word	0x3402fb11
3401edf8:	340c98ca 	.word	0x340c98ca
3401edfc:	340c98b3 	.word	0x340c98b3
3401ee00:	3402fd1a 	.word	0x3402fd1a
3401ee04:	340c988e 	.word	0x340c988e
3401ee08:	340c9878 	.word	0x340c9878

3401ee0c <CAM_DisplayPipe_Start>:

void CAM_DisplayPipe_Start(uint8_t *display_pipe_dst, uint32_t cam_mode)
{
3401ee0c:	460a      	mov	r2, r1
3401ee0e:	b508      	push	{r3, lr}
  int ret;

  ret = CMW_CAMERA_Start(DCMIPP_PIPE1, display_pipe_dst, cam_mode);
3401ee10:	4601      	mov	r1, r0
3401ee12:	2001      	movs	r0, #1
3401ee14:	f7e8 f91c 	bl	34007050 <CMW_CAMERA_Start>
  assert(ret == CMW_ERROR_NONE);
3401ee18:	b128      	cbz	r0, 3401ee26 <CAM_DisplayPipe_Start+0x1a>
3401ee1a:	21a0      	movs	r1, #160	@ 0xa0
3401ee1c:	4b02      	ldr	r3, [pc, #8]	@ (3401ee28 <CAM_DisplayPipe_Start+0x1c>)
3401ee1e:	4a03      	ldr	r2, [pc, #12]	@ (3401ee2c <CAM_DisplayPipe_Start+0x20>)
3401ee20:	4803      	ldr	r0, [pc, #12]	@ (3401ee30 <CAM_DisplayPipe_Start+0x24>)
3401ee22:	f000 fdf1 	bl	3401fa08 <__assert_func>
}
3401ee26:	bd08      	pop	{r3, pc}
3401ee28:	3402fd04 	.word	0x3402fd04
3401ee2c:	340c9862 	.word	0x340c9862
3401ee30:	3402fcc7 	.word	0x3402fcc7

3401ee34 <CAM_NNPipe_Start>:

void CAM_NNPipe_Start(uint8_t *nn_pipe_dst, uint32_t cam_mode)
{
3401ee34:	460a      	mov	r2, r1
3401ee36:	b508      	push	{r3, lr}
  int ret;

  ret = CMW_CAMERA_Start(DCMIPP_PIPE2, nn_pipe_dst, cam_mode);
3401ee38:	4601      	mov	r1, r0
3401ee3a:	2002      	movs	r0, #2
3401ee3c:	f7e8 f908 	bl	34007050 <CMW_CAMERA_Start>
  assert(ret == CMW_ERROR_NONE);
3401ee40:	b128      	cbz	r0, 3401ee4e <CAM_NNPipe_Start+0x1a>
3401ee42:	21a8      	movs	r1, #168	@ 0xa8
3401ee44:	4b02      	ldr	r3, [pc, #8]	@ (3401ee50 <CAM_NNPipe_Start+0x1c>)
3401ee46:	4a03      	ldr	r2, [pc, #12]	@ (3401ee54 <CAM_NNPipe_Start+0x20>)
3401ee48:	4803      	ldr	r0, [pc, #12]	@ (3401ee58 <CAM_NNPipe_Start+0x24>)
3401ee4a:	f000 fddd 	bl	3401fa08 <__assert_func>
}
3401ee4e:	bd08      	pop	{r3, pc}
3401ee50:	3402fd04 	.word	0x3402fd04
3401ee54:	340c9851 	.word	0x340c9851
3401ee58:	3402fcc7 	.word	0x3402fcc7

3401ee5c <CAM_IspUpdate>:

void CAM_IspUpdate(void)
{
3401ee5c:	b508      	push	{r3, lr}
  int ret;

  ret = CMW_CAMERA_Run();
3401ee5e:	f7e8 fa13 	bl	34007288 <CMW_CAMERA_Run>
  assert(ret == CMW_ERROR_NONE);
3401ee62:	b128      	cbz	r0, 3401ee70 <CAM_IspUpdate+0x14>
3401ee64:	21b0      	movs	r1, #176	@ 0xb0
3401ee66:	4b03      	ldr	r3, [pc, #12]	@ (3401ee74 <CAM_IspUpdate+0x18>)
3401ee68:	4a03      	ldr	r2, [pc, #12]	@ (3401ee78 <CAM_IspUpdate+0x1c>)
3401ee6a:	4804      	ldr	r0, [pc, #16]	@ (3401ee7c <CAM_IspUpdate+0x20>)
3401ee6c:	f000 fdcc 	bl	3401fa08 <__assert_func>
}
3401ee70:	bd08      	pop	{r3, pc}
3401ee72:	bf00      	nop
3401ee74:	3402fd04 	.word	0x3402fd04
3401ee78:	340c9843 	.word	0x340c9843
3401ee7c:	3402fcc7 	.word	0x3402fcc7

3401ee80 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
3401ee80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
3401ee82:	4b15      	ldr	r3, [pc, #84]	@ (3401eed8 <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
3401ee84:	217c      	movs	r1, #124	@ 0x7c
3401ee86:	aa01      	add	r2, sp, #4
3401ee88:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
3401ee8a:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
3401ee8c:	f7f0 f9a4 	bl	3400f1d8 <HAL_BSEC_OTP_Read>
3401ee90:	4603      	mov	r3, r0
3401ee92:	b9e0      	cbnz	r0, 3401eece <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
3401ee94:	9a01      	ldr	r2, [sp, #4]
3401ee96:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
3401ee9a:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
3401ee9e:	d017      	beq.n	3401eed0 <Fuse_Programming+0x50>
    {
      data |= bit_mask;
3401eea0:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
3401eea4:	217c      	movs	r1, #124	@ 0x7c
3401eea6:	a802      	add	r0, sp, #8
      data |= bit_mask;
3401eea8:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
3401eeaa:	f7f0 f9b1 	bl	3400f210 <HAL_BSEC_OTP_Program>
3401eeae:	b968      	cbnz	r0, 3401eecc <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
3401eeb0:	217c      	movs	r1, #124	@ 0x7c
3401eeb2:	aa01      	add	r2, sp, #4
3401eeb4:	a802      	add	r0, sp, #8
3401eeb6:	f7f0 f98f 	bl	3400f1d8 <HAL_BSEC_OTP_Read>
3401eeba:	b930      	cbnz	r0, 3401eeca <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
3401eebc:	9b01      	ldr	r3, [sp, #4]
3401eebe:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
3401eec2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
3401eec6:	d003      	beq.n	3401eed0 <Fuse_Programming+0x50>
3401eec8:	e7fe      	b.n	3401eec8 <Fuse_Programming+0x48>
3401eeca:	e7fe      	b.n	3401eeca <Fuse_Programming+0x4a>
3401eecc:	e7fe      	b.n	3401eecc <Fuse_Programming+0x4c>
3401eece:	e7fe      	b.n	3401eece <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
3401eed0:	b005      	add	sp, #20
3401eed2:	f85d fb04 	ldr.w	pc, [sp], #4
3401eed6:	bf00      	nop
3401eed8:	56009000 	.word	0x56009000

3401eedc <HAL_GetTick>:

static TIM_HandleTypeDef tim4;

uint32_t HAL_GetTick()
{
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
3401eedc:	f7eb bfa8 	b.w	3400ae30 <xTaskGetTickCount>

3401eee0 <HAL_Delay>:
}

void HAL_Delay(uint32_t Delay)
{
3401eee0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
3401eee2:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ_MODE())
3401eee6:	b12b      	cbz	r3, 3401eef4 <HAL_Delay+0x14>
    assert(0);
3401eee8:	2127      	movs	r1, #39	@ 0x27
3401eeea:	4b04      	ldr	r3, [pc, #16]	@ (3401eefc <HAL_Delay+0x1c>)
3401eeec:	4a04      	ldr	r2, [pc, #16]	@ (3401ef00 <HAL_Delay+0x20>)
3401eeee:	4805      	ldr	r0, [pc, #20]	@ (3401ef04 <HAL_Delay+0x24>)
3401eef0:	f000 fd8a 	bl	3401fa08 <__assert_func>

  vTaskDelay(Delay / portTICK_PERIOD_MS);
}
3401eef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  vTaskDelay(Delay / portTICK_PERIOD_MS);
3401eef8:	f7ec b942 	b.w	3400b180 <vTaskDelay>
3401eefc:	3402b7cd 	.word	0x3402b7cd
3401ef00:	340c98f1 	.word	0x340c98f1
3401ef04:	3402fd58 	.word	0x3402fd58

3401ef08 <HAL_InitTick>:

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  return HAL_OK;
}
3401ef08:	2000      	movs	r0, #0
3401ef0a:	4770      	bx	lr

3401ef0c <TIM4_Config>:
  WRITE_REG(RCC->APB1ENSR1, Periphs);
3401ef0c:	2204      	movs	r2, #4

void TIM4_Config()
{
3401ef0e:	b513      	push	{r0, r1, r4, lr}
3401ef10:	4b15      	ldr	r3, [pc, #84]	@ (3401ef68 <TIM4_Config+0x5c>)
  const uint32_t tmr_clk_freq = 100000;
  int ret;

  __HAL_RCC_TIM4_CLK_ENABLE();

  tim4.Instance = TIM4;
3401ef12:	4c16      	ldr	r4, [pc, #88]	@ (3401ef6c <TIM4_Config+0x60>)
3401ef14:	f8c3 2a64 	str.w	r2, [r3, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
3401ef18:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
3401ef1c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3401ef1e:	9b01      	ldr	r3, [sp, #4]
3401ef20:	4b13      	ldr	r3, [pc, #76]	@ (3401ef70 <TIM4_Config+0x64>)
3401ef22:	6023      	str	r3, [r4, #0]
  tim4.Init.Period = ~0;
3401ef24:	f04f 33ff 	mov.w	r3, #4294967295
3401ef28:	60e3      	str	r3, [r4, #12]
  tim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / tmr_clk_freq) - 1;
3401ef2a:	f7f6 fb3d 	bl	340155a8 <HAL_RCC_GetPCLK1Freq>
3401ef2e:	4b11      	ldr	r3, [pc, #68]	@ (3401ef74 <TIM4_Config+0x68>)
3401ef30:	fbb0 f0f3 	udiv	r0, r0, r3
  tim4.Init.ClockDivision = 0;
3401ef34:	2300      	movs	r3, #0
  tim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / tmr_clk_freq) - 1;
3401ef36:	3801      	subs	r0, #1
3401ef38:	6060      	str	r0, [r4, #4]
  tim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  ret = HAL_TIM_Base_Init(&tim4);
3401ef3a:	4620      	mov	r0, r4
  tim4.Init.ClockDivision = 0;
3401ef3c:	6123      	str	r3, [r4, #16]
  tim4.Init.CounterMode = TIM_COUNTERMODE_UP;
3401ef3e:	60a3      	str	r3, [r4, #8]
  ret = HAL_TIM_Base_Init(&tim4);
3401ef40:	f7fb fd02 	bl	3401a948 <HAL_TIM_Base_Init>
  assert(ret == HAL_OK);
3401ef44:	b128      	cbz	r0, 3401ef52 <TIM4_Config+0x46>
3401ef46:	213e      	movs	r1, #62	@ 0x3e
3401ef48:	4b0b      	ldr	r3, [pc, #44]	@ (3401ef78 <TIM4_Config+0x6c>)
3401ef4a:	4a0c      	ldr	r2, [pc, #48]	@ (3401ef7c <TIM4_Config+0x70>)

  ret = HAL_TIM_Base_Start(&tim4);
  assert(ret == HAL_OK);
3401ef4c:	480c      	ldr	r0, [pc, #48]	@ (3401ef80 <TIM4_Config+0x74>)
3401ef4e:	f000 fd5b 	bl	3401fa08 <__assert_func>
  ret = HAL_TIM_Base_Start(&tim4);
3401ef52:	4620      	mov	r0, r4
3401ef54:	f7fb fb5e 	bl	3401a614 <HAL_TIM_Base_Start>
  assert(ret == HAL_OK);
3401ef58:	b118      	cbz	r0, 3401ef62 <TIM4_Config+0x56>
3401ef5a:	2141      	movs	r1, #65	@ 0x41
3401ef5c:	4b06      	ldr	r3, [pc, #24]	@ (3401ef78 <TIM4_Config+0x6c>)
3401ef5e:	4a07      	ldr	r2, [pc, #28]	@ (3401ef7c <TIM4_Config+0x70>)
3401ef60:	e7f4      	b.n	3401ef4c <TIM4_Config+0x40>
}
3401ef62:	b002      	add	sp, #8
3401ef64:	bd10      	pop	{r4, pc}
3401ef66:	bf00      	nop
3401ef68:	56028000 	.word	0x56028000
3401ef6c:	340e4908 	.word	0x340e4908
3401ef70:	50000800 	.word	0x50000800
3401ef74:	000186a0 	.word	0x000186a0
3401ef78:	3402fb11 	.word	0x3402fb11
3401ef7c:	340c98e5 	.word	0x340c98e5
3401ef80:	3402fd58 	.word	0x3402fd58

3401ef84 <TIM4_Get_Value>:

uint32_t TIM4_Get_Value()
{
  return __HAL_TIM_GET_COUNTER(&tim4);
3401ef84:	4b01      	ldr	r3, [pc, #4]	@ (3401ef8c <TIM4_Get_Value+0x8>)
3401ef86:	681b      	ldr	r3, [r3, #0]
3401ef88:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
3401ef8a:	4770      	bx	lr
3401ef8c:	340e4908 	.word	0x340e4908

3401ef90 <vApplicationGetIdleTaskMemory>:
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
3401ef90:	4b03      	ldr	r3, [pc, #12]	@ (3401efa0 <vApplicationGetIdleTaskMemory+0x10>)
3401ef92:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
3401ef94:	4b03      	ldr	r3, [pc, #12]	@ (3401efa4 <vApplicationGetIdleTaskMemory+0x14>)
3401ef96:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
3401ef98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401ef9c:	6013      	str	r3, [r2, #0]
}
3401ef9e:	4770      	bx	lr
3401efa0:	340e48a8 	.word	0x340e48a8
3401efa4:	340e38a8 	.word	0x340e38a8

3401efa8 <vApplicationGetTimerTaskMemory>:
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
3401efa8:	4b03      	ldr	r3, [pc, #12]	@ (3401efb8 <vApplicationGetTimerTaskMemory+0x10>)
3401efaa:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
3401efac:	4b03      	ldr	r3, [pc, #12]	@ (3401efbc <vApplicationGetTimerTaskMemory+0x14>)
3401efae:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
3401efb0:	2380      	movs	r3, #128	@ 0x80
3401efb2:	6013      	str	r3, [r2, #0]
}
3401efb4:	4770      	bx	lr
3401efb6:	bf00      	nop
3401efb8:	340e3848 	.word	0x340e3848
3401efbc:	340e3648 	.word	0x340e3648

3401efc0 <ld_post_process>:

int ld_post_process(float *probs, float *raw_landmarks, ld_point_t landmarks[LD_LANDMARK_NB])
{
  int i;

  if (*probs < LD_PROB_THRESHOLD)
3401efc0:	ed90 7a00 	vldr	s14, [r0]
3401efc4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
3401efc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
3401efcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
3401efd0:	b500      	push	{lr}
  if (*probs < LD_PROB_THRESHOLD)
3401efd2:	d418      	bmi.n	3401f006 <ld_post_process+0x46>
    return 0;

  for (i = 0; i < LD_LANDMARK_NB; i++) {
    landmarks[i].x = raw_landmarks[i * 3 + 0] / LD_WIDTH;
3401efd4:	f04f 0e15 	mov.w	lr, #21
3401efd8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 3401f00c <ld_post_process+0x4c>
3401efdc:	f04e e001 	dls	lr, lr
3401efe0:	edd1 6a00 	vldr	s13, [r1]
3401efe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
3401efe8:	ed82 7a00 	vstr	s14, [r2]
    landmarks[i].y = raw_landmarks[i * 3 + 1] / LD_WIDTH;
3401efec:	edd1 6a01 	vldr	s13, [r1, #4]
3401eff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  for (i = 0; i < LD_LANDMARK_NB; i++) {
3401eff4:	310c      	adds	r1, #12
    landmarks[i].y = raw_landmarks[i * 3 + 1] / LD_WIDTH;
3401eff6:	ed82 7a01 	vstr	s14, [r2, #4]
  for (i = 0; i < LD_LANDMARK_NB; i++) {
3401effa:	3208      	adds	r2, #8
3401effc:	f00f c011 	le	lr, 3401efe0 <ld_post_process+0x20>
  }

  return 1;
3401f000:	2001      	movs	r0, #1
}
3401f002:	f85d fb04 	ldr.w	pc, [sp], #4
    return 0;
3401f006:	2000      	movs	r0, #0
3401f008:	e7fb      	b.n	3401f002 <ld_post_process+0x42>
3401f00a:	bf00      	nop
3401f00c:	43600000 	.word	0x43600000

3401f010 <LL_MEM_EnableClock>:
  WRITE_REG(RCC->MEMENSR, Memories);
3401f010:	4b04      	ldr	r3, [pc, #16]	@ (3401f024 <LL_MEM_EnableClock+0x14>)
{
3401f012:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
3401f014:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  tmpreg = READ_REG(RCC->MEMENR);
3401f018:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
3401f01c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3401f01e:	9b01      	ldr	r3, [sp, #4]
}
3401f020:	b002      	add	sp, #8
3401f022:	4770      	bx	lr
3401f024:	56028000 	.word	0x56028000

3401f028 <LL_AHB5_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3401f028:	4b04      	ldr	r3, [pc, #16]	@ (3401f03c <LL_AHB5_GRP1_EnableClock+0x14>)
{
3401f02a:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3401f02c:	f8c3 0a60 	str.w	r0, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3401f030:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
3401f034:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3401f036:	9b01      	ldr	r3, [sp, #4]
}
3401f038:	b002      	add	sp, #8
3401f03a:	4770      	bx	lr
3401f03c:	56028000 	.word	0x56028000

3401f040 <SystemClock_Config>:
  {
  }
}

static void SystemClock_Config(void)
{
3401f040:	b530      	push	{r4, r5, lr}
3401f042:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3401f046:	2240      	movs	r2, #64	@ 0x40
3401f048:	2100      	movs	r1, #0
3401f04a:	4668      	mov	r0, sp
3401f04c:	f002 fb62 	bl	34021714 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3401f050:	2298      	movs	r2, #152	@ 0x98
3401f052:	2100      	movs	r1, #0
3401f054:	a810      	add	r0, sp, #64	@ 0x40
3401f056:	f002 fb5d 	bl	34021714 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3401f05a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
3401f05e:	2100      	movs	r1, #0
3401f060:	a836      	add	r0, sp, #216	@ 0xd8
3401f062:	f002 fb57 	bl	34021714 <memset>

  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
3401f066:	2001      	movs	r0, #1
3401f068:	f7ee fbde 	bl	3400d828 <BSP_SMPS_Init>
  HAL_Delay(1); /* Assuming Voltage Ramp Speed of 1mV/us --> 100mV increase takes 100us */
3401f06c:	2001      	movs	r0, #1
3401f06e:	f7ff ff37 	bl	3401eee0 <HAL_Delay>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
3401f072:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
3401f074:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
3401f076:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
3401f078:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
3401f07a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
3401f07c:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
3401f080:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
3401f084:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
3401f086:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
3401f088:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
3401f08c:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
3401f090:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
3401f094:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
3401f098:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
3401f09c:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
3401f0a0:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
3401f0a4:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
3401f0a6:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3401f0a8:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
3401f0aa:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
3401f0ae:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
3401f0b2:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
3401f0b6:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
3401f0ba:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
3401f0bc:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3401f0be:	f7f5 fc29 	bl	34014914 <HAL_RCC_OscConfig>
3401f0c2:	b100      	cbz	r0, 3401f0c6 <SystemClock_Config+0x86>
  {
    while(1);
3401f0c4:	e7fe      	b.n	3401f0c4 <SystemClock_Config+0x84>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
3401f0c6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
3401f0ca:	227f      	movs	r2, #127	@ 0x7f
3401f0cc:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
3401f0d0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3401f0d4:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
3401f0d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
3401f0da:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
3401f0de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
3401f0e2:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
3401f0e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
3401f0ea:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
3401f0ee:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
3401f0f2:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
3401f0f6:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
3401f0fa:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
3401f0fc:	4668      	mov	r0, sp
3401f0fe:	f7f6 f805 	bl	3401510c <HAL_RCC_ClockConfig>
3401f102:	b100      	cbz	r0, 3401f106 <SystemClock_Config+0xc6>
  {
    while(1);
3401f104:	e7fe      	b.n	3401f104 <SystemClock_Config+0xc4>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
3401f106:	4b08      	ldr	r3, [pc, #32]	@ (3401f128 <SystemClock_Config+0xe8>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3401f108:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
3401f10a:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3401f10c:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
3401f110:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
3401f114:	4b05      	ldr	r3, [pc, #20]	@ (3401f12c <SystemClock_Config+0xec>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3401f116:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
3401f118:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3401f11a:	f7f6 fb71 	bl	34015800 <HAL_RCCEx_PeriphCLKConfig>
3401f11e:	b100      	cbz	r0, 3401f122 <SystemClock_Config+0xe2>
  {
    while (1);
3401f120:	e7fe      	b.n	3401f120 <SystemClock_Config+0xe0>
  }
}
3401f122:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
3401f126:	bd30      	pop	{r4, r5, pc}
3401f128:	03000014 	.word	0x03000014
3401f12c:	03000414 	.word	0x03000414

3401f130 <main_thread_fct>:

  return -1;
}

static void main_thread_fct(void *arg)
{
3401f130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
3401f134:	b09b      	sub	sp, #108	@ 0x6c
  IRQn_Type i;

  /* Copy SysTick_IRQn priority set by RTOS and use it as default priorities for IRQs. We are now sure that all irqs
   * have default priority below or equal to configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY.
   */
  HAL_NVIC_GetPriority(SysTick_IRQn, HAL_NVIC_GetPriorityGrouping(), &preemptPriority, &subPriority);
3401f136:	f7f0 fa25 	bl	3400f584 <HAL_NVIC_GetPriorityGrouping>
3401f13a:	ab02      	add	r3, sp, #8
3401f13c:	4601      	mov	r1, r0
3401f13e:	aa01      	add	r2, sp, #4
3401f140:	f04f 30ff 	mov.w	r0, #4294967295
3401f144:	f7f0 fa26 	bl	3400f594 <HAL_NVIC_GetPriority>
3401f148:	2400      	movs	r4, #0
  for (i = PVD_PVM_IRQn; i <= LTDC_UP_ERR_IRQn; i++)
    HAL_NVIC_SetPriority(i, preemptPriority, subPriority);
3401f14a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
3401f14e:	b220      	sxth	r0, r4
  for (i = PVD_PVM_IRQn; i <= LTDC_UP_ERR_IRQn; i++)
3401f150:	3401      	adds	r4, #1
    HAL_NVIC_SetPriority(i, preemptPriority, subPriority);
3401f152:	f7f0 f9a5 	bl	3400f4a0 <HAL_NVIC_SetPriority>
  for (i = PVD_PVM_IRQn; i <= LTDC_UP_ERR_IRQn; i++)
3401f156:	2cc3      	cmp	r4, #195	@ 0xc3
3401f158:	d1f7      	bne.n	3401f14a <main_thread_fct+0x1a>

  /* Call SystemClock_Config() after vTaskStartScheduler() since it call HAL_Delay() which call vTaskDelay(). Drawback
   * is that we must call vPortSetupTimerInterrupt() since SystemCoreClock value has been modified by SystemClock_Config()
   */
  SystemClock_Config();
3401f15a:	f7ff ff71 	bl	3401f040 <SystemClock_Config>
  vPortSetupTimerInterrupt();
3401f15e:	f7ec fc5d 	bl	3400ba1c <vPortSetupTimerInterrupt>
  WRITE_REG(RCC->APB2ENSR, Periphs);
3401f162:	2310      	movs	r3, #16
3401f164:	4ca9      	ldr	r4, [pc, #676]	@ (3401f40c <main_thread_fct+0x2dc>)
  gpio_init.Pull      = GPIO_PULLUP;
3401f166:	2502      	movs	r5, #2
3401f168:	f8c4 3a6c 	str.w	r3, [r4, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
3401f16c:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
3401f170:	2701      	movs	r7, #1
3401f172:	9212      	str	r2, [sp, #72]	@ 0x48
  (void)tmpreg;
3401f174:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3401f176:	f8c4 3a5c 	str.w	r3, [r4, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3401f17a:	f8d4 325c 	ldr.w	r3, [r4, #604]	@ 0x25c
  gpio_init.Alternate = GPIO_AF7_USART1;
3401f17e:	f04f 0807 	mov.w	r8, #7
3401f182:	9311      	str	r3, [sp, #68]	@ 0x44
  (void)tmpreg;
3401f184:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  gpio_init.Pin       = GPIO_PIN_5 | GPIO_PIN_6;
3401f186:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOE, &gpio_init);
3401f188:	48a1      	ldr	r0, [pc, #644]	@ (3401f410 <main_thread_fct+0x2e0>)
3401f18a:	a915      	add	r1, sp, #84	@ 0x54
  gpio_init.Pin       = GPIO_PIN_5 | GPIO_PIN_6;
3401f18c:	9315      	str	r3, [sp, #84]	@ 0x54
  gpio_init.Pull      = GPIO_PULLUP;
3401f18e:	e9cd 5716 	strd	r5, r7, [sp, #88]	@ 0x58
  gpio_init.Speed     = GPIO_SPEED_FREQ_HIGH;
3401f192:	9518      	str	r5, [sp, #96]	@ 0x60
  gpio_init.Alternate = GPIO_AF7_USART1;
3401f194:	f8cd 8064 	str.w	r8, [sp, #100]	@ 0x64
  HAL_GPIO_Init(GPIOE, &gpio_init);
3401f198:	f7f3 fa82 	bl	340126a0 <HAL_GPIO_Init>
  huart1.Init.BaudRate     = 115200;
3401f19c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance          = USART1;
3401f1a0:	489c      	ldr	r0, [pc, #624]	@ (3401f414 <main_thread_fct+0x2e4>)
  huart1.Init.BaudRate     = 115200;
3401f1a2:	4a9d      	ldr	r2, [pc, #628]	@ (3401f418 <main_thread_fct+0x2e8>)
  huart1.Init.Parity       = UART_PARITY_NONE;
3401f1a4:	210c      	movs	r1, #12
  huart1.Init.BaudRate     = 115200;
3401f1a6:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Parity       = UART_PARITY_NONE;
3401f1aa:	2300      	movs	r3, #0
3401f1ac:	e9c0 3104 	strd	r3, r1, [r0, #16]
  huart1.Init.StopBits     = UART_STOPBITS_1;
3401f1b0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
3401f1b4:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
3401f1b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3401f1ba:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
3401f1bc:	f7fc f8aa 	bl	3401b314 <HAL_UART_Init>
3401f1c0:	4602      	mov	r2, r0
3401f1c2:	b100      	cbz	r0, 3401f1c6 <main_thread_fct+0x96>
    while (1);
3401f1c4:	e7fe      	b.n	3401f1c4 <main_thread_fct+0x94>
  __HAL_RCC_NPU_CLK_ENABLE();
3401f1c6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401f1ca:	f8df 92a0 	ldr.w	r9, [pc, #672]	@ 3401f46c <main_thread_fct+0x33c>
3401f1ce:	f7ff ff2b 	bl	3401f028 <LL_AHB5_GRP1_EnableClock>
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3401f1d2:	f8c4 0a20 	str.w	r0, [r4, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401f1d6:	f8c9 0220 	str.w	r0, [r9, #544]	@ 0x220
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
3401f1da:	4638      	mov	r0, r7
3401f1dc:	f7ff ff18 	bl	3401f010 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
3401f1e0:	4628      	mov	r0, r5
3401f1e2:	f7ff ff15 	bl	3401f010 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
3401f1e6:	2004      	movs	r0, #4
3401f1e8:	f7ff ff12 	bl	3401f010 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
3401f1ec:	2008      	movs	r0, #8
3401f1ee:	f7ff ff0f 	bl	3401f010 <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
3401f1f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3401f1f6:	f8c4 3a54 	str.w	r3, [r4, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
3401f1fa:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401f1fe:	a815      	add	r0, sp, #84	@ 0x54
3401f200:	9313      	str	r3, [sp, #76]	@ 0x4c
  (void)tmpreg;
3401f202:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
3401f204:	4b85      	ldr	r3, [pc, #532]	@ (3401f41c <main_thread_fct+0x2ec>)
  RAMCFG_HandleTypeDef hramcfg = {0};
3401f206:	e9cd 2216 	strd	r2, r2, [sp, #88]	@ 0x58
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
3401f20a:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401f20c:	f7f5 f91e 	bl	3401444c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
3401f210:	4b83      	ldr	r3, [pc, #524]	@ (3401f420 <main_thread_fct+0x2f0>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401f212:	a815      	add	r0, sp, #84	@ 0x54
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
3401f214:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401f216:	f7f5 f919 	bl	3401444c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3401f21a:	4b82      	ldr	r3, [pc, #520]	@ (3401f424 <main_thread_fct+0x2f4>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401f21c:	a815      	add	r0, sp, #84	@ 0x54
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3401f21e:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401f220:	f7f5 f914 	bl	3401444c <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
3401f224:	4b80      	ldr	r3, [pc, #512]	@ (3401f428 <main_thread_fct+0x2f8>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401f226:	a815      	add	r0, sp, #84	@ 0x54
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
3401f228:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401f22a:	f7f5 f90f 	bl	3401444c <HAL_RAMCFG_EnableAXISRAM>

  CONSOLE_Config();

  NPURam_enable();
  Fuse_Programming();
3401f22e:	f7ff fe27 	bl	3401ee80 <Fuse_Programming>
    hgpu2d.Instance = (uint32_t)GPU2D;
3401f232:	487e      	ldr	r0, [pc, #504]	@ (3401f42c <main_thread_fct+0x2fc>)
3401f234:	4b7e      	ldr	r3, [pc, #504]	@ (3401f430 <main_thread_fct+0x300>)
3401f236:	6003      	str	r3, [r0, #0]
    if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
3401f238:	f7f3 fda4 	bl	34012d84 <HAL_GPU2D_Init>
3401f23c:	4606      	mov	r6, r0
3401f23e:	b128      	cbz	r0, 3401f24c <main_thread_fct+0x11c>
        assert(0);
3401f240:	21a4      	movs	r1, #164	@ 0xa4
3401f242:	4b7c      	ldr	r3, [pc, #496]	@ (3401f434 <main_thread_fct+0x304>)
3401f244:	4a7c      	ldr	r2, [pc, #496]	@ (3401f438 <main_thread_fct+0x308>)
3401f246:	487d      	ldr	r0, [pc, #500]	@ (3401f43c <main_thread_fct+0x30c>)
3401f248:	f000 fbde 	bl	3401fa08 <__assert_func>
    HAL_ICACHE_DeInit();
3401f24c:	f7f4 fb4c 	bl	340138e8 <HAL_ICACHE_DeInit>
    HAL_ICACHE_Disable();
3401f250:	f7f4 fb6e 	bl	34013930 <HAL_ICACHE_Disable>
    HAL_ICACHE_ConfigAssociativityMode(ICACHE_4WAYS);
3401f254:	2004      	movs	r0, #4
3401f256:	f7f4 fb2d 	bl	340138b4 <HAL_ICACHE_ConfigAssociativityMode>
    HAL_ICACHE_Enable();
3401f25a:	f7f4 fb5f 	bl	3401391c <HAL_ICACHE_Enable>
  npu_cache_init();
3401f25e:	f7e2 ffa5 	bl	340021ac <npu_cache_init>
  npu_cache_enable();
3401f262:	f7e2 ffad 	bl	340021c0 <npu_cache_enable>

  NPUCache_config();

#ifdef STM32N6570_DK_REV
  /*** External RAM and NOR Flash *********************************************/
  BSP_XSPI_RAM_Init(0);
3401f266:	4630      	mov	r0, r6
3401f268:	f7ef fc62 	bl	3400eb30 <BSP_XSPI_RAM_Init>
  BSP_XSPI_RAM_EnableMemoryMappedMode(0);
3401f26c:	4630      	mov	r0, r6
3401f26e:	f7ef fd83 	bl	3400ed78 <BSP_XSPI_RAM_EnableMemoryMappedMode>
#endif

  BSP_XSPI_NOR_Init_t NOR_Init;
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3401f272:	f240 1301 	movw	r3, #257	@ 0x101
  NOR_Init.TransferRate = BSP_XSPI_NOR_DTR_TRANSFER;
  BSP_XSPI_NOR_Init(0, &NOR_Init);
3401f276:	4669      	mov	r1, sp
3401f278:	4630      	mov	r0, r6
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3401f27a:	f8ad 3000 	strh.w	r3, [sp]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
3401f27e:	f7ef fb11 	bl	3400e8a4 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
3401f282:	4630      	mov	r0, r6
3401f284:	f7ef fa7c 	bl	3400e780 <BSP_XSPI_NOR_EnableMemoryMappedMode>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3401f288:	f44f 7300 	mov.w	r3, #512	@ 0x200
3401f28c:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
3401f290:	f8d4 3258 	ldr.w	r3, [r4, #600]	@ 0x258
  RIMC_master.MasterCID = RIF_CID_1;
3401f294:	9515      	str	r5, [sp, #84]	@ 0x54
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3401f296:	2503      	movs	r5, #3
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3401f298:	4638      	mov	r0, r7
3401f29a:	9314      	str	r3, [sp, #80]	@ 0x50
3401f29c:	a915      	add	r1, sp, #84	@ 0x54
  (void)tmpreg;
3401f29e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3401f2a0:	9516      	str	r5, [sp, #88]	@ 0x58
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3401f2a2:	f7fb f8db 	bl	3401a45c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
3401f2a6:	a915      	add	r1, sp, #84	@ 0x54
3401f2a8:	2008      	movs	r0, #8
3401f2aa:	f7fb f8d7 	bl	3401a45c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
3401f2ae:	a915      	add	r1, sp, #84	@ 0x54
3401f2b0:	2009      	movs	r0, #9
3401f2b2:	f7fb f8d3 	bl	3401a45c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
3401f2b6:	a915      	add	r1, sp, #84	@ 0x54
3401f2b8:	200a      	movs	r0, #10
3401f2ba:	f7fb f8cf 	bl	3401a45c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
3401f2be:	a915      	add	r1, sp, #84	@ 0x54
3401f2c0:	200b      	movs	r0, #11
3401f2c2:	f7fb f8cb 	bl	3401a45c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
3401f2c6:	a915      	add	r1, sp, #84	@ 0x54
3401f2c8:	2004      	movs	r0, #4
3401f2ca:	f7fb f8c7 	bl	3401a45c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_GPU2D , &RIMC_master);
3401f2ce:	4640      	mov	r0, r8
3401f2d0:	a915      	add	r1, sp, #84	@ 0x54
3401f2d2:	f7fb f8c3 	bl	3401a45c <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_GFXMMU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f2d6:	4629      	mov	r1, r5
3401f2d8:	4859      	ldr	r0, [pc, #356]	@ (3401f440 <main_thread_fct+0x310>)
3401f2da:	f7fb f915 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_GPU2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f2de:	4629      	mov	r1, r5
3401f2e0:	4858      	ldr	r0, [pc, #352]	@ (3401f444 <main_thread_fct+0x314>)
3401f2e2:	f7fb f911 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_ICACHE , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f2e6:	4629      	mov	r1, r5
3401f2e8:	4857      	ldr	r0, [pc, #348]	@ (3401f448 <main_thread_fct+0x318>)
3401f2ea:	f7fb f90d 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f2ee:	4629      	mov	r1, r5
3401f2f0:	4856      	ldr	r0, [pc, #344]	@ (3401f44c <main_thread_fct+0x31c>)
3401f2f2:	f7fb f909 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f2f6:	4629      	mov	r1, r5
3401f2f8:	4855      	ldr	r0, [pc, #340]	@ (3401f450 <main_thread_fct+0x320>)
3401f2fa:	f7fb f905 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f2fe:	4629      	mov	r1, r5
3401f300:	4854      	ldr	r0, [pc, #336]	@ (3401f454 <main_thread_fct+0x324>)
3401f302:	f7fb f901 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f306:	4629      	mov	r1, r5
3401f308:	4853      	ldr	r0, [pc, #332]	@ (3401f458 <main_thread_fct+0x328>)
3401f30a:	f7fb f8fd 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f30e:	4629      	mov	r1, r5
3401f310:	4852      	ldr	r0, [pc, #328]	@ (3401f45c <main_thread_fct+0x32c>)
3401f312:	f7fb f8f9 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f316:	4629      	mov	r1, r5
3401f318:	4851      	ldr	r0, [pc, #324]	@ (3401f460 <main_thread_fct+0x330>)
3401f31a:	f7fb f8f5 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f31e:	4629      	mov	r1, r5
3401f320:	4850      	ldr	r0, [pc, #320]	@ (3401f464 <main_thread_fct+0x334>)
3401f322:	f7fb f8f1 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f326:	4629      	mov	r1, r5
3401f328:	484f      	ldr	r0, [pc, #316]	@ (3401f468 <main_thread_fct+0x338>)
3401f32a:	f7fb f8ed 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401f32e:	4629      	mov	r1, r5
3401f330:	2004      	movs	r0, #4
3401f332:	f7fb f8e9 	bl	3401a508 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3401f336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401f33a:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
3401f33e:	f8d4 2258 	ldr.w	r2, [r4, #600]	@ 0x258
3401f342:	9215      	str	r2, [sp, #84]	@ 0x54
  (void)tmpreg;
3401f344:	9a15      	ldr	r2, [sp, #84]	@ 0x54
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
3401f346:	f8c4 3a18 	str.w	r3, [r4, #2584]	@ 0xa18
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
3401f34a:	f8c9 3218 	str.w	r3, [r9, #536]	@ 0x218
  WRITE_REG(RCC->BUSLPENSR, Bus);
3401f34e:	f04f 33ff 	mov.w	r3, #4294967295
3401f352:	f8c4 3a84 	str.w	r3, [r4, #2692]	@ 0xa84
  tmpreg = READ_REG(RCC->BUSLPENR);
3401f356:	f8d4 2284 	ldr.w	r2, [r4, #644]	@ 0x284
3401f35a:	9210      	str	r2, [sp, #64]	@ 0x40
  (void)tmpreg;
3401f35c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  WRITE_REG(RCC->MEMLPENSR, Memories);
3401f35e:	f8c4 3a8c 	str.w	r3, [r4, #2700]	@ 0xa8c
  tmpreg = READ_REG(RCC->MEMLPENR);
3401f362:	f8d4 228c 	ldr.w	r2, [r4, #652]	@ 0x28c
3401f366:	920f      	str	r2, [sp, #60]	@ 0x3c
  (void)tmpreg;
3401f368:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  WRITE_REG(RCC->AHB1LPENSR, Periphs);
3401f36a:	f8c4 3a90 	str.w	r3, [r4, #2704]	@ 0xa90
  tmpreg = READ_REG(RCC->AHB1LPENR);
3401f36e:	f8d4 2290 	ldr.w	r2, [r4, #656]	@ 0x290
3401f372:	920e      	str	r2, [sp, #56]	@ 0x38
  (void)tmpreg;
3401f374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  WRITE_REG(RCC->AHB2LPENSR, Periphs);
3401f376:	f8c4 3a94 	str.w	r3, [r4, #2708]	@ 0xa94
  tmpreg = READ_REG(RCC->AHB2LPENR);
3401f37a:	f8d4 2294 	ldr.w	r2, [r4, #660]	@ 0x294
3401f37e:	920d      	str	r2, [sp, #52]	@ 0x34
  (void)tmpreg;
3401f380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  WRITE_REG(RCC->AHB3LPENSR, Periphs);
3401f382:	f8c4 3a98 	str.w	r3, [r4, #2712]	@ 0xa98
  tmpreg = READ_REG(RCC->AHB3LPENR);
3401f386:	f8d4 2298 	ldr.w	r2, [r4, #664]	@ 0x298
3401f38a:	920c      	str	r2, [sp, #48]	@ 0x30
  (void)tmpreg;
3401f38c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  WRITE_REG(RCC->AHB4LPENSR, Periphs);
3401f38e:	f8c4 3a9c 	str.w	r3, [r4, #2716]	@ 0xa9c
  tmpreg = READ_REG(RCC->AHB4LPENR);
3401f392:	f8d4 229c 	ldr.w	r2, [r4, #668]	@ 0x29c
3401f396:	920b      	str	r2, [sp, #44]	@ 0x2c
  (void)tmpreg;
3401f398:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
3401f39a:	f8c4 3aa0 	str.w	r3, [r4, #2720]	@ 0xaa0
  tmpreg = READ_REG(RCC->AHB5LPENR);
3401f39e:	f8d4 22a0 	ldr.w	r2, [r4, #672]	@ 0x2a0
3401f3a2:	920a      	str	r2, [sp, #40]	@ 0x28
  (void)tmpreg;
3401f3a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  WRITE_REG(RCC->APB1LPENSR1, Periphs);
3401f3a6:	f8c4 3aa4 	str.w	r3, [r4, #2724]	@ 0xaa4
  tmpreg = READ_REG(RCC->APB1LPENR1);
3401f3aa:	f8d4 22a4 	ldr.w	r2, [r4, #676]	@ 0x2a4
3401f3ae:	9209      	str	r2, [sp, #36]	@ 0x24
  (void)tmpreg;
3401f3b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  WRITE_REG(RCC->APB1LPENSR2, Periphs);
3401f3b2:	f8c4 3aa8 	str.w	r3, [r4, #2728]	@ 0xaa8
  tmpreg = READ_REG(RCC->APB1LPENR2);
3401f3b6:	f8d4 22a8 	ldr.w	r2, [r4, #680]	@ 0x2a8
3401f3ba:	9208      	str	r2, [sp, #32]
  (void)tmpreg;
3401f3bc:	9a08      	ldr	r2, [sp, #32]
  WRITE_REG(RCC->APB2LPENSR, Periphs);
3401f3be:	f8c4 3aac 	str.w	r3, [r4, #2732]	@ 0xaac
  tmpreg = READ_REG(RCC->APB2LPENR);
3401f3c2:	f8d4 22ac 	ldr.w	r2, [r4, #684]	@ 0x2ac
3401f3c6:	9207      	str	r2, [sp, #28]
  (void)tmpreg;
3401f3c8:	9a07      	ldr	r2, [sp, #28]
  WRITE_REG(RCC->APB4LPENSR1, Periphs);
3401f3ca:	f8c4 3ab4 	str.w	r3, [r4, #2740]	@ 0xab4
  tmpreg = READ_REG(RCC->APB4LPENR1);
3401f3ce:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
3401f3d2:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
3401f3d4:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(RCC->APB4LPENSR2, Periphs);
3401f3d6:	f8c4 3ab8 	str.w	r3, [r4, #2744]	@ 0xab8
  tmpreg = READ_REG(RCC->APB4LPENR2);
3401f3da:	f8d4 22b8 	ldr.w	r2, [r4, #696]	@ 0x2b8
3401f3de:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
3401f3e0:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
3401f3e2:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
3401f3e6:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
3401f3ea:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
3401f3ec:	9a04      	ldr	r2, [sp, #16]
  * @retval None
  */
__STATIC_INLINE void LL_MISC_EnableClockLowPower(uint32_t Misc)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MISCLPENSR, Misc);
3401f3ee:	f8c4 3a88 	str.w	r3, [r4, #2696]	@ 0xa88
  /* Delay after an RCC miscellaneous clock enabling */
  tmpreg = READ_REG(RCC->MISCLPENR);
3401f3f2:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
3401f3f6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
3401f3f8:	9b03      	ldr	r3, [sp, #12]
  LL_APB4_GRP1_EnableClockLowPower(~0);
  LL_APB4_GRP2_EnableClockLowPower(~0);
  LL_APB5_GRP1_EnableClockLowPower(~0);
  LL_MISC_EnableClockLowPower(~0);

  app_run();
3401f3fa:	f7ff f975 	bl	3401e6e8 <app_run>

  vTaskDelete(NULL);
3401f3fe:	4630      	mov	r0, r6
3401f400:	f7eb fc68 	bl	3400acd4 <vTaskDelete>
}
3401f404:	b01b      	add	sp, #108	@ 0x6c
3401f406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3401f40a:	bf00      	nop
3401f40c:	56028000 	.word	0x56028000
3401f410:	56021000 	.word	0x56021000
3401f414:	340e59c0 	.word	0x340e59c0
3401f418:	52001000 	.word	0x52001000
3401f41c:	52023100 	.word	0x52023100
3401f420:	52023180 	.word	0x52023180
3401f424:	52023200 	.word	0x52023200
3401f428:	52023280 	.word	0x52023280
3401f42c:	340e59b4 	.word	0x340e59b4
3401f430:	58034000 	.word	0x58034000
3401f434:	3402b7cd 	.word	0x3402b7cd
3401f438:	340c99a4 	.word	0x340c99a4
3401f43c:	3402fd9a 	.word	0x3402fd9a
3401f440:	30000004 	.word	0x30000004
3401f444:	30000003 	.word	0x30000003
3401f448:	30000002 	.word	0x30000002
3401f44c:	3000000a 	.word	0x3000000a
3401f450:	30000005 	.word	0x30000005
3401f454:	2000001c 	.word	0x2000001c
3401f458:	2000001d 	.word	0x2000001d
3401f45c:	30000006 	.word	0x30000006
3401f460:	30000007 	.word	0x30000007
3401f464:	30000008 	.word	0x30000008
3401f468:	10000018 	.word	0x10000018
3401f46c:	56029000 	.word	0x56029000

3401f470 <main>:
{
3401f470:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
3401f472:	4a3b      	ldr	r2, [pc, #236]	@ (3401f560 <main+0xf0>)
3401f474:	6813      	ldr	r3, [r2, #0]
3401f476:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
3401f47a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
3401f47c:	4b39      	ldr	r3, [pc, #228]	@ (3401f564 <main+0xf4>)
3401f47e:	6a1a      	ldr	r2, [r3, #32]
3401f480:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
3401f484:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
3401f486:	6a1a      	ldr	r2, [r3, #32]
3401f488:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
3401f48c:	621a      	str	r2, [r3, #32]
  HAL_Init();
3401f48e:	f7ef fe50 	bl	3400f132 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
3401f492:	4b35      	ldr	r3, [pc, #212]	@ (3401f568 <main+0xf8>)
3401f494:	695a      	ldr	r2, [r3, #20]
3401f496:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
3401f49a:	d111      	bne.n	3401f4c0 <main+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
3401f49c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401f4a0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3401f4a4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3401f4a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401f4ac:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
3401f4b0:	695a      	ldr	r2, [r3, #20]
3401f4b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
3401f4b6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3401f4b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401f4bc:	f3bf 8f6f 	isb	sy
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
3401f4c0:	4a27      	ldr	r2, [pc, #156]	@ (3401f560 <main+0xf0>)
3401f4c2:	6813      	ldr	r3, [r2, #0]
3401f4c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3401f4c8:	6013      	str	r3, [r2, #0]
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
3401f4ca:	f5a2 4273 	sub.w	r2, r2, #62208	@ 0xf300
3401f4ce:	6953      	ldr	r3, [r2, #20]
3401f4d0:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
3401f4d4:	d128      	bne.n	3401f528 <main+0xb8>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3401f4d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3401f4da:	f3bf 8f4f 	dsb	sy
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3401f4de:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    ccsidr = SCB->CCSIDR;
3401f4e2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3401f4e6:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3401f4ea:	f3c3 334e 	ubfx	r3, r3, #13, #15
3401f4ee:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3401f4f0:	f100 0e01 	add.w	lr, r0, #1
3401f4f4:	4601      	mov	r1, r0
3401f4f6:	f04e e001 	dls	lr, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3401f4fa:	ea03 0604 	and.w	r6, r3, r4
3401f4fe:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
3401f502:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
3401f506:	3901      	subs	r1, #1
3401f508:	f00f c807 	le	lr, 3401f4fe <main+0x8e>
    } while(sets-- != 0U);
3401f50c:	3b20      	subs	r3, #32
3401f50e:	f113 0f20 	cmn.w	r3, #32
3401f512:	d1ed      	bne.n	3401f4f0 <main+0x80>
3401f514:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
3401f518:	6953      	ldr	r3, [r2, #20]
3401f51a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3401f51e:	6153      	str	r3, [r2, #20]
3401f520:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401f524:	f3bf 8f6f 	isb	sy
  hdl = xTaskCreateStatic(main_thread_fct, "main", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1,
3401f528:	4b10      	ldr	r3, [pc, #64]	@ (3401f56c <main+0xfc>)
3401f52a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3401f52e:	9302      	str	r3, [sp, #8]
3401f530:	4b0f      	ldr	r3, [pc, #60]	@ (3401f570 <main+0x100>)
3401f532:	4910      	ldr	r1, [pc, #64]	@ (3401f574 <main+0x104>)
3401f534:	9301      	str	r3, [sp, #4]
3401f536:	2301      	movs	r3, #1
3401f538:	480f      	ldr	r0, [pc, #60]	@ (3401f578 <main+0x108>)
3401f53a:	9300      	str	r3, [sp, #0]
3401f53c:	2300      	movs	r3, #0
3401f53e:	f7eb fad5 	bl	3400aaec <xTaskCreateStatic>
  assert(hdl != NULL);
3401f542:	b930      	cbnz	r0, 3401f552 <main+0xe2>
3401f544:	f44f 71a2 	mov.w	r1, #324	@ 0x144
3401f548:	4b0c      	ldr	r3, [pc, #48]	@ (3401f57c <main+0x10c>)
3401f54a:	4a0d      	ldr	r2, [pc, #52]	@ (3401f580 <main+0x110>)
  assert(0);
3401f54c:	480d      	ldr	r0, [pc, #52]	@ (3401f584 <main+0x114>)
3401f54e:	f000 fa5b 	bl	3401fa08 <__assert_func>
  vTaskStartScheduler();
3401f552:	f7eb fc15 	bl	3400ad80 <vTaskStartScheduler>
  assert(0);
3401f556:	f240 1147 	movw	r1, #327	@ 0x147
3401f55a:	4b0b      	ldr	r3, [pc, #44]	@ (3401f588 <main+0x118>)
3401f55c:	4a08      	ldr	r2, [pc, #32]	@ (3401f580 <main+0x110>)
3401f55e:	e7f5      	b.n	3401f54c <main+0xdc>
3401f560:	e001e000 	.word	0xe001e000
3401f564:	56028000 	.word	0x56028000
3401f568:	e000ed00 	.word	0xe000ed00
3401f56c:	340e5954 	.word	0x340e5954
3401f570:	340e4954 	.word	0x340e4954
3401f574:	3402fdd4 	.word	0x3402fdd4
3401f578:	3401f131 	.word	0x3401f131
3401f57c:	3402fc98 	.word	0x3402fc98
3401f580:	340c99af 	.word	0x340c99af
3401f584:	3402fd9a 	.word	0x3402fd9a
3401f588:	3402b7cd 	.word	0x3402b7cd

3401f58c <IAC_IRQHandler>:
  while (1)
3401f58c:	e7fe      	b.n	3401f58c <IAC_IRQHandler>

3401f58e <MX_DCMIPP_ClockConfig>:

HAL_StatusTypeDef MX_DCMIPP_ClockConfig(DCMIPP_HandleTypeDef *hdcmipp)
{
3401f58e:	b500      	push	{lr}
3401f590:	b0e5      	sub	sp, #404	@ 0x194
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3401f592:	f44f 72c8 	mov.w	r2, #400	@ 0x190
3401f596:	2100      	movs	r1, #0
3401f598:	4668      	mov	r0, sp
3401f59a:	f002 f8bb 	bl	34021714 <memset>
  HAL_StatusTypeDef ret;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DCMIPP;
3401f59e:	2300      	movs	r3, #0
3401f5a0:	2210      	movs	r2, #16
3401f5a2:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_PeriphCLKInitStruct.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_IC17;
3401f5a6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockSelection = RCC_ICCLKSOURCE_PLL2;
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockDivider = 3;
3401f5aa:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
  RCC_PeriphCLKInitStruct.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_IC17;
3401f5ae:	9332      	str	r3, [sp, #200]	@ 0xc8
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockDivider = 3;
3401f5b0:	2303      	movs	r3, #3
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401f5b2:	4668      	mov	r0, sp
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockDivider = 3;
3401f5b4:	e9cd 1322 	strd	r1, r3, [sp, #136]	@ 0x88
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401f5b8:	f7f6 f922 	bl	34015800 <HAL_RCCEx_PeriphCLKConfig>
  if (ret)
3401f5bc:	b948      	cbnz	r0, 3401f5d2 <MX_DCMIPP_ClockConfig+0x44>
    return ret;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CSI;
3401f5be:	2300      	movs	r3, #0
3401f5c0:	2208      	movs	r2, #8
3401f5c2:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockDivider = 40;
3401f5c6:	2328      	movs	r3, #40	@ 0x28
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockSelection = RCC_ICCLKSOURCE_PLL1;
3401f5c8:	9024      	str	r0, [sp, #144]	@ 0x90
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401f5ca:	4668      	mov	r0, sp
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockDivider = 40;
3401f5cc:	9325      	str	r3, [sp, #148]	@ 0x94
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401f5ce:	f7f6 f917 	bl	34015800 <HAL_RCCEx_PeriphCLKConfig>
  if (ret)
    return ret;

  return HAL_OK;
}
3401f5d2:	b065      	add	sp, #404	@ 0x194
3401f5d4:	f85d fb04 	ldr.w	pc, [sp], #4

3401f5d8 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
3401f5d8:	b508      	push	{r3, lr}
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
3401f5da:	f44f 6080 	mov.w	r0, #1024	@ 0x400
3401f5de:	f7ff fd17 	bl	3401f010 <LL_MEM_EnableClock>
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
3401f5e2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
3401f5e6:	f7ff fd1f 	bl	3401f028 <LL_AHB5_GRP1_EnableClock>
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3401f5ea:	4b04      	ldr	r3, [pc, #16]	@ (3401f5fc <HAL_CACHEAXI_MspInit+0x24>)
3401f5ec:	f8c3 0a20 	str.w	r0, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401f5f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3401f5f4:	f8c3 0220 	str.w	r0, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
3401f5f8:	bd08      	pop	{r3, pc}
3401f5fa:	bf00      	nop
3401f5fc:	56028000 	.word	0x56028000

3401f600 <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
3401f600:	be00      	bkpt	0x0000
  while (1)
3401f602:	e7fe      	b.n	3401f602 <assert_failed+0x2>

3401f604 <HAL_GPU2D_MspInit>:
{
  SCB_CleanInvalidateDCache();
}

void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
3401f604:	b508      	push	{r3, lr}
  if(hgpu2d->Instance==(GPU2D_TypeDef)GPU2D)
3401f606:	6802      	ldr	r2, [r0, #0]
3401f608:	4b0c      	ldr	r3, [pc, #48]	@ (3401f63c <HAL_GPU2D_MspInit+0x38>)
3401f60a:	429a      	cmp	r2, r3
3401f60c:	d115      	bne.n	3401f63a <HAL_GPU2D_MspInit+0x36>
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3401f60e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3401f612:	2260      	movs	r2, #96	@ 0x60
3401f614:	4b0a      	ldr	r3, [pc, #40]	@ (3401f640 <HAL_GPU2D_MspInit+0x3c>)
3401f616:	f8c3 0a20 	str.w	r0, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401f61a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3401f61e:	f8c3 0220 	str.w	r0, [r3, #544]	@ 0x220
  {
    __HAL_RCC_GPU2D_FORCE_RESET();
    __HAL_RCC_GPU2D_RELEASE_RESET();
    __HAL_RCC_GPU2D_CLK_ENABLE();
3401f622:	f7ff fd01 	bl	3401f028 <LL_AHB5_GRP1_EnableClock>
3401f626:	4b07      	ldr	r3, [pc, #28]	@ (3401f644 <HAL_GPU2D_MspInit+0x40>)
3401f628:	f883 2341 	strb.w	r2, [r3, #833]	@ 0x341
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3401f62c:	2202      	movs	r2, #2
3401f62e:	609a      	str	r2, [r3, #8]
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3401f630:	2250      	movs	r2, #80	@ 0x50
3401f632:	f883 2342 	strb.w	r2, [r3, #834]	@ 0x342
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3401f636:	2204      	movs	r2, #4
3401f638:	609a      	str	r2, [r3, #8]
    NVIC_EnableIRQ(GPU2D_IRQn);

    NVIC_SetPriority(GPU2D_ER_IRQn, 5);
    NVIC_EnableIRQ(GPU2D_ER_IRQn);
  }
}
3401f63a:	bd08      	pop	{r3, pc}
3401f63c:	58034000 	.word	0x58034000
3401f640:	56028000 	.word	0x56028000
3401f644:	e000e100 	.word	0xe000e100

3401f648 <HAL_GFXMMU_MspInit>:
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3401f648:	2250      	movs	r2, #80	@ 0x50
    __HAL_RCC_GPU2D_CLK_DISABLE();
  }
}

void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef *hgfxmmu)
{
3401f64a:	b508      	push	{r3, lr}
  /* GFXMMU clock enable */
  __HAL_RCC_GFXMMU_CLK_ENABLE();
3401f64c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
3401f650:	f7ff fcea 	bl	3401f028 <LL_AHB5_GRP1_EnableClock>
3401f654:	4b03      	ldr	r3, [pc, #12]	@ (3401f664 <HAL_GFXMMU_MspInit+0x1c>)
3401f656:	f883 233f 	strb.w	r2, [r3, #831]	@ 0x33f
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3401f65a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3401f65e:	605a      	str	r2, [r3, #4]

  /* Enable GFXMMU interrupt */
  NVIC_SetPriority(GFXMMU_IRQn, 5);
  NVIC_EnableIRQ(GFXMMU_IRQn);
}
3401f660:	bd08      	pop	{r3, pc}
3401f662:	bf00      	nop
3401f664:	e000e100 	.word	0xe000e100

3401f668 <HAL_GPU2D_CommandListCpltCallback>:
static void GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
{
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401f668:	2300      	movs	r3, #0
{
3401f66a:	b507      	push	{r0, r1, r2, lr}
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401f66c:	9301      	str	r3, [sp, #4]
    int ret;

    /* Prevent unused argument(s) compilation warning */
    UNUSED(hgpu2d);

    last_cl_id = CmdListID;
3401f66e:	4b0d      	ldr	r3, [pc, #52]	@ (3401f6a4 <HAL_GPU2D_CommandListCpltCallback+0x3c>)
3401f670:	6019      	str	r1, [r3, #0]
#if defined(NEMA_WAIT_IRQ_BINARY_SEMAPHORE)
    ret = xSemaphoreGiveFromISR(nema_irq_sem, &xHigherPriorityTaskWoken);
3401f672:	4b0d      	ldr	r3, [pc, #52]	@ (3401f6a8 <HAL_GPU2D_CommandListCpltCallback+0x40>)
3401f674:	a901      	add	r1, sp, #4
3401f676:	6818      	ldr	r0, [r3, #0]
3401f678:	f7ea ff96 	bl	3400a5a8 <xQueueGiveFromISR>
    assert(ret == pdTRUE);
3401f67c:	2801      	cmp	r0, #1
3401f67e:	d005      	beq.n	3401f68c <HAL_GPU2D_CommandListCpltCallback+0x24>
3401f680:	215f      	movs	r1, #95	@ 0x5f
3401f682:	4b0a      	ldr	r3, [pc, #40]	@ (3401f6ac <HAL_GPU2D_CommandListCpltCallback+0x44>)
3401f684:	4a0a      	ldr	r2, [pc, #40]	@ (3401f6b0 <HAL_GPU2D_CommandListCpltCallback+0x48>)
3401f686:	480b      	ldr	r0, [pc, #44]	@ (3401f6b4 <HAL_GPU2D_CommandListCpltCallback+0x4c>)
3401f688:	f000 f9be 	bl	3401fa08 <__assert_func>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
3401f68c:	9b01      	ldr	r3, [sp, #4]
3401f68e:	b12b      	cbz	r3, 3401f69c <HAL_GPU2D_CommandListCpltCallback+0x34>
3401f690:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3401f694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3401f698:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
#endif /* NEMA_WAIT_IRQ_BINARY_SEMAPHORE */
}
3401f69c:	b003      	add	sp, #12
3401f69e:	f85d fb04 	ldr.w	pc, [sp], #4
3401f6a2:	bf00      	nop
3401f6a4:	340d08c0 	.word	0x340d08c0
3401f6a8:	340e5a54 	.word	0x340e5a54
3401f6ac:	3402ae28 	.word	0x3402ae28
3401f6b0:	340c9a07 	.word	0x340c9a07
3401f6b4:	3402fdd9 	.word	0x3402fdd9

3401f6b8 <nema_wait_irq>:

    return 0;
}

int nema_wait_irq(void)
{
3401f6b8:	b508      	push	{r3, lr}
#if defined(NEMA_WAIT_IRQ_BINARY_SEMAPHORE)
    int ret;

    ret = xSemaphoreTake(nema_irq_sem, portMAX_DELAY);
3401f6ba:	4b04      	ldr	r3, [pc, #16]	@ (3401f6cc <nema_wait_irq+0x14>)
3401f6bc:	f04f 31ff 	mov.w	r1, #4294967295
3401f6c0:	6818      	ldr	r0, [r3, #0]
3401f6c2:	f7eb f85d 	bl	3400a780 <xQueueSemaphoreTake>
    ret = ret == pdTRUE ? 0 : -1;
#endif

    return 0;
}
3401f6c6:	2000      	movs	r0, #0
3401f6c8:	bd08      	pop	{r3, pc}
3401f6ca:	bf00      	nop
3401f6cc:	340e5a54 	.word	0x340e5a54

3401f6d0 <nema_wait_irq_cl>:

int nema_wait_irq_cl(int cl_id)
{
3401f6d0:	b538      	push	{r3, r4, r5, lr}
3401f6d2:	4604      	mov	r4, r0
    while (last_cl_id < cl_id)
3401f6d4:	4d04      	ldr	r5, [pc, #16]	@ (3401f6e8 <nema_wait_irq_cl+0x18>)
3401f6d6:	682b      	ldr	r3, [r5, #0]
3401f6d8:	42a3      	cmp	r3, r4
3401f6da:	db01      	blt.n	3401f6e0 <nema_wait_irq_cl+0x10>
    {
        (void)nema_wait_irq();
    }

    return 0;
}
3401f6dc:	2000      	movs	r0, #0
3401f6de:	bd38      	pop	{r3, r4, r5, pc}
        (void)nema_wait_irq();
3401f6e0:	f7ff ffea 	bl	3401f6b8 <nema_wait_irq>
3401f6e4:	e7f7      	b.n	3401f6d6 <nema_wait_irq_cl+0x6>
3401f6e6:	bf00      	nop
3401f6e8:	340d08c0 	.word	0x340d08c0

3401f6ec <nema_reg_read>:

    return 0;
}

uint32_t nema_reg_read(uint32_t reg)
{
3401f6ec:	4601      	mov	r1, r0
    return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
3401f6ee:	4801      	ldr	r0, [pc, #4]	@ (3401f6f4 <nema_reg_read+0x8>)
3401f6f0:	f7f3 bb6c 	b.w	34012dcc <HAL_GPU2D_ReadRegister>
3401f6f4:	340e59b4 	.word	0x340e59b4

3401f6f8 <nema_reg_write>:
}

void nema_reg_write(uint32_t reg, uint32_t value)
{
3401f6f8:	460a      	mov	r2, r1
    HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
3401f6fa:	4601      	mov	r1, r0
3401f6fc:	4801      	ldr	r0, [pc, #4]	@ (3401f704 <nema_reg_write+0xc>)
3401f6fe:	f7f3 bb89 	b.w	34012e14 <HAL_GPU2D_WriteRegister>
3401f702:	bf00      	nop
3401f704:	340e59b4 	.word	0x340e59b4

3401f708 <nema_buffer_map>:
}

void *nema_buffer_map(nema_buffer_t *bo)
{
    return bo->base_virt;
}
3401f708:	6880      	ldr	r0, [r0, #8]
3401f70a:	4770      	bx	lr

3401f70c <nema_host_free>:
#endif /* NEMA_CACHED_MEMORY */
}

void nema_host_free(void *ptr)
{
    if (ptr)
3401f70c:	b108      	cbz	r0, 3401f712 <nema_host_free+0x6>
    {
        tsi_free(ptr);
3401f70e:	f00b b897 	b.w	3402a840 <tsi_free>
    }
}
3401f712:	4770      	bx	lr

3401f714 <nema_host_malloc>:

void *nema_host_malloc(unsigned size)
{
3401f714:	4601      	mov	r1, r0
3401f716:	b508      	push	{r3, lr}
    void *ptr = NULL;

    ptr = tsi_malloc(size);
3401f718:	2000      	movs	r0, #0
3401f71a:	f00b f833 	bl	3402a784 <tsi_malloc_pool>
    assert(ptr);
3401f71e:	b930      	cbnz	r0, 3401f72e <nema_host_malloc+0x1a>
3401f720:	f240 1119 	movw	r1, #281	@ 0x119
3401f724:	4b02      	ldr	r3, [pc, #8]	@ (3401f730 <nema_host_malloc+0x1c>)
3401f726:	4a03      	ldr	r2, [pc, #12]	@ (3401f734 <nema_host_malloc+0x20>)
3401f728:	4803      	ldr	r0, [pc, #12]	@ (3401f738 <nema_host_malloc+0x24>)
3401f72a:	f000 f96d 	bl	3401fa08 <__assert_func>

    return ptr;
}
3401f72e:	bd08      	pop	{r3, pc}
3401f730:	3402fe20 	.word	0x3402fe20
3401f734:	340c99bd 	.word	0x340c99bd
3401f738:	3402fdd9 	.word	0x3402fdd9

3401f73c <nema_mutex_lock>:
int nema_mutex_lock(int mutex_id)
{
    int ret = 0;

#if (defined(NEMA_MULTI_PROCESS) || defined(NEMA_MULTI_THREAD))
    if ((mutex_id >= 0) && (mutex_id <= MUTEX_MAX) && (NULL != nema_mutexes_ids[mutex_id]))
3401f73c:	2802      	cmp	r0, #2
{
3401f73e:	b508      	push	{r3, lr}
    if ((mutex_id >= 0) && (mutex_id <= MUTEX_MAX) && (NULL != nema_mutexes_ids[mutex_id]))
3401f740:	d80d      	bhi.n	3401f75e <nema_mutex_lock+0x22>
3401f742:	4b08      	ldr	r3, [pc, #32]	@ (3401f764 <nema_mutex_lock+0x28>)
3401f744:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    int ret = 0;
3401f748:	4618      	mov	r0, r3
    if ((mutex_id >= 0) && (mutex_id <= MUTEX_MAX) && (NULL != nema_mutexes_ids[mutex_id]))
3401f74a:	b13b      	cbz	r3, 3401f75c <nema_mutex_lock+0x20>
    {
        ret = xSemaphoreTake(nema_mutexes_ids[mutex_id], portMAX_DELAY);
3401f74c:	f04f 31ff 	mov.w	r1, #4294967295
3401f750:	f7eb f816 	bl	3400a780 <xQueueSemaphoreTake>
        ret = ret == pdTRUE ? 0 : -1;
3401f754:	3801      	subs	r0, #1
3401f756:	bf18      	it	ne
3401f758:	2001      	movne	r0, #1
3401f75a:	4240      	negs	r0, r0
#else /* !NEMA_MULTI_PROCESS & !NEMA_MULTI_THREAD */
    UNUSED(mutex_id);
#endif /* NEMA_MULTI_PROCESS | NEMA_MULTI_THREAD */

    return ret;
}
3401f75c:	bd08      	pop	{r3, pc}
    int ret = 0;
3401f75e:	2000      	movs	r0, #0
3401f760:	e7fc      	b.n	3401f75c <nema_mutex_lock+0x20>
3401f762:	bf00      	nop
3401f764:	340e5aa8 	.word	0x340e5aa8

3401f768 <nema_mutex_unlock>:
int nema_mutex_unlock(int mutex_id)
{
    int ret = 0;

#if (defined(NEMA_MULTI_PROCESS) || defined(NEMA_MULTI_THREAD))
    if ((mutex_id >= 0) && (mutex_id <= MUTEX_MAX) && (NULL != nema_mutexes_ids[mutex_id]))
3401f768:	2802      	cmp	r0, #2
{
3401f76a:	b510      	push	{r4, lr}
    if ((mutex_id >= 0) && (mutex_id <= MUTEX_MAX) && (NULL != nema_mutexes_ids[mutex_id]))
3401f76c:	d80e      	bhi.n	3401f78c <nema_mutex_unlock+0x24>
3401f76e:	4b08      	ldr	r3, [pc, #32]	@ (3401f790 <nema_mutex_unlock+0x28>)
3401f770:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    int ret = 0;
3401f774:	4620      	mov	r0, r4
    if ((mutex_id >= 0) && (mutex_id <= MUTEX_MAX) && (NULL != nema_mutexes_ids[mutex_id]))
3401f776:	b144      	cbz	r4, 3401f78a <nema_mutex_unlock+0x22>
    {
        ret = xSemaphoreGive(nema_mutexes_ids[mutex_id]);
3401f778:	2300      	movs	r3, #0
3401f77a:	461a      	mov	r2, r3
3401f77c:	4619      	mov	r1, r3
3401f77e:	f7ea fe5b 	bl	3400a438 <xQueueGenericSend>
        ret = ret == pdTRUE ? 0 : -1;
3401f782:	3801      	subs	r0, #1
3401f784:	bf18      	it	ne
3401f786:	2001      	movne	r0, #1
3401f788:	4240      	negs	r0, r0
#else /* !NEMA_MULTI_PROCESS & !NEMA_MULTI_THREAD */
    UNUSED(mutex_id);
#endif /* NEMA_MULTI_PROCESS | NEMA_MULTI_THREAD */

    return ret;
}
3401f78a:	bd10      	pop	{r4, pc}
    int ret = 0;
3401f78c:	2000      	movs	r0, #0
3401f78e:	e7fc      	b.n	3401f78a <nema_mutex_unlock+0x22>
3401f790:	340e5aa8 	.word	0x340e5aa8

3401f794 <nema_buffer_create>:
{
3401f794:	b5f0      	push	{r4, r5, r6, r7, lr}
3401f796:	460e      	mov	r6, r1
    memset(&bo, 0, sizeof(bo));
3401f798:	2700      	movs	r7, #0
{
3401f79a:	b085      	sub	sp, #20
3401f79c:	4604      	mov	r4, r0
    nema_mutex_lock(MUTEX_MALLOC);
3401f79e:	2001      	movs	r0, #1
    memset(&bo, 0, sizeof(bo));
3401f7a0:	9701      	str	r7, [sp, #4]
    nema_mutex_lock(MUTEX_MALLOC);
3401f7a2:	f7ff ffcb 	bl	3401f73c <nema_mutex_lock>
    bo.base_virt = tsi_malloc(size);
3401f7a6:	4631      	mov	r1, r6
3401f7a8:	4638      	mov	r0, r7
3401f7aa:	f00a ffeb 	bl	3402a784 <tsi_malloc_pool>
    memset(&bo, 0, sizeof(bo));
3401f7ae:	466d      	mov	r5, sp
    bo.base_virt = tsi_malloc(size);
3401f7b0:	9002      	str	r0, [sp, #8]
    assert(bo.base_virt);
3401f7b2:	b928      	cbnz	r0, 3401f7c0 <nema_buffer_create+0x2c>
3401f7b4:	21ca      	movs	r1, #202	@ 0xca
3401f7b6:	4b08      	ldr	r3, [pc, #32]	@ (3401f7d8 <nema_buffer_create+0x44>)
3401f7b8:	4a08      	ldr	r2, [pc, #32]	@ (3401f7dc <nema_buffer_create+0x48>)
3401f7ba:	4809      	ldr	r0, [pc, #36]	@ (3401f7e0 <nema_buffer_create+0x4c>)
3401f7bc:	f000 f924 	bl	3401fa08 <__assert_func>
    bo.base_phys = (uint32_t)bo.base_virt;
3401f7c0:	9003      	str	r0, [sp, #12]
    nema_mutex_unlock(MUTEX_MALLOC);
3401f7c2:	2001      	movs	r0, #1
    bo.size      = size;
3401f7c4:	9600      	str	r6, [sp, #0]
    nema_mutex_unlock(MUTEX_MALLOC);
3401f7c6:	f7ff ffcf 	bl	3401f768 <nema_mutex_unlock>
    return bo;
3401f7ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
3401f7ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
3401f7d2:	4620      	mov	r0, r4
3401f7d4:	b005      	add	sp, #20
3401f7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401f7d8:	3402fe99 	.word	0x3402fe99
3401f7dc:	340c99e6 	.word	0x340c99e6
3401f7e0:	3402fdd9 	.word	0x3402fdd9

3401f7e4 <nema_sys_init>:
{
3401f7e4:	b570      	push	{r4, r5, r6, lr}
    nema_mutexes_ids[MUTEX_RB] = xSemaphoreCreateMutexStatic(&nema_mutexes_buffers[MUTEX_RB]);
3401f7e6:	2001      	movs	r0, #1
3401f7e8:	492f      	ldr	r1, [pc, #188]	@ (3401f8a8 <nema_sys_init+0xc4>)
{
3401f7ea:	b086      	sub	sp, #24
    nema_mutexes_ids[MUTEX_RB] = xSemaphoreCreateMutexStatic(&nema_mutexes_buffers[MUTEX_RB]);
3401f7ec:	f7ea fec6 	bl	3400a57c <xQueueCreateMutexStatic>
3401f7f0:	4c2e      	ldr	r4, [pc, #184]	@ (3401f8ac <nema_sys_init+0xc8>)
3401f7f2:	6020      	str	r0, [r4, #0]
    assert(nema_mutexes_ids[MUTEX_RB]);
3401f7f4:	b928      	cbnz	r0, 3401f802 <nema_sys_init+0x1e>
3401f7f6:	2170      	movs	r1, #112	@ 0x70
3401f7f8:	4b2d      	ldr	r3, [pc, #180]	@ (3401f8b0 <nema_sys_init+0xcc>)
3401f7fa:	4a2e      	ldr	r2, [pc, #184]	@ (3401f8b4 <nema_sys_init+0xd0>)
    assert(nema_mutexes_ids[MUTEX_MALLOC]);
3401f7fc:	482e      	ldr	r0, [pc, #184]	@ (3401f8b8 <nema_sys_init+0xd4>)
3401f7fe:	f000 f903 	bl	3401fa08 <__assert_func>
    nema_mutexes_ids[MUTEX_MALLOC] = xSemaphoreCreateMutexStatic(&nema_mutexes_buffers[MUTEX_MALLOC]);
3401f802:	2001      	movs	r0, #1
3401f804:	492d      	ldr	r1, [pc, #180]	@ (3401f8bc <nema_sys_init+0xd8>)
3401f806:	f7ea feb9 	bl	3400a57c <xQueueCreateMutexStatic>
3401f80a:	6060      	str	r0, [r4, #4]
    assert(nema_mutexes_ids[MUTEX_MALLOC]);
3401f80c:	b918      	cbnz	r0, 3401f816 <nema_sys_init+0x32>
3401f80e:	2172      	movs	r1, #114	@ 0x72
3401f810:	4b2b      	ldr	r3, [pc, #172]	@ (3401f8c0 <nema_sys_init+0xdc>)
3401f812:	4a28      	ldr	r2, [pc, #160]	@ (3401f8b4 <nema_sys_init+0xd0>)
3401f814:	e7f2      	b.n	3401f7fc <nema_sys_init+0x18>
    nema_mutexes_ids[MUTEX_FLUSH] = xSemaphoreCreateMutexStatic(&nema_mutexes_buffers[MUTEX_FLUSH]);
3401f816:	2001      	movs	r0, #1
3401f818:	492a      	ldr	r1, [pc, #168]	@ (3401f8c4 <nema_sys_init+0xe0>)
3401f81a:	f7ea feaf 	bl	3400a57c <xQueueCreateMutexStatic>
3401f81e:	60a0      	str	r0, [r4, #8]
    assert(nema_mutexes_ids[MUTEX_FLUSH]);
3401f820:	b918      	cbnz	r0, 3401f82a <nema_sys_init+0x46>
3401f822:	2174      	movs	r1, #116	@ 0x74
3401f824:	4b28      	ldr	r3, [pc, #160]	@ (3401f8c8 <nema_sys_init+0xe4>)
3401f826:	4a23      	ldr	r2, [pc, #140]	@ (3401f8b4 <nema_sys_init+0xd0>)
3401f828:	e7e8      	b.n	3401f7fc <nema_sys_init+0x18>
    nema_irq_sem = xSemaphoreCreateCountingStatic(1, 0, &nema_irq_sem_buffer);
3401f82a:	2100      	movs	r1, #0
3401f82c:	2001      	movs	r0, #1
3401f82e:	4a27      	ldr	r2, [pc, #156]	@ (3401f8cc <nema_sys_init+0xe8>)
3401f830:	f7ea fde2 	bl	3400a3f8 <xQueueCreateCountingSemaphoreStatic>
3401f834:	4b26      	ldr	r3, [pc, #152]	@ (3401f8d0 <nema_sys_init+0xec>)
3401f836:	6018      	str	r0, [r3, #0]
    assert(nema_irq_sem);
3401f838:	b338      	cbz	r0, 3401f88a <nema_sys_init+0xa6>
        tsi_malloc_init_pool(pool_id, (void*)memPools[pool_id].base_addr, memPools[pool_id].base_addr, memPools[pool_id].mem_size, 1);
3401f83a:	2501      	movs	r5, #1
3401f83c:	4a25      	ldr	r2, [pc, #148]	@ (3401f8d4 <nema_sys_init+0xf0>)
3401f83e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
3401f842:	4611      	mov	r1, r2
3401f844:	2000      	movs	r0, #0
3401f846:	9500      	str	r5, [sp, #0]
3401f848:	f00a ff62 	bl	3402a710 <tsi_malloc_init_pool>
3401f84c:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
3401f850:	4b21      	ldr	r3, [pc, #132]	@ (3401f8d8 <nema_sys_init+0xf4>)
3401f852:	4611      	mov	r1, r2
3401f854:	4628      	mov	r0, r5
3401f856:	9500      	str	r5, [sp, #0]
3401f858:	f00a ff5a 	bl	3402a710 <tsi_malloc_init_pool>
3401f85c:	4a1f      	ldr	r2, [pc, #124]	@ (3401f8dc <nema_sys_init+0xf8>)
3401f85e:	4b20      	ldr	r3, [pc, #128]	@ (3401f8e0 <nema_sys_init+0xfc>)
3401f860:	4611      	mov	r1, r2
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
3401f862:	ae02      	add	r6, sp, #8
        tsi_malloc_init_pool(pool_id, (void*)memPools[pool_id].base_addr, memPools[pool_id].base_addr, memPools[pool_id].mem_size, 1);
3401f864:	2002      	movs	r0, #2
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
3401f866:	4c1f      	ldr	r4, [pc, #124]	@ (3401f8e4 <nema_sys_init+0x100>)
        tsi_malloc_init_pool(pool_id, (void*)memPools[pool_id].base_addr, memPools[pool_id].base_addr, memPools[pool_id].mem_size, 1);
3401f868:	9500      	str	r5, [sp, #0]
3401f86a:	f00a ff51 	bl	3402a710 <tsi_malloc_init_pool>
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
3401f86e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3401f872:	4630      	mov	r0, r6
3401f874:	f7ff ff8e 	bl	3401f794 <nema_buffer_create>
3401f878:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
3401f87c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    assert(ring_buffer_str.bo.base_virt);
3401f880:	b93a      	cbnz	r2, 3401f892 <nema_sys_init+0xae>
3401f882:	2186      	movs	r1, #134	@ 0x86
3401f884:	4b18      	ldr	r3, [pc, #96]	@ (3401f8e8 <nema_sys_init+0x104>)
3401f886:	4a0b      	ldr	r2, [pc, #44]	@ (3401f8b4 <nema_sys_init+0xd0>)
3401f888:	e7b8      	b.n	3401f7fc <nema_sys_init+0x18>
    assert(nema_irq_sem);
3401f88a:	217a      	movs	r1, #122	@ 0x7a
3401f88c:	4b17      	ldr	r3, [pc, #92]	@ (3401f8ec <nema_sys_init+0x108>)
3401f88e:	4a09      	ldr	r2, [pc, #36]	@ (3401f8b4 <nema_sys_init+0xd0>)
3401f890:	e7b4      	b.n	3401f7fc <nema_sys_init+0x18>
    ret = nema_rb_init(&ring_buffer_str, 1);
3401f892:	4629      	mov	r1, r5
3401f894:	4620      	mov	r0, r4
3401f896:	f009 f9af 	bl	34028bf8 <nema_rb_init>
    if (ret < 0)
3401f89a:	2800      	cmp	r0, #0
    last_cl_id = 0;
3401f89c:	bfa2      	ittt	ge
3401f89e:	2000      	movge	r0, #0
3401f8a0:	4b13      	ldrge	r3, [pc, #76]	@ (3401f8f0 <nema_sys_init+0x10c>)
3401f8a2:	6018      	strge	r0, [r3, #0]
}
3401f8a4:	b006      	add	sp, #24
3401f8a6:	bd70      	pop	{r4, r5, r6, pc}
3401f8a8:	340e5ab4 	.word	0x340e5ab4
3401f8ac:	340e5aa8 	.word	0x340e5aa8
3401f8b0:	3402fe24 	.word	0x3402fe24
3401f8b4:	340c99f9 	.word	0x340c99f9
3401f8b8:	3402fdd9 	.word	0x3402fdd9
3401f8bc:	340e5b04 	.word	0x340e5b04
3401f8c0:	3402fe3f 	.word	0x3402fe3f
3401f8c4:	340e5b54 	.word	0x340e5b54
3401f8c8:	3402fe5e 	.word	0x3402fe5e
3401f8cc:	340e5a58 	.word	0x340e5a58
3401f8d0:	340e5a54 	.word	0x340e5a54
3401f8d4:	34180000 	.word	0x34180000
3401f8d8:	002ee200 	.word	0x002ee200
3401f8dc:	902ee200 	.word	0x902ee200
3401f8e0:	0005dd00 	.word	0x0005dd00
3401f8e4:	340e5ba4 	.word	0x340e5ba4
3401f8e8:	3402fe89 	.word	0x3402fe89
3401f8ec:	3402fe7c 	.word	0x3402fe7c
3401f8f0:	340d08c0 	.word	0x340d08c0

3401f8f4 <nema_buffer_create_pool>:
{
3401f8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401f8f6:	460e      	mov	r6, r1
3401f8f8:	4617      	mov	r7, r2
3401f8fa:	4604      	mov	r4, r0
    nema_mutex_lock(MUTEX_MALLOC); /* tsi_malloc isn't thread-safe */
3401f8fc:	2001      	movs	r0, #1
3401f8fe:	f7ff ff1d 	bl	3401f73c <nema_mutex_lock>
    bo.base_virt = tsi_malloc_pool(pool, size);
3401f902:	4639      	mov	r1, r7
3401f904:	4630      	mov	r0, r6
3401f906:	f00a ff3d 	bl	3402a784 <tsi_malloc_pool>
    assert(bo.base_virt);
3401f90a:	4605      	mov	r5, r0
3401f90c:	b928      	cbnz	r0, 3401f91a <nema_buffer_create_pool+0x26>
3401f90e:	21dd      	movs	r1, #221	@ 0xdd
3401f910:	4b06      	ldr	r3, [pc, #24]	@ (3401f92c <nema_buffer_create_pool+0x38>)
3401f912:	4a07      	ldr	r2, [pc, #28]	@ (3401f930 <nema_buffer_create_pool+0x3c>)
3401f914:	4807      	ldr	r0, [pc, #28]	@ (3401f934 <nema_buffer_create_pool+0x40>)
3401f916:	f000 f877 	bl	3401fa08 <__assert_func>
    nema_mutex_unlock(MUTEX_MALLOC);
3401f91a:	2001      	movs	r0, #1
3401f91c:	f7ff ff24 	bl	3401f768 <nema_mutex_unlock>
}
3401f920:	4620      	mov	r0, r4
    return bo;
3401f922:	e9c4 7600 	strd	r7, r6, [r4]
3401f926:	e9c4 5502 	strd	r5, r5, [r4, #8]
}
3401f92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3401f92c:	3402fe99 	.word	0x3402fe99
3401f930:	340c99ce 	.word	0x340c99ce
3401f934:	3402fdd9 	.word	0x3402fdd9

3401f938 <nema_buffer_flush>:
{
3401f938:	b510      	push	{r4, lr}
3401f93a:	4604      	mov	r4, r0
    nema_mutex_lock(MUTEX_FLUSH);
3401f93c:	2002      	movs	r0, #2
3401f93e:	f7ff fefd 	bl	3401f73c <nema_mutex_lock>
    SCB_CleanInvalidateDCache_by_Addr((uint32_t *)bo->base_virt, bo->size);
3401f942:	6822      	ldr	r2, [r4, #0]
    if ( dsize > 0 ) {
3401f944:	2a00      	cmp	r2, #0
3401f946:	dd1c      	ble.n	3401f982 <nema_buffer_flush+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401f948:	68a3      	ldr	r3, [r4, #8]
3401f94a:	f003 011f 	and.w	r1, r3, #31
3401f94e:	4411      	add	r1, r2
  __ASM volatile ("dsb 0xF":::"memory");
3401f950:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401f954:	43da      	mvns	r2, r3
3401f956:	185c      	adds	r4, r3, r1
3401f958:	4422      	add	r2, r4
3401f95a:	3920      	subs	r1, #32
3401f95c:	0952      	lsrs	r2, r2, #5
3401f95e:	3120      	adds	r1, #32
3401f960:	f102 0e01 	add.w	lr, r2, #1
3401f964:	bfd8      	it	le
3401f966:	f04f 0e01 	movle.w	lr, #1
3401f96a:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401f96e:	4807      	ldr	r0, [pc, #28]	@ (3401f98c <nema_buffer_flush+0x54>)
3401f970:	f8c0 3270 	str.w	r3, [r0, #624]	@ 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
3401f974:	3320      	adds	r3, #32
      } while ( op_size > 0 );
3401f976:	f00f c805 	le	lr, 3401f970 <nema_buffer_flush+0x38>
3401f97a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401f97e:	f3bf 8f6f 	isb	sy
}
3401f982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nema_mutex_unlock(MUTEX_FLUSH);
3401f986:	2002      	movs	r0, #2
3401f988:	f7ff beee 	b.w	3401f768 <nema_mutex_unlock>
3401f98c:	e000ed00 	.word	0xe000ed00

3401f990 <UTIL_LCDEx_PrintfAt>:
  UTIL_LCD_DisplayStringAtLine(line, (uint8_t *) buffer);
  va_end(args);
}

void UTIL_LCDEx_PrintfAt(uint32_t x_pos, uint32_t y_pos, Text_AlignModeTypdef mode, const char * format, ...)
{
3401f990:	b408      	push	{r3}
3401f992:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
3401f994:	4604      	mov	r4, r0
3401f996:	460d      	mov	r5, r1
3401f998:	4616      	mov	r6, r2
3401f99a:	ab07      	add	r3, sp, #28
  static char buffer[N_PRINTABLE_CHARS + 1];
  va_list args;
  va_start(args, format);
  vsnprintf(buffer, N_PRINTABLE_CHARS + 1, format, args);
3401f99c:	4f09      	ldr	r7, [pc, #36]	@ (3401f9c4 <UTIL_LCDEx_PrintfAt+0x34>)
{
3401f99e:	f853 2b04 	ldr.w	r2, [r3], #4
  vsnprintf(buffer, N_PRINTABLE_CHARS + 1, format, args);
3401f9a2:	2130      	movs	r1, #48	@ 0x30
3401f9a4:	4638      	mov	r0, r7
  va_start(args, format);
3401f9a6:	9301      	str	r3, [sp, #4]
  vsnprintf(buffer, N_PRINTABLE_CHARS + 1, format, args);
3401f9a8:	f001 fdf8 	bl	3402159c <vsniprintf>
  UTIL_LCD_DisplayStringAt(x_pos, y_pos, (uint8_t *) buffer, mode);
3401f9ac:	4633      	mov	r3, r6
3401f9ae:	463a      	mov	r2, r7
3401f9b0:	4629      	mov	r1, r5
3401f9b2:	4620      	mov	r0, r4
3401f9b4:	f7fc fcee 	bl	3401c394 <UTIL_LCD_DisplayStringAt>
  va_end(args);
}
3401f9b8:	b002      	add	sp, #8
3401f9ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3401f9be:	b001      	add	sp, #4
3401f9c0:	4770      	bx	lr
3401f9c2:	bf00      	nop
3401f9c4:	340e5bbc 	.word	0x340e5bbc

3401f9c8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
3401f9c8:	4770      	bx	lr

3401f9ca <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
3401f9ca:	e7fe      	b.n	3401f9ca <MemManage_Handler>

3401f9cc <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
3401f9cc:	e7fe      	b.n	3401f9cc <BusFault_Handler>

3401f9ce <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
3401f9ce:	e7fe      	b.n	3401f9ce <SecureFault_Handler>

3401f9d0 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
3401f9d0:	e7fe      	b.n	3401f9d0 <DebugMon_Handler>

3401f9d2 <CSI_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/

void CSI_IRQHandler(void)
{
3401f9d2:	b508      	push	{r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401f9d4:	f7e7 fa76 	bl	34006ec4 <CMW_CAMERA_GetDCMIPPHandle>
}
3401f9d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401f9dc:	f7f0 bbba 	b.w	34010154 <HAL_DCMIPP_CSI_IRQHandler>

3401f9e0 <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
3401f9e0:	b508      	push	{r3, lr}
  HAL_DCMIPP_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401f9e2:	f7e7 fa6f 	bl	34006ec4 <CMW_CAMERA_GetDCMIPPHandle>
}
3401f9e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401f9ea:	f7f0 ba7d 	b.w	3400fee8 <HAL_DCMIPP_IRQHandler>
	...

3401f9f0 <GPU2D_IRQHandler>:

void GPU2D_IRQHandler(void)
{
  HAL_GPU2D_IRQHandler(&hgpu2d);
3401f9f0:	4801      	ldr	r0, [pc, #4]	@ (3401f9f8 <GPU2D_IRQHandler+0x8>)
3401f9f2:	f7f3 ba35 	b.w	34012e60 <HAL_GPU2D_IRQHandler>
3401f9f6:	bf00      	nop
3401f9f8:	340e59b4 	.word	0x340e59b4

3401f9fc <GPU2D_ER_IRQHandler>:
}

void GPU2D_ER_IRQHandler(void)
{
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
3401f9fc:	4801      	ldr	r0, [pc, #4]	@ (3401fa04 <GPU2D_ER_IRQHandler+0x8>)
3401f9fe:	f7f3 ba42 	b.w	34012e86 <HAL_GPU2D_ER_IRQHandler>
3401fa02:	bf00      	nop
3401fa04:	340e59b4 	.word	0x340e59b4

3401fa08 <__assert_func>:
3401fa08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3401fa0a:	4614      	mov	r4, r2
3401fa0c:	461a      	mov	r2, r3
3401fa0e:	4b09      	ldr	r3, [pc, #36]	@ (3401fa34 <__assert_func+0x2c>)
3401fa10:	4605      	mov	r5, r0
3401fa12:	681b      	ldr	r3, [r3, #0]
3401fa14:	68d8      	ldr	r0, [r3, #12]
3401fa16:	b14c      	cbz	r4, 3401fa2c <__assert_func+0x24>
3401fa18:	4b07      	ldr	r3, [pc, #28]	@ (3401fa38 <__assert_func+0x30>)
3401fa1a:	9100      	str	r1, [sp, #0]
3401fa1c:	4907      	ldr	r1, [pc, #28]	@ (3401fa3c <__assert_func+0x34>)
3401fa1e:	e9cd 3401 	strd	r3, r4, [sp, #4]
3401fa22:	462b      	mov	r3, r5
3401fa24:	f001 fc72 	bl	3402130c <fiprintf>
3401fa28:	f002 f940 	bl	34021cac <abort>
3401fa2c:	4b04      	ldr	r3, [pc, #16]	@ (3401fa40 <__assert_func+0x38>)
3401fa2e:	461c      	mov	r4, r3
3401fa30:	e7f3      	b.n	3401fa1a <__assert_func+0x12>
3401fa32:	bf00      	nop
3401fa34:	340d0a3c 	.word	0x340d0a3c
3401fa38:	3402fea6 	.word	0x3402fea6
3401fa3c:	3402feb3 	.word	0x3402feb3
3401fa40:	3402b16a 	.word	0x3402b16a

3401fa44 <sulp>:
3401fa44:	b570      	push	{r4, r5, r6, lr}
3401fa46:	4604      	mov	r4, r0
3401fa48:	460d      	mov	r5, r1
3401fa4a:	4616      	mov	r6, r2
3401fa4c:	ec45 4b10 	vmov	d0, r4, r5
3401fa50:	f003 fed0 	bl	340237f4 <__ulp>
3401fa54:	b17e      	cbz	r6, 3401fa76 <sulp+0x32>
3401fa56:	f3c5 530a 	ubfx	r3, r5, #20, #11
3401fa5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
3401fa5e:	2b00      	cmp	r3, #0
3401fa60:	dd09      	ble.n	3401fa76 <sulp+0x32>
3401fa62:	051b      	lsls	r3, r3, #20
3401fa64:	2000      	movs	r0, #0
3401fa66:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
3401fa6a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
3401fa6e:	ec41 0b17 	vmov	d7, r0, r1
3401fa72:	ee20 0b07 	vmul.f64	d0, d0, d7
3401fa76:	bd70      	pop	{r4, r5, r6, pc}

3401fa78 <_strtod_l>:
3401fa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401fa7c:	ed2d 8b0a 	vpush	{d8-d12}
3401fa80:	b097      	sub	sp, #92	@ 0x5c
3401fa82:	4688      	mov	r8, r1
3401fa84:	f04f 0a00 	mov.w	sl, #0
3401fa88:	f04f 0b00 	mov.w	fp, #0
3401fa8c:	920e      	str	r2, [sp, #56]	@ 0x38
3401fa8e:	2200      	movs	r2, #0
3401fa90:	9005      	str	r0, [sp, #20]
3401fa92:	9212      	str	r2, [sp, #72]	@ 0x48
3401fa94:	460a      	mov	r2, r1
3401fa96:	9211      	str	r2, [sp, #68]	@ 0x44
3401fa98:	7811      	ldrb	r1, [r2, #0]
3401fa9a:	292b      	cmp	r1, #43	@ 0x2b
3401fa9c:	d04c      	beq.n	3401fb38 <_strtod_l+0xc0>
3401fa9e:	d839      	bhi.n	3401fb14 <_strtod_l+0x9c>
3401faa0:	290d      	cmp	r1, #13
3401faa2:	d833      	bhi.n	3401fb0c <_strtod_l+0x94>
3401faa4:	2908      	cmp	r1, #8
3401faa6:	d833      	bhi.n	3401fb10 <_strtod_l+0x98>
3401faa8:	2900      	cmp	r1, #0
3401faaa:	d03c      	beq.n	3401fb26 <_strtod_l+0xae>
3401faac:	2200      	movs	r2, #0
3401faae:	9208      	str	r2, [sp, #32]
3401fab0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
3401fab2:	782a      	ldrb	r2, [r5, #0]
3401fab4:	2a30      	cmp	r2, #48	@ 0x30
3401fab6:	f040 80b7 	bne.w	3401fc28 <_strtod_l+0x1b0>
3401faba:	786a      	ldrb	r2, [r5, #1]
3401fabc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
3401fac0:	2a58      	cmp	r2, #88	@ 0x58
3401fac2:	d170      	bne.n	3401fba6 <_strtod_l+0x12e>
3401fac4:	9302      	str	r3, [sp, #8]
3401fac6:	a911      	add	r1, sp, #68	@ 0x44
3401fac8:	9b08      	ldr	r3, [sp, #32]
3401faca:	4a91      	ldr	r2, [pc, #580]	@ (3401fd10 <_strtod_l+0x298>)
3401facc:	9301      	str	r3, [sp, #4]
3401face:	ab12      	add	r3, sp, #72	@ 0x48
3401fad0:	9805      	ldr	r0, [sp, #20]
3401fad2:	9300      	str	r3, [sp, #0]
3401fad4:	ab13      	add	r3, sp, #76	@ 0x4c
3401fad6:	f002 ff8d 	bl	340229f4 <__gethex>
3401fada:	f010 060f 	ands.w	r6, r0, #15
3401fade:	4604      	mov	r4, r0
3401fae0:	d005      	beq.n	3401faee <_strtod_l+0x76>
3401fae2:	2e06      	cmp	r6, #6
3401fae4:	d12a      	bne.n	3401fb3c <_strtod_l+0xc4>
3401fae6:	3501      	adds	r5, #1
3401fae8:	2300      	movs	r3, #0
3401faea:	9511      	str	r5, [sp, #68]	@ 0x44
3401faec:	9308      	str	r3, [sp, #32]
3401faee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
3401faf0:	2b00      	cmp	r3, #0
3401faf2:	f040 853b 	bne.w	3402056c <_strtod_l+0xaf4>
3401faf6:	9b08      	ldr	r3, [sp, #32]
3401faf8:	ec4b ab10 	vmov	d0, sl, fp
3401fafc:	b1cb      	cbz	r3, 3401fb32 <_strtod_l+0xba>
3401fafe:	eeb1 0b40 	vneg.f64	d0, d0
3401fb02:	b017      	add	sp, #92	@ 0x5c
3401fb04:	ecbd 8b0a 	vpop	{d8-d12}
3401fb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401fb0c:	2920      	cmp	r1, #32
3401fb0e:	d1cd      	bne.n	3401faac <_strtod_l+0x34>
3401fb10:	3201      	adds	r2, #1
3401fb12:	e7c0      	b.n	3401fa96 <_strtod_l+0x1e>
3401fb14:	292d      	cmp	r1, #45	@ 0x2d
3401fb16:	d1c9      	bne.n	3401faac <_strtod_l+0x34>
3401fb18:	2101      	movs	r1, #1
3401fb1a:	9108      	str	r1, [sp, #32]
3401fb1c:	1c51      	adds	r1, r2, #1
3401fb1e:	9111      	str	r1, [sp, #68]	@ 0x44
3401fb20:	7852      	ldrb	r2, [r2, #1]
3401fb22:	2a00      	cmp	r2, #0
3401fb24:	d1c4      	bne.n	3401fab0 <_strtod_l+0x38>
3401fb26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
3401fb28:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
3401fb2c:	2b00      	cmp	r3, #0
3401fb2e:	f040 851b 	bne.w	34020568 <_strtod_l+0xaf0>
3401fb32:	ec4b ab10 	vmov	d0, sl, fp
3401fb36:	e7e4      	b.n	3401fb02 <_strtod_l+0x8a>
3401fb38:	2100      	movs	r1, #0
3401fb3a:	e7ee      	b.n	3401fb1a <_strtod_l+0xa2>
3401fb3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
3401fb3e:	b13a      	cbz	r2, 3401fb50 <_strtod_l+0xd8>
3401fb40:	2135      	movs	r1, #53	@ 0x35
3401fb42:	a814      	add	r0, sp, #80	@ 0x50
3401fb44:	f003 ff51 	bl	340239ea <__copybits>
3401fb48:	9912      	ldr	r1, [sp, #72]	@ 0x48
3401fb4a:	9805      	ldr	r0, [sp, #20]
3401fb4c:	f003 fb1e 	bl	3402318c <_Bfree>
3401fb50:	1e73      	subs	r3, r6, #1
3401fb52:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
3401fb54:	2b04      	cmp	r3, #4
3401fb56:	d806      	bhi.n	3401fb66 <_strtod_l+0xee>
3401fb58:	e8df f003 	tbb	[pc, r3]
3401fb5c:	201d0314 	.word	0x201d0314
3401fb60:	14          	.byte	0x14
3401fb61:	00          	.byte	0x00
3401fb62:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
3401fb66:	05e3      	lsls	r3, r4, #23
3401fb68:	bf48      	it	mi
3401fb6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
3401fb6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
3401fb72:	0d1b      	lsrs	r3, r3, #20
3401fb74:	051b      	lsls	r3, r3, #20
3401fb76:	2b00      	cmp	r3, #0
3401fb78:	d1b9      	bne.n	3401faee <_strtod_l+0x76>
3401fb7a:	f002 f837 	bl	34021bec <__errno>
3401fb7e:	2322      	movs	r3, #34	@ 0x22
3401fb80:	6003      	str	r3, [r0, #0]
3401fb82:	e7b4      	b.n	3401faee <_strtod_l+0x76>
3401fb84:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
3401fb88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3401fb8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3401fb90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
3401fb94:	e7e7      	b.n	3401fb66 <_strtod_l+0xee>
3401fb96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 3401fd18 <_strtod_l+0x2a0>
3401fb9a:	e7e4      	b.n	3401fb66 <_strtod_l+0xee>
3401fb9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
3401fba0:	f04f 3aff 	mov.w	sl, #4294967295
3401fba4:	e7df      	b.n	3401fb66 <_strtod_l+0xee>
3401fba6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401fba8:	1c5a      	adds	r2, r3, #1
3401fbaa:	9211      	str	r2, [sp, #68]	@ 0x44
3401fbac:	785b      	ldrb	r3, [r3, #1]
3401fbae:	2b30      	cmp	r3, #48	@ 0x30
3401fbb0:	d0f9      	beq.n	3401fba6 <_strtod_l+0x12e>
3401fbb2:	2b00      	cmp	r3, #0
3401fbb4:	d09b      	beq.n	3401faee <_strtod_l+0x76>
3401fbb6:	2301      	movs	r3, #1
3401fbb8:	9307      	str	r3, [sp, #28]
3401fbba:	220a      	movs	r2, #10
3401fbbc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401fbbe:	930a      	str	r3, [sp, #40]	@ 0x28
3401fbc0:	2300      	movs	r3, #0
3401fbc2:	4699      	mov	r9, r3
3401fbc4:	461d      	mov	r5, r3
3401fbc6:	9306      	str	r3, [sp, #24]
3401fbc8:	9811      	ldr	r0, [sp, #68]	@ 0x44
3401fbca:	7804      	ldrb	r4, [r0, #0]
3401fbcc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
3401fbd0:	b2d9      	uxtb	r1, r3
3401fbd2:	2909      	cmp	r1, #9
3401fbd4:	d92a      	bls.n	3401fc2c <_strtod_l+0x1b4>
3401fbd6:	2201      	movs	r2, #1
3401fbd8:	494e      	ldr	r1, [pc, #312]	@ (3401fd14 <_strtod_l+0x29c>)
3401fbda:	f001 ff93 	bl	34021b04 <strncmp>
3401fbde:	b3a0      	cbz	r0, 3401fc4a <_strtod_l+0x1d2>
3401fbe0:	2000      	movs	r0, #0
3401fbe2:	4622      	mov	r2, r4
3401fbe4:	462b      	mov	r3, r5
3401fbe6:	4607      	mov	r7, r0
3401fbe8:	4601      	mov	r1, r0
3401fbea:	2a65      	cmp	r2, #101	@ 0x65
3401fbec:	d001      	beq.n	3401fbf2 <_strtod_l+0x17a>
3401fbee:	2a45      	cmp	r2, #69	@ 0x45
3401fbf0:	d118      	bne.n	3401fc24 <_strtod_l+0x1ac>
3401fbf2:	b91b      	cbnz	r3, 3401fbfc <_strtod_l+0x184>
3401fbf4:	9b07      	ldr	r3, [sp, #28]
3401fbf6:	4303      	orrs	r3, r0
3401fbf8:	d095      	beq.n	3401fb26 <_strtod_l+0xae>
3401fbfa:	2300      	movs	r3, #0
3401fbfc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
3401fc00:	f108 0201 	add.w	r2, r8, #1
3401fc04:	9211      	str	r2, [sp, #68]	@ 0x44
3401fc06:	f898 2001 	ldrb.w	r2, [r8, #1]
3401fc0a:	2a2b      	cmp	r2, #43	@ 0x2b
3401fc0c:	d074      	beq.n	3401fcf8 <_strtod_l+0x280>
3401fc0e:	2a2d      	cmp	r2, #45	@ 0x2d
3401fc10:	d07a      	beq.n	3401fd08 <_strtod_l+0x290>
3401fc12:	f04f 0e00 	mov.w	lr, #0
3401fc16:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
3401fc1a:	2c09      	cmp	r4, #9
3401fc1c:	f240 8082 	bls.w	3401fd24 <_strtod_l+0x2ac>
3401fc20:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
3401fc24:	2400      	movs	r4, #0
3401fc26:	e09d      	b.n	3401fd64 <_strtod_l+0x2ec>
3401fc28:	2300      	movs	r3, #0
3401fc2a:	e7c5      	b.n	3401fbb8 <_strtod_l+0x140>
3401fc2c:	2d08      	cmp	r5, #8
3401fc2e:	f100 0001 	add.w	r0, r0, #1
3401fc32:	f105 0501 	add.w	r5, r5, #1
3401fc36:	bfcc      	ite	gt
3401fc38:	9906      	ldrgt	r1, [sp, #24]
3401fc3a:	fb02 3909 	mlale	r9, r2, r9, r3
3401fc3e:	9011      	str	r0, [sp, #68]	@ 0x44
3401fc40:	bfc4      	itt	gt
3401fc42:	fb02 3301 	mlagt	r3, r2, r1, r3
3401fc46:	9306      	strgt	r3, [sp, #24]
3401fc48:	e7be      	b.n	3401fbc8 <_strtod_l+0x150>
3401fc4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401fc4c:	1c5a      	adds	r2, r3, #1
3401fc4e:	9211      	str	r2, [sp, #68]	@ 0x44
3401fc50:	785a      	ldrb	r2, [r3, #1]
3401fc52:	b3b5      	cbz	r5, 3401fcc2 <_strtod_l+0x24a>
3401fc54:	4607      	mov	r7, r0
3401fc56:	462b      	mov	r3, r5
3401fc58:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
3401fc5c:	2909      	cmp	r1, #9
3401fc5e:	d912      	bls.n	3401fc86 <_strtod_l+0x20e>
3401fc60:	2101      	movs	r1, #1
3401fc62:	e7c2      	b.n	3401fbea <_strtod_l+0x172>
3401fc64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401fc66:	3001      	adds	r0, #1
3401fc68:	1c5a      	adds	r2, r3, #1
3401fc6a:	9211      	str	r2, [sp, #68]	@ 0x44
3401fc6c:	785a      	ldrb	r2, [r3, #1]
3401fc6e:	2a30      	cmp	r2, #48	@ 0x30
3401fc70:	d0f8      	beq.n	3401fc64 <_strtod_l+0x1ec>
3401fc72:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
3401fc76:	2b08      	cmp	r3, #8
3401fc78:	f200 847d 	bhi.w	34020576 <_strtod_l+0xafe>
3401fc7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401fc7e:	4607      	mov	r7, r0
3401fc80:	2000      	movs	r0, #0
3401fc82:	930a      	str	r3, [sp, #40]	@ 0x28
3401fc84:	4603      	mov	r3, r0
3401fc86:	3a30      	subs	r2, #48	@ 0x30
3401fc88:	f100 0101 	add.w	r1, r0, #1
3401fc8c:	d013      	beq.n	3401fcb6 <_strtod_l+0x23e>
3401fc8e:	440f      	add	r7, r1
3401fc90:	469c      	mov	ip, r3
3401fc92:	f04f 0e0a 	mov.w	lr, #10
3401fc96:	f10c 0401 	add.w	r4, ip, #1
3401fc9a:	1ae6      	subs	r6, r4, r3
3401fc9c:	42b1      	cmp	r1, r6
3401fc9e:	dc12      	bgt.n	3401fcc6 <_strtod_l+0x24e>
3401fca0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
3401fca4:	1819      	adds	r1, r3, r0
3401fca6:	3301      	adds	r3, #1
3401fca8:	2908      	cmp	r1, #8
3401fcaa:	4403      	add	r3, r0
3401fcac:	dc19      	bgt.n	3401fce2 <_strtod_l+0x26a>
3401fcae:	210a      	movs	r1, #10
3401fcb0:	fb01 2909 	mla	r9, r1, r9, r2
3401fcb4:	2100      	movs	r1, #0
3401fcb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
3401fcb8:	1c50      	adds	r0, r2, #1
3401fcba:	9011      	str	r0, [sp, #68]	@ 0x44
3401fcbc:	4608      	mov	r0, r1
3401fcbe:	7852      	ldrb	r2, [r2, #1]
3401fcc0:	e7ca      	b.n	3401fc58 <_strtod_l+0x1e0>
3401fcc2:	4628      	mov	r0, r5
3401fcc4:	e7d3      	b.n	3401fc6e <_strtod_l+0x1f6>
3401fcc6:	f1bc 0f08 	cmp.w	ip, #8
3401fcca:	dc03      	bgt.n	3401fcd4 <_strtod_l+0x25c>
3401fccc:	fb0e f909 	mul.w	r9, lr, r9
3401fcd0:	46a4      	mov	ip, r4
3401fcd2:	e7e0      	b.n	3401fc96 <_strtod_l+0x21e>
3401fcd4:	2c10      	cmp	r4, #16
3401fcd6:	bfde      	ittt	le
3401fcd8:	9e06      	ldrle	r6, [sp, #24]
3401fcda:	fb0e f606 	mulle.w	r6, lr, r6
3401fcde:	9606      	strle	r6, [sp, #24]
3401fce0:	e7f6      	b.n	3401fcd0 <_strtod_l+0x258>
3401fce2:	290f      	cmp	r1, #15
3401fce4:	bfdf      	itttt	le
3401fce6:	9806      	ldrle	r0, [sp, #24]
3401fce8:	210a      	movle	r1, #10
3401fcea:	fb01 2200 	mlale	r2, r1, r0, r2
3401fcee:	9206      	strle	r2, [sp, #24]
3401fcf0:	e7e0      	b.n	3401fcb4 <_strtod_l+0x23c>
3401fcf2:	2700      	movs	r7, #0
3401fcf4:	2101      	movs	r1, #1
3401fcf6:	e77d      	b.n	3401fbf4 <_strtod_l+0x17c>
3401fcf8:	f04f 0e00 	mov.w	lr, #0
3401fcfc:	f108 0202 	add.w	r2, r8, #2
3401fd00:	9211      	str	r2, [sp, #68]	@ 0x44
3401fd02:	f898 2002 	ldrb.w	r2, [r8, #2]
3401fd06:	e786      	b.n	3401fc16 <_strtod_l+0x19e>
3401fd08:	f04f 0e01 	mov.w	lr, #1
3401fd0c:	e7f6      	b.n	3401fcfc <_strtod_l+0x284>
3401fd0e:	bf00      	nop
3401fd10:	340c9a40 	.word	0x340c9a40
3401fd14:	3402fee2 	.word	0x3402fee2
3401fd18:	7ff00000 	.word	0x7ff00000
3401fd1c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
3401fd1e:	1c54      	adds	r4, r2, #1
3401fd20:	9411      	str	r4, [sp, #68]	@ 0x44
3401fd22:	7852      	ldrb	r2, [r2, #1]
3401fd24:	2a30      	cmp	r2, #48	@ 0x30
3401fd26:	d0f9      	beq.n	3401fd1c <_strtod_l+0x2a4>
3401fd28:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
3401fd2c:	2c08      	cmp	r4, #8
3401fd2e:	f63f af79 	bhi.w	3401fc24 <_strtod_l+0x1ac>
3401fd32:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
3401fd36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
3401fd38:	9209      	str	r2, [sp, #36]	@ 0x24
3401fd3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
3401fd3c:	1c54      	adds	r4, r2, #1
3401fd3e:	9411      	str	r4, [sp, #68]	@ 0x44
3401fd40:	7852      	ldrb	r2, [r2, #1]
3401fd42:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
3401fd46:	2e09      	cmp	r6, #9
3401fd48:	d937      	bls.n	3401fdba <_strtod_l+0x342>
3401fd4a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
3401fd4c:	1ba4      	subs	r4, r4, r6
3401fd4e:	2c08      	cmp	r4, #8
3401fd50:	f644 641f 	movw	r4, #19999	@ 0x4e1f
3401fd54:	dc02      	bgt.n	3401fd5c <_strtod_l+0x2e4>
3401fd56:	4564      	cmp	r4, ip
3401fd58:	bfa8      	it	ge
3401fd5a:	4664      	movge	r4, ip
3401fd5c:	f1be 0f00 	cmp.w	lr, #0
3401fd60:	d000      	beq.n	3401fd64 <_strtod_l+0x2ec>
3401fd62:	4264      	negs	r4, r4
3401fd64:	2b00      	cmp	r3, #0
3401fd66:	d14d      	bne.n	3401fe04 <_strtod_l+0x38c>
3401fd68:	9b07      	ldr	r3, [sp, #28]
3401fd6a:	4318      	orrs	r0, r3
3401fd6c:	f47f aebf 	bne.w	3401faee <_strtod_l+0x76>
3401fd70:	2900      	cmp	r1, #0
3401fd72:	f47f aed8 	bne.w	3401fb26 <_strtod_l+0xae>
3401fd76:	2a69      	cmp	r2, #105	@ 0x69
3401fd78:	d027      	beq.n	3401fdca <_strtod_l+0x352>
3401fd7a:	dc24      	bgt.n	3401fdc6 <_strtod_l+0x34e>
3401fd7c:	2a49      	cmp	r2, #73	@ 0x49
3401fd7e:	d024      	beq.n	3401fdca <_strtod_l+0x352>
3401fd80:	2a4e      	cmp	r2, #78	@ 0x4e
3401fd82:	f47f aed0 	bne.w	3401fb26 <_strtod_l+0xae>
3401fd86:	4997      	ldr	r1, [pc, #604]	@ (3401ffe4 <_strtod_l+0x56c>)
3401fd88:	a811      	add	r0, sp, #68	@ 0x44
3401fd8a:	f003 f853 	bl	34022e34 <__match>
3401fd8e:	2800      	cmp	r0, #0
3401fd90:	f43f aec9 	beq.w	3401fb26 <_strtod_l+0xae>
3401fd94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401fd96:	781b      	ldrb	r3, [r3, #0]
3401fd98:	2b28      	cmp	r3, #40	@ 0x28
3401fd9a:	d12d      	bne.n	3401fdf8 <_strtod_l+0x380>
3401fd9c:	aa14      	add	r2, sp, #80	@ 0x50
3401fd9e:	4992      	ldr	r1, [pc, #584]	@ (3401ffe8 <_strtod_l+0x570>)
3401fda0:	a811      	add	r0, sp, #68	@ 0x44
3401fda2:	f003 f85b 	bl	34022e5c <__hexnan>
3401fda6:	2805      	cmp	r0, #5
3401fda8:	d126      	bne.n	3401fdf8 <_strtod_l+0x380>
3401fdaa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
3401fdac:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
3401fdb0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
3401fdb4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
3401fdb8:	e699      	b.n	3401faee <_strtod_l+0x76>
3401fdba:	240a      	movs	r4, #10
3401fdbc:	fb04 2c0c 	mla	ip, r4, ip, r2
3401fdc0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
3401fdc4:	e7b9      	b.n	3401fd3a <_strtod_l+0x2c2>
3401fdc6:	2a6e      	cmp	r2, #110	@ 0x6e
3401fdc8:	e7db      	b.n	3401fd82 <_strtod_l+0x30a>
3401fdca:	4988      	ldr	r1, [pc, #544]	@ (3401ffec <_strtod_l+0x574>)
3401fdcc:	a811      	add	r0, sp, #68	@ 0x44
3401fdce:	f003 f831 	bl	34022e34 <__match>
3401fdd2:	2800      	cmp	r0, #0
3401fdd4:	f43f aea7 	beq.w	3401fb26 <_strtod_l+0xae>
3401fdd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401fdda:	a811      	add	r0, sp, #68	@ 0x44
3401fddc:	4984      	ldr	r1, [pc, #528]	@ (3401fff0 <_strtod_l+0x578>)
3401fdde:	3b01      	subs	r3, #1
3401fde0:	9311      	str	r3, [sp, #68]	@ 0x44
3401fde2:	f003 f827 	bl	34022e34 <__match>
3401fde6:	b910      	cbnz	r0, 3401fdee <_strtod_l+0x376>
3401fde8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3401fdea:	3301      	adds	r3, #1
3401fdec:	9311      	str	r3, [sp, #68]	@ 0x44
3401fdee:	f8df b214 	ldr.w	fp, [pc, #532]	@ 34020004 <_strtod_l+0x58c>
3401fdf2:	f04f 0a00 	mov.w	sl, #0
3401fdf6:	e67a      	b.n	3401faee <_strtod_l+0x76>
3401fdf8:	487e      	ldr	r0, [pc, #504]	@ (3401fff4 <_strtod_l+0x57c>)
3401fdfa:	f001 ff49 	bl	34021c90 <nan>
3401fdfe:	ec5b ab10 	vmov	sl, fp, d0
3401fe02:	e674      	b.n	3401faee <_strtod_l+0x76>
3401fe04:	ee07 9a90 	vmov	s15, r9
3401fe08:	1be2      	subs	r2, r4, r7
3401fe0a:	2d00      	cmp	r5, #0
3401fe0c:	bf08      	it	eq
3401fe0e:	461d      	moveq	r5, r3
3401fe10:	2b10      	cmp	r3, #16
3401fe12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3401fe16:	9209      	str	r2, [sp, #36]	@ 0x24
3401fe18:	461a      	mov	r2, r3
3401fe1a:	bfa8      	it	ge
3401fe1c:	2210      	movge	r2, #16
3401fe1e:	2b09      	cmp	r3, #9
3401fe20:	ec5b ab17 	vmov	sl, fp, d7
3401fe24:	dc15      	bgt.n	3401fe52 <_strtod_l+0x3da>
3401fe26:	1be1      	subs	r1, r4, r7
3401fe28:	2900      	cmp	r1, #0
3401fe2a:	f43f ae60 	beq.w	3401faee <_strtod_l+0x76>
3401fe2e:	eba4 0107 	sub.w	r1, r4, r7
3401fe32:	dd72      	ble.n	3401ff1a <_strtod_l+0x4a2>
3401fe34:	2916      	cmp	r1, #22
3401fe36:	dc59      	bgt.n	3401feec <_strtod_l+0x474>
3401fe38:	4b6f      	ldr	r3, [pc, #444]	@ (3401fff8 <_strtod_l+0x580>)
3401fe3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401fe3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
3401fe40:	ed93 7b00 	vldr	d7, [r3]
3401fe44:	ec4b ab16 	vmov	d6, sl, fp
3401fe48:	ee27 7b06 	vmul.f64	d7, d7, d6
3401fe4c:	ec5b ab17 	vmov	sl, fp, d7
3401fe50:	e64d      	b.n	3401faee <_strtod_l+0x76>
3401fe52:	4969      	ldr	r1, [pc, #420]	@ (3401fff8 <_strtod_l+0x580>)
3401fe54:	2b0f      	cmp	r3, #15
3401fe56:	eddd 6a06 	vldr	s13, [sp, #24]
3401fe5a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
3401fe5e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
3401fe62:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
3401fe66:	eea7 6b05 	vfma.f64	d6, d7, d5
3401fe6a:	ec5b ab16 	vmov	sl, fp, d6
3401fe6e:	ddda      	ble.n	3401fe26 <_strtod_l+0x3ae>
3401fe70:	1a9a      	subs	r2, r3, r2
3401fe72:	1be1      	subs	r1, r4, r7
3401fe74:	440a      	add	r2, r1
3401fe76:	2a00      	cmp	r2, #0
3401fe78:	f340 8094 	ble.w	3401ffa4 <_strtod_l+0x52c>
3401fe7c:	f012 000f 	ands.w	r0, r2, #15
3401fe80:	d00a      	beq.n	3401fe98 <_strtod_l+0x420>
3401fe82:	495d      	ldr	r1, [pc, #372]	@ (3401fff8 <_strtod_l+0x580>)
3401fe84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
3401fe88:	ed91 7b00 	vldr	d7, [r1]
3401fe8c:	ec4b ab16 	vmov	d6, sl, fp
3401fe90:	ee27 7b06 	vmul.f64	d7, d7, d6
3401fe94:	ec5b ab17 	vmov	sl, fp, d7
3401fe98:	f032 020f 	bics.w	r2, r2, #15
3401fe9c:	d073      	beq.n	3401ff86 <_strtod_l+0x50e>
3401fe9e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
3401fea2:	dd47      	ble.n	3401ff34 <_strtod_l+0x4bc>
3401fea4:	2400      	movs	r4, #0
3401fea6:	4625      	mov	r5, r4
3401fea8:	4626      	mov	r6, r4
3401feaa:	9407      	str	r4, [sp, #28]
3401feac:	2322      	movs	r3, #34	@ 0x22
3401feae:	9a05      	ldr	r2, [sp, #20]
3401feb0:	f8df b150 	ldr.w	fp, [pc, #336]	@ 34020004 <_strtod_l+0x58c>
3401feb4:	f04f 0a00 	mov.w	sl, #0
3401feb8:	6013      	str	r3, [r2, #0]
3401feba:	9b07      	ldr	r3, [sp, #28]
3401febc:	2b00      	cmp	r3, #0
3401febe:	f43f ae16 	beq.w	3401faee <_strtod_l+0x76>
3401fec2:	9912      	ldr	r1, [sp, #72]	@ 0x48
3401fec4:	9805      	ldr	r0, [sp, #20]
3401fec6:	f003 f961 	bl	3402318c <_Bfree>
3401feca:	4631      	mov	r1, r6
3401fecc:	9805      	ldr	r0, [sp, #20]
3401fece:	f003 f95d 	bl	3402318c <_Bfree>
3401fed2:	4629      	mov	r1, r5
3401fed4:	9805      	ldr	r0, [sp, #20]
3401fed6:	f003 f959 	bl	3402318c <_Bfree>
3401feda:	9907      	ldr	r1, [sp, #28]
3401fedc:	9805      	ldr	r0, [sp, #20]
3401fede:	f003 f955 	bl	3402318c <_Bfree>
3401fee2:	4621      	mov	r1, r4
3401fee4:	9805      	ldr	r0, [sp, #20]
3401fee6:	f003 f951 	bl	3402318c <_Bfree>
3401feea:	e600      	b.n	3401faee <_strtod_l+0x76>
3401feec:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
3401fef0:	1be0      	subs	r0, r4, r7
3401fef2:	4281      	cmp	r1, r0
3401fef4:	dbbc      	blt.n	3401fe70 <_strtod_l+0x3f8>
3401fef6:	f1c3 030f 	rsb	r3, r3, #15
3401fefa:	4a3f      	ldr	r2, [pc, #252]	@ (3401fff8 <_strtod_l+0x580>)
3401fefc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
3401ff00:	ed91 7b00 	vldr	d7, [r1]
3401ff04:	9909      	ldr	r1, [sp, #36]	@ 0x24
3401ff06:	1acb      	subs	r3, r1, r3
3401ff08:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
3401ff0c:	ec4b ab16 	vmov	d6, sl, fp
3401ff10:	ee27 7b06 	vmul.f64	d7, d7, d6
3401ff14:	ed92 6b00 	vldr	d6, [r2]
3401ff18:	e796      	b.n	3401fe48 <_strtod_l+0x3d0>
3401ff1a:	3116      	adds	r1, #22
3401ff1c:	dba8      	blt.n	3401fe70 <_strtod_l+0x3f8>
3401ff1e:	1b3c      	subs	r4, r7, r4
3401ff20:	4b35      	ldr	r3, [pc, #212]	@ (3401fff8 <_strtod_l+0x580>)
3401ff22:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
3401ff26:	ed94 7b00 	vldr	d7, [r4]
3401ff2a:	ec4b ab16 	vmov	d6, sl, fp
3401ff2e:	ee86 7b07 	vdiv.f64	d7, d6, d7
3401ff32:	e78b      	b.n	3401fe4c <_strtod_l+0x3d4>
3401ff34:	2000      	movs	r0, #0
3401ff36:	1112      	asrs	r2, r2, #4
3401ff38:	4e30      	ldr	r6, [pc, #192]	@ (3401fffc <_strtod_l+0x584>)
3401ff3a:	4601      	mov	r1, r0
3401ff3c:	ec4b ab17 	vmov	d7, sl, fp
3401ff40:	2a01      	cmp	r2, #1
3401ff42:	dc23      	bgt.n	3401ff8c <_strtod_l+0x514>
3401ff44:	b108      	cbz	r0, 3401ff4a <_strtod_l+0x4d2>
3401ff46:	ec5b ab17 	vmov	sl, fp, d7
3401ff4a:	4a2c      	ldr	r2, [pc, #176]	@ (3401fffc <_strtod_l+0x584>)
3401ff4c:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
3401ff50:	482b      	ldr	r0, [pc, #172]	@ (34020000 <_strtod_l+0x588>)
3401ff52:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3401ff56:	ed92 7b00 	vldr	d7, [r2]
3401ff5a:	ec4b ab16 	vmov	d6, sl, fp
3401ff5e:	4a29      	ldr	r2, [pc, #164]	@ (34020004 <_strtod_l+0x58c>)
3401ff60:	ee27 7b06 	vmul.f64	d7, d7, d6
3401ff64:	ee17 1a90 	vmov	r1, s15
3401ff68:	400a      	ands	r2, r1
3401ff6a:	4282      	cmp	r2, r0
3401ff6c:	ec5b ab17 	vmov	sl, fp, d7
3401ff70:	d898      	bhi.n	3401fea4 <_strtod_l+0x42c>
3401ff72:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
3401ff76:	4282      	cmp	r2, r0
3401ff78:	bf86      	itte	hi
3401ff7a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 34020008 <_strtod_l+0x590>
3401ff7e:	f04f 3aff 	movhi.w	sl, #4294967295
3401ff82:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
3401ff86:	2200      	movs	r2, #0
3401ff88:	9206      	str	r2, [sp, #24]
3401ff8a:	e077      	b.n	3402007c <_strtod_l+0x604>
3401ff8c:	f012 0f01 	tst.w	r2, #1
3401ff90:	d004      	beq.n	3401ff9c <_strtod_l+0x524>
3401ff92:	2001      	movs	r0, #1
3401ff94:	ed96 6b00 	vldr	d6, [r6]
3401ff98:	ee27 7b06 	vmul.f64	d7, d7, d6
3401ff9c:	3101      	adds	r1, #1
3401ff9e:	1052      	asrs	r2, r2, #1
3401ffa0:	3608      	adds	r6, #8
3401ffa2:	e7cd      	b.n	3401ff40 <_strtod_l+0x4c8>
3401ffa4:	d0ef      	beq.n	3401ff86 <_strtod_l+0x50e>
3401ffa6:	4252      	negs	r2, r2
3401ffa8:	f012 000f 	ands.w	r0, r2, #15
3401ffac:	d00a      	beq.n	3401ffc4 <_strtod_l+0x54c>
3401ffae:	4912      	ldr	r1, [pc, #72]	@ (3401fff8 <_strtod_l+0x580>)
3401ffb0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
3401ffb4:	ed91 7b00 	vldr	d7, [r1]
3401ffb8:	ec4b ab16 	vmov	d6, sl, fp
3401ffbc:	ee86 7b07 	vdiv.f64	d7, d6, d7
3401ffc0:	ec5b ab17 	vmov	sl, fp, d7
3401ffc4:	1112      	asrs	r2, r2, #4
3401ffc6:	d0de      	beq.n	3401ff86 <_strtod_l+0x50e>
3401ffc8:	2a1f      	cmp	r2, #31
3401ffca:	dd1f      	ble.n	3402000c <_strtod_l+0x594>
3401ffcc:	2400      	movs	r4, #0
3401ffce:	4625      	mov	r5, r4
3401ffd0:	4626      	mov	r6, r4
3401ffd2:	9407      	str	r4, [sp, #28]
3401ffd4:	2322      	movs	r3, #34	@ 0x22
3401ffd6:	9a05      	ldr	r2, [sp, #20]
3401ffd8:	f04f 0a00 	mov.w	sl, #0
3401ffdc:	f04f 0b00 	mov.w	fp, #0
3401ffe0:	6013      	str	r3, [r2, #0]
3401ffe2:	e76a      	b.n	3401feba <_strtod_l+0x442>
3401ffe4:	3402fef1 	.word	0x3402fef1
3401ffe8:	340c9a2c 	.word	0x340c9a2c
3401ffec:	3402fee9 	.word	0x3402fee9
3401fff0:	340305b5 	.word	0x340305b5
3401fff4:	3402b16a 	.word	0x3402b16a
3401fff8:	340c9ab8 	.word	0x340c9ab8
3401fffc:	340c9a90 	.word	0x340c9a90
34020000:	7ca00000 	.word	0x7ca00000
34020004:	7ff00000 	.word	0x7ff00000
34020008:	7fefffff 	.word	0x7fefffff
3402000c:	f012 0110 	ands.w	r1, r2, #16
34020010:	f04f 0000 	mov.w	r0, #0
34020014:	bf18      	it	ne
34020016:	216a      	movne	r1, #106	@ 0x6a
34020018:	9106      	str	r1, [sp, #24]
3402001a:	49b1      	ldr	r1, [pc, #708]	@ (340202e0 <_strtod_l+0x868>)
3402001c:	ec4b ab17 	vmov	d7, sl, fp
34020020:	07d6      	lsls	r6, r2, #31
34020022:	d504      	bpl.n	3402002e <_strtod_l+0x5b6>
34020024:	2001      	movs	r0, #1
34020026:	ed91 6b00 	vldr	d6, [r1]
3402002a:	ee27 7b06 	vmul.f64	d7, d7, d6
3402002e:	1052      	asrs	r2, r2, #1
34020030:	f101 0108 	add.w	r1, r1, #8
34020034:	d1f4      	bne.n	34020020 <_strtod_l+0x5a8>
34020036:	b108      	cbz	r0, 3402003c <_strtod_l+0x5c4>
34020038:	ec5b ab17 	vmov	sl, fp, d7
3402003c:	9a06      	ldr	r2, [sp, #24]
3402003e:	b1b2      	cbz	r2, 3402006e <_strtod_l+0x5f6>
34020040:	f3cb 510a 	ubfx	r1, fp, #20, #11
34020044:	4658      	mov	r0, fp
34020046:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
3402004a:	2a00      	cmp	r2, #0
3402004c:	dd0f      	ble.n	3402006e <_strtod_l+0x5f6>
3402004e:	2a1f      	cmp	r2, #31
34020050:	dd55      	ble.n	340200fe <_strtod_l+0x686>
34020052:	2a34      	cmp	r2, #52	@ 0x34
34020054:	f04f 0a00 	mov.w	sl, #0
34020058:	bfdb      	ittet	le
3402005a:	f04f 32ff 	movle.w	r2, #4294967295
3402005e:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
34020062:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
34020066:	408a      	lslle	r2, r1
34020068:	bfd8      	it	le
3402006a:	ea02 0b00 	andle.w	fp, r2, r0
3402006e:	ec4b ab17 	vmov	d7, sl, fp
34020072:	eeb5 7b40 	vcmp.f64	d7, #0.0
34020076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402007a:	d0a7      	beq.n	3401ffcc <_strtod_l+0x554>
3402007c:	462a      	mov	r2, r5
3402007e:	990a      	ldr	r1, [sp, #40]	@ 0x28
34020080:	9805      	ldr	r0, [sp, #20]
34020082:	f8cd 9000 	str.w	r9, [sp]
34020086:	f003 f8eb 	bl	34023260 <__s2b>
3402008a:	9007      	str	r0, [sp, #28]
3402008c:	2800      	cmp	r0, #0
3402008e:	f43f af09 	beq.w	3401fea4 <_strtod_l+0x42c>
34020092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34020094:	1b3f      	subs	r7, r7, r4
34020096:	2400      	movs	r4, #0
34020098:	2b00      	cmp	r3, #0
3402009a:	4625      	mov	r5, r4
3402009c:	bfb4      	ite	lt
3402009e:	463b      	movlt	r3, r7
340200a0:	2300      	movge	r3, #0
340200a2:	930a      	str	r3, [sp, #40]	@ 0x28
340200a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340200a6:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 340202d0 <_strtod_l+0x858>
340200aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
340200ae:	930d      	str	r3, [sp, #52]	@ 0x34
340200b0:	9b07      	ldr	r3, [sp, #28]
340200b2:	9805      	ldr	r0, [sp, #20]
340200b4:	6859      	ldr	r1, [r3, #4]
340200b6:	f003 f829 	bl	3402310c <_Balloc>
340200ba:	4606      	mov	r6, r0
340200bc:	2800      	cmp	r0, #0
340200be:	f43f aef5 	beq.w	3401feac <_strtod_l+0x434>
340200c2:	9b07      	ldr	r3, [sp, #28]
340200c4:	300c      	adds	r0, #12
340200c6:	691a      	ldr	r2, [r3, #16]
340200c8:	f103 010c 	add.w	r1, r3, #12
340200cc:	3202      	adds	r2, #2
340200ce:	ec4b ab19 	vmov	d9, sl, fp
340200d2:	0092      	lsls	r2, r2, #2
340200d4:	f001 fdcd 	bl	34021c72 <memcpy>
340200d8:	eeb0 0b49 	vmov.f64	d0, d9
340200dc:	aa14      	add	r2, sp, #80	@ 0x50
340200de:	a913      	add	r1, sp, #76	@ 0x4c
340200e0:	9805      	ldr	r0, [sp, #20]
340200e2:	f003 fbfb 	bl	340238dc <__d2b>
340200e6:	9012      	str	r0, [sp, #72]	@ 0x48
340200e8:	2800      	cmp	r0, #0
340200ea:	f43f aedf 	beq.w	3401feac <_strtod_l+0x434>
340200ee:	2101      	movs	r1, #1
340200f0:	9805      	ldr	r0, [sp, #20]
340200f2:	f003 f94b 	bl	3402338c <__i2b>
340200f6:	4605      	mov	r5, r0
340200f8:	b940      	cbnz	r0, 3402010c <_strtod_l+0x694>
340200fa:	2500      	movs	r5, #0
340200fc:	e6d6      	b.n	3401feac <_strtod_l+0x434>
340200fe:	f04f 31ff 	mov.w	r1, #4294967295
34020102:	fa01 f202 	lsl.w	r2, r1, r2
34020106:	ea02 0a0a 	and.w	sl, r2, sl
3402010a:	e7b0      	b.n	3402006e <_strtod_l+0x5f6>
3402010c:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
3402010e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
34020110:	2f00      	cmp	r7, #0
34020112:	bfa9      	itett	ge
34020114:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
34020116:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
34020118:	eb07 0903 	addge.w	r9, r7, r3
3402011c:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
34020120:	bfb8      	it	lt
34020122:	eba3 0807 	sublt.w	r8, r3, r7
34020126:	9b06      	ldr	r3, [sp, #24]
34020128:	bfb8      	it	lt
3402012a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
3402012e:	1aff      	subs	r7, r7, r3
34020130:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
34020134:	4417      	add	r7, r2
34020136:	4a6b      	ldr	r2, [pc, #428]	@ (340202e4 <_strtod_l+0x86c>)
34020138:	3f01      	subs	r7, #1
3402013a:	4297      	cmp	r7, r2
3402013c:	da50      	bge.n	340201e0 <_strtod_l+0x768>
3402013e:	1bd1      	subs	r1, r2, r7
34020140:	2201      	movs	r2, #1
34020142:	291f      	cmp	r1, #31
34020144:	eba3 0301 	sub.w	r3, r3, r1
34020148:	dc3e      	bgt.n	340201c8 <_strtod_l+0x750>
3402014a:	408a      	lsls	r2, r1
3402014c:	920c      	str	r2, [sp, #48]	@ 0x30
3402014e:	2200      	movs	r2, #0
34020150:	920b      	str	r2, [sp, #44]	@ 0x2c
34020152:	eb09 0703 	add.w	r7, r9, r3
34020156:	4498      	add	r8, r3
34020158:	9b06      	ldr	r3, [sp, #24]
3402015a:	45b9      	cmp	r9, r7
3402015c:	4498      	add	r8, r3
3402015e:	464b      	mov	r3, r9
34020160:	bfa8      	it	ge
34020162:	463b      	movge	r3, r7
34020164:	4543      	cmp	r3, r8
34020166:	bfa8      	it	ge
34020168:	4643      	movge	r3, r8
3402016a:	2b00      	cmp	r3, #0
3402016c:	bfc2      	ittt	gt
3402016e:	1aff      	subgt	r7, r7, r3
34020170:	eba8 0803 	subgt.w	r8, r8, r3
34020174:	eba9 0903 	subgt.w	r9, r9, r3
34020178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3402017a:	2b00      	cmp	r3, #0
3402017c:	dd16      	ble.n	340201ac <_strtod_l+0x734>
3402017e:	4629      	mov	r1, r5
34020180:	461a      	mov	r2, r3
34020182:	9805      	ldr	r0, [sp, #20]
34020184:	f003 f9bc 	bl	34023500 <__pow5mult>
34020188:	4605      	mov	r5, r0
3402018a:	2800      	cmp	r0, #0
3402018c:	d0b5      	beq.n	340200fa <_strtod_l+0x682>
3402018e:	4601      	mov	r1, r0
34020190:	9a12      	ldr	r2, [sp, #72]	@ 0x48
34020192:	9805      	ldr	r0, [sp, #20]
34020194:	f003 f910 	bl	340233b8 <__multiply>
34020198:	900f      	str	r0, [sp, #60]	@ 0x3c
3402019a:	2800      	cmp	r0, #0
3402019c:	f43f ae86 	beq.w	3401feac <_strtod_l+0x434>
340201a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
340201a2:	9805      	ldr	r0, [sp, #20]
340201a4:	f002 fff2 	bl	3402318c <_Bfree>
340201a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
340201aa:	9312      	str	r3, [sp, #72]	@ 0x48
340201ac:	2f00      	cmp	r7, #0
340201ae:	dc1b      	bgt.n	340201e8 <_strtod_l+0x770>
340201b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340201b2:	2b00      	cmp	r3, #0
340201b4:	dd21      	ble.n	340201fa <_strtod_l+0x782>
340201b6:	4631      	mov	r1, r6
340201b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
340201ba:	9805      	ldr	r0, [sp, #20]
340201bc:	f003 f9a0 	bl	34023500 <__pow5mult>
340201c0:	4606      	mov	r6, r0
340201c2:	b9d0      	cbnz	r0, 340201fa <_strtod_l+0x782>
340201c4:	2600      	movs	r6, #0
340201c6:	e671      	b.n	3401feac <_strtod_l+0x434>
340201c8:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
340201cc:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
340201d0:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
340201d4:	37e2      	adds	r7, #226	@ 0xe2
340201d6:	fa02 f107 	lsl.w	r1, r2, r7
340201da:	910b      	str	r1, [sp, #44]	@ 0x2c
340201dc:	920c      	str	r2, [sp, #48]	@ 0x30
340201de:	e7b8      	b.n	34020152 <_strtod_l+0x6da>
340201e0:	2200      	movs	r2, #0
340201e2:	920b      	str	r2, [sp, #44]	@ 0x2c
340201e4:	2201      	movs	r2, #1
340201e6:	e7f9      	b.n	340201dc <_strtod_l+0x764>
340201e8:	463a      	mov	r2, r7
340201ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
340201ec:	9805      	ldr	r0, [sp, #20]
340201ee:	f003 f9e1 	bl	340235b4 <__lshift>
340201f2:	9012      	str	r0, [sp, #72]	@ 0x48
340201f4:	2800      	cmp	r0, #0
340201f6:	d1db      	bne.n	340201b0 <_strtod_l+0x738>
340201f8:	e658      	b.n	3401feac <_strtod_l+0x434>
340201fa:	f1b8 0f00 	cmp.w	r8, #0
340201fe:	dd07      	ble.n	34020210 <_strtod_l+0x798>
34020200:	4631      	mov	r1, r6
34020202:	4642      	mov	r2, r8
34020204:	9805      	ldr	r0, [sp, #20]
34020206:	f003 f9d5 	bl	340235b4 <__lshift>
3402020a:	4606      	mov	r6, r0
3402020c:	2800      	cmp	r0, #0
3402020e:	d0d9      	beq.n	340201c4 <_strtod_l+0x74c>
34020210:	f1b9 0f00 	cmp.w	r9, #0
34020214:	dd08      	ble.n	34020228 <_strtod_l+0x7b0>
34020216:	4629      	mov	r1, r5
34020218:	464a      	mov	r2, r9
3402021a:	9805      	ldr	r0, [sp, #20]
3402021c:	f003 f9ca 	bl	340235b4 <__lshift>
34020220:	4605      	mov	r5, r0
34020222:	2800      	cmp	r0, #0
34020224:	f43f ae42 	beq.w	3401feac <_strtod_l+0x434>
34020228:	4632      	mov	r2, r6
3402022a:	9912      	ldr	r1, [sp, #72]	@ 0x48
3402022c:	9805      	ldr	r0, [sp, #20]
3402022e:	f003 fa49 	bl	340236c4 <__mdiff>
34020232:	4604      	mov	r4, r0
34020234:	2800      	cmp	r0, #0
34020236:	f43f ae39 	beq.w	3401feac <_strtod_l+0x434>
3402023a:	2300      	movs	r3, #0
3402023c:	f8d0 800c 	ldr.w	r8, [r0, #12]
34020240:	4629      	mov	r1, r5
34020242:	60c3      	str	r3, [r0, #12]
34020244:	f003 fa22 	bl	3402368c <__mcmp>
34020248:	2800      	cmp	r0, #0
3402024a:	da4f      	bge.n	340202ec <_strtod_l+0x874>
3402024c:	ea58 080a 	orrs.w	r8, r8, sl
34020250:	d175      	bne.n	3402033e <_strtod_l+0x8c6>
34020252:	f3cb 0313 	ubfx	r3, fp, #0, #20
34020256:	2b00      	cmp	r3, #0
34020258:	d171      	bne.n	3402033e <_strtod_l+0x8c6>
3402025a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
3402025e:	0d1b      	lsrs	r3, r3, #20
34020260:	051b      	lsls	r3, r3, #20
34020262:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
34020266:	d96a      	bls.n	3402033e <_strtod_l+0x8c6>
34020268:	6963      	ldr	r3, [r4, #20]
3402026a:	b913      	cbnz	r3, 34020272 <_strtod_l+0x7fa>
3402026c:	6923      	ldr	r3, [r4, #16]
3402026e:	2b01      	cmp	r3, #1
34020270:	dd65      	ble.n	3402033e <_strtod_l+0x8c6>
34020272:	4621      	mov	r1, r4
34020274:	2201      	movs	r2, #1
34020276:	9805      	ldr	r0, [sp, #20]
34020278:	f003 f99c 	bl	340235b4 <__lshift>
3402027c:	4629      	mov	r1, r5
3402027e:	4604      	mov	r4, r0
34020280:	f003 fa04 	bl	3402368c <__mcmp>
34020284:	2800      	cmp	r0, #0
34020286:	dd5a      	ble.n	3402033e <_strtod_l+0x8c6>
34020288:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
3402028c:	9a06      	ldr	r2, [sp, #24]
3402028e:	0d1b      	lsrs	r3, r3, #20
34020290:	051b      	lsls	r3, r3, #20
34020292:	2a00      	cmp	r2, #0
34020294:	d071      	beq.n	3402037a <_strtod_l+0x902>
34020296:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
3402029a:	d86e      	bhi.n	3402037a <_strtod_l+0x902>
3402029c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
340202a0:	f67f ae98 	bls.w	3401ffd4 <_strtod_l+0x55c>
340202a4:	4b10      	ldr	r3, [pc, #64]	@ (340202e8 <_strtod_l+0x870>)
340202a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 340202d8 <_strtod_l+0x860>
340202aa:	ec4b ab16 	vmov	d6, sl, fp
340202ae:	ee26 7b07 	vmul.f64	d7, d6, d7
340202b2:	ee17 2a90 	vmov	r2, s15
340202b6:	4013      	ands	r3, r2
340202b8:	ec5b ab17 	vmov	sl, fp, d7
340202bc:	2b00      	cmp	r3, #0
340202be:	f47f ae00 	bne.w	3401fec2 <_strtod_l+0x44a>
340202c2:	2322      	movs	r3, #34	@ 0x22
340202c4:	9a05      	ldr	r2, [sp, #20]
340202c6:	6013      	str	r3, [r2, #0]
340202c8:	e5fb      	b.n	3401fec2 <_strtod_l+0x44a>
340202ca:	bf00      	nop
340202cc:	f3af 8000 	nop.w
340202d0:	ffc00000 	.word	0xffc00000
340202d4:	41dfffff 	.word	0x41dfffff
340202d8:	00000000 	.word	0x00000000
340202dc:	39500000 	.word	0x39500000
340202e0:	340c9a58 	.word	0x340c9a58
340202e4:	fffffc02 	.word	0xfffffc02
340202e8:	7ff00000 	.word	0x7ff00000
340202ec:	46d9      	mov	r9, fp
340202ee:	d15d      	bne.n	340203ac <_strtod_l+0x934>
340202f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
340202f4:	f1b8 0f00 	cmp.w	r8, #0
340202f8:	d02a      	beq.n	34020350 <_strtod_l+0x8d8>
340202fa:	4aa9      	ldr	r2, [pc, #676]	@ (340205a0 <_strtod_l+0xb28>)
340202fc:	4293      	cmp	r3, r2
340202fe:	d12a      	bne.n	34020356 <_strtod_l+0x8de>
34020300:	9b06      	ldr	r3, [sp, #24]
34020302:	4652      	mov	r2, sl
34020304:	b1fb      	cbz	r3, 34020346 <_strtod_l+0x8ce>
34020306:	4ba7      	ldr	r3, [pc, #668]	@ (340205a4 <_strtod_l+0xb2c>)
34020308:	f04f 31ff 	mov.w	r1, #4294967295
3402030c:	ea0b 0303 	and.w	r3, fp, r3
34020310:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
34020314:	d81a      	bhi.n	3402034c <_strtod_l+0x8d4>
34020316:	0d1b      	lsrs	r3, r3, #20
34020318:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
3402031c:	fa01 f303 	lsl.w	r3, r1, r3
34020320:	429a      	cmp	r2, r3
34020322:	d118      	bne.n	34020356 <_strtod_l+0x8de>
34020324:	4ba0      	ldr	r3, [pc, #640]	@ (340205a8 <_strtod_l+0xb30>)
34020326:	4599      	cmp	r9, r3
34020328:	d102      	bne.n	34020330 <_strtod_l+0x8b8>
3402032a:	3201      	adds	r2, #1
3402032c:	f43f adbe 	beq.w	3401feac <_strtod_l+0x434>
34020330:	4b9c      	ldr	r3, [pc, #624]	@ (340205a4 <_strtod_l+0xb2c>)
34020332:	f04f 0a00 	mov.w	sl, #0
34020336:	ea09 0303 	and.w	r3, r9, r3
3402033a:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
3402033e:	9b06      	ldr	r3, [sp, #24]
34020340:	2b00      	cmp	r3, #0
34020342:	d1af      	bne.n	340202a4 <_strtod_l+0x82c>
34020344:	e5bd      	b.n	3401fec2 <_strtod_l+0x44a>
34020346:	f04f 33ff 	mov.w	r3, #4294967295
3402034a:	e7e9      	b.n	34020320 <_strtod_l+0x8a8>
3402034c:	460b      	mov	r3, r1
3402034e:	e7e7      	b.n	34020320 <_strtod_l+0x8a8>
34020350:	ea53 030a 	orrs.w	r3, r3, sl
34020354:	d098      	beq.n	34020288 <_strtod_l+0x810>
34020356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34020358:	b1c3      	cbz	r3, 3402038c <_strtod_l+0x914>
3402035a:	ea13 0f09 	tst.w	r3, r9
3402035e:	d0ee      	beq.n	3402033e <_strtod_l+0x8c6>
34020360:	9a06      	ldr	r2, [sp, #24]
34020362:	4650      	mov	r0, sl
34020364:	4659      	mov	r1, fp
34020366:	f1b8 0f00 	cmp.w	r8, #0
3402036a:	d013      	beq.n	34020394 <_strtod_l+0x91c>
3402036c:	f7ff fb6a 	bl	3401fa44 <sulp>
34020370:	ee39 7b00 	vadd.f64	d7, d9, d0
34020374:	ec5b ab17 	vmov	sl, fp, d7
34020378:	e7e1      	b.n	3402033e <_strtod_l+0x8c6>
3402037a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
3402037e:	f04f 3aff 	mov.w	sl, #4294967295
34020382:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
34020386:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
3402038a:	e7d8      	b.n	3402033e <_strtod_l+0x8c6>
3402038c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3402038e:	ea13 0f0a 	tst.w	r3, sl
34020392:	e7e4      	b.n	3402035e <_strtod_l+0x8e6>
34020394:	f7ff fb56 	bl	3401fa44 <sulp>
34020398:	ee39 0b40 	vsub.f64	d0, d9, d0
3402039c:	eeb5 0b40 	vcmp.f64	d0, #0.0
340203a0:	ec5b ab10 	vmov	sl, fp, d0
340203a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340203a8:	d1c9      	bne.n	3402033e <_strtod_l+0x8c6>
340203aa:	e613      	b.n	3401ffd4 <_strtod_l+0x55c>
340203ac:	4629      	mov	r1, r5
340203ae:	4620      	mov	r0, r4
340203b0:	f003 faec 	bl	3402398c <__ratio>
340203b4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
340203b8:	eeb4 0bc7 	vcmpe.f64	d0, d7
340203bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340203c0:	d85d      	bhi.n	3402047e <_strtod_l+0xa06>
340203c2:	f1b8 0f00 	cmp.w	r8, #0
340203c6:	d164      	bne.n	34020492 <_strtod_l+0xa1a>
340203c8:	f1ba 0f00 	cmp.w	sl, #0
340203cc:	d14b      	bne.n	34020466 <_strtod_l+0x9ee>
340203ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
340203d2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
340203d6:	2b00      	cmp	r3, #0
340203d8:	d160      	bne.n	3402049c <_strtod_l+0xa24>
340203da:	eeb4 0bc8 	vcmpe.f64	d0, d8
340203de:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
340203e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340203e6:	d401      	bmi.n	340203ec <_strtod_l+0x974>
340203e8:	ee20 8b08 	vmul.f64	d8, d0, d8
340203ec:	eeb1 ab48 	vneg.f64	d10, d8
340203f0:	486c      	ldr	r0, [pc, #432]	@ (340205a4 <_strtod_l+0xb2c>)
340203f2:	496e      	ldr	r1, [pc, #440]	@ (340205ac <_strtod_l+0xb34>)
340203f4:	ea09 0700 	and.w	r7, r9, r0
340203f8:	428f      	cmp	r7, r1
340203fa:	ec53 2b1a 	vmov	r2, r3, d10
340203fe:	d17d      	bne.n	340204fc <_strtod_l+0xa84>
34020400:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
34020404:	ec4b ab1c 	vmov	d12, sl, fp
34020408:	eeb0 0b4c 	vmov.f64	d0, d12
3402040c:	f003 f9f2 	bl	340237f4 <__ulp>
34020410:	eea0 cb0a 	vfma.f64	d12, d0, d10
34020414:	4863      	ldr	r0, [pc, #396]	@ (340205a4 <_strtod_l+0xb2c>)
34020416:	4a66      	ldr	r2, [pc, #408]	@ (340205b0 <_strtod_l+0xb38>)
34020418:	ee1c 3a90 	vmov	r3, s25
3402041c:	ea03 0100 	and.w	r1, r3, r0
34020420:	4291      	cmp	r1, r2
34020422:	ec5b ab1c 	vmov	sl, fp, d12
34020426:	d93c      	bls.n	340204a2 <_strtod_l+0xa2a>
34020428:	ee19 2a90 	vmov	r2, s19
3402042c:	4b5e      	ldr	r3, [pc, #376]	@ (340205a8 <_strtod_l+0xb30>)
3402042e:	429a      	cmp	r2, r3
34020430:	d104      	bne.n	3402043c <_strtod_l+0x9c4>
34020432:	ee19 3a10 	vmov	r3, s18
34020436:	3301      	adds	r3, #1
34020438:	f43f ad38 	beq.w	3401feac <_strtod_l+0x434>
3402043c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 340205a8 <_strtod_l+0xb30>
34020440:	f04f 3aff 	mov.w	sl, #4294967295
34020444:	9912      	ldr	r1, [sp, #72]	@ 0x48
34020446:	9805      	ldr	r0, [sp, #20]
34020448:	f002 fea0 	bl	3402318c <_Bfree>
3402044c:	4631      	mov	r1, r6
3402044e:	9805      	ldr	r0, [sp, #20]
34020450:	f002 fe9c 	bl	3402318c <_Bfree>
34020454:	4629      	mov	r1, r5
34020456:	9805      	ldr	r0, [sp, #20]
34020458:	f002 fe98 	bl	3402318c <_Bfree>
3402045c:	4621      	mov	r1, r4
3402045e:	9805      	ldr	r0, [sp, #20]
34020460:	f002 fe94 	bl	3402318c <_Bfree>
34020464:	e624      	b.n	340200b0 <_strtod_l+0x638>
34020466:	f1ba 0f01 	cmp.w	sl, #1
3402046a:	d103      	bne.n	34020474 <_strtod_l+0x9fc>
3402046c:	f1bb 0f00 	cmp.w	fp, #0
34020470:	f43f adb0 	beq.w	3401ffd4 <_strtod_l+0x55c>
34020474:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
34020478:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
3402047c:	e7b8      	b.n	340203f0 <_strtod_l+0x978>
3402047e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
34020482:	ee20 8b08 	vmul.f64	d8, d0, d8
34020486:	f1b8 0f00 	cmp.w	r8, #0
3402048a:	d0af      	beq.n	340203ec <_strtod_l+0x974>
3402048c:	eeb0 ab48 	vmov.f64	d10, d8
34020490:	e7ae      	b.n	340203f0 <_strtod_l+0x978>
34020492:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
34020496:	eeb0 8b4a 	vmov.f64	d8, d10
3402049a:	e7a9      	b.n	340203f0 <_strtod_l+0x978>
3402049c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
340204a0:	e7a6      	b.n	340203f0 <_strtod_l+0x978>
340204a2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
340204a6:	9b06      	ldr	r3, [sp, #24]
340204a8:	46d9      	mov	r9, fp
340204aa:	2b00      	cmp	r3, #0
340204ac:	d1ca      	bne.n	34020444 <_strtod_l+0x9cc>
340204ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
340204b2:	0d1b      	lsrs	r3, r3, #20
340204b4:	051b      	lsls	r3, r3, #20
340204b6:	429f      	cmp	r7, r3
340204b8:	d1c4      	bne.n	34020444 <_strtod_l+0x9cc>
340204ba:	f3cb 0913 	ubfx	r9, fp, #0, #20
340204be:	ec51 0b18 	vmov	r0, r1, d8
340204c2:	ea49 090a 	orr.w	r9, r9, sl
340204c6:	f7e1 fb65 	bl	34001b94 <__aeabi_d2lz>
340204ca:	f7e1 facd 	bl	34001a68 <__aeabi_l2d>
340204ce:	ea59 0908 	orrs.w	r9, r9, r8
340204d2:	ec41 0b17 	vmov	d7, r0, r1
340204d6:	ee38 8b47 	vsub.f64	d8, d8, d7
340204da:	d03c      	beq.n	34020556 <_strtod_l+0xade>
340204dc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 34020588 <_strtod_l+0xb10>
340204e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
340204e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340204e8:	f53f aceb 	bmi.w	3401fec2 <_strtod_l+0x44a>
340204ec:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 34020590 <_strtod_l+0xb18>
340204f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
340204f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340204f8:	dda4      	ble.n	34020444 <_strtod_l+0x9cc>
340204fa:	e4e2      	b.n	3401fec2 <_strtod_l+0x44a>
340204fc:	9906      	ldr	r1, [sp, #24]
340204fe:	b1e1      	cbz	r1, 3402053a <_strtod_l+0xac2>
34020500:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
34020504:	d819      	bhi.n	3402053a <_strtod_l+0xac2>
34020506:	eeb4 8bcb 	vcmpe.f64	d8, d11
3402050a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402050e:	d811      	bhi.n	34020534 <_strtod_l+0xabc>
34020510:	eebc 8bc8 	vcvt.u32.f64	s16, d8
34020514:	ee18 3a10 	vmov	r3, s16
34020518:	2b01      	cmp	r3, #1
3402051a:	bf38      	it	cc
3402051c:	2301      	movcc	r3, #1
3402051e:	ee08 3a10 	vmov	s16, r3
34020522:	eeb8 8b48 	vcvt.f64.u32	d8, s16
34020526:	f1b8 0f00 	cmp.w	r8, #0
3402052a:	d111      	bne.n	34020550 <_strtod_l+0xad8>
3402052c:	eeb1 7b48 	vneg.f64	d7, d8
34020530:	ec53 2b17 	vmov	r2, r3, d7
34020534:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
34020538:	1bcb      	subs	r3, r1, r7
3402053a:	eeb0 0b49 	vmov.f64	d0, d9
3402053e:	ec43 2b1a 	vmov	d10, r2, r3
34020542:	f003 f957 	bl	340237f4 <__ulp>
34020546:	eeaa 9b00 	vfma.f64	d9, d10, d0
3402054a:	ec5b ab19 	vmov	sl, fp, d9
3402054e:	e7aa      	b.n	340204a6 <_strtod_l+0xa2e>
34020550:	eeb0 7b48 	vmov.f64	d7, d8
34020554:	e7ec      	b.n	34020530 <_strtod_l+0xab8>
34020556:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 34020598 <_strtod_l+0xb20>
3402055a:	eeb4 8bc7 	vcmpe.f64	d8, d7
3402055e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020562:	f57f af6f 	bpl.w	34020444 <_strtod_l+0x9cc>
34020566:	e4ac      	b.n	3401fec2 <_strtod_l+0x44a>
34020568:	2300      	movs	r3, #0
3402056a:	9308      	str	r3, [sp, #32]
3402056c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3402056e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34020570:	6013      	str	r3, [r2, #0]
34020572:	f7ff bac0 	b.w	3401faf6 <_strtod_l+0x7e>
34020576:	2a65      	cmp	r2, #101	@ 0x65
34020578:	f43f abbb 	beq.w	3401fcf2 <_strtod_l+0x27a>
3402057c:	2a45      	cmp	r2, #69	@ 0x45
3402057e:	f43f abb8 	beq.w	3401fcf2 <_strtod_l+0x27a>
34020582:	2101      	movs	r1, #1
34020584:	f7ff bbf0 	b.w	3401fd68 <_strtod_l+0x2f0>
34020588:	94a03595 	.word	0x94a03595
3402058c:	3fdfffff 	.word	0x3fdfffff
34020590:	35afe535 	.word	0x35afe535
34020594:	3fe00000 	.word	0x3fe00000
34020598:	94a03595 	.word	0x94a03595
3402059c:	3fcfffff 	.word	0x3fcfffff
340205a0:	000fffff 	.word	0x000fffff
340205a4:	7ff00000 	.word	0x7ff00000
340205a8:	7fefffff 	.word	0x7fefffff
340205ac:	7fe00000 	.word	0x7fe00000
340205b0:	7c9fffff 	.word	0x7c9fffff
340205b4:	00000000 	.word	0x00000000

340205b8 <strtof>:
340205b8:	b510      	push	{r4, lr}
340205ba:	4c21      	ldr	r4, [pc, #132]	@ (34020640 <strtof+0x88>)
340205bc:	460a      	mov	r2, r1
340205be:	4b21      	ldr	r3, [pc, #132]	@ (34020644 <strtof+0x8c>)
340205c0:	4601      	mov	r1, r0
340205c2:	6820      	ldr	r0, [r4, #0]
340205c4:	f7ff fa58 	bl	3401fa78 <_strtod_l>
340205c8:	eeb4 0b40 	vcmp.f64	d0, d0
340205cc:	eeb0 7b40 	vmov.f64	d7, d0
340205d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340205d4:	d70d      	bvc.n	340205f2 <strtof+0x3a>
340205d6:	ee17 3a90 	vmov	r3, s15
340205da:	481b      	ldr	r0, [pc, #108]	@ (34020648 <strtof+0x90>)
340205dc:	2b00      	cmp	r3, #0
340205de:	da04      	bge.n	340205ea <strtof+0x32>
340205e0:	f001 fb5e 	bl	34021ca0 <nanf>
340205e4:	eeb1 0a40 	vneg.f32	s0, s0
340205e8:	bd10      	pop	{r4, pc}
340205ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340205ee:	f001 bb57 	b.w	34021ca0 <nanf>
340205f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
340205f6:	eddf 6a15 	vldr	s13, [pc, #84]	@ 3402064c <strtof+0x94>
340205fa:	eeb0 6ac0 	vabs.f32	s12, s0
340205fe:	eeb4 6a66 	vcmp.f32	s12, s13
34020602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020606:	dd08      	ble.n	3402061a <strtof+0x62>
34020608:	eeb0 6bc7 	vabs.f64	d6, d7
3402060c:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 34020638 <strtof+0x80>
34020610:	eeb4 6b45 	vcmp.f64	d6, d5
34020614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020618:	dd0a      	ble.n	34020630 <strtof+0x78>
3402061a:	ee10 3a10 	vmov	r3, s0
3402061e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
34020622:	d1e1      	bne.n	340205e8 <strtof+0x30>
34020624:	ee17 2a90 	vmov	r2, s15
34020628:	4b09      	ldr	r3, [pc, #36]	@ (34020650 <strtof+0x98>)
3402062a:	4013      	ands	r3, r2
3402062c:	2b00      	cmp	r3, #0
3402062e:	d0db      	beq.n	340205e8 <strtof+0x30>
34020630:	6823      	ldr	r3, [r4, #0]
34020632:	2222      	movs	r2, #34	@ 0x22
34020634:	601a      	str	r2, [r3, #0]
34020636:	e7d7      	b.n	340205e8 <strtof+0x30>
34020638:	ffffffff 	.word	0xffffffff
3402063c:	7fefffff 	.word	0x7fefffff
34020640:	340d0a3c 	.word	0x340d0a3c
34020644:	340d08d0 	.word	0x340d08d0
34020648:	3402b16a 	.word	0x3402b16a
3402064c:	7f7fffff 	.word	0x7f7fffff
34020650:	7ff00000 	.word	0x7ff00000

34020654 <swapfunc>:
34020654:	2b02      	cmp	r3, #2
34020656:	b510      	push	{r4, lr}
34020658:	d00a      	beq.n	34020670 <swapfunc+0x1c>
3402065a:	0892      	lsrs	r2, r2, #2
3402065c:	3a01      	subs	r2, #1
3402065e:	6803      	ldr	r3, [r0, #0]
34020660:	680c      	ldr	r4, [r1, #0]
34020662:	2a00      	cmp	r2, #0
34020664:	f840 4b04 	str.w	r4, [r0], #4
34020668:	f841 3b04 	str.w	r3, [r1], #4
3402066c:	dcf6      	bgt.n	3402065c <swapfunc+0x8>
3402066e:	bd10      	pop	{r4, pc}
34020670:	4402      	add	r2, r0
34020672:	7803      	ldrb	r3, [r0, #0]
34020674:	780c      	ldrb	r4, [r1, #0]
34020676:	f800 4b01 	strb.w	r4, [r0], #1
3402067a:	f801 3b01 	strb.w	r3, [r1], #1
3402067e:	1a13      	subs	r3, r2, r0
34020680:	2b00      	cmp	r3, #0
34020682:	dcf6      	bgt.n	34020672 <swapfunc+0x1e>
34020684:	e7f3      	b.n	3402066e <swapfunc+0x1a>

34020686 <med3.constprop.0>:
34020686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34020688:	460f      	mov	r7, r1
3402068a:	4616      	mov	r6, r2
3402068c:	4604      	mov	r4, r0
3402068e:	461d      	mov	r5, r3
34020690:	4798      	blx	r3
34020692:	2800      	cmp	r0, #0
34020694:	4631      	mov	r1, r6
34020696:	4638      	mov	r0, r7
34020698:	da0c      	bge.n	340206b4 <med3.constprop.0+0x2e>
3402069a:	47a8      	blx	r5
3402069c:	2800      	cmp	r0, #0
3402069e:	da02      	bge.n	340206a6 <med3.constprop.0+0x20>
340206a0:	463c      	mov	r4, r7
340206a2:	4620      	mov	r0, r4
340206a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
340206a6:	4631      	mov	r1, r6
340206a8:	4620      	mov	r0, r4
340206aa:	47a8      	blx	r5
340206ac:	2800      	cmp	r0, #0
340206ae:	daf8      	bge.n	340206a2 <med3.constprop.0+0x1c>
340206b0:	4634      	mov	r4, r6
340206b2:	e7f6      	b.n	340206a2 <med3.constprop.0+0x1c>
340206b4:	47a8      	blx	r5
340206b6:	2800      	cmp	r0, #0
340206b8:	dcf2      	bgt.n	340206a0 <med3.constprop.0+0x1a>
340206ba:	4631      	mov	r1, r6
340206bc:	4620      	mov	r0, r4
340206be:	47a8      	blx	r5
340206c0:	2800      	cmp	r0, #0
340206c2:	daf5      	bge.n	340206b0 <med3.constprop.0+0x2a>
340206c4:	e7ed      	b.n	340206a2 <med3.constprop.0+0x1c>

340206c6 <qsort>:
340206c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340206ca:	b095      	sub	sp, #84	@ 0x54
340206cc:	4607      	mov	r7, r0
340206ce:	4615      	mov	r5, r2
340206d0:	9300      	str	r3, [sp, #0]
340206d2:	ea40 0302 	orr.w	r3, r0, r2
340206d6:	079b      	lsls	r3, r3, #30
340206d8:	d119      	bne.n	3402070e <qsort+0x48>
340206da:	f1b2 0804 	subs.w	r8, r2, #4
340206de:	bf18      	it	ne
340206e0:	f04f 0801 	movne.w	r8, #1
340206e4:	2300      	movs	r3, #0
340206e6:	9301      	str	r3, [sp, #4]
340206e8:	fb05 f401 	mul.w	r4, r5, r1
340206ec:	2906      	cmp	r1, #6
340206ee:	eb07 0b05 	add.w	fp, r7, r5
340206f2:	eb07 0304 	add.w	r3, r7, r4
340206f6:	9302      	str	r3, [sp, #8]
340206f8:	d828      	bhi.n	3402074c <qsort+0x86>
340206fa:	9b02      	ldr	r3, [sp, #8]
340206fc:	459b      	cmp	fp, r3
340206fe:	d310      	bcc.n	34020722 <qsort+0x5c>
34020700:	9b01      	ldr	r3, [sp, #4]
34020702:	2b00      	cmp	r3, #0
34020704:	f040 8117 	bne.w	34020936 <qsort+0x270>
34020708:	b015      	add	sp, #84	@ 0x54
3402070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402070e:	f04f 0802 	mov.w	r8, #2
34020712:	e7e7      	b.n	340206e4 <qsort+0x1e>
34020714:	4643      	mov	r3, r8
34020716:	462a      	mov	r2, r5
34020718:	4631      	mov	r1, r6
3402071a:	4620      	mov	r0, r4
3402071c:	f7ff ff9a 	bl	34020654 <swapfunc>
34020720:	e00f      	b.n	34020742 <qsort+0x7c>
34020722:	465c      	mov	r4, fp
34020724:	e00e      	b.n	34020744 <qsort+0x7e>
34020726:	1b66      	subs	r6, r4, r5
34020728:	4621      	mov	r1, r4
3402072a:	9b00      	ldr	r3, [sp, #0]
3402072c:	4630      	mov	r0, r6
3402072e:	4798      	blx	r3
34020730:	2800      	cmp	r0, #0
34020732:	dd09      	ble.n	34020748 <qsort+0x82>
34020734:	f1b8 0f00 	cmp.w	r8, #0
34020738:	d1ec      	bne.n	34020714 <qsort+0x4e>
3402073a:	6823      	ldr	r3, [r4, #0]
3402073c:	6832      	ldr	r2, [r6, #0]
3402073e:	6022      	str	r2, [r4, #0]
34020740:	6033      	str	r3, [r6, #0]
34020742:	4634      	mov	r4, r6
34020744:	42a7      	cmp	r7, r4
34020746:	d3ee      	bcc.n	34020726 <qsort+0x60>
34020748:	44ab      	add	fp, r5
3402074a:	e7d6      	b.n	340206fa <qsort+0x34>
3402074c:	ea4f 0951 	mov.w	r9, r1, lsr #1
34020750:	1b64      	subs	r4, r4, r5
34020752:	2907      	cmp	r1, #7
34020754:	fb05 7909 	mla	r9, r5, r9, r7
34020758:	443c      	add	r4, r7
3402075a:	d021      	beq.n	340207a0 <qsort+0xda>
3402075c:	2928      	cmp	r1, #40	@ 0x28
3402075e:	d944      	bls.n	340207ea <qsort+0x124>
34020760:	08ce      	lsrs	r6, r1, #3
34020762:	9b00      	ldr	r3, [sp, #0]
34020764:	4638      	mov	r0, r7
34020766:	436e      	muls	r6, r5
34020768:	eb07 0246 	add.w	r2, r7, r6, lsl #1
3402076c:	19b9      	adds	r1, r7, r6
3402076e:	f7ff ff8a 	bl	34020686 <med3.constprop.0>
34020772:	4649      	mov	r1, r9
34020774:	eb09 0206 	add.w	r2, r9, r6
34020778:	9b00      	ldr	r3, [sp, #0]
3402077a:	4682      	mov	sl, r0
3402077c:	1b88      	subs	r0, r1, r6
3402077e:	f7ff ff82 	bl	34020686 <med3.constprop.0>
34020782:	4622      	mov	r2, r4
34020784:	4681      	mov	r9, r0
34020786:	9b00      	ldr	r3, [sp, #0]
34020788:	1ba1      	subs	r1, r4, r6
3402078a:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
3402078e:	f7ff ff7a 	bl	34020686 <med3.constprop.0>
34020792:	4602      	mov	r2, r0
34020794:	4649      	mov	r1, r9
34020796:	9b00      	ldr	r3, [sp, #0]
34020798:	4650      	mov	r0, sl
3402079a:	f7ff ff74 	bl	34020686 <med3.constprop.0>
3402079e:	4681      	mov	r9, r0
340207a0:	f1b8 0f00 	cmp.w	r8, #0
340207a4:	d124      	bne.n	340207f0 <qsort+0x12a>
340207a6:	683b      	ldr	r3, [r7, #0]
340207a8:	f8d9 2000 	ldr.w	r2, [r9]
340207ac:	603a      	str	r2, [r7, #0]
340207ae:	f8c9 3000 	str.w	r3, [r9]
340207b2:	46d9      	mov	r9, fp
340207b4:	46a2      	mov	sl, r4
340207b6:	465e      	mov	r6, fp
340207b8:	2300      	movs	r3, #0
340207ba:	45a1      	cmp	r9, r4
340207bc:	d836      	bhi.n	3402082c <qsort+0x166>
340207be:	9303      	str	r3, [sp, #12]
340207c0:	4639      	mov	r1, r7
340207c2:	9b00      	ldr	r3, [sp, #0]
340207c4:	4648      	mov	r0, r9
340207c6:	4798      	blx	r3
340207c8:	2800      	cmp	r0, #0
340207ca:	9b03      	ldr	r3, [sp, #12]
340207cc:	dc2c      	bgt.n	34020828 <qsort+0x162>
340207ce:	d10a      	bne.n	340207e6 <qsort+0x120>
340207d0:	f1b8 0f00 	cmp.w	r8, #0
340207d4:	d113      	bne.n	340207fe <qsort+0x138>
340207d6:	6833      	ldr	r3, [r6, #0]
340207d8:	f8d9 2000 	ldr.w	r2, [r9]
340207dc:	6032      	str	r2, [r6, #0]
340207de:	f8c9 3000 	str.w	r3, [r9]
340207e2:	442e      	add	r6, r5
340207e4:	2301      	movs	r3, #1
340207e6:	44a9      	add	r9, r5
340207e8:	e7e7      	b.n	340207ba <qsort+0xf4>
340207ea:	4622      	mov	r2, r4
340207ec:	46ba      	mov	sl, r7
340207ee:	e7d1      	b.n	34020794 <qsort+0xce>
340207f0:	4643      	mov	r3, r8
340207f2:	462a      	mov	r2, r5
340207f4:	4649      	mov	r1, r9
340207f6:	4638      	mov	r0, r7
340207f8:	f7ff ff2c 	bl	34020654 <swapfunc>
340207fc:	e7d9      	b.n	340207b2 <qsort+0xec>
340207fe:	4643      	mov	r3, r8
34020800:	462a      	mov	r2, r5
34020802:	4649      	mov	r1, r9
34020804:	4630      	mov	r0, r6
34020806:	f7ff ff25 	bl	34020654 <swapfunc>
3402080a:	e7ea      	b.n	340207e2 <qsort+0x11c>
3402080c:	d10b      	bne.n	34020826 <qsort+0x160>
3402080e:	f1b8 0f00 	cmp.w	r8, #0
34020812:	d113      	bne.n	3402083c <qsort+0x176>
34020814:	6823      	ldr	r3, [r4, #0]
34020816:	f8da 2000 	ldr.w	r2, [sl]
3402081a:	6022      	str	r2, [r4, #0]
3402081c:	f8ca 3000 	str.w	r3, [sl]
34020820:	ebaa 0a05 	sub.w	sl, sl, r5
34020824:	2301      	movs	r3, #1
34020826:	1b64      	subs	r4, r4, r5
34020828:	45a1      	cmp	r9, r4
3402082a:	d90e      	bls.n	3402084a <qsort+0x184>
3402082c:	2b00      	cmp	r3, #0
3402082e:	d140      	bne.n	340208b2 <qsort+0x1ec>
34020830:	9b02      	ldr	r3, [sp, #8]
34020832:	459b      	cmp	fp, r3
34020834:	f4bf af64 	bcs.w	34020700 <qsort+0x3a>
34020838:	465c      	mov	r4, fp
3402083a:	e036      	b.n	340208aa <qsort+0x1e4>
3402083c:	4643      	mov	r3, r8
3402083e:	462a      	mov	r2, r5
34020840:	4651      	mov	r1, sl
34020842:	4620      	mov	r0, r4
34020844:	f7ff ff06 	bl	34020654 <swapfunc>
34020848:	e7ea      	b.n	34020820 <qsort+0x15a>
3402084a:	9303      	str	r3, [sp, #12]
3402084c:	4639      	mov	r1, r7
3402084e:	9b00      	ldr	r3, [sp, #0]
34020850:	4620      	mov	r0, r4
34020852:	4798      	blx	r3
34020854:	2800      	cmp	r0, #0
34020856:	9b03      	ldr	r3, [sp, #12]
34020858:	dad8      	bge.n	3402080c <qsort+0x146>
3402085a:	f1b8 0f00 	cmp.w	r8, #0
3402085e:	d107      	bne.n	34020870 <qsort+0x1aa>
34020860:	f8d9 3000 	ldr.w	r3, [r9]
34020864:	6822      	ldr	r2, [r4, #0]
34020866:	f8c9 2000 	str.w	r2, [r9]
3402086a:	6023      	str	r3, [r4, #0]
3402086c:	1b64      	subs	r4, r4, r5
3402086e:	e7b9      	b.n	340207e4 <qsort+0x11e>
34020870:	4643      	mov	r3, r8
34020872:	462a      	mov	r2, r5
34020874:	4621      	mov	r1, r4
34020876:	4648      	mov	r0, r9
34020878:	f7ff feec 	bl	34020654 <swapfunc>
3402087c:	e7f6      	b.n	3402086c <qsort+0x1a6>
3402087e:	4643      	mov	r3, r8
34020880:	462a      	mov	r2, r5
34020882:	4631      	mov	r1, r6
34020884:	4620      	mov	r0, r4
34020886:	f7ff fee5 	bl	34020654 <swapfunc>
3402088a:	e00d      	b.n	340208a8 <qsort+0x1e2>
3402088c:	1b66      	subs	r6, r4, r5
3402088e:	4621      	mov	r1, r4
34020890:	9b00      	ldr	r3, [sp, #0]
34020892:	4630      	mov	r0, r6
34020894:	4798      	blx	r3
34020896:	2800      	cmp	r0, #0
34020898:	dd09      	ble.n	340208ae <qsort+0x1e8>
3402089a:	f1b8 0f00 	cmp.w	r8, #0
3402089e:	d1ee      	bne.n	3402087e <qsort+0x1b8>
340208a0:	6823      	ldr	r3, [r4, #0]
340208a2:	6832      	ldr	r2, [r6, #0]
340208a4:	6022      	str	r2, [r4, #0]
340208a6:	6033      	str	r3, [r6, #0]
340208a8:	4634      	mov	r4, r6
340208aa:	42a7      	cmp	r7, r4
340208ac:	d3ee      	bcc.n	3402088c <qsort+0x1c6>
340208ae:	44ab      	add	fp, r5
340208b0:	e7be      	b.n	34020830 <qsort+0x16a>
340208b2:	eba9 0b06 	sub.w	fp, r9, r6
340208b6:	1bf2      	subs	r2, r6, r7
340208b8:	455a      	cmp	r2, fp
340208ba:	bfa8      	it	ge
340208bc:	465a      	movge	r2, fp
340208be:	b12a      	cbz	r2, 340208cc <qsort+0x206>
340208c0:	4643      	mov	r3, r8
340208c2:	eba9 0102 	sub.w	r1, r9, r2
340208c6:	4638      	mov	r0, r7
340208c8:	f7ff fec4 	bl	34020654 <swapfunc>
340208cc:	9b02      	ldr	r3, [sp, #8]
340208ce:	ebaa 0404 	sub.w	r4, sl, r4
340208d2:	eba3 020a 	sub.w	r2, r3, sl
340208d6:	1b52      	subs	r2, r2, r5
340208d8:	42a2      	cmp	r2, r4
340208da:	bf28      	it	cs
340208dc:	4622      	movcs	r2, r4
340208de:	b12a      	cbz	r2, 340208ec <qsort+0x226>
340208e0:	9902      	ldr	r1, [sp, #8]
340208e2:	4643      	mov	r3, r8
340208e4:	4648      	mov	r0, r9
340208e6:	1a89      	subs	r1, r1, r2
340208e8:	f7ff feb4 	bl	34020654 <swapfunc>
340208ec:	9b02      	ldr	r3, [sp, #8]
340208ee:	455c      	cmp	r4, fp
340208f0:	eba3 0604 	sub.w	r6, r3, r4
340208f4:	d805      	bhi.n	34020902 <qsort+0x23c>
340208f6:	4623      	mov	r3, r4
340208f8:	465c      	mov	r4, fp
340208fa:	469b      	mov	fp, r3
340208fc:	4633      	mov	r3, r6
340208fe:	463e      	mov	r6, r7
34020900:	461f      	mov	r7, r3
34020902:	45ab      	cmp	fp, r5
34020904:	d920      	bls.n	34020948 <qsort+0x282>
34020906:	9b01      	ldr	r3, [sp, #4]
34020908:	2b07      	cmp	r3, #7
3402090a:	fbbb f1f5 	udiv	r1, fp, r5
3402090e:	d80b      	bhi.n	34020928 <qsort+0x262>
34020910:	aa14      	add	r2, sp, #80	@ 0x50
34020912:	fbb4 f4f5 	udiv	r4, r4, r5
34020916:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
3402091a:	f843 6c40 	str.w	r6, [r3, #-64]
3402091e:	f843 4c3c 	str.w	r4, [r3, #-60]
34020922:	9b01      	ldr	r3, [sp, #4]
34020924:	3301      	adds	r3, #1
34020926:	e6de      	b.n	340206e6 <qsort+0x20>
34020928:	9b00      	ldr	r3, [sp, #0]
3402092a:	462a      	mov	r2, r5
3402092c:	4638      	mov	r0, r7
3402092e:	f7ff feca 	bl	340206c6 <qsort>
34020932:	42ac      	cmp	r4, r5
34020934:	d80b      	bhi.n	3402094e <qsort+0x288>
34020936:	9b01      	ldr	r3, [sp, #4]
34020938:	aa14      	add	r2, sp, #80	@ 0x50
3402093a:	3b01      	subs	r3, #1
3402093c:	9301      	str	r3, [sp, #4]
3402093e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
34020942:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
34020946:	e6cf      	b.n	340206e8 <qsort+0x22>
34020948:	42ac      	cmp	r4, r5
3402094a:	f67f aed9 	bls.w	34020700 <qsort+0x3a>
3402094e:	4637      	mov	r7, r6
34020950:	fbb4 f1f5 	udiv	r1, r4, r5
34020954:	e6c8      	b.n	340206e8 <qsort+0x22>

34020956 <__cvt>:
34020956:	b5f0      	push	{r4, r5, r6, r7, lr}
34020958:	ed2d 8b02 	vpush	{d8}
3402095c:	eeb0 8b40 	vmov.f64	d8, d0
34020960:	b085      	sub	sp, #20
34020962:	4617      	mov	r7, r2
34020964:	460c      	mov	r4, r1
34020966:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
34020968:	ee18 2a90 	vmov	r2, s17
3402096c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3402096e:	f025 0520 	bic.w	r5, r5, #32
34020972:	2a00      	cmp	r2, #0
34020974:	bfb6      	itet	lt
34020976:	222d      	movlt	r2, #45	@ 0x2d
34020978:	2200      	movge	r2, #0
3402097a:	eeb1 8b40 	vneglt.f64	d8, d0
3402097e:	2d46      	cmp	r5, #70	@ 0x46
34020980:	701a      	strb	r2, [r3, #0]
34020982:	d004      	beq.n	3402098e <__cvt+0x38>
34020984:	2d45      	cmp	r5, #69	@ 0x45
34020986:	d100      	bne.n	3402098a <__cvt+0x34>
34020988:	3401      	adds	r4, #1
3402098a:	2102      	movs	r1, #2
3402098c:	e000      	b.n	34020990 <__cvt+0x3a>
3402098e:	2103      	movs	r1, #3
34020990:	ab03      	add	r3, sp, #12
34020992:	eeb0 0b48 	vmov.f64	d0, d8
34020996:	4622      	mov	r2, r4
34020998:	9301      	str	r3, [sp, #4]
3402099a:	ab02      	add	r3, sp, #8
3402099c:	9300      	str	r3, [sp, #0]
3402099e:	4633      	mov	r3, r6
340209a0:	f001 fa1a 	bl	34021dd8 <_dtoa_r>
340209a4:	2d47      	cmp	r5, #71	@ 0x47
340209a6:	d114      	bne.n	340209d2 <__cvt+0x7c>
340209a8:	07fb      	lsls	r3, r7, #31
340209aa:	d50a      	bpl.n	340209c2 <__cvt+0x6c>
340209ac:	1902      	adds	r2, r0, r4
340209ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
340209b2:	2130      	movs	r1, #48	@ 0x30
340209b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340209b8:	bf08      	it	eq
340209ba:	9203      	streq	r2, [sp, #12]
340209bc:	9b03      	ldr	r3, [sp, #12]
340209be:	4293      	cmp	r3, r2
340209c0:	d319      	bcc.n	340209f6 <__cvt+0xa0>
340209c2:	9b03      	ldr	r3, [sp, #12]
340209c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
340209c6:	1a1b      	subs	r3, r3, r0
340209c8:	6013      	str	r3, [r2, #0]
340209ca:	b005      	add	sp, #20
340209cc:	ecbd 8b02 	vpop	{d8}
340209d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
340209d2:	2d46      	cmp	r5, #70	@ 0x46
340209d4:	eb00 0204 	add.w	r2, r0, r4
340209d8:	d1e9      	bne.n	340209ae <__cvt+0x58>
340209da:	7803      	ldrb	r3, [r0, #0]
340209dc:	2b30      	cmp	r3, #48	@ 0x30
340209de:	d107      	bne.n	340209f0 <__cvt+0x9a>
340209e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
340209e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340209e8:	bf1c      	itt	ne
340209ea:	f1c4 0401 	rsbne	r4, r4, #1
340209ee:	6034      	strne	r4, [r6, #0]
340209f0:	6833      	ldr	r3, [r6, #0]
340209f2:	441a      	add	r2, r3
340209f4:	e7db      	b.n	340209ae <__cvt+0x58>
340209f6:	1c5c      	adds	r4, r3, #1
340209f8:	9403      	str	r4, [sp, #12]
340209fa:	7019      	strb	r1, [r3, #0]
340209fc:	e7de      	b.n	340209bc <__cvt+0x66>

340209fe <__exponent>:
340209fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34020a00:	2900      	cmp	r1, #0
34020a02:	7002      	strb	r2, [r0, #0]
34020a04:	bfba      	itte	lt
34020a06:	4249      	neglt	r1, r1
34020a08:	232d      	movlt	r3, #45	@ 0x2d
34020a0a:	232b      	movge	r3, #43	@ 0x2b
34020a0c:	2909      	cmp	r1, #9
34020a0e:	7043      	strb	r3, [r0, #1]
34020a10:	dd28      	ble.n	34020a64 <__exponent+0x66>
34020a12:	f10d 0307 	add.w	r3, sp, #7
34020a16:	270a      	movs	r7, #10
34020a18:	461d      	mov	r5, r3
34020a1a:	461a      	mov	r2, r3
34020a1c:	3b01      	subs	r3, #1
34020a1e:	fbb1 f6f7 	udiv	r6, r1, r7
34020a22:	fb07 1416 	mls	r4, r7, r6, r1
34020a26:	3430      	adds	r4, #48	@ 0x30
34020a28:	f802 4c01 	strb.w	r4, [r2, #-1]
34020a2c:	460c      	mov	r4, r1
34020a2e:	4631      	mov	r1, r6
34020a30:	2c63      	cmp	r4, #99	@ 0x63
34020a32:	dcf2      	bgt.n	34020a1a <__exponent+0x1c>
34020a34:	3130      	adds	r1, #48	@ 0x30
34020a36:	1e94      	subs	r4, r2, #2
34020a38:	f803 1c01 	strb.w	r1, [r3, #-1]
34020a3c:	1c41      	adds	r1, r0, #1
34020a3e:	4623      	mov	r3, r4
34020a40:	42ab      	cmp	r3, r5
34020a42:	d30a      	bcc.n	34020a5a <__exponent+0x5c>
34020a44:	f10d 0309 	add.w	r3, sp, #9
34020a48:	1a9b      	subs	r3, r3, r2
34020a4a:	42ac      	cmp	r4, r5
34020a4c:	bf88      	it	hi
34020a4e:	2300      	movhi	r3, #0
34020a50:	3302      	adds	r3, #2
34020a52:	4403      	add	r3, r0
34020a54:	1a18      	subs	r0, r3, r0
34020a56:	b003      	add	sp, #12
34020a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
34020a5a:	f813 6b01 	ldrb.w	r6, [r3], #1
34020a5e:	f801 6f01 	strb.w	r6, [r1, #1]!
34020a62:	e7ed      	b.n	34020a40 <__exponent+0x42>
34020a64:	2330      	movs	r3, #48	@ 0x30
34020a66:	3130      	adds	r1, #48	@ 0x30
34020a68:	7083      	strb	r3, [r0, #2]
34020a6a:	1d03      	adds	r3, r0, #4
34020a6c:	70c1      	strb	r1, [r0, #3]
34020a6e:	e7f1      	b.n	34020a54 <__exponent+0x56>

34020a70 <_printf_float>:
34020a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34020a74:	b08d      	sub	sp, #52	@ 0x34
34020a76:	460c      	mov	r4, r1
34020a78:	4616      	mov	r6, r2
34020a7a:	461f      	mov	r7, r3
34020a7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
34020a80:	4605      	mov	r5, r0
34020a82:	f001 f869 	bl	34021b58 <_localeconv_r>
34020a86:	f8d0 b000 	ldr.w	fp, [r0]
34020a8a:	4658      	mov	r0, fp
34020a8c:	f7df fe80 	bl	34000790 <strlen>
34020a90:	2300      	movs	r3, #0
34020a92:	f894 9018 	ldrb.w	r9, [r4, #24]
34020a96:	930a      	str	r3, [sp, #40]	@ 0x28
34020a98:	f8d8 3000 	ldr.w	r3, [r8]
34020a9c:	6822      	ldr	r2, [r4, #0]
34020a9e:	3307      	adds	r3, #7
34020aa0:	9005      	str	r0, [sp, #20]
34020aa2:	f023 0307 	bic.w	r3, r3, #7
34020aa6:	f103 0108 	add.w	r1, r3, #8
34020aaa:	f8c8 1000 	str.w	r1, [r8]
34020aae:	ed93 0b00 	vldr	d0, [r3]
34020ab2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 34020d10 <_printf_float+0x2a0>
34020ab6:	eeb0 7bc0 	vabs.f64	d7, d0
34020aba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
34020abe:	eeb4 7b46 	vcmp.f64	d7, d6
34020ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020ac6:	dd24      	ble.n	34020b12 <_printf_float+0xa2>
34020ac8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
34020acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020ad0:	d502      	bpl.n	34020ad8 <_printf_float+0x68>
34020ad2:	232d      	movs	r3, #45	@ 0x2d
34020ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34020ad8:	498f      	ldr	r1, [pc, #572]	@ (34020d18 <_printf_float+0x2a8>)
34020ada:	4b90      	ldr	r3, [pc, #576]	@ (34020d1c <_printf_float+0x2ac>)
34020adc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
34020ae0:	bf8c      	ite	hi
34020ae2:	4688      	movhi	r8, r1
34020ae4:	4698      	movls	r8, r3
34020ae6:	f022 0204 	bic.w	r2, r2, #4
34020aea:	2303      	movs	r3, #3
34020aec:	f04f 0a00 	mov.w	sl, #0
34020af0:	6022      	str	r2, [r4, #0]
34020af2:	6123      	str	r3, [r4, #16]
34020af4:	4633      	mov	r3, r6
34020af6:	aa0b      	add	r2, sp, #44	@ 0x2c
34020af8:	4621      	mov	r1, r4
34020afa:	4628      	mov	r0, r5
34020afc:	9700      	str	r7, [sp, #0]
34020afe:	f000 f9d1 	bl	34020ea4 <_printf_common>
34020b02:	3001      	adds	r0, #1
34020b04:	f040 8089 	bne.w	34020c1a <_printf_float+0x1aa>
34020b08:	f04f 30ff 	mov.w	r0, #4294967295
34020b0c:	b00d      	add	sp, #52	@ 0x34
34020b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34020b12:	eeb4 0b40 	vcmp.f64	d0, d0
34020b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020b1a:	d709      	bvc.n	34020b30 <_printf_float+0xc0>
34020b1c:	ee10 3a90 	vmov	r3, s1
34020b20:	497f      	ldr	r1, [pc, #508]	@ (34020d20 <_printf_float+0x2b0>)
34020b22:	2b00      	cmp	r3, #0
34020b24:	bfbc      	itt	lt
34020b26:	232d      	movlt	r3, #45	@ 0x2d
34020b28:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
34020b2c:	4b7d      	ldr	r3, [pc, #500]	@ (34020d24 <_printf_float+0x2b4>)
34020b2e:	e7d5      	b.n	34020adc <_printf_float+0x6c>
34020b30:	6863      	ldr	r3, [r4, #4]
34020b32:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
34020b36:	1c59      	adds	r1, r3, #1
34020b38:	d139      	bne.n	34020bae <_printf_float+0x13e>
34020b3a:	2306      	movs	r3, #6
34020b3c:	6063      	str	r3, [r4, #4]
34020b3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
34020b42:	2300      	movs	r3, #0
34020b44:	4628      	mov	r0, r5
34020b46:	6022      	str	r2, [r4, #0]
34020b48:	9303      	str	r3, [sp, #12]
34020b4a:	ab0a      	add	r3, sp, #40	@ 0x28
34020b4c:	e9cd 9301 	strd	r9, r3, [sp, #4]
34020b50:	ab09      	add	r3, sp, #36	@ 0x24
34020b52:	9300      	str	r3, [sp, #0]
34020b54:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
34020b58:	6861      	ldr	r1, [r4, #4]
34020b5a:	f7ff fefc 	bl	34020956 <__cvt>
34020b5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
34020b62:	4680      	mov	r8, r0
34020b64:	9909      	ldr	r1, [sp, #36]	@ 0x24
34020b66:	d129      	bne.n	34020bbc <_printf_float+0x14c>
34020b68:	1cc8      	adds	r0, r1, #3
34020b6a:	db02      	blt.n	34020b72 <_printf_float+0x102>
34020b6c:	6863      	ldr	r3, [r4, #4]
34020b6e:	4299      	cmp	r1, r3
34020b70:	dd41      	ble.n	34020bf6 <_printf_float+0x186>
34020b72:	f1a9 0902 	sub.w	r9, r9, #2
34020b76:	fa5f f989 	uxtb.w	r9, r9
34020b7a:	3901      	subs	r1, #1
34020b7c:	464a      	mov	r2, r9
34020b7e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
34020b82:	9109      	str	r1, [sp, #36]	@ 0x24
34020b84:	f7ff ff3b 	bl	340209fe <__exponent>
34020b88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
34020b8a:	4682      	mov	sl, r0
34020b8c:	1813      	adds	r3, r2, r0
34020b8e:	2a01      	cmp	r2, #1
34020b90:	6123      	str	r3, [r4, #16]
34020b92:	dc02      	bgt.n	34020b9a <_printf_float+0x12a>
34020b94:	6822      	ldr	r2, [r4, #0]
34020b96:	07d2      	lsls	r2, r2, #31
34020b98:	d501      	bpl.n	34020b9e <_printf_float+0x12e>
34020b9a:	3301      	adds	r3, #1
34020b9c:	6123      	str	r3, [r4, #16]
34020b9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
34020ba2:	2b00      	cmp	r3, #0
34020ba4:	d0a6      	beq.n	34020af4 <_printf_float+0x84>
34020ba6:	232d      	movs	r3, #45	@ 0x2d
34020ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34020bac:	e7a2      	b.n	34020af4 <_printf_float+0x84>
34020bae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
34020bb2:	d1c4      	bne.n	34020b3e <_printf_float+0xce>
34020bb4:	2b00      	cmp	r3, #0
34020bb6:	d1c2      	bne.n	34020b3e <_printf_float+0xce>
34020bb8:	2301      	movs	r3, #1
34020bba:	e7bf      	b.n	34020b3c <_printf_float+0xcc>
34020bbc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
34020bc0:	d9db      	bls.n	34020b7a <_printf_float+0x10a>
34020bc2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
34020bc6:	d118      	bne.n	34020bfa <_printf_float+0x18a>
34020bc8:	2900      	cmp	r1, #0
34020bca:	6863      	ldr	r3, [r4, #4]
34020bcc:	dd0b      	ble.n	34020be6 <_printf_float+0x176>
34020bce:	6121      	str	r1, [r4, #16]
34020bd0:	b913      	cbnz	r3, 34020bd8 <_printf_float+0x168>
34020bd2:	6822      	ldr	r2, [r4, #0]
34020bd4:	07d0      	lsls	r0, r2, #31
34020bd6:	d502      	bpl.n	34020bde <_printf_float+0x16e>
34020bd8:	3301      	adds	r3, #1
34020bda:	440b      	add	r3, r1
34020bdc:	6123      	str	r3, [r4, #16]
34020bde:	f04f 0a00 	mov.w	sl, #0
34020be2:	65a1      	str	r1, [r4, #88]	@ 0x58
34020be4:	e7db      	b.n	34020b9e <_printf_float+0x12e>
34020be6:	b913      	cbnz	r3, 34020bee <_printf_float+0x17e>
34020be8:	6822      	ldr	r2, [r4, #0]
34020bea:	07d2      	lsls	r2, r2, #31
34020bec:	d501      	bpl.n	34020bf2 <_printf_float+0x182>
34020bee:	3302      	adds	r3, #2
34020bf0:	e7f4      	b.n	34020bdc <_printf_float+0x16c>
34020bf2:	2301      	movs	r3, #1
34020bf4:	e7f2      	b.n	34020bdc <_printf_float+0x16c>
34020bf6:	f04f 0967 	mov.w	r9, #103	@ 0x67
34020bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34020bfc:	4299      	cmp	r1, r3
34020bfe:	db05      	blt.n	34020c0c <_printf_float+0x19c>
34020c00:	6823      	ldr	r3, [r4, #0]
34020c02:	6121      	str	r1, [r4, #16]
34020c04:	07d8      	lsls	r0, r3, #31
34020c06:	d5ea      	bpl.n	34020bde <_printf_float+0x16e>
34020c08:	1c4b      	adds	r3, r1, #1
34020c0a:	e7e7      	b.n	34020bdc <_printf_float+0x16c>
34020c0c:	2900      	cmp	r1, #0
34020c0e:	bfd4      	ite	le
34020c10:	f1c1 0202 	rsble	r2, r1, #2
34020c14:	2201      	movgt	r2, #1
34020c16:	4413      	add	r3, r2
34020c18:	e7e0      	b.n	34020bdc <_printf_float+0x16c>
34020c1a:	6823      	ldr	r3, [r4, #0]
34020c1c:	055a      	lsls	r2, r3, #21
34020c1e:	d407      	bmi.n	34020c30 <_printf_float+0x1c0>
34020c20:	6923      	ldr	r3, [r4, #16]
34020c22:	4642      	mov	r2, r8
34020c24:	4631      	mov	r1, r6
34020c26:	4628      	mov	r0, r5
34020c28:	47b8      	blx	r7
34020c2a:	3001      	adds	r0, #1
34020c2c:	d12a      	bne.n	34020c84 <_printf_float+0x214>
34020c2e:	e76b      	b.n	34020b08 <_printf_float+0x98>
34020c30:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
34020c34:	f240 80e0 	bls.w	34020df8 <_printf_float+0x388>
34020c38:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
34020c3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
34020c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020c44:	d133      	bne.n	34020cae <_printf_float+0x23e>
34020c46:	2301      	movs	r3, #1
34020c48:	4a37      	ldr	r2, [pc, #220]	@ (34020d28 <_printf_float+0x2b8>)
34020c4a:	4631      	mov	r1, r6
34020c4c:	4628      	mov	r0, r5
34020c4e:	47b8      	blx	r7
34020c50:	3001      	adds	r0, #1
34020c52:	f43f af59 	beq.w	34020b08 <_printf_float+0x98>
34020c56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
34020c5a:	4543      	cmp	r3, r8
34020c5c:	db02      	blt.n	34020c64 <_printf_float+0x1f4>
34020c5e:	6823      	ldr	r3, [r4, #0]
34020c60:	07d8      	lsls	r0, r3, #31
34020c62:	d50f      	bpl.n	34020c84 <_printf_float+0x214>
34020c64:	9b05      	ldr	r3, [sp, #20]
34020c66:	465a      	mov	r2, fp
34020c68:	4631      	mov	r1, r6
34020c6a:	4628      	mov	r0, r5
34020c6c:	47b8      	blx	r7
34020c6e:	3001      	adds	r0, #1
34020c70:	f43f af4a 	beq.w	34020b08 <_printf_float+0x98>
34020c74:	f04f 0900 	mov.w	r9, #0
34020c78:	f108 38ff 	add.w	r8, r8, #4294967295
34020c7c:	f104 0a1a 	add.w	sl, r4, #26
34020c80:	45c8      	cmp	r8, r9
34020c82:	dc09      	bgt.n	34020c98 <_printf_float+0x228>
34020c84:	6823      	ldr	r3, [r4, #0]
34020c86:	079b      	lsls	r3, r3, #30
34020c88:	f100 8107 	bmi.w	34020e9a <_printf_float+0x42a>
34020c8c:	68e0      	ldr	r0, [r4, #12]
34020c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34020c90:	4298      	cmp	r0, r3
34020c92:	bfb8      	it	lt
34020c94:	4618      	movlt	r0, r3
34020c96:	e739      	b.n	34020b0c <_printf_float+0x9c>
34020c98:	2301      	movs	r3, #1
34020c9a:	4652      	mov	r2, sl
34020c9c:	4631      	mov	r1, r6
34020c9e:	4628      	mov	r0, r5
34020ca0:	47b8      	blx	r7
34020ca2:	3001      	adds	r0, #1
34020ca4:	f43f af30 	beq.w	34020b08 <_printf_float+0x98>
34020ca8:	f109 0901 	add.w	r9, r9, #1
34020cac:	e7e8      	b.n	34020c80 <_printf_float+0x210>
34020cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34020cb0:	2b00      	cmp	r3, #0
34020cb2:	dc3b      	bgt.n	34020d2c <_printf_float+0x2bc>
34020cb4:	2301      	movs	r3, #1
34020cb6:	4a1c      	ldr	r2, [pc, #112]	@ (34020d28 <_printf_float+0x2b8>)
34020cb8:	4631      	mov	r1, r6
34020cba:	4628      	mov	r0, r5
34020cbc:	47b8      	blx	r7
34020cbe:	3001      	adds	r0, #1
34020cc0:	f43f af22 	beq.w	34020b08 <_printf_float+0x98>
34020cc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
34020cc8:	ea59 0303 	orrs.w	r3, r9, r3
34020ccc:	d102      	bne.n	34020cd4 <_printf_float+0x264>
34020cce:	6823      	ldr	r3, [r4, #0]
34020cd0:	07d9      	lsls	r1, r3, #31
34020cd2:	d5d7      	bpl.n	34020c84 <_printf_float+0x214>
34020cd4:	9b05      	ldr	r3, [sp, #20]
34020cd6:	465a      	mov	r2, fp
34020cd8:	4631      	mov	r1, r6
34020cda:	4628      	mov	r0, r5
34020cdc:	47b8      	blx	r7
34020cde:	3001      	adds	r0, #1
34020ce0:	f43f af12 	beq.w	34020b08 <_printf_float+0x98>
34020ce4:	f04f 0a00 	mov.w	sl, #0
34020ce8:	f104 0b1a 	add.w	fp, r4, #26
34020cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34020cee:	425b      	negs	r3, r3
34020cf0:	4553      	cmp	r3, sl
34020cf2:	dc01      	bgt.n	34020cf8 <_printf_float+0x288>
34020cf4:	464b      	mov	r3, r9
34020cf6:	e794      	b.n	34020c22 <_printf_float+0x1b2>
34020cf8:	2301      	movs	r3, #1
34020cfa:	465a      	mov	r2, fp
34020cfc:	4631      	mov	r1, r6
34020cfe:	4628      	mov	r0, r5
34020d00:	47b8      	blx	r7
34020d02:	3001      	adds	r0, #1
34020d04:	f43f af00 	beq.w	34020b08 <_printf_float+0x98>
34020d08:	f10a 0a01 	add.w	sl, sl, #1
34020d0c:	e7ee      	b.n	34020cec <_printf_float+0x27c>
34020d0e:	bf00      	nop
34020d10:	ffffffff 	.word	0xffffffff
34020d14:	7fefffff 	.word	0x7fefffff
34020d18:	3402fee8 	.word	0x3402fee8
34020d1c:	3402fee4 	.word	0x3402fee4
34020d20:	3402fef0 	.word	0x3402fef0
34020d24:	3402feec 	.word	0x3402feec
34020d28:	3402b7cd 	.word	0x3402b7cd
34020d2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
34020d2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
34020d32:	4553      	cmp	r3, sl
34020d34:	bfa8      	it	ge
34020d36:	4653      	movge	r3, sl
34020d38:	2b00      	cmp	r3, #0
34020d3a:	4699      	mov	r9, r3
34020d3c:	dc37      	bgt.n	34020dae <_printf_float+0x33e>
34020d3e:	2300      	movs	r3, #0
34020d40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
34020d44:	f104 021a 	add.w	r2, r4, #26
34020d48:	9307      	str	r3, [sp, #28]
34020d4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
34020d4c:	9907      	ldr	r1, [sp, #28]
34020d4e:	9306      	str	r3, [sp, #24]
34020d50:	eba3 0309 	sub.w	r3, r3, r9
34020d54:	428b      	cmp	r3, r1
34020d56:	dc31      	bgt.n	34020dbc <_printf_float+0x34c>
34020d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34020d5a:	459a      	cmp	sl, r3
34020d5c:	dc3b      	bgt.n	34020dd6 <_printf_float+0x366>
34020d5e:	6823      	ldr	r3, [r4, #0]
34020d60:	07da      	lsls	r2, r3, #31
34020d62:	d438      	bmi.n	34020dd6 <_printf_float+0x366>
34020d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34020d66:	ebaa 0903 	sub.w	r9, sl, r3
34020d6a:	9b06      	ldr	r3, [sp, #24]
34020d6c:	ebaa 0303 	sub.w	r3, sl, r3
34020d70:	4599      	cmp	r9, r3
34020d72:	bfa8      	it	ge
34020d74:	4699      	movge	r9, r3
34020d76:	f1b9 0f00 	cmp.w	r9, #0
34020d7a:	dc34      	bgt.n	34020de6 <_printf_float+0x376>
34020d7c:	f04f 0800 	mov.w	r8, #0
34020d80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
34020d84:	f104 0b1a 	add.w	fp, r4, #26
34020d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34020d8a:	ebaa 0303 	sub.w	r3, sl, r3
34020d8e:	eba3 0309 	sub.w	r3, r3, r9
34020d92:	4543      	cmp	r3, r8
34020d94:	f77f af76 	ble.w	34020c84 <_printf_float+0x214>
34020d98:	2301      	movs	r3, #1
34020d9a:	465a      	mov	r2, fp
34020d9c:	4631      	mov	r1, r6
34020d9e:	4628      	mov	r0, r5
34020da0:	47b8      	blx	r7
34020da2:	3001      	adds	r0, #1
34020da4:	f43f aeb0 	beq.w	34020b08 <_printf_float+0x98>
34020da8:	f108 0801 	add.w	r8, r8, #1
34020dac:	e7ec      	b.n	34020d88 <_printf_float+0x318>
34020dae:	4642      	mov	r2, r8
34020db0:	4631      	mov	r1, r6
34020db2:	4628      	mov	r0, r5
34020db4:	47b8      	blx	r7
34020db6:	3001      	adds	r0, #1
34020db8:	d1c1      	bne.n	34020d3e <_printf_float+0x2ce>
34020dba:	e6a5      	b.n	34020b08 <_printf_float+0x98>
34020dbc:	2301      	movs	r3, #1
34020dbe:	4631      	mov	r1, r6
34020dc0:	4628      	mov	r0, r5
34020dc2:	9206      	str	r2, [sp, #24]
34020dc4:	47b8      	blx	r7
34020dc6:	3001      	adds	r0, #1
34020dc8:	f43f ae9e 	beq.w	34020b08 <_printf_float+0x98>
34020dcc:	9b07      	ldr	r3, [sp, #28]
34020dce:	9a06      	ldr	r2, [sp, #24]
34020dd0:	3301      	adds	r3, #1
34020dd2:	9307      	str	r3, [sp, #28]
34020dd4:	e7b9      	b.n	34020d4a <_printf_float+0x2da>
34020dd6:	9b05      	ldr	r3, [sp, #20]
34020dd8:	465a      	mov	r2, fp
34020dda:	4631      	mov	r1, r6
34020ddc:	4628      	mov	r0, r5
34020dde:	47b8      	blx	r7
34020de0:	3001      	adds	r0, #1
34020de2:	d1bf      	bne.n	34020d64 <_printf_float+0x2f4>
34020de4:	e690      	b.n	34020b08 <_printf_float+0x98>
34020de6:	9a06      	ldr	r2, [sp, #24]
34020de8:	464b      	mov	r3, r9
34020dea:	4631      	mov	r1, r6
34020dec:	4628      	mov	r0, r5
34020dee:	4442      	add	r2, r8
34020df0:	47b8      	blx	r7
34020df2:	3001      	adds	r0, #1
34020df4:	d1c2      	bne.n	34020d7c <_printf_float+0x30c>
34020df6:	e687      	b.n	34020b08 <_printf_float+0x98>
34020df8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
34020dfc:	f1b9 0f01 	cmp.w	r9, #1
34020e00:	dc01      	bgt.n	34020e06 <_printf_float+0x396>
34020e02:	07db      	lsls	r3, r3, #31
34020e04:	d536      	bpl.n	34020e74 <_printf_float+0x404>
34020e06:	2301      	movs	r3, #1
34020e08:	4642      	mov	r2, r8
34020e0a:	4631      	mov	r1, r6
34020e0c:	4628      	mov	r0, r5
34020e0e:	47b8      	blx	r7
34020e10:	3001      	adds	r0, #1
34020e12:	f43f ae79 	beq.w	34020b08 <_printf_float+0x98>
34020e16:	9b05      	ldr	r3, [sp, #20]
34020e18:	465a      	mov	r2, fp
34020e1a:	4631      	mov	r1, r6
34020e1c:	4628      	mov	r0, r5
34020e1e:	47b8      	blx	r7
34020e20:	3001      	adds	r0, #1
34020e22:	f43f ae71 	beq.w	34020b08 <_printf_float+0x98>
34020e26:	f109 39ff 	add.w	r9, r9, #4294967295
34020e2a:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
34020e2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
34020e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020e36:	d018      	beq.n	34020e6a <_printf_float+0x3fa>
34020e38:	464b      	mov	r3, r9
34020e3a:	f108 0201 	add.w	r2, r8, #1
34020e3e:	4631      	mov	r1, r6
34020e40:	4628      	mov	r0, r5
34020e42:	47b8      	blx	r7
34020e44:	3001      	adds	r0, #1
34020e46:	d10c      	bne.n	34020e62 <_printf_float+0x3f2>
34020e48:	e65e      	b.n	34020b08 <_printf_float+0x98>
34020e4a:	2301      	movs	r3, #1
34020e4c:	465a      	mov	r2, fp
34020e4e:	4631      	mov	r1, r6
34020e50:	4628      	mov	r0, r5
34020e52:	47b8      	blx	r7
34020e54:	3001      	adds	r0, #1
34020e56:	f43f ae57 	beq.w	34020b08 <_printf_float+0x98>
34020e5a:	f108 0801 	add.w	r8, r8, #1
34020e5e:	45c8      	cmp	r8, r9
34020e60:	dbf3      	blt.n	34020e4a <_printf_float+0x3da>
34020e62:	4653      	mov	r3, sl
34020e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
34020e68:	e6dc      	b.n	34020c24 <_printf_float+0x1b4>
34020e6a:	f04f 0800 	mov.w	r8, #0
34020e6e:	f104 0b1a 	add.w	fp, r4, #26
34020e72:	e7f4      	b.n	34020e5e <_printf_float+0x3ee>
34020e74:	2301      	movs	r3, #1
34020e76:	4642      	mov	r2, r8
34020e78:	e7e1      	b.n	34020e3e <_printf_float+0x3ce>
34020e7a:	2301      	movs	r3, #1
34020e7c:	464a      	mov	r2, r9
34020e7e:	4631      	mov	r1, r6
34020e80:	4628      	mov	r0, r5
34020e82:	47b8      	blx	r7
34020e84:	3001      	adds	r0, #1
34020e86:	f43f ae3f 	beq.w	34020b08 <_printf_float+0x98>
34020e8a:	f108 0801 	add.w	r8, r8, #1
34020e8e:	68e3      	ldr	r3, [r4, #12]
34020e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
34020e92:	1a5b      	subs	r3, r3, r1
34020e94:	4543      	cmp	r3, r8
34020e96:	dcf0      	bgt.n	34020e7a <_printf_float+0x40a>
34020e98:	e6f8      	b.n	34020c8c <_printf_float+0x21c>
34020e9a:	f04f 0800 	mov.w	r8, #0
34020e9e:	f104 0919 	add.w	r9, r4, #25
34020ea2:	e7f4      	b.n	34020e8e <_printf_float+0x41e>

34020ea4 <_printf_common>:
34020ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34020ea8:	4616      	mov	r6, r2
34020eaa:	4698      	mov	r8, r3
34020eac:	688a      	ldr	r2, [r1, #8]
34020eae:	4607      	mov	r7, r0
34020eb0:	690b      	ldr	r3, [r1, #16]
34020eb2:	460c      	mov	r4, r1
34020eb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
34020eb8:	4293      	cmp	r3, r2
34020eba:	bfb8      	it	lt
34020ebc:	4613      	movlt	r3, r2
34020ebe:	6033      	str	r3, [r6, #0]
34020ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
34020ec4:	b10a      	cbz	r2, 34020eca <_printf_common+0x26>
34020ec6:	3301      	adds	r3, #1
34020ec8:	6033      	str	r3, [r6, #0]
34020eca:	6823      	ldr	r3, [r4, #0]
34020ecc:	0699      	lsls	r1, r3, #26
34020ece:	bf42      	ittt	mi
34020ed0:	6833      	ldrmi	r3, [r6, #0]
34020ed2:	3302      	addmi	r3, #2
34020ed4:	6033      	strmi	r3, [r6, #0]
34020ed6:	6825      	ldr	r5, [r4, #0]
34020ed8:	f015 0506 	ands.w	r5, r5, #6
34020edc:	d106      	bne.n	34020eec <_printf_common+0x48>
34020ede:	f104 0a19 	add.w	sl, r4, #25
34020ee2:	68e3      	ldr	r3, [r4, #12]
34020ee4:	6832      	ldr	r2, [r6, #0]
34020ee6:	1a9b      	subs	r3, r3, r2
34020ee8:	42ab      	cmp	r3, r5
34020eea:	dc2b      	bgt.n	34020f44 <_printf_common+0xa0>
34020eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
34020ef0:	6822      	ldr	r2, [r4, #0]
34020ef2:	3b00      	subs	r3, #0
34020ef4:	bf18      	it	ne
34020ef6:	2301      	movne	r3, #1
34020ef8:	0692      	lsls	r2, r2, #26
34020efa:	d430      	bmi.n	34020f5e <_printf_common+0xba>
34020efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
34020f00:	4641      	mov	r1, r8
34020f02:	4638      	mov	r0, r7
34020f04:	47c8      	blx	r9
34020f06:	3001      	adds	r0, #1
34020f08:	d023      	beq.n	34020f52 <_printf_common+0xae>
34020f0a:	6823      	ldr	r3, [r4, #0]
34020f0c:	341a      	adds	r4, #26
34020f0e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
34020f12:	f003 0306 	and.w	r3, r3, #6
34020f16:	2b04      	cmp	r3, #4
34020f18:	bf0a      	itet	eq
34020f1a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
34020f1e:	2500      	movne	r5, #0
34020f20:	6833      	ldreq	r3, [r6, #0]
34020f22:	f04f 0600 	mov.w	r6, #0
34020f26:	bf08      	it	eq
34020f28:	1aed      	subeq	r5, r5, r3
34020f2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
34020f2e:	bf08      	it	eq
34020f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
34020f34:	4293      	cmp	r3, r2
34020f36:	bfc4      	itt	gt
34020f38:	1a9b      	subgt	r3, r3, r2
34020f3a:	18ed      	addgt	r5, r5, r3
34020f3c:	42b5      	cmp	r5, r6
34020f3e:	d11a      	bne.n	34020f76 <_printf_common+0xd2>
34020f40:	2000      	movs	r0, #0
34020f42:	e008      	b.n	34020f56 <_printf_common+0xb2>
34020f44:	2301      	movs	r3, #1
34020f46:	4652      	mov	r2, sl
34020f48:	4641      	mov	r1, r8
34020f4a:	4638      	mov	r0, r7
34020f4c:	47c8      	blx	r9
34020f4e:	3001      	adds	r0, #1
34020f50:	d103      	bne.n	34020f5a <_printf_common+0xb6>
34020f52:	f04f 30ff 	mov.w	r0, #4294967295
34020f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34020f5a:	3501      	adds	r5, #1
34020f5c:	e7c1      	b.n	34020ee2 <_printf_common+0x3e>
34020f5e:	18e1      	adds	r1, r4, r3
34020f60:	1c5a      	adds	r2, r3, #1
34020f62:	2030      	movs	r0, #48	@ 0x30
34020f64:	3302      	adds	r3, #2
34020f66:	4422      	add	r2, r4
34020f68:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
34020f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
34020f70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
34020f74:	e7c2      	b.n	34020efc <_printf_common+0x58>
34020f76:	2301      	movs	r3, #1
34020f78:	4622      	mov	r2, r4
34020f7a:	4641      	mov	r1, r8
34020f7c:	4638      	mov	r0, r7
34020f7e:	47c8      	blx	r9
34020f80:	3001      	adds	r0, #1
34020f82:	d0e6      	beq.n	34020f52 <_printf_common+0xae>
34020f84:	3601      	adds	r6, #1
34020f86:	e7d9      	b.n	34020f3c <_printf_common+0x98>

34020f88 <_printf_i>:
34020f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
34020f8c:	7e0f      	ldrb	r7, [r1, #24]
34020f8e:	4691      	mov	r9, r2
34020f90:	4680      	mov	r8, r0
34020f92:	460c      	mov	r4, r1
34020f94:	2f78      	cmp	r7, #120	@ 0x78
34020f96:	469a      	mov	sl, r3
34020f98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
34020f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
34020f9e:	d807      	bhi.n	34020fb0 <_printf_i+0x28>
34020fa0:	2f62      	cmp	r7, #98	@ 0x62
34020fa2:	d80a      	bhi.n	34020fba <_printf_i+0x32>
34020fa4:	2f00      	cmp	r7, #0
34020fa6:	f000 80d1 	beq.w	3402114c <_printf_i+0x1c4>
34020faa:	2f58      	cmp	r7, #88	@ 0x58
34020fac:	f000 80b8 	beq.w	34021120 <_printf_i+0x198>
34020fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
34020fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
34020fb8:	e03a      	b.n	34021030 <_printf_i+0xa8>
34020fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
34020fbe:	2b15      	cmp	r3, #21
34020fc0:	d8f6      	bhi.n	34020fb0 <_printf_i+0x28>
34020fc2:	a101      	add	r1, pc, #4	@ (adr r1, 34020fc8 <_printf_i+0x40>)
34020fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
34020fc8:	34021021 	.word	0x34021021
34020fcc:	34021035 	.word	0x34021035
34020fd0:	34020fb1 	.word	0x34020fb1
34020fd4:	34020fb1 	.word	0x34020fb1
34020fd8:	34020fb1 	.word	0x34020fb1
34020fdc:	34020fb1 	.word	0x34020fb1
34020fe0:	34021035 	.word	0x34021035
34020fe4:	34020fb1 	.word	0x34020fb1
34020fe8:	34020fb1 	.word	0x34020fb1
34020fec:	34020fb1 	.word	0x34020fb1
34020ff0:	34020fb1 	.word	0x34020fb1
34020ff4:	34021133 	.word	0x34021133
34020ff8:	3402105f 	.word	0x3402105f
34020ffc:	340210ed 	.word	0x340210ed
34021000:	34020fb1 	.word	0x34020fb1
34021004:	34020fb1 	.word	0x34020fb1
34021008:	34021155 	.word	0x34021155
3402100c:	34020fb1 	.word	0x34020fb1
34021010:	3402105f 	.word	0x3402105f
34021014:	34020fb1 	.word	0x34020fb1
34021018:	34020fb1 	.word	0x34020fb1
3402101c:	340210f5 	.word	0x340210f5
34021020:	6833      	ldr	r3, [r6, #0]
34021022:	1d1a      	adds	r2, r3, #4
34021024:	681b      	ldr	r3, [r3, #0]
34021026:	6032      	str	r2, [r6, #0]
34021028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3402102c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
34021030:	2301      	movs	r3, #1
34021032:	e09c      	b.n	3402116e <_printf_i+0x1e6>
34021034:	6833      	ldr	r3, [r6, #0]
34021036:	6820      	ldr	r0, [r4, #0]
34021038:	1d19      	adds	r1, r3, #4
3402103a:	6031      	str	r1, [r6, #0]
3402103c:	0606      	lsls	r6, r0, #24
3402103e:	d501      	bpl.n	34021044 <_printf_i+0xbc>
34021040:	681d      	ldr	r5, [r3, #0]
34021042:	e003      	b.n	3402104c <_printf_i+0xc4>
34021044:	0645      	lsls	r5, r0, #25
34021046:	d5fb      	bpl.n	34021040 <_printf_i+0xb8>
34021048:	f9b3 5000 	ldrsh.w	r5, [r3]
3402104c:	2d00      	cmp	r5, #0
3402104e:	da03      	bge.n	34021058 <_printf_i+0xd0>
34021050:	232d      	movs	r3, #45	@ 0x2d
34021052:	426d      	negs	r5, r5
34021054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34021058:	4858      	ldr	r0, [pc, #352]	@ (340211bc <_printf_i+0x234>)
3402105a:	230a      	movs	r3, #10
3402105c:	e011      	b.n	34021082 <_printf_i+0xfa>
3402105e:	6821      	ldr	r1, [r4, #0]
34021060:	6833      	ldr	r3, [r6, #0]
34021062:	0608      	lsls	r0, r1, #24
34021064:	f853 5b04 	ldr.w	r5, [r3], #4
34021068:	d402      	bmi.n	34021070 <_printf_i+0xe8>
3402106a:	0649      	lsls	r1, r1, #25
3402106c:	bf48      	it	mi
3402106e:	b2ad      	uxthmi	r5, r5
34021070:	2f6f      	cmp	r7, #111	@ 0x6f
34021072:	6033      	str	r3, [r6, #0]
34021074:	4851      	ldr	r0, [pc, #324]	@ (340211bc <_printf_i+0x234>)
34021076:	bf14      	ite	ne
34021078:	230a      	movne	r3, #10
3402107a:	2308      	moveq	r3, #8
3402107c:	2100      	movs	r1, #0
3402107e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
34021082:	6866      	ldr	r6, [r4, #4]
34021084:	2e00      	cmp	r6, #0
34021086:	60a6      	str	r6, [r4, #8]
34021088:	db05      	blt.n	34021096 <_printf_i+0x10e>
3402108a:	6821      	ldr	r1, [r4, #0]
3402108c:	432e      	orrs	r6, r5
3402108e:	f021 0104 	bic.w	r1, r1, #4
34021092:	6021      	str	r1, [r4, #0]
34021094:	d04b      	beq.n	3402112e <_printf_i+0x1a6>
34021096:	4616      	mov	r6, r2
34021098:	fbb5 f1f3 	udiv	r1, r5, r3
3402109c:	fb03 5711 	mls	r7, r3, r1, r5
340210a0:	5dc7      	ldrb	r7, [r0, r7]
340210a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
340210a6:	462f      	mov	r7, r5
340210a8:	460d      	mov	r5, r1
340210aa:	42bb      	cmp	r3, r7
340210ac:	d9f4      	bls.n	34021098 <_printf_i+0x110>
340210ae:	2b08      	cmp	r3, #8
340210b0:	d10b      	bne.n	340210ca <_printf_i+0x142>
340210b2:	6823      	ldr	r3, [r4, #0]
340210b4:	07df      	lsls	r7, r3, #31
340210b6:	d508      	bpl.n	340210ca <_printf_i+0x142>
340210b8:	6923      	ldr	r3, [r4, #16]
340210ba:	6861      	ldr	r1, [r4, #4]
340210bc:	4299      	cmp	r1, r3
340210be:	bfde      	ittt	le
340210c0:	2330      	movle	r3, #48	@ 0x30
340210c2:	f806 3c01 	strble.w	r3, [r6, #-1]
340210c6:	f106 36ff 	addle.w	r6, r6, #4294967295
340210ca:	1b92      	subs	r2, r2, r6
340210cc:	6122      	str	r2, [r4, #16]
340210ce:	464b      	mov	r3, r9
340210d0:	aa03      	add	r2, sp, #12
340210d2:	4621      	mov	r1, r4
340210d4:	4640      	mov	r0, r8
340210d6:	f8cd a000 	str.w	sl, [sp]
340210da:	f7ff fee3 	bl	34020ea4 <_printf_common>
340210de:	3001      	adds	r0, #1
340210e0:	d14a      	bne.n	34021178 <_printf_i+0x1f0>
340210e2:	f04f 30ff 	mov.w	r0, #4294967295
340210e6:	b004      	add	sp, #16
340210e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
340210ec:	6823      	ldr	r3, [r4, #0]
340210ee:	f043 0320 	orr.w	r3, r3, #32
340210f2:	6023      	str	r3, [r4, #0]
340210f4:	2778      	movs	r7, #120	@ 0x78
340210f6:	4832      	ldr	r0, [pc, #200]	@ (340211c0 <_printf_i+0x238>)
340210f8:	6823      	ldr	r3, [r4, #0]
340210fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
340210fe:	061f      	lsls	r7, r3, #24
34021100:	6831      	ldr	r1, [r6, #0]
34021102:	f851 5b04 	ldr.w	r5, [r1], #4
34021106:	d402      	bmi.n	3402110e <_printf_i+0x186>
34021108:	065f      	lsls	r7, r3, #25
3402110a:	bf48      	it	mi
3402110c:	b2ad      	uxthmi	r5, r5
3402110e:	6031      	str	r1, [r6, #0]
34021110:	07d9      	lsls	r1, r3, #31
34021112:	bf44      	itt	mi
34021114:	f043 0320 	orrmi.w	r3, r3, #32
34021118:	6023      	strmi	r3, [r4, #0]
3402111a:	b11d      	cbz	r5, 34021124 <_printf_i+0x19c>
3402111c:	2310      	movs	r3, #16
3402111e:	e7ad      	b.n	3402107c <_printf_i+0xf4>
34021120:	4826      	ldr	r0, [pc, #152]	@ (340211bc <_printf_i+0x234>)
34021122:	e7e9      	b.n	340210f8 <_printf_i+0x170>
34021124:	6823      	ldr	r3, [r4, #0]
34021126:	f023 0320 	bic.w	r3, r3, #32
3402112a:	6023      	str	r3, [r4, #0]
3402112c:	e7f6      	b.n	3402111c <_printf_i+0x194>
3402112e:	4616      	mov	r6, r2
34021130:	e7bd      	b.n	340210ae <_printf_i+0x126>
34021132:	6833      	ldr	r3, [r6, #0]
34021134:	6825      	ldr	r5, [r4, #0]
34021136:	1d18      	adds	r0, r3, #4
34021138:	6961      	ldr	r1, [r4, #20]
3402113a:	6030      	str	r0, [r6, #0]
3402113c:	062e      	lsls	r6, r5, #24
3402113e:	681b      	ldr	r3, [r3, #0]
34021140:	d501      	bpl.n	34021146 <_printf_i+0x1be>
34021142:	6019      	str	r1, [r3, #0]
34021144:	e002      	b.n	3402114c <_printf_i+0x1c4>
34021146:	0668      	lsls	r0, r5, #25
34021148:	d5fb      	bpl.n	34021142 <_printf_i+0x1ba>
3402114a:	8019      	strh	r1, [r3, #0]
3402114c:	2300      	movs	r3, #0
3402114e:	4616      	mov	r6, r2
34021150:	6123      	str	r3, [r4, #16]
34021152:	e7bc      	b.n	340210ce <_printf_i+0x146>
34021154:	6833      	ldr	r3, [r6, #0]
34021156:	2100      	movs	r1, #0
34021158:	1d1a      	adds	r2, r3, #4
3402115a:	6032      	str	r2, [r6, #0]
3402115c:	681e      	ldr	r6, [r3, #0]
3402115e:	6862      	ldr	r2, [r4, #4]
34021160:	4630      	mov	r0, r6
34021162:	f000 fd78 	bl	34021c56 <memchr>
34021166:	b108      	cbz	r0, 3402116c <_printf_i+0x1e4>
34021168:	1b80      	subs	r0, r0, r6
3402116a:	6060      	str	r0, [r4, #4]
3402116c:	6863      	ldr	r3, [r4, #4]
3402116e:	6123      	str	r3, [r4, #16]
34021170:	2300      	movs	r3, #0
34021172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34021176:	e7aa      	b.n	340210ce <_printf_i+0x146>
34021178:	6923      	ldr	r3, [r4, #16]
3402117a:	4632      	mov	r2, r6
3402117c:	4649      	mov	r1, r9
3402117e:	4640      	mov	r0, r8
34021180:	47d0      	blx	sl
34021182:	3001      	adds	r0, #1
34021184:	d0ad      	beq.n	340210e2 <_printf_i+0x15a>
34021186:	6823      	ldr	r3, [r4, #0]
34021188:	079b      	lsls	r3, r3, #30
3402118a:	d413      	bmi.n	340211b4 <_printf_i+0x22c>
3402118c:	68e0      	ldr	r0, [r4, #12]
3402118e:	9b03      	ldr	r3, [sp, #12]
34021190:	4298      	cmp	r0, r3
34021192:	bfb8      	it	lt
34021194:	4618      	movlt	r0, r3
34021196:	e7a6      	b.n	340210e6 <_printf_i+0x15e>
34021198:	2301      	movs	r3, #1
3402119a:	4632      	mov	r2, r6
3402119c:	4649      	mov	r1, r9
3402119e:	4640      	mov	r0, r8
340211a0:	47d0      	blx	sl
340211a2:	3001      	adds	r0, #1
340211a4:	d09d      	beq.n	340210e2 <_printf_i+0x15a>
340211a6:	3501      	adds	r5, #1
340211a8:	68e3      	ldr	r3, [r4, #12]
340211aa:	9903      	ldr	r1, [sp, #12]
340211ac:	1a5b      	subs	r3, r3, r1
340211ae:	42ab      	cmp	r3, r5
340211b0:	dcf2      	bgt.n	34021198 <_printf_i+0x210>
340211b2:	e7eb      	b.n	3402118c <_printf_i+0x204>
340211b4:	2500      	movs	r5, #0
340211b6:	f104 0619 	add.w	r6, r4, #25
340211ba:	e7f5      	b.n	340211a8 <_printf_i+0x220>
340211bc:	3402fef4 	.word	0x3402fef4
340211c0:	3402ff05 	.word	0x3402ff05

340211c4 <std>:
340211c4:	2300      	movs	r3, #0
340211c6:	b510      	push	{r4, lr}
340211c8:	4604      	mov	r4, r0
340211ca:	6083      	str	r3, [r0, #8]
340211cc:	8181      	strh	r1, [r0, #12]
340211ce:	4619      	mov	r1, r3
340211d0:	6643      	str	r3, [r0, #100]	@ 0x64
340211d2:	81c2      	strh	r2, [r0, #14]
340211d4:	2208      	movs	r2, #8
340211d6:	6183      	str	r3, [r0, #24]
340211d8:	e9c0 3300 	strd	r3, r3, [r0]
340211dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
340211e0:	305c      	adds	r0, #92	@ 0x5c
340211e2:	f000 fa97 	bl	34021714 <memset>
340211e6:	4b0d      	ldr	r3, [pc, #52]	@ (3402121c <std+0x58>)
340211e8:	6224      	str	r4, [r4, #32]
340211ea:	6263      	str	r3, [r4, #36]	@ 0x24
340211ec:	4b0c      	ldr	r3, [pc, #48]	@ (34021220 <std+0x5c>)
340211ee:	62a3      	str	r3, [r4, #40]	@ 0x28
340211f0:	4b0c      	ldr	r3, [pc, #48]	@ (34021224 <std+0x60>)
340211f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
340211f4:	4b0c      	ldr	r3, [pc, #48]	@ (34021228 <std+0x64>)
340211f6:	6323      	str	r3, [r4, #48]	@ 0x30
340211f8:	4b0c      	ldr	r3, [pc, #48]	@ (3402122c <std+0x68>)
340211fa:	429c      	cmp	r4, r3
340211fc:	d006      	beq.n	3402120c <std+0x48>
340211fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
34021202:	4294      	cmp	r4, r2
34021204:	d002      	beq.n	3402120c <std+0x48>
34021206:	33d0      	adds	r3, #208	@ 0xd0
34021208:	429c      	cmp	r4, r3
3402120a:	d105      	bne.n	34021218 <std+0x54>
3402120c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
34021210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34021214:	f000 bd14 	b.w	34021c40 <__retarget_lock_init_recursive>
34021218:	bd10      	pop	{r4, pc}
3402121a:	bf00      	nop
3402121c:	340214b9 	.word	0x340214b9
34021220:	340214db 	.word	0x340214db
34021224:	34021513 	.word	0x34021513
34021228:	34021537 	.word	0x34021537
3402122c:	340e5bec 	.word	0x340e5bec

34021230 <stdio_exit_handler>:
34021230:	4a02      	ldr	r2, [pc, #8]	@ (3402123c <stdio_exit_handler+0xc>)
34021232:	4903      	ldr	r1, [pc, #12]	@ (34021240 <stdio_exit_handler+0x10>)
34021234:	4803      	ldr	r0, [pc, #12]	@ (34021244 <stdio_exit_handler+0x14>)
34021236:	f000 b87b 	b.w	34021330 <_fwalk_sglue>
3402123a:	bf00      	nop
3402123c:	340d08c4 	.word	0x340d08c4
34021240:	340240c9 	.word	0x340240c9
34021244:	340d0a40 	.word	0x340d0a40

34021248 <cleanup_stdio>:
34021248:	6841      	ldr	r1, [r0, #4]
3402124a:	4b0c      	ldr	r3, [pc, #48]	@ (3402127c <cleanup_stdio+0x34>)
3402124c:	4299      	cmp	r1, r3
3402124e:	b510      	push	{r4, lr}
34021250:	4604      	mov	r4, r0
34021252:	d001      	beq.n	34021258 <cleanup_stdio+0x10>
34021254:	f002 ff38 	bl	340240c8 <_fflush_r>
34021258:	68a1      	ldr	r1, [r4, #8]
3402125a:	4b09      	ldr	r3, [pc, #36]	@ (34021280 <cleanup_stdio+0x38>)
3402125c:	4299      	cmp	r1, r3
3402125e:	d002      	beq.n	34021266 <cleanup_stdio+0x1e>
34021260:	4620      	mov	r0, r4
34021262:	f002 ff31 	bl	340240c8 <_fflush_r>
34021266:	68e1      	ldr	r1, [r4, #12]
34021268:	4b06      	ldr	r3, [pc, #24]	@ (34021284 <cleanup_stdio+0x3c>)
3402126a:	4299      	cmp	r1, r3
3402126c:	d004      	beq.n	34021278 <cleanup_stdio+0x30>
3402126e:	4620      	mov	r0, r4
34021270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34021274:	f002 bf28 	b.w	340240c8 <_fflush_r>
34021278:	bd10      	pop	{r4, pc}
3402127a:	bf00      	nop
3402127c:	340e5bec 	.word	0x340e5bec
34021280:	340e5c54 	.word	0x340e5c54
34021284:	340e5cbc 	.word	0x340e5cbc

34021288 <global_stdio_init.part.0>:
34021288:	b510      	push	{r4, lr}
3402128a:	4b0b      	ldr	r3, [pc, #44]	@ (340212b8 <global_stdio_init.part.0+0x30>)
3402128c:	2104      	movs	r1, #4
3402128e:	4c0b      	ldr	r4, [pc, #44]	@ (340212bc <global_stdio_init.part.0+0x34>)
34021290:	4a0b      	ldr	r2, [pc, #44]	@ (340212c0 <global_stdio_init.part.0+0x38>)
34021292:	4620      	mov	r0, r4
34021294:	601a      	str	r2, [r3, #0]
34021296:	2200      	movs	r2, #0
34021298:	f7ff ff94 	bl	340211c4 <std>
3402129c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
340212a0:	2201      	movs	r2, #1
340212a2:	2109      	movs	r1, #9
340212a4:	f7ff ff8e 	bl	340211c4 <std>
340212a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
340212ac:	2202      	movs	r2, #2
340212ae:	2112      	movs	r1, #18
340212b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340212b4:	f7ff bf86 	b.w	340211c4 <std>
340212b8:	340e5d24 	.word	0x340e5d24
340212bc:	340e5bec 	.word	0x340e5bec
340212c0:	34021231 	.word	0x34021231

340212c4 <__sfp_lock_acquire>:
340212c4:	4801      	ldr	r0, [pc, #4]	@ (340212cc <__sfp_lock_acquire+0x8>)
340212c6:	f000 bcbc 	b.w	34021c42 <__retarget_lock_acquire_recursive>
340212ca:	bf00      	nop
340212cc:	340e5d2c 	.word	0x340e5d2c

340212d0 <__sfp_lock_release>:
340212d0:	4801      	ldr	r0, [pc, #4]	@ (340212d8 <__sfp_lock_release+0x8>)
340212d2:	f000 bcb7 	b.w	34021c44 <__retarget_lock_release_recursive>
340212d6:	bf00      	nop
340212d8:	340e5d2c 	.word	0x340e5d2c

340212dc <__sinit>:
340212dc:	b510      	push	{r4, lr}
340212de:	4604      	mov	r4, r0
340212e0:	f7ff fff0 	bl	340212c4 <__sfp_lock_acquire>
340212e4:	6a23      	ldr	r3, [r4, #32]
340212e6:	b11b      	cbz	r3, 340212f0 <__sinit+0x14>
340212e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340212ec:	f7ff bff0 	b.w	340212d0 <__sfp_lock_release>
340212f0:	4b04      	ldr	r3, [pc, #16]	@ (34021304 <__sinit+0x28>)
340212f2:	6223      	str	r3, [r4, #32]
340212f4:	4b04      	ldr	r3, [pc, #16]	@ (34021308 <__sinit+0x2c>)
340212f6:	681b      	ldr	r3, [r3, #0]
340212f8:	2b00      	cmp	r3, #0
340212fa:	d1f5      	bne.n	340212e8 <__sinit+0xc>
340212fc:	f7ff ffc4 	bl	34021288 <global_stdio_init.part.0>
34021300:	e7f2      	b.n	340212e8 <__sinit+0xc>
34021302:	bf00      	nop
34021304:	34021249 	.word	0x34021249
34021308:	340e5d24 	.word	0x340e5d24

3402130c <fiprintf>:
3402130c:	b40e      	push	{r1, r2, r3}
3402130e:	b503      	push	{r0, r1, lr}
34021310:	ab03      	add	r3, sp, #12
34021312:	4601      	mov	r1, r0
34021314:	4805      	ldr	r0, [pc, #20]	@ (3402132c <fiprintf+0x20>)
34021316:	f853 2b04 	ldr.w	r2, [r3], #4
3402131a:	6800      	ldr	r0, [r0, #0]
3402131c:	9301      	str	r3, [sp, #4]
3402131e:	f002 fd37 	bl	34023d90 <_vfiprintf_r>
34021322:	b002      	add	sp, #8
34021324:	f85d eb04 	ldr.w	lr, [sp], #4
34021328:	b003      	add	sp, #12
3402132a:	4770      	bx	lr
3402132c:	340d0a3c 	.word	0x340d0a3c

34021330 <_fwalk_sglue>:
34021330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34021334:	4607      	mov	r7, r0
34021336:	4688      	mov	r8, r1
34021338:	4614      	mov	r4, r2
3402133a:	2600      	movs	r6, #0
3402133c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
34021340:	f1b9 0901 	subs.w	r9, r9, #1
34021344:	d505      	bpl.n	34021352 <_fwalk_sglue+0x22>
34021346:	6824      	ldr	r4, [r4, #0]
34021348:	2c00      	cmp	r4, #0
3402134a:	d1f7      	bne.n	3402133c <_fwalk_sglue+0xc>
3402134c:	4630      	mov	r0, r6
3402134e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34021352:	89ab      	ldrh	r3, [r5, #12]
34021354:	2b01      	cmp	r3, #1
34021356:	d907      	bls.n	34021368 <_fwalk_sglue+0x38>
34021358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3402135c:	3301      	adds	r3, #1
3402135e:	d003      	beq.n	34021368 <_fwalk_sglue+0x38>
34021360:	4629      	mov	r1, r5
34021362:	4638      	mov	r0, r7
34021364:	47c0      	blx	r8
34021366:	4306      	orrs	r6, r0
34021368:	3568      	adds	r5, #104	@ 0x68
3402136a:	e7e9      	b.n	34021340 <_fwalk_sglue+0x10>

3402136c <iprintf>:
3402136c:	b40f      	push	{r0, r1, r2, r3}
3402136e:	b507      	push	{r0, r1, r2, lr}
34021370:	4906      	ldr	r1, [pc, #24]	@ (3402138c <iprintf+0x20>)
34021372:	ab04      	add	r3, sp, #16
34021374:	6808      	ldr	r0, [r1, #0]
34021376:	f853 2b04 	ldr.w	r2, [r3], #4
3402137a:	6881      	ldr	r1, [r0, #8]
3402137c:	9301      	str	r3, [sp, #4]
3402137e:	f002 fd07 	bl	34023d90 <_vfiprintf_r>
34021382:	b003      	add	sp, #12
34021384:	f85d eb04 	ldr.w	lr, [sp], #4
34021388:	b004      	add	sp, #16
3402138a:	4770      	bx	lr
3402138c:	340d0a3c 	.word	0x340d0a3c

34021390 <_puts_r>:
34021390:	6a03      	ldr	r3, [r0, #32]
34021392:	b570      	push	{r4, r5, r6, lr}
34021394:	4605      	mov	r5, r0
34021396:	460e      	mov	r6, r1
34021398:	6884      	ldr	r4, [r0, #8]
3402139a:	b90b      	cbnz	r3, 340213a0 <_puts_r+0x10>
3402139c:	f7ff ff9e 	bl	340212dc <__sinit>
340213a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340213a2:	07db      	lsls	r3, r3, #31
340213a4:	d405      	bmi.n	340213b2 <_puts_r+0x22>
340213a6:	89a3      	ldrh	r3, [r4, #12]
340213a8:	0598      	lsls	r0, r3, #22
340213aa:	d402      	bmi.n	340213b2 <_puts_r+0x22>
340213ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340213ae:	f000 fc48 	bl	34021c42 <__retarget_lock_acquire_recursive>
340213b2:	89a3      	ldrh	r3, [r4, #12]
340213b4:	0719      	lsls	r1, r3, #28
340213b6:	d502      	bpl.n	340213be <_puts_r+0x2e>
340213b8:	6923      	ldr	r3, [r4, #16]
340213ba:	2b00      	cmp	r3, #0
340213bc:	d135      	bne.n	3402142a <_puts_r+0x9a>
340213be:	4621      	mov	r1, r4
340213c0:	4628      	mov	r0, r5
340213c2:	f000 f937 	bl	34021634 <__swsetup_r>
340213c6:	b380      	cbz	r0, 3402142a <_puts_r+0x9a>
340213c8:	f04f 35ff 	mov.w	r5, #4294967295
340213cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340213ce:	07da      	lsls	r2, r3, #31
340213d0:	d405      	bmi.n	340213de <_puts_r+0x4e>
340213d2:	89a3      	ldrh	r3, [r4, #12]
340213d4:	059b      	lsls	r3, r3, #22
340213d6:	d402      	bmi.n	340213de <_puts_r+0x4e>
340213d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340213da:	f000 fc33 	bl	34021c44 <__retarget_lock_release_recursive>
340213de:	4628      	mov	r0, r5
340213e0:	bd70      	pop	{r4, r5, r6, pc}
340213e2:	2b00      	cmp	r3, #0
340213e4:	da04      	bge.n	340213f0 <_puts_r+0x60>
340213e6:	69a2      	ldr	r2, [r4, #24]
340213e8:	429a      	cmp	r2, r3
340213ea:	dc17      	bgt.n	3402141c <_puts_r+0x8c>
340213ec:	290a      	cmp	r1, #10
340213ee:	d015      	beq.n	3402141c <_puts_r+0x8c>
340213f0:	6823      	ldr	r3, [r4, #0]
340213f2:	1c5a      	adds	r2, r3, #1
340213f4:	6022      	str	r2, [r4, #0]
340213f6:	7019      	strb	r1, [r3, #0]
340213f8:	68a3      	ldr	r3, [r4, #8]
340213fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
340213fe:	3b01      	subs	r3, #1
34021400:	60a3      	str	r3, [r4, #8]
34021402:	2900      	cmp	r1, #0
34021404:	d1ed      	bne.n	340213e2 <_puts_r+0x52>
34021406:	2b00      	cmp	r3, #0
34021408:	da11      	bge.n	3402142e <_puts_r+0x9e>
3402140a:	4622      	mov	r2, r4
3402140c:	210a      	movs	r1, #10
3402140e:	4628      	mov	r0, r5
34021410:	f000 f8d2 	bl	340215b8 <__swbuf_r>
34021414:	3001      	adds	r0, #1
34021416:	d0d7      	beq.n	340213c8 <_puts_r+0x38>
34021418:	250a      	movs	r5, #10
3402141a:	e7d7      	b.n	340213cc <_puts_r+0x3c>
3402141c:	4622      	mov	r2, r4
3402141e:	4628      	mov	r0, r5
34021420:	f000 f8ca 	bl	340215b8 <__swbuf_r>
34021424:	3001      	adds	r0, #1
34021426:	d1e7      	bne.n	340213f8 <_puts_r+0x68>
34021428:	e7ce      	b.n	340213c8 <_puts_r+0x38>
3402142a:	3e01      	subs	r6, #1
3402142c:	e7e4      	b.n	340213f8 <_puts_r+0x68>
3402142e:	6823      	ldr	r3, [r4, #0]
34021430:	1c5a      	adds	r2, r3, #1
34021432:	6022      	str	r2, [r4, #0]
34021434:	220a      	movs	r2, #10
34021436:	701a      	strb	r2, [r3, #0]
34021438:	e7ee      	b.n	34021418 <_puts_r+0x88>
	...

3402143c <puts>:
3402143c:	4b02      	ldr	r3, [pc, #8]	@ (34021448 <puts+0xc>)
3402143e:	4601      	mov	r1, r0
34021440:	6818      	ldr	r0, [r3, #0]
34021442:	f7ff bfa5 	b.w	34021390 <_puts_r>
34021446:	bf00      	nop
34021448:	340d0a3c 	.word	0x340d0a3c

3402144c <sniprintf>:
3402144c:	b40c      	push	{r2, r3}
3402144e:	4b19      	ldr	r3, [pc, #100]	@ (340214b4 <sniprintf+0x68>)
34021450:	b530      	push	{r4, r5, lr}
34021452:	1e0c      	subs	r4, r1, #0
34021454:	b09d      	sub	sp, #116	@ 0x74
34021456:	681d      	ldr	r5, [r3, #0]
34021458:	da08      	bge.n	3402146c <sniprintf+0x20>
3402145a:	238b      	movs	r3, #139	@ 0x8b
3402145c:	f04f 30ff 	mov.w	r0, #4294967295
34021460:	602b      	str	r3, [r5, #0]
34021462:	b01d      	add	sp, #116	@ 0x74
34021464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34021468:	b002      	add	sp, #8
3402146a:	4770      	bx	lr
3402146c:	f44f 7302 	mov.w	r3, #520	@ 0x208
34021470:	9002      	str	r0, [sp, #8]
34021472:	9006      	str	r0, [sp, #24]
34021474:	a902      	add	r1, sp, #8
34021476:	f8ad 3014 	strh.w	r3, [sp, #20]
3402147a:	f04f 0300 	mov.w	r3, #0
3402147e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
34021480:	4628      	mov	r0, r5
34021482:	931b      	str	r3, [sp, #108]	@ 0x6c
34021484:	bf14      	ite	ne
34021486:	f104 33ff 	addne.w	r3, r4, #4294967295
3402148a:	4623      	moveq	r3, r4
3402148c:	9304      	str	r3, [sp, #16]
3402148e:	9307      	str	r3, [sp, #28]
34021490:	f64f 73ff 	movw	r3, #65535	@ 0xffff
34021494:	f8ad 3016 	strh.w	r3, [sp, #22]
34021498:	ab21      	add	r3, sp, #132	@ 0x84
3402149a:	9301      	str	r3, [sp, #4]
3402149c:	f002 fb52 	bl	34023b44 <_svfiprintf_r>
340214a0:	1c43      	adds	r3, r0, #1
340214a2:	bfbc      	itt	lt
340214a4:	238b      	movlt	r3, #139	@ 0x8b
340214a6:	602b      	strlt	r3, [r5, #0]
340214a8:	2c00      	cmp	r4, #0
340214aa:	d0da      	beq.n	34021462 <sniprintf+0x16>
340214ac:	9b02      	ldr	r3, [sp, #8]
340214ae:	2200      	movs	r2, #0
340214b0:	701a      	strb	r2, [r3, #0]
340214b2:	e7d6      	b.n	34021462 <sniprintf+0x16>
340214b4:	340d0a3c 	.word	0x340d0a3c

340214b8 <__sread>:
340214b8:	b510      	push	{r4, lr}
340214ba:	460c      	mov	r4, r1
340214bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
340214c0:	f000 fb70 	bl	34021ba4 <_read_r>
340214c4:	2800      	cmp	r0, #0
340214c6:	bfab      	itete	ge
340214c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
340214ca:	89a3      	ldrhlt	r3, [r4, #12]
340214cc:	181b      	addge	r3, r3, r0
340214ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
340214d2:	bfac      	ite	ge
340214d4:	6563      	strge	r3, [r4, #84]	@ 0x54
340214d6:	81a3      	strhlt	r3, [r4, #12]
340214d8:	bd10      	pop	{r4, pc}

340214da <__swrite>:
340214da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340214de:	461f      	mov	r7, r3
340214e0:	898b      	ldrh	r3, [r1, #12]
340214e2:	4605      	mov	r5, r0
340214e4:	460c      	mov	r4, r1
340214e6:	05db      	lsls	r3, r3, #23
340214e8:	4616      	mov	r6, r2
340214ea:	d505      	bpl.n	340214f8 <__swrite+0x1e>
340214ec:	2302      	movs	r3, #2
340214ee:	2200      	movs	r2, #0
340214f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
340214f4:	f000 fb44 	bl	34021b80 <_lseek_r>
340214f8:	89a3      	ldrh	r3, [r4, #12]
340214fa:	4632      	mov	r2, r6
340214fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34021500:	4628      	mov	r0, r5
34021502:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
34021506:	81a3      	strh	r3, [r4, #12]
34021508:	463b      	mov	r3, r7
3402150a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3402150e:	f000 bb5b 	b.w	34021bc8 <_write_r>

34021512 <__sseek>:
34021512:	b510      	push	{r4, lr}
34021514:	460c      	mov	r4, r1
34021516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3402151a:	f000 fb31 	bl	34021b80 <_lseek_r>
3402151e:	1c43      	adds	r3, r0, #1
34021520:	89a3      	ldrh	r3, [r4, #12]
34021522:	bf15      	itete	ne
34021524:	6560      	strne	r0, [r4, #84]	@ 0x54
34021526:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3402152a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3402152e:	81a3      	strheq	r3, [r4, #12]
34021530:	bf18      	it	ne
34021532:	81a3      	strhne	r3, [r4, #12]
34021534:	bd10      	pop	{r4, pc}

34021536 <__sclose>:
34021536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3402153a:	f000 bb11 	b.w	34021b60 <_close_r>

3402153e <_vsniprintf_r>:
3402153e:	b530      	push	{r4, r5, lr}
34021540:	4614      	mov	r4, r2
34021542:	b09b      	sub	sp, #108	@ 0x6c
34021544:	4605      	mov	r5, r0
34021546:	461a      	mov	r2, r3
34021548:	2c00      	cmp	r4, #0
3402154a:	da05      	bge.n	34021558 <_vsniprintf_r+0x1a>
3402154c:	238b      	movs	r3, #139	@ 0x8b
3402154e:	6003      	str	r3, [r0, #0]
34021550:	f04f 30ff 	mov.w	r0, #4294967295
34021554:	b01b      	add	sp, #108	@ 0x6c
34021556:	bd30      	pop	{r4, r5, pc}
34021558:	f44f 7302 	mov.w	r3, #520	@ 0x208
3402155c:	9100      	str	r1, [sp, #0]
3402155e:	9104      	str	r1, [sp, #16]
34021560:	4669      	mov	r1, sp
34021562:	f8ad 300c 	strh.w	r3, [sp, #12]
34021566:	f04f 0300 	mov.w	r3, #0
3402156a:	9319      	str	r3, [sp, #100]	@ 0x64
3402156c:	bf14      	ite	ne
3402156e:	f104 33ff 	addne.w	r3, r4, #4294967295
34021572:	4623      	moveq	r3, r4
34021574:	9302      	str	r3, [sp, #8]
34021576:	9305      	str	r3, [sp, #20]
34021578:	f64f 73ff 	movw	r3, #65535	@ 0xffff
3402157c:	f8ad 300e 	strh.w	r3, [sp, #14]
34021580:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
34021582:	f002 fadf 	bl	34023b44 <_svfiprintf_r>
34021586:	1c43      	adds	r3, r0, #1
34021588:	bfbc      	itt	lt
3402158a:	238b      	movlt	r3, #139	@ 0x8b
3402158c:	602b      	strlt	r3, [r5, #0]
3402158e:	2c00      	cmp	r4, #0
34021590:	d0e0      	beq.n	34021554 <_vsniprintf_r+0x16>
34021592:	9b00      	ldr	r3, [sp, #0]
34021594:	2200      	movs	r2, #0
34021596:	701a      	strb	r2, [r3, #0]
34021598:	e7dc      	b.n	34021554 <_vsniprintf_r+0x16>
	...

3402159c <vsniprintf>:
3402159c:	b507      	push	{r0, r1, r2, lr}
3402159e:	9300      	str	r3, [sp, #0]
340215a0:	4613      	mov	r3, r2
340215a2:	460a      	mov	r2, r1
340215a4:	4601      	mov	r1, r0
340215a6:	4803      	ldr	r0, [pc, #12]	@ (340215b4 <vsniprintf+0x18>)
340215a8:	6800      	ldr	r0, [r0, #0]
340215aa:	f7ff ffc8 	bl	3402153e <_vsniprintf_r>
340215ae:	b003      	add	sp, #12
340215b0:	f85d fb04 	ldr.w	pc, [sp], #4
340215b4:	340d0a3c 	.word	0x340d0a3c

340215b8 <__swbuf_r>:
340215b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340215ba:	460e      	mov	r6, r1
340215bc:	4614      	mov	r4, r2
340215be:	4605      	mov	r5, r0
340215c0:	b118      	cbz	r0, 340215ca <__swbuf_r+0x12>
340215c2:	6a03      	ldr	r3, [r0, #32]
340215c4:	b90b      	cbnz	r3, 340215ca <__swbuf_r+0x12>
340215c6:	f7ff fe89 	bl	340212dc <__sinit>
340215ca:	69a3      	ldr	r3, [r4, #24]
340215cc:	60a3      	str	r3, [r4, #8]
340215ce:	89a3      	ldrh	r3, [r4, #12]
340215d0:	071a      	lsls	r2, r3, #28
340215d2:	d501      	bpl.n	340215d8 <__swbuf_r+0x20>
340215d4:	6923      	ldr	r3, [r4, #16]
340215d6:	b943      	cbnz	r3, 340215ea <__swbuf_r+0x32>
340215d8:	4621      	mov	r1, r4
340215da:	4628      	mov	r0, r5
340215dc:	f000 f82a 	bl	34021634 <__swsetup_r>
340215e0:	b118      	cbz	r0, 340215ea <__swbuf_r+0x32>
340215e2:	f04f 37ff 	mov.w	r7, #4294967295
340215e6:	4638      	mov	r0, r7
340215e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
340215ea:	6823      	ldr	r3, [r4, #0]
340215ec:	b2f6      	uxtb	r6, r6
340215ee:	6922      	ldr	r2, [r4, #16]
340215f0:	4637      	mov	r7, r6
340215f2:	1a98      	subs	r0, r3, r2
340215f4:	6963      	ldr	r3, [r4, #20]
340215f6:	4283      	cmp	r3, r0
340215f8:	dc05      	bgt.n	34021606 <__swbuf_r+0x4e>
340215fa:	4621      	mov	r1, r4
340215fc:	4628      	mov	r0, r5
340215fe:	f002 fd63 	bl	340240c8 <_fflush_r>
34021602:	2800      	cmp	r0, #0
34021604:	d1ed      	bne.n	340215e2 <__swbuf_r+0x2a>
34021606:	68a3      	ldr	r3, [r4, #8]
34021608:	3b01      	subs	r3, #1
3402160a:	60a3      	str	r3, [r4, #8]
3402160c:	6823      	ldr	r3, [r4, #0]
3402160e:	1c5a      	adds	r2, r3, #1
34021610:	6022      	str	r2, [r4, #0]
34021612:	701e      	strb	r6, [r3, #0]
34021614:	1c43      	adds	r3, r0, #1
34021616:	6962      	ldr	r2, [r4, #20]
34021618:	429a      	cmp	r2, r3
3402161a:	d004      	beq.n	34021626 <__swbuf_r+0x6e>
3402161c:	89a3      	ldrh	r3, [r4, #12]
3402161e:	07db      	lsls	r3, r3, #31
34021620:	d5e1      	bpl.n	340215e6 <__swbuf_r+0x2e>
34021622:	2e0a      	cmp	r6, #10
34021624:	d1df      	bne.n	340215e6 <__swbuf_r+0x2e>
34021626:	4621      	mov	r1, r4
34021628:	4628      	mov	r0, r5
3402162a:	f002 fd4d 	bl	340240c8 <_fflush_r>
3402162e:	2800      	cmp	r0, #0
34021630:	d0d9      	beq.n	340215e6 <__swbuf_r+0x2e>
34021632:	e7d6      	b.n	340215e2 <__swbuf_r+0x2a>

34021634 <__swsetup_r>:
34021634:	b538      	push	{r3, r4, r5, lr}
34021636:	4b29      	ldr	r3, [pc, #164]	@ (340216dc <__swsetup_r+0xa8>)
34021638:	4605      	mov	r5, r0
3402163a:	460c      	mov	r4, r1
3402163c:	6818      	ldr	r0, [r3, #0]
3402163e:	b118      	cbz	r0, 34021648 <__swsetup_r+0x14>
34021640:	6a03      	ldr	r3, [r0, #32]
34021642:	b90b      	cbnz	r3, 34021648 <__swsetup_r+0x14>
34021644:	f7ff fe4a 	bl	340212dc <__sinit>
34021648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3402164c:	0719      	lsls	r1, r3, #28
3402164e:	d422      	bmi.n	34021696 <__swsetup_r+0x62>
34021650:	06da      	lsls	r2, r3, #27
34021652:	d407      	bmi.n	34021664 <__swsetup_r+0x30>
34021654:	2209      	movs	r2, #9
34021656:	602a      	str	r2, [r5, #0]
34021658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3402165c:	f04f 30ff 	mov.w	r0, #4294967295
34021660:	81a3      	strh	r3, [r4, #12]
34021662:	e033      	b.n	340216cc <__swsetup_r+0x98>
34021664:	0758      	lsls	r0, r3, #29
34021666:	d512      	bpl.n	3402168e <__swsetup_r+0x5a>
34021668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3402166a:	b141      	cbz	r1, 3402167e <__swsetup_r+0x4a>
3402166c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34021670:	4299      	cmp	r1, r3
34021672:	d002      	beq.n	3402167a <__swsetup_r+0x46>
34021674:	4628      	mov	r0, r5
34021676:	f001 f90d 	bl	34022894 <_free_r>
3402167a:	2300      	movs	r3, #0
3402167c:	6363      	str	r3, [r4, #52]	@ 0x34
3402167e:	89a3      	ldrh	r3, [r4, #12]
34021680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
34021684:	81a3      	strh	r3, [r4, #12]
34021686:	2300      	movs	r3, #0
34021688:	6063      	str	r3, [r4, #4]
3402168a:	6923      	ldr	r3, [r4, #16]
3402168c:	6023      	str	r3, [r4, #0]
3402168e:	89a3      	ldrh	r3, [r4, #12]
34021690:	f043 0308 	orr.w	r3, r3, #8
34021694:	81a3      	strh	r3, [r4, #12]
34021696:	6923      	ldr	r3, [r4, #16]
34021698:	b94b      	cbnz	r3, 340216ae <__swsetup_r+0x7a>
3402169a:	89a3      	ldrh	r3, [r4, #12]
3402169c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
340216a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340216a4:	d003      	beq.n	340216ae <__swsetup_r+0x7a>
340216a6:	4621      	mov	r1, r4
340216a8:	4628      	mov	r0, r5
340216aa:	f002 fd5a 	bl	34024162 <__smakebuf_r>
340216ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340216b2:	f013 0201 	ands.w	r2, r3, #1
340216b6:	d00a      	beq.n	340216ce <__swsetup_r+0x9a>
340216b8:	2200      	movs	r2, #0
340216ba:	60a2      	str	r2, [r4, #8]
340216bc:	6962      	ldr	r2, [r4, #20]
340216be:	4252      	negs	r2, r2
340216c0:	61a2      	str	r2, [r4, #24]
340216c2:	6922      	ldr	r2, [r4, #16]
340216c4:	b942      	cbnz	r2, 340216d8 <__swsetup_r+0xa4>
340216c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
340216ca:	d1c5      	bne.n	34021658 <__swsetup_r+0x24>
340216cc:	bd38      	pop	{r3, r4, r5, pc}
340216ce:	0799      	lsls	r1, r3, #30
340216d0:	bf58      	it	pl
340216d2:	6962      	ldrpl	r2, [r4, #20]
340216d4:	60a2      	str	r2, [r4, #8]
340216d6:	e7f4      	b.n	340216c2 <__swsetup_r+0x8e>
340216d8:	2000      	movs	r0, #0
340216da:	e7f7      	b.n	340216cc <__swsetup_r+0x98>
340216dc:	340d0a3c 	.word	0x340d0a3c

340216e0 <memmove>:
340216e0:	4288      	cmp	r0, r1
340216e2:	b510      	push	{r4, lr}
340216e4:	eb01 0402 	add.w	r4, r1, r2
340216e8:	d902      	bls.n	340216f0 <memmove+0x10>
340216ea:	4284      	cmp	r4, r0
340216ec:	4623      	mov	r3, r4
340216ee:	d807      	bhi.n	34021700 <memmove+0x20>
340216f0:	1e43      	subs	r3, r0, #1
340216f2:	42a1      	cmp	r1, r4
340216f4:	d008      	beq.n	34021708 <memmove+0x28>
340216f6:	f811 2b01 	ldrb.w	r2, [r1], #1
340216fa:	f803 2f01 	strb.w	r2, [r3, #1]!
340216fe:	e7f8      	b.n	340216f2 <memmove+0x12>
34021700:	4402      	add	r2, r0
34021702:	4601      	mov	r1, r0
34021704:	428a      	cmp	r2, r1
34021706:	d100      	bne.n	3402170a <memmove+0x2a>
34021708:	bd10      	pop	{r4, pc}
3402170a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
3402170e:	f802 4d01 	strb.w	r4, [r2, #-1]!
34021712:	e7f7      	b.n	34021704 <memmove+0x24>

34021714 <memset>:
34021714:	4402      	add	r2, r0
34021716:	4603      	mov	r3, r0
34021718:	4293      	cmp	r3, r2
3402171a:	d100      	bne.n	3402171e <memset+0xa>
3402171c:	4770      	bx	lr
3402171e:	f803 1b01 	strb.w	r1, [r3], #1
34021722:	e7f9      	b.n	34021718 <memset+0x4>

34021724 <_strerror_r>:
34021724:	b510      	push	{r4, lr}
34021726:	4604      	mov	r4, r0
34021728:	4608      	mov	r0, r1
3402172a:	4611      	mov	r1, r2
3402172c:	461a      	mov	r2, r3
3402172e:	288e      	cmp	r0, #142	@ 0x8e
34021730:	f200 8130 	bhi.w	34021994 <_strerror_r+0x270>
34021734:	e8df f010 	tbh	[pc, r0, lsl #1]
34021738:	0138008f 	.word	0x0138008f
3402173c:	00940092 	.word	0x00940092
34021740:	00980096 	.word	0x00980096
34021744:	009c009a 	.word	0x009c009a
34021748:	00a2009e 	.word	0x00a2009e
3402174c:	00a800a4 	.word	0x00a800a4
34021750:	00ac00aa 	.word	0x00ac00aa
34021754:	012e00ae 	.word	0x012e00ae
34021758:	00b200b0 	.word	0x00b200b0
3402175c:	00b600b4 	.word	0x00b600b4
34021760:	00be00b8 	.word	0x00be00b8
34021764:	00c600c0 	.word	0x00c600c0
34021768:	00ca00c8 	.word	0x00ca00c8
3402176c:	00ce00cc 	.word	0x00ce00cc
34021770:	00d600d2 	.word	0x00d600d2
34021774:	00da00d8 	.word	0x00da00d8
34021778:	00de00dc 	.word	0x00de00dc
3402177c:	00e200e0 	.word	0x00e200e0
34021780:	012e00e4 	.word	0x012e00e4
34021784:	012e012e 	.word	0x012e012e
34021788:	012e012e 	.word	0x012e012e
3402178c:	012e012e 	.word	0x012e012e
34021790:	00e8012e 	.word	0x00e8012e
34021794:	012e00ec 	.word	0x012e00ec
34021798:	012e012e 	.word	0x012e012e
3402179c:	012e012e 	.word	0x012e012e
340217a0:	012e012e 	.word	0x012e012e
340217a4:	012e012e 	.word	0x012e012e
340217a8:	012e012e 	.word	0x012e012e
340217ac:	012e012e 	.word	0x012e012e
340217b0:	010800ee 	.word	0x010800ee
340217b4:	00f200f0 	.word	0x00f200f0
340217b8:	012e012e 	.word	0x012e012e
340217bc:	00f4012e 	.word	0x00f4012e
340217c0:	012e012e 	.word	0x012e012e
340217c4:	00f6012e 	.word	0x00f6012e
340217c8:	012e012e 	.word	0x012e012e
340217cc:	012e00fa 	.word	0x012e00fa
340217d0:	00fc012e 	.word	0x00fc012e
340217d4:	012e012e 	.word	0x012e012e
340217d8:	012e012e 	.word	0x012e012e
340217dc:	012e012e 	.word	0x012e012e
340217e0:	012e012e 	.word	0x012e012e
340217e4:	012e012e 	.word	0x012e012e
340217e8:	012e00fe 	.word	0x012e00fe
340217ec:	01020100 	.word	0x01020100
340217f0:	012e0104 	.word	0x012e0104
340217f4:	0126012e 	.word	0x0126012e
340217f8:	012e012e 	.word	0x012e012e
340217fc:	012e012e 	.word	0x012e012e
34021800:	012e012e 	.word	0x012e012e
34021804:	012e012e 	.word	0x012e012e
34021808:	01060114 	.word	0x01060114
3402180c:	010c010a 	.word	0x010c010a
34021810:	0110010e 	.word	0x0110010e
34021814:	0112012e 	.word	0x0112012e
34021818:	011a0116 	.word	0x011a0116
3402181c:	00c200ea 	.word	0x00c200ea
34021820:	00ba012c 	.word	0x00ba012c
34021824:	00bc00d0 	.word	0x00bc00d0
34021828:	00a600a0 	.word	0x00a600a0
3402182c:	00f8012a 	.word	0x00f8012a
34021830:	0118012e 	.word	0x0118012e
34021834:	011e00c4 	.word	0x011e00c4
34021838:	012e011c 	.word	0x012e011c
3402183c:	012e012e 	.word	0x012e012e
34021840:	012e012e 	.word	0x012e012e
34021844:	012e00d4 	.word	0x012e00d4
34021848:	012e012e 	.word	0x012e012e
3402184c:	012800e6 	.word	0x012800e6
34021850:	01220120 	.word	0x01220120
34021854:	0124      	.short	0x0124
34021856:	4b55      	ldr	r3, [pc, #340]	@ (340219ac <_strerror_r+0x288>)
34021858:	4618      	mov	r0, r3
3402185a:	bd10      	pop	{r4, pc}
3402185c:	4b54      	ldr	r3, [pc, #336]	@ (340219b0 <_strerror_r+0x28c>)
3402185e:	e7fb      	b.n	34021858 <_strerror_r+0x134>
34021860:	4b54      	ldr	r3, [pc, #336]	@ (340219b4 <_strerror_r+0x290>)
34021862:	e7f9      	b.n	34021858 <_strerror_r+0x134>
34021864:	4b54      	ldr	r3, [pc, #336]	@ (340219b8 <_strerror_r+0x294>)
34021866:	e7f7      	b.n	34021858 <_strerror_r+0x134>
34021868:	4b54      	ldr	r3, [pc, #336]	@ (340219bc <_strerror_r+0x298>)
3402186a:	e7f5      	b.n	34021858 <_strerror_r+0x134>
3402186c:	4b54      	ldr	r3, [pc, #336]	@ (340219c0 <_strerror_r+0x29c>)
3402186e:	e7f3      	b.n	34021858 <_strerror_r+0x134>
34021870:	4b54      	ldr	r3, [pc, #336]	@ (340219c4 <_strerror_r+0x2a0>)
34021872:	e7f1      	b.n	34021858 <_strerror_r+0x134>
34021874:	4b54      	ldr	r3, [pc, #336]	@ (340219c8 <_strerror_r+0x2a4>)
34021876:	e7ef      	b.n	34021858 <_strerror_r+0x134>
34021878:	4b54      	ldr	r3, [pc, #336]	@ (340219cc <_strerror_r+0x2a8>)
3402187a:	e7ed      	b.n	34021858 <_strerror_r+0x134>
3402187c:	4b54      	ldr	r3, [pc, #336]	@ (340219d0 <_strerror_r+0x2ac>)
3402187e:	e7eb      	b.n	34021858 <_strerror_r+0x134>
34021880:	4b54      	ldr	r3, [pc, #336]	@ (340219d4 <_strerror_r+0x2b0>)
34021882:	e7e9      	b.n	34021858 <_strerror_r+0x134>
34021884:	4b54      	ldr	r3, [pc, #336]	@ (340219d8 <_strerror_r+0x2b4>)
34021886:	e7e7      	b.n	34021858 <_strerror_r+0x134>
34021888:	4b54      	ldr	r3, [pc, #336]	@ (340219dc <_strerror_r+0x2b8>)
3402188a:	e7e5      	b.n	34021858 <_strerror_r+0x134>
3402188c:	4b54      	ldr	r3, [pc, #336]	@ (340219e0 <_strerror_r+0x2bc>)
3402188e:	e7e3      	b.n	34021858 <_strerror_r+0x134>
34021890:	4b54      	ldr	r3, [pc, #336]	@ (340219e4 <_strerror_r+0x2c0>)
34021892:	e7e1      	b.n	34021858 <_strerror_r+0x134>
34021894:	4b54      	ldr	r3, [pc, #336]	@ (340219e8 <_strerror_r+0x2c4>)
34021896:	e7df      	b.n	34021858 <_strerror_r+0x134>
34021898:	4b54      	ldr	r3, [pc, #336]	@ (340219ec <_strerror_r+0x2c8>)
3402189a:	e7dd      	b.n	34021858 <_strerror_r+0x134>
3402189c:	4b54      	ldr	r3, [pc, #336]	@ (340219f0 <_strerror_r+0x2cc>)
3402189e:	e7db      	b.n	34021858 <_strerror_r+0x134>
340218a0:	4b54      	ldr	r3, [pc, #336]	@ (340219f4 <_strerror_r+0x2d0>)
340218a2:	e7d9      	b.n	34021858 <_strerror_r+0x134>
340218a4:	4b54      	ldr	r3, [pc, #336]	@ (340219f8 <_strerror_r+0x2d4>)
340218a6:	e7d7      	b.n	34021858 <_strerror_r+0x134>
340218a8:	4b54      	ldr	r3, [pc, #336]	@ (340219fc <_strerror_r+0x2d8>)
340218aa:	e7d5      	b.n	34021858 <_strerror_r+0x134>
340218ac:	4b54      	ldr	r3, [pc, #336]	@ (34021a00 <_strerror_r+0x2dc>)
340218ae:	e7d3      	b.n	34021858 <_strerror_r+0x134>
340218b0:	4b54      	ldr	r3, [pc, #336]	@ (34021a04 <_strerror_r+0x2e0>)
340218b2:	e7d1      	b.n	34021858 <_strerror_r+0x134>
340218b4:	4b54      	ldr	r3, [pc, #336]	@ (34021a08 <_strerror_r+0x2e4>)
340218b6:	e7cf      	b.n	34021858 <_strerror_r+0x134>
340218b8:	4b54      	ldr	r3, [pc, #336]	@ (34021a0c <_strerror_r+0x2e8>)
340218ba:	e7cd      	b.n	34021858 <_strerror_r+0x134>
340218bc:	4b54      	ldr	r3, [pc, #336]	@ (34021a10 <_strerror_r+0x2ec>)
340218be:	e7cb      	b.n	34021858 <_strerror_r+0x134>
340218c0:	4b54      	ldr	r3, [pc, #336]	@ (34021a14 <_strerror_r+0x2f0>)
340218c2:	e7c9      	b.n	34021858 <_strerror_r+0x134>
340218c4:	4b54      	ldr	r3, [pc, #336]	@ (34021a18 <_strerror_r+0x2f4>)
340218c6:	e7c7      	b.n	34021858 <_strerror_r+0x134>
340218c8:	4b54      	ldr	r3, [pc, #336]	@ (34021a1c <_strerror_r+0x2f8>)
340218ca:	e7c5      	b.n	34021858 <_strerror_r+0x134>
340218cc:	4b54      	ldr	r3, [pc, #336]	@ (34021a20 <_strerror_r+0x2fc>)
340218ce:	e7c3      	b.n	34021858 <_strerror_r+0x134>
340218d0:	4b54      	ldr	r3, [pc, #336]	@ (34021a24 <_strerror_r+0x300>)
340218d2:	e7c1      	b.n	34021858 <_strerror_r+0x134>
340218d4:	4b54      	ldr	r3, [pc, #336]	@ (34021a28 <_strerror_r+0x304>)
340218d6:	e7bf      	b.n	34021858 <_strerror_r+0x134>
340218d8:	4b54      	ldr	r3, [pc, #336]	@ (34021a2c <_strerror_r+0x308>)
340218da:	e7bd      	b.n	34021858 <_strerror_r+0x134>
340218dc:	4b54      	ldr	r3, [pc, #336]	@ (34021a30 <_strerror_r+0x30c>)
340218de:	e7bb      	b.n	34021858 <_strerror_r+0x134>
340218e0:	4b54      	ldr	r3, [pc, #336]	@ (34021a34 <_strerror_r+0x310>)
340218e2:	e7b9      	b.n	34021858 <_strerror_r+0x134>
340218e4:	4b54      	ldr	r3, [pc, #336]	@ (34021a38 <_strerror_r+0x314>)
340218e6:	e7b7      	b.n	34021858 <_strerror_r+0x134>
340218e8:	4b54      	ldr	r3, [pc, #336]	@ (34021a3c <_strerror_r+0x318>)
340218ea:	e7b5      	b.n	34021858 <_strerror_r+0x134>
340218ec:	4b54      	ldr	r3, [pc, #336]	@ (34021a40 <_strerror_r+0x31c>)
340218ee:	e7b3      	b.n	34021858 <_strerror_r+0x134>
340218f0:	4b54      	ldr	r3, [pc, #336]	@ (34021a44 <_strerror_r+0x320>)
340218f2:	e7b1      	b.n	34021858 <_strerror_r+0x134>
340218f4:	4b54      	ldr	r3, [pc, #336]	@ (34021a48 <_strerror_r+0x324>)
340218f6:	e7af      	b.n	34021858 <_strerror_r+0x134>
340218f8:	4b54      	ldr	r3, [pc, #336]	@ (34021a4c <_strerror_r+0x328>)
340218fa:	e7ad      	b.n	34021858 <_strerror_r+0x134>
340218fc:	4b54      	ldr	r3, [pc, #336]	@ (34021a50 <_strerror_r+0x32c>)
340218fe:	e7ab      	b.n	34021858 <_strerror_r+0x134>
34021900:	4b54      	ldr	r3, [pc, #336]	@ (34021a54 <_strerror_r+0x330>)
34021902:	e7a9      	b.n	34021858 <_strerror_r+0x134>
34021904:	4b54      	ldr	r3, [pc, #336]	@ (34021a58 <_strerror_r+0x334>)
34021906:	e7a7      	b.n	34021858 <_strerror_r+0x134>
34021908:	4b54      	ldr	r3, [pc, #336]	@ (34021a5c <_strerror_r+0x338>)
3402190a:	e7a5      	b.n	34021858 <_strerror_r+0x134>
3402190c:	4b54      	ldr	r3, [pc, #336]	@ (34021a60 <_strerror_r+0x33c>)
3402190e:	e7a3      	b.n	34021858 <_strerror_r+0x134>
34021910:	4b54      	ldr	r3, [pc, #336]	@ (34021a64 <_strerror_r+0x340>)
34021912:	e7a1      	b.n	34021858 <_strerror_r+0x134>
34021914:	4b54      	ldr	r3, [pc, #336]	@ (34021a68 <_strerror_r+0x344>)
34021916:	e79f      	b.n	34021858 <_strerror_r+0x134>
34021918:	4b54      	ldr	r3, [pc, #336]	@ (34021a6c <_strerror_r+0x348>)
3402191a:	e79d      	b.n	34021858 <_strerror_r+0x134>
3402191c:	4b54      	ldr	r3, [pc, #336]	@ (34021a70 <_strerror_r+0x34c>)
3402191e:	e79b      	b.n	34021858 <_strerror_r+0x134>
34021920:	4b54      	ldr	r3, [pc, #336]	@ (34021a74 <_strerror_r+0x350>)
34021922:	e799      	b.n	34021858 <_strerror_r+0x134>
34021924:	4b54      	ldr	r3, [pc, #336]	@ (34021a78 <_strerror_r+0x354>)
34021926:	e797      	b.n	34021858 <_strerror_r+0x134>
34021928:	4b54      	ldr	r3, [pc, #336]	@ (34021a7c <_strerror_r+0x358>)
3402192a:	e795      	b.n	34021858 <_strerror_r+0x134>
3402192c:	4b54      	ldr	r3, [pc, #336]	@ (34021a80 <_strerror_r+0x35c>)
3402192e:	e793      	b.n	34021858 <_strerror_r+0x134>
34021930:	4b54      	ldr	r3, [pc, #336]	@ (34021a84 <_strerror_r+0x360>)
34021932:	e791      	b.n	34021858 <_strerror_r+0x134>
34021934:	4b54      	ldr	r3, [pc, #336]	@ (34021a88 <_strerror_r+0x364>)
34021936:	e78f      	b.n	34021858 <_strerror_r+0x134>
34021938:	4b54      	ldr	r3, [pc, #336]	@ (34021a8c <_strerror_r+0x368>)
3402193a:	e78d      	b.n	34021858 <_strerror_r+0x134>
3402193c:	4b54      	ldr	r3, [pc, #336]	@ (34021a90 <_strerror_r+0x36c>)
3402193e:	e78b      	b.n	34021858 <_strerror_r+0x134>
34021940:	4b54      	ldr	r3, [pc, #336]	@ (34021a94 <_strerror_r+0x370>)
34021942:	e789      	b.n	34021858 <_strerror_r+0x134>
34021944:	4b54      	ldr	r3, [pc, #336]	@ (34021a98 <_strerror_r+0x374>)
34021946:	e787      	b.n	34021858 <_strerror_r+0x134>
34021948:	4b54      	ldr	r3, [pc, #336]	@ (34021a9c <_strerror_r+0x378>)
3402194a:	e785      	b.n	34021858 <_strerror_r+0x134>
3402194c:	4b54      	ldr	r3, [pc, #336]	@ (34021aa0 <_strerror_r+0x37c>)
3402194e:	e783      	b.n	34021858 <_strerror_r+0x134>
34021950:	4b54      	ldr	r3, [pc, #336]	@ (34021aa4 <_strerror_r+0x380>)
34021952:	e781      	b.n	34021858 <_strerror_r+0x134>
34021954:	4b54      	ldr	r3, [pc, #336]	@ (34021aa8 <_strerror_r+0x384>)
34021956:	e77f      	b.n	34021858 <_strerror_r+0x134>
34021958:	4b54      	ldr	r3, [pc, #336]	@ (34021aac <_strerror_r+0x388>)
3402195a:	e77d      	b.n	34021858 <_strerror_r+0x134>
3402195c:	4b54      	ldr	r3, [pc, #336]	@ (34021ab0 <_strerror_r+0x38c>)
3402195e:	e77b      	b.n	34021858 <_strerror_r+0x134>
34021960:	4b54      	ldr	r3, [pc, #336]	@ (34021ab4 <_strerror_r+0x390>)
34021962:	e779      	b.n	34021858 <_strerror_r+0x134>
34021964:	4b54      	ldr	r3, [pc, #336]	@ (34021ab8 <_strerror_r+0x394>)
34021966:	e777      	b.n	34021858 <_strerror_r+0x134>
34021968:	4b54      	ldr	r3, [pc, #336]	@ (34021abc <_strerror_r+0x398>)
3402196a:	e775      	b.n	34021858 <_strerror_r+0x134>
3402196c:	4b54      	ldr	r3, [pc, #336]	@ (34021ac0 <_strerror_r+0x39c>)
3402196e:	e773      	b.n	34021858 <_strerror_r+0x134>
34021970:	4b54      	ldr	r3, [pc, #336]	@ (34021ac4 <_strerror_r+0x3a0>)
34021972:	e771      	b.n	34021858 <_strerror_r+0x134>
34021974:	4b54      	ldr	r3, [pc, #336]	@ (34021ac8 <_strerror_r+0x3a4>)
34021976:	e76f      	b.n	34021858 <_strerror_r+0x134>
34021978:	4b54      	ldr	r3, [pc, #336]	@ (34021acc <_strerror_r+0x3a8>)
3402197a:	e76d      	b.n	34021858 <_strerror_r+0x134>
3402197c:	4b54      	ldr	r3, [pc, #336]	@ (34021ad0 <_strerror_r+0x3ac>)
3402197e:	e76b      	b.n	34021858 <_strerror_r+0x134>
34021980:	4b54      	ldr	r3, [pc, #336]	@ (34021ad4 <_strerror_r+0x3b0>)
34021982:	e769      	b.n	34021858 <_strerror_r+0x134>
34021984:	4b54      	ldr	r3, [pc, #336]	@ (34021ad8 <_strerror_r+0x3b4>)
34021986:	e767      	b.n	34021858 <_strerror_r+0x134>
34021988:	4b54      	ldr	r3, [pc, #336]	@ (34021adc <_strerror_r+0x3b8>)
3402198a:	e765      	b.n	34021858 <_strerror_r+0x134>
3402198c:	4b54      	ldr	r3, [pc, #336]	@ (34021ae0 <_strerror_r+0x3bc>)
3402198e:	e763      	b.n	34021858 <_strerror_r+0x134>
34021990:	4b54      	ldr	r3, [pc, #336]	@ (34021ae4 <_strerror_r+0x3c0>)
34021992:	e761      	b.n	34021858 <_strerror_r+0x134>
34021994:	2a00      	cmp	r2, #0
34021996:	bf08      	it	eq
34021998:	4622      	moveq	r2, r4
3402199a:	f000 f8db 	bl	34021b54 <_user_strerror>
3402199e:	4b52      	ldr	r3, [pc, #328]	@ (34021ae8 <_strerror_r+0x3c4>)
340219a0:	2800      	cmp	r0, #0
340219a2:	bf18      	it	ne
340219a4:	4603      	movne	r3, r0
340219a6:	e757      	b.n	34021858 <_strerror_r+0x134>
340219a8:	4b50      	ldr	r3, [pc, #320]	@ (34021aec <_strerror_r+0x3c8>)
340219aa:	e755      	b.n	34021858 <_strerror_r+0x134>
340219ac:	3402ff16 	.word	0x3402ff16
340219b0:	3402ff28 	.word	0x3402ff28
340219b4:	3402ff42 	.word	0x3402ff42
340219b8:	3402ff52 	.word	0x3402ff52
340219bc:	3402ff6a 	.word	0x3402ff6a
340219c0:	3402ff74 	.word	0x3402ff74
340219c4:	3402ff8e 	.word	0x3402ff8e
340219c8:	3402ffa0 	.word	0x3402ffa0
340219cc:	3402ffb2 	.word	0x3402ffb2
340219d0:	3402ffcb 	.word	0x3402ffcb
340219d4:	3402ffdb 	.word	0x3402ffdb
340219d8:	3402ffe7 	.word	0x3402ffe7
340219dc:	34030004 	.word	0x34030004
340219e0:	34030016 	.word	0x34030016
340219e4:	34030027 	.word	0x34030027
340219e8:	34030039 	.word	0x34030039
340219ec:	34030045 	.word	0x34030045
340219f0:	3403005d 	.word	0x3403005d
340219f4:	34030069 	.word	0x34030069
340219f8:	3403007b 	.word	0x3403007b
340219fc:	3403008a 	.word	0x3403008a
34021a00:	3403009a 	.word	0x3403009a
34021a04:	340300a7 	.word	0x340300a7
34021a08:	340300c6 	.word	0x340300c6
34021a0c:	340300d5 	.word	0x340300d5
34021a10:	340300e6 	.word	0x340300e6
34021a14:	3403010a 	.word	0x3403010a
34021a18:	34030128 	.word	0x34030128
34021a1c:	34030146 	.word	0x34030146
34021a20:	34030166 	.word	0x34030166
34021a24:	3403017d 	.word	0x3403017d
34021a28:	3403018c 	.word	0x3403018c
34021a2c:	3403019b 	.word	0x3403019b
34021a30:	340301af 	.word	0x340301af
34021a34:	340301c7 	.word	0x340301c7
34021a38:	340301d5 	.word	0x340301d5
34021a3c:	340301e2 	.word	0x340301e2
34021a40:	340301f8 	.word	0x340301f8
34021a44:	34030207 	.word	0x34030207
34021a48:	34030213 	.word	0x34030213
34021a4c:	34030242 	.word	0x34030242
34021a50:	34030253 	.word	0x34030253
34021a54:	3403026e 	.word	0x3403026e
34021a58:	34030281 	.word	0x34030281
34021a5c:	34030297 	.word	0x34030297
34021a60:	340302a0 	.word	0x340302a0
34021a64:	340302b7 	.word	0x340302b7
34021a68:	340302bf 	.word	0x340302bf
34021a6c:	340302cc 	.word	0x340302cc
34021a70:	340302e1 	.word	0x340302e1
34021a74:	340302f5 	.word	0x340302f5
34021a78:	3403030d 	.word	0x3403030d
34021a7c:	3403031c 	.word	0x3403031c
34021a80:	3403032d 	.word	0x3403032d
34021a84:	34030340 	.word	0x34030340
34021a88:	3403034c 	.word	0x3403034c
34021a8c:	34030365 	.word	0x34030365
34021a90:	34030379 	.word	0x34030379
34021a94:	34030394 	.word	0x34030394
34021a98:	340303ac 	.word	0x340303ac
34021a9c:	340303c6 	.word	0x340303c6
34021aa0:	340303ce 	.word	0x340303ce
34021aa4:	340303fe 	.word	0x340303fe
34021aa8:	3403041d 	.word	0x3403041d
34021aac:	3403043c 	.word	0x3403043c
34021ab0:	34030453 	.word	0x34030453
34021ab4:	34030466 	.word	0x34030466
34021ab8:	3403047f 	.word	0x3403047f
34021abc:	34030496 	.word	0x34030496
34021ac0:	340304ac 	.word	0x340304ac
34021ac4:	340304cd 	.word	0x340304cd
34021ac8:	340304e5 	.word	0x340304e5
34021acc:	34030501 	.word	0x34030501
34021ad0:	34030514 	.word	0x34030514
34021ad4:	3403052a 	.word	0x3403052a
34021ad8:	3403053e 	.word	0x3403053e
34021adc:	34030560 	.word	0x34030560
34021ae0:	34030586 	.word	0x34030586
34021ae4:	34030597 	.word	0x34030597
34021ae8:	3402b16a 	.word	0x3402b16a
34021aec:	3402ff1e 	.word	0x3402ff1e

34021af0 <strerror>:
34021af0:	4601      	mov	r1, r0
34021af2:	2300      	movs	r3, #0
34021af4:	4802      	ldr	r0, [pc, #8]	@ (34021b00 <strerror+0x10>)
34021af6:	461a      	mov	r2, r3
34021af8:	6800      	ldr	r0, [r0, #0]
34021afa:	f7ff be13 	b.w	34021724 <_strerror_r>
34021afe:	bf00      	nop
34021b00:	340d0a3c 	.word	0x340d0a3c

34021b04 <strncmp>:
34021b04:	b510      	push	{r4, lr}
34021b06:	b16a      	cbz	r2, 34021b24 <strncmp+0x20>
34021b08:	3901      	subs	r1, #1
34021b0a:	1884      	adds	r4, r0, r2
34021b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
34021b10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
34021b14:	429a      	cmp	r2, r3
34021b16:	d103      	bne.n	34021b20 <strncmp+0x1c>
34021b18:	42a0      	cmp	r0, r4
34021b1a:	d001      	beq.n	34021b20 <strncmp+0x1c>
34021b1c:	2a00      	cmp	r2, #0
34021b1e:	d1f5      	bne.n	34021b0c <strncmp+0x8>
34021b20:	1ad0      	subs	r0, r2, r3
34021b22:	bd10      	pop	{r4, pc}
34021b24:	4610      	mov	r0, r2
34021b26:	e7fc      	b.n	34021b22 <strncmp+0x1e>

34021b28 <strstr>:
34021b28:	780a      	ldrb	r2, [r1, #0]
34021b2a:	b570      	push	{r4, r5, r6, lr}
34021b2c:	b96a      	cbnz	r2, 34021b4a <strstr+0x22>
34021b2e:	bd70      	pop	{r4, r5, r6, pc}
34021b30:	429a      	cmp	r2, r3
34021b32:	d109      	bne.n	34021b48 <strstr+0x20>
34021b34:	460c      	mov	r4, r1
34021b36:	4605      	mov	r5, r0
34021b38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
34021b3c:	2b00      	cmp	r3, #0
34021b3e:	d0f6      	beq.n	34021b2e <strstr+0x6>
34021b40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
34021b44:	429e      	cmp	r6, r3
34021b46:	d0f7      	beq.n	34021b38 <strstr+0x10>
34021b48:	3001      	adds	r0, #1
34021b4a:	7803      	ldrb	r3, [r0, #0]
34021b4c:	2b00      	cmp	r3, #0
34021b4e:	d1ef      	bne.n	34021b30 <strstr+0x8>
34021b50:	4618      	mov	r0, r3
34021b52:	e7ec      	b.n	34021b2e <strstr+0x6>

34021b54 <_user_strerror>:
34021b54:	2000      	movs	r0, #0
34021b56:	4770      	bx	lr

34021b58 <_localeconv_r>:
34021b58:	4800      	ldr	r0, [pc, #0]	@ (34021b5c <_localeconv_r+0x4>)
34021b5a:	4770      	bx	lr
34021b5c:	340d09c0 	.word	0x340d09c0

34021b60 <_close_r>:
34021b60:	b538      	push	{r3, r4, r5, lr}
34021b62:	2300      	movs	r3, #0
34021b64:	4d05      	ldr	r5, [pc, #20]	@ (34021b7c <_close_r+0x1c>)
34021b66:	4604      	mov	r4, r0
34021b68:	4608      	mov	r0, r1
34021b6a:	602b      	str	r3, [r5, #0]
34021b6c:	f7e0 fa94 	bl	34002098 <_close>
34021b70:	1c43      	adds	r3, r0, #1
34021b72:	d102      	bne.n	34021b7a <_close_r+0x1a>
34021b74:	682b      	ldr	r3, [r5, #0]
34021b76:	b103      	cbz	r3, 34021b7a <_close_r+0x1a>
34021b78:	6023      	str	r3, [r4, #0]
34021b7a:	bd38      	pop	{r3, r4, r5, pc}
34021b7c:	340e5d28 	.word	0x340e5d28

34021b80 <_lseek_r>:
34021b80:	b538      	push	{r3, r4, r5, lr}
34021b82:	4604      	mov	r4, r0
34021b84:	4d06      	ldr	r5, [pc, #24]	@ (34021ba0 <_lseek_r+0x20>)
34021b86:	4608      	mov	r0, r1
34021b88:	4611      	mov	r1, r2
34021b8a:	2200      	movs	r2, #0
34021b8c:	602a      	str	r2, [r5, #0]
34021b8e:	461a      	mov	r2, r3
34021b90:	f7e0 fa8c 	bl	340020ac <_lseek>
34021b94:	1c43      	adds	r3, r0, #1
34021b96:	d102      	bne.n	34021b9e <_lseek_r+0x1e>
34021b98:	682b      	ldr	r3, [r5, #0]
34021b9a:	b103      	cbz	r3, 34021b9e <_lseek_r+0x1e>
34021b9c:	6023      	str	r3, [r4, #0]
34021b9e:	bd38      	pop	{r3, r4, r5, pc}
34021ba0:	340e5d28 	.word	0x340e5d28

34021ba4 <_read_r>:
34021ba4:	b538      	push	{r3, r4, r5, lr}
34021ba6:	4604      	mov	r4, r0
34021ba8:	4d06      	ldr	r5, [pc, #24]	@ (34021bc4 <_read_r+0x20>)
34021baa:	4608      	mov	r0, r1
34021bac:	4611      	mov	r1, r2
34021bae:	2200      	movs	r2, #0
34021bb0:	602a      	str	r2, [r5, #0]
34021bb2:	461a      	mov	r2, r3
34021bb4:	f7e0 fa62 	bl	3400207c <_read>
34021bb8:	1c43      	adds	r3, r0, #1
34021bba:	d102      	bne.n	34021bc2 <_read_r+0x1e>
34021bbc:	682b      	ldr	r3, [r5, #0]
34021bbe:	b103      	cbz	r3, 34021bc2 <_read_r+0x1e>
34021bc0:	6023      	str	r3, [r4, #0]
34021bc2:	bd38      	pop	{r3, r4, r5, pc}
34021bc4:	340e5d28 	.word	0x340e5d28

34021bc8 <_write_r>:
34021bc8:	b538      	push	{r3, r4, r5, lr}
34021bca:	4604      	mov	r4, r0
34021bcc:	4d06      	ldr	r5, [pc, #24]	@ (34021be8 <_write_r+0x20>)
34021bce:	4608      	mov	r0, r1
34021bd0:	4611      	mov	r1, r2
34021bd2:	2200      	movs	r2, #0
34021bd4:	602a      	str	r2, [r5, #0]
34021bd6:	461a      	mov	r2, r3
34021bd8:	f7e0 f9bc 	bl	34001f54 <_write>
34021bdc:	1c43      	adds	r3, r0, #1
34021bde:	d102      	bne.n	34021be6 <_write_r+0x1e>
34021be0:	682b      	ldr	r3, [r5, #0]
34021be2:	b103      	cbz	r3, 34021be6 <_write_r+0x1e>
34021be4:	6023      	str	r3, [r4, #0]
34021be6:	bd38      	pop	{r3, r4, r5, pc}
34021be8:	340e5d28 	.word	0x340e5d28

34021bec <__errno>:
34021bec:	4b01      	ldr	r3, [pc, #4]	@ (34021bf4 <__errno+0x8>)
34021bee:	6818      	ldr	r0, [r3, #0]
34021bf0:	4770      	bx	lr
34021bf2:	bf00      	nop
34021bf4:	340d0a3c 	.word	0x340d0a3c

34021bf8 <__libc_init_array>:
34021bf8:	b570      	push	{r4, r5, r6, lr}
34021bfa:	4d0d      	ldr	r5, [pc, #52]	@ (34021c30 <__libc_init_array+0x38>)
34021bfc:	2600      	movs	r6, #0
34021bfe:	4c0d      	ldr	r4, [pc, #52]	@ (34021c34 <__libc_init_array+0x3c>)
34021c00:	1b64      	subs	r4, r4, r5
34021c02:	10a4      	asrs	r4, r4, #2
34021c04:	42a6      	cmp	r6, r4
34021c06:	d109      	bne.n	34021c1c <__libc_init_array+0x24>
34021c08:	4d0b      	ldr	r5, [pc, #44]	@ (34021c38 <__libc_init_array+0x40>)
34021c0a:	2600      	movs	r6, #0
34021c0c:	4c0b      	ldr	r4, [pc, #44]	@ (34021c3c <__libc_init_array+0x44>)
34021c0e:	f008 ff27 	bl	3402aa60 <_init>
34021c12:	1b64      	subs	r4, r4, r5
34021c14:	10a4      	asrs	r4, r4, #2
34021c16:	42a6      	cmp	r6, r4
34021c18:	d105      	bne.n	34021c26 <__libc_init_array+0x2e>
34021c1a:	bd70      	pop	{r4, r5, r6, pc}
34021c1c:	f855 3b04 	ldr.w	r3, [r5], #4
34021c20:	3601      	adds	r6, #1
34021c22:	4798      	blx	r3
34021c24:	e7ee      	b.n	34021c04 <__libc_init_array+0xc>
34021c26:	f855 3b04 	ldr.w	r3, [r5], #4
34021c2a:	3601      	adds	r6, #1
34021c2c:	4798      	blx	r3
34021c2e:	e7f2      	b.n	34021c16 <__libc_init_array+0x1e>
34021c30:	340cc598 	.word	0x340cc598
34021c34:	340cc598 	.word	0x340cc598
34021c38:	340cc598 	.word	0x340cc598
34021c3c:	340cc59c 	.word	0x340cc59c

34021c40 <__retarget_lock_init_recursive>:
34021c40:	4770      	bx	lr

34021c42 <__retarget_lock_acquire_recursive>:
34021c42:	4770      	bx	lr

34021c44 <__retarget_lock_release_recursive>:
34021c44:	4770      	bx	lr

34021c46 <strcpy>:
34021c46:	4603      	mov	r3, r0
34021c48:	f811 2b01 	ldrb.w	r2, [r1], #1
34021c4c:	f803 2b01 	strb.w	r2, [r3], #1
34021c50:	2a00      	cmp	r2, #0
34021c52:	d1f9      	bne.n	34021c48 <strcpy+0x2>
34021c54:	4770      	bx	lr

34021c56 <memchr>:
34021c56:	b2c9      	uxtb	r1, r1
34021c58:	4603      	mov	r3, r0
34021c5a:	4402      	add	r2, r0
34021c5c:	b510      	push	{r4, lr}
34021c5e:	4293      	cmp	r3, r2
34021c60:	4618      	mov	r0, r3
34021c62:	d101      	bne.n	34021c68 <memchr+0x12>
34021c64:	2000      	movs	r0, #0
34021c66:	e003      	b.n	34021c70 <memchr+0x1a>
34021c68:	7804      	ldrb	r4, [r0, #0]
34021c6a:	3301      	adds	r3, #1
34021c6c:	428c      	cmp	r4, r1
34021c6e:	d1f6      	bne.n	34021c5e <memchr+0x8>
34021c70:	bd10      	pop	{r4, pc}

34021c72 <memcpy>:
34021c72:	440a      	add	r2, r1
34021c74:	1e43      	subs	r3, r0, #1
34021c76:	4291      	cmp	r1, r2
34021c78:	d100      	bne.n	34021c7c <memcpy+0xa>
34021c7a:	4770      	bx	lr
34021c7c:	b510      	push	{r4, lr}
34021c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
34021c82:	4291      	cmp	r1, r2
34021c84:	f803 4f01 	strb.w	r4, [r3, #1]!
34021c88:	d1f9      	bne.n	34021c7e <memcpy+0xc>
34021c8a:	bd10      	pop	{r4, pc}
34021c8c:	0000      	movs	r0, r0
	...

34021c90 <nan>:
34021c90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34021c98 <nan+0x8>
34021c94:	4770      	bx	lr
34021c96:	bf00      	nop
34021c98:	00000000 	.word	0x00000000
34021c9c:	7ff80000 	.word	0x7ff80000

34021ca0 <nanf>:
34021ca0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34021ca8 <nanf+0x8>
34021ca4:	4770      	bx	lr
34021ca6:	bf00      	nop
34021ca8:	7fc00000 	.word	0x7fc00000

34021cac <abort>:
34021cac:	2006      	movs	r0, #6
34021cae:	b508      	push	{r3, lr}
34021cb0:	f002 fabc 	bl	3402422c <raise>
34021cb4:	2001      	movs	r0, #1
34021cb6:	f7e0 f9db 	bl	34002070 <_exit>

34021cba <quorem>:
34021cba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34021cbe:	6903      	ldr	r3, [r0, #16]
34021cc0:	4607      	mov	r7, r0
34021cc2:	690c      	ldr	r4, [r1, #16]
34021cc4:	42a3      	cmp	r3, r4
34021cc6:	f2c0 8083 	blt.w	34021dd0 <quorem+0x116>
34021cca:	3c01      	subs	r4, #1
34021ccc:	f100 0514 	add.w	r5, r0, #20
34021cd0:	f101 0814 	add.w	r8, r1, #20
34021cd4:	00a3      	lsls	r3, r4, #2
34021cd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
34021cda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
34021cde:	9300      	str	r3, [sp, #0]
34021ce0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
34021ce4:	9301      	str	r3, [sp, #4]
34021ce6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
34021cea:	3301      	adds	r3, #1
34021cec:	429a      	cmp	r2, r3
34021cee:	fbb2 f6f3 	udiv	r6, r2, r3
34021cf2:	d331      	bcc.n	34021d58 <quorem+0x9e>
34021cf4:	f04f 0a00 	mov.w	sl, #0
34021cf8:	46c4      	mov	ip, r8
34021cfa:	46ae      	mov	lr, r5
34021cfc:	46d3      	mov	fp, sl
34021cfe:	f85c 3b04 	ldr.w	r3, [ip], #4
34021d02:	b298      	uxth	r0, r3
34021d04:	45e1      	cmp	r9, ip
34021d06:	ea4f 4313 	mov.w	r3, r3, lsr #16
34021d0a:	fb06 a000 	mla	r0, r6, r0, sl
34021d0e:	ea4f 4210 	mov.w	r2, r0, lsr #16
34021d12:	b280      	uxth	r0, r0
34021d14:	fb06 2303 	mla	r3, r6, r3, r2
34021d18:	f8de 2000 	ldr.w	r2, [lr]
34021d1c:	b292      	uxth	r2, r2
34021d1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
34021d22:	eba2 0200 	sub.w	r2, r2, r0
34021d26:	b29b      	uxth	r3, r3
34021d28:	f8de 0000 	ldr.w	r0, [lr]
34021d2c:	445a      	add	r2, fp
34021d2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
34021d32:	b292      	uxth	r2, r2
34021d34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
34021d38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34021d3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
34021d40:	f84e 2b04 	str.w	r2, [lr], #4
34021d44:	d2db      	bcs.n	34021cfe <quorem+0x44>
34021d46:	9b00      	ldr	r3, [sp, #0]
34021d48:	58eb      	ldr	r3, [r5, r3]
34021d4a:	b92b      	cbnz	r3, 34021d58 <quorem+0x9e>
34021d4c:	9b01      	ldr	r3, [sp, #4]
34021d4e:	3b04      	subs	r3, #4
34021d50:	429d      	cmp	r5, r3
34021d52:	461a      	mov	r2, r3
34021d54:	d330      	bcc.n	34021db8 <quorem+0xfe>
34021d56:	613c      	str	r4, [r7, #16]
34021d58:	4638      	mov	r0, r7
34021d5a:	f001 fc97 	bl	3402368c <__mcmp>
34021d5e:	2800      	cmp	r0, #0
34021d60:	db26      	blt.n	34021db0 <quorem+0xf6>
34021d62:	4629      	mov	r1, r5
34021d64:	2000      	movs	r0, #0
34021d66:	f858 2b04 	ldr.w	r2, [r8], #4
34021d6a:	f8d1 c000 	ldr.w	ip, [r1]
34021d6e:	fa1f fe82 	uxth.w	lr, r2
34021d72:	45c1      	cmp	r9, r8
34021d74:	fa1f f38c 	uxth.w	r3, ip
34021d78:	ea4f 4212 	mov.w	r2, r2, lsr #16
34021d7c:	eba3 030e 	sub.w	r3, r3, lr
34021d80:	4403      	add	r3, r0
34021d82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
34021d86:	b29b      	uxth	r3, r3
34021d88:	eb02 421c 	add.w	r2, r2, ip, lsr #16
34021d8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34021d90:	ea4f 4022 	mov.w	r0, r2, asr #16
34021d94:	f841 3b04 	str.w	r3, [r1], #4
34021d98:	d2e5      	bcs.n	34021d66 <quorem+0xac>
34021d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
34021d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
34021da2:	b922      	cbnz	r2, 34021dae <quorem+0xf4>
34021da4:	3b04      	subs	r3, #4
34021da6:	429d      	cmp	r5, r3
34021da8:	461a      	mov	r2, r3
34021daa:	d30b      	bcc.n	34021dc4 <quorem+0x10a>
34021dac:	613c      	str	r4, [r7, #16]
34021dae:	3601      	adds	r6, #1
34021db0:	4630      	mov	r0, r6
34021db2:	b003      	add	sp, #12
34021db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34021db8:	6812      	ldr	r2, [r2, #0]
34021dba:	3b04      	subs	r3, #4
34021dbc:	2a00      	cmp	r2, #0
34021dbe:	d1ca      	bne.n	34021d56 <quorem+0x9c>
34021dc0:	3c01      	subs	r4, #1
34021dc2:	e7c5      	b.n	34021d50 <quorem+0x96>
34021dc4:	6812      	ldr	r2, [r2, #0]
34021dc6:	3b04      	subs	r3, #4
34021dc8:	2a00      	cmp	r2, #0
34021dca:	d1ef      	bne.n	34021dac <quorem+0xf2>
34021dcc:	3c01      	subs	r4, #1
34021dce:	e7ea      	b.n	34021da6 <quorem+0xec>
34021dd0:	2000      	movs	r0, #0
34021dd2:	e7ee      	b.n	34021db2 <quorem+0xf8>
34021dd4:	0000      	movs	r0, r0
	...

34021dd8 <_dtoa_r>:
34021dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34021ddc:	69c7      	ldr	r7, [r0, #28]
34021dde:	4681      	mov	r9, r0
34021de0:	ed2d 8b02 	vpush	{d8}
34021de4:	b091      	sub	sp, #68	@ 0x44
34021de6:	ec55 4b10 	vmov	r4, r5, d0
34021dea:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
34021dec:	9107      	str	r1, [sp, #28]
34021dee:	9209      	str	r2, [sp, #36]	@ 0x24
34021df0:	930d      	str	r3, [sp, #52]	@ 0x34
34021df2:	ed8d 0b02 	vstr	d0, [sp, #8]
34021df6:	b97f      	cbnz	r7, 34021e18 <_dtoa_r+0x40>
34021df8:	2010      	movs	r0, #16
34021dfa:	f001 f8cb 	bl	34022f94 <malloc>
34021dfe:	4602      	mov	r2, r0
34021e00:	f8c9 001c 	str.w	r0, [r9, #28]
34021e04:	b920      	cbnz	r0, 34021e10 <_dtoa_r+0x38>
34021e06:	4ba0      	ldr	r3, [pc, #640]	@ (34022088 <_dtoa_r+0x2b0>)
34021e08:	21ef      	movs	r1, #239	@ 0xef
34021e0a:	48a0      	ldr	r0, [pc, #640]	@ (3402208c <_dtoa_r+0x2b4>)
34021e0c:	f7fd fdfc 	bl	3401fa08 <__assert_func>
34021e10:	e9c0 7701 	strd	r7, r7, [r0, #4]
34021e14:	6007      	str	r7, [r0, #0]
34021e16:	60c7      	str	r7, [r0, #12]
34021e18:	f8d9 301c 	ldr.w	r3, [r9, #28]
34021e1c:	6819      	ldr	r1, [r3, #0]
34021e1e:	b159      	cbz	r1, 34021e38 <_dtoa_r+0x60>
34021e20:	685a      	ldr	r2, [r3, #4]
34021e22:	2301      	movs	r3, #1
34021e24:	4648      	mov	r0, r9
34021e26:	4093      	lsls	r3, r2
34021e28:	604a      	str	r2, [r1, #4]
34021e2a:	608b      	str	r3, [r1, #8]
34021e2c:	f001 f9ae 	bl	3402318c <_Bfree>
34021e30:	f8d9 301c 	ldr.w	r3, [r9, #28]
34021e34:	2200      	movs	r2, #0
34021e36:	601a      	str	r2, [r3, #0]
34021e38:	1e2b      	subs	r3, r5, #0
34021e3a:	bfb7      	itett	lt
34021e3c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
34021e40:	2300      	movge	r3, #0
34021e42:	2201      	movlt	r2, #1
34021e44:	9303      	strlt	r3, [sp, #12]
34021e46:	bfac      	ite	ge
34021e48:	6033      	strge	r3, [r6, #0]
34021e4a:	6032      	strlt	r2, [r6, #0]
34021e4c:	4b90      	ldr	r3, [pc, #576]	@ (34022090 <_dtoa_r+0x2b8>)
34021e4e:	9e03      	ldr	r6, [sp, #12]
34021e50:	43b3      	bics	r3, r6
34021e52:	d110      	bne.n	34021e76 <_dtoa_r+0x9e>
34021e54:	f242 730f 	movw	r3, #9999	@ 0x270f
34021e58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
34021e5a:	6013      	str	r3, [r2, #0]
34021e5c:	f3c6 0313 	ubfx	r3, r6, #0, #20
34021e60:	4323      	orrs	r3, r4
34021e62:	f000 84e6 	beq.w	34022832 <_dtoa_r+0xa5a>
34021e66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34021e68:	4f8a      	ldr	r7, [pc, #552]	@ (34022094 <_dtoa_r+0x2bc>)
34021e6a:	2b00      	cmp	r3, #0
34021e6c:	f000 84e8 	beq.w	34022840 <_dtoa_r+0xa68>
34021e70:	1cfb      	adds	r3, r7, #3
34021e72:	f000 bce3 	b.w	3402283c <_dtoa_r+0xa64>
34021e76:	ed9d 8b02 	vldr	d8, [sp, #8]
34021e7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
34021e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34021e82:	d10a      	bne.n	34021e9a <_dtoa_r+0xc2>
34021e84:	2301      	movs	r3, #1
34021e86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
34021e88:	6013      	str	r3, [r2, #0]
34021e8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34021e8c:	b113      	cbz	r3, 34021e94 <_dtoa_r+0xbc>
34021e8e:	4b82      	ldr	r3, [pc, #520]	@ (34022098 <_dtoa_r+0x2c0>)
34021e90:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
34021e92:	6013      	str	r3, [r2, #0]
34021e94:	4f81      	ldr	r7, [pc, #516]	@ (3402209c <_dtoa_r+0x2c4>)
34021e96:	f000 bcd3 	b.w	34022840 <_dtoa_r+0xa68>
34021e9a:	aa0e      	add	r2, sp, #56	@ 0x38
34021e9c:	eeb0 0b48 	vmov.f64	d0, d8
34021ea0:	a90f      	add	r1, sp, #60	@ 0x3c
34021ea2:	4648      	mov	r0, r9
34021ea4:	f001 fd1a 	bl	340238dc <__d2b>
34021ea8:	f3c6 530a 	ubfx	r3, r6, #20, #11
34021eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34021eae:	9001      	str	r0, [sp, #4]
34021eb0:	2b00      	cmp	r3, #0
34021eb2:	d045      	beq.n	34021f40 <_dtoa_r+0x168>
34021eb4:	ee18 1a90 	vmov	r1, s17
34021eb8:	eeb0 7b48 	vmov.f64	d7, d8
34021ebc:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
34021ec0:	2500      	movs	r5, #0
34021ec2:	f3c1 0113 	ubfx	r1, r1, #0, #20
34021ec6:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
34021eca:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
34021ece:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
34021ed2:	ee07 1a90 	vmov	s15, r1
34021ed6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 34022070 <_dtoa_r+0x298>
34021eda:	ee37 7b46 	vsub.f64	d7, d7, d6
34021ede:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 34022078 <_dtoa_r+0x2a0>
34021ee2:	eea7 6b05 	vfma.f64	d6, d7, d5
34021ee6:	ee07 3a90 	vmov	s15, r3
34021eea:	eeb8 4be7 	vcvt.f64.s32	d4, s15
34021eee:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 34022080 <_dtoa_r+0x2a8>
34021ef2:	eeb0 7b46 	vmov.f64	d7, d6
34021ef6:	eea4 7b05 	vfma.f64	d7, d4, d5
34021efa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34021efe:	eefd 6bc7 	vcvt.s32.f64	s13, d7
34021f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34021f06:	ee16 8a90 	vmov	r8, s13
34021f0a:	d508      	bpl.n	34021f1e <_dtoa_r+0x146>
34021f0c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
34021f10:	eeb4 6b47 	vcmp.f64	d6, d7
34021f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34021f18:	bf18      	it	ne
34021f1a:	f108 38ff 	addne.w	r8, r8, #4294967295
34021f1e:	f1b8 0f16 	cmp.w	r8, #22
34021f22:	d82d      	bhi.n	34021f80 <_dtoa_r+0x1a8>
34021f24:	495e      	ldr	r1, [pc, #376]	@ (340220a0 <_dtoa_r+0x2c8>)
34021f26:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
34021f2a:	ed91 7b00 	vldr	d7, [r1]
34021f2e:	eeb4 8bc7 	vcmpe.f64	d8, d7
34021f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34021f36:	d501      	bpl.n	34021f3c <_dtoa_r+0x164>
34021f38:	f108 38ff 	add.w	r8, r8, #4294967295
34021f3c:	2100      	movs	r1, #0
34021f3e:	e020      	b.n	34021f82 <_dtoa_r+0x1aa>
34021f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
34021f42:	2501      	movs	r5, #1
34021f44:	4413      	add	r3, r2
34021f46:	f203 4132 	addw	r1, r3, #1074	@ 0x432
34021f4a:	2920      	cmp	r1, #32
34021f4c:	bfc9      	itett	gt
34021f4e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
34021f52:	f1c1 0120 	rsble	r1, r1, #32
34021f56:	408e      	lslgt	r6, r1
34021f58:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
34021f5c:	bfd8      	it	le
34021f5e:	fa04 f101 	lslle.w	r1, r4, r1
34021f62:	f103 33ff 	add.w	r3, r3, #4294967295
34021f66:	bfc4      	itt	gt
34021f68:	fa24 f101 	lsrgt.w	r1, r4, r1
34021f6c:	4331      	orrgt	r1, r6
34021f6e:	ee07 1a90 	vmov	s15, r1
34021f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34021f76:	ee17 1a90 	vmov	r1, s15
34021f7a:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
34021f7e:	e7a6      	b.n	34021ece <_dtoa_r+0xf6>
34021f80:	2101      	movs	r1, #1
34021f82:	1ad2      	subs	r2, r2, r3
34021f84:	910c      	str	r1, [sp, #48]	@ 0x30
34021f86:	1e53      	subs	r3, r2, #1
34021f88:	9306      	str	r3, [sp, #24]
34021f8a:	bf49      	itett	mi
34021f8c:	f1c2 0301 	rsbmi	r3, r2, #1
34021f90:	2300      	movpl	r3, #0
34021f92:	9304      	strmi	r3, [sp, #16]
34021f94:	2300      	movmi	r3, #0
34021f96:	bf54      	ite	pl
34021f98:	9304      	strpl	r3, [sp, #16]
34021f9a:	9306      	strmi	r3, [sp, #24]
34021f9c:	f1b8 0f00 	cmp.w	r8, #0
34021fa0:	db16      	blt.n	34021fd0 <_dtoa_r+0x1f8>
34021fa2:	9b06      	ldr	r3, [sp, #24]
34021fa4:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
34021fa8:	4443      	add	r3, r8
34021faa:	9306      	str	r3, [sp, #24]
34021fac:	2300      	movs	r3, #0
34021fae:	9a07      	ldr	r2, [sp, #28]
34021fb0:	2a09      	cmp	r2, #9
34021fb2:	d843      	bhi.n	3402203c <_dtoa_r+0x264>
34021fb4:	2a05      	cmp	r2, #5
34021fb6:	bfc5      	ittet	gt
34021fb8:	3a04      	subgt	r2, #4
34021fba:	2400      	movgt	r4, #0
34021fbc:	2401      	movle	r4, #1
34021fbe:	9207      	strgt	r2, [sp, #28]
34021fc0:	9a07      	ldr	r2, [sp, #28]
34021fc2:	3a02      	subs	r2, #2
34021fc4:	2a03      	cmp	r2, #3
34021fc6:	d844      	bhi.n	34022052 <_dtoa_r+0x27a>
34021fc8:	e8df f002 	tbb	[pc, r2]
34021fcc:	0b173634 	.word	0x0b173634
34021fd0:	9b04      	ldr	r3, [sp, #16]
34021fd2:	2200      	movs	r2, #0
34021fd4:	eba3 0308 	sub.w	r3, r3, r8
34021fd8:	920a      	str	r2, [sp, #40]	@ 0x28
34021fda:	9304      	str	r3, [sp, #16]
34021fdc:	f1c8 0300 	rsb	r3, r8, #0
34021fe0:	e7e5      	b.n	34021fae <_dtoa_r+0x1d6>
34021fe2:	2201      	movs	r2, #1
34021fe4:	9208      	str	r2, [sp, #32]
34021fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34021fe8:	eb08 0b02 	add.w	fp, r8, r2
34021fec:	f10b 0a01 	add.w	sl, fp, #1
34021ff0:	4652      	mov	r2, sl
34021ff2:	2a01      	cmp	r2, #1
34021ff4:	bfb8      	it	lt
34021ff6:	2201      	movlt	r2, #1
34021ff8:	e006      	b.n	34022008 <_dtoa_r+0x230>
34021ffa:	2201      	movs	r2, #1
34021ffc:	9208      	str	r2, [sp, #32]
34021ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34022000:	2a00      	cmp	r2, #0
34022002:	dd29      	ble.n	34022058 <_dtoa_r+0x280>
34022004:	4693      	mov	fp, r2
34022006:	4692      	mov	sl, r2
34022008:	f8d9 701c 	ldr.w	r7, [r9, #28]
3402200c:	2100      	movs	r1, #0
3402200e:	2004      	movs	r0, #4
34022010:	f100 0614 	add.w	r6, r0, #20
34022014:	4296      	cmp	r6, r2
34022016:	d926      	bls.n	34022066 <_dtoa_r+0x28e>
34022018:	6079      	str	r1, [r7, #4]
3402201a:	4648      	mov	r0, r9
3402201c:	9305      	str	r3, [sp, #20]
3402201e:	f001 f875 	bl	3402310c <_Balloc>
34022022:	9b05      	ldr	r3, [sp, #20]
34022024:	4607      	mov	r7, r0
34022026:	2800      	cmp	r0, #0
34022028:	d13e      	bne.n	340220a8 <_dtoa_r+0x2d0>
3402202a:	4b1e      	ldr	r3, [pc, #120]	@ (340220a4 <_dtoa_r+0x2cc>)
3402202c:	4602      	mov	r2, r0
3402202e:	f240 11af 	movw	r1, #431	@ 0x1af
34022032:	e6ea      	b.n	34021e0a <_dtoa_r+0x32>
34022034:	2200      	movs	r2, #0
34022036:	e7e1      	b.n	34021ffc <_dtoa_r+0x224>
34022038:	2200      	movs	r2, #0
3402203a:	e7d3      	b.n	34021fe4 <_dtoa_r+0x20c>
3402203c:	2401      	movs	r4, #1
3402203e:	2200      	movs	r2, #0
34022040:	e9cd 2407 	strd	r2, r4, [sp, #28]
34022044:	f04f 3bff 	mov.w	fp, #4294967295
34022048:	2100      	movs	r1, #0
3402204a:	2212      	movs	r2, #18
3402204c:	46da      	mov	sl, fp
3402204e:	9109      	str	r1, [sp, #36]	@ 0x24
34022050:	e7da      	b.n	34022008 <_dtoa_r+0x230>
34022052:	2201      	movs	r2, #1
34022054:	9208      	str	r2, [sp, #32]
34022056:	e7f5      	b.n	34022044 <_dtoa_r+0x26c>
34022058:	f04f 0b01 	mov.w	fp, #1
3402205c:	46da      	mov	sl, fp
3402205e:	465a      	mov	r2, fp
34022060:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
34022064:	e7d0      	b.n	34022008 <_dtoa_r+0x230>
34022066:	3101      	adds	r1, #1
34022068:	0040      	lsls	r0, r0, #1
3402206a:	e7d1      	b.n	34022010 <_dtoa_r+0x238>
3402206c:	f3af 8000 	nop.w
34022070:	636f4361 	.word	0x636f4361
34022074:	3fd287a7 	.word	0x3fd287a7
34022078:	8b60c8b3 	.word	0x8b60c8b3
3402207c:	3fc68a28 	.word	0x3fc68a28
34022080:	509f79fb 	.word	0x509f79fb
34022084:	3fd34413 	.word	0x3fd34413
34022088:	340305bf 	.word	0x340305bf
3402208c:	340305d6 	.word	0x340305d6
34022090:	7ff00000 	.word	0x7ff00000
34022094:	340305bb 	.word	0x340305bb
34022098:	3402b7ce 	.word	0x3402b7ce
3402209c:	3402b7cd 	.word	0x3402b7cd
340220a0:	340c9ab8 	.word	0x340c9ab8
340220a4:	3403062e 	.word	0x3403062e
340220a8:	f8d9 201c 	ldr.w	r2, [r9, #28]
340220ac:	f1ba 0f0e 	cmp.w	sl, #14
340220b0:	6010      	str	r0, [r2, #0]
340220b2:	d86e      	bhi.n	34022192 <_dtoa_r+0x3ba>
340220b4:	2c00      	cmp	r4, #0
340220b6:	d06c      	beq.n	34022192 <_dtoa_r+0x3ba>
340220b8:	f1b8 0f00 	cmp.w	r8, #0
340220bc:	f340 80b4 	ble.w	34022228 <_dtoa_r+0x450>
340220c0:	f008 010f 	and.w	r1, r8, #15
340220c4:	4ac7      	ldr	r2, [pc, #796]	@ (340223e4 <_dtoa_r+0x60c>)
340220c6:	f418 7f80 	tst.w	r8, #256	@ 0x100
340220ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
340220ce:	ea4f 1128 	mov.w	r1, r8, asr #4
340220d2:	ed92 7b00 	vldr	d7, [r2]
340220d6:	f000 809b 	beq.w	34022210 <_dtoa_r+0x438>
340220da:	4ac3      	ldr	r2, [pc, #780]	@ (340223e8 <_dtoa_r+0x610>)
340220dc:	f001 010f 	and.w	r1, r1, #15
340220e0:	ed92 6b08 	vldr	d6, [r2, #32]
340220e4:	2203      	movs	r2, #3
340220e6:	ee88 6b06 	vdiv.f64	d6, d8, d6
340220ea:	ed8d 6b02 	vstr	d6, [sp, #8]
340220ee:	48be      	ldr	r0, [pc, #760]	@ (340223e8 <_dtoa_r+0x610>)
340220f0:	2900      	cmp	r1, #0
340220f2:	f040 808f 	bne.w	34022214 <_dtoa_r+0x43c>
340220f6:	ed9d 6b02 	vldr	d6, [sp, #8]
340220fa:	ee86 7b07 	vdiv.f64	d7, d6, d7
340220fe:	ed8d 7b02 	vstr	d7, [sp, #8]
34022102:	990c      	ldr	r1, [sp, #48]	@ 0x30
34022104:	ed9d 7b02 	vldr	d7, [sp, #8]
34022108:	2900      	cmp	r1, #0
3402210a:	f000 80b3 	beq.w	34022274 <_dtoa_r+0x49c>
3402210e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
34022112:	eeb4 7bc6 	vcmpe.f64	d7, d6
34022116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402211a:	f140 80ab 	bpl.w	34022274 <_dtoa_r+0x49c>
3402211e:	f1ba 0f00 	cmp.w	sl, #0
34022122:	f000 80a7 	beq.w	34022274 <_dtoa_r+0x49c>
34022126:	f1bb 0f00 	cmp.w	fp, #0
3402212a:	dd30      	ble.n	3402218e <_dtoa_r+0x3b6>
3402212c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
34022130:	f108 31ff 	add.w	r1, r8, #4294967295
34022134:	3201      	adds	r2, #1
34022136:	465c      	mov	r4, fp
34022138:	9105      	str	r1, [sp, #20]
3402213a:	ee27 7b06 	vmul.f64	d7, d7, d6
3402213e:	ed8d 7b02 	vstr	d7, [sp, #8]
34022142:	ee07 2a90 	vmov	s15, r2
34022146:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3402214a:	ed9d 6b02 	vldr	d6, [sp, #8]
3402214e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34022152:	eea7 5b06 	vfma.f64	d5, d7, d6
34022156:	ee15 2a90 	vmov	r2, s11
3402215a:	ec51 0b15 	vmov	r0, r1, d5
3402215e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
34022162:	2c00      	cmp	r4, #0
34022164:	f040 808a 	bne.w	3402227c <_dtoa_r+0x4a4>
34022168:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3402216c:	ee36 6b47 	vsub.f64	d6, d6, d7
34022170:	ec41 0b17 	vmov	d7, r0, r1
34022174:	eeb4 6bc7 	vcmpe.f64	d6, d7
34022178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402217c:	f300 826a 	bgt.w	34022654 <_dtoa_r+0x87c>
34022180:	eeb1 7b47 	vneg.f64	d7, d7
34022184:	eeb4 6bc7 	vcmpe.f64	d6, d7
34022188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402218c:	d423      	bmi.n	340221d6 <_dtoa_r+0x3fe>
3402218e:	ed8d 8b02 	vstr	d8, [sp, #8]
34022192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
34022194:	2a00      	cmp	r2, #0
34022196:	f2c0 8129 	blt.w	340223ec <_dtoa_r+0x614>
3402219a:	f1b8 0f0e 	cmp.w	r8, #14
3402219e:	f300 8125 	bgt.w	340223ec <_dtoa_r+0x614>
340221a2:	4b90      	ldr	r3, [pc, #576]	@ (340223e4 <_dtoa_r+0x60c>)
340221a4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
340221a8:	ed93 6b00 	vldr	d6, [r3]
340221ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340221ae:	2b00      	cmp	r3, #0
340221b0:	f280 80c8 	bge.w	34022344 <_dtoa_r+0x56c>
340221b4:	f1ba 0f00 	cmp.w	sl, #0
340221b8:	f300 80c4 	bgt.w	34022344 <_dtoa_r+0x56c>
340221bc:	d10b      	bne.n	340221d6 <_dtoa_r+0x3fe>
340221be:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
340221c2:	ee26 6b07 	vmul.f64	d6, d6, d7
340221c6:	ed9d 7b02 	vldr	d7, [sp, #8]
340221ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
340221ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340221d2:	f2c0 823c 	blt.w	3402264e <_dtoa_r+0x876>
340221d6:	2400      	movs	r4, #0
340221d8:	4625      	mov	r5, r4
340221da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340221dc:	463e      	mov	r6, r7
340221de:	43db      	mvns	r3, r3
340221e0:	9305      	str	r3, [sp, #20]
340221e2:	f04f 0800 	mov.w	r8, #0
340221e6:	4621      	mov	r1, r4
340221e8:	4648      	mov	r0, r9
340221ea:	f000 ffcf 	bl	3402318c <_Bfree>
340221ee:	2d00      	cmp	r5, #0
340221f0:	f000 80a2 	beq.w	34022338 <_dtoa_r+0x560>
340221f4:	f1b8 0f00 	cmp.w	r8, #0
340221f8:	d005      	beq.n	34022206 <_dtoa_r+0x42e>
340221fa:	45a8      	cmp	r8, r5
340221fc:	d003      	beq.n	34022206 <_dtoa_r+0x42e>
340221fe:	4641      	mov	r1, r8
34022200:	4648      	mov	r0, r9
34022202:	f000 ffc3 	bl	3402318c <_Bfree>
34022206:	4629      	mov	r1, r5
34022208:	4648      	mov	r0, r9
3402220a:	f000 ffbf 	bl	3402318c <_Bfree>
3402220e:	e093      	b.n	34022338 <_dtoa_r+0x560>
34022210:	2202      	movs	r2, #2
34022212:	e76c      	b.n	340220ee <_dtoa_r+0x316>
34022214:	07cc      	lsls	r4, r1, #31
34022216:	d504      	bpl.n	34022222 <_dtoa_r+0x44a>
34022218:	3201      	adds	r2, #1
3402221a:	ed90 6b00 	vldr	d6, [r0]
3402221e:	ee27 7b06 	vmul.f64	d7, d7, d6
34022222:	1049      	asrs	r1, r1, #1
34022224:	3008      	adds	r0, #8
34022226:	e763      	b.n	340220f0 <_dtoa_r+0x318>
34022228:	d022      	beq.n	34022270 <_dtoa_r+0x498>
3402222a:	f1c8 0100 	rsb	r1, r8, #0
3402222e:	4a6d      	ldr	r2, [pc, #436]	@ (340223e4 <_dtoa_r+0x60c>)
34022230:	2400      	movs	r4, #0
34022232:	f001 000f 	and.w	r0, r1, #15
34022236:	1109      	asrs	r1, r1, #4
34022238:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3402223c:	486a      	ldr	r0, [pc, #424]	@ (340223e8 <_dtoa_r+0x610>)
3402223e:	ed92 7b00 	vldr	d7, [r2]
34022242:	2202      	movs	r2, #2
34022244:	ee28 7b07 	vmul.f64	d7, d8, d7
34022248:	ed8d 7b02 	vstr	d7, [sp, #8]
3402224c:	b929      	cbnz	r1, 3402225a <_dtoa_r+0x482>
3402224e:	2c00      	cmp	r4, #0
34022250:	f43f af57 	beq.w	34022102 <_dtoa_r+0x32a>
34022254:	ed8d 7b02 	vstr	d7, [sp, #8]
34022258:	e753      	b.n	34022102 <_dtoa_r+0x32a>
3402225a:	07ce      	lsls	r6, r1, #31
3402225c:	d505      	bpl.n	3402226a <_dtoa_r+0x492>
3402225e:	3201      	adds	r2, #1
34022260:	2401      	movs	r4, #1
34022262:	ed90 6b00 	vldr	d6, [r0]
34022266:	ee27 7b06 	vmul.f64	d7, d7, d6
3402226a:	1049      	asrs	r1, r1, #1
3402226c:	3008      	adds	r0, #8
3402226e:	e7ed      	b.n	3402224c <_dtoa_r+0x474>
34022270:	2202      	movs	r2, #2
34022272:	e746      	b.n	34022102 <_dtoa_r+0x32a>
34022274:	4654      	mov	r4, sl
34022276:	f8cd 8014 	str.w	r8, [sp, #20]
3402227a:	e762      	b.n	34022142 <_dtoa_r+0x36a>
3402227c:	4a59      	ldr	r2, [pc, #356]	@ (340223e4 <_dtoa_r+0x60c>)
3402227e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
34022282:	443c      	add	r4, r7
34022284:	ed12 4b02 	vldr	d4, [r2, #-8]
34022288:	9a08      	ldr	r2, [sp, #32]
3402228a:	ec41 0b17 	vmov	d7, r0, r1
3402228e:	b34a      	cbz	r2, 340222e4 <_dtoa_r+0x50c>
34022290:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
34022294:	463e      	mov	r6, r7
34022296:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3402229a:	ee83 5b04 	vdiv.f64	d5, d3, d4
3402229e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
340222a2:	ee35 7b47 	vsub.f64	d7, d5, d7
340222a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
340222aa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
340222ae:	ee14 2a90 	vmov	r2, s9
340222b2:	3230      	adds	r2, #48	@ 0x30
340222b4:	ee36 6b45 	vsub.f64	d6, d6, d5
340222b8:	f806 2b01 	strb.w	r2, [r6], #1
340222bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
340222c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340222c4:	d438      	bmi.n	34022338 <_dtoa_r+0x560>
340222c6:	ee32 5b46 	vsub.f64	d5, d2, d6
340222ca:	eeb4 5bc7 	vcmpe.f64	d5, d7
340222ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340222d2:	d46e      	bmi.n	340223b2 <_dtoa_r+0x5da>
340222d4:	42a6      	cmp	r6, r4
340222d6:	f43f af5a 	beq.w	3402218e <_dtoa_r+0x3b6>
340222da:	ee27 7b03 	vmul.f64	d7, d7, d3
340222de:	ee26 6b03 	vmul.f64	d6, d6, d3
340222e2:	e7e0      	b.n	340222a6 <_dtoa_r+0x4ce>
340222e4:	ee27 7b04 	vmul.f64	d7, d7, d4
340222e8:	4621      	mov	r1, r4
340222ea:	463e      	mov	r6, r7
340222ec:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
340222f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
340222f4:	ee14 2a90 	vmov	r2, s9
340222f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
340222fc:	3230      	adds	r2, #48	@ 0x30
340222fe:	ee36 6b45 	vsub.f64	d6, d6, d5
34022302:	f806 2b01 	strb.w	r2, [r6], #1
34022306:	42a6      	cmp	r6, r4
34022308:	d119      	bne.n	3402233e <_dtoa_r+0x566>
3402230a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3402230e:	ee37 4b05 	vadd.f64	d4, d7, d5
34022312:	eeb4 6bc4 	vcmpe.f64	d6, d4
34022316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402231a:	dc4a      	bgt.n	340223b2 <_dtoa_r+0x5da>
3402231c:	ee35 5b47 	vsub.f64	d5, d5, d7
34022320:	eeb4 6bc5 	vcmpe.f64	d6, d5
34022324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022328:	f57f af31 	bpl.w	3402218e <_dtoa_r+0x3b6>
3402232c:	460e      	mov	r6, r1
3402232e:	3901      	subs	r1, #1
34022330:	f816 3c01 	ldrb.w	r3, [r6, #-1]
34022334:	2b30      	cmp	r3, #48	@ 0x30
34022336:	d0f9      	beq.n	3402232c <_dtoa_r+0x554>
34022338:	f8dd 8014 	ldr.w	r8, [sp, #20]
3402233c:	e027      	b.n	3402238e <_dtoa_r+0x5b6>
3402233e:	ee26 6b03 	vmul.f64	d6, d6, d3
34022342:	e7d5      	b.n	340222f0 <_dtoa_r+0x518>
34022344:	ed9d 7b02 	vldr	d7, [sp, #8]
34022348:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3402234c:	463e      	mov	r6, r7
3402234e:	ee87 5b06 	vdiv.f64	d5, d7, d6
34022352:	eebd 5bc5 	vcvt.s32.f64	s10, d5
34022356:	ee15 3a10 	vmov	r3, s10
3402235a:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3402235e:	3330      	adds	r3, #48	@ 0x30
34022360:	eea3 7b46 	vfms.f64	d7, d3, d6
34022364:	f806 3b01 	strb.w	r3, [r6], #1
34022368:	1bf3      	subs	r3, r6, r7
3402236a:	459a      	cmp	sl, r3
3402236c:	d132      	bne.n	340223d4 <_dtoa_r+0x5fc>
3402236e:	ee37 7b07 	vadd.f64	d7, d7, d7
34022372:	eeb4 7bc6 	vcmpe.f64	d7, d6
34022376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402237a:	dc18      	bgt.n	340223ae <_dtoa_r+0x5d6>
3402237c:	eeb4 7b46 	vcmp.f64	d7, d6
34022380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022384:	d103      	bne.n	3402238e <_dtoa_r+0x5b6>
34022386:	ee15 3a10 	vmov	r3, s10
3402238a:	07db      	lsls	r3, r3, #31
3402238c:	d40f      	bmi.n	340223ae <_dtoa_r+0x5d6>
3402238e:	9901      	ldr	r1, [sp, #4]
34022390:	4648      	mov	r0, r9
34022392:	f000 fefb 	bl	3402318c <_Bfree>
34022396:	2300      	movs	r3, #0
34022398:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3402239a:	7033      	strb	r3, [r6, #0]
3402239c:	f108 0301 	add.w	r3, r8, #1
340223a0:	6013      	str	r3, [r2, #0]
340223a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
340223a4:	2b00      	cmp	r3, #0
340223a6:	f000 824b 	beq.w	34022840 <_dtoa_r+0xa68>
340223aa:	601e      	str	r6, [r3, #0]
340223ac:	e248      	b.n	34022840 <_dtoa_r+0xa68>
340223ae:	f8cd 8014 	str.w	r8, [sp, #20]
340223b2:	4633      	mov	r3, r6
340223b4:	461e      	mov	r6, r3
340223b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
340223ba:	2a39      	cmp	r2, #57	@ 0x39
340223bc:	d106      	bne.n	340223cc <_dtoa_r+0x5f4>
340223be:	429f      	cmp	r7, r3
340223c0:	d1f8      	bne.n	340223b4 <_dtoa_r+0x5dc>
340223c2:	9a05      	ldr	r2, [sp, #20]
340223c4:	3201      	adds	r2, #1
340223c6:	9205      	str	r2, [sp, #20]
340223c8:	2230      	movs	r2, #48	@ 0x30
340223ca:	703a      	strb	r2, [r7, #0]
340223cc:	781a      	ldrb	r2, [r3, #0]
340223ce:	3201      	adds	r2, #1
340223d0:	701a      	strb	r2, [r3, #0]
340223d2:	e7b1      	b.n	34022338 <_dtoa_r+0x560>
340223d4:	ee27 7b04 	vmul.f64	d7, d7, d4
340223d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
340223dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340223e0:	d1b5      	bne.n	3402234e <_dtoa_r+0x576>
340223e2:	e7d4      	b.n	3402238e <_dtoa_r+0x5b6>
340223e4:	340c9ab8 	.word	0x340c9ab8
340223e8:	340c9a90 	.word	0x340c9a90
340223ec:	9908      	ldr	r1, [sp, #32]
340223ee:	2900      	cmp	r1, #0
340223f0:	f000 80e9 	beq.w	340225c6 <_dtoa_r+0x7ee>
340223f4:	9907      	ldr	r1, [sp, #28]
340223f6:	2901      	cmp	r1, #1
340223f8:	f300 80cb 	bgt.w	34022592 <_dtoa_r+0x7ba>
340223fc:	2d00      	cmp	r5, #0
340223fe:	f000 80c4 	beq.w	3402258a <_dtoa_r+0x7b2>
34022402:	f202 4233 	addw	r2, r2, #1075	@ 0x433
34022406:	461c      	mov	r4, r3
34022408:	9e04      	ldr	r6, [sp, #16]
3402240a:	9305      	str	r3, [sp, #20]
3402240c:	2101      	movs	r1, #1
3402240e:	9b04      	ldr	r3, [sp, #16]
34022410:	4648      	mov	r0, r9
34022412:	4413      	add	r3, r2
34022414:	9304      	str	r3, [sp, #16]
34022416:	9b06      	ldr	r3, [sp, #24]
34022418:	4413      	add	r3, r2
3402241a:	9306      	str	r3, [sp, #24]
3402241c:	f000 ffb6 	bl	3402338c <__i2b>
34022420:	9b05      	ldr	r3, [sp, #20]
34022422:	4605      	mov	r5, r0
34022424:	b166      	cbz	r6, 34022440 <_dtoa_r+0x668>
34022426:	9a06      	ldr	r2, [sp, #24]
34022428:	2a00      	cmp	r2, #0
3402242a:	dd09      	ble.n	34022440 <_dtoa_r+0x668>
3402242c:	42b2      	cmp	r2, r6
3402242e:	9904      	ldr	r1, [sp, #16]
34022430:	bfa8      	it	ge
34022432:	4632      	movge	r2, r6
34022434:	1a89      	subs	r1, r1, r2
34022436:	1ab6      	subs	r6, r6, r2
34022438:	9104      	str	r1, [sp, #16]
3402243a:	9906      	ldr	r1, [sp, #24]
3402243c:	1a8a      	subs	r2, r1, r2
3402243e:	9206      	str	r2, [sp, #24]
34022440:	b30b      	cbz	r3, 34022486 <_dtoa_r+0x6ae>
34022442:	9a08      	ldr	r2, [sp, #32]
34022444:	2a00      	cmp	r2, #0
34022446:	f000 80c5 	beq.w	340225d4 <_dtoa_r+0x7fc>
3402244a:	2c00      	cmp	r4, #0
3402244c:	f000 80bf 	beq.w	340225ce <_dtoa_r+0x7f6>
34022450:	4629      	mov	r1, r5
34022452:	4622      	mov	r2, r4
34022454:	4648      	mov	r0, r9
34022456:	930b      	str	r3, [sp, #44]	@ 0x2c
34022458:	f001 f852 	bl	34023500 <__pow5mult>
3402245c:	9a01      	ldr	r2, [sp, #4]
3402245e:	4601      	mov	r1, r0
34022460:	4605      	mov	r5, r0
34022462:	4648      	mov	r0, r9
34022464:	f000 ffa8 	bl	340233b8 <__multiply>
34022468:	9901      	ldr	r1, [sp, #4]
3402246a:	9005      	str	r0, [sp, #20]
3402246c:	4648      	mov	r0, r9
3402246e:	f000 fe8d 	bl	3402318c <_Bfree>
34022472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34022474:	1b1b      	subs	r3, r3, r4
34022476:	f000 80b0 	beq.w	340225da <_dtoa_r+0x802>
3402247a:	461a      	mov	r2, r3
3402247c:	9905      	ldr	r1, [sp, #20]
3402247e:	4648      	mov	r0, r9
34022480:	f001 f83e 	bl	34023500 <__pow5mult>
34022484:	9001      	str	r0, [sp, #4]
34022486:	2101      	movs	r1, #1
34022488:	4648      	mov	r0, r9
3402248a:	f000 ff7f 	bl	3402338c <__i2b>
3402248e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34022490:	4604      	mov	r4, r0
34022492:	2b00      	cmp	r3, #0
34022494:	f000 81da 	beq.w	3402284c <_dtoa_r+0xa74>
34022498:	461a      	mov	r2, r3
3402249a:	4601      	mov	r1, r0
3402249c:	4648      	mov	r0, r9
3402249e:	f001 f82f 	bl	34023500 <__pow5mult>
340224a2:	9b07      	ldr	r3, [sp, #28]
340224a4:	4604      	mov	r4, r0
340224a6:	2b01      	cmp	r3, #1
340224a8:	f300 80a0 	bgt.w	340225ec <_dtoa_r+0x814>
340224ac:	9b02      	ldr	r3, [sp, #8]
340224ae:	2b00      	cmp	r3, #0
340224b0:	f040 8096 	bne.w	340225e0 <_dtoa_r+0x808>
340224b4:	9b03      	ldr	r3, [sp, #12]
340224b6:	f3c3 0213 	ubfx	r2, r3, #0, #20
340224ba:	2a00      	cmp	r2, #0
340224bc:	f040 8092 	bne.w	340225e4 <_dtoa_r+0x80c>
340224c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
340224c4:	0d12      	lsrs	r2, r2, #20
340224c6:	0512      	lsls	r2, r2, #20
340224c8:	2a00      	cmp	r2, #0
340224ca:	f000 808d 	beq.w	340225e8 <_dtoa_r+0x810>
340224ce:	9b04      	ldr	r3, [sp, #16]
340224d0:	3301      	adds	r3, #1
340224d2:	9304      	str	r3, [sp, #16]
340224d4:	9b06      	ldr	r3, [sp, #24]
340224d6:	3301      	adds	r3, #1
340224d8:	9306      	str	r3, [sp, #24]
340224da:	2301      	movs	r3, #1
340224dc:	930b      	str	r3, [sp, #44]	@ 0x2c
340224de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
340224e0:	2b00      	cmp	r3, #0
340224e2:	f000 81b9 	beq.w	34022858 <_dtoa_r+0xa80>
340224e6:	6922      	ldr	r2, [r4, #16]
340224e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
340224ec:	6910      	ldr	r0, [r2, #16]
340224ee:	f000 ff01 	bl	340232f4 <__hi0bits>
340224f2:	f1c0 0020 	rsb	r0, r0, #32
340224f6:	9b06      	ldr	r3, [sp, #24]
340224f8:	4418      	add	r0, r3
340224fa:	f010 001f 	ands.w	r0, r0, #31
340224fe:	f000 8081 	beq.w	34022604 <_dtoa_r+0x82c>
34022502:	f1c0 0220 	rsb	r2, r0, #32
34022506:	2a04      	cmp	r2, #4
34022508:	dd73      	ble.n	340225f2 <_dtoa_r+0x81a>
3402250a:	f1c0 001c 	rsb	r0, r0, #28
3402250e:	9b04      	ldr	r3, [sp, #16]
34022510:	4403      	add	r3, r0
34022512:	4406      	add	r6, r0
34022514:	9304      	str	r3, [sp, #16]
34022516:	9b06      	ldr	r3, [sp, #24]
34022518:	4403      	add	r3, r0
3402251a:	9306      	str	r3, [sp, #24]
3402251c:	9b04      	ldr	r3, [sp, #16]
3402251e:	2b00      	cmp	r3, #0
34022520:	dd05      	ble.n	3402252e <_dtoa_r+0x756>
34022522:	461a      	mov	r2, r3
34022524:	9901      	ldr	r1, [sp, #4]
34022526:	4648      	mov	r0, r9
34022528:	f001 f844 	bl	340235b4 <__lshift>
3402252c:	9001      	str	r0, [sp, #4]
3402252e:	9b06      	ldr	r3, [sp, #24]
34022530:	2b00      	cmp	r3, #0
34022532:	dd05      	ble.n	34022540 <_dtoa_r+0x768>
34022534:	4621      	mov	r1, r4
34022536:	461a      	mov	r2, r3
34022538:	4648      	mov	r0, r9
3402253a:	f001 f83b 	bl	340235b4 <__lshift>
3402253e:	4604      	mov	r4, r0
34022540:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
34022542:	2b00      	cmp	r3, #0
34022544:	d060      	beq.n	34022608 <_dtoa_r+0x830>
34022546:	4621      	mov	r1, r4
34022548:	9801      	ldr	r0, [sp, #4]
3402254a:	f001 f89f 	bl	3402368c <__mcmp>
3402254e:	2800      	cmp	r0, #0
34022550:	da5a      	bge.n	34022608 <_dtoa_r+0x830>
34022552:	f108 33ff 	add.w	r3, r8, #4294967295
34022556:	220a      	movs	r2, #10
34022558:	9901      	ldr	r1, [sp, #4]
3402255a:	4648      	mov	r0, r9
3402255c:	9305      	str	r3, [sp, #20]
3402255e:	2300      	movs	r3, #0
34022560:	f000 fe36 	bl	340231d0 <__multadd>
34022564:	9b08      	ldr	r3, [sp, #32]
34022566:	9001      	str	r0, [sp, #4]
34022568:	2b00      	cmp	r3, #0
3402256a:	f000 8177 	beq.w	3402285c <_dtoa_r+0xa84>
3402256e:	4629      	mov	r1, r5
34022570:	2300      	movs	r3, #0
34022572:	220a      	movs	r2, #10
34022574:	4648      	mov	r0, r9
34022576:	f000 fe2b 	bl	340231d0 <__multadd>
3402257a:	f1bb 0f00 	cmp.w	fp, #0
3402257e:	4605      	mov	r5, r0
34022580:	dc6e      	bgt.n	34022660 <_dtoa_r+0x888>
34022582:	9b07      	ldr	r3, [sp, #28]
34022584:	2b02      	cmp	r3, #2
34022586:	dc48      	bgt.n	3402261a <_dtoa_r+0x842>
34022588:	e06a      	b.n	34022660 <_dtoa_r+0x888>
3402258a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3402258c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
34022590:	e739      	b.n	34022406 <_dtoa_r+0x62e>
34022592:	f10a 34ff 	add.w	r4, sl, #4294967295
34022596:	42a3      	cmp	r3, r4
34022598:	db07      	blt.n	340225aa <_dtoa_r+0x7d2>
3402259a:	f1ba 0f00 	cmp.w	sl, #0
3402259e:	eba3 0404 	sub.w	r4, r3, r4
340225a2:	db0b      	blt.n	340225bc <_dtoa_r+0x7e4>
340225a4:	9e04      	ldr	r6, [sp, #16]
340225a6:	4652      	mov	r2, sl
340225a8:	e72f      	b.n	3402240a <_dtoa_r+0x632>
340225aa:	1ae2      	subs	r2, r4, r3
340225ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
340225ae:	9e04      	ldr	r6, [sp, #16]
340225b0:	4413      	add	r3, r2
340225b2:	4652      	mov	r2, sl
340225b4:	930a      	str	r3, [sp, #40]	@ 0x28
340225b6:	4623      	mov	r3, r4
340225b8:	2400      	movs	r4, #0
340225ba:	e726      	b.n	3402240a <_dtoa_r+0x632>
340225bc:	9a04      	ldr	r2, [sp, #16]
340225be:	eba2 060a 	sub.w	r6, r2, sl
340225c2:	2200      	movs	r2, #0
340225c4:	e721      	b.n	3402240a <_dtoa_r+0x632>
340225c6:	461c      	mov	r4, r3
340225c8:	9e04      	ldr	r6, [sp, #16]
340225ca:	9d08      	ldr	r5, [sp, #32]
340225cc:	e72a      	b.n	34022424 <_dtoa_r+0x64c>
340225ce:	9a01      	ldr	r2, [sp, #4]
340225d0:	9205      	str	r2, [sp, #20]
340225d2:	e752      	b.n	3402247a <_dtoa_r+0x6a2>
340225d4:	461a      	mov	r2, r3
340225d6:	9901      	ldr	r1, [sp, #4]
340225d8:	e751      	b.n	3402247e <_dtoa_r+0x6a6>
340225da:	9b05      	ldr	r3, [sp, #20]
340225dc:	9301      	str	r3, [sp, #4]
340225de:	e752      	b.n	34022486 <_dtoa_r+0x6ae>
340225e0:	2300      	movs	r3, #0
340225e2:	e77b      	b.n	340224dc <_dtoa_r+0x704>
340225e4:	9b02      	ldr	r3, [sp, #8]
340225e6:	e779      	b.n	340224dc <_dtoa_r+0x704>
340225e8:	920b      	str	r2, [sp, #44]	@ 0x2c
340225ea:	e778      	b.n	340224de <_dtoa_r+0x706>
340225ec:	2300      	movs	r3, #0
340225ee:	930b      	str	r3, [sp, #44]	@ 0x2c
340225f0:	e779      	b.n	340224e6 <_dtoa_r+0x70e>
340225f2:	d093      	beq.n	3402251c <_dtoa_r+0x744>
340225f4:	321c      	adds	r2, #28
340225f6:	9b04      	ldr	r3, [sp, #16]
340225f8:	4413      	add	r3, r2
340225fa:	4416      	add	r6, r2
340225fc:	9304      	str	r3, [sp, #16]
340225fe:	9b06      	ldr	r3, [sp, #24]
34022600:	4413      	add	r3, r2
34022602:	e78a      	b.n	3402251a <_dtoa_r+0x742>
34022604:	4602      	mov	r2, r0
34022606:	e7f5      	b.n	340225f4 <_dtoa_r+0x81c>
34022608:	f1ba 0f00 	cmp.w	sl, #0
3402260c:	46d3      	mov	fp, sl
3402260e:	f8cd 8014 	str.w	r8, [sp, #20]
34022612:	dc21      	bgt.n	34022658 <_dtoa_r+0x880>
34022614:	9b07      	ldr	r3, [sp, #28]
34022616:	2b02      	cmp	r3, #2
34022618:	dd1e      	ble.n	34022658 <_dtoa_r+0x880>
3402261a:	f1bb 0f00 	cmp.w	fp, #0
3402261e:	f47f addc 	bne.w	340221da <_dtoa_r+0x402>
34022622:	4621      	mov	r1, r4
34022624:	465b      	mov	r3, fp
34022626:	2205      	movs	r2, #5
34022628:	4648      	mov	r0, r9
3402262a:	f000 fdd1 	bl	340231d0 <__multadd>
3402262e:	4601      	mov	r1, r0
34022630:	4604      	mov	r4, r0
34022632:	9801      	ldr	r0, [sp, #4]
34022634:	f001 f82a 	bl	3402368c <__mcmp>
34022638:	2800      	cmp	r0, #0
3402263a:	f77f adce 	ble.w	340221da <_dtoa_r+0x402>
3402263e:	2331      	movs	r3, #49	@ 0x31
34022640:	463e      	mov	r6, r7
34022642:	f806 3b01 	strb.w	r3, [r6], #1
34022646:	9b05      	ldr	r3, [sp, #20]
34022648:	3301      	adds	r3, #1
3402264a:	9305      	str	r3, [sp, #20]
3402264c:	e5c9      	b.n	340221e2 <_dtoa_r+0x40a>
3402264e:	4654      	mov	r4, sl
34022650:	f8cd 8014 	str.w	r8, [sp, #20]
34022654:	4625      	mov	r5, r4
34022656:	e7f2      	b.n	3402263e <_dtoa_r+0x866>
34022658:	9b08      	ldr	r3, [sp, #32]
3402265a:	2b00      	cmp	r3, #0
3402265c:	f000 8102 	beq.w	34022864 <_dtoa_r+0xa8c>
34022660:	2e00      	cmp	r6, #0
34022662:	dd05      	ble.n	34022670 <_dtoa_r+0x898>
34022664:	4629      	mov	r1, r5
34022666:	4632      	mov	r2, r6
34022668:	4648      	mov	r0, r9
3402266a:	f000 ffa3 	bl	340235b4 <__lshift>
3402266e:	4605      	mov	r5, r0
34022670:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34022672:	2b00      	cmp	r3, #0
34022674:	d058      	beq.n	34022728 <_dtoa_r+0x950>
34022676:	6869      	ldr	r1, [r5, #4]
34022678:	4648      	mov	r0, r9
3402267a:	f000 fd47 	bl	3402310c <_Balloc>
3402267e:	4606      	mov	r6, r0
34022680:	b928      	cbnz	r0, 3402268e <_dtoa_r+0x8b6>
34022682:	4b82      	ldr	r3, [pc, #520]	@ (3402288c <_dtoa_r+0xab4>)
34022684:	4602      	mov	r2, r0
34022686:	f240 21ef 	movw	r1, #751	@ 0x2ef
3402268a:	f7ff bbbe 	b.w	34021e0a <_dtoa_r+0x32>
3402268e:	692a      	ldr	r2, [r5, #16]
34022690:	f105 010c 	add.w	r1, r5, #12
34022694:	300c      	adds	r0, #12
34022696:	3202      	adds	r2, #2
34022698:	0092      	lsls	r2, r2, #2
3402269a:	f7ff faea 	bl	34021c72 <memcpy>
3402269e:	2201      	movs	r2, #1
340226a0:	4631      	mov	r1, r6
340226a2:	4648      	mov	r0, r9
340226a4:	f000 ff86 	bl	340235b4 <__lshift>
340226a8:	1c7b      	adds	r3, r7, #1
340226aa:	46a8      	mov	r8, r5
340226ac:	4605      	mov	r5, r0
340226ae:	9304      	str	r3, [sp, #16]
340226b0:	eb07 030b 	add.w	r3, r7, fp
340226b4:	9309      	str	r3, [sp, #36]	@ 0x24
340226b6:	9b02      	ldr	r3, [sp, #8]
340226b8:	f003 0301 	and.w	r3, r3, #1
340226bc:	9308      	str	r3, [sp, #32]
340226be:	9b04      	ldr	r3, [sp, #16]
340226c0:	4621      	mov	r1, r4
340226c2:	9801      	ldr	r0, [sp, #4]
340226c4:	f103 3bff 	add.w	fp, r3, #4294967295
340226c8:	f7ff faf7 	bl	34021cba <quorem>
340226cc:	4641      	mov	r1, r8
340226ce:	9002      	str	r0, [sp, #8]
340226d0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
340226d4:	9801      	ldr	r0, [sp, #4]
340226d6:	f000 ffd9 	bl	3402368c <__mcmp>
340226da:	462a      	mov	r2, r5
340226dc:	9006      	str	r0, [sp, #24]
340226de:	4621      	mov	r1, r4
340226e0:	4648      	mov	r0, r9
340226e2:	f000 ffef 	bl	340236c4 <__mdiff>
340226e6:	68c2      	ldr	r2, [r0, #12]
340226e8:	4606      	mov	r6, r0
340226ea:	b9fa      	cbnz	r2, 3402272c <_dtoa_r+0x954>
340226ec:	4601      	mov	r1, r0
340226ee:	9801      	ldr	r0, [sp, #4]
340226f0:	f000 ffcc 	bl	3402368c <__mcmp>
340226f4:	4602      	mov	r2, r0
340226f6:	4631      	mov	r1, r6
340226f8:	4648      	mov	r0, r9
340226fa:	920a      	str	r2, [sp, #40]	@ 0x28
340226fc:	f000 fd46 	bl	3402318c <_Bfree>
34022700:	9b07      	ldr	r3, [sp, #28]
34022702:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
34022704:	9e04      	ldr	r6, [sp, #16]
34022706:	ea42 0103 	orr.w	r1, r2, r3
3402270a:	9b08      	ldr	r3, [sp, #32]
3402270c:	4319      	orrs	r1, r3
3402270e:	d10f      	bne.n	34022730 <_dtoa_r+0x958>
34022710:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
34022714:	d028      	beq.n	34022768 <_dtoa_r+0x990>
34022716:	9b06      	ldr	r3, [sp, #24]
34022718:	2b00      	cmp	r3, #0
3402271a:	dd02      	ble.n	34022722 <_dtoa_r+0x94a>
3402271c:	9b02      	ldr	r3, [sp, #8]
3402271e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
34022722:	f88b a000 	strb.w	sl, [fp]
34022726:	e55e      	b.n	340221e6 <_dtoa_r+0x40e>
34022728:	4628      	mov	r0, r5
3402272a:	e7bd      	b.n	340226a8 <_dtoa_r+0x8d0>
3402272c:	2201      	movs	r2, #1
3402272e:	e7e2      	b.n	340226f6 <_dtoa_r+0x91e>
34022730:	9b06      	ldr	r3, [sp, #24]
34022732:	2b00      	cmp	r3, #0
34022734:	db04      	blt.n	34022740 <_dtoa_r+0x968>
34022736:	9907      	ldr	r1, [sp, #28]
34022738:	430b      	orrs	r3, r1
3402273a:	9908      	ldr	r1, [sp, #32]
3402273c:	430b      	orrs	r3, r1
3402273e:	d120      	bne.n	34022782 <_dtoa_r+0x9aa>
34022740:	2a00      	cmp	r2, #0
34022742:	ddee      	ble.n	34022722 <_dtoa_r+0x94a>
34022744:	2201      	movs	r2, #1
34022746:	9901      	ldr	r1, [sp, #4]
34022748:	4648      	mov	r0, r9
3402274a:	f000 ff33 	bl	340235b4 <__lshift>
3402274e:	4621      	mov	r1, r4
34022750:	9001      	str	r0, [sp, #4]
34022752:	f000 ff9b 	bl	3402368c <__mcmp>
34022756:	2800      	cmp	r0, #0
34022758:	dc03      	bgt.n	34022762 <_dtoa_r+0x98a>
3402275a:	d1e2      	bne.n	34022722 <_dtoa_r+0x94a>
3402275c:	f01a 0f01 	tst.w	sl, #1
34022760:	d0df      	beq.n	34022722 <_dtoa_r+0x94a>
34022762:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
34022766:	d1d9      	bne.n	3402271c <_dtoa_r+0x944>
34022768:	2339      	movs	r3, #57	@ 0x39
3402276a:	f88b 3000 	strb.w	r3, [fp]
3402276e:	4633      	mov	r3, r6
34022770:	461e      	mov	r6, r3
34022772:	3b01      	subs	r3, #1
34022774:	f816 2c01 	ldrb.w	r2, [r6, #-1]
34022778:	2a39      	cmp	r2, #57	@ 0x39
3402277a:	d052      	beq.n	34022822 <_dtoa_r+0xa4a>
3402277c:	3201      	adds	r2, #1
3402277e:	701a      	strb	r2, [r3, #0]
34022780:	e531      	b.n	340221e6 <_dtoa_r+0x40e>
34022782:	2a00      	cmp	r2, #0
34022784:	dd07      	ble.n	34022796 <_dtoa_r+0x9be>
34022786:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3402278a:	d0ed      	beq.n	34022768 <_dtoa_r+0x990>
3402278c:	f10a 0301 	add.w	r3, sl, #1
34022790:	f88b 3000 	strb.w	r3, [fp]
34022794:	e527      	b.n	340221e6 <_dtoa_r+0x40e>
34022796:	9b04      	ldr	r3, [sp, #16]
34022798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3402279a:	f803 ac01 	strb.w	sl, [r3, #-1]
3402279e:	4293      	cmp	r3, r2
340227a0:	d029      	beq.n	340227f6 <_dtoa_r+0xa1e>
340227a2:	2300      	movs	r3, #0
340227a4:	220a      	movs	r2, #10
340227a6:	9901      	ldr	r1, [sp, #4]
340227a8:	4648      	mov	r0, r9
340227aa:	f000 fd11 	bl	340231d0 <__multadd>
340227ae:	45a8      	cmp	r8, r5
340227b0:	9001      	str	r0, [sp, #4]
340227b2:	f04f 0300 	mov.w	r3, #0
340227b6:	f04f 020a 	mov.w	r2, #10
340227ba:	4641      	mov	r1, r8
340227bc:	4648      	mov	r0, r9
340227be:	d107      	bne.n	340227d0 <_dtoa_r+0x9f8>
340227c0:	f000 fd06 	bl	340231d0 <__multadd>
340227c4:	4680      	mov	r8, r0
340227c6:	4605      	mov	r5, r0
340227c8:	9b04      	ldr	r3, [sp, #16]
340227ca:	3301      	adds	r3, #1
340227cc:	9304      	str	r3, [sp, #16]
340227ce:	e776      	b.n	340226be <_dtoa_r+0x8e6>
340227d0:	f000 fcfe 	bl	340231d0 <__multadd>
340227d4:	4629      	mov	r1, r5
340227d6:	4680      	mov	r8, r0
340227d8:	2300      	movs	r3, #0
340227da:	220a      	movs	r2, #10
340227dc:	4648      	mov	r0, r9
340227de:	f000 fcf7 	bl	340231d0 <__multadd>
340227e2:	4605      	mov	r5, r0
340227e4:	e7f0      	b.n	340227c8 <_dtoa_r+0x9f0>
340227e6:	f1bb 0f00 	cmp.w	fp, #0
340227ea:	f04f 0800 	mov.w	r8, #0
340227ee:	bfcc      	ite	gt
340227f0:	465e      	movgt	r6, fp
340227f2:	2601      	movle	r6, #1
340227f4:	443e      	add	r6, r7
340227f6:	2201      	movs	r2, #1
340227f8:	9901      	ldr	r1, [sp, #4]
340227fa:	4648      	mov	r0, r9
340227fc:	f000 feda 	bl	340235b4 <__lshift>
34022800:	4621      	mov	r1, r4
34022802:	9001      	str	r0, [sp, #4]
34022804:	f000 ff42 	bl	3402368c <__mcmp>
34022808:	2800      	cmp	r0, #0
3402280a:	dcb0      	bgt.n	3402276e <_dtoa_r+0x996>
3402280c:	d102      	bne.n	34022814 <_dtoa_r+0xa3c>
3402280e:	f01a 0f01 	tst.w	sl, #1
34022812:	d1ac      	bne.n	3402276e <_dtoa_r+0x996>
34022814:	4633      	mov	r3, r6
34022816:	461e      	mov	r6, r3
34022818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3402281c:	2a30      	cmp	r2, #48	@ 0x30
3402281e:	d0fa      	beq.n	34022816 <_dtoa_r+0xa3e>
34022820:	e4e1      	b.n	340221e6 <_dtoa_r+0x40e>
34022822:	429f      	cmp	r7, r3
34022824:	d1a4      	bne.n	34022770 <_dtoa_r+0x998>
34022826:	9b05      	ldr	r3, [sp, #20]
34022828:	3301      	adds	r3, #1
3402282a:	9305      	str	r3, [sp, #20]
3402282c:	2331      	movs	r3, #49	@ 0x31
3402282e:	703b      	strb	r3, [r7, #0]
34022830:	e4d9      	b.n	340221e6 <_dtoa_r+0x40e>
34022832:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34022834:	4f16      	ldr	r7, [pc, #88]	@ (34022890 <_dtoa_r+0xab8>)
34022836:	b11b      	cbz	r3, 34022840 <_dtoa_r+0xa68>
34022838:	f107 0308 	add.w	r3, r7, #8
3402283c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3402283e:	6013      	str	r3, [r2, #0]
34022840:	4638      	mov	r0, r7
34022842:	b011      	add	sp, #68	@ 0x44
34022844:	ecbd 8b02 	vpop	{d8}
34022848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402284c:	9b07      	ldr	r3, [sp, #28]
3402284e:	2b01      	cmp	r3, #1
34022850:	f77f ae2c 	ble.w	340224ac <_dtoa_r+0x6d4>
34022854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34022856:	930b      	str	r3, [sp, #44]	@ 0x2c
34022858:	2001      	movs	r0, #1
3402285a:	e64c      	b.n	340224f6 <_dtoa_r+0x71e>
3402285c:	f1bb 0f00 	cmp.w	fp, #0
34022860:	f77f aed8 	ble.w	34022614 <_dtoa_r+0x83c>
34022864:	463e      	mov	r6, r7
34022866:	4621      	mov	r1, r4
34022868:	9801      	ldr	r0, [sp, #4]
3402286a:	f7ff fa26 	bl	34021cba <quorem>
3402286e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
34022872:	f806 ab01 	strb.w	sl, [r6], #1
34022876:	1bf2      	subs	r2, r6, r7
34022878:	4593      	cmp	fp, r2
3402287a:	ddb4      	ble.n	340227e6 <_dtoa_r+0xa0e>
3402287c:	2300      	movs	r3, #0
3402287e:	220a      	movs	r2, #10
34022880:	9901      	ldr	r1, [sp, #4]
34022882:	4648      	mov	r0, r9
34022884:	f000 fca4 	bl	340231d0 <__multadd>
34022888:	9001      	str	r0, [sp, #4]
3402288a:	e7ec      	b.n	34022866 <_dtoa_r+0xa8e>
3402288c:	3403062e 	.word	0x3403062e
34022890:	340305b2 	.word	0x340305b2

34022894 <_free_r>:
34022894:	b538      	push	{r3, r4, r5, lr}
34022896:	4605      	mov	r5, r0
34022898:	2900      	cmp	r1, #0
3402289a:	d041      	beq.n	34022920 <_free_r+0x8c>
3402289c:	f851 3c04 	ldr.w	r3, [r1, #-4]
340228a0:	1f0c      	subs	r4, r1, #4
340228a2:	2b00      	cmp	r3, #0
340228a4:	bfb8      	it	lt
340228a6:	18e4      	addlt	r4, r4, r3
340228a8:	f7df fb8c 	bl	34001fc4 <__malloc_lock>
340228ac:	4a1d      	ldr	r2, [pc, #116]	@ (34022924 <_free_r+0x90>)
340228ae:	6813      	ldr	r3, [r2, #0]
340228b0:	b933      	cbnz	r3, 340228c0 <_free_r+0x2c>
340228b2:	6063      	str	r3, [r4, #4]
340228b4:	6014      	str	r4, [r2, #0]
340228b6:	4628      	mov	r0, r5
340228b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
340228bc:	f7df bba8 	b.w	34002010 <__malloc_unlock>
340228c0:	42a3      	cmp	r3, r4
340228c2:	d908      	bls.n	340228d6 <_free_r+0x42>
340228c4:	6820      	ldr	r0, [r4, #0]
340228c6:	1821      	adds	r1, r4, r0
340228c8:	428b      	cmp	r3, r1
340228ca:	bf01      	itttt	eq
340228cc:	6819      	ldreq	r1, [r3, #0]
340228ce:	685b      	ldreq	r3, [r3, #4]
340228d0:	1809      	addeq	r1, r1, r0
340228d2:	6021      	streq	r1, [r4, #0]
340228d4:	e7ed      	b.n	340228b2 <_free_r+0x1e>
340228d6:	461a      	mov	r2, r3
340228d8:	685b      	ldr	r3, [r3, #4]
340228da:	b10b      	cbz	r3, 340228e0 <_free_r+0x4c>
340228dc:	42a3      	cmp	r3, r4
340228de:	d9fa      	bls.n	340228d6 <_free_r+0x42>
340228e0:	6811      	ldr	r1, [r2, #0]
340228e2:	1850      	adds	r0, r2, r1
340228e4:	42a0      	cmp	r0, r4
340228e6:	d10b      	bne.n	34022900 <_free_r+0x6c>
340228e8:	6820      	ldr	r0, [r4, #0]
340228ea:	4401      	add	r1, r0
340228ec:	1850      	adds	r0, r2, r1
340228ee:	6011      	str	r1, [r2, #0]
340228f0:	4283      	cmp	r3, r0
340228f2:	d1e0      	bne.n	340228b6 <_free_r+0x22>
340228f4:	6818      	ldr	r0, [r3, #0]
340228f6:	685b      	ldr	r3, [r3, #4]
340228f8:	4408      	add	r0, r1
340228fa:	6053      	str	r3, [r2, #4]
340228fc:	6010      	str	r0, [r2, #0]
340228fe:	e7da      	b.n	340228b6 <_free_r+0x22>
34022900:	d902      	bls.n	34022908 <_free_r+0x74>
34022902:	230c      	movs	r3, #12
34022904:	602b      	str	r3, [r5, #0]
34022906:	e7d6      	b.n	340228b6 <_free_r+0x22>
34022908:	6820      	ldr	r0, [r4, #0]
3402290a:	1821      	adds	r1, r4, r0
3402290c:	428b      	cmp	r3, r1
3402290e:	bf02      	ittt	eq
34022910:	6819      	ldreq	r1, [r3, #0]
34022912:	685b      	ldreq	r3, [r3, #4]
34022914:	1809      	addeq	r1, r1, r0
34022916:	6063      	str	r3, [r4, #4]
34022918:	bf08      	it	eq
3402291a:	6021      	streq	r1, [r4, #0]
3402291c:	6054      	str	r4, [r2, #4]
3402291e:	e7ca      	b.n	340228b6 <_free_r+0x22>
34022920:	bd38      	pop	{r3, r4, r5, pc}
34022922:	bf00      	nop
34022924:	340e5d34 	.word	0x340e5d34

34022928 <rshift>:
34022928:	6903      	ldr	r3, [r0, #16]
3402292a:	114a      	asrs	r2, r1, #5
3402292c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
34022930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34022934:	f100 0414 	add.w	r4, r0, #20
34022938:	dd45      	ble.n	340229c6 <rshift+0x9e>
3402293a:	f011 011f 	ands.w	r1, r1, #31
3402293e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
34022942:	eb04 0582 	add.w	r5, r4, r2, lsl #2
34022946:	d10c      	bne.n	34022962 <rshift+0x3a>
34022948:	f100 0710 	add.w	r7, r0, #16
3402294c:	4629      	mov	r1, r5
3402294e:	42b1      	cmp	r1, r6
34022950:	d334      	bcc.n	340229bc <rshift+0x94>
34022952:	1a9b      	subs	r3, r3, r2
34022954:	1eea      	subs	r2, r5, #3
34022956:	009b      	lsls	r3, r3, #2
34022958:	4296      	cmp	r6, r2
3402295a:	bf38      	it	cc
3402295c:	2300      	movcc	r3, #0
3402295e:	4423      	add	r3, r4
34022960:	e015      	b.n	3402298e <rshift+0x66>
34022962:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
34022966:	f1c1 0820 	rsb	r8, r1, #32
3402296a:	f105 0e04 	add.w	lr, r5, #4
3402296e:	46a1      	mov	r9, r4
34022970:	40cf      	lsrs	r7, r1
34022972:	4576      	cmp	r6, lr
34022974:	46f4      	mov	ip, lr
34022976:	d815      	bhi.n	340229a4 <rshift+0x7c>
34022978:	1a9a      	subs	r2, r3, r2
3402297a:	3501      	adds	r5, #1
3402297c:	0092      	lsls	r2, r2, #2
3402297e:	3a04      	subs	r2, #4
34022980:	42ae      	cmp	r6, r5
34022982:	bf38      	it	cc
34022984:	2200      	movcc	r2, #0
34022986:	18a3      	adds	r3, r4, r2
34022988:	50a7      	str	r7, [r4, r2]
3402298a:	b107      	cbz	r7, 3402298e <rshift+0x66>
3402298c:	3304      	adds	r3, #4
3402298e:	1b1a      	subs	r2, r3, r4
34022990:	42a3      	cmp	r3, r4
34022992:	ea4f 02a2 	mov.w	r2, r2, asr #2
34022996:	bf08      	it	eq
34022998:	2300      	moveq	r3, #0
3402299a:	6102      	str	r2, [r0, #16]
3402299c:	bf08      	it	eq
3402299e:	6143      	streq	r3, [r0, #20]
340229a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
340229a4:	f8dc c000 	ldr.w	ip, [ip]
340229a8:	fa0c fc08 	lsl.w	ip, ip, r8
340229ac:	ea4c 0707 	orr.w	r7, ip, r7
340229b0:	f849 7b04 	str.w	r7, [r9], #4
340229b4:	f85e 7b04 	ldr.w	r7, [lr], #4
340229b8:	40cf      	lsrs	r7, r1
340229ba:	e7da      	b.n	34022972 <rshift+0x4a>
340229bc:	f851 cb04 	ldr.w	ip, [r1], #4
340229c0:	f847 cf04 	str.w	ip, [r7, #4]!
340229c4:	e7c3      	b.n	3402294e <rshift+0x26>
340229c6:	4623      	mov	r3, r4
340229c8:	e7e1      	b.n	3402298e <rshift+0x66>

340229ca <__hexdig_fun>:
340229ca:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
340229ce:	2b09      	cmp	r3, #9
340229d0:	d802      	bhi.n	340229d8 <__hexdig_fun+0xe>
340229d2:	3820      	subs	r0, #32
340229d4:	b2c0      	uxtb	r0, r0
340229d6:	4770      	bx	lr
340229d8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
340229dc:	2b05      	cmp	r3, #5
340229de:	d801      	bhi.n	340229e4 <__hexdig_fun+0x1a>
340229e0:	3847      	subs	r0, #71	@ 0x47
340229e2:	e7f7      	b.n	340229d4 <__hexdig_fun+0xa>
340229e4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
340229e8:	2b05      	cmp	r3, #5
340229ea:	d801      	bhi.n	340229f0 <__hexdig_fun+0x26>
340229ec:	3827      	subs	r0, #39	@ 0x27
340229ee:	e7f1      	b.n	340229d4 <__hexdig_fun+0xa>
340229f0:	2000      	movs	r0, #0
340229f2:	4770      	bx	lr

340229f4 <__gethex>:
340229f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340229f8:	b085      	sub	sp, #20
340229fa:	468a      	mov	sl, r1
340229fc:	4690      	mov	r8, r2
340229fe:	9302      	str	r3, [sp, #8]
34022a00:	680b      	ldr	r3, [r1, #0]
34022a02:	9001      	str	r0, [sp, #4]
34022a04:	1c9c      	adds	r4, r3, #2
34022a06:	46a1      	mov	r9, r4
34022a08:	f814 0b01 	ldrb.w	r0, [r4], #1
34022a0c:	2830      	cmp	r0, #48	@ 0x30
34022a0e:	d0fa      	beq.n	34022a06 <__gethex+0x12>
34022a10:	eba9 0303 	sub.w	r3, r9, r3
34022a14:	f1a3 0b02 	sub.w	fp, r3, #2
34022a18:	f7ff ffd7 	bl	340229ca <__hexdig_fun>
34022a1c:	4605      	mov	r5, r0
34022a1e:	2800      	cmp	r0, #0
34022a20:	d166      	bne.n	34022af0 <__gethex+0xfc>
34022a22:	2201      	movs	r2, #1
34022a24:	499e      	ldr	r1, [pc, #632]	@ (34022ca0 <__gethex+0x2ac>)
34022a26:	4648      	mov	r0, r9
34022a28:	f7ff f86c 	bl	34021b04 <strncmp>
34022a2c:	4607      	mov	r7, r0
34022a2e:	2800      	cmp	r0, #0
34022a30:	d165      	bne.n	34022afe <__gethex+0x10a>
34022a32:	f899 0001 	ldrb.w	r0, [r9, #1]
34022a36:	4626      	mov	r6, r4
34022a38:	f7ff ffc7 	bl	340229ca <__hexdig_fun>
34022a3c:	2800      	cmp	r0, #0
34022a3e:	d060      	beq.n	34022b02 <__gethex+0x10e>
34022a40:	4623      	mov	r3, r4
34022a42:	7818      	ldrb	r0, [r3, #0]
34022a44:	4699      	mov	r9, r3
34022a46:	3301      	adds	r3, #1
34022a48:	2830      	cmp	r0, #48	@ 0x30
34022a4a:	d0fa      	beq.n	34022a42 <__gethex+0x4e>
34022a4c:	f7ff ffbd 	bl	340229ca <__hexdig_fun>
34022a50:	fab0 f580 	clz	r5, r0
34022a54:	f04f 0b01 	mov.w	fp, #1
34022a58:	096d      	lsrs	r5, r5, #5
34022a5a:	464a      	mov	r2, r9
34022a5c:	4616      	mov	r6, r2
34022a5e:	3201      	adds	r2, #1
34022a60:	7830      	ldrb	r0, [r6, #0]
34022a62:	f7ff ffb2 	bl	340229ca <__hexdig_fun>
34022a66:	2800      	cmp	r0, #0
34022a68:	d1f8      	bne.n	34022a5c <__gethex+0x68>
34022a6a:	2201      	movs	r2, #1
34022a6c:	498c      	ldr	r1, [pc, #560]	@ (34022ca0 <__gethex+0x2ac>)
34022a6e:	4630      	mov	r0, r6
34022a70:	f7ff f848 	bl	34021b04 <strncmp>
34022a74:	2800      	cmp	r0, #0
34022a76:	d13e      	bne.n	34022af6 <__gethex+0x102>
34022a78:	b944      	cbnz	r4, 34022a8c <__gethex+0x98>
34022a7a:	1c74      	adds	r4, r6, #1
34022a7c:	4622      	mov	r2, r4
34022a7e:	4616      	mov	r6, r2
34022a80:	3201      	adds	r2, #1
34022a82:	7830      	ldrb	r0, [r6, #0]
34022a84:	f7ff ffa1 	bl	340229ca <__hexdig_fun>
34022a88:	2800      	cmp	r0, #0
34022a8a:	d1f8      	bne.n	34022a7e <__gethex+0x8a>
34022a8c:	1ba4      	subs	r4, r4, r6
34022a8e:	00a7      	lsls	r7, r4, #2
34022a90:	7833      	ldrb	r3, [r6, #0]
34022a92:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
34022a96:	2b50      	cmp	r3, #80	@ 0x50
34022a98:	d13d      	bne.n	34022b16 <__gethex+0x122>
34022a9a:	7873      	ldrb	r3, [r6, #1]
34022a9c:	2b2b      	cmp	r3, #43	@ 0x2b
34022a9e:	d032      	beq.n	34022b06 <__gethex+0x112>
34022aa0:	2b2d      	cmp	r3, #45	@ 0x2d
34022aa2:	d033      	beq.n	34022b0c <__gethex+0x118>
34022aa4:	1c71      	adds	r1, r6, #1
34022aa6:	2400      	movs	r4, #0
34022aa8:	7808      	ldrb	r0, [r1, #0]
34022aaa:	f7ff ff8e 	bl	340229ca <__hexdig_fun>
34022aae:	1e43      	subs	r3, r0, #1
34022ab0:	b2db      	uxtb	r3, r3
34022ab2:	2b18      	cmp	r3, #24
34022ab4:	d82f      	bhi.n	34022b16 <__gethex+0x122>
34022ab6:	f1a0 0210 	sub.w	r2, r0, #16
34022aba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
34022abe:	f7ff ff84 	bl	340229ca <__hexdig_fun>
34022ac2:	f100 3cff 	add.w	ip, r0, #4294967295
34022ac6:	230a      	movs	r3, #10
34022ac8:	fa5f fc8c 	uxtb.w	ip, ip
34022acc:	f1bc 0f18 	cmp.w	ip, #24
34022ad0:	d91e      	bls.n	34022b10 <__gethex+0x11c>
34022ad2:	b104      	cbz	r4, 34022ad6 <__gethex+0xe2>
34022ad4:	4252      	negs	r2, r2
34022ad6:	4417      	add	r7, r2
34022ad8:	f8ca 1000 	str.w	r1, [sl]
34022adc:	b1ed      	cbz	r5, 34022b1a <__gethex+0x126>
34022ade:	f1bb 0f00 	cmp.w	fp, #0
34022ae2:	bf0c      	ite	eq
34022ae4:	2506      	moveq	r5, #6
34022ae6:	2500      	movne	r5, #0
34022ae8:	4628      	mov	r0, r5
34022aea:	b005      	add	sp, #20
34022aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34022af0:	2500      	movs	r5, #0
34022af2:	462c      	mov	r4, r5
34022af4:	e7b1      	b.n	34022a5a <__gethex+0x66>
34022af6:	2c00      	cmp	r4, #0
34022af8:	d1c8      	bne.n	34022a8c <__gethex+0x98>
34022afa:	4627      	mov	r7, r4
34022afc:	e7c8      	b.n	34022a90 <__gethex+0x9c>
34022afe:	464e      	mov	r6, r9
34022b00:	462f      	mov	r7, r5
34022b02:	2501      	movs	r5, #1
34022b04:	e7c4      	b.n	34022a90 <__gethex+0x9c>
34022b06:	2400      	movs	r4, #0
34022b08:	1cb1      	adds	r1, r6, #2
34022b0a:	e7cd      	b.n	34022aa8 <__gethex+0xb4>
34022b0c:	2401      	movs	r4, #1
34022b0e:	e7fb      	b.n	34022b08 <__gethex+0x114>
34022b10:	fb03 0002 	mla	r0, r3, r2, r0
34022b14:	e7cf      	b.n	34022ab6 <__gethex+0xc2>
34022b16:	4631      	mov	r1, r6
34022b18:	e7de      	b.n	34022ad8 <__gethex+0xe4>
34022b1a:	eba6 0309 	sub.w	r3, r6, r9
34022b1e:	4629      	mov	r1, r5
34022b20:	3b01      	subs	r3, #1
34022b22:	2b07      	cmp	r3, #7
34022b24:	dc0a      	bgt.n	34022b3c <__gethex+0x148>
34022b26:	9801      	ldr	r0, [sp, #4]
34022b28:	f000 faf0 	bl	3402310c <_Balloc>
34022b2c:	4604      	mov	r4, r0
34022b2e:	b940      	cbnz	r0, 34022b42 <__gethex+0x14e>
34022b30:	4b5c      	ldr	r3, [pc, #368]	@ (34022ca4 <__gethex+0x2b0>)
34022b32:	4602      	mov	r2, r0
34022b34:	21e4      	movs	r1, #228	@ 0xe4
34022b36:	485c      	ldr	r0, [pc, #368]	@ (34022ca8 <__gethex+0x2b4>)
34022b38:	f7fc ff66 	bl	3401fa08 <__assert_func>
34022b3c:	3101      	adds	r1, #1
34022b3e:	105b      	asrs	r3, r3, #1
34022b40:	e7ef      	b.n	34022b22 <__gethex+0x12e>
34022b42:	f100 0a14 	add.w	sl, r0, #20
34022b46:	2300      	movs	r3, #0
34022b48:	4655      	mov	r5, sl
34022b4a:	469b      	mov	fp, r3
34022b4c:	45b1      	cmp	r9, r6
34022b4e:	d337      	bcc.n	34022bc0 <__gethex+0x1cc>
34022b50:	f845 bb04 	str.w	fp, [r5], #4
34022b54:	eba5 050a 	sub.w	r5, r5, sl
34022b58:	4658      	mov	r0, fp
34022b5a:	10ad      	asrs	r5, r5, #2
34022b5c:	6125      	str	r5, [r4, #16]
34022b5e:	016d      	lsls	r5, r5, #5
34022b60:	f000 fbc8 	bl	340232f4 <__hi0bits>
34022b64:	f8d8 6000 	ldr.w	r6, [r8]
34022b68:	1a2d      	subs	r5, r5, r0
34022b6a:	42b5      	cmp	r5, r6
34022b6c:	dd54      	ble.n	34022c18 <__gethex+0x224>
34022b6e:	1bad      	subs	r5, r5, r6
34022b70:	4620      	mov	r0, r4
34022b72:	4629      	mov	r1, r5
34022b74:	f000 ff5c 	bl	34023a30 <__any_on>
34022b78:	4681      	mov	r9, r0
34022b7a:	b178      	cbz	r0, 34022b9c <__gethex+0x1a8>
34022b7c:	1e6b      	subs	r3, r5, #1
34022b7e:	f04f 0901 	mov.w	r9, #1
34022b82:	1159      	asrs	r1, r3, #5
34022b84:	f003 021f 	and.w	r2, r3, #31
34022b88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
34022b8c:	fa09 f202 	lsl.w	r2, r9, r2
34022b90:	420a      	tst	r2, r1
34022b92:	d003      	beq.n	34022b9c <__gethex+0x1a8>
34022b94:	454b      	cmp	r3, r9
34022b96:	dc36      	bgt.n	34022c06 <__gethex+0x212>
34022b98:	f04f 0902 	mov.w	r9, #2
34022b9c:	442f      	add	r7, r5
34022b9e:	4629      	mov	r1, r5
34022ba0:	4620      	mov	r0, r4
34022ba2:	f7ff fec1 	bl	34022928 <rshift>
34022ba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
34022baa:	42bb      	cmp	r3, r7
34022bac:	da42      	bge.n	34022c34 <__gethex+0x240>
34022bae:	4621      	mov	r1, r4
34022bb0:	9801      	ldr	r0, [sp, #4]
34022bb2:	f000 faeb 	bl	3402318c <_Bfree>
34022bb6:	2300      	movs	r3, #0
34022bb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34022bba:	25a3      	movs	r5, #163	@ 0xa3
34022bbc:	6013      	str	r3, [r2, #0]
34022bbe:	e793      	b.n	34022ae8 <__gethex+0xf4>
34022bc0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
34022bc4:	2a2e      	cmp	r2, #46	@ 0x2e
34022bc6:	d012      	beq.n	34022bee <__gethex+0x1fa>
34022bc8:	2b20      	cmp	r3, #32
34022bca:	d104      	bne.n	34022bd6 <__gethex+0x1e2>
34022bcc:	f845 bb04 	str.w	fp, [r5], #4
34022bd0:	f04f 0b00 	mov.w	fp, #0
34022bd4:	465b      	mov	r3, fp
34022bd6:	7830      	ldrb	r0, [r6, #0]
34022bd8:	9303      	str	r3, [sp, #12]
34022bda:	f7ff fef6 	bl	340229ca <__hexdig_fun>
34022bde:	9b03      	ldr	r3, [sp, #12]
34022be0:	f000 000f 	and.w	r0, r0, #15
34022be4:	4098      	lsls	r0, r3
34022be6:	3304      	adds	r3, #4
34022be8:	ea4b 0b00 	orr.w	fp, fp, r0
34022bec:	e7ae      	b.n	34022b4c <__gethex+0x158>
34022bee:	45b1      	cmp	r9, r6
34022bf0:	d8ea      	bhi.n	34022bc8 <__gethex+0x1d4>
34022bf2:	2201      	movs	r2, #1
34022bf4:	492a      	ldr	r1, [pc, #168]	@ (34022ca0 <__gethex+0x2ac>)
34022bf6:	4630      	mov	r0, r6
34022bf8:	9303      	str	r3, [sp, #12]
34022bfa:	f7fe ff83 	bl	34021b04 <strncmp>
34022bfe:	9b03      	ldr	r3, [sp, #12]
34022c00:	2800      	cmp	r0, #0
34022c02:	d1e1      	bne.n	34022bc8 <__gethex+0x1d4>
34022c04:	e7a2      	b.n	34022b4c <__gethex+0x158>
34022c06:	1ea9      	subs	r1, r5, #2
34022c08:	4620      	mov	r0, r4
34022c0a:	f000 ff11 	bl	34023a30 <__any_on>
34022c0e:	2800      	cmp	r0, #0
34022c10:	d0c2      	beq.n	34022b98 <__gethex+0x1a4>
34022c12:	f04f 0903 	mov.w	r9, #3
34022c16:	e7c1      	b.n	34022b9c <__gethex+0x1a8>
34022c18:	da09      	bge.n	34022c2e <__gethex+0x23a>
34022c1a:	1b75      	subs	r5, r6, r5
34022c1c:	4621      	mov	r1, r4
34022c1e:	9801      	ldr	r0, [sp, #4]
34022c20:	462a      	mov	r2, r5
34022c22:	1b7f      	subs	r7, r7, r5
34022c24:	f000 fcc6 	bl	340235b4 <__lshift>
34022c28:	4604      	mov	r4, r0
34022c2a:	f100 0a14 	add.w	sl, r0, #20
34022c2e:	f04f 0900 	mov.w	r9, #0
34022c32:	e7b8      	b.n	34022ba6 <__gethex+0x1b2>
34022c34:	f8d8 5004 	ldr.w	r5, [r8, #4]
34022c38:	42bd      	cmp	r5, r7
34022c3a:	dd6f      	ble.n	34022d1c <__gethex+0x328>
34022c3c:	1bed      	subs	r5, r5, r7
34022c3e:	42ae      	cmp	r6, r5
34022c40:	dc34      	bgt.n	34022cac <__gethex+0x2b8>
34022c42:	f8d8 300c 	ldr.w	r3, [r8, #12]
34022c46:	2b02      	cmp	r3, #2
34022c48:	d022      	beq.n	34022c90 <__gethex+0x29c>
34022c4a:	2b03      	cmp	r3, #3
34022c4c:	d024      	beq.n	34022c98 <__gethex+0x2a4>
34022c4e:	2b01      	cmp	r3, #1
34022c50:	d115      	bne.n	34022c7e <__gethex+0x28a>
34022c52:	42ae      	cmp	r6, r5
34022c54:	d113      	bne.n	34022c7e <__gethex+0x28a>
34022c56:	2e01      	cmp	r6, #1
34022c58:	d10b      	bne.n	34022c72 <__gethex+0x27e>
34022c5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
34022c5e:	2562      	movs	r5, #98	@ 0x62
34022c60:	9a02      	ldr	r2, [sp, #8]
34022c62:	6013      	str	r3, [r2, #0]
34022c64:	2301      	movs	r3, #1
34022c66:	6123      	str	r3, [r4, #16]
34022c68:	f8ca 3000 	str.w	r3, [sl]
34022c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
34022c6e:	601c      	str	r4, [r3, #0]
34022c70:	e73a      	b.n	34022ae8 <__gethex+0xf4>
34022c72:	1e71      	subs	r1, r6, #1
34022c74:	4620      	mov	r0, r4
34022c76:	f000 fedb 	bl	34023a30 <__any_on>
34022c7a:	2800      	cmp	r0, #0
34022c7c:	d1ed      	bne.n	34022c5a <__gethex+0x266>
34022c7e:	4621      	mov	r1, r4
34022c80:	9801      	ldr	r0, [sp, #4]
34022c82:	f000 fa83 	bl	3402318c <_Bfree>
34022c86:	2300      	movs	r3, #0
34022c88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34022c8a:	2550      	movs	r5, #80	@ 0x50
34022c8c:	6013      	str	r3, [r2, #0]
34022c8e:	e72b      	b.n	34022ae8 <__gethex+0xf4>
34022c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
34022c92:	2b00      	cmp	r3, #0
34022c94:	d1f3      	bne.n	34022c7e <__gethex+0x28a>
34022c96:	e7e0      	b.n	34022c5a <__gethex+0x266>
34022c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
34022c9a:	2b00      	cmp	r3, #0
34022c9c:	d1dd      	bne.n	34022c5a <__gethex+0x266>
34022c9e:	e7ee      	b.n	34022c7e <__gethex+0x28a>
34022ca0:	3402fee2 	.word	0x3402fee2
34022ca4:	3403062e 	.word	0x3403062e
34022ca8:	3403063f 	.word	0x3403063f
34022cac:	1e6f      	subs	r7, r5, #1
34022cae:	f1b9 0f00 	cmp.w	r9, #0
34022cb2:	d130      	bne.n	34022d16 <__gethex+0x322>
34022cb4:	b127      	cbz	r7, 34022cc0 <__gethex+0x2cc>
34022cb6:	4639      	mov	r1, r7
34022cb8:	4620      	mov	r0, r4
34022cba:	f000 feb9 	bl	34023a30 <__any_on>
34022cbe:	4681      	mov	r9, r0
34022cc0:	117a      	asrs	r2, r7, #5
34022cc2:	2301      	movs	r3, #1
34022cc4:	f007 071f 	and.w	r7, r7, #31
34022cc8:	4629      	mov	r1, r5
34022cca:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
34022cce:	4620      	mov	r0, r4
34022cd0:	40bb      	lsls	r3, r7
34022cd2:	1b76      	subs	r6, r6, r5
34022cd4:	2502      	movs	r5, #2
34022cd6:	4213      	tst	r3, r2
34022cd8:	bf18      	it	ne
34022cda:	f049 0902 	orrne.w	r9, r9, #2
34022cde:	f7ff fe23 	bl	34022928 <rshift>
34022ce2:	f8d8 7004 	ldr.w	r7, [r8, #4]
34022ce6:	f1b9 0f00 	cmp.w	r9, #0
34022cea:	d047      	beq.n	34022d7c <__gethex+0x388>
34022cec:	f8d8 300c 	ldr.w	r3, [r8, #12]
34022cf0:	2b02      	cmp	r3, #2
34022cf2:	d015      	beq.n	34022d20 <__gethex+0x32c>
34022cf4:	2b03      	cmp	r3, #3
34022cf6:	d017      	beq.n	34022d28 <__gethex+0x334>
34022cf8:	2b01      	cmp	r3, #1
34022cfa:	d109      	bne.n	34022d10 <__gethex+0x31c>
34022cfc:	f019 0f02 	tst.w	r9, #2
34022d00:	d006      	beq.n	34022d10 <__gethex+0x31c>
34022d02:	f8da 3000 	ldr.w	r3, [sl]
34022d06:	ea49 0903 	orr.w	r9, r9, r3
34022d0a:	f019 0f01 	tst.w	r9, #1
34022d0e:	d10e      	bne.n	34022d2e <__gethex+0x33a>
34022d10:	f045 0510 	orr.w	r5, r5, #16
34022d14:	e032      	b.n	34022d7c <__gethex+0x388>
34022d16:	f04f 0901 	mov.w	r9, #1
34022d1a:	e7d1      	b.n	34022cc0 <__gethex+0x2cc>
34022d1c:	2501      	movs	r5, #1
34022d1e:	e7e2      	b.n	34022ce6 <__gethex+0x2f2>
34022d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
34022d22:	f1c3 0301 	rsb	r3, r3, #1
34022d26:	930f      	str	r3, [sp, #60]	@ 0x3c
34022d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
34022d2a:	2b00      	cmp	r3, #0
34022d2c:	d0f0      	beq.n	34022d10 <__gethex+0x31c>
34022d2e:	f8d4 b010 	ldr.w	fp, [r4, #16]
34022d32:	f104 0314 	add.w	r3, r4, #20
34022d36:	f04f 0c00 	mov.w	ip, #0
34022d3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
34022d3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
34022d42:	4618      	mov	r0, r3
34022d44:	f853 2b04 	ldr.w	r2, [r3], #4
34022d48:	f1b2 3fff 	cmp.w	r2, #4294967295
34022d4c:	d01b      	beq.n	34022d86 <__gethex+0x392>
34022d4e:	3201      	adds	r2, #1
34022d50:	6002      	str	r2, [r0, #0]
34022d52:	2d02      	cmp	r5, #2
34022d54:	f104 0314 	add.w	r3, r4, #20
34022d58:	d13c      	bne.n	34022dd4 <__gethex+0x3e0>
34022d5a:	f8d8 2000 	ldr.w	r2, [r8]
34022d5e:	3a01      	subs	r2, #1
34022d60:	42b2      	cmp	r2, r6
34022d62:	d109      	bne.n	34022d78 <__gethex+0x384>
34022d64:	1171      	asrs	r1, r6, #5
34022d66:	2201      	movs	r2, #1
34022d68:	f006 061f 	and.w	r6, r6, #31
34022d6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
34022d70:	fa02 f606 	lsl.w	r6, r2, r6
34022d74:	421e      	tst	r6, r3
34022d76:	d13a      	bne.n	34022dee <__gethex+0x3fa>
34022d78:	f045 0520 	orr.w	r5, r5, #32
34022d7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
34022d7e:	601c      	str	r4, [r3, #0]
34022d80:	9b02      	ldr	r3, [sp, #8]
34022d82:	601f      	str	r7, [r3, #0]
34022d84:	e6b0      	b.n	34022ae8 <__gethex+0xf4>
34022d86:	4299      	cmp	r1, r3
34022d88:	f843 cc04 	str.w	ip, [r3, #-4]
34022d8c:	d8d9      	bhi.n	34022d42 <__gethex+0x34e>
34022d8e:	68a3      	ldr	r3, [r4, #8]
34022d90:	459b      	cmp	fp, r3
34022d92:	db17      	blt.n	34022dc4 <__gethex+0x3d0>
34022d94:	6861      	ldr	r1, [r4, #4]
34022d96:	9801      	ldr	r0, [sp, #4]
34022d98:	3101      	adds	r1, #1
34022d9a:	f000 f9b7 	bl	3402310c <_Balloc>
34022d9e:	4681      	mov	r9, r0
34022da0:	b918      	cbnz	r0, 34022daa <__gethex+0x3b6>
34022da2:	4b1a      	ldr	r3, [pc, #104]	@ (34022e0c <__gethex+0x418>)
34022da4:	4602      	mov	r2, r0
34022da6:	2184      	movs	r1, #132	@ 0x84
34022da8:	e6c5      	b.n	34022b36 <__gethex+0x142>
34022daa:	6922      	ldr	r2, [r4, #16]
34022dac:	f104 010c 	add.w	r1, r4, #12
34022db0:	300c      	adds	r0, #12
34022db2:	3202      	adds	r2, #2
34022db4:	0092      	lsls	r2, r2, #2
34022db6:	f7fe ff5c 	bl	34021c72 <memcpy>
34022dba:	4621      	mov	r1, r4
34022dbc:	464c      	mov	r4, r9
34022dbe:	9801      	ldr	r0, [sp, #4]
34022dc0:	f000 f9e4 	bl	3402318c <_Bfree>
34022dc4:	6923      	ldr	r3, [r4, #16]
34022dc6:	1c5a      	adds	r2, r3, #1
34022dc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
34022dcc:	6122      	str	r2, [r4, #16]
34022dce:	2201      	movs	r2, #1
34022dd0:	615a      	str	r2, [r3, #20]
34022dd2:	e7be      	b.n	34022d52 <__gethex+0x35e>
34022dd4:	6922      	ldr	r2, [r4, #16]
34022dd6:	455a      	cmp	r2, fp
34022dd8:	dd0b      	ble.n	34022df2 <__gethex+0x3fe>
34022dda:	2101      	movs	r1, #1
34022ddc:	4620      	mov	r0, r4
34022dde:	f7ff fda3 	bl	34022928 <rshift>
34022de2:	3701      	adds	r7, #1
34022de4:	f8d8 3008 	ldr.w	r3, [r8, #8]
34022de8:	42bb      	cmp	r3, r7
34022dea:	f6ff aee0 	blt.w	34022bae <__gethex+0x1ba>
34022dee:	2501      	movs	r5, #1
34022df0:	e7c2      	b.n	34022d78 <__gethex+0x384>
34022df2:	f016 061f 	ands.w	r6, r6, #31
34022df6:	d0fa      	beq.n	34022dee <__gethex+0x3fa>
34022df8:	4453      	add	r3, sl
34022dfa:	f1c6 0620 	rsb	r6, r6, #32
34022dfe:	f853 0c04 	ldr.w	r0, [r3, #-4]
34022e02:	f000 fa77 	bl	340232f4 <__hi0bits>
34022e06:	42b0      	cmp	r0, r6
34022e08:	dbe7      	blt.n	34022dda <__gethex+0x3e6>
34022e0a:	e7f0      	b.n	34022dee <__gethex+0x3fa>
34022e0c:	3403062e 	.word	0x3403062e

34022e10 <L_shift>:
34022e10:	f1c2 0208 	rsb	r2, r2, #8
34022e14:	0092      	lsls	r2, r2, #2
34022e16:	b570      	push	{r4, r5, r6, lr}
34022e18:	f1c2 0620 	rsb	r6, r2, #32
34022e1c:	6843      	ldr	r3, [r0, #4]
34022e1e:	6804      	ldr	r4, [r0, #0]
34022e20:	fa03 f506 	lsl.w	r5, r3, r6
34022e24:	40d3      	lsrs	r3, r2
34022e26:	432c      	orrs	r4, r5
34022e28:	6004      	str	r4, [r0, #0]
34022e2a:	f840 3f04 	str.w	r3, [r0, #4]!
34022e2e:	4288      	cmp	r0, r1
34022e30:	d3f4      	bcc.n	34022e1c <L_shift+0xc>
34022e32:	bd70      	pop	{r4, r5, r6, pc}

34022e34 <__match>:
34022e34:	6803      	ldr	r3, [r0, #0]
34022e36:	3301      	adds	r3, #1
34022e38:	b530      	push	{r4, r5, lr}
34022e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
34022e3e:	b914      	cbnz	r4, 34022e46 <__match+0x12>
34022e40:	6003      	str	r3, [r0, #0]
34022e42:	2001      	movs	r0, #1
34022e44:	bd30      	pop	{r4, r5, pc}
34022e46:	f813 2b01 	ldrb.w	r2, [r3], #1
34022e4a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
34022e4e:	2d19      	cmp	r5, #25
34022e50:	bf98      	it	ls
34022e52:	3220      	addls	r2, #32
34022e54:	42a2      	cmp	r2, r4
34022e56:	d0f0      	beq.n	34022e3a <__match+0x6>
34022e58:	2000      	movs	r0, #0
34022e5a:	e7f3      	b.n	34022e44 <__match+0x10>

34022e5c <__hexnan>:
34022e5c:	680b      	ldr	r3, [r1, #0]
34022e5e:	6801      	ldr	r1, [r0, #0]
34022e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34022e64:	115e      	asrs	r6, r3, #5
34022e66:	f013 031f 	ands.w	r3, r3, #31
34022e6a:	f04f 0500 	mov.w	r5, #0
34022e6e:	b087      	sub	sp, #28
34022e70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
34022e74:	4682      	mov	sl, r0
34022e76:	4690      	mov	r8, r2
34022e78:	46ab      	mov	fp, r5
34022e7a:	bf18      	it	ne
34022e7c:	3604      	addne	r6, #4
34022e7e:	9301      	str	r3, [sp, #4]
34022e80:	9502      	str	r5, [sp, #8]
34022e82:	1f37      	subs	r7, r6, #4
34022e84:	f846 5c04 	str.w	r5, [r6, #-4]
34022e88:	46b9      	mov	r9, r7
34022e8a:	463c      	mov	r4, r7
34022e8c:	1c4b      	adds	r3, r1, #1
34022e8e:	784a      	ldrb	r2, [r1, #1]
34022e90:	9303      	str	r3, [sp, #12]
34022e92:	b342      	cbz	r2, 34022ee6 <__hexnan+0x8a>
34022e94:	4610      	mov	r0, r2
34022e96:	9105      	str	r1, [sp, #20]
34022e98:	9204      	str	r2, [sp, #16]
34022e9a:	f7ff fd96 	bl	340229ca <__hexdig_fun>
34022e9e:	2800      	cmp	r0, #0
34022ea0:	d151      	bne.n	34022f46 <__hexnan+0xea>
34022ea2:	9a04      	ldr	r2, [sp, #16]
34022ea4:	9905      	ldr	r1, [sp, #20]
34022ea6:	2a20      	cmp	r2, #32
34022ea8:	d818      	bhi.n	34022edc <__hexnan+0x80>
34022eaa:	9b02      	ldr	r3, [sp, #8]
34022eac:	459b      	cmp	fp, r3
34022eae:	dd13      	ble.n	34022ed8 <__hexnan+0x7c>
34022eb0:	454c      	cmp	r4, r9
34022eb2:	d206      	bcs.n	34022ec2 <__hexnan+0x66>
34022eb4:	2d07      	cmp	r5, #7
34022eb6:	dc04      	bgt.n	34022ec2 <__hexnan+0x66>
34022eb8:	462a      	mov	r2, r5
34022eba:	4649      	mov	r1, r9
34022ebc:	4620      	mov	r0, r4
34022ebe:	f7ff ffa7 	bl	34022e10 <L_shift>
34022ec2:	4544      	cmp	r4, r8
34022ec4:	d951      	bls.n	34022f6a <__hexnan+0x10e>
34022ec6:	2300      	movs	r3, #0
34022ec8:	f1a4 0904 	sub.w	r9, r4, #4
34022ecc:	f8cd b008 	str.w	fp, [sp, #8]
34022ed0:	f844 3c04 	str.w	r3, [r4, #-4]
34022ed4:	461d      	mov	r5, r3
34022ed6:	464c      	mov	r4, r9
34022ed8:	9903      	ldr	r1, [sp, #12]
34022eda:	e7d7      	b.n	34022e8c <__hexnan+0x30>
34022edc:	2a29      	cmp	r2, #41	@ 0x29
34022ede:	d156      	bne.n	34022f8e <__hexnan+0x132>
34022ee0:	3102      	adds	r1, #2
34022ee2:	f8ca 1000 	str.w	r1, [sl]
34022ee6:	f1bb 0f00 	cmp.w	fp, #0
34022eea:	d050      	beq.n	34022f8e <__hexnan+0x132>
34022eec:	454c      	cmp	r4, r9
34022eee:	d206      	bcs.n	34022efe <__hexnan+0xa2>
34022ef0:	2d07      	cmp	r5, #7
34022ef2:	dc04      	bgt.n	34022efe <__hexnan+0xa2>
34022ef4:	462a      	mov	r2, r5
34022ef6:	4649      	mov	r1, r9
34022ef8:	4620      	mov	r0, r4
34022efa:	f7ff ff89 	bl	34022e10 <L_shift>
34022efe:	4544      	cmp	r4, r8
34022f00:	d935      	bls.n	34022f6e <__hexnan+0x112>
34022f02:	f1a8 0204 	sub.w	r2, r8, #4
34022f06:	4623      	mov	r3, r4
34022f08:	f853 1b04 	ldr.w	r1, [r3], #4
34022f0c:	429f      	cmp	r7, r3
34022f0e:	f842 1f04 	str.w	r1, [r2, #4]!
34022f12:	d2f9      	bcs.n	34022f08 <__hexnan+0xac>
34022f14:	1b3b      	subs	r3, r7, r4
34022f16:	3e03      	subs	r6, #3
34022f18:	3401      	adds	r4, #1
34022f1a:	2200      	movs	r2, #0
34022f1c:	f023 0303 	bic.w	r3, r3, #3
34022f20:	3304      	adds	r3, #4
34022f22:	42b4      	cmp	r4, r6
34022f24:	bf88      	it	hi
34022f26:	2304      	movhi	r3, #4
34022f28:	4443      	add	r3, r8
34022f2a:	f843 2b04 	str.w	r2, [r3], #4
34022f2e:	429f      	cmp	r7, r3
34022f30:	d2fb      	bcs.n	34022f2a <__hexnan+0xce>
34022f32:	683b      	ldr	r3, [r7, #0]
34022f34:	b91b      	cbnz	r3, 34022f3e <__hexnan+0xe2>
34022f36:	4547      	cmp	r7, r8
34022f38:	d127      	bne.n	34022f8a <__hexnan+0x12e>
34022f3a:	2301      	movs	r3, #1
34022f3c:	603b      	str	r3, [r7, #0]
34022f3e:	2005      	movs	r0, #5
34022f40:	b007      	add	sp, #28
34022f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34022f46:	3501      	adds	r5, #1
34022f48:	f10b 0b01 	add.w	fp, fp, #1
34022f4c:	2d08      	cmp	r5, #8
34022f4e:	dd05      	ble.n	34022f5c <__hexnan+0x100>
34022f50:	4544      	cmp	r4, r8
34022f52:	d9c1      	bls.n	34022ed8 <__hexnan+0x7c>
34022f54:	2300      	movs	r3, #0
34022f56:	3c04      	subs	r4, #4
34022f58:	2501      	movs	r5, #1
34022f5a:	6023      	str	r3, [r4, #0]
34022f5c:	6822      	ldr	r2, [r4, #0]
34022f5e:	f000 000f 	and.w	r0, r0, #15
34022f62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
34022f66:	6020      	str	r0, [r4, #0]
34022f68:	e7b6      	b.n	34022ed8 <__hexnan+0x7c>
34022f6a:	2508      	movs	r5, #8
34022f6c:	e7b4      	b.n	34022ed8 <__hexnan+0x7c>
34022f6e:	9b01      	ldr	r3, [sp, #4]
34022f70:	2b00      	cmp	r3, #0
34022f72:	d0de      	beq.n	34022f32 <__hexnan+0xd6>
34022f74:	f1c3 0320 	rsb	r3, r3, #32
34022f78:	f04f 32ff 	mov.w	r2, #4294967295
34022f7c:	40da      	lsrs	r2, r3
34022f7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
34022f82:	4013      	ands	r3, r2
34022f84:	f846 3c04 	str.w	r3, [r6, #-4]
34022f88:	e7d3      	b.n	34022f32 <__hexnan+0xd6>
34022f8a:	3f04      	subs	r7, #4
34022f8c:	e7d1      	b.n	34022f32 <__hexnan+0xd6>
34022f8e:	2004      	movs	r0, #4
34022f90:	e7d6      	b.n	34022f40 <__hexnan+0xe4>
	...

34022f94 <malloc>:
34022f94:	4b02      	ldr	r3, [pc, #8]	@ (34022fa0 <malloc+0xc>)
34022f96:	4601      	mov	r1, r0
34022f98:	6818      	ldr	r0, [r3, #0]
34022f9a:	f000 b825 	b.w	34022fe8 <_malloc_r>
34022f9e:	bf00      	nop
34022fa0:	340d0a3c 	.word	0x340d0a3c

34022fa4 <sbrk_aligned>:
34022fa4:	b570      	push	{r4, r5, r6, lr}
34022fa6:	4e0f      	ldr	r6, [pc, #60]	@ (34022fe4 <sbrk_aligned+0x40>)
34022fa8:	460c      	mov	r4, r1
34022faa:	4605      	mov	r5, r0
34022fac:	6831      	ldr	r1, [r6, #0]
34022fae:	b911      	cbnz	r1, 34022fb6 <sbrk_aligned+0x12>
34022fb0:	f001 f97a 	bl	340242a8 <_sbrk_r>
34022fb4:	6030      	str	r0, [r6, #0]
34022fb6:	4621      	mov	r1, r4
34022fb8:	4628      	mov	r0, r5
34022fba:	f001 f975 	bl	340242a8 <_sbrk_r>
34022fbe:	1c43      	adds	r3, r0, #1
34022fc0:	d103      	bne.n	34022fca <sbrk_aligned+0x26>
34022fc2:	f04f 34ff 	mov.w	r4, #4294967295
34022fc6:	4620      	mov	r0, r4
34022fc8:	bd70      	pop	{r4, r5, r6, pc}
34022fca:	1cc4      	adds	r4, r0, #3
34022fcc:	f024 0403 	bic.w	r4, r4, #3
34022fd0:	42a0      	cmp	r0, r4
34022fd2:	d0f8      	beq.n	34022fc6 <sbrk_aligned+0x22>
34022fd4:	1a21      	subs	r1, r4, r0
34022fd6:	4628      	mov	r0, r5
34022fd8:	f001 f966 	bl	340242a8 <_sbrk_r>
34022fdc:	3001      	adds	r0, #1
34022fde:	d1f2      	bne.n	34022fc6 <sbrk_aligned+0x22>
34022fe0:	e7ef      	b.n	34022fc2 <sbrk_aligned+0x1e>
34022fe2:	bf00      	nop
34022fe4:	340e5d30 	.word	0x340e5d30

34022fe8 <_malloc_r>:
34022fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34022fec:	1ccd      	adds	r5, r1, #3
34022fee:	4606      	mov	r6, r0
34022ff0:	f025 0503 	bic.w	r5, r5, #3
34022ff4:	3508      	adds	r5, #8
34022ff6:	2d0c      	cmp	r5, #12
34022ff8:	bf38      	it	cc
34022ffa:	250c      	movcc	r5, #12
34022ffc:	2d00      	cmp	r5, #0
34022ffe:	db01      	blt.n	34023004 <_malloc_r+0x1c>
34023000:	42a9      	cmp	r1, r5
34023002:	d904      	bls.n	3402300e <_malloc_r+0x26>
34023004:	230c      	movs	r3, #12
34023006:	6033      	str	r3, [r6, #0]
34023008:	2000      	movs	r0, #0
3402300a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3402300e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 340230e4 <_malloc_r+0xfc>
34023012:	f7de ffd7 	bl	34001fc4 <__malloc_lock>
34023016:	f8d8 3000 	ldr.w	r3, [r8]
3402301a:	461c      	mov	r4, r3
3402301c:	bb44      	cbnz	r4, 34023070 <_malloc_r+0x88>
3402301e:	4629      	mov	r1, r5
34023020:	4630      	mov	r0, r6
34023022:	f7ff ffbf 	bl	34022fa4 <sbrk_aligned>
34023026:	1c43      	adds	r3, r0, #1
34023028:	4604      	mov	r4, r0
3402302a:	d158      	bne.n	340230de <_malloc_r+0xf6>
3402302c:	f8d8 4000 	ldr.w	r4, [r8]
34023030:	4627      	mov	r7, r4
34023032:	2f00      	cmp	r7, #0
34023034:	d143      	bne.n	340230be <_malloc_r+0xd6>
34023036:	2c00      	cmp	r4, #0
34023038:	d04b      	beq.n	340230d2 <_malloc_r+0xea>
3402303a:	6823      	ldr	r3, [r4, #0]
3402303c:	4639      	mov	r1, r7
3402303e:	4630      	mov	r0, r6
34023040:	eb04 0903 	add.w	r9, r4, r3
34023044:	f001 f930 	bl	340242a8 <_sbrk_r>
34023048:	4581      	cmp	r9, r0
3402304a:	d142      	bne.n	340230d2 <_malloc_r+0xea>
3402304c:	6821      	ldr	r1, [r4, #0]
3402304e:	4630      	mov	r0, r6
34023050:	1a6d      	subs	r5, r5, r1
34023052:	4629      	mov	r1, r5
34023054:	f7ff ffa6 	bl	34022fa4 <sbrk_aligned>
34023058:	3001      	adds	r0, #1
3402305a:	d03a      	beq.n	340230d2 <_malloc_r+0xea>
3402305c:	6823      	ldr	r3, [r4, #0]
3402305e:	442b      	add	r3, r5
34023060:	6023      	str	r3, [r4, #0]
34023062:	f8d8 3000 	ldr.w	r3, [r8]
34023066:	685a      	ldr	r2, [r3, #4]
34023068:	bb62      	cbnz	r2, 340230c4 <_malloc_r+0xdc>
3402306a:	f8c8 7000 	str.w	r7, [r8]
3402306e:	e00f      	b.n	34023090 <_malloc_r+0xa8>
34023070:	6822      	ldr	r2, [r4, #0]
34023072:	1b52      	subs	r2, r2, r5
34023074:	d420      	bmi.n	340230b8 <_malloc_r+0xd0>
34023076:	2a0b      	cmp	r2, #11
34023078:	d917      	bls.n	340230aa <_malloc_r+0xc2>
3402307a:	1961      	adds	r1, r4, r5
3402307c:	42a3      	cmp	r3, r4
3402307e:	6025      	str	r5, [r4, #0]
34023080:	bf18      	it	ne
34023082:	6059      	strne	r1, [r3, #4]
34023084:	6863      	ldr	r3, [r4, #4]
34023086:	bf08      	it	eq
34023088:	f8c8 1000 	streq.w	r1, [r8]
3402308c:	5162      	str	r2, [r4, r5]
3402308e:	604b      	str	r3, [r1, #4]
34023090:	4630      	mov	r0, r6
34023092:	f7de ffbd 	bl	34002010 <__malloc_unlock>
34023096:	f104 000b 	add.w	r0, r4, #11
3402309a:	1d23      	adds	r3, r4, #4
3402309c:	f020 0007 	bic.w	r0, r0, #7
340230a0:	1ac2      	subs	r2, r0, r3
340230a2:	bf1c      	itt	ne
340230a4:	1a1b      	subne	r3, r3, r0
340230a6:	50a3      	strne	r3, [r4, r2]
340230a8:	e7af      	b.n	3402300a <_malloc_r+0x22>
340230aa:	6862      	ldr	r2, [r4, #4]
340230ac:	42a3      	cmp	r3, r4
340230ae:	bf0c      	ite	eq
340230b0:	f8c8 2000 	streq.w	r2, [r8]
340230b4:	605a      	strne	r2, [r3, #4]
340230b6:	e7eb      	b.n	34023090 <_malloc_r+0xa8>
340230b8:	4623      	mov	r3, r4
340230ba:	6864      	ldr	r4, [r4, #4]
340230bc:	e7ae      	b.n	3402301c <_malloc_r+0x34>
340230be:	463c      	mov	r4, r7
340230c0:	687f      	ldr	r7, [r7, #4]
340230c2:	e7b6      	b.n	34023032 <_malloc_r+0x4a>
340230c4:	461a      	mov	r2, r3
340230c6:	685b      	ldr	r3, [r3, #4]
340230c8:	42a3      	cmp	r3, r4
340230ca:	d1fb      	bne.n	340230c4 <_malloc_r+0xdc>
340230cc:	2300      	movs	r3, #0
340230ce:	6053      	str	r3, [r2, #4]
340230d0:	e7de      	b.n	34023090 <_malloc_r+0xa8>
340230d2:	230c      	movs	r3, #12
340230d4:	4630      	mov	r0, r6
340230d6:	6033      	str	r3, [r6, #0]
340230d8:	f7de ff9a 	bl	34002010 <__malloc_unlock>
340230dc:	e794      	b.n	34023008 <_malloc_r+0x20>
340230de:	6005      	str	r5, [r0, #0]
340230e0:	e7d6      	b.n	34023090 <_malloc_r+0xa8>
340230e2:	bf00      	nop
340230e4:	340e5d34 	.word	0x340e5d34

340230e8 <__ascii_mbtowc>:
340230e8:	b082      	sub	sp, #8
340230ea:	b901      	cbnz	r1, 340230ee <__ascii_mbtowc+0x6>
340230ec:	a901      	add	r1, sp, #4
340230ee:	b142      	cbz	r2, 34023102 <__ascii_mbtowc+0x1a>
340230f0:	b14b      	cbz	r3, 34023106 <__ascii_mbtowc+0x1e>
340230f2:	7813      	ldrb	r3, [r2, #0]
340230f4:	600b      	str	r3, [r1, #0]
340230f6:	7812      	ldrb	r2, [r2, #0]
340230f8:	1e10      	subs	r0, r2, #0
340230fa:	bf18      	it	ne
340230fc:	2001      	movne	r0, #1
340230fe:	b002      	add	sp, #8
34023100:	4770      	bx	lr
34023102:	4610      	mov	r0, r2
34023104:	e7fb      	b.n	340230fe <__ascii_mbtowc+0x16>
34023106:	f06f 0001 	mvn.w	r0, #1
3402310a:	e7f8      	b.n	340230fe <__ascii_mbtowc+0x16>

3402310c <_Balloc>:
3402310c:	b570      	push	{r4, r5, r6, lr}
3402310e:	69c6      	ldr	r6, [r0, #28]
34023110:	4604      	mov	r4, r0
34023112:	460d      	mov	r5, r1
34023114:	b976      	cbnz	r6, 34023134 <_Balloc+0x28>
34023116:	2010      	movs	r0, #16
34023118:	f7ff ff3c 	bl	34022f94 <malloc>
3402311c:	4602      	mov	r2, r0
3402311e:	61e0      	str	r0, [r4, #28]
34023120:	b920      	cbnz	r0, 3402312c <_Balloc+0x20>
34023122:	4b18      	ldr	r3, [pc, #96]	@ (34023184 <_Balloc+0x78>)
34023124:	216b      	movs	r1, #107	@ 0x6b
34023126:	4818      	ldr	r0, [pc, #96]	@ (34023188 <_Balloc+0x7c>)
34023128:	f7fc fc6e 	bl	3401fa08 <__assert_func>
3402312c:	e9c0 6601 	strd	r6, r6, [r0, #4]
34023130:	6006      	str	r6, [r0, #0]
34023132:	60c6      	str	r6, [r0, #12]
34023134:	69e6      	ldr	r6, [r4, #28]
34023136:	68f3      	ldr	r3, [r6, #12]
34023138:	b183      	cbz	r3, 3402315c <_Balloc+0x50>
3402313a:	69e3      	ldr	r3, [r4, #28]
3402313c:	68db      	ldr	r3, [r3, #12]
3402313e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
34023142:	b9b8      	cbnz	r0, 34023174 <_Balloc+0x68>
34023144:	2101      	movs	r1, #1
34023146:	4620      	mov	r0, r4
34023148:	fa01 f605 	lsl.w	r6, r1, r5
3402314c:	1d72      	adds	r2, r6, #5
3402314e:	0092      	lsls	r2, r2, #2
34023150:	f001 f8ba 	bl	340242c8 <_calloc_r>
34023154:	b160      	cbz	r0, 34023170 <_Balloc+0x64>
34023156:	e9c0 5601 	strd	r5, r6, [r0, #4]
3402315a:	e00e      	b.n	3402317a <_Balloc+0x6e>
3402315c:	2221      	movs	r2, #33	@ 0x21
3402315e:	2104      	movs	r1, #4
34023160:	4620      	mov	r0, r4
34023162:	f001 f8b1 	bl	340242c8 <_calloc_r>
34023166:	69e3      	ldr	r3, [r4, #28]
34023168:	60f0      	str	r0, [r6, #12]
3402316a:	68db      	ldr	r3, [r3, #12]
3402316c:	2b00      	cmp	r3, #0
3402316e:	d1e4      	bne.n	3402313a <_Balloc+0x2e>
34023170:	2000      	movs	r0, #0
34023172:	bd70      	pop	{r4, r5, r6, pc}
34023174:	6802      	ldr	r2, [r0, #0]
34023176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3402317a:	2300      	movs	r3, #0
3402317c:	e9c0 3303 	strd	r3, r3, [r0, #12]
34023180:	e7f7      	b.n	34023172 <_Balloc+0x66>
34023182:	bf00      	nop
34023184:	340305bf 	.word	0x340305bf
34023188:	3403069f 	.word	0x3403069f

3402318c <_Bfree>:
3402318c:	b570      	push	{r4, r5, r6, lr}
3402318e:	69c6      	ldr	r6, [r0, #28]
34023190:	4605      	mov	r5, r0
34023192:	460c      	mov	r4, r1
34023194:	b976      	cbnz	r6, 340231b4 <_Bfree+0x28>
34023196:	2010      	movs	r0, #16
34023198:	f7ff fefc 	bl	34022f94 <malloc>
3402319c:	4602      	mov	r2, r0
3402319e:	61e8      	str	r0, [r5, #28]
340231a0:	b920      	cbnz	r0, 340231ac <_Bfree+0x20>
340231a2:	4b09      	ldr	r3, [pc, #36]	@ (340231c8 <_Bfree+0x3c>)
340231a4:	218f      	movs	r1, #143	@ 0x8f
340231a6:	4809      	ldr	r0, [pc, #36]	@ (340231cc <_Bfree+0x40>)
340231a8:	f7fc fc2e 	bl	3401fa08 <__assert_func>
340231ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
340231b0:	6006      	str	r6, [r0, #0]
340231b2:	60c6      	str	r6, [r0, #12]
340231b4:	b13c      	cbz	r4, 340231c6 <_Bfree+0x3a>
340231b6:	69eb      	ldr	r3, [r5, #28]
340231b8:	6862      	ldr	r2, [r4, #4]
340231ba:	68db      	ldr	r3, [r3, #12]
340231bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
340231c0:	6021      	str	r1, [r4, #0]
340231c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
340231c6:	bd70      	pop	{r4, r5, r6, pc}
340231c8:	340305bf 	.word	0x340305bf
340231cc:	3403069f 	.word	0x3403069f

340231d0 <__multadd>:
340231d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340231d4:	f101 0c14 	add.w	ip, r1, #20
340231d8:	4607      	mov	r7, r0
340231da:	460c      	mov	r4, r1
340231dc:	461e      	mov	r6, r3
340231de:	690d      	ldr	r5, [r1, #16]
340231e0:	2000      	movs	r0, #0
340231e2:	f8dc 3000 	ldr.w	r3, [ip]
340231e6:	3001      	adds	r0, #1
340231e8:	b299      	uxth	r1, r3
340231ea:	4285      	cmp	r5, r0
340231ec:	fb02 6101 	mla	r1, r2, r1, r6
340231f0:	ea4f 4613 	mov.w	r6, r3, lsr #16
340231f4:	ea4f 4311 	mov.w	r3, r1, lsr #16
340231f8:	b289      	uxth	r1, r1
340231fa:	fb02 3306 	mla	r3, r2, r6, r3
340231fe:	eb01 4103 	add.w	r1, r1, r3, lsl #16
34023202:	ea4f 4613 	mov.w	r6, r3, lsr #16
34023206:	f84c 1b04 	str.w	r1, [ip], #4
3402320a:	dcea      	bgt.n	340231e2 <__multadd+0x12>
3402320c:	b30e      	cbz	r6, 34023252 <__multadd+0x82>
3402320e:	68a3      	ldr	r3, [r4, #8]
34023210:	42ab      	cmp	r3, r5
34023212:	dc19      	bgt.n	34023248 <__multadd+0x78>
34023214:	6861      	ldr	r1, [r4, #4]
34023216:	4638      	mov	r0, r7
34023218:	3101      	adds	r1, #1
3402321a:	f7ff ff77 	bl	3402310c <_Balloc>
3402321e:	4680      	mov	r8, r0
34023220:	b928      	cbnz	r0, 3402322e <__multadd+0x5e>
34023222:	4602      	mov	r2, r0
34023224:	4b0c      	ldr	r3, [pc, #48]	@ (34023258 <__multadd+0x88>)
34023226:	21ba      	movs	r1, #186	@ 0xba
34023228:	480c      	ldr	r0, [pc, #48]	@ (3402325c <__multadd+0x8c>)
3402322a:	f7fc fbed 	bl	3401fa08 <__assert_func>
3402322e:	6922      	ldr	r2, [r4, #16]
34023230:	f104 010c 	add.w	r1, r4, #12
34023234:	300c      	adds	r0, #12
34023236:	3202      	adds	r2, #2
34023238:	0092      	lsls	r2, r2, #2
3402323a:	f7fe fd1a 	bl	34021c72 <memcpy>
3402323e:	4621      	mov	r1, r4
34023240:	4644      	mov	r4, r8
34023242:	4638      	mov	r0, r7
34023244:	f7ff ffa2 	bl	3402318c <_Bfree>
34023248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3402324c:	3501      	adds	r5, #1
3402324e:	615e      	str	r6, [r3, #20]
34023250:	6125      	str	r5, [r4, #16]
34023252:	4620      	mov	r0, r4
34023254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34023258:	3403062e 	.word	0x3403062e
3402325c:	3403069f 	.word	0x3403069f

34023260 <__s2b>:
34023260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34023264:	4615      	mov	r5, r2
34023266:	461f      	mov	r7, r3
34023268:	2209      	movs	r2, #9
3402326a:	3308      	adds	r3, #8
3402326c:	460c      	mov	r4, r1
3402326e:	4606      	mov	r6, r0
34023270:	2100      	movs	r1, #0
34023272:	fb93 f3f2 	sdiv	r3, r3, r2
34023276:	2201      	movs	r2, #1
34023278:	429a      	cmp	r2, r3
3402327a:	db09      	blt.n	34023290 <__s2b+0x30>
3402327c:	4630      	mov	r0, r6
3402327e:	f7ff ff45 	bl	3402310c <_Balloc>
34023282:	b940      	cbnz	r0, 34023296 <__s2b+0x36>
34023284:	4602      	mov	r2, r0
34023286:	4b19      	ldr	r3, [pc, #100]	@ (340232ec <__s2b+0x8c>)
34023288:	21d3      	movs	r1, #211	@ 0xd3
3402328a:	4819      	ldr	r0, [pc, #100]	@ (340232f0 <__s2b+0x90>)
3402328c:	f7fc fbbc 	bl	3401fa08 <__assert_func>
34023290:	0052      	lsls	r2, r2, #1
34023292:	3101      	adds	r1, #1
34023294:	e7f0      	b.n	34023278 <__s2b+0x18>
34023296:	9b08      	ldr	r3, [sp, #32]
34023298:	2d09      	cmp	r5, #9
3402329a:	6143      	str	r3, [r0, #20]
3402329c:	f04f 0301 	mov.w	r3, #1
340232a0:	6103      	str	r3, [r0, #16]
340232a2:	dd16      	ble.n	340232d2 <__s2b+0x72>
340232a4:	f104 0909 	add.w	r9, r4, #9
340232a8:	442c      	add	r4, r5
340232aa:	46c8      	mov	r8, r9
340232ac:	f818 3b01 	ldrb.w	r3, [r8], #1
340232b0:	4601      	mov	r1, r0
340232b2:	220a      	movs	r2, #10
340232b4:	4630      	mov	r0, r6
340232b6:	3b30      	subs	r3, #48	@ 0x30
340232b8:	f7ff ff8a 	bl	340231d0 <__multadd>
340232bc:	45a0      	cmp	r8, r4
340232be:	d1f5      	bne.n	340232ac <__s2b+0x4c>
340232c0:	f1a5 0408 	sub.w	r4, r5, #8
340232c4:	444c      	add	r4, r9
340232c6:	1b2d      	subs	r5, r5, r4
340232c8:	1963      	adds	r3, r4, r5
340232ca:	42bb      	cmp	r3, r7
340232cc:	db04      	blt.n	340232d8 <__s2b+0x78>
340232ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
340232d2:	340a      	adds	r4, #10
340232d4:	2509      	movs	r5, #9
340232d6:	e7f6      	b.n	340232c6 <__s2b+0x66>
340232d8:	f814 3b01 	ldrb.w	r3, [r4], #1
340232dc:	4601      	mov	r1, r0
340232de:	220a      	movs	r2, #10
340232e0:	4630      	mov	r0, r6
340232e2:	3b30      	subs	r3, #48	@ 0x30
340232e4:	f7ff ff74 	bl	340231d0 <__multadd>
340232e8:	e7ee      	b.n	340232c8 <__s2b+0x68>
340232ea:	bf00      	nop
340232ec:	3403062e 	.word	0x3403062e
340232f0:	3403069f 	.word	0x3403069f

340232f4 <__hi0bits>:
340232f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
340232f8:	4603      	mov	r3, r0
340232fa:	bf36      	itet	cc
340232fc:	0403      	lslcc	r3, r0, #16
340232fe:	2000      	movcs	r0, #0
34023300:	2010      	movcc	r0, #16
34023302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34023306:	bf3c      	itt	cc
34023308:	021b      	lslcc	r3, r3, #8
3402330a:	3008      	addcc	r0, #8
3402330c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34023310:	bf3c      	itt	cc
34023312:	011b      	lslcc	r3, r3, #4
34023314:	3004      	addcc	r0, #4
34023316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3402331a:	bf3c      	itt	cc
3402331c:	009b      	lslcc	r3, r3, #2
3402331e:	3002      	addcc	r0, #2
34023320:	2b00      	cmp	r3, #0
34023322:	db05      	blt.n	34023330 <__hi0bits+0x3c>
34023324:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
34023328:	f100 0001 	add.w	r0, r0, #1
3402332c:	bf08      	it	eq
3402332e:	2020      	moveq	r0, #32
34023330:	4770      	bx	lr

34023332 <__lo0bits>:
34023332:	6803      	ldr	r3, [r0, #0]
34023334:	4602      	mov	r2, r0
34023336:	f013 0007 	ands.w	r0, r3, #7
3402333a:	d00b      	beq.n	34023354 <__lo0bits+0x22>
3402333c:	07d9      	lsls	r1, r3, #31
3402333e:	d421      	bmi.n	34023384 <__lo0bits+0x52>
34023340:	0798      	lsls	r0, r3, #30
34023342:	bf47      	ittee	mi
34023344:	085b      	lsrmi	r3, r3, #1
34023346:	2001      	movmi	r0, #1
34023348:	089b      	lsrpl	r3, r3, #2
3402334a:	2002      	movpl	r0, #2
3402334c:	bf4c      	ite	mi
3402334e:	6013      	strmi	r3, [r2, #0]
34023350:	6013      	strpl	r3, [r2, #0]
34023352:	4770      	bx	lr
34023354:	b299      	uxth	r1, r3
34023356:	b909      	cbnz	r1, 3402335c <__lo0bits+0x2a>
34023358:	0c1b      	lsrs	r3, r3, #16
3402335a:	2010      	movs	r0, #16
3402335c:	b2d9      	uxtb	r1, r3
3402335e:	b909      	cbnz	r1, 34023364 <__lo0bits+0x32>
34023360:	3008      	adds	r0, #8
34023362:	0a1b      	lsrs	r3, r3, #8
34023364:	0719      	lsls	r1, r3, #28
34023366:	bf04      	itt	eq
34023368:	091b      	lsreq	r3, r3, #4
3402336a:	3004      	addeq	r0, #4
3402336c:	0799      	lsls	r1, r3, #30
3402336e:	bf04      	itt	eq
34023370:	089b      	lsreq	r3, r3, #2
34023372:	3002      	addeq	r0, #2
34023374:	07d9      	lsls	r1, r3, #31
34023376:	d403      	bmi.n	34023380 <__lo0bits+0x4e>
34023378:	085b      	lsrs	r3, r3, #1
3402337a:	f100 0001 	add.w	r0, r0, #1
3402337e:	d003      	beq.n	34023388 <__lo0bits+0x56>
34023380:	6013      	str	r3, [r2, #0]
34023382:	4770      	bx	lr
34023384:	2000      	movs	r0, #0
34023386:	4770      	bx	lr
34023388:	2020      	movs	r0, #32
3402338a:	4770      	bx	lr

3402338c <__i2b>:
3402338c:	b510      	push	{r4, lr}
3402338e:	460c      	mov	r4, r1
34023390:	2101      	movs	r1, #1
34023392:	f7ff febb 	bl	3402310c <_Balloc>
34023396:	4602      	mov	r2, r0
34023398:	b928      	cbnz	r0, 340233a6 <__i2b+0x1a>
3402339a:	4b05      	ldr	r3, [pc, #20]	@ (340233b0 <__i2b+0x24>)
3402339c:	f240 1145 	movw	r1, #325	@ 0x145
340233a0:	4804      	ldr	r0, [pc, #16]	@ (340233b4 <__i2b+0x28>)
340233a2:	f7fc fb31 	bl	3401fa08 <__assert_func>
340233a6:	2301      	movs	r3, #1
340233a8:	6144      	str	r4, [r0, #20]
340233aa:	6103      	str	r3, [r0, #16]
340233ac:	bd10      	pop	{r4, pc}
340233ae:	bf00      	nop
340233b0:	3403062e 	.word	0x3403062e
340233b4:	3403069f 	.word	0x3403069f

340233b8 <__multiply>:
340233b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340233bc:	4617      	mov	r7, r2
340233be:	690a      	ldr	r2, [r1, #16]
340233c0:	4689      	mov	r9, r1
340233c2:	b085      	sub	sp, #20
340233c4:	693b      	ldr	r3, [r7, #16]
340233c6:	429a      	cmp	r2, r3
340233c8:	bfa2      	ittt	ge
340233ca:	463b      	movge	r3, r7
340233cc:	460f      	movge	r7, r1
340233ce:	4699      	movge	r9, r3
340233d0:	693d      	ldr	r5, [r7, #16]
340233d2:	68bb      	ldr	r3, [r7, #8]
340233d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
340233d8:	6879      	ldr	r1, [r7, #4]
340233da:	eb05 060a 	add.w	r6, r5, sl
340233de:	42b3      	cmp	r3, r6
340233e0:	bfb8      	it	lt
340233e2:	3101      	addlt	r1, #1
340233e4:	f7ff fe92 	bl	3402310c <_Balloc>
340233e8:	b930      	cbnz	r0, 340233f8 <__multiply+0x40>
340233ea:	4602      	mov	r2, r0
340233ec:	4b42      	ldr	r3, [pc, #264]	@ (340234f8 <__multiply+0x140>)
340233ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
340233f2:	4842      	ldr	r0, [pc, #264]	@ (340234fc <__multiply+0x144>)
340233f4:	f7fc fb08 	bl	3401fa08 <__assert_func>
340233f8:	f100 0414 	add.w	r4, r0, #20
340233fc:	2200      	movs	r2, #0
340233fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
34023402:	4623      	mov	r3, r4
34023404:	4573      	cmp	r3, lr
34023406:	d320      	bcc.n	3402344a <__multiply+0x92>
34023408:	f107 0814 	add.w	r8, r7, #20
3402340c:	f109 0114 	add.w	r1, r9, #20
34023410:	eb08 0585 	add.w	r5, r8, r5, lsl #2
34023414:	eb01 038a 	add.w	r3, r1, sl, lsl #2
34023418:	9302      	str	r3, [sp, #8]
3402341a:	1beb      	subs	r3, r5, r7
3402341c:	3715      	adds	r7, #21
3402341e:	3b15      	subs	r3, #21
34023420:	f023 0303 	bic.w	r3, r3, #3
34023424:	3304      	adds	r3, #4
34023426:	42bd      	cmp	r5, r7
34023428:	bf38      	it	cc
3402342a:	2304      	movcc	r3, #4
3402342c:	9301      	str	r3, [sp, #4]
3402342e:	9b02      	ldr	r3, [sp, #8]
34023430:	9103      	str	r1, [sp, #12]
34023432:	428b      	cmp	r3, r1
34023434:	d80c      	bhi.n	34023450 <__multiply+0x98>
34023436:	2e00      	cmp	r6, #0
34023438:	dd03      	ble.n	34023442 <__multiply+0x8a>
3402343a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3402343e:	2b00      	cmp	r3, #0
34023440:	d057      	beq.n	340234f2 <__multiply+0x13a>
34023442:	6106      	str	r6, [r0, #16]
34023444:	b005      	add	sp, #20
34023446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402344a:	f843 2b04 	str.w	r2, [r3], #4
3402344e:	e7d9      	b.n	34023404 <__multiply+0x4c>
34023450:	f8b1 a000 	ldrh.w	sl, [r1]
34023454:	f1ba 0f00 	cmp.w	sl, #0
34023458:	d021      	beq.n	3402349e <__multiply+0xe6>
3402345a:	46c4      	mov	ip, r8
3402345c:	46a1      	mov	r9, r4
3402345e:	2700      	movs	r7, #0
34023460:	f85c 2b04 	ldr.w	r2, [ip], #4
34023464:	f8d9 3000 	ldr.w	r3, [r9]
34023468:	fa1f fb82 	uxth.w	fp, r2
3402346c:	4565      	cmp	r5, ip
3402346e:	b29b      	uxth	r3, r3
34023470:	ea4f 4212 	mov.w	r2, r2, lsr #16
34023474:	fb0a 330b 	mla	r3, sl, fp, r3
34023478:	443b      	add	r3, r7
3402347a:	f8d9 7000 	ldr.w	r7, [r9]
3402347e:	ea4f 4717 	mov.w	r7, r7, lsr #16
34023482:	fb0a 7202 	mla	r2, sl, r2, r7
34023486:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3402348a:	b29b      	uxth	r3, r3
3402348c:	ea4f 4712 	mov.w	r7, r2, lsr #16
34023490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34023494:	f849 3b04 	str.w	r3, [r9], #4
34023498:	d8e2      	bhi.n	34023460 <__multiply+0xa8>
3402349a:	9b01      	ldr	r3, [sp, #4]
3402349c:	50e7      	str	r7, [r4, r3]
3402349e:	9b03      	ldr	r3, [sp, #12]
340234a0:	3104      	adds	r1, #4
340234a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
340234a6:	f1b9 0f00 	cmp.w	r9, #0
340234aa:	d020      	beq.n	340234ee <__multiply+0x136>
340234ac:	6823      	ldr	r3, [r4, #0]
340234ae:	4647      	mov	r7, r8
340234b0:	46a4      	mov	ip, r4
340234b2:	f04f 0a00 	mov.w	sl, #0
340234b6:	f8b7 b000 	ldrh.w	fp, [r7]
340234ba:	b29b      	uxth	r3, r3
340234bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
340234c0:	fb09 220b 	mla	r2, r9, fp, r2
340234c4:	4452      	add	r2, sl
340234c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
340234ca:	f84c 3b04 	str.w	r3, [ip], #4
340234ce:	f857 3b04 	ldr.w	r3, [r7], #4
340234d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
340234d6:	f8bc 3000 	ldrh.w	r3, [ip]
340234da:	42bd      	cmp	r5, r7
340234dc:	fb09 330a 	mla	r3, r9, sl, r3
340234e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
340234e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
340234e8:	d8e5      	bhi.n	340234b6 <__multiply+0xfe>
340234ea:	9a01      	ldr	r2, [sp, #4]
340234ec:	50a3      	str	r3, [r4, r2]
340234ee:	3404      	adds	r4, #4
340234f0:	e79d      	b.n	3402342e <__multiply+0x76>
340234f2:	3e01      	subs	r6, #1
340234f4:	e79f      	b.n	34023436 <__multiply+0x7e>
340234f6:	bf00      	nop
340234f8:	3403062e 	.word	0x3403062e
340234fc:	3403069f 	.word	0x3403069f

34023500 <__pow5mult>:
34023500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34023504:	4615      	mov	r5, r2
34023506:	f012 0203 	ands.w	r2, r2, #3
3402350a:	4607      	mov	r7, r0
3402350c:	460e      	mov	r6, r1
3402350e:	d007      	beq.n	34023520 <__pow5mult+0x20>
34023510:	3a01      	subs	r2, #1
34023512:	4c25      	ldr	r4, [pc, #148]	@ (340235a8 <__pow5mult+0xa8>)
34023514:	2300      	movs	r3, #0
34023516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3402351a:	f7ff fe59 	bl	340231d0 <__multadd>
3402351e:	4606      	mov	r6, r0
34023520:	10ad      	asrs	r5, r5, #2
34023522:	d03d      	beq.n	340235a0 <__pow5mult+0xa0>
34023524:	69fc      	ldr	r4, [r7, #28]
34023526:	b97c      	cbnz	r4, 34023548 <__pow5mult+0x48>
34023528:	2010      	movs	r0, #16
3402352a:	f7ff fd33 	bl	34022f94 <malloc>
3402352e:	4602      	mov	r2, r0
34023530:	61f8      	str	r0, [r7, #28]
34023532:	b928      	cbnz	r0, 34023540 <__pow5mult+0x40>
34023534:	4b1d      	ldr	r3, [pc, #116]	@ (340235ac <__pow5mult+0xac>)
34023536:	f240 11b3 	movw	r1, #435	@ 0x1b3
3402353a:	481d      	ldr	r0, [pc, #116]	@ (340235b0 <__pow5mult+0xb0>)
3402353c:	f7fc fa64 	bl	3401fa08 <__assert_func>
34023540:	e9c0 4401 	strd	r4, r4, [r0, #4]
34023544:	6004      	str	r4, [r0, #0]
34023546:	60c4      	str	r4, [r0, #12]
34023548:	f8d7 801c 	ldr.w	r8, [r7, #28]
3402354c:	f8d8 4008 	ldr.w	r4, [r8, #8]
34023550:	b94c      	cbnz	r4, 34023566 <__pow5mult+0x66>
34023552:	f240 2171 	movw	r1, #625	@ 0x271
34023556:	4638      	mov	r0, r7
34023558:	f7ff ff18 	bl	3402338c <__i2b>
3402355c:	2300      	movs	r3, #0
3402355e:	4604      	mov	r4, r0
34023560:	f8c8 0008 	str.w	r0, [r8, #8]
34023564:	6003      	str	r3, [r0, #0]
34023566:	f04f 0900 	mov.w	r9, #0
3402356a:	07eb      	lsls	r3, r5, #31
3402356c:	d50a      	bpl.n	34023584 <__pow5mult+0x84>
3402356e:	4631      	mov	r1, r6
34023570:	4622      	mov	r2, r4
34023572:	4638      	mov	r0, r7
34023574:	f7ff ff20 	bl	340233b8 <__multiply>
34023578:	4680      	mov	r8, r0
3402357a:	4631      	mov	r1, r6
3402357c:	4638      	mov	r0, r7
3402357e:	4646      	mov	r6, r8
34023580:	f7ff fe04 	bl	3402318c <_Bfree>
34023584:	106d      	asrs	r5, r5, #1
34023586:	d00b      	beq.n	340235a0 <__pow5mult+0xa0>
34023588:	6820      	ldr	r0, [r4, #0]
3402358a:	b938      	cbnz	r0, 3402359c <__pow5mult+0x9c>
3402358c:	4622      	mov	r2, r4
3402358e:	4621      	mov	r1, r4
34023590:	4638      	mov	r0, r7
34023592:	f7ff ff11 	bl	340233b8 <__multiply>
34023596:	6020      	str	r0, [r4, #0]
34023598:	f8c0 9000 	str.w	r9, [r0]
3402359c:	4604      	mov	r4, r0
3402359e:	e7e4      	b.n	3402356a <__pow5mult+0x6a>
340235a0:	4630      	mov	r0, r6
340235a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
340235a6:	bf00      	nop
340235a8:	340c9a80 	.word	0x340c9a80
340235ac:	340305bf 	.word	0x340305bf
340235b0:	3403069f 	.word	0x3403069f

340235b4 <__lshift>:
340235b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
340235b8:	460c      	mov	r4, r1
340235ba:	4607      	mov	r7, r0
340235bc:	4691      	mov	r9, r2
340235be:	ea4f 1a62 	mov.w	sl, r2, asr #5
340235c2:	6923      	ldr	r3, [r4, #16]
340235c4:	6849      	ldr	r1, [r1, #4]
340235c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
340235ca:	68a3      	ldr	r3, [r4, #8]
340235cc:	f108 0601 	add.w	r6, r8, #1
340235d0:	42b3      	cmp	r3, r6
340235d2:	db0b      	blt.n	340235ec <__lshift+0x38>
340235d4:	4638      	mov	r0, r7
340235d6:	f7ff fd99 	bl	3402310c <_Balloc>
340235da:	4605      	mov	r5, r0
340235dc:	b948      	cbnz	r0, 340235f2 <__lshift+0x3e>
340235de:	4602      	mov	r2, r0
340235e0:	4b28      	ldr	r3, [pc, #160]	@ (34023684 <__lshift+0xd0>)
340235e2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
340235e6:	4828      	ldr	r0, [pc, #160]	@ (34023688 <__lshift+0xd4>)
340235e8:	f7fc fa0e 	bl	3401fa08 <__assert_func>
340235ec:	3101      	adds	r1, #1
340235ee:	005b      	lsls	r3, r3, #1
340235f0:	e7ee      	b.n	340235d0 <__lshift+0x1c>
340235f2:	2300      	movs	r3, #0
340235f4:	f100 0114 	add.w	r1, r0, #20
340235f8:	f100 0210 	add.w	r2, r0, #16
340235fc:	4618      	mov	r0, r3
340235fe:	4553      	cmp	r3, sl
34023600:	db33      	blt.n	3402366a <__lshift+0xb6>
34023602:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
34023606:	f104 0314 	add.w	r3, r4, #20
3402360a:	6920      	ldr	r0, [r4, #16]
3402360c:	f019 091f 	ands.w	r9, r9, #31
34023610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
34023614:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
34023618:	d02b      	beq.n	34023672 <__lshift+0xbe>
3402361a:	f1c9 0e20 	rsb	lr, r9, #32
3402361e:	468a      	mov	sl, r1
34023620:	2200      	movs	r2, #0
34023622:	6818      	ldr	r0, [r3, #0]
34023624:	fa00 f009 	lsl.w	r0, r0, r9
34023628:	4310      	orrs	r0, r2
3402362a:	f84a 0b04 	str.w	r0, [sl], #4
3402362e:	f853 2b04 	ldr.w	r2, [r3], #4
34023632:	459c      	cmp	ip, r3
34023634:	fa22 f20e 	lsr.w	r2, r2, lr
34023638:	d8f3      	bhi.n	34023622 <__lshift+0x6e>
3402363a:	ebac 0304 	sub.w	r3, ip, r4
3402363e:	f104 0015 	add.w	r0, r4, #21
34023642:	3b15      	subs	r3, #21
34023644:	f023 0303 	bic.w	r3, r3, #3
34023648:	3304      	adds	r3, #4
3402364a:	4560      	cmp	r0, ip
3402364c:	bf88      	it	hi
3402364e:	2304      	movhi	r3, #4
34023650:	50ca      	str	r2, [r1, r3]
34023652:	b10a      	cbz	r2, 34023658 <__lshift+0xa4>
34023654:	f108 0602 	add.w	r6, r8, #2
34023658:	3e01      	subs	r6, #1
3402365a:	4638      	mov	r0, r7
3402365c:	4621      	mov	r1, r4
3402365e:	612e      	str	r6, [r5, #16]
34023660:	f7ff fd94 	bl	3402318c <_Bfree>
34023664:	4628      	mov	r0, r5
34023666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3402366a:	3301      	adds	r3, #1
3402366c:	f842 0f04 	str.w	r0, [r2, #4]!
34023670:	e7c5      	b.n	340235fe <__lshift+0x4a>
34023672:	3904      	subs	r1, #4
34023674:	f853 2b04 	ldr.w	r2, [r3], #4
34023678:	459c      	cmp	ip, r3
3402367a:	f841 2f04 	str.w	r2, [r1, #4]!
3402367e:	d8f9      	bhi.n	34023674 <__lshift+0xc0>
34023680:	e7ea      	b.n	34023658 <__lshift+0xa4>
34023682:	bf00      	nop
34023684:	3403062e 	.word	0x3403062e
34023688:	3403069f 	.word	0x3403069f

3402368c <__mcmp>:
3402368c:	4603      	mov	r3, r0
3402368e:	690a      	ldr	r2, [r1, #16]
34023690:	6900      	ldr	r0, [r0, #16]
34023692:	1a80      	subs	r0, r0, r2
34023694:	b530      	push	{r4, r5, lr}
34023696:	d10e      	bne.n	340236b6 <__mcmp+0x2a>
34023698:	3314      	adds	r3, #20
3402369a:	3114      	adds	r1, #20
3402369c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
340236a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
340236a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
340236a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
340236ac:	4295      	cmp	r5, r2
340236ae:	d003      	beq.n	340236b8 <__mcmp+0x2c>
340236b0:	d205      	bcs.n	340236be <__mcmp+0x32>
340236b2:	f04f 30ff 	mov.w	r0, #4294967295
340236b6:	bd30      	pop	{r4, r5, pc}
340236b8:	42a3      	cmp	r3, r4
340236ba:	d3f3      	bcc.n	340236a4 <__mcmp+0x18>
340236bc:	e7fb      	b.n	340236b6 <__mcmp+0x2a>
340236be:	2001      	movs	r0, #1
340236c0:	e7f9      	b.n	340236b6 <__mcmp+0x2a>
	...

340236c4 <__mdiff>:
340236c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
340236c8:	4689      	mov	r9, r1
340236ca:	4606      	mov	r6, r0
340236cc:	4611      	mov	r1, r2
340236ce:	4614      	mov	r4, r2
340236d0:	4648      	mov	r0, r9
340236d2:	f7ff ffdb 	bl	3402368c <__mcmp>
340236d6:	1e05      	subs	r5, r0, #0
340236d8:	d112      	bne.n	34023700 <__mdiff+0x3c>
340236da:	4629      	mov	r1, r5
340236dc:	4630      	mov	r0, r6
340236de:	f7ff fd15 	bl	3402310c <_Balloc>
340236e2:	4602      	mov	r2, r0
340236e4:	b928      	cbnz	r0, 340236f2 <__mdiff+0x2e>
340236e6:	4b41      	ldr	r3, [pc, #260]	@ (340237ec <__mdiff+0x128>)
340236e8:	f240 2137 	movw	r1, #567	@ 0x237
340236ec:	4840      	ldr	r0, [pc, #256]	@ (340237f0 <__mdiff+0x12c>)
340236ee:	f7fc f98b 	bl	3401fa08 <__assert_func>
340236f2:	2301      	movs	r3, #1
340236f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
340236f8:	4610      	mov	r0, r2
340236fa:	b003      	add	sp, #12
340236fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34023700:	bfbc      	itt	lt
34023702:	464b      	movlt	r3, r9
34023704:	46a1      	movlt	r9, r4
34023706:	4630      	mov	r0, r6
34023708:	bfb8      	it	lt
3402370a:	2501      	movlt	r5, #1
3402370c:	f8d9 1004 	ldr.w	r1, [r9, #4]
34023710:	bfb4      	ite	lt
34023712:	461c      	movlt	r4, r3
34023714:	2500      	movge	r5, #0
34023716:	f7ff fcf9 	bl	3402310c <_Balloc>
3402371a:	4602      	mov	r2, r0
3402371c:	b918      	cbnz	r0, 34023726 <__mdiff+0x62>
3402371e:	4b33      	ldr	r3, [pc, #204]	@ (340237ec <__mdiff+0x128>)
34023720:	f240 2145 	movw	r1, #581	@ 0x245
34023724:	e7e2      	b.n	340236ec <__mdiff+0x28>
34023726:	f8d9 7010 	ldr.w	r7, [r9, #16]
3402372a:	f104 0e14 	add.w	lr, r4, #20
3402372e:	6926      	ldr	r6, [r4, #16]
34023730:	f100 0b14 	add.w	fp, r0, #20
34023734:	60c5      	str	r5, [r0, #12]
34023736:	f109 0514 	add.w	r5, r9, #20
3402373a:	f109 0310 	add.w	r3, r9, #16
3402373e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
34023742:	eb05 0887 	add.w	r8, r5, r7, lsl #2
34023746:	46d9      	mov	r9, fp
34023748:	f04f 0c00 	mov.w	ip, #0
3402374c:	9301      	str	r3, [sp, #4]
3402374e:	9b01      	ldr	r3, [sp, #4]
34023750:	f85e 0b04 	ldr.w	r0, [lr], #4
34023754:	f853 af04 	ldr.w	sl, [r3, #4]!
34023758:	4576      	cmp	r6, lr
3402375a:	9301      	str	r3, [sp, #4]
3402375c:	fa1f f38a 	uxth.w	r3, sl
34023760:	4619      	mov	r1, r3
34023762:	b283      	uxth	r3, r0
34023764:	ea4f 4010 	mov.w	r0, r0, lsr #16
34023768:	eba1 0303 	sub.w	r3, r1, r3
3402376c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
34023770:	4463      	add	r3, ip
34023772:	eb00 4023 	add.w	r0, r0, r3, asr #16
34023776:	b29b      	uxth	r3, r3
34023778:	ea4f 4c20 	mov.w	ip, r0, asr #16
3402377c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34023780:	f849 3b04 	str.w	r3, [r9], #4
34023784:	d8e3      	bhi.n	3402374e <__mdiff+0x8a>
34023786:	1b33      	subs	r3, r6, r4
34023788:	3415      	adds	r4, #21
3402378a:	3b15      	subs	r3, #21
3402378c:	f023 0303 	bic.w	r3, r3, #3
34023790:	3304      	adds	r3, #4
34023792:	42a6      	cmp	r6, r4
34023794:	bf38      	it	cc
34023796:	2304      	movcc	r3, #4
34023798:	441d      	add	r5, r3
3402379a:	445b      	add	r3, fp
3402379c:	462c      	mov	r4, r5
3402379e:	461e      	mov	r6, r3
340237a0:	4544      	cmp	r4, r8
340237a2:	d30e      	bcc.n	340237c2 <__mdiff+0xfe>
340237a4:	f108 0103 	add.w	r1, r8, #3
340237a8:	1b49      	subs	r1, r1, r5
340237aa:	3d03      	subs	r5, #3
340237ac:	f021 0103 	bic.w	r1, r1, #3
340237b0:	45a8      	cmp	r8, r5
340237b2:	bf38      	it	cc
340237b4:	2100      	movcc	r1, #0
340237b6:	440b      	add	r3, r1
340237b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
340237bc:	b199      	cbz	r1, 340237e6 <__mdiff+0x122>
340237be:	6117      	str	r7, [r2, #16]
340237c0:	e79a      	b.n	340236f8 <__mdiff+0x34>
340237c2:	f854 1b04 	ldr.w	r1, [r4], #4
340237c6:	46e6      	mov	lr, ip
340237c8:	fa1f fc81 	uxth.w	ip, r1
340237cc:	0c08      	lsrs	r0, r1, #16
340237ce:	4471      	add	r1, lr
340237d0:	44f4      	add	ip, lr
340237d2:	b289      	uxth	r1, r1
340237d4:	eb00 402c 	add.w	r0, r0, ip, asr #16
340237d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
340237dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
340237e0:	f846 1b04 	str.w	r1, [r6], #4
340237e4:	e7dc      	b.n	340237a0 <__mdiff+0xdc>
340237e6:	3f01      	subs	r7, #1
340237e8:	e7e6      	b.n	340237b8 <__mdiff+0xf4>
340237ea:	bf00      	nop
340237ec:	3403062e 	.word	0x3403062e
340237f0:	3403069f 	.word	0x3403069f

340237f4 <__ulp>:
340237f4:	b082      	sub	sp, #8
340237f6:	4b11      	ldr	r3, [pc, #68]	@ (3402383c <__ulp+0x48>)
340237f8:	ed8d 0b00 	vstr	d0, [sp]
340237fc:	9a01      	ldr	r2, [sp, #4]
340237fe:	4013      	ands	r3, r2
34023800:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
34023804:	2b00      	cmp	r3, #0
34023806:	dc08      	bgt.n	3402381a <__ulp+0x26>
34023808:	425b      	negs	r3, r3
3402380a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
3402380e:	ea4f 5223 	mov.w	r2, r3, asr #20
34023812:	da04      	bge.n	3402381e <__ulp+0x2a>
34023814:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34023818:	4113      	asrs	r3, r2
3402381a:	2200      	movs	r2, #0
3402381c:	e008      	b.n	34023830 <__ulp+0x3c>
3402381e:	f1a2 0314 	sub.w	r3, r2, #20
34023822:	2b1e      	cmp	r3, #30
34023824:	bfd6      	itet	le
34023826:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
3402382a:	2201      	movgt	r2, #1
3402382c:	40da      	lsrle	r2, r3
3402382e:	2300      	movs	r3, #0
34023830:	4619      	mov	r1, r3
34023832:	4610      	mov	r0, r2
34023834:	ec41 0b10 	vmov	d0, r0, r1
34023838:	b002      	add	sp, #8
3402383a:	4770      	bx	lr
3402383c:	7ff00000 	.word	0x7ff00000

34023840 <__b2d>:
34023840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34023844:	6906      	ldr	r6, [r0, #16]
34023846:	f100 0814 	add.w	r8, r0, #20
3402384a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
3402384e:	f856 2c04 	ldr.w	r2, [r6, #-4]
34023852:	1f37      	subs	r7, r6, #4
34023854:	4610      	mov	r0, r2
34023856:	f7ff fd4d 	bl	340232f4 <__hi0bits>
3402385a:	f1c0 0320 	rsb	r3, r0, #32
3402385e:	280a      	cmp	r0, #10
34023860:	600b      	str	r3, [r1, #0]
34023862:	491d      	ldr	r1, [pc, #116]	@ (340238d8 <__b2d+0x98>)
34023864:	dc16      	bgt.n	34023894 <__b2d+0x54>
34023866:	f1c0 0c0b 	rsb	ip, r0, #11
3402386a:	45b8      	cmp	r8, r7
3402386c:	f100 0015 	add.w	r0, r0, #21
34023870:	fa22 f30c 	lsr.w	r3, r2, ip
34023874:	fa02 f000 	lsl.w	r0, r2, r0
34023878:	ea43 0501 	orr.w	r5, r3, r1
3402387c:	bf34      	ite	cc
3402387e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
34023882:	2300      	movcs	r3, #0
34023884:	fa23 f30c 	lsr.w	r3, r3, ip
34023888:	4303      	orrs	r3, r0
3402388a:	461c      	mov	r4, r3
3402388c:	ec45 4b10 	vmov	d0, r4, r5
34023890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34023894:	45b8      	cmp	r8, r7
34023896:	bf3a      	itte	cc
34023898:	f1a6 0708 	subcc.w	r7, r6, #8
3402389c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
340238a0:	2300      	movcs	r3, #0
340238a2:	380b      	subs	r0, #11
340238a4:	d014      	beq.n	340238d0 <__b2d+0x90>
340238a6:	f1c0 0120 	rsb	r1, r0, #32
340238aa:	4082      	lsls	r2, r0
340238ac:	4547      	cmp	r7, r8
340238ae:	fa23 f401 	lsr.w	r4, r3, r1
340238b2:	fa03 f300 	lsl.w	r3, r3, r0
340238b6:	ea42 0204 	orr.w	r2, r2, r4
340238ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
340238be:	bf8c      	ite	hi
340238c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
340238c4:	2200      	movls	r2, #0
340238c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
340238ca:	40ca      	lsrs	r2, r1
340238cc:	4313      	orrs	r3, r2
340238ce:	e7dc      	b.n	3402388a <__b2d+0x4a>
340238d0:	ea42 0501 	orr.w	r5, r2, r1
340238d4:	e7d9      	b.n	3402388a <__b2d+0x4a>
340238d6:	bf00      	nop
340238d8:	3ff00000 	.word	0x3ff00000

340238dc <__d2b>:
340238dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
340238e0:	460f      	mov	r7, r1
340238e2:	2101      	movs	r1, #1
340238e4:	4616      	mov	r6, r2
340238e6:	ec59 8b10 	vmov	r8, r9, d0
340238ea:	f7ff fc0f 	bl	3402310c <_Balloc>
340238ee:	4604      	mov	r4, r0
340238f0:	b930      	cbnz	r0, 34023900 <__d2b+0x24>
340238f2:	4602      	mov	r2, r0
340238f4:	4b23      	ldr	r3, [pc, #140]	@ (34023984 <__d2b+0xa8>)
340238f6:	f240 310f 	movw	r1, #783	@ 0x30f
340238fa:	4823      	ldr	r0, [pc, #140]	@ (34023988 <__d2b+0xac>)
340238fc:	f7fc f884 	bl	3401fa08 <__assert_func>
34023900:	f3c9 550a 	ubfx	r5, r9, #20, #11
34023904:	f3c9 0313 	ubfx	r3, r9, #0, #20
34023908:	b10d      	cbz	r5, 3402390e <__d2b+0x32>
3402390a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3402390e:	9301      	str	r3, [sp, #4]
34023910:	f1b8 0300 	subs.w	r3, r8, #0
34023914:	d023      	beq.n	3402395e <__d2b+0x82>
34023916:	4668      	mov	r0, sp
34023918:	9300      	str	r3, [sp, #0]
3402391a:	f7ff fd0a 	bl	34023332 <__lo0bits>
3402391e:	e9dd 1200 	ldrd	r1, r2, [sp]
34023922:	b1d0      	cbz	r0, 3402395a <__d2b+0x7e>
34023924:	f1c0 0320 	rsb	r3, r0, #32
34023928:	fa02 f303 	lsl.w	r3, r2, r3
3402392c:	40c2      	lsrs	r2, r0
3402392e:	430b      	orrs	r3, r1
34023930:	9201      	str	r2, [sp, #4]
34023932:	6163      	str	r3, [r4, #20]
34023934:	9b01      	ldr	r3, [sp, #4]
34023936:	2b00      	cmp	r3, #0
34023938:	61a3      	str	r3, [r4, #24]
3402393a:	bf0c      	ite	eq
3402393c:	2201      	moveq	r2, #1
3402393e:	2202      	movne	r2, #2
34023940:	6122      	str	r2, [r4, #16]
34023942:	b1a5      	cbz	r5, 3402396e <__d2b+0x92>
34023944:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
34023948:	4405      	add	r5, r0
3402394a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3402394e:	603d      	str	r5, [r7, #0]
34023950:	6030      	str	r0, [r6, #0]
34023952:	4620      	mov	r0, r4
34023954:	b003      	add	sp, #12
34023956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3402395a:	6161      	str	r1, [r4, #20]
3402395c:	e7ea      	b.n	34023934 <__d2b+0x58>
3402395e:	a801      	add	r0, sp, #4
34023960:	f7ff fce7 	bl	34023332 <__lo0bits>
34023964:	9b01      	ldr	r3, [sp, #4]
34023966:	3020      	adds	r0, #32
34023968:	2201      	movs	r2, #1
3402396a:	6163      	str	r3, [r4, #20]
3402396c:	e7e8      	b.n	34023940 <__d2b+0x64>
3402396e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
34023972:	eb04 0382 	add.w	r3, r4, r2, lsl #2
34023976:	6038      	str	r0, [r7, #0]
34023978:	6918      	ldr	r0, [r3, #16]
3402397a:	f7ff fcbb 	bl	340232f4 <__hi0bits>
3402397e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
34023982:	e7e5      	b.n	34023950 <__d2b+0x74>
34023984:	3403062e 	.word	0x3403062e
34023988:	3403069f 	.word	0x3403069f

3402398c <__ratio>:
3402398c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34023990:	4688      	mov	r8, r1
34023992:	4681      	mov	r9, r0
34023994:	4669      	mov	r1, sp
34023996:	f7ff ff53 	bl	34023840 <__b2d>
3402399a:	a901      	add	r1, sp, #4
3402399c:	4640      	mov	r0, r8
3402399e:	ec55 4b10 	vmov	r4, r5, d0
340239a2:	f7ff ff4d 	bl	34023840 <__b2d>
340239a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
340239aa:	f8d9 2010 	ldr.w	r2, [r9, #16]
340239ae:	46ab      	mov	fp, r5
340239b0:	46a2      	mov	sl, r4
340239b2:	1ad2      	subs	r2, r2, r3
340239b4:	e9dd 3100 	ldrd	r3, r1, [sp]
340239b8:	ec57 6b10 	vmov	r6, r7, d0
340239bc:	1a5b      	subs	r3, r3, r1
340239be:	eb03 1342 	add.w	r3, r3, r2, lsl #5
340239c2:	2b00      	cmp	r3, #0
340239c4:	bfdb      	ittet	le
340239c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
340239ca:	463a      	movle	r2, r7
340239cc:	462a      	movgt	r2, r5
340239ce:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
340239d2:	bfcc      	ite	gt
340239d4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
340239d8:	ee00 3a90 	vmovle	s1, r3
340239dc:	ec4b ab17 	vmov	d7, sl, fp
340239e0:	ee87 0b00 	vdiv.f64	d0, d7, d0
340239e4:	b003      	add	sp, #12
340239e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

340239ea <__copybits>:
340239ea:	3901      	subs	r1, #1
340239ec:	f102 0314 	add.w	r3, r2, #20
340239f0:	1149      	asrs	r1, r1, #5
340239f2:	b570      	push	{r4, r5, r6, lr}
340239f4:	3101      	adds	r1, #1
340239f6:	6914      	ldr	r4, [r2, #16]
340239f8:	1f05      	subs	r5, r0, #4
340239fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
340239fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
34023a02:	42a3      	cmp	r3, r4
34023a04:	d30c      	bcc.n	34023a20 <__copybits+0x36>
34023a06:	1aa3      	subs	r3, r4, r2
34023a08:	3211      	adds	r2, #17
34023a0a:	3b11      	subs	r3, #17
34023a0c:	f023 0303 	bic.w	r3, r3, #3
34023a10:	42a2      	cmp	r2, r4
34023a12:	bf88      	it	hi
34023a14:	2300      	movhi	r3, #0
34023a16:	4418      	add	r0, r3
34023a18:	2300      	movs	r3, #0
34023a1a:	4288      	cmp	r0, r1
34023a1c:	d305      	bcc.n	34023a2a <__copybits+0x40>
34023a1e:	bd70      	pop	{r4, r5, r6, pc}
34023a20:	f853 6b04 	ldr.w	r6, [r3], #4
34023a24:	f845 6f04 	str.w	r6, [r5, #4]!
34023a28:	e7eb      	b.n	34023a02 <__copybits+0x18>
34023a2a:	f840 3b04 	str.w	r3, [r0], #4
34023a2e:	e7f4      	b.n	34023a1a <__copybits+0x30>

34023a30 <__any_on>:
34023a30:	f100 0214 	add.w	r2, r0, #20
34023a34:	114b      	asrs	r3, r1, #5
34023a36:	6900      	ldr	r0, [r0, #16]
34023a38:	4298      	cmp	r0, r3
34023a3a:	b510      	push	{r4, lr}
34023a3c:	db11      	blt.n	34023a62 <__any_on+0x32>
34023a3e:	dd0a      	ble.n	34023a56 <__any_on+0x26>
34023a40:	f011 011f 	ands.w	r1, r1, #31
34023a44:	d007      	beq.n	34023a56 <__any_on+0x26>
34023a46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
34023a4a:	fa24 f001 	lsr.w	r0, r4, r1
34023a4e:	fa00 f101 	lsl.w	r1, r0, r1
34023a52:	428c      	cmp	r4, r1
34023a54:	d10b      	bne.n	34023a6e <__any_on+0x3e>
34023a56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
34023a5a:	4293      	cmp	r3, r2
34023a5c:	d803      	bhi.n	34023a66 <__any_on+0x36>
34023a5e:	2000      	movs	r0, #0
34023a60:	bd10      	pop	{r4, pc}
34023a62:	4603      	mov	r3, r0
34023a64:	e7f7      	b.n	34023a56 <__any_on+0x26>
34023a66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
34023a6a:	2900      	cmp	r1, #0
34023a6c:	d0f5      	beq.n	34023a5a <__any_on+0x2a>
34023a6e:	2001      	movs	r0, #1
34023a70:	e7f6      	b.n	34023a60 <__any_on+0x30>

34023a72 <__ascii_wctomb>:
34023a72:	4603      	mov	r3, r0
34023a74:	4608      	mov	r0, r1
34023a76:	b141      	cbz	r1, 34023a8a <__ascii_wctomb+0x18>
34023a78:	2aff      	cmp	r2, #255	@ 0xff
34023a7a:	d904      	bls.n	34023a86 <__ascii_wctomb+0x14>
34023a7c:	228a      	movs	r2, #138	@ 0x8a
34023a7e:	f04f 30ff 	mov.w	r0, #4294967295
34023a82:	601a      	str	r2, [r3, #0]
34023a84:	4770      	bx	lr
34023a86:	2001      	movs	r0, #1
34023a88:	700a      	strb	r2, [r1, #0]
34023a8a:	4770      	bx	lr

34023a8c <__ssputs_r>:
34023a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34023a90:	461f      	mov	r7, r3
34023a92:	688e      	ldr	r6, [r1, #8]
34023a94:	4682      	mov	sl, r0
34023a96:	460c      	mov	r4, r1
34023a98:	42be      	cmp	r6, r7
34023a9a:	4690      	mov	r8, r2
34023a9c:	680b      	ldr	r3, [r1, #0]
34023a9e:	d82d      	bhi.n	34023afc <__ssputs_r+0x70>
34023aa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
34023aa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
34023aa8:	d026      	beq.n	34023af8 <__ssputs_r+0x6c>
34023aaa:	6965      	ldr	r5, [r4, #20]
34023aac:	6909      	ldr	r1, [r1, #16]
34023aae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
34023ab2:	eba3 0901 	sub.w	r9, r3, r1
34023ab6:	1c7b      	adds	r3, r7, #1
34023ab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
34023abc:	444b      	add	r3, r9
34023abe:	106d      	asrs	r5, r5, #1
34023ac0:	429d      	cmp	r5, r3
34023ac2:	bf38      	it	cc
34023ac4:	461d      	movcc	r5, r3
34023ac6:	0553      	lsls	r3, r2, #21
34023ac8:	d527      	bpl.n	34023b1a <__ssputs_r+0x8e>
34023aca:	4629      	mov	r1, r5
34023acc:	f7ff fa8c 	bl	34022fe8 <_malloc_r>
34023ad0:	4606      	mov	r6, r0
34023ad2:	b360      	cbz	r0, 34023b2e <__ssputs_r+0xa2>
34023ad4:	464a      	mov	r2, r9
34023ad6:	6921      	ldr	r1, [r4, #16]
34023ad8:	f7fe f8cb 	bl	34021c72 <memcpy>
34023adc:	89a3      	ldrh	r3, [r4, #12]
34023ade:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
34023ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34023ae6:	81a3      	strh	r3, [r4, #12]
34023ae8:	6126      	str	r6, [r4, #16]
34023aea:	444e      	add	r6, r9
34023aec:	6165      	str	r5, [r4, #20]
34023aee:	eba5 0509 	sub.w	r5, r5, r9
34023af2:	6026      	str	r6, [r4, #0]
34023af4:	463e      	mov	r6, r7
34023af6:	60a5      	str	r5, [r4, #8]
34023af8:	42be      	cmp	r6, r7
34023afa:	d900      	bls.n	34023afe <__ssputs_r+0x72>
34023afc:	463e      	mov	r6, r7
34023afe:	4632      	mov	r2, r6
34023b00:	4641      	mov	r1, r8
34023b02:	6820      	ldr	r0, [r4, #0]
34023b04:	f7fd fdec 	bl	340216e0 <memmove>
34023b08:	68a3      	ldr	r3, [r4, #8]
34023b0a:	2000      	movs	r0, #0
34023b0c:	1b9b      	subs	r3, r3, r6
34023b0e:	60a3      	str	r3, [r4, #8]
34023b10:	6823      	ldr	r3, [r4, #0]
34023b12:	4433      	add	r3, r6
34023b14:	6023      	str	r3, [r4, #0]
34023b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34023b1a:	462a      	mov	r2, r5
34023b1c:	f000 fbe8 	bl	340242f0 <_realloc_r>
34023b20:	4606      	mov	r6, r0
34023b22:	2800      	cmp	r0, #0
34023b24:	d1e0      	bne.n	34023ae8 <__ssputs_r+0x5c>
34023b26:	6921      	ldr	r1, [r4, #16]
34023b28:	4650      	mov	r0, sl
34023b2a:	f7fe feb3 	bl	34022894 <_free_r>
34023b2e:	230c      	movs	r3, #12
34023b30:	f04f 30ff 	mov.w	r0, #4294967295
34023b34:	f8ca 3000 	str.w	r3, [sl]
34023b38:	89a3      	ldrh	r3, [r4, #12]
34023b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34023b3e:	81a3      	strh	r3, [r4, #12]
34023b40:	e7e9      	b.n	34023b16 <__ssputs_r+0x8a>
	...

34023b44 <_svfiprintf_r>:
34023b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34023b48:	4698      	mov	r8, r3
34023b4a:	898b      	ldrh	r3, [r1, #12]
34023b4c:	b09d      	sub	sp, #116	@ 0x74
34023b4e:	4607      	mov	r7, r0
34023b50:	061b      	lsls	r3, r3, #24
34023b52:	460d      	mov	r5, r1
34023b54:	4614      	mov	r4, r2
34023b56:	d510      	bpl.n	34023b7a <_svfiprintf_r+0x36>
34023b58:	690b      	ldr	r3, [r1, #16]
34023b5a:	b973      	cbnz	r3, 34023b7a <_svfiprintf_r+0x36>
34023b5c:	2140      	movs	r1, #64	@ 0x40
34023b5e:	f7ff fa43 	bl	34022fe8 <_malloc_r>
34023b62:	6028      	str	r0, [r5, #0]
34023b64:	6128      	str	r0, [r5, #16]
34023b66:	b930      	cbnz	r0, 34023b76 <_svfiprintf_r+0x32>
34023b68:	230c      	movs	r3, #12
34023b6a:	603b      	str	r3, [r7, #0]
34023b6c:	f04f 30ff 	mov.w	r0, #4294967295
34023b70:	b01d      	add	sp, #116	@ 0x74
34023b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34023b76:	2340      	movs	r3, #64	@ 0x40
34023b78:	616b      	str	r3, [r5, #20]
34023b7a:	2300      	movs	r3, #0
34023b7c:	f8cd 800c 	str.w	r8, [sp, #12]
34023b80:	f04f 0901 	mov.w	r9, #1
34023b84:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 34023d28 <_svfiprintf_r+0x1e4>
34023b88:	9309      	str	r3, [sp, #36]	@ 0x24
34023b8a:	2320      	movs	r3, #32
34023b8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
34023b90:	2330      	movs	r3, #48	@ 0x30
34023b92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
34023b96:	4623      	mov	r3, r4
34023b98:	469a      	mov	sl, r3
34023b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
34023b9e:	b10a      	cbz	r2, 34023ba4 <_svfiprintf_r+0x60>
34023ba0:	2a25      	cmp	r2, #37	@ 0x25
34023ba2:	d1f9      	bne.n	34023b98 <_svfiprintf_r+0x54>
34023ba4:	ebba 0b04 	subs.w	fp, sl, r4
34023ba8:	d00b      	beq.n	34023bc2 <_svfiprintf_r+0x7e>
34023baa:	465b      	mov	r3, fp
34023bac:	4622      	mov	r2, r4
34023bae:	4629      	mov	r1, r5
34023bb0:	4638      	mov	r0, r7
34023bb2:	f7ff ff6b 	bl	34023a8c <__ssputs_r>
34023bb6:	3001      	adds	r0, #1
34023bb8:	f000 80a7 	beq.w	34023d0a <_svfiprintf_r+0x1c6>
34023bbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34023bbe:	445a      	add	r2, fp
34023bc0:	9209      	str	r2, [sp, #36]	@ 0x24
34023bc2:	f89a 3000 	ldrb.w	r3, [sl]
34023bc6:	2b00      	cmp	r3, #0
34023bc8:	f000 809f 	beq.w	34023d0a <_svfiprintf_r+0x1c6>
34023bcc:	2300      	movs	r3, #0
34023bce:	f04f 32ff 	mov.w	r2, #4294967295
34023bd2:	f10a 0a01 	add.w	sl, sl, #1
34023bd6:	9304      	str	r3, [sp, #16]
34023bd8:	9307      	str	r3, [sp, #28]
34023bda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
34023bde:	931a      	str	r3, [sp, #104]	@ 0x68
34023be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
34023be4:	4654      	mov	r4, sl
34023be6:	2205      	movs	r2, #5
34023be8:	484f      	ldr	r0, [pc, #316]	@ (34023d28 <_svfiprintf_r+0x1e4>)
34023bea:	f814 1b01 	ldrb.w	r1, [r4], #1
34023bee:	f7fe f832 	bl	34021c56 <memchr>
34023bf2:	9a04      	ldr	r2, [sp, #16]
34023bf4:	b9d8      	cbnz	r0, 34023c2e <_svfiprintf_r+0xea>
34023bf6:	06d0      	lsls	r0, r2, #27
34023bf8:	bf44      	itt	mi
34023bfa:	2320      	movmi	r3, #32
34023bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34023c00:	0711      	lsls	r1, r2, #28
34023c02:	bf44      	itt	mi
34023c04:	232b      	movmi	r3, #43	@ 0x2b
34023c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34023c0a:	f89a 3000 	ldrb.w	r3, [sl]
34023c0e:	2b2a      	cmp	r3, #42	@ 0x2a
34023c10:	d015      	beq.n	34023c3e <_svfiprintf_r+0xfa>
34023c12:	9a07      	ldr	r2, [sp, #28]
34023c14:	4654      	mov	r4, sl
34023c16:	2000      	movs	r0, #0
34023c18:	f04f 0c0a 	mov.w	ip, #10
34023c1c:	4621      	mov	r1, r4
34023c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
34023c22:	3b30      	subs	r3, #48	@ 0x30
34023c24:	2b09      	cmp	r3, #9
34023c26:	d94b      	bls.n	34023cc0 <_svfiprintf_r+0x17c>
34023c28:	b1b0      	cbz	r0, 34023c58 <_svfiprintf_r+0x114>
34023c2a:	9207      	str	r2, [sp, #28]
34023c2c:	e014      	b.n	34023c58 <_svfiprintf_r+0x114>
34023c2e:	eba0 0308 	sub.w	r3, r0, r8
34023c32:	46a2      	mov	sl, r4
34023c34:	fa09 f303 	lsl.w	r3, r9, r3
34023c38:	4313      	orrs	r3, r2
34023c3a:	9304      	str	r3, [sp, #16]
34023c3c:	e7d2      	b.n	34023be4 <_svfiprintf_r+0xa0>
34023c3e:	9b03      	ldr	r3, [sp, #12]
34023c40:	1d19      	adds	r1, r3, #4
34023c42:	681b      	ldr	r3, [r3, #0]
34023c44:	2b00      	cmp	r3, #0
34023c46:	9103      	str	r1, [sp, #12]
34023c48:	bfbb      	ittet	lt
34023c4a:	425b      	neglt	r3, r3
34023c4c:	f042 0202 	orrlt.w	r2, r2, #2
34023c50:	9307      	strge	r3, [sp, #28]
34023c52:	9307      	strlt	r3, [sp, #28]
34023c54:	bfb8      	it	lt
34023c56:	9204      	strlt	r2, [sp, #16]
34023c58:	7823      	ldrb	r3, [r4, #0]
34023c5a:	2b2e      	cmp	r3, #46	@ 0x2e
34023c5c:	d10a      	bne.n	34023c74 <_svfiprintf_r+0x130>
34023c5e:	7863      	ldrb	r3, [r4, #1]
34023c60:	2b2a      	cmp	r3, #42	@ 0x2a
34023c62:	d132      	bne.n	34023cca <_svfiprintf_r+0x186>
34023c64:	9b03      	ldr	r3, [sp, #12]
34023c66:	3402      	adds	r4, #2
34023c68:	1d1a      	adds	r2, r3, #4
34023c6a:	681b      	ldr	r3, [r3, #0]
34023c6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
34023c70:	9203      	str	r2, [sp, #12]
34023c72:	9305      	str	r3, [sp, #20]
34023c74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 34023d38 <_svfiprintf_r+0x1f4>
34023c78:	2203      	movs	r2, #3
34023c7a:	7821      	ldrb	r1, [r4, #0]
34023c7c:	4650      	mov	r0, sl
34023c7e:	f7fd ffea 	bl	34021c56 <memchr>
34023c82:	b138      	cbz	r0, 34023c94 <_svfiprintf_r+0x150>
34023c84:	eba0 000a 	sub.w	r0, r0, sl
34023c88:	2240      	movs	r2, #64	@ 0x40
34023c8a:	9b04      	ldr	r3, [sp, #16]
34023c8c:	3401      	adds	r4, #1
34023c8e:	4082      	lsls	r2, r0
34023c90:	4313      	orrs	r3, r2
34023c92:	9304      	str	r3, [sp, #16]
34023c94:	f814 1b01 	ldrb.w	r1, [r4], #1
34023c98:	2206      	movs	r2, #6
34023c9a:	4824      	ldr	r0, [pc, #144]	@ (34023d2c <_svfiprintf_r+0x1e8>)
34023c9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
34023ca0:	f7fd ffd9 	bl	34021c56 <memchr>
34023ca4:	2800      	cmp	r0, #0
34023ca6:	d036      	beq.n	34023d16 <_svfiprintf_r+0x1d2>
34023ca8:	4b21      	ldr	r3, [pc, #132]	@ (34023d30 <_svfiprintf_r+0x1ec>)
34023caa:	bb1b      	cbnz	r3, 34023cf4 <_svfiprintf_r+0x1b0>
34023cac:	9b03      	ldr	r3, [sp, #12]
34023cae:	3307      	adds	r3, #7
34023cb0:	f023 0307 	bic.w	r3, r3, #7
34023cb4:	3308      	adds	r3, #8
34023cb6:	9303      	str	r3, [sp, #12]
34023cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34023cba:	4433      	add	r3, r6
34023cbc:	9309      	str	r3, [sp, #36]	@ 0x24
34023cbe:	e76a      	b.n	34023b96 <_svfiprintf_r+0x52>
34023cc0:	fb0c 3202 	mla	r2, ip, r2, r3
34023cc4:	460c      	mov	r4, r1
34023cc6:	2001      	movs	r0, #1
34023cc8:	e7a8      	b.n	34023c1c <_svfiprintf_r+0xd8>
34023cca:	2300      	movs	r3, #0
34023ccc:	3401      	adds	r4, #1
34023cce:	f04f 0c0a 	mov.w	ip, #10
34023cd2:	4619      	mov	r1, r3
34023cd4:	9305      	str	r3, [sp, #20]
34023cd6:	4620      	mov	r0, r4
34023cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
34023cdc:	3a30      	subs	r2, #48	@ 0x30
34023cde:	2a09      	cmp	r2, #9
34023ce0:	d903      	bls.n	34023cea <_svfiprintf_r+0x1a6>
34023ce2:	2b00      	cmp	r3, #0
34023ce4:	d0c6      	beq.n	34023c74 <_svfiprintf_r+0x130>
34023ce6:	9105      	str	r1, [sp, #20]
34023ce8:	e7c4      	b.n	34023c74 <_svfiprintf_r+0x130>
34023cea:	fb0c 2101 	mla	r1, ip, r1, r2
34023cee:	4604      	mov	r4, r0
34023cf0:	2301      	movs	r3, #1
34023cf2:	e7f0      	b.n	34023cd6 <_svfiprintf_r+0x192>
34023cf4:	ab03      	add	r3, sp, #12
34023cf6:	462a      	mov	r2, r5
34023cf8:	a904      	add	r1, sp, #16
34023cfa:	4638      	mov	r0, r7
34023cfc:	9300      	str	r3, [sp, #0]
34023cfe:	4b0d      	ldr	r3, [pc, #52]	@ (34023d34 <_svfiprintf_r+0x1f0>)
34023d00:	f7fc feb6 	bl	34020a70 <_printf_float>
34023d04:	1c42      	adds	r2, r0, #1
34023d06:	4606      	mov	r6, r0
34023d08:	d1d6      	bne.n	34023cb8 <_svfiprintf_r+0x174>
34023d0a:	89ab      	ldrh	r3, [r5, #12]
34023d0c:	065b      	lsls	r3, r3, #25
34023d0e:	f53f af2d 	bmi.w	34023b6c <_svfiprintf_r+0x28>
34023d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
34023d14:	e72c      	b.n	34023b70 <_svfiprintf_r+0x2c>
34023d16:	ab03      	add	r3, sp, #12
34023d18:	462a      	mov	r2, r5
34023d1a:	a904      	add	r1, sp, #16
34023d1c:	4638      	mov	r0, r7
34023d1e:	9300      	str	r3, [sp, #0]
34023d20:	4b04      	ldr	r3, [pc, #16]	@ (34023d34 <_svfiprintf_r+0x1f0>)
34023d22:	f7fd f931 	bl	34020f88 <_printf_i>
34023d26:	e7ed      	b.n	34023d04 <_svfiprintf_r+0x1c0>
34023d28:	340306f8 	.word	0x340306f8
34023d2c:	34030702 	.word	0x34030702
34023d30:	34020a71 	.word	0x34020a71
34023d34:	34023a8d 	.word	0x34023a8d
34023d38:	340306fe 	.word	0x340306fe

34023d3c <__sfputc_r>:
34023d3c:	6893      	ldr	r3, [r2, #8]
34023d3e:	3b01      	subs	r3, #1
34023d40:	2b00      	cmp	r3, #0
34023d42:	b410      	push	{r4}
34023d44:	6093      	str	r3, [r2, #8]
34023d46:	da08      	bge.n	34023d5a <__sfputc_r+0x1e>
34023d48:	6994      	ldr	r4, [r2, #24]
34023d4a:	42a3      	cmp	r3, r4
34023d4c:	db01      	blt.n	34023d52 <__sfputc_r+0x16>
34023d4e:	290a      	cmp	r1, #10
34023d50:	d103      	bne.n	34023d5a <__sfputc_r+0x1e>
34023d52:	f85d 4b04 	ldr.w	r4, [sp], #4
34023d56:	f7fd bc2f 	b.w	340215b8 <__swbuf_r>
34023d5a:	6813      	ldr	r3, [r2, #0]
34023d5c:	1c58      	adds	r0, r3, #1
34023d5e:	6010      	str	r0, [r2, #0]
34023d60:	4608      	mov	r0, r1
34023d62:	7019      	strb	r1, [r3, #0]
34023d64:	f85d 4b04 	ldr.w	r4, [sp], #4
34023d68:	4770      	bx	lr

34023d6a <__sfputs_r>:
34023d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34023d6c:	4606      	mov	r6, r0
34023d6e:	460f      	mov	r7, r1
34023d70:	4614      	mov	r4, r2
34023d72:	18d5      	adds	r5, r2, r3
34023d74:	42ac      	cmp	r4, r5
34023d76:	d101      	bne.n	34023d7c <__sfputs_r+0x12>
34023d78:	2000      	movs	r0, #0
34023d7a:	e007      	b.n	34023d8c <__sfputs_r+0x22>
34023d7c:	463a      	mov	r2, r7
34023d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
34023d82:	4630      	mov	r0, r6
34023d84:	f7ff ffda 	bl	34023d3c <__sfputc_r>
34023d88:	1c43      	adds	r3, r0, #1
34023d8a:	d1f3      	bne.n	34023d74 <__sfputs_r+0xa>
34023d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

34023d90 <_vfiprintf_r>:
34023d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34023d94:	460d      	mov	r5, r1
34023d96:	b09d      	sub	sp, #116	@ 0x74
34023d98:	4614      	mov	r4, r2
34023d9a:	4698      	mov	r8, r3
34023d9c:	4606      	mov	r6, r0
34023d9e:	b118      	cbz	r0, 34023da8 <_vfiprintf_r+0x18>
34023da0:	6a03      	ldr	r3, [r0, #32]
34023da2:	b90b      	cbnz	r3, 34023da8 <_vfiprintf_r+0x18>
34023da4:	f7fd fa9a 	bl	340212dc <__sinit>
34023da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34023daa:	07d9      	lsls	r1, r3, #31
34023dac:	d405      	bmi.n	34023dba <_vfiprintf_r+0x2a>
34023dae:	89ab      	ldrh	r3, [r5, #12]
34023db0:	059a      	lsls	r2, r3, #22
34023db2:	d402      	bmi.n	34023dba <_vfiprintf_r+0x2a>
34023db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34023db6:	f7fd ff44 	bl	34021c42 <__retarget_lock_acquire_recursive>
34023dba:	89ab      	ldrh	r3, [r5, #12]
34023dbc:	071b      	lsls	r3, r3, #28
34023dbe:	d501      	bpl.n	34023dc4 <_vfiprintf_r+0x34>
34023dc0:	692b      	ldr	r3, [r5, #16]
34023dc2:	b99b      	cbnz	r3, 34023dec <_vfiprintf_r+0x5c>
34023dc4:	4629      	mov	r1, r5
34023dc6:	4630      	mov	r0, r6
34023dc8:	f7fd fc34 	bl	34021634 <__swsetup_r>
34023dcc:	b170      	cbz	r0, 34023dec <_vfiprintf_r+0x5c>
34023dce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34023dd0:	07dc      	lsls	r4, r3, #31
34023dd2:	d504      	bpl.n	34023dde <_vfiprintf_r+0x4e>
34023dd4:	f04f 30ff 	mov.w	r0, #4294967295
34023dd8:	b01d      	add	sp, #116	@ 0x74
34023dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34023dde:	89ab      	ldrh	r3, [r5, #12]
34023de0:	0598      	lsls	r0, r3, #22
34023de2:	d4f7      	bmi.n	34023dd4 <_vfiprintf_r+0x44>
34023de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34023de6:	f7fd ff2d 	bl	34021c44 <__retarget_lock_release_recursive>
34023dea:	e7f3      	b.n	34023dd4 <_vfiprintf_r+0x44>
34023dec:	2300      	movs	r3, #0
34023dee:	f8cd 800c 	str.w	r8, [sp, #12]
34023df2:	f04f 0901 	mov.w	r9, #1
34023df6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 34023fac <_vfiprintf_r+0x21c>
34023dfa:	9309      	str	r3, [sp, #36]	@ 0x24
34023dfc:	2320      	movs	r3, #32
34023dfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
34023e02:	2330      	movs	r3, #48	@ 0x30
34023e04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
34023e08:	4623      	mov	r3, r4
34023e0a:	469a      	mov	sl, r3
34023e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
34023e10:	b10a      	cbz	r2, 34023e16 <_vfiprintf_r+0x86>
34023e12:	2a25      	cmp	r2, #37	@ 0x25
34023e14:	d1f9      	bne.n	34023e0a <_vfiprintf_r+0x7a>
34023e16:	ebba 0b04 	subs.w	fp, sl, r4
34023e1a:	d00b      	beq.n	34023e34 <_vfiprintf_r+0xa4>
34023e1c:	465b      	mov	r3, fp
34023e1e:	4622      	mov	r2, r4
34023e20:	4629      	mov	r1, r5
34023e22:	4630      	mov	r0, r6
34023e24:	f7ff ffa1 	bl	34023d6a <__sfputs_r>
34023e28:	3001      	adds	r0, #1
34023e2a:	f000 80a7 	beq.w	34023f7c <_vfiprintf_r+0x1ec>
34023e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34023e30:	445a      	add	r2, fp
34023e32:	9209      	str	r2, [sp, #36]	@ 0x24
34023e34:	f89a 3000 	ldrb.w	r3, [sl]
34023e38:	2b00      	cmp	r3, #0
34023e3a:	f000 809f 	beq.w	34023f7c <_vfiprintf_r+0x1ec>
34023e3e:	2300      	movs	r3, #0
34023e40:	f04f 32ff 	mov.w	r2, #4294967295
34023e44:	f10a 0a01 	add.w	sl, sl, #1
34023e48:	9304      	str	r3, [sp, #16]
34023e4a:	9307      	str	r3, [sp, #28]
34023e4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
34023e50:	931a      	str	r3, [sp, #104]	@ 0x68
34023e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
34023e56:	4654      	mov	r4, sl
34023e58:	2205      	movs	r2, #5
34023e5a:	4854      	ldr	r0, [pc, #336]	@ (34023fac <_vfiprintf_r+0x21c>)
34023e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
34023e60:	f7fd fef9 	bl	34021c56 <memchr>
34023e64:	9a04      	ldr	r2, [sp, #16]
34023e66:	b9d8      	cbnz	r0, 34023ea0 <_vfiprintf_r+0x110>
34023e68:	06d1      	lsls	r1, r2, #27
34023e6a:	bf44      	itt	mi
34023e6c:	2320      	movmi	r3, #32
34023e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34023e72:	0713      	lsls	r3, r2, #28
34023e74:	bf44      	itt	mi
34023e76:	232b      	movmi	r3, #43	@ 0x2b
34023e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34023e7c:	f89a 3000 	ldrb.w	r3, [sl]
34023e80:	2b2a      	cmp	r3, #42	@ 0x2a
34023e82:	d015      	beq.n	34023eb0 <_vfiprintf_r+0x120>
34023e84:	9a07      	ldr	r2, [sp, #28]
34023e86:	4654      	mov	r4, sl
34023e88:	2000      	movs	r0, #0
34023e8a:	f04f 0c0a 	mov.w	ip, #10
34023e8e:	4621      	mov	r1, r4
34023e90:	f811 3b01 	ldrb.w	r3, [r1], #1
34023e94:	3b30      	subs	r3, #48	@ 0x30
34023e96:	2b09      	cmp	r3, #9
34023e98:	d94b      	bls.n	34023f32 <_vfiprintf_r+0x1a2>
34023e9a:	b1b0      	cbz	r0, 34023eca <_vfiprintf_r+0x13a>
34023e9c:	9207      	str	r2, [sp, #28]
34023e9e:	e014      	b.n	34023eca <_vfiprintf_r+0x13a>
34023ea0:	eba0 0308 	sub.w	r3, r0, r8
34023ea4:	46a2      	mov	sl, r4
34023ea6:	fa09 f303 	lsl.w	r3, r9, r3
34023eaa:	4313      	orrs	r3, r2
34023eac:	9304      	str	r3, [sp, #16]
34023eae:	e7d2      	b.n	34023e56 <_vfiprintf_r+0xc6>
34023eb0:	9b03      	ldr	r3, [sp, #12]
34023eb2:	1d19      	adds	r1, r3, #4
34023eb4:	681b      	ldr	r3, [r3, #0]
34023eb6:	2b00      	cmp	r3, #0
34023eb8:	9103      	str	r1, [sp, #12]
34023eba:	bfbb      	ittet	lt
34023ebc:	425b      	neglt	r3, r3
34023ebe:	f042 0202 	orrlt.w	r2, r2, #2
34023ec2:	9307      	strge	r3, [sp, #28]
34023ec4:	9307      	strlt	r3, [sp, #28]
34023ec6:	bfb8      	it	lt
34023ec8:	9204      	strlt	r2, [sp, #16]
34023eca:	7823      	ldrb	r3, [r4, #0]
34023ecc:	2b2e      	cmp	r3, #46	@ 0x2e
34023ece:	d10a      	bne.n	34023ee6 <_vfiprintf_r+0x156>
34023ed0:	7863      	ldrb	r3, [r4, #1]
34023ed2:	2b2a      	cmp	r3, #42	@ 0x2a
34023ed4:	d132      	bne.n	34023f3c <_vfiprintf_r+0x1ac>
34023ed6:	9b03      	ldr	r3, [sp, #12]
34023ed8:	3402      	adds	r4, #2
34023eda:	1d1a      	adds	r2, r3, #4
34023edc:	681b      	ldr	r3, [r3, #0]
34023ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
34023ee2:	9203      	str	r2, [sp, #12]
34023ee4:	9305      	str	r3, [sp, #20]
34023ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 34023fbc <_vfiprintf_r+0x22c>
34023eea:	2203      	movs	r2, #3
34023eec:	7821      	ldrb	r1, [r4, #0]
34023eee:	4650      	mov	r0, sl
34023ef0:	f7fd feb1 	bl	34021c56 <memchr>
34023ef4:	b138      	cbz	r0, 34023f06 <_vfiprintf_r+0x176>
34023ef6:	eba0 000a 	sub.w	r0, r0, sl
34023efa:	2240      	movs	r2, #64	@ 0x40
34023efc:	9b04      	ldr	r3, [sp, #16]
34023efe:	3401      	adds	r4, #1
34023f00:	4082      	lsls	r2, r0
34023f02:	4313      	orrs	r3, r2
34023f04:	9304      	str	r3, [sp, #16]
34023f06:	f814 1b01 	ldrb.w	r1, [r4], #1
34023f0a:	2206      	movs	r2, #6
34023f0c:	4828      	ldr	r0, [pc, #160]	@ (34023fb0 <_vfiprintf_r+0x220>)
34023f0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
34023f12:	f7fd fea0 	bl	34021c56 <memchr>
34023f16:	2800      	cmp	r0, #0
34023f18:	d03f      	beq.n	34023f9a <_vfiprintf_r+0x20a>
34023f1a:	4b26      	ldr	r3, [pc, #152]	@ (34023fb4 <_vfiprintf_r+0x224>)
34023f1c:	bb1b      	cbnz	r3, 34023f66 <_vfiprintf_r+0x1d6>
34023f1e:	9b03      	ldr	r3, [sp, #12]
34023f20:	3307      	adds	r3, #7
34023f22:	f023 0307 	bic.w	r3, r3, #7
34023f26:	3308      	adds	r3, #8
34023f28:	9303      	str	r3, [sp, #12]
34023f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34023f2c:	443b      	add	r3, r7
34023f2e:	9309      	str	r3, [sp, #36]	@ 0x24
34023f30:	e76a      	b.n	34023e08 <_vfiprintf_r+0x78>
34023f32:	fb0c 3202 	mla	r2, ip, r2, r3
34023f36:	460c      	mov	r4, r1
34023f38:	2001      	movs	r0, #1
34023f3a:	e7a8      	b.n	34023e8e <_vfiprintf_r+0xfe>
34023f3c:	2300      	movs	r3, #0
34023f3e:	3401      	adds	r4, #1
34023f40:	f04f 0c0a 	mov.w	ip, #10
34023f44:	4619      	mov	r1, r3
34023f46:	9305      	str	r3, [sp, #20]
34023f48:	4620      	mov	r0, r4
34023f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
34023f4e:	3a30      	subs	r2, #48	@ 0x30
34023f50:	2a09      	cmp	r2, #9
34023f52:	d903      	bls.n	34023f5c <_vfiprintf_r+0x1cc>
34023f54:	2b00      	cmp	r3, #0
34023f56:	d0c6      	beq.n	34023ee6 <_vfiprintf_r+0x156>
34023f58:	9105      	str	r1, [sp, #20]
34023f5a:	e7c4      	b.n	34023ee6 <_vfiprintf_r+0x156>
34023f5c:	fb0c 2101 	mla	r1, ip, r1, r2
34023f60:	4604      	mov	r4, r0
34023f62:	2301      	movs	r3, #1
34023f64:	e7f0      	b.n	34023f48 <_vfiprintf_r+0x1b8>
34023f66:	ab03      	add	r3, sp, #12
34023f68:	462a      	mov	r2, r5
34023f6a:	a904      	add	r1, sp, #16
34023f6c:	4630      	mov	r0, r6
34023f6e:	9300      	str	r3, [sp, #0]
34023f70:	4b11      	ldr	r3, [pc, #68]	@ (34023fb8 <_vfiprintf_r+0x228>)
34023f72:	f7fc fd7d 	bl	34020a70 <_printf_float>
34023f76:	4607      	mov	r7, r0
34023f78:	1c78      	adds	r0, r7, #1
34023f7a:	d1d6      	bne.n	34023f2a <_vfiprintf_r+0x19a>
34023f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34023f7e:	07d9      	lsls	r1, r3, #31
34023f80:	d405      	bmi.n	34023f8e <_vfiprintf_r+0x1fe>
34023f82:	89ab      	ldrh	r3, [r5, #12]
34023f84:	059a      	lsls	r2, r3, #22
34023f86:	d402      	bmi.n	34023f8e <_vfiprintf_r+0x1fe>
34023f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34023f8a:	f7fd fe5b 	bl	34021c44 <__retarget_lock_release_recursive>
34023f8e:	89ab      	ldrh	r3, [r5, #12]
34023f90:	065b      	lsls	r3, r3, #25
34023f92:	f53f af1f 	bmi.w	34023dd4 <_vfiprintf_r+0x44>
34023f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
34023f98:	e71e      	b.n	34023dd8 <_vfiprintf_r+0x48>
34023f9a:	ab03      	add	r3, sp, #12
34023f9c:	462a      	mov	r2, r5
34023f9e:	a904      	add	r1, sp, #16
34023fa0:	4630      	mov	r0, r6
34023fa2:	9300      	str	r3, [sp, #0]
34023fa4:	4b04      	ldr	r3, [pc, #16]	@ (34023fb8 <_vfiprintf_r+0x228>)
34023fa6:	f7fc ffef 	bl	34020f88 <_printf_i>
34023faa:	e7e4      	b.n	34023f76 <_vfiprintf_r+0x1e6>
34023fac:	340306f8 	.word	0x340306f8
34023fb0:	34030702 	.word	0x34030702
34023fb4:	34020a71 	.word	0x34020a71
34023fb8:	34023d6b 	.word	0x34023d6b
34023fbc:	340306fe 	.word	0x340306fe

34023fc0 <__sflush_r>:
34023fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
34023fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34023fc8:	0716      	lsls	r6, r2, #28
34023fca:	4605      	mov	r5, r0
34023fcc:	460c      	mov	r4, r1
34023fce:	d454      	bmi.n	3402407a <__sflush_r+0xba>
34023fd0:	684b      	ldr	r3, [r1, #4]
34023fd2:	2b00      	cmp	r3, #0
34023fd4:	dc02      	bgt.n	34023fdc <__sflush_r+0x1c>
34023fd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
34023fd8:	2b00      	cmp	r3, #0
34023fda:	dd48      	ble.n	3402406e <__sflush_r+0xae>
34023fdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34023fde:	2e00      	cmp	r6, #0
34023fe0:	d045      	beq.n	3402406e <__sflush_r+0xae>
34023fe2:	2300      	movs	r3, #0
34023fe4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
34023fe8:	682f      	ldr	r7, [r5, #0]
34023fea:	6a21      	ldr	r1, [r4, #32]
34023fec:	602b      	str	r3, [r5, #0]
34023fee:	d030      	beq.n	34024052 <__sflush_r+0x92>
34023ff0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
34023ff2:	89a3      	ldrh	r3, [r4, #12]
34023ff4:	0759      	lsls	r1, r3, #29
34023ff6:	d505      	bpl.n	34024004 <__sflush_r+0x44>
34023ff8:	6863      	ldr	r3, [r4, #4]
34023ffa:	1ad2      	subs	r2, r2, r3
34023ffc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34023ffe:	b10b      	cbz	r3, 34024004 <__sflush_r+0x44>
34024000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34024002:	1ad2      	subs	r2, r2, r3
34024004:	2300      	movs	r3, #0
34024006:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34024008:	6a21      	ldr	r1, [r4, #32]
3402400a:	4628      	mov	r0, r5
3402400c:	47b0      	blx	r6
3402400e:	1c43      	adds	r3, r0, #1
34024010:	89a3      	ldrh	r3, [r4, #12]
34024012:	d106      	bne.n	34024022 <__sflush_r+0x62>
34024014:	6829      	ldr	r1, [r5, #0]
34024016:	291d      	cmp	r1, #29
34024018:	d82b      	bhi.n	34024072 <__sflush_r+0xb2>
3402401a:	4a2a      	ldr	r2, [pc, #168]	@ (340240c4 <__sflush_r+0x104>)
3402401c:	40ca      	lsrs	r2, r1
3402401e:	07d6      	lsls	r6, r2, #31
34024020:	d527      	bpl.n	34024072 <__sflush_r+0xb2>
34024022:	2200      	movs	r2, #0
34024024:	04d9      	lsls	r1, r3, #19
34024026:	6062      	str	r2, [r4, #4]
34024028:	6922      	ldr	r2, [r4, #16]
3402402a:	6022      	str	r2, [r4, #0]
3402402c:	d504      	bpl.n	34024038 <__sflush_r+0x78>
3402402e:	1c42      	adds	r2, r0, #1
34024030:	d101      	bne.n	34024036 <__sflush_r+0x76>
34024032:	682b      	ldr	r3, [r5, #0]
34024034:	b903      	cbnz	r3, 34024038 <__sflush_r+0x78>
34024036:	6560      	str	r0, [r4, #84]	@ 0x54
34024038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3402403a:	602f      	str	r7, [r5, #0]
3402403c:	b1b9      	cbz	r1, 3402406e <__sflush_r+0xae>
3402403e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34024042:	4299      	cmp	r1, r3
34024044:	d002      	beq.n	3402404c <__sflush_r+0x8c>
34024046:	4628      	mov	r0, r5
34024048:	f7fe fc24 	bl	34022894 <_free_r>
3402404c:	2300      	movs	r3, #0
3402404e:	6363      	str	r3, [r4, #52]	@ 0x34
34024050:	e00d      	b.n	3402406e <__sflush_r+0xae>
34024052:	2301      	movs	r3, #1
34024054:	4628      	mov	r0, r5
34024056:	47b0      	blx	r6
34024058:	4602      	mov	r2, r0
3402405a:	1c50      	adds	r0, r2, #1
3402405c:	d1c9      	bne.n	34023ff2 <__sflush_r+0x32>
3402405e:	682b      	ldr	r3, [r5, #0]
34024060:	2b00      	cmp	r3, #0
34024062:	d0c6      	beq.n	34023ff2 <__sflush_r+0x32>
34024064:	2b1d      	cmp	r3, #29
34024066:	d001      	beq.n	3402406c <__sflush_r+0xac>
34024068:	2b16      	cmp	r3, #22
3402406a:	d11d      	bne.n	340240a8 <__sflush_r+0xe8>
3402406c:	602f      	str	r7, [r5, #0]
3402406e:	2000      	movs	r0, #0
34024070:	e021      	b.n	340240b6 <__sflush_r+0xf6>
34024072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34024076:	b21b      	sxth	r3, r3
34024078:	e01a      	b.n	340240b0 <__sflush_r+0xf0>
3402407a:	690f      	ldr	r7, [r1, #16]
3402407c:	2f00      	cmp	r7, #0
3402407e:	d0f6      	beq.n	3402406e <__sflush_r+0xae>
34024080:	0793      	lsls	r3, r2, #30
34024082:	680e      	ldr	r6, [r1, #0]
34024084:	600f      	str	r7, [r1, #0]
34024086:	bf0c      	ite	eq
34024088:	694b      	ldreq	r3, [r1, #20]
3402408a:	2300      	movne	r3, #0
3402408c:	eba6 0807 	sub.w	r8, r6, r7
34024090:	608b      	str	r3, [r1, #8]
34024092:	f1b8 0f00 	cmp.w	r8, #0
34024096:	ddea      	ble.n	3402406e <__sflush_r+0xae>
34024098:	4643      	mov	r3, r8
3402409a:	463a      	mov	r2, r7
3402409c:	6a21      	ldr	r1, [r4, #32]
3402409e:	4628      	mov	r0, r5
340240a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
340240a2:	47b0      	blx	r6
340240a4:	2800      	cmp	r0, #0
340240a6:	dc08      	bgt.n	340240ba <__sflush_r+0xfa>
340240a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340240ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
340240b0:	f04f 30ff 	mov.w	r0, #4294967295
340240b4:	81a3      	strh	r3, [r4, #12]
340240b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340240ba:	4407      	add	r7, r0
340240bc:	eba8 0800 	sub.w	r8, r8, r0
340240c0:	e7e7      	b.n	34024092 <__sflush_r+0xd2>
340240c2:	bf00      	nop
340240c4:	20400001 	.word	0x20400001

340240c8 <_fflush_r>:
340240c8:	b538      	push	{r3, r4, r5, lr}
340240ca:	690b      	ldr	r3, [r1, #16]
340240cc:	4605      	mov	r5, r0
340240ce:	460c      	mov	r4, r1
340240d0:	b913      	cbnz	r3, 340240d8 <_fflush_r+0x10>
340240d2:	2500      	movs	r5, #0
340240d4:	4628      	mov	r0, r5
340240d6:	bd38      	pop	{r3, r4, r5, pc}
340240d8:	b118      	cbz	r0, 340240e2 <_fflush_r+0x1a>
340240da:	6a03      	ldr	r3, [r0, #32]
340240dc:	b90b      	cbnz	r3, 340240e2 <_fflush_r+0x1a>
340240de:	f7fd f8fd 	bl	340212dc <__sinit>
340240e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340240e6:	2b00      	cmp	r3, #0
340240e8:	d0f3      	beq.n	340240d2 <_fflush_r+0xa>
340240ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
340240ec:	07d0      	lsls	r0, r2, #31
340240ee:	d404      	bmi.n	340240fa <_fflush_r+0x32>
340240f0:	0599      	lsls	r1, r3, #22
340240f2:	d402      	bmi.n	340240fa <_fflush_r+0x32>
340240f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340240f6:	f7fd fda4 	bl	34021c42 <__retarget_lock_acquire_recursive>
340240fa:	4628      	mov	r0, r5
340240fc:	4621      	mov	r1, r4
340240fe:	f7ff ff5f 	bl	34023fc0 <__sflush_r>
34024102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34024104:	4605      	mov	r5, r0
34024106:	07da      	lsls	r2, r3, #31
34024108:	d4e4      	bmi.n	340240d4 <_fflush_r+0xc>
3402410a:	89a3      	ldrh	r3, [r4, #12]
3402410c:	059b      	lsls	r3, r3, #22
3402410e:	d4e1      	bmi.n	340240d4 <_fflush_r+0xc>
34024110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34024112:	f7fd fd97 	bl	34021c44 <__retarget_lock_release_recursive>
34024116:	e7dd      	b.n	340240d4 <_fflush_r+0xc>

34024118 <__swhatbuf_r>:
34024118:	b570      	push	{r4, r5, r6, lr}
3402411a:	460c      	mov	r4, r1
3402411c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34024120:	b096      	sub	sp, #88	@ 0x58
34024122:	4615      	mov	r5, r2
34024124:	2900      	cmp	r1, #0
34024126:	461e      	mov	r6, r3
34024128:	da0c      	bge.n	34024144 <__swhatbuf_r+0x2c>
3402412a:	89a3      	ldrh	r3, [r4, #12]
3402412c:	2100      	movs	r1, #0
3402412e:	f013 0f80 	tst.w	r3, #128	@ 0x80
34024132:	bf14      	ite	ne
34024134:	2340      	movne	r3, #64	@ 0x40
34024136:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3402413a:	2000      	movs	r0, #0
3402413c:	6031      	str	r1, [r6, #0]
3402413e:	602b      	str	r3, [r5, #0]
34024140:	b016      	add	sp, #88	@ 0x58
34024142:	bd70      	pop	{r4, r5, r6, pc}
34024144:	466a      	mov	r2, sp
34024146:	f000 f879 	bl	3402423c <_fstat_r>
3402414a:	2800      	cmp	r0, #0
3402414c:	dbed      	blt.n	3402412a <__swhatbuf_r+0x12>
3402414e:	9901      	ldr	r1, [sp, #4]
34024150:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
34024154:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
34024158:	4259      	negs	r1, r3
3402415a:	4159      	adcs	r1, r3
3402415c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34024160:	e7eb      	b.n	3402413a <__swhatbuf_r+0x22>

34024162 <__smakebuf_r>:
34024162:	898b      	ldrh	r3, [r1, #12]
34024164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34024166:	079d      	lsls	r5, r3, #30
34024168:	4606      	mov	r6, r0
3402416a:	460c      	mov	r4, r1
3402416c:	d507      	bpl.n	3402417e <__smakebuf_r+0x1c>
3402416e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
34024172:	6023      	str	r3, [r4, #0]
34024174:	6123      	str	r3, [r4, #16]
34024176:	2301      	movs	r3, #1
34024178:	6163      	str	r3, [r4, #20]
3402417a:	b003      	add	sp, #12
3402417c:	bdf0      	pop	{r4, r5, r6, r7, pc}
3402417e:	ab01      	add	r3, sp, #4
34024180:	466a      	mov	r2, sp
34024182:	f7ff ffc9 	bl	34024118 <__swhatbuf_r>
34024186:	9f00      	ldr	r7, [sp, #0]
34024188:	4605      	mov	r5, r0
3402418a:	4630      	mov	r0, r6
3402418c:	4639      	mov	r1, r7
3402418e:	f7fe ff2b 	bl	34022fe8 <_malloc_r>
34024192:	b948      	cbnz	r0, 340241a8 <__smakebuf_r+0x46>
34024194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34024198:	059a      	lsls	r2, r3, #22
3402419a:	d4ee      	bmi.n	3402417a <__smakebuf_r+0x18>
3402419c:	f023 0303 	bic.w	r3, r3, #3
340241a0:	f043 0302 	orr.w	r3, r3, #2
340241a4:	81a3      	strh	r3, [r4, #12]
340241a6:	e7e2      	b.n	3402416e <__smakebuf_r+0xc>
340241a8:	89a3      	ldrh	r3, [r4, #12]
340241aa:	6020      	str	r0, [r4, #0]
340241ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
340241b0:	81a3      	strh	r3, [r4, #12]
340241b2:	9b01      	ldr	r3, [sp, #4]
340241b4:	e9c4 0704 	strd	r0, r7, [r4, #16]
340241b8:	b15b      	cbz	r3, 340241d2 <__smakebuf_r+0x70>
340241ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
340241be:	4630      	mov	r0, r6
340241c0:	f000 f84e 	bl	34024260 <_isatty_r>
340241c4:	b128      	cbz	r0, 340241d2 <__smakebuf_r+0x70>
340241c6:	89a3      	ldrh	r3, [r4, #12]
340241c8:	f023 0303 	bic.w	r3, r3, #3
340241cc:	f043 0301 	orr.w	r3, r3, #1
340241d0:	81a3      	strh	r3, [r4, #12]
340241d2:	89a3      	ldrh	r3, [r4, #12]
340241d4:	431d      	orrs	r5, r3
340241d6:	81a5      	strh	r5, [r4, #12]
340241d8:	e7cf      	b.n	3402417a <__smakebuf_r+0x18>

340241da <_raise_r>:
340241da:	291f      	cmp	r1, #31
340241dc:	b538      	push	{r3, r4, r5, lr}
340241de:	4605      	mov	r5, r0
340241e0:	460c      	mov	r4, r1
340241e2:	d904      	bls.n	340241ee <_raise_r+0x14>
340241e4:	2316      	movs	r3, #22
340241e6:	6003      	str	r3, [r0, #0]
340241e8:	f04f 30ff 	mov.w	r0, #4294967295
340241ec:	bd38      	pop	{r3, r4, r5, pc}
340241ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
340241f0:	b112      	cbz	r2, 340241f8 <_raise_r+0x1e>
340241f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
340241f6:	b94b      	cbnz	r3, 3402420c <_raise_r+0x32>
340241f8:	4628      	mov	r0, r5
340241fa:	f000 f853 	bl	340242a4 <_getpid_r>
340241fe:	4622      	mov	r2, r4
34024200:	4601      	mov	r1, r0
34024202:	4628      	mov	r0, r5
34024204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34024208:	f000 b83a 	b.w	34024280 <_kill_r>
3402420c:	2b01      	cmp	r3, #1
3402420e:	d00a      	beq.n	34024226 <_raise_r+0x4c>
34024210:	1c59      	adds	r1, r3, #1
34024212:	d103      	bne.n	3402421c <_raise_r+0x42>
34024214:	2316      	movs	r3, #22
34024216:	6003      	str	r3, [r0, #0]
34024218:	2001      	movs	r0, #1
3402421a:	e7e7      	b.n	340241ec <_raise_r+0x12>
3402421c:	2100      	movs	r1, #0
3402421e:	4620      	mov	r0, r4
34024220:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
34024224:	4798      	blx	r3
34024226:	2000      	movs	r0, #0
34024228:	e7e0      	b.n	340241ec <_raise_r+0x12>
	...

3402422c <raise>:
3402422c:	4b02      	ldr	r3, [pc, #8]	@ (34024238 <raise+0xc>)
3402422e:	4601      	mov	r1, r0
34024230:	6818      	ldr	r0, [r3, #0]
34024232:	f7ff bfd2 	b.w	340241da <_raise_r>
34024236:	bf00      	nop
34024238:	340d0a3c 	.word	0x340d0a3c

3402423c <_fstat_r>:
3402423c:	b538      	push	{r3, r4, r5, lr}
3402423e:	2300      	movs	r3, #0
34024240:	4d06      	ldr	r5, [pc, #24]	@ (3402425c <_fstat_r+0x20>)
34024242:	4604      	mov	r4, r0
34024244:	4608      	mov	r0, r1
34024246:	4611      	mov	r1, r2
34024248:	602b      	str	r3, [r5, #0]
3402424a:	f7dd ff28 	bl	3400209e <_fstat>
3402424e:	1c43      	adds	r3, r0, #1
34024250:	d102      	bne.n	34024258 <_fstat_r+0x1c>
34024252:	682b      	ldr	r3, [r5, #0]
34024254:	b103      	cbz	r3, 34024258 <_fstat_r+0x1c>
34024256:	6023      	str	r3, [r4, #0]
34024258:	bd38      	pop	{r3, r4, r5, pc}
3402425a:	bf00      	nop
3402425c:	340e5d28 	.word	0x340e5d28

34024260 <_isatty_r>:
34024260:	b538      	push	{r3, r4, r5, lr}
34024262:	2300      	movs	r3, #0
34024264:	4d05      	ldr	r5, [pc, #20]	@ (3402427c <_isatty_r+0x1c>)
34024266:	4604      	mov	r4, r0
34024268:	4608      	mov	r0, r1
3402426a:	602b      	str	r3, [r5, #0]
3402426c:	f7dd ff1c 	bl	340020a8 <_isatty>
34024270:	1c43      	adds	r3, r0, #1
34024272:	d102      	bne.n	3402427a <_isatty_r+0x1a>
34024274:	682b      	ldr	r3, [r5, #0]
34024276:	b103      	cbz	r3, 3402427a <_isatty_r+0x1a>
34024278:	6023      	str	r3, [r4, #0]
3402427a:	bd38      	pop	{r3, r4, r5, pc}
3402427c:	340e5d28 	.word	0x340e5d28

34024280 <_kill_r>:
34024280:	b538      	push	{r3, r4, r5, lr}
34024282:	2300      	movs	r3, #0
34024284:	4d06      	ldr	r5, [pc, #24]	@ (340242a0 <_kill_r+0x20>)
34024286:	4604      	mov	r4, r0
34024288:	4608      	mov	r0, r1
3402428a:	4611      	mov	r1, r2
3402428c:	602b      	str	r3, [r5, #0]
3402428e:	f7dd fee7 	bl	34002060 <_kill>
34024292:	1c43      	adds	r3, r0, #1
34024294:	d102      	bne.n	3402429c <_kill_r+0x1c>
34024296:	682b      	ldr	r3, [r5, #0]
34024298:	b103      	cbz	r3, 3402429c <_kill_r+0x1c>
3402429a:	6023      	str	r3, [r4, #0]
3402429c:	bd38      	pop	{r3, r4, r5, pc}
3402429e:	bf00      	nop
340242a0:	340e5d28 	.word	0x340e5d28

340242a4 <_getpid_r>:
340242a4:	f7dd beda 	b.w	3400205c <_getpid>

340242a8 <_sbrk_r>:
340242a8:	b538      	push	{r3, r4, r5, lr}
340242aa:	2300      	movs	r3, #0
340242ac:	4d05      	ldr	r5, [pc, #20]	@ (340242c4 <_sbrk_r+0x1c>)
340242ae:	4604      	mov	r4, r0
340242b0:	4608      	mov	r0, r1
340242b2:	602b      	str	r3, [r5, #0]
340242b4:	f002 f972 	bl	3402659c <_sbrk>
340242b8:	1c43      	adds	r3, r0, #1
340242ba:	d102      	bne.n	340242c2 <_sbrk_r+0x1a>
340242bc:	682b      	ldr	r3, [r5, #0]
340242be:	b103      	cbz	r3, 340242c2 <_sbrk_r+0x1a>
340242c0:	6023      	str	r3, [r4, #0]
340242c2:	bd38      	pop	{r3, r4, r5, pc}
340242c4:	340e5d28 	.word	0x340e5d28

340242c8 <_calloc_r>:
340242c8:	b570      	push	{r4, r5, r6, lr}
340242ca:	fba1 5402 	umull	r5, r4, r1, r2
340242ce:	b934      	cbnz	r4, 340242de <_calloc_r+0x16>
340242d0:	4629      	mov	r1, r5
340242d2:	f7fe fe89 	bl	34022fe8 <_malloc_r>
340242d6:	4606      	mov	r6, r0
340242d8:	b928      	cbnz	r0, 340242e6 <_calloc_r+0x1e>
340242da:	4630      	mov	r0, r6
340242dc:	bd70      	pop	{r4, r5, r6, pc}
340242de:	220c      	movs	r2, #12
340242e0:	2600      	movs	r6, #0
340242e2:	6002      	str	r2, [r0, #0]
340242e4:	e7f9      	b.n	340242da <_calloc_r+0x12>
340242e6:	462a      	mov	r2, r5
340242e8:	4621      	mov	r1, r4
340242ea:	f7fd fa13 	bl	34021714 <memset>
340242ee:	e7f4      	b.n	340242da <_calloc_r+0x12>

340242f0 <_realloc_r>:
340242f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340242f4:	4607      	mov	r7, r0
340242f6:	4614      	mov	r4, r2
340242f8:	460d      	mov	r5, r1
340242fa:	b921      	cbnz	r1, 34024306 <_realloc_r+0x16>
340242fc:	4611      	mov	r1, r2
340242fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34024302:	f7fe be71 	b.w	34022fe8 <_malloc_r>
34024306:	b92a      	cbnz	r2, 34024314 <_realloc_r+0x24>
34024308:	4625      	mov	r5, r4
3402430a:	f7fe fac3 	bl	34022894 <_free_r>
3402430e:	4628      	mov	r0, r5
34024310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34024314:	f000 f81a 	bl	3402434c <_malloc_usable_size_r>
34024318:	4284      	cmp	r4, r0
3402431a:	4606      	mov	r6, r0
3402431c:	d802      	bhi.n	34024324 <_realloc_r+0x34>
3402431e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
34024322:	d8f4      	bhi.n	3402430e <_realloc_r+0x1e>
34024324:	4621      	mov	r1, r4
34024326:	4638      	mov	r0, r7
34024328:	f7fe fe5e 	bl	34022fe8 <_malloc_r>
3402432c:	4680      	mov	r8, r0
3402432e:	b908      	cbnz	r0, 34024334 <_realloc_r+0x44>
34024330:	4645      	mov	r5, r8
34024332:	e7ec      	b.n	3402430e <_realloc_r+0x1e>
34024334:	42b4      	cmp	r4, r6
34024336:	4622      	mov	r2, r4
34024338:	4629      	mov	r1, r5
3402433a:	bf28      	it	cs
3402433c:	4632      	movcs	r2, r6
3402433e:	f7fd fc98 	bl	34021c72 <memcpy>
34024342:	4629      	mov	r1, r5
34024344:	4638      	mov	r0, r7
34024346:	f7fe faa5 	bl	34022894 <_free_r>
3402434a:	e7f1      	b.n	34024330 <_realloc_r+0x40>

3402434c <_malloc_usable_size_r>:
3402434c:	f851 3c04 	ldr.w	r3, [r1, #-4]
34024350:	1f18      	subs	r0, r3, #4
34024352:	2b00      	cmp	r3, #0
34024354:	bfbc      	itt	lt
34024356:	580b      	ldrlt	r3, [r1, r0]
34024358:	18c0      	addlt	r0, r0, r3
3402435a:	4770      	bx	lr
3402435c:	0000      	movs	r0, r0
	...

34024360 <log10>:
34024360:	b508      	push	{r3, lr}
34024362:	ed2d 8b02 	vpush	{d8}
34024366:	eeb0 8b40 	vmov.f64	d8, d0
3402436a:	f001 f909 	bl	34025580 <__ieee754_log10>
3402436e:	eeb4 8b48 	vcmp.f64	d8, d8
34024372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024376:	d60f      	bvs.n	34024398 <log10+0x38>
34024378:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
3402437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024380:	d80a      	bhi.n	34024398 <log10+0x38>
34024382:	eeb5 8b40 	vcmp.f64	d8, #0.0
34024386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402438a:	d108      	bne.n	3402439e <log10+0x3e>
3402438c:	f7fd fc2e 	bl	34021bec <__errno>
34024390:	2322      	movs	r3, #34	@ 0x22
34024392:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 340243b8 <log10+0x58>
34024396:	6003      	str	r3, [r0, #0]
34024398:	ecbd 8b02 	vpop	{d8}
3402439c:	bd08      	pop	{r3, pc}
3402439e:	f7fd fc25 	bl	34021bec <__errno>
340243a2:	2321      	movs	r3, #33	@ 0x21
340243a4:	ecbd 8b02 	vpop	{d8}
340243a8:	6003      	str	r3, [r0, #0]
340243aa:	4805      	ldr	r0, [pc, #20]	@ (340243c0 <log10+0x60>)
340243ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
340243b0:	f7fd bc6e 	b.w	34021c90 <nan>
340243b4:	f3af 8000 	nop.w
340243b8:	00000000 	.word	0x00000000
340243bc:	fff00000 	.word	0xfff00000
340243c0:	3402b16a 	.word	0x3402b16a
340243c4:	00000000 	.word	0x00000000

340243c8 <cos>:
340243c8:	eeb0 7b40 	vmov.f64	d7, d0
340243cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
340243ce:	ee17 3a90 	vmov	r3, s15
340243d2:	4a21      	ldr	r2, [pc, #132]	@ (34024458 <cos+0x90>)
340243d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
340243d8:	4293      	cmp	r3, r2
340243da:	d806      	bhi.n	340243ea <cos+0x22>
340243dc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 34024450 <cos+0x88>
340243e0:	b005      	add	sp, #20
340243e2:	f85d eb04 	ldr.w	lr, [sp], #4
340243e6:	f001 b80b 	b.w	34025400 <__kernel_cos>
340243ea:	4a1c      	ldr	r2, [pc, #112]	@ (3402445c <cos+0x94>)
340243ec:	4293      	cmp	r3, r2
340243ee:	d904      	bls.n	340243fa <cos+0x32>
340243f0:	ee30 0b40 	vsub.f64	d0, d0, d0
340243f4:	b005      	add	sp, #20
340243f6:	f85d fb04 	ldr.w	pc, [sp], #4
340243fa:	4668      	mov	r0, sp
340243fc:	f001 f930 	bl	34025660 <__ieee754_rem_pio2>
34024400:	f000 0003 	and.w	r0, r0, #3
34024404:	2801      	cmp	r0, #1
34024406:	d009      	beq.n	3402441c <cos+0x54>
34024408:	2802      	cmp	r0, #2
3402440a:	d010      	beq.n	3402442e <cos+0x66>
3402440c:	b9b0      	cbnz	r0, 3402443c <cos+0x74>
3402440e:	ed9d 1b02 	vldr	d1, [sp, #8]
34024412:	ed9d 0b00 	vldr	d0, [sp]
34024416:	f000 fff3 	bl	34025400 <__kernel_cos>
3402441a:	e7eb      	b.n	340243f4 <cos+0x2c>
3402441c:	ed9d 1b02 	vldr	d1, [sp, #8]
34024420:	ed9d 0b00 	vldr	d0, [sp]
34024424:	f001 f854 	bl	340254d0 <__kernel_sin>
34024428:	eeb1 0b40 	vneg.f64	d0, d0
3402442c:	e7e2      	b.n	340243f4 <cos+0x2c>
3402442e:	ed9d 1b02 	vldr	d1, [sp, #8]
34024432:	ed9d 0b00 	vldr	d0, [sp]
34024436:	f000 ffe3 	bl	34025400 <__kernel_cos>
3402443a:	e7f5      	b.n	34024428 <cos+0x60>
3402443c:	ed9d 1b02 	vldr	d1, [sp, #8]
34024440:	ed9d 0b00 	vldr	d0, [sp]
34024444:	2001      	movs	r0, #1
34024446:	f001 f843 	bl	340254d0 <__kernel_sin>
3402444a:	e7d3      	b.n	340243f4 <cos+0x2c>
3402444c:	f3af 8000 	nop.w
	...
34024458:	3fe921fb 	.word	0x3fe921fb
3402445c:	7fefffff 	.word	0x7fefffff

34024460 <sin>:
34024460:	eeb0 7b40 	vmov.f64	d7, d0
34024464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
34024466:	ee17 3a90 	vmov	r3, s15
3402446a:	4a21      	ldr	r2, [pc, #132]	@ (340244f0 <sin+0x90>)
3402446c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34024470:	4293      	cmp	r3, r2
34024472:	d807      	bhi.n	34024484 <sin+0x24>
34024474:	2000      	movs	r0, #0
34024476:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 340244e8 <sin+0x88>
3402447a:	b005      	add	sp, #20
3402447c:	f85d eb04 	ldr.w	lr, [sp], #4
34024480:	f001 b826 	b.w	340254d0 <__kernel_sin>
34024484:	4a1b      	ldr	r2, [pc, #108]	@ (340244f4 <sin+0x94>)
34024486:	4293      	cmp	r3, r2
34024488:	d904      	bls.n	34024494 <sin+0x34>
3402448a:	ee30 0b40 	vsub.f64	d0, d0, d0
3402448e:	b005      	add	sp, #20
34024490:	f85d fb04 	ldr.w	pc, [sp], #4
34024494:	4668      	mov	r0, sp
34024496:	f001 f8e3 	bl	34025660 <__ieee754_rem_pio2>
3402449a:	f000 0003 	and.w	r0, r0, #3
3402449e:	2801      	cmp	r0, #1
340244a0:	d00a      	beq.n	340244b8 <sin+0x58>
340244a2:	2802      	cmp	r0, #2
340244a4:	d00f      	beq.n	340244c6 <sin+0x66>
340244a6:	b9c0      	cbnz	r0, 340244da <sin+0x7a>
340244a8:	2001      	movs	r0, #1
340244aa:	ed9d 1b02 	vldr	d1, [sp, #8]
340244ae:	ed9d 0b00 	vldr	d0, [sp]
340244b2:	f001 f80d 	bl	340254d0 <__kernel_sin>
340244b6:	e7ea      	b.n	3402448e <sin+0x2e>
340244b8:	ed9d 1b02 	vldr	d1, [sp, #8]
340244bc:	ed9d 0b00 	vldr	d0, [sp]
340244c0:	f000 ff9e 	bl	34025400 <__kernel_cos>
340244c4:	e7e3      	b.n	3402448e <sin+0x2e>
340244c6:	ed9d 1b02 	vldr	d1, [sp, #8]
340244ca:	ed9d 0b00 	vldr	d0, [sp]
340244ce:	2001      	movs	r0, #1
340244d0:	f000 fffe 	bl	340254d0 <__kernel_sin>
340244d4:	eeb1 0b40 	vneg.f64	d0, d0
340244d8:	e7d9      	b.n	3402448e <sin+0x2e>
340244da:	ed9d 1b02 	vldr	d1, [sp, #8]
340244de:	ed9d 0b00 	vldr	d0, [sp]
340244e2:	f000 ff8d 	bl	34025400 <__kernel_cos>
340244e6:	e7f5      	b.n	340244d4 <sin+0x74>
	...
340244f0:	3fe921fb 	.word	0x3fe921fb
340244f4:	7fefffff 	.word	0x7fefffff

340244f8 <acosf>:
340244f8:	b508      	push	{r3, lr}
340244fa:	ed2d 8b02 	vpush	{d8}
340244fe:	eeb0 8a40 	vmov.f32	s16, s0
34024502:	f001 f9f9 	bl	340258f8 <__ieee754_acosf>
34024506:	eef0 8a40 	vmov.f32	s17, s0
3402450a:	eeb4 8a48 	vcmp.f32	s16, s16
3402450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024512:	d615      	bvs.n	34024540 <acosf+0x48>
34024514:	eeb0 0a48 	vmov.f32	s0, s16
34024518:	f000 f83a 	bl	34024590 <fabsf>
3402451c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34024520:	eeb4 0ae7 	vcmpe.f32	s0, s15
34024524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024528:	dd0a      	ble.n	34024540 <acosf+0x48>
3402452a:	f7fd fb5f 	bl	34021bec <__errno>
3402452e:	2321      	movs	r3, #33	@ 0x21
34024530:	ecbd 8b02 	vpop	{d8}
34024534:	6003      	str	r3, [r0, #0]
34024536:	4805      	ldr	r0, [pc, #20]	@ (3402454c <acosf+0x54>)
34024538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
3402453c:	f7fd bbb0 	b.w	34021ca0 <nanf>
34024540:	eeb0 0a68 	vmov.f32	s0, s17
34024544:	ecbd 8b02 	vpop	{d8}
34024548:	bd08      	pop	{r3, pc}
3402454a:	bf00      	nop
3402454c:	3402b16a 	.word	0x3402b16a

34024550 <atan2f>:
34024550:	f001 bac8 	b.w	34025ae4 <__ieee754_atan2f>

34024554 <sqrtf>:
34024554:	b508      	push	{r3, lr}
34024556:	ed2d 8b02 	vpush	{d8}
3402455a:	eeb0 8a40 	vmov.f32	s16, s0
3402455e:	f000 ff4c 	bl	340253fa <__ieee754_sqrtf>
34024562:	eeb4 8a48 	vcmp.f32	s16, s16
34024566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402456a:	d60c      	bvs.n	34024586 <sqrtf+0x32>
3402456c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 3402458c <sqrtf+0x38>
34024570:	eeb4 8ae8 	vcmpe.f32	s16, s17
34024574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024578:	d505      	bpl.n	34024586 <sqrtf+0x32>
3402457a:	f7fd fb37 	bl	34021bec <__errno>
3402457e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
34024582:	2321      	movs	r3, #33	@ 0x21
34024584:	6003      	str	r3, [r0, #0]
34024586:	ecbd 8b02 	vpop	{d8}
3402458a:	bd08      	pop	{r3, pc}
3402458c:	00000000 	.word	0x00000000

34024590 <fabsf>:
34024590:	ee10 3a10 	vmov	r3, s0
34024594:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34024598:	ee00 3a10 	vmov	s0, r3
3402459c:	4770      	bx	lr

3402459e <with_errno>:
3402459e:	b510      	push	{r4, lr}
340245a0:	ed2d 8b02 	vpush	{d8}
340245a4:	eeb0 8b40 	vmov.f64	d8, d0
340245a8:	4604      	mov	r4, r0
340245aa:	f7fd fb1f 	bl	34021bec <__errno>
340245ae:	6004      	str	r4, [r0, #0]
340245b0:	eeb0 0b48 	vmov.f64	d0, d8
340245b4:	ecbd 8b02 	vpop	{d8}
340245b8:	bd10      	pop	{r4, pc}

340245ba <xflow>:
340245ba:	b082      	sub	sp, #8
340245bc:	b158      	cbz	r0, 340245d6 <xflow+0x1c>
340245be:	eeb1 7b40 	vneg.f64	d7, d0
340245c2:	2022      	movs	r0, #34	@ 0x22
340245c4:	ed8d 7b00 	vstr	d7, [sp]
340245c8:	ed9d 7b00 	vldr	d7, [sp]
340245cc:	ee20 0b07 	vmul.f64	d0, d0, d7
340245d0:	b002      	add	sp, #8
340245d2:	f7ff bfe4 	b.w	3402459e <with_errno>
340245d6:	eeb0 7b40 	vmov.f64	d7, d0
340245da:	e7f2      	b.n	340245c2 <xflow+0x8>
340245dc:	0000      	movs	r0, r0
	...

340245e0 <__math_uflow>:
340245e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 340245e8 <__math_uflow+0x8>
340245e4:	f7ff bfe9 	b.w	340245ba <xflow>
340245e8:	00000000 	.word	0x00000000
340245ec:	10000000 	.word	0x10000000

340245f0 <__math_oflow>:
340245f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 340245f8 <__math_oflow+0x8>
340245f4:	f7ff bfe1 	b.w	340245ba <xflow>
340245f8:	00000000 	.word	0x00000000
340245fc:	70000000 	.word	0x70000000

34024600 <__math_divzero>:
34024600:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
34024604:	b082      	sub	sp, #8
34024606:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
3402460a:	2800      	cmp	r0, #0
3402460c:	f04f 0022 	mov.w	r0, #34	@ 0x22
34024610:	fe07 7b06 	vseleq.f64	d7, d7, d6
34024614:	ed8d 7b00 	vstr	d7, [sp]
34024618:	ed9d 0b00 	vldr	d0, [sp]
3402461c:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 34024630 <__math_divzero+0x30>
34024620:	ee80 0b07 	vdiv.f64	d0, d0, d7
34024624:	b002      	add	sp, #8
34024626:	f7ff bfba 	b.w	3402459e <with_errno>
3402462a:	bf00      	nop
3402462c:	f3af 8000 	nop.w
	...

34024638 <__math_invalid>:
34024638:	eeb0 7b40 	vmov.f64	d7, d0
3402463c:	ee30 6b40 	vsub.f64	d6, d0, d0
34024640:	eeb4 7b47 	vcmp.f64	d7, d7
34024644:	ee86 0b06 	vdiv.f64	d0, d6, d6
34024648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402464c:	d602      	bvs.n	34024654 <__math_invalid+0x1c>
3402464e:	2021      	movs	r0, #33	@ 0x21
34024650:	f7ff bfa5 	b.w	3402459e <with_errno>
34024654:	4770      	bx	lr

34024656 <__math_check_uflow>:
34024656:	eeb5 0b40 	vcmp.f64	d0, #0.0
3402465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402465e:	d102      	bne.n	34024666 <__math_check_uflow+0x10>
34024660:	2022      	movs	r0, #34	@ 0x22
34024662:	f7ff bf9c 	b.w	3402459e <with_errno>
34024666:	4770      	bx	lr

34024668 <__math_check_oflow>:
34024668:	eeb0 7bc0 	vabs.f64	d7, d0
3402466c:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 34024688 <__math_check_oflow+0x20>
34024670:	eeb4 7b46 	vcmp.f64	d7, d6
34024674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024678:	dd02      	ble.n	34024680 <__math_check_oflow+0x18>
3402467a:	2022      	movs	r0, #34	@ 0x22
3402467c:	f7ff bf8f 	b.w	3402459e <with_errno>
34024680:	4770      	bx	lr
34024682:	bf00      	nop
34024684:	f3af 8000 	nop.w
34024688:	ffffffff 	.word	0xffffffff
3402468c:	7fefffff 	.word	0x7fefffff

34024690 <checkint>:
34024690:	f3c1 520a 	ubfx	r2, r1, #20, #11
34024694:	f240 33fe 	movw	r3, #1022	@ 0x3fe
34024698:	429a      	cmp	r2, r3
3402469a:	b570      	push	{r4, r5, r6, lr}
3402469c:	dd2a      	ble.n	340246f4 <checkint+0x64>
3402469e:	f240 4333 	movw	r3, #1075	@ 0x433
340246a2:	429a      	cmp	r2, r3
340246a4:	dc24      	bgt.n	340246f0 <checkint+0x60>
340246a6:	1a9b      	subs	r3, r3, r2
340246a8:	f04f 32ff 	mov.w	r2, #4294967295
340246ac:	f1a3 0620 	sub.w	r6, r3, #32
340246b0:	fa02 f403 	lsl.w	r4, r2, r3
340246b4:	f1c3 0520 	rsb	r5, r3, #32
340246b8:	fa02 f606 	lsl.w	r6, r2, r6
340246bc:	fa22 f505 	lsr.w	r5, r2, r5
340246c0:	409a      	lsls	r2, r3
340246c2:	4334      	orrs	r4, r6
340246c4:	ea20 0202 	bic.w	r2, r0, r2
340246c8:	432c      	orrs	r4, r5
340246ca:	ea21 0404 	bic.w	r4, r1, r4
340246ce:	4322      	orrs	r2, r4
340246d0:	f1a3 0420 	sub.w	r4, r3, #32
340246d4:	f1c3 0220 	rsb	r2, r3, #32
340246d8:	d10c      	bne.n	340246f4 <checkint+0x64>
340246da:	40d8      	lsrs	r0, r3
340246dc:	fa01 f302 	lsl.w	r3, r1, r2
340246e0:	40e1      	lsrs	r1, r4
340246e2:	4318      	orrs	r0, r3
340246e4:	4308      	orrs	r0, r1
340246e6:	f000 0001 	and.w	r0, r0, #1
340246ea:	f1d0 0002 	rsbs	r0, r0, #2
340246ee:	bd70      	pop	{r4, r5, r6, pc}
340246f0:	2002      	movs	r0, #2
340246f2:	e7fc      	b.n	340246ee <checkint+0x5e>
340246f4:	2000      	movs	r0, #0
340246f6:	e7fa      	b.n	340246ee <checkint+0x5e>

340246f8 <pow>:
340246f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340246fc:	ee10 4a90 	vmov	r4, s1
34024700:	f240 73fd 	movw	r3, #2045	@ 0x7fd
34024704:	ee11 aa90 	vmov	sl, s3
34024708:	ee10 5a10 	vmov	r5, s0
3402470c:	ea4f 5814 	mov.w	r8, r4, lsr #20
34024710:	ee11 0a10 	vmov	r0, s2
34024714:	ea4f 561a 	mov.w	r6, sl, lsr #20
34024718:	f108 32ff 	add.w	r2, r8, #4294967295
3402471c:	46c4      	mov	ip, r8
3402471e:	429a      	cmp	r2, r3
34024720:	ed2d 8b0a 	vpush	{d8-d12}
34024724:	b087      	sub	sp, #28
34024726:	d806      	bhi.n	34024736 <pow+0x3e>
34024728:	f3c6 030a 	ubfx	r3, r6, #0, #11
3402472c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
34024730:	2b7f      	cmp	r3, #127	@ 0x7f
34024732:	f240 8157 	bls.w	340249e4 <pow+0x2ec>
34024736:	1802      	adds	r2, r0, r0
34024738:	f06f 0b01 	mvn.w	fp, #1
3402473c:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
34024740:	eb4a 010a 	adc.w	r1, sl, sl
34024744:	1e57      	subs	r7, r2, #1
34024746:	f141 33ff 	adc.w	r3, r1, #4294967295
3402474a:	45bb      	cmp	fp, r7
3402474c:	eb7e 0303 	sbcs.w	r3, lr, r3
34024750:	d242      	bcs.n	340247d8 <pow+0xe0>
34024752:	ea52 0301 	orrs.w	r3, r2, r1
34024756:	f04f 0300 	mov.w	r3, #0
3402475a:	d10c      	bne.n	34024776 <pow+0x7e>
3402475c:	196d      	adds	r5, r5, r5
3402475e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
34024762:	4164      	adcs	r4, r4
34024764:	42ab      	cmp	r3, r5
34024766:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
3402476a:	41a3      	sbcs	r3, r4
3402476c:	f0c0 808f 	bcc.w	3402488e <pow+0x196>
34024770:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34024774:	e02b      	b.n	340247ce <pow+0xd6>
34024776:	4ed4      	ldr	r6, [pc, #848]	@ (34024ac8 <pow+0x3d0>)
34024778:	42b4      	cmp	r4, r6
3402477a:	bf08      	it	eq
3402477c:	429d      	cmpeq	r5, r3
3402477e:	d109      	bne.n	34024794 <pow+0x9c>
34024780:	1800      	adds	r0, r0, r0
34024782:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
34024786:	eb4a 0a0a 	adc.w	sl, sl, sl
3402478a:	4283      	cmp	r3, r0
3402478c:	4bcf      	ldr	r3, [pc, #828]	@ (34024acc <pow+0x3d4>)
3402478e:	eb73 030a 	sbcs.w	r3, r3, sl
34024792:	e7eb      	b.n	3402476c <pow+0x74>
34024794:	196d      	adds	r5, r5, r5
34024796:	48ce      	ldr	r0, [pc, #824]	@ (34024ad0 <pow+0x3d8>)
34024798:	4164      	adcs	r4, r4
3402479a:	42ab      	cmp	r3, r5
3402479c:	eb70 0604 	sbcs.w	r6, r0, r4
340247a0:	d375      	bcc.n	3402488e <pow+0x196>
340247a2:	4281      	cmp	r1, r0
340247a4:	bf08      	it	eq
340247a6:	429a      	cmpeq	r2, r3
340247a8:	d171      	bne.n	3402488e <pow+0x196>
340247aa:	4aca      	ldr	r2, [pc, #808]	@ (34024ad4 <pow+0x3dc>)
340247ac:	4294      	cmp	r4, r2
340247ae:	bf08      	it	eq
340247b0:	429d      	cmpeq	r5, r3
340247b2:	d0dd      	beq.n	34024770 <pow+0x78>
340247b4:	4294      	cmp	r4, r2
340247b6:	ea6f 0a0a 	mvn.w	sl, sl
340247ba:	bf34      	ite	cc
340247bc:	2400      	movcc	r4, #0
340247be:	2401      	movcs	r4, #1
340247c0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
340247c4:	4554      	cmp	r4, sl
340247c6:	f040 81dc 	bne.w	34024b82 <pow+0x48a>
340247ca:	ee21 0b01 	vmul.f64	d0, d1, d1
340247ce:	b007      	add	sp, #28
340247d0:	ecbd 8b0a 	vpop	{d8-d12}
340247d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
340247d8:	196f      	adds	r7, r5, r5
340247da:	eb44 0904 	adc.w	r9, r4, r4
340247de:	1e7a      	subs	r2, r7, #1
340247e0:	f169 0300 	sbc.w	r3, r9, #0
340247e4:	4593      	cmp	fp, r2
340247e6:	eb7e 0303 	sbcs.w	r3, lr, r3
340247ea:	d225      	bcs.n	34024838 <pow+0x140>
340247ec:	2c00      	cmp	r4, #0
340247ee:	ee20 0b00 	vmul.f64	d0, d0, d0
340247f2:	da13      	bge.n	3402481c <pow+0x124>
340247f4:	4651      	mov	r1, sl
340247f6:	f7ff ff4b 	bl	34024690 <checkint>
340247fa:	2801      	cmp	r0, #1
340247fc:	d10e      	bne.n	3402481c <pow+0x124>
340247fe:	eeb1 0b40 	vneg.f64	d0, d0
34024802:	ea57 0909 	orrs.w	r9, r7, r9
34024806:	d10b      	bne.n	34024820 <pow+0x128>
34024808:	f1ba 0f00 	cmp.w	sl, #0
3402480c:	dadf      	bge.n	340247ce <pow+0xd6>
3402480e:	b007      	add	sp, #28
34024810:	ecbd 8b0a 	vpop	{d8-d12}
34024814:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34024818:	f7ff bef2 	b.w	34024600 <__math_divzero>
3402481c:	2000      	movs	r0, #0
3402481e:	e7f0      	b.n	34024802 <pow+0x10a>
34024820:	f1ba 0f00 	cmp.w	sl, #0
34024824:	dad3      	bge.n	340247ce <pow+0xd6>
34024826:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3402482a:	ee86 7b00 	vdiv.f64	d7, d6, d0
3402482e:	ed8d 7b00 	vstr	d7, [sp]
34024832:	ed9d 0b00 	vldr	d0, [sp]
34024836:	e7ca      	b.n	340247ce <pow+0xd6>
34024838:	2c00      	cmp	r4, #0
3402483a:	da2b      	bge.n	34024894 <pow+0x19c>
3402483c:	4651      	mov	r1, sl
3402483e:	f7ff ff27 	bl	34024690 <checkint>
34024842:	b930      	cbnz	r0, 34024852 <pow+0x15a>
34024844:	b007      	add	sp, #28
34024846:	ecbd 8b0a 	vpop	{d8-d12}
3402484a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3402484e:	f7ff bef3 	b.w	34024638 <__math_invalid>
34024852:	1e41      	subs	r1, r0, #1
34024854:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
34024858:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
3402485c:	4248      	negs	r0, r1
3402485e:	4148      	adcs	r0, r1
34024860:	0480      	lsls	r0, r0, #18
34024862:	f3c6 020a 	ubfx	r2, r6, #0, #11
34024866:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
3402486a:	2b7f      	cmp	r3, #127	@ 0x7f
3402486c:	d92d      	bls.n	340248ca <pow+0x1d2>
3402486e:	2000      	movs	r0, #0
34024870:	4b95      	ldr	r3, [pc, #596]	@ (34024ac8 <pow+0x3d0>)
34024872:	429c      	cmp	r4, r3
34024874:	bf08      	it	eq
34024876:	4285      	cmpeq	r5, r0
34024878:	f43f af7a 	beq.w	34024770 <pow+0x78>
3402487c:	f240 31bd 	movw	r1, #957	@ 0x3bd
34024880:	428a      	cmp	r2, r1
34024882:	d80c      	bhi.n	3402489e <pow+0x1a6>
34024884:	42a8      	cmp	r0, r5
34024886:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
3402488a:	41a3      	sbcs	r3, r4
3402488c:	d204      	bcs.n	34024898 <pow+0x1a0>
3402488e:	ee31 0b00 	vadd.f64	d0, d1, d0
34024892:	e79c      	b.n	340247ce <pow+0xd6>
34024894:	2000      	movs	r0, #0
34024896:	e7e4      	b.n	34024862 <pow+0x16a>
34024898:	ee30 0b41 	vsub.f64	d0, d0, d1
3402489c:	e797      	b.n	340247ce <pow+0xd6>
3402489e:	2d01      	cmp	r5, #1
340248a0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
340248a4:	eb74 0303 	sbcs.w	r3, r4, r3
340248a8:	bf34      	ite	cc
340248aa:	2301      	movcc	r3, #1
340248ac:	2300      	movcs	r3, #0
340248ae:	4296      	cmp	r6, r2
340248b0:	bf8c      	ite	hi
340248b2:	2600      	movhi	r6, #0
340248b4:	2601      	movls	r6, #1
340248b6:	42b3      	cmp	r3, r6
340248b8:	f000 809c 	beq.w	340249f4 <pow+0x2fc>
340248bc:	b007      	add	sp, #28
340248be:	ecbd 8b0a 	vpop	{d8-d12}
340248c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340248c6:	f7ff be93 	b.w	340245f0 <__math_oflow>
340248ca:	f1bc 0f00 	cmp.w	ip, #0
340248ce:	d10a      	bne.n	340248e6 <pow+0x1ee>
340248d0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 34024ab8 <pow+0x3c0>
340248d4:	ee20 7b07 	vmul.f64	d7, d0, d7
340248d8:	ec53 2b17 	vmov	r2, r3, d7
340248dc:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
340248e0:	4615      	mov	r5, r2
340248e2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
340248e6:	4a7c      	ldr	r2, [pc, #496]	@ (34024ad8 <pow+0x3e0>)
340248e8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
340248ec:	4422      	add	r2, r4
340248ee:	1513      	asrs	r3, r2, #20
340248f0:	f3c2 3146 	ubfx	r1, r2, #13, #7
340248f4:	f36f 0213 	bfc	r2, #0, #20
340248f8:	ee03 3a10 	vmov	s6, r3
340248fc:	4b77      	ldr	r3, [pc, #476]	@ (34024adc <pow+0x3e4>)
340248fe:	1aa7      	subs	r7, r4, r2
34024900:	eb03 1641 	add.w	r6, r3, r1, lsl #5
34024904:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
34024908:	eb03 1241 	add.w	r2, r3, r1, lsl #5
3402490c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
34024910:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
34024914:	1e2e      	subs	r6, r5, #0
34024916:	ec47 6b14 	vmov	d4, r6, r7
3402491a:	eea4 6b05 	vfma.f64	d6, d4, d5
3402491e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
34024922:	ed93 5b00 	vldr	d5, [r3]
34024926:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
3402492a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
3402492e:	eea3 2b05 	vfma.f64	d2, d3, d5
34024932:	ed93 5b02 	vldr	d5, [r3, #8]
34024936:	eea3 7b05 	vfma.f64	d7, d3, d5
3402493a:	ee36 4b02 	vadd.f64	d4, d6, d2
3402493e:	ed93 5b04 	vldr	d5, [r3, #16]
34024942:	ee32 2b44 	vsub.f64	d2, d2, d4
34024946:	ee26 5b05 	vmul.f64	d5, d6, d5
3402494a:	ee32 2b06 	vadd.f64	d2, d2, d6
3402494e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
34024952:	ee26 0b05 	vmul.f64	d0, d6, d5
34024956:	ee37 7b02 	vadd.f64	d7, d7, d2
3402495a:	ee34 8b00 	vadd.f64	d8, d4, d0
3402495e:	eeb0 9b40 	vmov.f64	d9, d0
34024962:	ee26 bb00 	vmul.f64	d11, d6, d0
34024966:	ee34 4b48 	vsub.f64	d4, d4, d8
3402496a:	ee96 9b05 	vfnms.f64	d9, d6, d5
3402496e:	ee34 ab00 	vadd.f64	d10, d4, d0
34024972:	ed93 5b06 	vldr	d5, [r3, #24]
34024976:	ed93 4b08 	vldr	d4, [r3, #32]
3402497a:	eea6 5b04 	vfma.f64	d5, d6, d4
3402497e:	ee37 7b09 	vadd.f64	d7, d7, d9
34024982:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
34024986:	ee37 7b0a 	vadd.f64	d7, d7, d10
3402498a:	eea6 4b03 	vfma.f64	d4, d6, d3
3402498e:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
34024992:	eea6 3b0c 	vfma.f64	d3, d6, d12
34024996:	eea0 4b03 	vfma.f64	d4, d0, d3
3402499a:	eea0 5b04 	vfma.f64	d5, d0, d4
3402499e:	eeab 7b05 	vfma.f64	d7, d11, d5
340249a2:	ee38 4b07 	vadd.f64	d4, d8, d7
340249a6:	ee21 6b04 	vmul.f64	d6, d1, d4
340249aa:	ee38 8b44 	vsub.f64	d8, d8, d4
340249ae:	eeb0 5b46 	vmov.f64	d5, d6
340249b2:	ee16 3a90 	vmov	r3, s13
340249b6:	ee38 8b07 	vadd.f64	d8, d8, d7
340249ba:	f3c3 560a 	ubfx	r6, r3, #20, #11
340249be:	ee91 5b04 	vfnms.f64	d5, d1, d4
340249c2:	18b2      	adds	r2, r6, r2
340249c4:	2a3e      	cmp	r2, #62	@ 0x3e
340249c6:	eea1 5b08 	vfma.f64	d5, d1, d8
340249ca:	d91b      	bls.n	34024a04 <pow+0x30c>
340249cc:	2a00      	cmp	r2, #0
340249ce:	da0b      	bge.n	340249e8 <pow+0x2f0>
340249d0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
340249d4:	ee36 0b00 	vadd.f64	d0, d6, d0
340249d8:	2800      	cmp	r0, #0
340249da:	f43f aef8 	beq.w	340247ce <pow+0xd6>
340249de:	eeb1 0b40 	vneg.f64	d0, d0
340249e2:	e6f4      	b.n	340247ce <pow+0xd6>
340249e4:	2000      	movs	r0, #0
340249e6:	e77e      	b.n	340248e6 <pow+0x1ee>
340249e8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
340249ec:	d909      	bls.n	34024a02 <pow+0x30a>
340249ee:	2b00      	cmp	r3, #0
340249f0:	f6bf af64 	bge.w	340248bc <pow+0x1c4>
340249f4:	b007      	add	sp, #28
340249f6:	ecbd 8b0a 	vpop	{d8-d12}
340249fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340249fe:	f7ff bdef 	b.w	340245e0 <__math_uflow>
34024a02:	2600      	movs	r6, #0
34024a04:	4936      	ldr	r1, [pc, #216]	@ (34024ae0 <pow+0x3e8>)
34024a06:	2700      	movs	r7, #0
34024a08:	ed91 4b02 	vldr	d4, [r1, #8]
34024a0c:	ed91 3b00 	vldr	d3, [r1]
34024a10:	eeb0 7b44 	vmov.f64	d7, d4
34024a14:	eea6 7b03 	vfma.f64	d7, d6, d3
34024a18:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
34024a1c:	ee17 5a10 	vmov	r5, s14
34024a20:	ee37 7b44 	vsub.f64	d7, d7, d4
34024a24:	ed91 4b04 	vldr	d4, [r1, #16]
34024a28:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
34024a2c:	eea7 6b04 	vfma.f64	d6, d7, d4
34024a30:	18dc      	adds	r4, r3, r3
34024a32:	1940      	adds	r0, r0, r5
34024a34:	f104 030f 	add.w	r3, r4, #15
34024a38:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
34024a3c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
34024a40:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
34024a44:	ed91 4b06 	vldr	d4, [r1, #24]
34024a48:	f8d2 e004 	ldr.w	lr, [r2, #4]
34024a4c:	eb17 020c 	adds.w	r2, r7, ip
34024a50:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
34024a54:	eea7 6b04 	vfma.f64	d6, d7, d4
34024a58:	ed91 4b08 	vldr	d4, [r1, #32]
34024a5c:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
34024a60:	ee35 5b06 	vadd.f64	d5, d5, d6
34024a64:	eea5 4b03 	vfma.f64	d4, d5, d3
34024a68:	ee25 6b05 	vmul.f64	d6, d5, d5
34024a6c:	ee35 7b07 	vadd.f64	d7, d5, d7
34024a70:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
34024a74:	eea6 7b04 	vfma.f64	d7, d6, d4
34024a78:	ee26 6b06 	vmul.f64	d6, d6, d6
34024a7c:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
34024a80:	eea5 4b03 	vfma.f64	d4, d5, d3
34024a84:	eea6 7b04 	vfma.f64	d7, d6, d4
34024a88:	2e00      	cmp	r6, #0
34024a8a:	d175      	bne.n	34024b78 <pow+0x480>
34024a8c:	42bd      	cmp	r5, r7
34024a8e:	db29      	blt.n	34024ae4 <pow+0x3ec>
34024a90:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
34024a94:	4610      	mov	r0, r2
34024a96:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
34024a9a:	ec41 0b10 	vmov	d0, r0, r1
34024a9e:	eea7 0b00 	vfma.f64	d0, d7, d0
34024aa2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 34024ac0 <pow+0x3c8>
34024aa6:	ee20 0b07 	vmul.f64	d0, d0, d7
34024aaa:	b007      	add	sp, #28
34024aac:	ecbd 8b0a 	vpop	{d8-d12}
34024ab0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34024ab4:	f7ff bdd8 	b.w	34024668 <__math_check_oflow>
34024ab8:	00000000 	.word	0x00000000
34024abc:	43300000 	.word	0x43300000
34024ac0:	00000000 	.word	0x00000000
34024ac4:	7f000000 	.word	0x7f000000
34024ac8:	3ff00000 	.word	0x3ff00000
34024acc:	fff00000 	.word	0xfff00000
34024ad0:	ffe00000 	.word	0xffe00000
34024ad4:	7fe00000 	.word	0x7fe00000
34024ad8:	c0196aab 	.word	0xc0196aab
34024adc:	340ca4f8 	.word	0x340ca4f8
34024ae0:	340c9c88 	.word	0x340c9c88
34024ae4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
34024ae8:	4610      	mov	r0, r2
34024aea:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
34024aee:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
34024af2:	ec41 0b15 	vmov	d5, r0, r1
34024af6:	ee27 6b05 	vmul.f64	d6, d7, d5
34024afa:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 34024b88 <pow+0x490>
34024afe:	ee35 7b06 	vadd.f64	d7, d5, d6
34024b02:	eeb0 4bc7 	vabs.f64	d4, d7
34024b06:	eeb4 4bc3 	vcmpe.f64	d4, d3
34024b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024b0e:	d52a      	bpl.n	34024b66 <pow+0x46e>
34024b10:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34024b14:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
34024b18:	ee35 5b47 	vsub.f64	d5, d5, d7
34024b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024b20:	ee35 5b06 	vadd.f64	d5, d5, d6
34024b24:	bf58      	it	pl
34024b26:	eeb0 4b43 	vmovpl.f64	d4, d3
34024b2a:	ee37 3b04 	vadd.f64	d3, d7, d4
34024b2e:	ee34 6b43 	vsub.f64	d6, d4, d3
34024b32:	ee36 6b07 	vadd.f64	d6, d6, d7
34024b36:	ee36 6b05 	vadd.f64	d6, d6, d5
34024b3a:	ee36 6b03 	vadd.f64	d6, d6, d3
34024b3e:	ee36 7b44 	vsub.f64	d7, d6, d4
34024b42:	eeb5 7b40 	vcmp.f64	d7, #0.0
34024b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024b4a:	d104      	bne.n	34024b56 <pow+0x45e>
34024b4c:	4632      	mov	r2, r6
34024b4e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
34024b52:	ec43 2b17 	vmov	d7, r2, r3
34024b56:	ed8d 0b02 	vstr	d0, [sp, #8]
34024b5a:	ed9d 6b02 	vldr	d6, [sp, #8]
34024b5e:	ee26 6b00 	vmul.f64	d6, d6, d0
34024b62:	ed8d 6b04 	vstr	d6, [sp, #16]
34024b66:	ee27 0b00 	vmul.f64	d0, d7, d0
34024b6a:	b007      	add	sp, #28
34024b6c:	ecbd 8b0a 	vpop	{d8-d12}
34024b70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34024b74:	f7ff bd6f 	b.w	34024656 <__math_check_uflow>
34024b78:	ec43 2b10 	vmov	d0, r2, r3
34024b7c:	eea7 0b00 	vfma.f64	d0, d7, d0
34024b80:	e625      	b.n	340247ce <pow+0xd6>
34024b82:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 34024b90 <pow+0x498>
34024b86:	e622      	b.n	340247ce <pow+0xd6>
34024b88:	00000000 	.word	0x00000000
34024b8c:	00100000 	.word	0x00100000
	...

34024b98 <expf>:
34024b98:	ee10 2a10 	vmov	r2, s0
34024b9c:	f240 412a 	movw	r1, #1066	@ 0x42a
34024ba0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
34024ba4:	f3c2 530a 	ubfx	r3, r2, #20, #11
34024ba8:	428b      	cmp	r3, r1
34024baa:	b430      	push	{r4, r5}
34024bac:	d92a      	bls.n	34024c04 <expf+0x6c>
34024bae:	f512 0f00 	cmn.w	r2, #8388608	@ 0x800000
34024bb2:	d058      	beq.n	34024c66 <expf+0xce>
34024bb4:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
34024bb8:	d303      	bcc.n	34024bc2 <expf+0x2a>
34024bba:	ee30 0a00 	vadd.f32	s0, s0, s0
34024bbe:	bc30      	pop	{r4, r5}
34024bc0:	4770      	bx	lr
34024bc2:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 34024c6c <expf+0xd4>
34024bc6:	eeb4 0ae7 	vcmpe.f32	s0, s15
34024bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024bce:	dd03      	ble.n	34024bd8 <expf+0x40>
34024bd0:	2000      	movs	r0, #0
34024bd2:	bc30      	pop	{r4, r5}
34024bd4:	f000 bbea 	b.w	340253ac <__math_oflowf>
34024bd8:	eddf 7a25 	vldr	s15, [pc, #148]	@ 34024c70 <expf+0xd8>
34024bdc:	eeb4 0ae7 	vcmpe.f32	s0, s15
34024be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024be4:	d503      	bpl.n	34024bee <expf+0x56>
34024be6:	2000      	movs	r0, #0
34024be8:	bc30      	pop	{r4, r5}
34024bea:	f000 bbd3 	b.w	34025394 <__math_uflowf>
34024bee:	eddf 7a21 	vldr	s15, [pc, #132]	@ 34024c74 <expf+0xdc>
34024bf2:	eeb4 0ae7 	vcmpe.f32	s0, s15
34024bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024bfa:	d503      	bpl.n	34024c04 <expf+0x6c>
34024bfc:	2000      	movs	r0, #0
34024bfe:	bc30      	pop	{r4, r5}
34024c00:	f000 bbce 	b.w	340253a0 <__math_may_uflowf>
34024c04:	4b1c      	ldr	r3, [pc, #112]	@ (34024c78 <expf+0xe0>)
34024c06:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34024c0a:	ed93 4b48 	vldr	d4, [r3, #288]	@ 0x120
34024c0e:	ed93 5b4a 	vldr	d5, [r3, #296]	@ 0x128
34024c12:	eeb0 7b44 	vmov.f64	d7, d4
34024c16:	eea5 7b06 	vfma.f64	d7, d5, d6
34024c1a:	ee17 0a10 	vmov	r0, s14
34024c1e:	ee37 7b44 	vsub.f64	d7, d7, d4
34024c22:	f000 021f 	and.w	r2, r0, #31
34024c26:	ee95 7b06 	vfnms.f64	d7, d5, d6
34024c2a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
34024c2e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
34024c32:	684d      	ldr	r5, [r1, #4]
34024c34:	2100      	movs	r1, #0
34024c36:	ed93 5b4c 	vldr	d5, [r3, #304]	@ 0x130
34024c3a:	ed93 6b4e 	vldr	d6, [r3, #312]	@ 0x138
34024c3e:	190a      	adds	r2, r1, r4
34024c40:	eea5 6b07 	vfma.f64	d6, d5, d7
34024c44:	ee27 4b07 	vmul.f64	d4, d7, d7
34024c48:	ed93 5b50 	vldr	d5, [r3, #320]	@ 0x140
34024c4c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
34024c50:	eea5 0b07 	vfma.f64	d0, d5, d7
34024c54:	ec43 2b17 	vmov	d7, r2, r3
34024c58:	eea6 0b04 	vfma.f64	d0, d6, d4
34024c5c:	ee20 0b07 	vmul.f64	d0, d0, d7
34024c60:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34024c64:	e7ab      	b.n	34024bbe <expf+0x26>
34024c66:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 34024c7c <expf+0xe4>
34024c6a:	e7a8      	b.n	34024bbe <expf+0x26>
34024c6c:	42b17217 	.word	0x42b17217
34024c70:	c2cff1b4 	.word	0xc2cff1b4
34024c74:	c2ce8ecf 	.word	0xc2ce8ecf
34024c78:	340cb540 	.word	0x340cb540
34024c7c:	00000000 	.word	0x00000000

34024c80 <logf>:
34024c80:	ee10 3a10 	vmov	r3, s0
34024c84:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
34024c88:	b410      	push	{r4}
34024c8a:	d055      	beq.n	34024d38 <logf+0xb8>
34024c8c:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
34024c90:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
34024c94:	d31a      	bcc.n	34024ccc <logf+0x4c>
34024c96:	005a      	lsls	r2, r3, #1
34024c98:	d104      	bne.n	34024ca4 <logf+0x24>
34024c9a:	2001      	movs	r0, #1
34024c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
34024ca0:	f000 bb8a 	b.w	340253b8 <__math_divzerof>
34024ca4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
34024ca8:	d043      	beq.n	34024d32 <logf+0xb2>
34024caa:	2b00      	cmp	r3, #0
34024cac:	db02      	blt.n	34024cb4 <logf+0x34>
34024cae:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
34024cb2:	d303      	bcc.n	34024cbc <logf+0x3c>
34024cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
34024cb8:	f000 bb90 	b.w	340253dc <__math_invalidf>
34024cbc:	eddf 7a20 	vldr	s15, [pc, #128]	@ 34024d40 <logf+0xc0>
34024cc0:	ee20 0a27 	vmul.f32	s0, s0, s15
34024cc4:	ee10 3a10 	vmov	r3, s0
34024cc8:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
34024ccc:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
34024cd0:	491c      	ldr	r1, [pc, #112]	@ (34024d44 <logf+0xc4>)
34024cd2:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
34024cd6:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
34024cda:	0dd4      	lsrs	r4, r2, #23
34024cdc:	f3c2 40c3 	ubfx	r0, r2, #19, #4
34024ce0:	15d2      	asrs	r2, r2, #23
34024ce2:	05e4      	lsls	r4, r4, #23
34024ce4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
34024ce8:	1b1b      	subs	r3, r3, r4
34024cea:	ee07 3a90 	vmov	s15, r3
34024cee:	ed90 5b00 	vldr	d5, [r0]
34024cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
34024cf6:	ed90 6b02 	vldr	d6, [r0, #8]
34024cfa:	eea5 0b07 	vfma.f64	d0, d5, d7
34024cfe:	ee07 2a90 	vmov	s15, r2
34024d02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34024d06:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
34024d0a:	eea7 6b05 	vfma.f64	d6, d7, d5
34024d0e:	ee20 4b00 	vmul.f64	d4, d0, d0
34024d12:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
34024d16:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
34024d1a:	eea5 7b00 	vfma.f64	d7, d5, d0
34024d1e:	ee30 0b06 	vadd.f64	d0, d0, d6
34024d22:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
34024d26:	eea5 7b04 	vfma.f64	d7, d5, d4
34024d2a:	eea4 0b07 	vfma.f64	d0, d4, d7
34024d2e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34024d32:	f85d 4b04 	ldr.w	r4, [sp], #4
34024d36:	4770      	bx	lr
34024d38:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 34024d48 <logf+0xc8>
34024d3c:	e7f9      	b.n	34024d32 <logf+0xb2>
34024d3e:	bf00      	nop
34024d40:	4b000000 	.word	0x4b000000
34024d44:	340cb688 	.word	0x340cb688
34024d48:	00000000 	.word	0x00000000

34024d4c <checkint>:
34024d4c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
34024d50:	2b7e      	cmp	r3, #126	@ 0x7e
34024d52:	d910      	bls.n	34024d76 <checkint+0x2a>
34024d54:	2b96      	cmp	r3, #150	@ 0x96
34024d56:	d80c      	bhi.n	34024d72 <checkint+0x26>
34024d58:	2201      	movs	r2, #1
34024d5a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
34024d5e:	fa02 f303 	lsl.w	r3, r2, r3
34024d62:	1e5a      	subs	r2, r3, #1
34024d64:	4202      	tst	r2, r0
34024d66:	d106      	bne.n	34024d76 <checkint+0x2a>
34024d68:	4203      	tst	r3, r0
34024d6a:	bf14      	ite	ne
34024d6c:	2001      	movne	r0, #1
34024d6e:	2002      	moveq	r0, #2
34024d70:	4770      	bx	lr
34024d72:	2002      	movs	r0, #2
34024d74:	4770      	bx	lr
34024d76:	2000      	movs	r0, #0
34024d78:	4770      	bx	lr
34024d7a:	0000      	movs	r0, r0
34024d7c:	0000      	movs	r0, r0
	...

34024d80 <powf>:
34024d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
34024d82:	ee10 1a10 	vmov	r1, s0
34024d86:	ee10 4a90 	vmov	r4, s1
34024d8a:	eef0 7a40 	vmov.f32	s15, s0
34024d8e:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
34024d92:	0063      	lsls	r3, r4, #1
34024d94:	eeb0 7a60 	vmov.f32	s14, s1
34024d98:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
34024d9c:	f103 30ff 	add.w	r0, r3, #4294967295
34024da0:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
34024da4:	d252      	bcs.n	34024e4c <powf+0xcc>
34024da6:	4290      	cmp	r0, r2
34024da8:	d258      	bcs.n	34024e5c <powf+0xdc>
34024daa:	2000      	movs	r0, #0
34024dac:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
34024db0:	4a9f      	ldr	r2, [pc, #636]	@ (34025030 <powf+0x2b0>)
34024db2:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
34024db6:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
34024dba:	f3c3 44c3 	ubfx	r4, r3, #19, #4
34024dbe:	f36f 0316 	bfc	r3, #0, #23
34024dc2:	1ac9      	subs	r1, r1, r3
34024dc4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
34024dc8:	15db      	asrs	r3, r3, #23
34024dca:	ee07 1a90 	vmov	s15, r1
34024dce:	ed94 4b00 	vldr	d4, [r4]
34024dd2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
34024dd6:	ee07 3a90 	vmov	s15, r3
34024dda:	ed94 5b02 	vldr	d5, [r4, #8]
34024dde:	eea4 2b06 	vfma.f64	d2, d4, d6
34024de2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
34024de6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34024dea:	ee36 6b05 	vadd.f64	d6, d6, d5
34024dee:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
34024df2:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
34024df6:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
34024dfa:	ee22 4b02 	vmul.f64	d4, d2, d2
34024dfe:	eea2 1b05 	vfma.f64	d1, d2, d5
34024e02:	ee24 0b04 	vmul.f64	d0, d4, d4
34024e06:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
34024e0a:	eea2 5b03 	vfma.f64	d5, d2, d3
34024e0e:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
34024e12:	eea2 6b03 	vfma.f64	d6, d2, d3
34024e16:	eea4 6b05 	vfma.f64	d6, d4, d5
34024e1a:	eea1 6b00 	vfma.f64	d6, d1, d0
34024e1e:	ee27 7b06 	vmul.f64	d7, d7, d6
34024e22:	ee17 3a90 	vmov	r3, s15
34024e26:	f3c3 32cf 	ubfx	r2, r3, #15, #16
34024e2a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
34024e2e:	429a      	cmp	r2, r3
34024e30:	f0c0 8098 	bcc.w	34024f64 <powf+0x1e4>
34024e34:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 34025010 <powf+0x290>
34024e38:	eeb4 7bc6 	vcmpe.f64	d7, d6
34024e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024e40:	dd79      	ble.n	34024f36 <powf+0x1b6>
34024e42:	b003      	add	sp, #12
34024e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34024e48:	f000 bab0 	b.w	340253ac <__math_oflowf>
34024e4c:	4290      	cmp	r0, r2
34024e4e:	d330      	bcc.n	34024eb2 <powf+0x132>
34024e50:	b12b      	cbz	r3, 34024e5e <powf+0xde>
34024e52:	0049      	lsls	r1, r1, #1
34024e54:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
34024e58:	d808      	bhi.n	34024e6c <powf+0xec>
34024e5a:	e015      	b.n	34024e88 <powf+0x108>
34024e5c:	b953      	cbnz	r3, 34024e74 <powf+0xf4>
34024e5e:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
34024e62:	0049      	lsls	r1, r1, #1
34024e64:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
34024e68:	f240 80ca 	bls.w	34025000 <powf+0x280>
34024e6c:	ee37 0a87 	vadd.f32	s0, s15, s14
34024e70:	b003      	add	sp, #12
34024e72:	bd30      	pop	{r4, r5, pc}
34024e74:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
34024e78:	d105      	bne.n	34024e86 <powf+0x106>
34024e7a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
34024e7e:	0064      	lsls	r4, r4, #1
34024e80:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
34024e84:	e7f0      	b.n	34024e68 <powf+0xe8>
34024e86:	0049      	lsls	r1, r1, #1
34024e88:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
34024e8c:	d1ee      	bne.n	34024e6c <powf+0xec>
34024e8e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
34024e92:	f000 80b5 	beq.w	34025000 <powf+0x280>
34024e96:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
34024e9a:	ea6f 0404 	mvn.w	r4, r4
34024e9e:	bf34      	ite	cc
34024ea0:	2100      	movcc	r1, #0
34024ea2:	2101      	movcs	r1, #1
34024ea4:	0fe4      	lsrs	r4, r4, #31
34024ea6:	42a1      	cmp	r1, r4
34024ea8:	f040 80ad 	bne.w	34025006 <powf+0x286>
34024eac:	ee27 0a07 	vmul.f32	s0, s14, s14
34024eb0:	e7de      	b.n	34024e70 <powf+0xf0>
34024eb2:	004d      	lsls	r5, r1, #1
34024eb4:	1e6b      	subs	r3, r5, #1
34024eb6:	4293      	cmp	r3, r2
34024eb8:	d31b      	bcc.n	34024ef2 <powf+0x172>
34024eba:	2900      	cmp	r1, #0
34024ebc:	ee20 0a00 	vmul.f32	s0, s0, s0
34024ec0:	da0e      	bge.n	34024ee0 <powf+0x160>
34024ec2:	4620      	mov	r0, r4
34024ec4:	f7ff ff42 	bl	34024d4c <checkint>
34024ec8:	2801      	cmp	r0, #1
34024eca:	d109      	bne.n	34024ee0 <powf+0x160>
34024ecc:	eeb1 0a40 	vneg.f32	s0, s0
34024ed0:	b945      	cbnz	r5, 34024ee4 <powf+0x164>
34024ed2:	2c00      	cmp	r4, #0
34024ed4:	dacc      	bge.n	34024e70 <powf+0xf0>
34024ed6:	b003      	add	sp, #12
34024ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34024edc:	f000 ba6c 	b.w	340253b8 <__math_divzerof>
34024ee0:	2000      	movs	r0, #0
34024ee2:	e7f5      	b.n	34024ed0 <powf+0x150>
34024ee4:	2c00      	cmp	r4, #0
34024ee6:	dac3      	bge.n	34024e70 <powf+0xf0>
34024ee8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34024eec:	ee87 0a80 	vdiv.f32	s0, s15, s0
34024ef0:	e7be      	b.n	34024e70 <powf+0xf0>
34024ef2:	2900      	cmp	r1, #0
34024ef4:	da1d      	bge.n	34024f32 <powf+0x1b2>
34024ef6:	4620      	mov	r0, r4
34024ef8:	f7ff ff28 	bl	34024d4c <checkint>
34024efc:	b920      	cbnz	r0, 34024f08 <powf+0x188>
34024efe:	b003      	add	sp, #12
34024f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34024f04:	f000 ba6a 	b.w	340253dc <__math_invalidf>
34024f08:	1e43      	subs	r3, r0, #1
34024f0a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34024f0e:	4258      	negs	r0, r3
34024f10:	4158      	adcs	r0, r3
34024f12:	0400      	lsls	r0, r0, #16
34024f14:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34024f18:	f4bf af48 	bcs.w	34024dac <powf+0x2c>
34024f1c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 34025034 <powf+0x2b4>
34024f20:	ee27 0aa6 	vmul.f32	s0, s15, s13
34024f24:	ee10 3a10 	vmov	r3, s0
34024f28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34024f2c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
34024f30:	e73c      	b.n	34024dac <powf+0x2c>
34024f32:	2000      	movs	r0, #0
34024f34:	e7ee      	b.n	34024f14 <powf+0x194>
34024f36:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 34025018 <powf+0x298>
34024f3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
34024f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024f42:	dd45      	ble.n	34024fd0 <powf+0x250>
34024f44:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
34024f48:	b3d0      	cbz	r0, 34024fc0 <powf+0x240>
34024f4a:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
34024f4e:	9301      	str	r3, [sp, #4]
34024f50:	eddd 6a01 	vldr	s13, [sp, #4]
34024f54:	ee76 6a66 	vsub.f32	s13, s12, s13
34024f58:	eef4 6a46 	vcmp.f32	s13, s12
34024f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024f60:	f47f af6f 	bne.w	34024e42 <powf+0xc2>
34024f64:	4b34      	ldr	r3, [pc, #208]	@ (34025038 <powf+0x2b8>)
34024f66:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34024f6a:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
34024f6e:	ee37 6b05 	vadd.f64	d6, d7, d5
34024f72:	ee16 2a10 	vmov	r2, s12
34024f76:	ee36 6b45 	vsub.f64	d6, d6, d5
34024f7a:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
34024f7e:	ee37 7b46 	vsub.f64	d7, d7, d6
34024f82:	f002 011f 	and.w	r1, r2, #31
34024f86:	1880      	adds	r0, r0, r2
34024f88:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
34024f8c:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
34024f90:	ee27 4b07 	vmul.f64	d4, d7, d7
34024f94:	2100      	movs	r1, #0
34024f96:	686d      	ldr	r5, [r5, #4]
34024f98:	190a      	adds	r2, r1, r4
34024f9a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
34024f9e:	eea7 6b05 	vfma.f64	d6, d7, d5
34024fa2:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
34024fa6:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
34024faa:	eea7 0b05 	vfma.f64	d0, d7, d5
34024fae:	ec43 2b17 	vmov	d7, r2, r3
34024fb2:	eea6 0b04 	vfma.f64	d0, d6, d4
34024fb6:	ee20 0b07 	vmul.f64	d0, d0, d7
34024fba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34024fbe:	e757      	b.n	34024e70 <powf+0xf0>
34024fc0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
34024fc4:	9300      	str	r3, [sp, #0]
34024fc6:	eddd 6a00 	vldr	s13, [sp]
34024fca:	ee76 6a86 	vadd.f32	s13, s13, s12
34024fce:	e7c3      	b.n	34024f58 <powf+0x1d8>
34024fd0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 34025020 <powf+0x2a0>
34024fd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
34024fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024fdc:	d804      	bhi.n	34024fe8 <powf+0x268>
34024fde:	b003      	add	sp, #12
34024fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34024fe4:	f000 b9d6 	b.w	34025394 <__math_uflowf>
34024fe8:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 34025028 <powf+0x2a8>
34024fec:	eeb4 7bc6 	vcmpe.f64	d7, d6
34024ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024ff4:	d5b6      	bpl.n	34024f64 <powf+0x1e4>
34024ff6:	b003      	add	sp, #12
34024ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34024ffc:	f000 b9d0 	b.w	340253a0 <__math_may_uflowf>
34025000:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34025004:	e734      	b.n	34024e70 <powf+0xf0>
34025006:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 3402503c <powf+0x2bc>
3402500a:	e731      	b.n	34024e70 <powf+0xf0>
3402500c:	f3af 8000 	nop.w
34025010:	ffd1d571 	.word	0xffd1d571
34025014:	405fffff 	.word	0x405fffff
34025018:	ffa3aae2 	.word	0xffa3aae2
3402501c:	405fffff 	.word	0x405fffff
34025020:	00000000 	.word	0x00000000
34025024:	c062c000 	.word	0xc062c000
34025028:	00000000 	.word	0x00000000
3402502c:	c062a000 	.word	0xc062a000
34025030:	340cc338 	.word	0x340cc338
34025034:	4b000000 	.word	0x4b000000
34025038:	340cb540 	.word	0x340cb540
3402503c:	00000000 	.word	0x00000000

34025040 <sinf_poly>:
34025040:	07cb      	lsls	r3, r1, #31
34025042:	d412      	bmi.n	3402506a <sinf_poly+0x2a>
34025044:	ee21 5b00 	vmul.f64	d5, d1, d0
34025048:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
3402504c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
34025050:	eea6 7b01 	vfma.f64	d7, d6, d1
34025054:	ee21 1b05 	vmul.f64	d1, d1, d5
34025058:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
3402505c:	eea6 0b05 	vfma.f64	d0, d6, d5
34025060:	eea7 0b01 	vfma.f64	d0, d7, d1
34025064:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34025068:	4770      	bx	lr
3402506a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
3402506e:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
34025072:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
34025076:	ee21 5b01 	vmul.f64	d5, d1, d1
3402507a:	eea1 7b06 	vfma.f64	d7, d1, d6
3402507e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
34025082:	eea1 0b06 	vfma.f64	d0, d1, d6
34025086:	ee21 1b05 	vmul.f64	d1, d1, d5
3402508a:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
3402508e:	eea5 0b06 	vfma.f64	d0, d5, d6
34025092:	e7e5      	b.n	34025060 <sinf_poly+0x20>
34025094:	0000      	movs	r0, r0
	...

34025098 <sinf>:
34025098:	b537      	push	{r0, r1, r2, r4, r5, lr}
3402509a:	ee10 4a10 	vmov	r4, s0
3402509e:	eef0 7a40 	vmov.f32	s15, s0
340250a2:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
340250a6:	f3c4 530a 	ubfx	r3, r4, #20, #11
340250aa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
340250ae:	d218      	bcs.n	340250e2 <sinf+0x4a>
340250b0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
340250b4:	ee26 1b06 	vmul.f64	d1, d6, d6
340250b8:	d20a      	bcs.n	340250d0 <sinf+0x38>
340250ba:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
340250be:	d103      	bne.n	340250c8 <sinf+0x30>
340250c0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
340250c4:	ed8d 1a01 	vstr	s2, [sp, #4]
340250c8:	eeb0 0a67 	vmov.f32	s0, s15
340250cc:	b003      	add	sp, #12
340250ce:	bd30      	pop	{r4, r5, pc}
340250d0:	eeb0 0b46 	vmov.f64	d0, d6
340250d4:	2100      	movs	r1, #0
340250d6:	483a      	ldr	r0, [pc, #232]	@ (340251c0 <sinf+0x128>)
340250d8:	b003      	add	sp, #12
340250da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
340250de:	f7ff bfaf 	b.w	34025040 <sinf_poly>
340250e2:	f240 422e 	movw	r2, #1070	@ 0x42e
340250e6:	4293      	cmp	r3, r2
340250e8:	d824      	bhi.n	34025134 <sinf+0x9c>
340250ea:	4b35      	ldr	r3, [pc, #212]	@ (340251c0 <sinf+0x128>)
340250ec:	ed93 7b08 	vldr	d7, [r3, #32]
340250f0:	f103 0070 	add.w	r0, r3, #112	@ 0x70
340250f4:	ee26 7b07 	vmul.f64	d7, d6, d7
340250f8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
340250fc:	ee17 1a90 	vmov	r1, s15
34025100:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
34025104:	1609      	asrs	r1, r1, #24
34025106:	ee07 1a90 	vmov	s15, r1
3402510a:	f001 0203 	and.w	r2, r1, #3
3402510e:	f011 0f02 	tst.w	r1, #2
34025112:	eeb8 5be7 	vcvt.f64.s32	d5, s15
34025116:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
3402511a:	bf08      	it	eq
3402511c:	4618      	moveq	r0, r3
3402511e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
34025122:	ed92 0b00 	vldr	d0, [r2]
34025126:	eea5 6b47 	vfms.f64	d6, d5, d7
3402512a:	ee26 1b06 	vmul.f64	d1, d6, d6
3402512e:	ee20 0b06 	vmul.f64	d0, d0, d6
34025132:	e7d1      	b.n	340250d8 <sinf+0x40>
34025134:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
34025138:	d237      	bcs.n	340251aa <sinf+0x112>
3402513a:	f3c4 6083 	ubfx	r0, r4, #26, #4
3402513e:	4921      	ldr	r1, [pc, #132]	@ (340251c4 <sinf+0x12c>)
34025140:	f3c4 0316 	ubfx	r3, r4, #0, #23
34025144:	f3c4 55c2 	ubfx	r5, r4, #23, #3
34025148:	eb01 0280 	add.w	r2, r1, r0, lsl #2
3402514c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
34025150:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
34025154:	6a10      	ldr	r0, [r2, #32]
34025156:	40ab      	lsls	r3, r5
34025158:	6912      	ldr	r2, [r2, #16]
3402515a:	fba0 5003 	umull	r5, r0, r0, r3
3402515e:	4359      	muls	r1, r3
34025160:	fbe3 0102 	umlal	r0, r1, r3, r2
34025164:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
34025168:	0f9d      	lsrs	r5, r3, #30
3402516a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
3402516e:	1ac9      	subs	r1, r1, r3
34025170:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
34025174:	f7dc fc78 	bl	34001a68 <__aeabi_l2d>
34025178:	4b11      	ldr	r3, [pc, #68]	@ (340251c0 <sinf+0x128>)
3402517a:	f004 0203 	and.w	r2, r4, #3
3402517e:	f014 0f02 	tst.w	r4, #2
34025182:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 340251b8 <sinf+0x120>
34025186:	ec41 0b17 	vmov	d7, r0, r1
3402518a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
3402518e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
34025192:	ee27 7b06 	vmul.f64	d7, d7, d6
34025196:	4629      	mov	r1, r5
34025198:	bf08      	it	eq
3402519a:	4618      	moveq	r0, r3
3402519c:	ed92 0b00 	vldr	d0, [r2]
340251a0:	ee27 1b07 	vmul.f64	d1, d7, d7
340251a4:	ee20 0b07 	vmul.f64	d0, d0, d7
340251a8:	e796      	b.n	340250d8 <sinf+0x40>
340251aa:	b003      	add	sp, #12
340251ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
340251b0:	f000 b914 	b.w	340253dc <__math_invalidf>
340251b4:	f3af 8000 	nop.w
340251b8:	54442d18 	.word	0x54442d18
340251bc:	3c1921fb 	.word	0x3c1921fb
340251c0:	340cb808 	.word	0x340cb808
340251c4:	340cb7a8 	.word	0x340cb7a8

340251c8 <sinf_poly>:
340251c8:	07cb      	lsls	r3, r1, #31
340251ca:	d412      	bmi.n	340251f2 <sinf_poly+0x2a>
340251cc:	ee21 5b00 	vmul.f64	d5, d1, d0
340251d0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
340251d4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
340251d8:	eea6 7b01 	vfma.f64	d7, d6, d1
340251dc:	ee21 1b05 	vmul.f64	d1, d1, d5
340251e0:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
340251e4:	eea6 0b05 	vfma.f64	d0, d6, d5
340251e8:	eea7 0b01 	vfma.f64	d0, d7, d1
340251ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
340251f0:	4770      	bx	lr
340251f2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
340251f6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
340251fa:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
340251fe:	ee21 5b01 	vmul.f64	d5, d1, d1
34025202:	eea1 7b06 	vfma.f64	d7, d1, d6
34025206:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
3402520a:	eea1 0b06 	vfma.f64	d0, d1, d6
3402520e:	ee21 1b05 	vmul.f64	d1, d1, d5
34025212:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
34025216:	eea5 0b06 	vfma.f64	d0, d5, d6
3402521a:	e7e5      	b.n	340251e8 <sinf_poly+0x20>
3402521c:	0000      	movs	r0, r0
	...

34025220 <cosf>:
34025220:	b538      	push	{r3, r4, r5, lr}
34025222:	ee10 4a10 	vmov	r4, s0
34025226:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
3402522a:	f3c4 530a 	ubfx	r3, r4, #20, #11
3402522e:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
34025232:	d21f      	bcs.n	34025274 <cosf+0x54>
34025234:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
34025238:	ee27 7b07 	vmul.f64	d7, d7, d7
3402523c:	f0c0 8082 	bcc.w	34025344 <cosf+0x124>
34025240:	4b45      	ldr	r3, [pc, #276]	@ (34025358 <cosf+0x138>)
34025242:	ee27 4b07 	vmul.f64	d4, d7, d7
34025246:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
3402524a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
3402524e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
34025252:	eea7 6b05 	vfma.f64	d6, d7, d5
34025256:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
3402525a:	eea7 0b05 	vfma.f64	d0, d7, d5
3402525e:	ee27 7b04 	vmul.f64	d7, d7, d4
34025262:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
34025266:	eea4 0b05 	vfma.f64	d0, d4, d5
3402526a:	eea6 0b07 	vfma.f64	d0, d6, d7
3402526e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34025272:	bd38      	pop	{r3, r4, r5, pc}
34025274:	f240 422e 	movw	r2, #1070	@ 0x42e
34025278:	4293      	cmp	r3, r2
3402527a:	d829      	bhi.n	340252d0 <cosf+0xb0>
3402527c:	4b36      	ldr	r3, [pc, #216]	@ (34025358 <cosf+0x138>)
3402527e:	ed93 6b08 	vldr	d6, [r3, #32]
34025282:	f103 0070 	add.w	r0, r3, #112	@ 0x70
34025286:	ee27 6b06 	vmul.f64	d6, d7, d6
3402528a:	eefd 6bc6 	vcvt.s32.f64	s13, d6
3402528e:	ee16 1a90 	vmov	r1, s13
34025292:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
34025296:	1609      	asrs	r1, r1, #24
34025298:	ee06 1a90 	vmov	s13, r1
3402529c:	f001 0203 	and.w	r2, r1, #3
340252a0:	f011 0f02 	tst.w	r1, #2
340252a4:	f081 0101 	eor.w	r1, r1, #1
340252a8:	eeb8 5be6 	vcvt.f64.s32	d5, s13
340252ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
340252b0:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
340252b4:	ed92 0b00 	vldr	d0, [r2]
340252b8:	eea5 7b46 	vfms.f64	d7, d5, d6
340252bc:	bf08      	it	eq
340252be:	4618      	moveq	r0, r3
340252c0:	ee27 1b07 	vmul.f64	d1, d7, d7
340252c4:	ee20 0b07 	vmul.f64	d0, d0, d7
340252c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
340252cc:	f7ff bf7c 	b.w	340251c8 <sinf_poly>
340252d0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
340252d4:	d232      	bcs.n	3402533c <cosf+0x11c>
340252d6:	f3c4 6083 	ubfx	r0, r4, #26, #4
340252da:	4920      	ldr	r1, [pc, #128]	@ (3402535c <cosf+0x13c>)
340252dc:	f3c4 0316 	ubfx	r3, r4, #0, #23
340252e0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
340252e4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
340252e8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
340252ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
340252f0:	6a10      	ldr	r0, [r2, #32]
340252f2:	40ab      	lsls	r3, r5
340252f4:	6912      	ldr	r2, [r2, #16]
340252f6:	fba0 5003 	umull	r5, r0, r0, r3
340252fa:	4359      	muls	r1, r3
340252fc:	fbe3 0102 	umlal	r0, r1, r3, r2
34025300:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
34025304:	0f9d      	lsrs	r5, r3, #30
34025306:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
3402530a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
3402530e:	1ac9      	subs	r1, r1, r3
34025310:	f7dc fbaa 	bl	34001a68 <__aeabi_l2d>
34025314:	4b10      	ldr	r3, [pc, #64]	@ (34025358 <cosf+0x138>)
34025316:	f004 0203 	and.w	r2, r4, #3
3402531a:	f014 0f02 	tst.w	r4, #2
3402531e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 34025350 <cosf+0x130>
34025322:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
34025326:	ec41 0b17 	vmov	d7, r0, r1
3402532a:	ee27 7b06 	vmul.f64	d7, d7, d6
3402532e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
34025332:	f085 0101 	eor.w	r1, r5, #1
34025336:	ed92 0b00 	vldr	d0, [r2]
3402533a:	e7bf      	b.n	340252bc <cosf+0x9c>
3402533c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34025340:	f000 b84c 	b.w	340253dc <__math_invalidf>
34025344:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34025348:	e793      	b.n	34025272 <cosf+0x52>
3402534a:	bf00      	nop
3402534c:	f3af 8000 	nop.w
34025350:	54442d18 	.word	0x54442d18
34025354:	3c1921fb 	.word	0x3c1921fb
34025358:	340cb808 	.word	0x340cb808
3402535c:	340cb7a8 	.word	0x340cb7a8

34025360 <with_errnof>:
34025360:	b510      	push	{r4, lr}
34025362:	ed2d 8b02 	vpush	{d8}
34025366:	eeb0 8a40 	vmov.f32	s16, s0
3402536a:	4604      	mov	r4, r0
3402536c:	f7fc fc3e 	bl	34021bec <__errno>
34025370:	6004      	str	r4, [r0, #0]
34025372:	eeb0 0a48 	vmov.f32	s0, s16
34025376:	ecbd 8b02 	vpop	{d8}
3402537a:	bd10      	pop	{r4, pc}

3402537c <xflowf>:
3402537c:	b130      	cbz	r0, 3402538c <xflowf+0x10>
3402537e:	eef1 7a40 	vneg.f32	s15, s0
34025382:	ee27 0a80 	vmul.f32	s0, s15, s0
34025386:	2022      	movs	r0, #34	@ 0x22
34025388:	f7ff bfea 	b.w	34025360 <with_errnof>
3402538c:	eef0 7a40 	vmov.f32	s15, s0
34025390:	e7f7      	b.n	34025382 <xflowf+0x6>
	...

34025394 <__math_uflowf>:
34025394:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 3402539c <__math_uflowf+0x8>
34025398:	f7ff bff0 	b.w	3402537c <xflowf>
3402539c:	10000000 	.word	0x10000000

340253a0 <__math_may_uflowf>:
340253a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 340253a8 <__math_may_uflowf+0x8>
340253a4:	f7ff bfea 	b.w	3402537c <xflowf>
340253a8:	1a200000 	.word	0x1a200000

340253ac <__math_oflowf>:
340253ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 340253b4 <__math_oflowf+0x8>
340253b0:	f7ff bfe4 	b.w	3402537c <xflowf>
340253b4:	70000000 	.word	0x70000000

340253b8 <__math_divzerof>:
340253b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
340253bc:	2800      	cmp	r0, #0
340253be:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
340253c2:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 340253d8 <__math_divzerof+0x20>
340253c6:	f04f 0022 	mov.w	r0, #34	@ 0x22
340253ca:	fe47 7a87 	vseleq.f32	s15, s15, s14
340253ce:	ee87 0a80 	vdiv.f32	s0, s15, s0
340253d2:	f7ff bfc5 	b.w	34025360 <with_errnof>
340253d6:	bf00      	nop
340253d8:	00000000 	.word	0x00000000

340253dc <__math_invalidf>:
340253dc:	eef0 7a40 	vmov.f32	s15, s0
340253e0:	ee30 7a40 	vsub.f32	s14, s0, s0
340253e4:	eef4 7a67 	vcmp.f32	s15, s15
340253e8:	ee87 0a07 	vdiv.f32	s0, s14, s14
340253ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340253f0:	d602      	bvs.n	340253f8 <__math_invalidf+0x1c>
340253f2:	2021      	movs	r0, #33	@ 0x21
340253f4:	f7ff bfb4 	b.w	34025360 <with_errnof>
340253f8:	4770      	bx	lr

340253fa <__ieee754_sqrtf>:
340253fa:	eeb1 0ac0 	vsqrt.f32	s0, s0
340253fe:	4770      	bx	lr

34025400 <__kernel_cos>:
34025400:	eeb0 5b40 	vmov.f64	d5, d0
34025404:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34025408:	ee15 1a90 	vmov	r1, s11
3402540c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34025410:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
34025414:	d204      	bcs.n	34025420 <__kernel_cos+0x20>
34025416:	eefd 7bc5 	vcvt.s32.f64	s15, d5
3402541a:	ee17 3a90 	vmov	r3, s15
3402541e:	b343      	cbz	r3, 34025472 <__kernel_cos+0x72>
34025420:	ee25 6b05 	vmul.f64	d6, d5, d5
34025424:	4b28      	ldr	r3, [pc, #160]	@ (340254c8 <__kernel_cos+0xc8>)
34025426:	4299      	cmp	r1, r3
34025428:	ee21 1b45 	vnmul.f64	d1, d1, d5
3402542c:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 34025498 <__kernel_cos+0x98>
34025430:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 340254a0 <__kernel_cos+0xa0>
34025434:	eea6 4b07 	vfma.f64	d4, d6, d7
34025438:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 340254a8 <__kernel_cos+0xa8>
3402543c:	eea4 7b06 	vfma.f64	d7, d4, d6
34025440:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 340254b0 <__kernel_cos+0xb0>
34025444:	eea7 4b06 	vfma.f64	d4, d7, d6
34025448:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 340254b8 <__kernel_cos+0xb8>
3402544c:	eea4 7b06 	vfma.f64	d7, d4, d6
34025450:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 340254c0 <__kernel_cos+0xc0>
34025454:	eea7 4b06 	vfma.f64	d4, d7, d6
34025458:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
3402545c:	ee26 7b07 	vmul.f64	d7, d6, d7
34025460:	ee24 4b06 	vmul.f64	d4, d4, d6
34025464:	eea6 1b04 	vfma.f64	d1, d6, d4
34025468:	d804      	bhi.n	34025474 <__kernel_cos+0x74>
3402546a:	ee37 7b41 	vsub.f64	d7, d7, d1
3402546e:	ee30 0b47 	vsub.f64	d0, d0, d7
34025472:	4770      	bx	lr
34025474:	4b15      	ldr	r3, [pc, #84]	@ (340254cc <__kernel_cos+0xcc>)
34025476:	4299      	cmp	r1, r3
34025478:	d809      	bhi.n	3402548e <__kernel_cos+0x8e>
3402547a:	2200      	movs	r2, #0
3402547c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
34025480:	ec43 2b16 	vmov	d6, r2, r3
34025484:	ee30 0b46 	vsub.f64	d0, d0, d6
34025488:	ee37 7b46 	vsub.f64	d7, d7, d6
3402548c:	e7ed      	b.n	3402546a <__kernel_cos+0x6a>
3402548e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
34025492:	e7f7      	b.n	34025484 <__kernel_cos+0x84>
34025494:	f3af 8000 	nop.w
34025498:	be8838d4 	.word	0xbe8838d4
3402549c:	bda8fae9 	.word	0xbda8fae9
340254a0:	bdb4b1c4 	.word	0xbdb4b1c4
340254a4:	3e21ee9e 	.word	0x3e21ee9e
340254a8:	809c52ad 	.word	0x809c52ad
340254ac:	be927e4f 	.word	0xbe927e4f
340254b0:	19cb1590 	.word	0x19cb1590
340254b4:	3efa01a0 	.word	0x3efa01a0
340254b8:	16c15177 	.word	0x16c15177
340254bc:	bf56c16c 	.word	0xbf56c16c
340254c0:	5555554c 	.word	0x5555554c
340254c4:	3fa55555 	.word	0x3fa55555
340254c8:	3fd33332 	.word	0x3fd33332
340254cc:	3fe90000 	.word	0x3fe90000

340254d0 <__kernel_sin>:
340254d0:	ee10 3a90 	vmov	r3, s1
340254d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
340254d8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
340254dc:	d204      	bcs.n	340254e8 <__kernel_sin+0x18>
340254de:	eefd 7bc0 	vcvt.s32.f64	s15, d0
340254e2:	ee17 3a90 	vmov	r3, s15
340254e6:	b35b      	cbz	r3, 34025540 <__kernel_sin+0x70>
340254e8:	ee20 6b00 	vmul.f64	d6, d0, d0
340254ec:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 34025548 <__kernel_sin+0x78>
340254f0:	ed9f 4b17 	vldr	d4, [pc, #92]	@ 34025550 <__kernel_sin+0x80>
340254f4:	ee20 5b06 	vmul.f64	d5, d0, d6
340254f8:	eea6 4b07 	vfma.f64	d4, d6, d7
340254fc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 34025558 <__kernel_sin+0x88>
34025500:	eea4 7b06 	vfma.f64	d7, d4, d6
34025504:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 34025560 <__kernel_sin+0x90>
34025508:	eea7 4b06 	vfma.f64	d4, d7, d6
3402550c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 34025568 <__kernel_sin+0x98>
34025510:	eea4 7b06 	vfma.f64	d7, d4, d6
34025514:	b930      	cbnz	r0, 34025524 <__kernel_sin+0x54>
34025516:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 34025570 <__kernel_sin+0xa0>
3402551a:	eea6 4b07 	vfma.f64	d4, d6, d7
3402551e:	eea4 0b05 	vfma.f64	d0, d4, d5
34025522:	4770      	bx	lr
34025524:	ee27 7b45 	vnmul.f64	d7, d7, d5
34025528:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
3402552c:	eea1 7b04 	vfma.f64	d7, d1, d4
34025530:	ee97 1b06 	vfnms.f64	d1, d7, d6
34025534:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 34025578 <__kernel_sin+0xa8>
34025538:	eea5 1b07 	vfma.f64	d1, d5, d7
3402553c:	ee30 0b41 	vsub.f64	d0, d0, d1
34025540:	4770      	bx	lr
34025542:	bf00      	nop
34025544:	f3af 8000 	nop.w
34025548:	5acfd57c 	.word	0x5acfd57c
3402554c:	3de5d93a 	.word	0x3de5d93a
34025550:	8a2b9ceb 	.word	0x8a2b9ceb
34025554:	be5ae5e6 	.word	0xbe5ae5e6
34025558:	57b1fe7d 	.word	0x57b1fe7d
3402555c:	3ec71de3 	.word	0x3ec71de3
34025560:	19c161d5 	.word	0x19c161d5
34025564:	bf2a01a0 	.word	0xbf2a01a0
34025568:	1110f8a6 	.word	0x1110f8a6
3402556c:	3f811111 	.word	0x3f811111
34025570:	55555549 	.word	0x55555549
34025574:	bfc55555 	.word	0xbfc55555
34025578:	55555549 	.word	0x55555549
3402557c:	3fc55555 	.word	0x3fc55555

34025580 <__ieee754_log10>:
34025580:	ee10 3a90 	vmov	r3, s1
34025584:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34025588:	b510      	push	{r4, lr}
3402558a:	ed2d 8b02 	vpush	{d8}
3402558e:	da21      	bge.n	340255d4 <__ieee754_log10+0x54>
34025590:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
34025594:	ee10 1a10 	vmov	r1, s0
34025598:	430a      	orrs	r2, r1
3402559a:	d108      	bne.n	340255ae <__ieee754_log10+0x2e>
3402559c:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 34025628 <__ieee754_log10+0xa8>
340255a0:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 34025630 <__ieee754_log10+0xb0>
340255a4:	ee86 0b07 	vdiv.f64	d0, d6, d7
340255a8:	ecbd 8b02 	vpop	{d8}
340255ac:	bd10      	pop	{r4, pc}
340255ae:	2b00      	cmp	r3, #0
340255b0:	da02      	bge.n	340255b8 <__ieee754_log10+0x38>
340255b2:	ee30 6b40 	vsub.f64	d6, d0, d0
340255b6:	e7f3      	b.n	340255a0 <__ieee754_log10+0x20>
340255b8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 34025638 <__ieee754_log10+0xb8>
340255bc:	f06f 0235 	mvn.w	r2, #53	@ 0x35
340255c0:	ee20 0b07 	vmul.f64	d0, d0, d7
340255c4:	ee10 3a90 	vmov	r3, s1
340255c8:	4923      	ldr	r1, [pc, #140]	@ (34025658 <__ieee754_log10+0xd8>)
340255ca:	428b      	cmp	r3, r1
340255cc:	dd04      	ble.n	340255d8 <__ieee754_log10+0x58>
340255ce:	ee30 0b00 	vadd.f64	d0, d0, d0
340255d2:	e7e9      	b.n	340255a8 <__ieee754_log10+0x28>
340255d4:	2200      	movs	r2, #0
340255d6:	e7f7      	b.n	340255c8 <__ieee754_log10+0x48>
340255d8:	1518      	asrs	r0, r3, #20
340255da:	f240 34ff 	movw	r4, #1023	@ 0x3ff
340255de:	f3c3 0113 	ubfx	r1, r3, #0, #20
340255e2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
340255e6:	4410      	add	r0, r2
340255e8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
340255ec:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
340255f0:	ee08 3a10 	vmov	s16, r3
340255f4:	ec53 2b10 	vmov	r2, r3, d0
340255f8:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
340255fc:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
34025600:	ec43 2b10 	vmov	d0, r2, r3
34025604:	f000 fbe0 	bl	34025dc8 <log>
34025608:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34025640 <__ieee754_log10+0xc0>
3402560c:	ee20 0b07 	vmul.f64	d0, d0, d7
34025610:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34025648 <__ieee754_log10+0xc8>
34025614:	eea8 0b07 	vfma.f64	d0, d8, d7
34025618:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34025650 <__ieee754_log10+0xd0>
3402561c:	eea8 0b07 	vfma.f64	d0, d8, d7
34025620:	e7c2      	b.n	340255a8 <__ieee754_log10+0x28>
34025622:	bf00      	nop
34025624:	f3af 8000 	nop.w
34025628:	00000000 	.word	0x00000000
3402562c:	c3500000 	.word	0xc3500000
	...
3402563c:	43500000 	.word	0x43500000
34025640:	1526e50e 	.word	0x1526e50e
34025644:	3fdbcb7b 	.word	0x3fdbcb7b
34025648:	11f12b36 	.word	0x11f12b36
3402564c:	3d59fef3 	.word	0x3d59fef3
34025650:	509f6000 	.word	0x509f6000
34025654:	3fd34413 	.word	0x3fd34413
34025658:	7fefffff 	.word	0x7fefffff
3402565c:	00000000 	.word	0x00000000

34025660 <__ieee754_rem_pio2>:
34025660:	eeb0 7b40 	vmov.f64	d7, d0
34025664:	4b9a      	ldr	r3, [pc, #616]	@ (340258d0 <__ieee754_rem_pio2+0x270>)
34025666:	b570      	push	{r4, r5, r6, lr}
34025668:	ee17 5a90 	vmov	r5, s15
3402566c:	b088      	sub	sp, #32
3402566e:	4604      	mov	r4, r0
34025670:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
34025674:	429e      	cmp	r6, r3
34025676:	d807      	bhi.n	34025688 <__ieee754_rem_pio2+0x28>
34025678:	2200      	movs	r2, #0
3402567a:	2300      	movs	r3, #0
3402567c:	ed84 0b00 	vstr	d0, [r4]
34025680:	e9c0 2302 	strd	r2, r3, [r0, #8]
34025684:	2000      	movs	r0, #0
34025686:	e01b      	b.n	340256c0 <__ieee754_rem_pio2+0x60>
34025688:	4b92      	ldr	r3, [pc, #584]	@ (340258d4 <__ieee754_rem_pio2+0x274>)
3402568a:	429e      	cmp	r6, r3
3402568c:	d83b      	bhi.n	34025706 <__ieee754_rem_pio2+0xa6>
3402568e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
34025692:	2d00      	cmp	r5, #0
34025694:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 34025890 <__ieee754_rem_pio2+0x230>
34025698:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
3402569c:	dd19      	ble.n	340256d2 <__ieee754_rem_pio2+0x72>
3402569e:	429e      	cmp	r6, r3
340256a0:	ee30 7b46 	vsub.f64	d7, d0, d6
340256a4:	d00e      	beq.n	340256c4 <__ieee754_rem_pio2+0x64>
340256a6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 34025898 <__ieee754_rem_pio2+0x238>
340256aa:	ee37 6b45 	vsub.f64	d6, d7, d5
340256ae:	2001      	movs	r0, #1
340256b0:	ee37 7b46 	vsub.f64	d7, d7, d6
340256b4:	ed84 6b00 	vstr	d6, [r4]
340256b8:	ee37 7b45 	vsub.f64	d7, d7, d5
340256bc:	ed84 7b02 	vstr	d7, [r4, #8]
340256c0:	b008      	add	sp, #32
340256c2:	bd70      	pop	{r4, r5, r6, pc}
340256c4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 340258a0 <__ieee754_rem_pio2+0x240>
340256c8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 340258a8 <__ieee754_rem_pio2+0x248>
340256cc:	ee37 7b46 	vsub.f64	d7, d7, d6
340256d0:	e7eb      	b.n	340256aa <__ieee754_rem_pio2+0x4a>
340256d2:	429e      	cmp	r6, r3
340256d4:	ee30 7b06 	vadd.f64	d7, d0, d6
340256d8:	d00e      	beq.n	340256f8 <__ieee754_rem_pio2+0x98>
340256da:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 34025898 <__ieee754_rem_pio2+0x238>
340256de:	ee37 6b05 	vadd.f64	d6, d7, d5
340256e2:	f04f 30ff 	mov.w	r0, #4294967295
340256e6:	ee37 7b46 	vsub.f64	d7, d7, d6
340256ea:	ed84 6b00 	vstr	d6, [r4]
340256ee:	ee37 7b05 	vadd.f64	d7, d7, d5
340256f2:	ed84 7b02 	vstr	d7, [r4, #8]
340256f6:	e7e3      	b.n	340256c0 <__ieee754_rem_pio2+0x60>
340256f8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 340258a0 <__ieee754_rem_pio2+0x240>
340256fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 340258a8 <__ieee754_rem_pio2+0x248>
34025700:	ee37 7b06 	vadd.f64	d7, d7, d6
34025704:	e7eb      	b.n	340256de <__ieee754_rem_pio2+0x7e>
34025706:	4b74      	ldr	r3, [pc, #464]	@ (340258d8 <__ieee754_rem_pio2+0x278>)
34025708:	429e      	cmp	r6, r3
3402570a:	d86f      	bhi.n	340257ec <__ieee754_rem_pio2+0x18c>
3402570c:	f000 f8ec 	bl	340258e8 <fabs>
34025710:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
34025714:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 340258b0 <__ieee754_rem_pio2+0x250>
34025718:	eea0 7b06 	vfma.f64	d7, d0, d6
3402571c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
34025720:	eeb8 5be7 	vcvt.f64.s32	d5, s15
34025724:	ee17 0a90 	vmov	r0, s15
34025728:	ed9f 7b59 	vldr	d7, [pc, #356]	@ 34025890 <__ieee754_rem_pio2+0x230>
3402572c:	281f      	cmp	r0, #31
3402572e:	eeb1 4b45 	vneg.f64	d4, d5
34025732:	eea5 0b47 	vfms.f64	d0, d5, d7
34025736:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 34025898 <__ieee754_rem_pio2+0x238>
3402573a:	ee25 7b07 	vmul.f64	d7, d5, d7
3402573e:	ee30 6b47 	vsub.f64	d6, d0, d7
34025742:	dc05      	bgt.n	34025750 <__ieee754_rem_pio2+0xf0>
34025744:	1e42      	subs	r2, r0, #1
34025746:	4b65      	ldr	r3, [pc, #404]	@ (340258dc <__ieee754_rem_pio2+0x27c>)
34025748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
3402574c:	42b3      	cmp	r3, r6
3402574e:	d108      	bne.n	34025762 <__ieee754_rem_pio2+0x102>
34025750:	ee16 3a90 	vmov	r3, s13
34025754:	1532      	asrs	r2, r6, #20
34025756:	f3c3 530a 	ubfx	r3, r3, #20, #11
3402575a:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
3402575e:	2b10      	cmp	r3, #16
34025760:	dc02      	bgt.n	34025768 <__ieee754_rem_pio2+0x108>
34025762:	ed84 6b00 	vstr	d6, [r4]
34025766:	e01a      	b.n	3402579e <__ieee754_rem_pio2+0x13e>
34025768:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 340258a0 <__ieee754_rem_pio2+0x240>
3402576c:	eeb0 6b40 	vmov.f64	d6, d0
34025770:	eea4 6b03 	vfma.f64	d6, d4, d3
34025774:	ee30 7b46 	vsub.f64	d7, d0, d6
34025778:	eea4 7b03 	vfma.f64	d7, d4, d3
3402577c:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 340258a8 <__ieee754_rem_pio2+0x248>
34025780:	ee95 7b03 	vfnms.f64	d7, d5, d3
34025784:	ee36 3b47 	vsub.f64	d3, d6, d7
34025788:	ee13 3a90 	vmov	r3, s7
3402578c:	f3c3 530a 	ubfx	r3, r3, #20, #11
34025790:	1ad3      	subs	r3, r2, r3
34025792:	2b31      	cmp	r3, #49	@ 0x31
34025794:	dc17      	bgt.n	340257c6 <__ieee754_rem_pio2+0x166>
34025796:	eeb0 0b46 	vmov.f64	d0, d6
3402579a:	ed84 3b00 	vstr	d3, [r4]
3402579e:	ed94 6b00 	vldr	d6, [r4]
340257a2:	2d00      	cmp	r5, #0
340257a4:	ee30 0b46 	vsub.f64	d0, d0, d6
340257a8:	ee30 0b47 	vsub.f64	d0, d0, d7
340257ac:	ed84 0b02 	vstr	d0, [r4, #8]
340257b0:	da86      	bge.n	340256c0 <__ieee754_rem_pio2+0x60>
340257b2:	eeb1 6b46 	vneg.f64	d6, d6
340257b6:	eeb1 0b40 	vneg.f64	d0, d0
340257ba:	ed84 6b00 	vstr	d6, [r4]
340257be:	ed84 0b02 	vstr	d0, [r4, #8]
340257c2:	4240      	negs	r0, r0
340257c4:	e77c      	b.n	340256c0 <__ieee754_rem_pio2+0x60>
340257c6:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 340258b8 <__ieee754_rem_pio2+0x258>
340257ca:	eeb0 0b46 	vmov.f64	d0, d6
340257ce:	eea4 0b07 	vfma.f64	d0, d4, d7
340257d2:	ee36 6b40 	vsub.f64	d6, d6, d0
340257d6:	eea4 6b07 	vfma.f64	d6, d4, d7
340257da:	ed9f 4b39 	vldr	d4, [pc, #228]	@ 340258c0 <__ieee754_rem_pio2+0x260>
340257de:	eeb0 7b46 	vmov.f64	d7, d6
340257e2:	ee95 7b04 	vfnms.f64	d7, d5, d4
340257e6:	ee30 6b47 	vsub.f64	d6, d0, d7
340257ea:	e7ba      	b.n	34025762 <__ieee754_rem_pio2+0x102>
340257ec:	4b3c      	ldr	r3, [pc, #240]	@ (340258e0 <__ieee754_rem_pio2+0x280>)
340257ee:	429e      	cmp	r6, r3
340257f0:	d906      	bls.n	34025800 <__ieee754_rem_pio2+0x1a0>
340257f2:	ee30 7b40 	vsub.f64	d7, d0, d0
340257f6:	ed80 7b02 	vstr	d7, [r0, #8]
340257fa:	ed80 7b00 	vstr	d7, [r0]
340257fe:	e741      	b.n	34025684 <__ieee754_rem_pio2+0x24>
34025800:	1532      	asrs	r2, r6, #20
34025802:	ee10 3a10 	vmov	r3, s0
34025806:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
3402580a:	4618      	mov	r0, r3
3402580c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
34025810:	ec41 0b17 	vmov	d7, r0, r1
34025814:	eebd 6bc7 	vcvt.s32.f64	s12, d7
34025818:	a808      	add	r0, sp, #32
3402581a:	2103      	movs	r1, #3
3402581c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
34025820:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 340258c8 <__ieee754_rem_pio2+0x268>
34025824:	ee37 7b46 	vsub.f64	d7, d7, d6
34025828:	ed8d 6b02 	vstr	d6, [sp, #8]
3402582c:	ee27 7b05 	vmul.f64	d7, d7, d5
34025830:	eebd 6bc7 	vcvt.s32.f64	s12, d7
34025834:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
34025838:	ee37 7b46 	vsub.f64	d7, d7, d6
3402583c:	ed8d 6b04 	vstr	d6, [sp, #16]
34025840:	ee27 7b05 	vmul.f64	d7, d7, d5
34025844:	ed8d 7b06 	vstr	d7, [sp, #24]
34025848:	ed30 7b02 	vldmdb	r0!, {d7}
3402584c:	460b      	mov	r3, r1
3402584e:	3901      	subs	r1, #1
34025850:	eeb5 7b40 	vcmp.f64	d7, #0.0
34025854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025858:	d0f6      	beq.n	34025848 <__ieee754_rem_pio2+0x1e8>
3402585a:	4922      	ldr	r1, [pc, #136]	@ (340258e4 <__ieee754_rem_pio2+0x284>)
3402585c:	a802      	add	r0, sp, #8
3402585e:	9101      	str	r1, [sp, #4]
34025860:	2102      	movs	r1, #2
34025862:	9100      	str	r1, [sp, #0]
34025864:	4621      	mov	r1, r4
34025866:	f000 fba7 	bl	34025fb8 <__kernel_rem_pio2>
3402586a:	2d00      	cmp	r5, #0
3402586c:	f6bf af28 	bge.w	340256c0 <__ieee754_rem_pio2+0x60>
34025870:	ed94 7b00 	vldr	d7, [r4]
34025874:	eeb1 7b47 	vneg.f64	d7, d7
34025878:	ed84 7b00 	vstr	d7, [r4]
3402587c:	ed94 7b02 	vldr	d7, [r4, #8]
34025880:	eeb1 7b47 	vneg.f64	d7, d7
34025884:	ed84 7b02 	vstr	d7, [r4, #8]
34025888:	e79b      	b.n	340257c2 <__ieee754_rem_pio2+0x162>
3402588a:	bf00      	nop
3402588c:	f3af 8000 	nop.w
34025890:	54400000 	.word	0x54400000
34025894:	3ff921fb 	.word	0x3ff921fb
34025898:	1a626331 	.word	0x1a626331
3402589c:	3dd0b461 	.word	0x3dd0b461
340258a0:	1a600000 	.word	0x1a600000
340258a4:	3dd0b461 	.word	0x3dd0b461
340258a8:	2e037073 	.word	0x2e037073
340258ac:	3ba3198a 	.word	0x3ba3198a
340258b0:	6dc9c883 	.word	0x6dc9c883
340258b4:	3fe45f30 	.word	0x3fe45f30
340258b8:	2e000000 	.word	0x2e000000
340258bc:	3ba3198a 	.word	0x3ba3198a
340258c0:	252049c1 	.word	0x252049c1
340258c4:	397b839a 	.word	0x397b839a
340258c8:	00000000 	.word	0x00000000
340258cc:	41700000 	.word	0x41700000
340258d0:	3fe921fb 	.word	0x3fe921fb
340258d4:	4002d97b 	.word	0x4002d97b
340258d8:	413921fb 	.word	0x413921fb
340258dc:	340cb8e8 	.word	0x340cb8e8
340258e0:	7fefffff 	.word	0x7fefffff
340258e4:	340cb968 	.word	0x340cb968

340258e8 <fabs>:
340258e8:	ec51 0b10 	vmov	r0, r1, d0
340258ec:	4602      	mov	r2, r0
340258ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
340258f2:	ec43 2b10 	vmov	d0, r2, r3
340258f6:	4770      	bx	lr

340258f8 <__ieee754_acosf>:
340258f8:	b508      	push	{r3, lr}
340258fa:	ee10 3a10 	vmov	r3, s0
340258fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
34025902:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
34025906:	ed2d 8b0c 	vpush	{d8-d13}
3402590a:	d109      	bne.n	34025920 <__ieee754_acosf+0x28>
3402590c:	2b00      	cmp	r3, #0
3402590e:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 34025aa0 <__ieee754_acosf+0x1a8>
34025912:	eddf 7a64 	vldr	s15, [pc, #400]	@ 34025aa4 <__ieee754_acosf+0x1ac>
34025916:	fe37 0a80 	vselgt.f32	s0, s15, s0
3402591a:	ecbd 8b0c 	vpop	{d8-d13}
3402591e:	bd08      	pop	{r3, pc}
34025920:	d904      	bls.n	3402592c <__ieee754_acosf+0x34>
34025922:	ee30 8a40 	vsub.f32	s16, s0, s0
34025926:	ee88 0a08 	vdiv.f32	s0, s16, s16
3402592a:	e7f6      	b.n	3402591a <__ieee754_acosf+0x22>
3402592c:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
34025930:	d23c      	bcs.n	340259ac <__ieee754_acosf+0xb4>
34025932:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
34025936:	f240 80af 	bls.w	34025a98 <__ieee754_acosf+0x1a0>
3402593a:	ee60 7a00 	vmul.f32	s15, s0, s0
3402593e:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 34025aa8 <__ieee754_acosf+0x1b0>
34025942:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 34025aac <__ieee754_acosf+0x1b4>
34025946:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 34025ab0 <__ieee754_acosf+0x1b8>
3402594a:	eea7 7aa6 	vfma.f32	s14, s15, s13
3402594e:	eddf 6a59 	vldr	s13, [pc, #356]	@ 34025ab4 <__ieee754_acosf+0x1bc>
34025952:	eee7 6a27 	vfma.f32	s13, s14, s15
34025956:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 34025ab8 <__ieee754_acosf+0x1c0>
3402595a:	eea6 7aa7 	vfma.f32	s14, s13, s15
3402595e:	eddf 6a57 	vldr	s13, [pc, #348]	@ 34025abc <__ieee754_acosf+0x1c4>
34025962:	eee7 6a27 	vfma.f32	s13, s14, s15
34025966:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 34025ac0 <__ieee754_acosf+0x1c8>
3402596a:	eea6 7aa7 	vfma.f32	s14, s13, s15
3402596e:	eddf 6a55 	vldr	s13, [pc, #340]	@ 34025ac4 <__ieee754_acosf+0x1cc>
34025972:	eea7 6aa6 	vfma.f32	s12, s15, s13
34025976:	eddf 6a54 	vldr	s13, [pc, #336]	@ 34025ac8 <__ieee754_acosf+0x1d0>
3402597a:	ee27 7a27 	vmul.f32	s14, s14, s15
3402597e:	eee6 6a27 	vfma.f32	s13, s12, s15
34025982:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 34025acc <__ieee754_acosf+0x1d4>
34025986:	eea6 6aa7 	vfma.f32	s12, s13, s15
3402598a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
3402598e:	eee6 6a27 	vfma.f32	s13, s12, s15
34025992:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 34025ad0 <__ieee754_acosf+0x1d8>
34025996:	ee87 6a26 	vdiv.f32	s12, s14, s13
3402599a:	eee0 7a46 	vfms.f32	s15, s0, s12
3402599e:	ee70 7a67 	vsub.f32	s15, s0, s15
340259a2:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 34025ad4 <__ieee754_acosf+0x1dc>
340259a6:	ee30 0a67 	vsub.f32	s0, s0, s15
340259aa:	e7b6      	b.n	3402591a <__ieee754_acosf+0x22>
340259ac:	2b00      	cmp	r3, #0
340259ae:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
340259b2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
340259b6:	eddf da3c 	vldr	s27, [pc, #240]	@ 34025aa8 <__ieee754_acosf+0x1b0>
340259ba:	eddf ca3c 	vldr	s25, [pc, #240]	@ 34025aac <__ieee754_acosf+0x1b4>
340259be:	ed9f ca3d 	vldr	s24, [pc, #244]	@ 34025ab4 <__ieee754_acosf+0x1bc>
340259c2:	eddf ba3d 	vldr	s23, [pc, #244]	@ 34025ab8 <__ieee754_acosf+0x1c0>
340259c6:	ed9f ba3d 	vldr	s22, [pc, #244]	@ 34025abc <__ieee754_acosf+0x1c4>
340259ca:	eddf 8a3d 	vldr	s17, [pc, #244]	@ 34025ac0 <__ieee754_acosf+0x1c8>
340259ce:	ed9f da3d 	vldr	s26, [pc, #244]	@ 34025ac4 <__ieee754_acosf+0x1cc>
340259d2:	eddf aa37 	vldr	s21, [pc, #220]	@ 34025ab0 <__ieee754_acosf+0x1b8>
340259d6:	ed9f aa3c 	vldr	s20, [pc, #240]	@ 34025ac8 <__ieee754_acosf+0x1d0>
340259da:	eddf 9a3c 	vldr	s19, [pc, #240]	@ 34025acc <__ieee754_acosf+0x1d4>
340259de:	da28      	bge.n	34025a32 <__ieee754_acosf+0x13a>
340259e0:	ee30 8a09 	vadd.f32	s16, s0, s18
340259e4:	ee28 0a27 	vmul.f32	s0, s16, s15
340259e8:	eee0 ca2d 	vfma.f32	s25, s0, s27
340259ec:	eee0 aa0d 	vfma.f32	s21, s0, s26
340259f0:	eeac ca80 	vfma.f32	s24, s25, s0
340259f4:	eeaa aa80 	vfma.f32	s20, s21, s0
340259f8:	eeec ba00 	vfma.f32	s23, s24, s0
340259fc:	eeea 9a00 	vfma.f32	s19, s20, s0
34025a00:	eeab ba80 	vfma.f32	s22, s23, s0
34025a04:	eea9 9a80 	vfma.f32	s18, s19, s0
34025a08:	eeeb 8a00 	vfma.f32	s17, s22, s0
34025a0c:	ee68 8a80 	vmul.f32	s17, s17, s0
34025a10:	f7ff fcf3 	bl	340253fa <__ieee754_sqrtf>
34025a14:	eddf 7a30 	vldr	s15, [pc, #192]	@ 34025ad8 <__ieee754_acosf+0x1e0>
34025a18:	ee88 7a89 	vdiv.f32	s14, s17, s18
34025a1c:	eee0 7a07 	vfma.f32	s15, s0, s14
34025a20:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
34025a24:	ee77 7a80 	vadd.f32	s15, s15, s0
34025a28:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 34025adc <__ieee754_acosf+0x1e4>
34025a2c:	eea7 0ac7 	vfms.f32	s0, s15, s14
34025a30:	e773      	b.n	3402591a <__ieee754_acosf+0x22>
34025a32:	ee39 8a40 	vsub.f32	s16, s18, s0
34025a36:	ee28 8a27 	vmul.f32	s16, s16, s15
34025a3a:	eeb0 0a48 	vmov.f32	s0, s16
34025a3e:	f7ff fcdc 	bl	340253fa <__ieee754_sqrtf>
34025a42:	eee8 ca2d 	vfma.f32	s25, s16, s27
34025a46:	eee8 aa0d 	vfma.f32	s21, s16, s26
34025a4a:	ee10 3a10 	vmov	r3, s0
34025a4e:	eeb0 6a48 	vmov.f32	s12, s16
34025a52:	f36f 030b 	bfc	r3, #0, #12
34025a56:	ee07 3a90 	vmov	s15, r3
34025a5a:	eeac ca88 	vfma.f32	s24, s25, s16
34025a5e:	eeaa aa88 	vfma.f32	s20, s21, s16
34025a62:	eea7 6ae7 	vfms.f32	s12, s15, s15
34025a66:	ee70 6a27 	vadd.f32	s13, s0, s15
34025a6a:	eeec ba08 	vfma.f32	s23, s24, s16
34025a6e:	eeea 9a08 	vfma.f32	s19, s20, s16
34025a72:	ee86 7a26 	vdiv.f32	s14, s12, s13
34025a76:	eeab ba88 	vfma.f32	s22, s23, s16
34025a7a:	eea9 9a88 	vfma.f32	s18, s19, s16
34025a7e:	eeeb 8a08 	vfma.f32	s17, s22, s16
34025a82:	ee68 8a88 	vmul.f32	s17, s17, s16
34025a86:	eec8 6a89 	vdiv.f32	s13, s17, s18
34025a8a:	eea0 7a26 	vfma.f32	s14, s0, s13
34025a8e:	ee37 0a87 	vadd.f32	s0, s15, s14
34025a92:	ee30 0a00 	vadd.f32	s0, s0, s0
34025a96:	e740      	b.n	3402591a <__ieee754_acosf+0x22>
34025a98:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 34025ae0 <__ieee754_acosf+0x1e8>
34025a9c:	e73d      	b.n	3402591a <__ieee754_acosf+0x22>
34025a9e:	bf00      	nop
34025aa0:	40490fdb 	.word	0x40490fdb
34025aa4:	00000000 	.word	0x00000000
34025aa8:	3811ef08 	.word	0x3811ef08
34025aac:	3a4f7f04 	.word	0x3a4f7f04
34025ab0:	bf303361 	.word	0xbf303361
34025ab4:	bd241146 	.word	0xbd241146
34025ab8:	3e4e0aa8 	.word	0x3e4e0aa8
34025abc:	bea6b090 	.word	0xbea6b090
34025ac0:	3e2aaaab 	.word	0x3e2aaaab
34025ac4:	3d9dc62e 	.word	0x3d9dc62e
34025ac8:	4001572d 	.word	0x4001572d
34025acc:	c019d139 	.word	0xc019d139
34025ad0:	33a22168 	.word	0x33a22168
34025ad4:	3fc90fda 	.word	0x3fc90fda
34025ad8:	b3a22168 	.word	0xb3a22168
34025adc:	40490fda 	.word	0x40490fda
34025ae0:	3fc90fdb 	.word	0x3fc90fdb

34025ae4 <__ieee754_atan2f>:
34025ae4:	ee10 2a90 	vmov	r2, s1
34025ae8:	eef0 7a40 	vmov.f32	s15, s0
34025aec:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
34025af0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
34025af4:	b510      	push	{r4, lr}
34025af6:	d806      	bhi.n	34025b06 <__ieee754_atan2f+0x22>
34025af8:	ee10 0a10 	vmov	r0, s0
34025afc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
34025b00:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
34025b04:	d904      	bls.n	34025b10 <__ieee754_atan2f+0x2c>
34025b06:	ee77 7aa0 	vadd.f32	s15, s15, s1
34025b0a:	eeb0 0a67 	vmov.f32	s0, s15
34025b0e:	bd10      	pop	{r4, pc}
34025b10:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
34025b14:	d103      	bne.n	34025b1e <__ieee754_atan2f+0x3a>
34025b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34025b1a:	f000 b881 	b.w	34025c20 <atanf>
34025b1e:	1794      	asrs	r4, r2, #30
34025b20:	f004 0402 	and.w	r4, r4, #2
34025b24:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
34025b28:	b93b      	cbnz	r3, 34025b3a <__ieee754_atan2f+0x56>
34025b2a:	2c02      	cmp	r4, #2
34025b2c:	d05c      	beq.n	34025be8 <__ieee754_atan2f+0x104>
34025b2e:	2c03      	cmp	r4, #3
34025b30:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 34025bfc <__ieee754_atan2f+0x118>
34025b34:	fe47 7a00 	vseleq.f32	s15, s14, s0
34025b38:	e7e7      	b.n	34025b0a <__ieee754_atan2f+0x26>
34025b3a:	b939      	cbnz	r1, 34025b4c <__ieee754_atan2f+0x68>
34025b3c:	2800      	cmp	r0, #0
34025b3e:	eddf 7a30 	vldr	s15, [pc, #192]	@ 34025c00 <__ieee754_atan2f+0x11c>
34025b42:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 34025c04 <__ieee754_atan2f+0x120>
34025b46:	fe67 7a27 	vselge.f32	s15, s14, s15
34025b4a:	e7de      	b.n	34025b0a <__ieee754_atan2f+0x26>
34025b4c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
34025b50:	d110      	bne.n	34025b74 <__ieee754_atan2f+0x90>
34025b52:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
34025b56:	f104 34ff 	add.w	r4, r4, #4294967295
34025b5a:	d107      	bne.n	34025b6c <__ieee754_atan2f+0x88>
34025b5c:	2c02      	cmp	r4, #2
34025b5e:	d846      	bhi.n	34025bee <__ieee754_atan2f+0x10a>
34025b60:	4b29      	ldr	r3, [pc, #164]	@ (34025c08 <__ieee754_atan2f+0x124>)
34025b62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
34025b66:	edd3 7a00 	vldr	s15, [r3]
34025b6a:	e7ce      	b.n	34025b0a <__ieee754_atan2f+0x26>
34025b6c:	2c02      	cmp	r4, #2
34025b6e:	d841      	bhi.n	34025bf4 <__ieee754_atan2f+0x110>
34025b70:	4b26      	ldr	r3, [pc, #152]	@ (34025c0c <__ieee754_atan2f+0x128>)
34025b72:	e7f6      	b.n	34025b62 <__ieee754_atan2f+0x7e>
34025b74:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
34025b78:	d0e0      	beq.n	34025b3c <__ieee754_atan2f+0x58>
34025b7a:	1a5b      	subs	r3, r3, r1
34025b7c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
34025b80:	ea4f 51e3 	mov.w	r1, r3, asr #23
34025b84:	da1a      	bge.n	34025bbc <__ieee754_atan2f+0xd8>
34025b86:	2a00      	cmp	r2, #0
34025b88:	da01      	bge.n	34025b8e <__ieee754_atan2f+0xaa>
34025b8a:	313c      	adds	r1, #60	@ 0x3c
34025b8c:	db19      	blt.n	34025bc2 <__ieee754_atan2f+0xde>
34025b8e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
34025b92:	f7fe fcfd 	bl	34024590 <fabsf>
34025b96:	f000 f843 	bl	34025c20 <atanf>
34025b9a:	eef0 7a40 	vmov.f32	s15, s0
34025b9e:	2c01      	cmp	r4, #1
34025ba0:	d012      	beq.n	34025bc8 <__ieee754_atan2f+0xe4>
34025ba2:	2c02      	cmp	r4, #2
34025ba4:	d017      	beq.n	34025bd6 <__ieee754_atan2f+0xf2>
34025ba6:	2c00      	cmp	r4, #0
34025ba8:	d0af      	beq.n	34025b0a <__ieee754_atan2f+0x26>
34025baa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 34025c10 <__ieee754_atan2f+0x12c>
34025bae:	ee77 7a87 	vadd.f32	s15, s15, s14
34025bb2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 34025c14 <__ieee754_atan2f+0x130>
34025bb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
34025bba:	e7a6      	b.n	34025b0a <__ieee754_atan2f+0x26>
34025bbc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 34025c04 <__ieee754_atan2f+0x120>
34025bc0:	e7ed      	b.n	34025b9e <__ieee754_atan2f+0xba>
34025bc2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 34025c18 <__ieee754_atan2f+0x134>
34025bc6:	e7ea      	b.n	34025b9e <__ieee754_atan2f+0xba>
34025bc8:	ee17 3a90 	vmov	r3, s15
34025bcc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
34025bd0:	ee07 3a90 	vmov	s15, r3
34025bd4:	e799      	b.n	34025b0a <__ieee754_atan2f+0x26>
34025bd6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 34025c10 <__ieee754_atan2f+0x12c>
34025bda:	ee77 7a87 	vadd.f32	s15, s15, s14
34025bde:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 34025c14 <__ieee754_atan2f+0x130>
34025be2:	ee77 7a67 	vsub.f32	s15, s14, s15
34025be6:	e790      	b.n	34025b0a <__ieee754_atan2f+0x26>
34025be8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 34025c14 <__ieee754_atan2f+0x130>
34025bec:	e78d      	b.n	34025b0a <__ieee754_atan2f+0x26>
34025bee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 34025c1c <__ieee754_atan2f+0x138>
34025bf2:	e78a      	b.n	34025b0a <__ieee754_atan2f+0x26>
34025bf4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 34025c18 <__ieee754_atan2f+0x134>
34025bf8:	e787      	b.n	34025b0a <__ieee754_atan2f+0x26>
34025bfa:	bf00      	nop
34025bfc:	c0490fdb 	.word	0xc0490fdb
34025c00:	bfc90fdb 	.word	0xbfc90fdb
34025c04:	3fc90fdb 	.word	0x3fc90fdb
34025c08:	340cba7c 	.word	0x340cba7c
34025c0c:	340cba70 	.word	0x340cba70
34025c10:	33bbbd2e 	.word	0x33bbbd2e
34025c14:	40490fdb 	.word	0x40490fdb
34025c18:	00000000 	.word	0x00000000
34025c1c:	3f490fdb 	.word	0x3f490fdb

34025c20 <atanf>:
34025c20:	b538      	push	{r3, r4, r5, lr}
34025c22:	ee10 5a10 	vmov	r5, s0
34025c26:	eef0 7a40 	vmov.f32	s15, s0
34025c2a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
34025c2e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
34025c32:	d30f      	bcc.n	34025c54 <atanf+0x34>
34025c34:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
34025c38:	d904      	bls.n	34025c44 <atanf+0x24>
34025c3a:	ee70 7a00 	vadd.f32	s15, s0, s0
34025c3e:	eeb0 0a67 	vmov.f32	s0, s15
34025c42:	bd38      	pop	{r3, r4, r5, pc}
34025c44:	2d00      	cmp	r5, #0
34025c46:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 34025d7c <atanf+0x15c>
34025c4a:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 34025d80 <atanf+0x160>
34025c4e:	fe77 7a27 	vselgt.f32	s15, s14, s15
34025c52:	e7f4      	b.n	34025c3e <atanf+0x1e>
34025c54:	4b4b      	ldr	r3, [pc, #300]	@ (34025d84 <atanf+0x164>)
34025c56:	429c      	cmp	r4, r3
34025c58:	d810      	bhi.n	34025c7c <atanf+0x5c>
34025c5a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
34025c5e:	d20a      	bcs.n	34025c76 <atanf+0x56>
34025c60:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 34025d88 <atanf+0x168>
34025c64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
34025c68:	ee30 7a07 	vadd.f32	s14, s0, s14
34025c6c:	eeb4 7ae6 	vcmpe.f32	s14, s13
34025c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025c74:	dce3      	bgt.n	34025c3e <atanf+0x1e>
34025c76:	f04f 33ff 	mov.w	r3, #4294967295
34025c7a:	e013      	b.n	34025ca4 <atanf+0x84>
34025c7c:	f7fe fc88 	bl	34024590 <fabsf>
34025c80:	4b42      	ldr	r3, [pc, #264]	@ (34025d8c <atanf+0x16c>)
34025c82:	429c      	cmp	r4, r3
34025c84:	d84f      	bhi.n	34025d26 <atanf+0x106>
34025c86:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
34025c8a:	429c      	cmp	r4, r3
34025c8c:	d841      	bhi.n	34025d12 <atanf+0xf2>
34025c8e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
34025c92:	2300      	movs	r3, #0
34025c94:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
34025c98:	eea0 7a27 	vfma.f32	s14, s0, s15
34025c9c:	ee30 0a27 	vadd.f32	s0, s0, s15
34025ca0:	eec7 7a00 	vdiv.f32	s15, s14, s0
34025ca4:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 34025d90 <atanf+0x170>
34025ca8:	1c5a      	adds	r2, r3, #1
34025caa:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 34025d94 <atanf+0x174>
34025cae:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 34025d98 <atanf+0x178>
34025cb2:	ee27 6aa7 	vmul.f32	s12, s15, s15
34025cb6:	ee66 6a06 	vmul.f32	s13, s12, s12
34025cba:	eee6 5a87 	vfma.f32	s11, s13, s14
34025cbe:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 34025d9c <atanf+0x17c>
34025cc2:	eea5 7aa6 	vfma.f32	s14, s11, s13
34025cc6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 34025da0 <atanf+0x180>
34025cca:	eee7 5a26 	vfma.f32	s11, s14, s13
34025cce:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 34025da4 <atanf+0x184>
34025cd2:	eea5 7aa6 	vfma.f32	s14, s11, s13
34025cd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 34025da8 <atanf+0x188>
34025cda:	eee7 5a26 	vfma.f32	s11, s14, s13
34025cde:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 34025dac <atanf+0x18c>
34025ce2:	eea6 5a87 	vfma.f32	s10, s13, s14
34025ce6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 34025db0 <atanf+0x190>
34025cea:	eea5 7a26 	vfma.f32	s14, s10, s13
34025cee:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 34025db4 <atanf+0x194>
34025cf2:	eea7 5a26 	vfma.f32	s10, s14, s13
34025cf6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 34025db8 <atanf+0x198>
34025cfa:	eea5 7a26 	vfma.f32	s14, s10, s13
34025cfe:	ee27 7a26 	vmul.f32	s14, s14, s13
34025d02:	eea5 7a86 	vfma.f32	s14, s11, s12
34025d06:	ee27 7a87 	vmul.f32	s14, s15, s14
34025d0a:	d121      	bne.n	34025d50 <atanf+0x130>
34025d0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
34025d10:	e795      	b.n	34025c3e <atanf+0x1e>
34025d12:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34025d16:	2301      	movs	r3, #1
34025d18:	ee30 7a67 	vsub.f32	s14, s0, s15
34025d1c:	ee30 0a27 	vadd.f32	s0, s0, s15
34025d20:	eec7 7a00 	vdiv.f32	s15, s14, s0
34025d24:	e7be      	b.n	34025ca4 <atanf+0x84>
34025d26:	4b25      	ldr	r3, [pc, #148]	@ (34025dbc <atanf+0x19c>)
34025d28:	429c      	cmp	r4, r3
34025d2a:	d80b      	bhi.n	34025d44 <atanf+0x124>
34025d2c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
34025d30:	2302      	movs	r3, #2
34025d32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34025d36:	ee70 6a67 	vsub.f32	s13, s0, s15
34025d3a:	eea0 7a27 	vfma.f32	s14, s0, s15
34025d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
34025d42:	e7af      	b.n	34025ca4 <atanf+0x84>
34025d44:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
34025d48:	2303      	movs	r3, #3
34025d4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
34025d4e:	e7a9      	b.n	34025ca4 <atanf+0x84>
34025d50:	4a1b      	ldr	r2, [pc, #108]	@ (34025dc0 <atanf+0x1a0>)
34025d52:	2d00      	cmp	r5, #0
34025d54:	491b      	ldr	r1, [pc, #108]	@ (34025dc4 <atanf+0x1a4>)
34025d56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
34025d5a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
34025d5e:	edd3 6a00 	vldr	s13, [r3]
34025d62:	ee37 7a66 	vsub.f32	s14, s14, s13
34025d66:	ee37 7a67 	vsub.f32	s14, s14, s15
34025d6a:	edd2 7a00 	vldr	s15, [r2]
34025d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
34025d72:	bfb8      	it	lt
34025d74:	eef1 7a67 	vneglt.f32	s15, s15
34025d78:	e761      	b.n	34025c3e <atanf+0x1e>
34025d7a:	bf00      	nop
34025d7c:	bfc90fdb 	.word	0xbfc90fdb
34025d80:	3fc90fdb 	.word	0x3fc90fdb
34025d84:	3edfffff 	.word	0x3edfffff
34025d88:	7149f2ca 	.word	0x7149f2ca
34025d8c:	3f97ffff 	.word	0x3f97ffff
34025d90:	3c8569d7 	.word	0x3c8569d7
34025d94:	3d4bda59 	.word	0x3d4bda59
34025d98:	bd6ef16b 	.word	0xbd6ef16b
34025d9c:	3d886b35 	.word	0x3d886b35
34025da0:	3dba2e6e 	.word	0x3dba2e6e
34025da4:	3e124925 	.word	0x3e124925
34025da8:	3eaaaaab 	.word	0x3eaaaaab
34025dac:	bd15a221 	.word	0xbd15a221
34025db0:	bd9d8795 	.word	0xbd9d8795
34025db4:	bde38e38 	.word	0xbde38e38
34025db8:	be4ccccd 	.word	0xbe4ccccd
34025dbc:	401bffff 	.word	0x401bffff
34025dc0:	340cba98 	.word	0x340cba98
34025dc4:	340cba88 	.word	0x340cba88

34025dc8 <log>:
34025dc8:	ee10 0a90 	vmov	r0, s1
34025dcc:	ee10 3a10 	vmov	r3, s0
34025dd0:	b4f0      	push	{r4, r5, r6, r7}
34025dd2:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
34025dd6:	f04f 34ff 	mov.w	r4, #4294967295
34025dda:	0c02      	lsrs	r2, r0, #16
34025ddc:	429c      	cmp	r4, r3
34025dde:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
34025de2:	4c71      	ldr	r4, [pc, #452]	@ (34025fa8 <log+0x1e0>)
34025de4:	418c      	sbcs	r4, r1
34025de6:	ed2d 8b02 	vpush	{d8}
34025dea:	d35a      	bcc.n	34025ea2 <log+0xda>
34025dec:	4a6f      	ldr	r2, [pc, #444]	@ (34025fac <log+0x1e4>)
34025dee:	4290      	cmp	r0, r2
34025df0:	bf08      	it	eq
34025df2:	2b00      	cmpeq	r3, #0
34025df4:	f000 80c7 	beq.w	34025f86 <log+0x1be>
34025df8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
34025dfc:	4b6c      	ldr	r3, [pc, #432]	@ (34025fb0 <log+0x1e8>)
34025dfe:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
34025e02:	ee30 0b47 	vsub.f64	d0, d0, d7
34025e06:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
34025e0a:	ee20 2b00 	vmul.f64	d2, d0, d0
34025e0e:	eea6 7b00 	vfma.f64	d7, d6, d0
34025e12:	ee20 4b02 	vmul.f64	d4, d0, d2
34025e16:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
34025e1a:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
34025e1e:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
34025e22:	eea6 7b02 	vfma.f64	d7, d6, d2
34025e26:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
34025e2a:	eea5 6b00 	vfma.f64	d6, d5, d0
34025e2e:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
34025e32:	eea5 6b02 	vfma.f64	d6, d5, d2
34025e36:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
34025e3a:	eea3 5b00 	vfma.f64	d5, d3, d0
34025e3e:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
34025e42:	eea3 5b02 	vfma.f64	d5, d3, d2
34025e46:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
34025e4a:	eea3 5b04 	vfma.f64	d5, d3, d4
34025e4e:	eeb0 3b40 	vmov.f64	d3, d0
34025e52:	eea5 6b04 	vfma.f64	d6, d5, d4
34025e56:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
34025e5a:	eea6 7b04 	vfma.f64	d7, d6, d4
34025e5e:	eeb0 6b40 	vmov.f64	d6, d0
34025e62:	eeb0 2b47 	vmov.f64	d2, d7
34025e66:	ed9f 7b4a 	vldr	d7, [pc, #296]	@ 34025f90 <log+0x1c8>
34025e6a:	eea0 6b07 	vfma.f64	d6, d0, d7
34025e6e:	eea0 6b47 	vfms.f64	d6, d0, d7
34025e72:	ee26 1b06 	vmul.f64	d1, d6, d6
34025e76:	ee30 8b46 	vsub.f64	d8, d0, d6
34025e7a:	eea1 3b05 	vfma.f64	d3, d1, d5
34025e7e:	ee30 7b43 	vsub.f64	d7, d0, d3
34025e82:	ee30 0b06 	vadd.f64	d0, d0, d6
34025e86:	eea1 7b05 	vfma.f64	d7, d1, d5
34025e8a:	ee25 5b08 	vmul.f64	d5, d5, d8
34025e8e:	eea5 7b00 	vfma.f64	d7, d5, d0
34025e92:	eea2 7b04 	vfma.f64	d7, d2, d4
34025e96:	ee33 0b07 	vadd.f64	d0, d3, d7
34025e9a:	ecbd 8b02 	vpop	{d8}
34025e9e:	bcf0      	pop	{r4, r5, r6, r7}
34025ea0:	4770      	bx	lr
34025ea2:	f1a2 0410 	sub.w	r4, r2, #16
34025ea6:	f647 71df 	movw	r1, #32735	@ 0x7fdf
34025eaa:	428c      	cmp	r4, r1
34025eac:	d923      	bls.n	34025ef6 <log+0x12e>
34025eae:	18d9      	adds	r1, r3, r3
34025eb0:	eb40 0400 	adc.w	r4, r0, r0
34025eb4:	4321      	orrs	r1, r4
34025eb6:	d105      	bne.n	34025ec4 <log+0xfc>
34025eb8:	2001      	movs	r0, #1
34025eba:	ecbd 8b02 	vpop	{d8}
34025ebe:	bcf0      	pop	{r4, r5, r6, r7}
34025ec0:	f7fe bb9e 	b.w	34024600 <__math_divzero>
34025ec4:	493b      	ldr	r1, [pc, #236]	@ (34025fb4 <log+0x1ec>)
34025ec6:	4288      	cmp	r0, r1
34025ec8:	bf08      	it	eq
34025eca:	2b00      	cmpeq	r3, #0
34025ecc:	d0e5      	beq.n	34025e9a <log+0xd2>
34025ece:	0413      	lsls	r3, r2, #16
34025ed0:	d403      	bmi.n	34025eda <log+0x112>
34025ed2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
34025ed6:	4393      	bics	r3, r2
34025ed8:	d104      	bne.n	34025ee4 <log+0x11c>
34025eda:	ecbd 8b02 	vpop	{d8}
34025ede:	bcf0      	pop	{r4, r5, r6, r7}
34025ee0:	f7fe bbaa 	b.w	34024638 <__math_invalid>
34025ee4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 34025f98 <log+0x1d0>
34025ee8:	ee20 7b07 	vmul.f64	d7, d0, d7
34025eec:	ec53 2b17 	vmov	r2, r3, d7
34025ef0:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
34025ef4:	4613      	mov	r3, r2
34025ef6:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
34025efa:	492d      	ldr	r1, [pc, #180]	@ (34025fb0 <log+0x1e8>)
34025efc:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
34025f00:	1e1e      	subs	r6, r3, #0
34025f02:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
34025f06:	f3c2 3446 	ubfx	r4, r2, #13, #7
34025f0a:	ea4f 5c12 	mov.w	ip, r2, lsr #20
34025f0e:	1512      	asrs	r2, r2, #20
34025f10:	eb01 1504 	add.w	r5, r1, r4, lsl #4
34025f14:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
34025f18:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
34025f1c:	eba0 070c 	sub.w	r7, r0, ip
34025f20:	ec47 6b16 	vmov	d6, r6, r7
34025f24:	eea7 5b06 	vfma.f64	d5, d7, d6
34025f28:	ee07 2a90 	vmov	s15, r2
34025f2c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
34025f30:	ed91 4b00 	vldr	d4, [r1]
34025f34:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
34025f38:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
34025f3c:	eea4 7b06 	vfma.f64	d7, d4, d6
34025f40:	ee25 2b05 	vmul.f64	d2, d5, d5
34025f44:	ee35 4b07 	vadd.f64	d4, d5, d7
34025f48:	ee25 1b02 	vmul.f64	d1, d5, d2
34025f4c:	ee37 0b44 	vsub.f64	d0, d7, d4
34025f50:	ed91 7b02 	vldr	d7, [r1, #8]
34025f54:	ee30 0b05 	vadd.f64	d0, d0, d5
34025f58:	eea7 0b06 	vfma.f64	d0, d7, d6
34025f5c:	ed91 7b04 	vldr	d7, [r1, #16]
34025f60:	ed91 6b08 	vldr	d6, [r1, #32]
34025f64:	eea7 0b02 	vfma.f64	d0, d7, d2
34025f68:	ed91 7b06 	vldr	d7, [r1, #24]
34025f6c:	eea6 7b05 	vfma.f64	d7, d6, d5
34025f70:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
34025f74:	eea3 6b05 	vfma.f64	d6, d3, d5
34025f78:	eea6 7b02 	vfma.f64	d7, d6, d2
34025f7c:	eea1 0b07 	vfma.f64	d0, d1, d7
34025f80:	ee30 0b04 	vadd.f64	d0, d0, d4
34025f84:	e789      	b.n	34025e9a <log+0xd2>
34025f86:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 34025fa0 <log+0x1d8>
34025f8a:	e786      	b.n	34025e9a <log+0xd2>
34025f8c:	f3af 8000 	nop.w
34025f90:	00000000 	.word	0x00000000
34025f94:	41a00000 	.word	0x41a00000
34025f98:	00000000 	.word	0x00000000
34025f9c:	43300000 	.word	0x43300000
	...
34025fa8:	000308ff 	.word	0x000308ff
34025fac:	3ff00000 	.word	0x3ff00000
34025fb0:	340cbaa8 	.word	0x340cbaa8
34025fb4:	7ff00000 	.word	0x7ff00000

34025fb8 <__kernel_rem_pio2>:
34025fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34025fbc:	ed2d 8b06 	vpush	{d8-d10}
34025fc0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
34025fc4:	f112 0f14 	cmn.w	r2, #20
34025fc8:	469b      	mov	fp, r3
34025fca:	460f      	mov	r7, r1
34025fcc:	4bb8      	ldr	r3, [pc, #736]	@ (340262b0 <__kernel_rem_pio2+0x2f8>)
34025fce:	f06f 0517 	mvn.w	r5, #23
34025fd2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
34025fd4:	f10b 3aff 	add.w	sl, fp, #4294967295
34025fd8:	9001      	str	r0, [sp, #4]
34025fda:	bfa8      	it	ge
34025fdc:	2018      	movge	r0, #24
34025fde:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
34025fe2:	bfac      	ite	ge
34025fe4:	1ed3      	subge	r3, r2, #3
34025fe6:	2300      	movlt	r3, #0
34025fe8:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
34025fea:	eb09 0c0a 	add.w	ip, r9, sl
34025fee:	bfa8      	it	ge
34025ff0:	fb93 f3f0 	sdivge	r3, r3, r0
34025ff4:	fb03 5505 	mla	r5, r3, r5, r5
34025ff8:	eba3 040a 	sub.w	r4, r3, sl
34025ffc:	a81a      	add	r0, sp, #104	@ 0x68
34025ffe:	4415      	add	r5, r2
34026000:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
34026004:	2200      	movs	r2, #0
34026006:	ed9f 6ba4 	vldr	d6, [pc, #656]	@ 34026298 <__kernel_rem_pio2+0x2e0>
3402600a:	4562      	cmp	r2, ip
3402600c:	dd0e      	ble.n	3402602c <__kernel_rem_pio2+0x74>
3402600e:	aa1a      	add	r2, sp, #104	@ 0x68
34026010:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
34026014:	2400      	movs	r4, #0
34026016:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
3402601a:	454c      	cmp	r4, r9
3402601c:	dc23      	bgt.n	34026066 <__kernel_rem_pio2+0xae>
3402601e:	f8dd e004 	ldr.w	lr, [sp, #4]
34026022:	4694      	mov	ip, r2
34026024:	2000      	movs	r0, #0
34026026:	ed9f 7b9c 	vldr	d7, [pc, #624]	@ 34026298 <__kernel_rem_pio2+0x2e0>
3402602a:	e015      	b.n	34026058 <__kernel_rem_pio2+0xa0>
3402602c:	42d4      	cmn	r4, r2
3402602e:	d409      	bmi.n	34026044 <__kernel_rem_pio2+0x8c>
34026030:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
34026034:	ee07 1a90 	vmov	s15, r1
34026038:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3402603c:	3201      	adds	r2, #1
3402603e:	eca0 7b02 	vstmia	r0!, {d7}
34026042:	e7e2      	b.n	3402600a <__kernel_rem_pio2+0x52>
34026044:	eeb0 7b46 	vmov.f64	d7, d6
34026048:	e7f8      	b.n	3402603c <__kernel_rem_pio2+0x84>
3402604a:	ecbe 5b02 	vldmia	lr!, {d5}
3402604e:	ed3c 6b02 	vldmdb	ip!, {d6}
34026052:	3001      	adds	r0, #1
34026054:	eea5 7b06 	vfma.f64	d7, d5, d6
34026058:	4550      	cmp	r0, sl
3402605a:	ddf6      	ble.n	3402604a <__kernel_rem_pio2+0x92>
3402605c:	3401      	adds	r4, #1
3402605e:	3208      	adds	r2, #8
34026060:	eca8 7b02 	vstmia	r8!, {d7}
34026064:	e7d9      	b.n	3402601a <__kernel_rem_pio2+0x62>
34026066:	aa06      	add	r2, sp, #24
34026068:	eb06 0383 	add.w	r3, r6, r3, lsl #2
3402606c:	464c      	mov	r4, r9
3402606e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
34026072:	9302      	str	r3, [sp, #8]
34026074:	ed9f 9b8a 	vldr	d9, [pc, #552]	@ 340262a0 <__kernel_rem_pio2+0x2e8>
34026078:	ed9f ab8b 	vldr	d10, [pc, #556]	@ 340262a8 <__kernel_rem_pio2+0x2f0>
3402607c:	9203      	str	r2, [sp, #12]
3402607e:	00e3      	lsls	r3, r4, #3
34026080:	aa6a      	add	r2, sp, #424	@ 0x1a8
34026082:	4620      	mov	r0, r4
34026084:	9304      	str	r3, [sp, #16]
34026086:	ab92      	add	r3, sp, #584	@ 0x248
34026088:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3402608c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
34026090:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
34026094:	ab06      	add	r3, sp, #24
34026096:	461e      	mov	r6, r3
34026098:	2800      	cmp	r0, #0
3402609a:	dc4a      	bgt.n	34026132 <__kernel_rem_pio2+0x17a>
3402609c:	4628      	mov	r0, r5
3402609e:	9305      	str	r3, [sp, #20]
340260a0:	f000 f9fe 	bl	340264a0 <scalbn>
340260a4:	eeb0 8b40 	vmov.f64	d8, d0
340260a8:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
340260ac:	ee28 0b00 	vmul.f64	d0, d8, d0
340260b0:	f000 fa70 	bl	34026594 <floor>
340260b4:	2d00      	cmp	r5, #0
340260b6:	9b05      	ldr	r3, [sp, #20]
340260b8:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
340260bc:	eea0 8b47 	vfms.f64	d8, d0, d7
340260c0:	eefd 7bc8 	vcvt.s32.f64	s15, d8
340260c4:	ee17 8a90 	vmov	r8, s15
340260c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
340260cc:	ee38 8b47 	vsub.f64	d8, d8, d7
340260d0:	dd41      	ble.n	34026156 <__kernel_rem_pio2+0x19e>
340260d2:	1e60      	subs	r0, r4, #1
340260d4:	aa06      	add	r2, sp, #24
340260d6:	f1c5 0c18 	rsb	ip, r5, #24
340260da:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
340260de:	fa46 f20c 	asr.w	r2, r6, ip
340260e2:	4490      	add	r8, r2
340260e4:	fa02 f20c 	lsl.w	r2, r2, ip
340260e8:	1ab6      	subs	r6, r6, r2
340260ea:	aa06      	add	r2, sp, #24
340260ec:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
340260f0:	f1c5 0217 	rsb	r2, r5, #23
340260f4:	4116      	asrs	r6, r2
340260f6:	2e00      	cmp	r6, #0
340260f8:	dd3c      	ble.n	34026174 <__kernel_rem_pio2+0x1bc>
340260fa:	f04f 0c00 	mov.w	ip, #0
340260fe:	f108 0801 	add.w	r8, r8, #1
34026102:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
34026106:	4660      	mov	r0, ip
34026108:	4564      	cmp	r4, ip
3402610a:	dc66      	bgt.n	340261da <__kernel_rem_pio2+0x222>
3402610c:	2d00      	cmp	r5, #0
3402610e:	dd03      	ble.n	34026118 <__kernel_rem_pio2+0x160>
34026110:	2d01      	cmp	r5, #1
34026112:	d072      	beq.n	340261fa <__kernel_rem_pio2+0x242>
34026114:	2d02      	cmp	r5, #2
34026116:	d07a      	beq.n	3402620e <__kernel_rem_pio2+0x256>
34026118:	2e02      	cmp	r6, #2
3402611a:	d12b      	bne.n	34026174 <__kernel_rem_pio2+0x1bc>
3402611c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34026120:	ee30 8b48 	vsub.f64	d8, d0, d8
34026124:	b330      	cbz	r0, 34026174 <__kernel_rem_pio2+0x1bc>
34026126:	4628      	mov	r0, r5
34026128:	f000 f9ba 	bl	340264a0 <scalbn>
3402612c:	ee38 8b40 	vsub.f64	d8, d8, d0
34026130:	e020      	b.n	34026174 <__kernel_rem_pio2+0x1bc>
34026132:	ee20 7b09 	vmul.f64	d7, d0, d9
34026136:	3801      	subs	r0, #1
34026138:	eebd 7bc7 	vcvt.s32.f64	s14, d7
3402613c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
34026140:	eea7 0b4a 	vfms.f64	d0, d7, d10
34026144:	eebd 0bc0 	vcvt.s32.f64	s0, d0
34026148:	eca6 0a01 	vstmia	r6!, {s0}
3402614c:	ed32 0b02 	vldmdb	r2!, {d0}
34026150:	ee37 0b00 	vadd.f64	d0, d7, d0
34026154:	e7a0      	b.n	34026098 <__kernel_rem_pio2+0xe0>
34026156:	d105      	bne.n	34026164 <__kernel_rem_pio2+0x1ac>
34026158:	1e62      	subs	r2, r4, #1
3402615a:	a906      	add	r1, sp, #24
3402615c:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
34026160:	15f6      	asrs	r6, r6, #23
34026162:	e7c8      	b.n	340260f6 <__kernel_rem_pio2+0x13e>
34026164:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
34026168:	eeb4 8bc7 	vcmpe.f64	d8, d7
3402616c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34026170:	da31      	bge.n	340261d6 <__kernel_rem_pio2+0x21e>
34026172:	2600      	movs	r6, #0
34026174:	eeb5 8b40 	vcmp.f64	d8, #0.0
34026178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402617c:	f040 809c 	bne.w	340262b8 <__kernel_rem_pio2+0x300>
34026180:	1e62      	subs	r2, r4, #1
34026182:	2000      	movs	r0, #0
34026184:	454a      	cmp	r2, r9
34026186:	da49      	bge.n	3402621c <__kernel_rem_pio2+0x264>
34026188:	2800      	cmp	r0, #0
3402618a:	d062      	beq.n	34026252 <__kernel_rem_pio2+0x29a>
3402618c:	3c01      	subs	r4, #1
3402618e:	ab06      	add	r3, sp, #24
34026190:	3d18      	subs	r5, #24
34026192:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
34026196:	2b00      	cmp	r3, #0
34026198:	d0f8      	beq.n	3402618c <__kernel_rem_pio2+0x1d4>
3402619a:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
3402619e:	4628      	mov	r0, r5
340261a0:	f000 f97e 	bl	340264a0 <scalbn>
340261a4:	1c62      	adds	r2, r4, #1
340261a6:	a96a      	add	r1, sp, #424	@ 0x1a8
340261a8:	00d3      	lsls	r3, r2, #3
340261aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
340261ae:	4622      	mov	r2, r4
340261b0:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 340262a0 <__kernel_rem_pio2+0x2e8>
340261b4:	2a00      	cmp	r2, #0
340261b6:	f280 80a9 	bge.w	3402630c <__kernel_rem_pio2+0x354>
340261ba:	4622      	mov	r2, r4
340261bc:	2a00      	cmp	r2, #0
340261be:	f2c0 80c7 	blt.w	34026350 <__kernel_rem_pio2+0x398>
340261c2:	a96a      	add	r1, sp, #424	@ 0x1a8
340261c4:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 340262b4 <__kernel_rem_pio2+0x2fc>
340261c8:	2000      	movs	r0, #0
340261ca:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
340261ce:	1aa1      	subs	r1, r4, r2
340261d0:	ed9f 7b31 	vldr	d7, [pc, #196]	@ 34026298 <__kernel_rem_pio2+0x2e0>
340261d4:	e0b1      	b.n	3402633a <__kernel_rem_pio2+0x382>
340261d6:	2602      	movs	r6, #2
340261d8:	e78f      	b.n	340260fa <__kernel_rem_pio2+0x142>
340261da:	f853 2b04 	ldr.w	r2, [r3], #4
340261de:	b948      	cbnz	r0, 340261f4 <__kernel_rem_pio2+0x23c>
340261e0:	b122      	cbz	r2, 340261ec <__kernel_rem_pio2+0x234>
340261e2:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
340261e6:	f843 2c04 	str.w	r2, [r3, #-4]
340261ea:	2201      	movs	r2, #1
340261ec:	f10c 0c01 	add.w	ip, ip, #1
340261f0:	4610      	mov	r0, r2
340261f2:	e789      	b.n	34026108 <__kernel_rem_pio2+0x150>
340261f4:	ebae 0202 	sub.w	r2, lr, r2
340261f8:	e7f5      	b.n	340261e6 <__kernel_rem_pio2+0x22e>
340261fa:	1e62      	subs	r2, r4, #1
340261fc:	ab06      	add	r3, sp, #24
340261fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34026202:	f3c3 0316 	ubfx	r3, r3, #0, #23
34026206:	a906      	add	r1, sp, #24
34026208:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
3402620c:	e784      	b.n	34026118 <__kernel_rem_pio2+0x160>
3402620e:	1e62      	subs	r2, r4, #1
34026210:	ab06      	add	r3, sp, #24
34026212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34026216:	f3c3 0315 	ubfx	r3, r3, #0, #22
3402621a:	e7f4      	b.n	34026206 <__kernel_rem_pio2+0x24e>
3402621c:	ab06      	add	r3, sp, #24
3402621e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34026222:	3a01      	subs	r2, #1
34026224:	4318      	orrs	r0, r3
34026226:	e7ad      	b.n	34026184 <__kernel_rem_pio2+0x1cc>
34026228:	3301      	adds	r3, #1
3402622a:	f852 0d04 	ldr.w	r0, [r2, #-4]!
3402622e:	2800      	cmp	r0, #0
34026230:	d0fa      	beq.n	34026228 <__kernel_rem_pio2+0x270>
34026232:	9a04      	ldr	r2, [sp, #16]
34026234:	eb04 000b 	add.w	r0, r4, fp
34026238:	a91a      	add	r1, sp, #104	@ 0x68
3402623a:	1c66      	adds	r6, r4, #1
3402623c:	f502 7212 	add.w	r2, r2, #584	@ 0x248
34026240:	4423      	add	r3, r4
34026242:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
34026246:	446a      	add	r2, sp
34026248:	3a98      	subs	r2, #152	@ 0x98
3402624a:	42b3      	cmp	r3, r6
3402624c:	da04      	bge.n	34026258 <__kernel_rem_pio2+0x2a0>
3402624e:	461c      	mov	r4, r3
34026250:	e715      	b.n	3402607e <__kernel_rem_pio2+0xc6>
34026252:	9a03      	ldr	r2, [sp, #12]
34026254:	2301      	movs	r3, #1
34026256:	e7e8      	b.n	3402622a <__kernel_rem_pio2+0x272>
34026258:	9902      	ldr	r1, [sp, #8]
3402625a:	2400      	movs	r4, #0
3402625c:	f8dd c004 	ldr.w	ip, [sp, #4]
34026260:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
34026264:	ee07 1a90 	vmov	s15, r1
34026268:	9104      	str	r1, [sp, #16]
3402626a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3402626e:	eca0 7b02 	vstmia	r0!, {d7}
34026272:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 34026298 <__kernel_rem_pio2+0x2e0>
34026276:	4686      	mov	lr, r0
34026278:	4554      	cmp	r4, sl
3402627a:	dd03      	ble.n	34026284 <__kernel_rem_pio2+0x2cc>
3402627c:	3601      	adds	r6, #1
3402627e:	eca2 7b02 	vstmia	r2!, {d7}
34026282:	e7e2      	b.n	3402624a <__kernel_rem_pio2+0x292>
34026284:	ecbc 5b02 	vldmia	ip!, {d5}
34026288:	ed3e 6b02 	vldmdb	lr!, {d6}
3402628c:	3401      	adds	r4, #1
3402628e:	eea5 7b06 	vfma.f64	d7, d5, d6
34026292:	e7f1      	b.n	34026278 <__kernel_rem_pio2+0x2c0>
34026294:	f3af 8000 	nop.w
	...
340262a4:	3e700000 	.word	0x3e700000
340262a8:	00000000 	.word	0x00000000
340262ac:	41700000 	.word	0x41700000
340262b0:	340cc4a0 	.word	0x340cc4a0
340262b4:	340cc460 	.word	0x340cc460
340262b8:	eeb0 0b48 	vmov.f64	d0, d8
340262bc:	4268      	negs	r0, r5
340262be:	f000 f8ef 	bl	340264a0 <scalbn>
340262c2:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 34026488 <__kernel_rem_pio2+0x4d0>
340262c6:	eeb4 0bc6 	vcmpe.f64	d0, d6
340262ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340262ce:	db17      	blt.n	34026300 <__kernel_rem_pio2+0x348>
340262d0:	aa06      	add	r2, sp, #24
340262d2:	3518      	adds	r5, #24
340262d4:	ed9f 7b6e 	vldr	d7, [pc, #440]	@ 34026490 <__kernel_rem_pio2+0x4d8>
340262d8:	ee20 7b07 	vmul.f64	d7, d0, d7
340262dc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
340262e0:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
340262e4:	eea5 0b46 	vfms.f64	d0, d5, d6
340262e8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
340262ec:	ee10 3a10 	vmov	r3, s0
340262f0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
340262f4:	3401      	adds	r4, #1
340262f6:	ee17 3a10 	vmov	r3, s14
340262fa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
340262fe:	e74c      	b.n	3402619a <__kernel_rem_pio2+0x1e2>
34026300:	eebd 0bc0 	vcvt.s32.f64	s0, d0
34026304:	aa06      	add	r2, sp, #24
34026306:	ee10 3a10 	vmov	r3, s0
3402630a:	e7f6      	b.n	340262fa <__kernel_rem_pio2+0x342>
3402630c:	a806      	add	r0, sp, #24
3402630e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
34026312:	3a01      	subs	r2, #1
34026314:	ee07 0a90 	vmov	s15, r0
34026318:	9001      	str	r0, [sp, #4]
3402631a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3402631e:	ee27 7b00 	vmul.f64	d7, d7, d0
34026322:	ee20 0b06 	vmul.f64	d0, d0, d6
34026326:	ed21 7b02 	vstmdb	r1!, {d7}
3402632a:	e743      	b.n	340261b4 <__kernel_rem_pio2+0x1fc>
3402632c:	ecbc 5b02 	vldmia	ip!, {d5}
34026330:	ecb5 6b02 	vldmia	r5!, {d6}
34026334:	3001      	adds	r0, #1
34026336:	eea5 7b06 	vfma.f64	d7, d5, d6
3402633a:	4548      	cmp	r0, r9
3402633c:	dc01      	bgt.n	34026342 <__kernel_rem_pio2+0x38a>
3402633e:	4288      	cmp	r0, r1
34026340:	ddf4      	ble.n	3402632c <__kernel_rem_pio2+0x374>
34026342:	a842      	add	r0, sp, #264	@ 0x108
34026344:	3a01      	subs	r2, #1
34026346:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
3402634a:	ed81 7b00 	vstr	d7, [r1]
3402634e:	e735      	b.n	340261bc <__kernel_rem_pio2+0x204>
34026350:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
34026352:	2a02      	cmp	r2, #2
34026354:	dc0a      	bgt.n	3402636c <__kernel_rem_pio2+0x3b4>
34026356:	2a00      	cmp	r2, #0
34026358:	dc29      	bgt.n	340263ae <__kernel_rem_pio2+0x3f6>
3402635a:	d042      	beq.n	340263e2 <__kernel_rem_pio2+0x42a>
3402635c:	f008 0007 	and.w	r0, r8, #7
34026360:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
34026364:	ecbd 8b06 	vpop	{d8-d10}
34026368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402636c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
3402636e:	2a03      	cmp	r2, #3
34026370:	d1f4      	bne.n	3402635c <__kernel_rem_pio2+0x3a4>
34026372:	a942      	add	r1, sp, #264	@ 0x108
34026374:	f1a3 0208 	sub.w	r2, r3, #8
34026378:	4620      	mov	r0, r4
3402637a:	440a      	add	r2, r1
3402637c:	4611      	mov	r1, r2
3402637e:	2800      	cmp	r0, #0
34026380:	dc50      	bgt.n	34026424 <__kernel_rem_pio2+0x46c>
34026382:	4621      	mov	r1, r4
34026384:	2901      	cmp	r1, #1
34026386:	dc5d      	bgt.n	34026444 <__kernel_rem_pio2+0x48c>
34026388:	aa42      	add	r2, sp, #264	@ 0x108
3402638a:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 34026498 <__kernel_rem_pio2+0x4e0>
3402638e:	4413      	add	r3, r2
34026390:	2c01      	cmp	r4, #1
34026392:	dc67      	bgt.n	34026464 <__kernel_rem_pio2+0x4ac>
34026394:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
34026398:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
3402639c:	2e00      	cmp	r6, #0
3402639e:	d167      	bne.n	34026470 <__kernel_rem_pio2+0x4b8>
340263a0:	ed87 5b00 	vstr	d5, [r7]
340263a4:	ed87 6b02 	vstr	d6, [r7, #8]
340263a8:	ed87 7b04 	vstr	d7, [r7, #16]
340263ac:	e7d6      	b.n	3402635c <__kernel_rem_pio2+0x3a4>
340263ae:	aa42      	add	r2, sp, #264	@ 0x108
340263b0:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 34026498 <__kernel_rem_pio2+0x4e0>
340263b4:	4413      	add	r3, r2
340263b6:	4622      	mov	r2, r4
340263b8:	2a00      	cmp	r2, #0
340263ba:	da24      	bge.n	34026406 <__kernel_rem_pio2+0x44e>
340263bc:	b34e      	cbz	r6, 34026412 <__kernel_rem_pio2+0x45a>
340263be:	eeb1 7b46 	vneg.f64	d7, d6
340263c2:	aa44      	add	r2, sp, #272	@ 0x110
340263c4:	2301      	movs	r3, #1
340263c6:	ed87 7b00 	vstr	d7, [r7]
340263ca:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
340263ce:	ee37 7b46 	vsub.f64	d7, d7, d6
340263d2:	429c      	cmp	r4, r3
340263d4:	da20      	bge.n	34026418 <__kernel_rem_pio2+0x460>
340263d6:	b10e      	cbz	r6, 340263dc <__kernel_rem_pio2+0x424>
340263d8:	eeb1 7b47 	vneg.f64	d7, d7
340263dc:	ed87 7b02 	vstr	d7, [r7, #8]
340263e0:	e7bc      	b.n	3402635c <__kernel_rem_pio2+0x3a4>
340263e2:	aa42      	add	r2, sp, #264	@ 0x108
340263e4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 34026498 <__kernel_rem_pio2+0x4e0>
340263e8:	4413      	add	r3, r2
340263ea:	2c00      	cmp	r4, #0
340263ec:	da05      	bge.n	340263fa <__kernel_rem_pio2+0x442>
340263ee:	b10e      	cbz	r6, 340263f4 <__kernel_rem_pio2+0x43c>
340263f0:	eeb1 7b47 	vneg.f64	d7, d7
340263f4:	ed87 7b00 	vstr	d7, [r7]
340263f8:	e7b0      	b.n	3402635c <__kernel_rem_pio2+0x3a4>
340263fa:	ed33 6b02 	vldmdb	r3!, {d6}
340263fe:	3c01      	subs	r4, #1
34026400:	ee37 7b06 	vadd.f64	d7, d7, d6
34026404:	e7f1      	b.n	340263ea <__kernel_rem_pio2+0x432>
34026406:	ed33 7b02 	vldmdb	r3!, {d7}
3402640a:	3a01      	subs	r2, #1
3402640c:	ee36 6b07 	vadd.f64	d6, d6, d7
34026410:	e7d2      	b.n	340263b8 <__kernel_rem_pio2+0x400>
34026412:	eeb0 7b46 	vmov.f64	d7, d6
34026416:	e7d4      	b.n	340263c2 <__kernel_rem_pio2+0x40a>
34026418:	ecb2 6b02 	vldmia	r2!, {d6}
3402641c:	3301      	adds	r3, #1
3402641e:	ee37 7b06 	vadd.f64	d7, d7, d6
34026422:	e7d6      	b.n	340263d2 <__kernel_rem_pio2+0x41a>
34026424:	ed31 7b02 	vldmdb	r1!, {d7}
34026428:	3801      	subs	r0, #1
3402642a:	ed91 5b02 	vldr	d5, [r1, #8]
3402642e:	ee37 6b05 	vadd.f64	d6, d7, d5
34026432:	ee37 7b46 	vsub.f64	d7, d7, d6
34026436:	ed81 6b00 	vstr	d6, [r1]
3402643a:	ee37 7b05 	vadd.f64	d7, d7, d5
3402643e:	ed81 7b02 	vstr	d7, [r1, #8]
34026442:	e79c      	b.n	3402637e <__kernel_rem_pio2+0x3c6>
34026444:	ed32 7b02 	vldmdb	r2!, {d7}
34026448:	3901      	subs	r1, #1
3402644a:	ed92 5b02 	vldr	d5, [r2, #8]
3402644e:	ee37 6b05 	vadd.f64	d6, d7, d5
34026452:	ee37 7b46 	vsub.f64	d7, d7, d6
34026456:	ed82 6b00 	vstr	d6, [r2]
3402645a:	ee37 7b05 	vadd.f64	d7, d7, d5
3402645e:	ed82 7b02 	vstr	d7, [r2, #8]
34026462:	e78f      	b.n	34026384 <__kernel_rem_pio2+0x3cc>
34026464:	ed33 6b02 	vldmdb	r3!, {d6}
34026468:	3c01      	subs	r4, #1
3402646a:	ee37 7b06 	vadd.f64	d7, d7, d6
3402646e:	e78f      	b.n	34026390 <__kernel_rem_pio2+0x3d8>
34026470:	eeb1 5b45 	vneg.f64	d5, d5
34026474:	eeb1 6b46 	vneg.f64	d6, d6
34026478:	eeb1 7b47 	vneg.f64	d7, d7
3402647c:	ed87 5b00 	vstr	d5, [r7]
34026480:	ed87 6b02 	vstr	d6, [r7, #8]
34026484:	e790      	b.n	340263a8 <__kernel_rem_pio2+0x3f0>
34026486:	bf00      	nop
34026488:	00000000 	.word	0x00000000
3402648c:	41700000 	.word	0x41700000
34026490:	00000000 	.word	0x00000000
34026494:	3e700000 	.word	0x3e700000
	...

340264a0 <scalbn>:
340264a0:	ee10 1a90 	vmov	r1, s1
340264a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
340264a8:	b98b      	cbnz	r3, 340264ce <scalbn+0x2e>
340264aa:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
340264ae:	ee10 3a10 	vmov	r3, s0
340264b2:	4319      	orrs	r1, r3
340264b4:	d00a      	beq.n	340264cc <scalbn+0x2c>
340264b6:	4b36      	ldr	r3, [pc, #216]	@ (34026590 <scalbn+0xf0>)
340264b8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 34026560 <scalbn+0xc0>
340264bc:	4298      	cmp	r0, r3
340264be:	ee20 0b07 	vmul.f64	d0, d0, d7
340264c2:	da0b      	bge.n	340264dc <scalbn+0x3c>
340264c4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 34026568 <scalbn+0xc8>
340264c8:	ee20 0b07 	vmul.f64	d0, d0, d7
340264cc:	4770      	bx	lr
340264ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
340264d2:	4293      	cmp	r3, r2
340264d4:	d107      	bne.n	340264e6 <scalbn+0x46>
340264d6:	ee30 0b00 	vadd.f64	d0, d0, d0
340264da:	4770      	bx	lr
340264dc:	ee10 1a90 	vmov	r1, s1
340264e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
340264e4:	3b36      	subs	r3, #54	@ 0x36
340264e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
340264ea:	4290      	cmp	r0, r2
340264ec:	dd0d      	ble.n	3402650a <scalbn+0x6a>
340264ee:	ee10 3a90 	vmov	r3, s1
340264f2:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 34026570 <scalbn+0xd0>
340264f6:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 34026578 <scalbn+0xd8>
340264fa:	2b00      	cmp	r3, #0
340264fc:	eeb0 6b47 	vmov.f64	d6, d7
34026500:	fe27 7b05 	vselge.f64	d7, d7, d5
34026504:	ee27 0b06 	vmul.f64	d0, d7, d6
34026508:	4770      	bx	lr
3402650a:	4418      	add	r0, r3
3402650c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
34026510:	4298      	cmp	r0, r3
34026512:	dcec      	bgt.n	340264ee <scalbn+0x4e>
34026514:	2800      	cmp	r0, #0
34026516:	dd08      	ble.n	3402652a <scalbn+0x8a>
34026518:	f36f 511e 	bfc	r1, #20, #11
3402651c:	ec53 2b10 	vmov	r2, r3, d0
34026520:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
34026524:	ec43 2b10 	vmov	d0, r2, r3
34026528:	4770      	bx	lr
3402652a:	f110 0f35 	cmn.w	r0, #53	@ 0x35
3402652e:	da09      	bge.n	34026544 <scalbn+0xa4>
34026530:	ee10 3a90 	vmov	r3, s1
34026534:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 34026568 <scalbn+0xc8>
34026538:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 34026580 <scalbn+0xe0>
3402653c:	2b00      	cmp	r3, #0
3402653e:	eeb0 6b47 	vmov.f64	d6, d7
34026542:	e7dd      	b.n	34026500 <scalbn+0x60>
34026544:	3036      	adds	r0, #54	@ 0x36
34026546:	f36f 511e 	bfc	r1, #20, #11
3402654a:	ec53 2b10 	vmov	r2, r3, d0
3402654e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
34026552:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34026588 <scalbn+0xe8>
34026556:	ec43 2b10 	vmov	d0, r2, r3
3402655a:	e7b5      	b.n	340264c8 <scalbn+0x28>
3402655c:	f3af 8000 	nop.w
34026560:	00000000 	.word	0x00000000
34026564:	43500000 	.word	0x43500000
34026568:	c2f8f359 	.word	0xc2f8f359
3402656c:	01a56e1f 	.word	0x01a56e1f
34026570:	8800759c 	.word	0x8800759c
34026574:	7e37e43c 	.word	0x7e37e43c
34026578:	8800759c 	.word	0x8800759c
3402657c:	fe37e43c 	.word	0xfe37e43c
34026580:	c2f8f359 	.word	0xc2f8f359
34026584:	81a56e1f 	.word	0x81a56e1f
34026588:	00000000 	.word	0x00000000
3402658c:	3c900000 	.word	0x3c900000
34026590:	ffff3cb0 	.word	0xffff3cb0

34026594 <floor>:
34026594:	febb 0b40 	vrintm.f64	d0, d0
34026598:	4770      	bx	lr
	...

3402659c <_sbrk>:
3402659c:	4a04      	ldr	r2, [pc, #16]	@ (340265b0 <_sbrk+0x14>)
3402659e:	4603      	mov	r3, r0
340265a0:	6811      	ldr	r1, [r2, #0]
340265a2:	b909      	cbnz	r1, 340265a8 <_sbrk+0xc>
340265a4:	4903      	ldr	r1, [pc, #12]	@ (340265b4 <_sbrk+0x18>)
340265a6:	6011      	str	r1, [r2, #0]
340265a8:	6810      	ldr	r0, [r2, #0]
340265aa:	4403      	add	r3, r0
340265ac:	6013      	str	r3, [r2, #0]
340265ae:	4770      	bx	lr
340265b0:	340e5d38 	.word	0x340e5d38
340265b4:	340e5f20 	.word	0x340e5f20

340265b8 <node_convert>:
340265b8:	6982      	ldr	r2, [r0, #24]
340265ba:	8813      	ldrh	r3, [r2, #0]
340265bc:	b90b      	cbnz	r3, 340265c2 <node_convert+0xa>
340265be:	685b      	ldr	r3, [r3, #4]
340265c0:	deff      	udf	#255	@ 0xff
340265c2:	6852      	ldr	r2, [r2, #4]
340265c4:	6851      	ldr	r1, [r2, #4]
340265c6:	b101      	cbz	r1, 340265ca <node_convert+0x12>
340265c8:	6809      	ldr	r1, [r1, #0]
340265ca:	2b01      	cmp	r3, #1
340265cc:	f000 813b 	beq.w	34026846 <node_convert+0x28e>
340265d0:	b5f0      	push	{r4, r5, r6, r7, lr}
340265d2:	6915      	ldr	r5, [r2, #16]
340265d4:	b083      	sub	sp, #12
340265d6:	b105      	cbz	r5, 340265da <node_convert+0x22>
340265d8:	682d      	ldr	r5, [r5, #0]
340265da:	688b      	ldr	r3, [r1, #8]
340265dc:	0a1a      	lsrs	r2, r3, #8
340265de:	f000 8117 	beq.w	34026810 <node_convert+0x258>
340265e2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
340265e6:	f1ae 0e04 	sub.w	lr, lr, #4
340265ea:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
340265ee:	f10e 0e01 	add.w	lr, lr, #1
340265f2:	2401      	movs	r4, #1
340265f4:	f04e e001 	dls	lr, lr
340265f8:	68cb      	ldr	r3, [r1, #12]
340265fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
340265fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
34026602:	fb02 f404 	mul.w	r4, r2, r4
34026606:	f00f c007 	le	lr, 340265fe <node_convert+0x46>
3402660a:	698a      	ldr	r2, [r1, #24]
3402660c:	69ae      	ldr	r6, [r5, #24]
3402660e:	6813      	ldr	r3, [r2, #0]
34026610:	6890      	ldr	r0, [r2, #8]
34026612:	f3c3 4243 	ubfx	r2, r3, #17, #4
34026616:	2a01      	cmp	r2, #1
34026618:	d019      	beq.n	3402664e <node_convert+0x96>
3402661a:	6809      	ldr	r1, [r1, #0]
3402661c:	68b6      	ldr	r6, [r6, #8]
3402661e:	15da      	asrs	r2, r3, #23
34026620:	2900      	cmp	r1, #0
34026622:	d02d      	beq.n	34026680 <node_convert+0xc8>
34026624:	684d      	ldr	r5, [r1, #4]
34026626:	f002 0201 	and.w	r2, r2, #1
3402662a:	2d00      	cmp	r5, #0
3402662c:	f000 8094 	beq.w	34026758 <node_convert+0x1a0>
34026630:	884b      	ldrh	r3, [r1, #2]
34026632:	2b00      	cmp	r3, #0
34026634:	d173      	bne.n	3402671e <node_convert+0x166>
34026636:	2a00      	cmp	r2, #0
34026638:	f000 8090 	beq.w	3402675c <node_convert+0x1a4>
3402663c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34026640:	4622      	mov	r2, r4
34026642:	4631      	mov	r1, r6
34026644:	b003      	add	sp, #12
34026646:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3402664a:	f000 ba0b 	b.w	34026a64 <forward_lite_node_convert_integer_is8of32>
3402664e:	6833      	ldr	r3, [r6, #0]
34026650:	682d      	ldr	r5, [r5, #0]
34026652:	15da      	asrs	r2, r3, #23
34026654:	2d00      	cmp	r5, #0
34026656:	f000 808b 	beq.w	34026770 <node_convert+0x1b8>
3402665a:	686b      	ldr	r3, [r5, #4]
3402665c:	68b1      	ldr	r1, [r6, #8]
3402665e:	f002 0201 	and.w	r2, r2, #1
34026662:	2b00      	cmp	r3, #0
34026664:	d064      	beq.n	34026730 <node_convert+0x178>
34026666:	886d      	ldrh	r5, [r5, #2]
34026668:	2d00      	cmp	r5, #0
3402666a:	d06a      	beq.n	34026742 <node_convert+0x18a>
3402666c:	681d      	ldr	r5, [r3, #0]
3402666e:	685b      	ldr	r3, [r3, #4]
34026670:	ed95 0a00 	vldr	s0, [r5]
34026674:	2a00      	cmp	r2, #0
34026676:	f000 80d6 	beq.w	34026826 <node_convert+0x26e>
3402667a:	f993 3000 	ldrsb.w	r3, [r3]
3402667e:	e05a      	b.n	34026736 <node_convert+0x17e>
34026680:	f3c3 11c6 	ubfx	r1, r3, #7, #7
34026684:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
34026688:	1b4d      	subs	r5, r1, r5
3402668a:	f002 0201 	and.w	r2, r2, #1
3402668e:	3540      	adds	r5, #64	@ 0x40
34026690:	2908      	cmp	r1, #8
34026692:	eba5 0502 	sub.w	r5, r5, r2
34026696:	4631      	mov	r1, r6
34026698:	4622      	mov	r2, r4
3402669a:	f000 80bb 	beq.w	34026814 <node_convert+0x25c>
3402669e:	f001 fa89 	bl	34027bb4 <st_int16_to_f32>
340266a2:	b3d5      	cbz	r5, 3402671a <node_convert+0x162>
340266a4:	ee07 5a90 	vmov	s15, r5
340266a8:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
340266ac:	eef8 0ae7 	vcvt.f32.s32	s1, s15
340266b0:	f7fe fb66 	bl	34024d80 <powf>
340266b4:	b38c      	cbz	r4, 3402671a <node_convert+0x162>
340266b6:	1e63      	subs	r3, r4, #1
340266b8:	2b02      	cmp	r3, #2
340266ba:	f240 80c0 	bls.w	3402683e <node_convert+0x286>
340266be:	ee10 3a10 	vmov	r3, s0
340266c2:	08a2      	lsrs	r2, r4, #2
340266c4:	eea4 3b10 	vdup.32	q2, r3
340266c8:	f042 e001 	dls	lr, r2
340266cc:	4633      	mov	r3, r6
340266ce:	ed93 7f00 	ldc	15, cr7, [r3]
340266d2:	ff06 6d54 	vmul.f32	q3, q3, q2
340266d6:	eca3 7f04 	stc	15, cr7, [r3], #16
340266da:	f00f c009 	le	lr, 340266ce <node_convert+0x116>
340266de:	f024 0303 	bic.w	r3, r4, #3
340266e2:	07a2      	lsls	r2, r4, #30
340266e4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
340266e8:	d017      	beq.n	3402671a <node_convert+0x162>
340266ea:	edd6 7a00 	vldr	s15, [r6]
340266ee:	ee67 7a80 	vmul.f32	s15, s15, s0
340266f2:	1c5a      	adds	r2, r3, #1
340266f4:	4294      	cmp	r4, r2
340266f6:	edc6 7a00 	vstr	s15, [r6]
340266fa:	d90e      	bls.n	3402671a <node_convert+0x162>
340266fc:	edd6 7a01 	vldr	s15, [r6, #4]
34026700:	ee67 7a80 	vmul.f32	s15, s15, s0
34026704:	3302      	adds	r3, #2
34026706:	429c      	cmp	r4, r3
34026708:	edc6 7a01 	vstr	s15, [r6, #4]
3402670c:	d905      	bls.n	3402671a <node_convert+0x162>
3402670e:	edd6 7a02 	vldr	s15, [r6, #8]
34026712:	ee67 7a80 	vmul.f32	s15, s15, s0
34026716:	edc6 7a02 	vstr	s15, [r6, #8]
3402671a:	b003      	add	sp, #12
3402671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
3402671e:	682b      	ldr	r3, [r5, #0]
34026720:	ed93 0a00 	vldr	s0, [r3]
34026724:	686b      	ldr	r3, [r5, #4]
34026726:	2a00      	cmp	r2, #0
34026728:	d077      	beq.n	3402681a <node_convert+0x262>
3402672a:	f993 3000 	ldrsb.w	r3, [r3]
3402672e:	e787      	b.n	34026640 <node_convert+0x88>
34026730:	b14a      	cbz	r2, 34026746 <node_convert+0x18e>
34026732:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34026736:	4622      	mov	r2, r4
34026738:	b003      	add	sp, #12
3402673a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3402673e:	f000 b995 	b.w	34026a6c <forward_lite_node_convert_integer_if32os8>
34026742:	2a00      	cmp	r2, #0
34026744:	d171      	bne.n	3402682a <node_convert+0x272>
34026746:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3402674a:	4613      	mov	r3, r2
3402674c:	4622      	mov	r2, r4
3402674e:	b003      	add	sp, #12
34026750:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34026754:	f000 b98c 	b.w	34026a70 <forward_lite_node_convert_integer_if32ou8>
34026758:	2a00      	cmp	r2, #0
3402675a:	d160      	bne.n	3402681e <node_convert+0x266>
3402675c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34026760:	4613      	mov	r3, r2
34026762:	4622      	mov	r2, r4
34026764:	4631      	mov	r1, r6
34026766:	b003      	add	sp, #12
34026768:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3402676c:	f000 b97c 	b.w	34026a68 <forward_lite_node_convert_integer_iu8of32>
34026770:	f3c3 17c6 	ubfx	r7, r3, #7, #7
34026774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
34026778:	1afb      	subs	r3, r7, r3
3402677a:	f002 0201 	and.w	r2, r2, #1
3402677e:	3340      	adds	r3, #64	@ 0x40
34026780:	1a9b      	subs	r3, r3, r2
34026782:	d03c      	beq.n	340267fe <node_convert+0x246>
34026784:	425b      	negs	r3, r3
34026786:	ee00 3a90 	vmov	s1, r3
3402678a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
3402678e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
34026792:	9001      	str	r0, [sp, #4]
34026794:	f7fe faf4 	bl	34024d80 <powf>
34026798:	9801      	ldr	r0, [sp, #4]
3402679a:	b384      	cbz	r4, 340267fe <node_convert+0x246>
3402679c:	1e63      	subs	r3, r4, #1
3402679e:	2b02      	cmp	r3, #2
340267a0:	d94f      	bls.n	34026842 <node_convert+0x28a>
340267a2:	ee10 3a10 	vmov	r3, s0
340267a6:	08a2      	lsrs	r2, r4, #2
340267a8:	eea4 3b10 	vdup.32	q2, r3
340267ac:	f042 e001 	dls	lr, r2
340267b0:	4603      	mov	r3, r0
340267b2:	ed93 7f00 	ldc	15, cr7, [r3]
340267b6:	ff06 6d54 	vmul.f32	q3, q3, q2
340267ba:	eca3 7f04 	stc	15, cr7, [r3], #16
340267be:	f00f c009 	le	lr, 340267b2 <node_convert+0x1fa>
340267c2:	f024 0503 	bic.w	r5, r4, #3
340267c6:	07a1      	lsls	r1, r4, #30
340267c8:	eb00 0385 	add.w	r3, r0, r5, lsl #2
340267cc:	d017      	beq.n	340267fe <node_convert+0x246>
340267ce:	edd3 7a00 	vldr	s15, [r3]
340267d2:	ee67 7a80 	vmul.f32	s15, s15, s0
340267d6:	1c6a      	adds	r2, r5, #1
340267d8:	42a2      	cmp	r2, r4
340267da:	edc3 7a00 	vstr	s15, [r3]
340267de:	d20e      	bcs.n	340267fe <node_convert+0x246>
340267e0:	edd3 7a01 	vldr	s15, [r3, #4]
340267e4:	ee67 7a80 	vmul.f32	s15, s15, s0
340267e8:	3502      	adds	r5, #2
340267ea:	42a5      	cmp	r5, r4
340267ec:	edc3 7a01 	vstr	s15, [r3, #4]
340267f0:	d205      	bcs.n	340267fe <node_convert+0x246>
340267f2:	edd3 7a02 	vldr	s15, [r3, #8]
340267f6:	ee67 7a80 	vmul.f32	s15, s15, s0
340267fa:	edc3 7a02 	vstr	s15, [r3, #8]
340267fe:	2f08      	cmp	r7, #8
34026800:	68b1      	ldr	r1, [r6, #8]
34026802:	d016      	beq.n	34026832 <node_convert+0x27a>
34026804:	4622      	mov	r2, r4
34026806:	b003      	add	sp, #12
34026808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3402680c:	f000 bf44 	b.w	34027698 <st_f32_to_int16>
34026810:	2401      	movs	r4, #1
34026812:	e6fa      	b.n	3402660a <node_convert+0x52>
34026814:	f001 fa0c 	bl	34027c30 <st_int8_to_f32>
34026818:	e743      	b.n	340266a2 <node_convert+0xea>
3402681a:	781b      	ldrb	r3, [r3, #0]
3402681c:	e7a1      	b.n	34026762 <node_convert+0x1aa>
3402681e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34026822:	462b      	mov	r3, r5
34026824:	e70c      	b.n	34026640 <node_convert+0x88>
34026826:	781b      	ldrb	r3, [r3, #0]
34026828:	e790      	b.n	3402674c <node_convert+0x194>
3402682a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3402682e:	462b      	mov	r3, r5
34026830:	e781      	b.n	34026736 <node_convert+0x17e>
34026832:	4622      	mov	r2, r4
34026834:	b003      	add	sp, #12
34026836:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3402683a:	f000 bffd 	b.w	34027838 <st_f32_to_int8>
3402683e:	2300      	movs	r3, #0
34026840:	e753      	b.n	340266ea <node_convert+0x132>
34026842:	4603      	mov	r3, r0
34026844:	e7c3      	b.n	340267ce <node_convert+0x216>
34026846:	2300      	movs	r3, #0
34026848:	685b      	ldr	r3, [r3, #4]
3402684a:	deff      	udf	#255	@ 0xff

3402684c <forward_resize_nearest_is8os8>:
3402684c:	6982      	ldr	r2, [r0, #24]
3402684e:	8813      	ldrh	r3, [r2, #0]
34026850:	b90b      	cbnz	r3, 34026856 <forward_resize_nearest_is8os8+0xa>
34026852:	685b      	ldr	r3, [r3, #4]
34026854:	deff      	udf	#255	@ 0xff
34026856:	6852      	ldr	r2, [r2, #4]
34026858:	4684      	mov	ip, r0
3402685a:	6851      	ldr	r1, [r2, #4]
3402685c:	b101      	cbz	r1, 34026860 <forward_resize_nearest_is8os8+0x14>
3402685e:	6809      	ldr	r1, [r1, #0]
34026860:	2b01      	cmp	r3, #1
34026862:	d039      	beq.n	340268d8 <forward_resize_nearest_is8os8+0x8c>
34026864:	6913      	ldr	r3, [r2, #16]
34026866:	2b00      	cmp	r3, #0
34026868:	d034      	beq.n	340268d4 <forward_resize_nearest_is8os8+0x88>
3402686a:	b5f0      	push	{r4, r5, r6, r7, lr}
3402686c:	eddc 7a0a 	vldr	s15, [ip, #40]	@ 0x28
34026870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34026874:	68c8      	ldr	r0, [r1, #12]
34026876:	681d      	ldr	r5, [r3, #0]
34026878:	6846      	ldr	r6, [r0, #4]
3402687a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
3402687e:	f8dc 0030 	ldr.w	r0, [ip, #48]	@ 0x30
34026882:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
34026886:	6880      	ldr	r0, [r0, #8]
34026888:	b08b      	sub	sp, #44	@ 0x2c
3402688a:	edd0 0a00 	vldr	s1, [r0]
3402688e:	ed90 0a01 	vldr	s0, [r0, #4]
34026892:	68e8      	ldr	r0, [r5, #12]
34026894:	e9d0 7e02 	ldrd	r7, lr, [r0, #8]
34026898:	ee17 0a90 	vmov	r0, s15
3402689c:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
340268a0:	b104      	cbz	r4, 340268a4 <forward_resize_nearest_is8os8+0x58>
340268a2:	68a4      	ldr	r4, [r4, #8]
340268a4:	6988      	ldr	r0, [r1, #24]
340268a6:	69a9      	ldr	r1, [r5, #24]
340268a8:	6880      	ldr	r0, [r0, #8]
340268aa:	b101      	cbz	r1, 340268ae <forward_resize_nearest_is8os8+0x62>
340268ac:	6889      	ldr	r1, [r1, #8]
340268ae:	9407      	str	r4, [sp, #28]
340268b0:	2401      	movs	r4, #1
340268b2:	e9cd 7e02 	strd	r7, lr, [sp, #8]
340268b6:	9600      	str	r6, [sp, #0]
340268b8:	f89c 501c 	ldrb.w	r5, [ip, #28]
340268bc:	9505      	str	r5, [sp, #20]
340268be:	f89c 502d 	ldrb.w	r5, [ip, #45]	@ 0x2d
340268c2:	9401      	str	r4, [sp, #4]
340268c4:	9504      	str	r5, [sp, #16]
340268c6:	f10d 0527 	add.w	r5, sp, #39	@ 0x27
340268ca:	9506      	str	r5, [sp, #24]
340268cc:	f000 fe24 	bl	34027518 <forward_lite_resize_nearest>
340268d0:	b00b      	add	sp, #44	@ 0x2c
340268d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
340268d4:	68db      	ldr	r3, [r3, #12]
340268d6:	deff      	udf	#255	@ 0xff
340268d8:	2300      	movs	r3, #0
340268da:	685b      	ldr	r3, [r3, #4]
340268dc:	deff      	udf	#255	@ 0xff
340268de:	bf00      	nop

340268e0 <forward_resize_bilinear_is8os8>:
340268e0:	6983      	ldr	r3, [r0, #24]
340268e2:	881a      	ldrh	r2, [r3, #0]
340268e4:	b90a      	cbnz	r2, 340268ea <forward_resize_bilinear_is8os8+0xa>
340268e6:	6853      	ldr	r3, [r2, #4]
340268e8:	deff      	udf	#255	@ 0xff
340268ea:	6859      	ldr	r1, [r3, #4]
340268ec:	4684      	mov	ip, r0
340268ee:	684b      	ldr	r3, [r1, #4]
340268f0:	b103      	cbz	r3, 340268f4 <forward_resize_bilinear_is8os8+0x14>
340268f2:	681b      	ldr	r3, [r3, #0]
340268f4:	2a01      	cmp	r2, #1
340268f6:	d029      	beq.n	3402694c <forward_resize_bilinear_is8os8+0x6c>
340268f8:	690a      	ldr	r2, [r1, #16]
340268fa:	b32a      	cbz	r2, 34026948 <forward_resize_bilinear_is8os8+0x68>
340268fc:	b5f0      	push	{r4, r5, r6, r7, lr}
340268fe:	6811      	ldr	r1, [r2, #0]
34026900:	f8dc 0030 	ldr.w	r0, [ip, #48]	@ 0x30
34026904:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
34026908:	6882      	ldr	r2, [r0, #8]
3402690a:	68dd      	ldr	r5, [r3, #12]
3402690c:	698f      	ldr	r7, [r1, #24]
3402690e:	699b      	ldr	r3, [r3, #24]
34026910:	68a4      	ldr	r4, [r4, #8]
34026912:	b087      	sub	sp, #28
34026914:	68ce      	ldr	r6, [r1, #12]
34026916:	edd2 0a00 	vldr	s1, [r2]
3402691a:	ed92 0a01 	vldr	s0, [r2, #4]
3402691e:	6898      	ldr	r0, [r3, #8]
34026920:	68b9      	ldr	r1, [r7, #8]
34026922:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
34026926:	9405      	str	r4, [sp, #20]
34026928:	f89c 401c 	ldrb.w	r4, [ip, #28]
3402692c:	9403      	str	r4, [sp, #12]
3402692e:	f10c 0428 	add.w	r4, ip, #40	@ 0x28
34026932:	9404      	str	r4, [sp, #16]
34026934:	68f4      	ldr	r4, [r6, #12]
34026936:	9402      	str	r4, [sp, #8]
34026938:	68b4      	ldr	r4, [r6, #8]
3402693a:	9401      	str	r4, [sp, #4]
3402693c:	686c      	ldr	r4, [r5, #4]
3402693e:	9400      	str	r4, [sp, #0]
34026940:	f000 fbbe 	bl	340270c0 <forward_lite_resize_bilinear_is8os8>
34026944:	b007      	add	sp, #28
34026946:	bdf0      	pop	{r4, r5, r6, r7, pc}
34026948:	68d3      	ldr	r3, [r2, #12]
3402694a:	deff      	udf	#255	@ 0xff
3402694c:	2300      	movs	r3, #0
3402694e:	685b      	ldr	r3, [r3, #4]
34026950:	deff      	udf	#255	@ 0xff
34026952:	bf00      	nop

34026954 <forward_upsample_zeros>:
34026954:	6982      	ldr	r2, [r0, #24]
34026956:	8813      	ldrh	r3, [r2, #0]
34026958:	b90b      	cbnz	r3, 3402695e <forward_upsample_zeros+0xa>
3402695a:	685b      	ldr	r3, [r3, #4]
3402695c:	deff      	udf	#255	@ 0xff
3402695e:	b5f0      	push	{r4, r5, r6, r7, lr}
34026960:	6852      	ldr	r2, [r2, #4]
34026962:	b085      	sub	sp, #20
34026964:	6854      	ldr	r4, [r2, #4]
34026966:	b104      	cbz	r4, 3402696a <forward_upsample_zeros+0x16>
34026968:	6824      	ldr	r4, [r4, #0]
3402696a:	2b01      	cmp	r3, #1
3402696c:	d070      	beq.n	34026a50 <forward_upsample_zeros+0xfc>
3402696e:	6913      	ldr	r3, [r2, #16]
34026970:	2b00      	cmp	r3, #0
34026972:	d06b      	beq.n	34026a4c <forward_upsample_zeros+0xf8>
34026974:	6a02      	ldr	r2, [r0, #32]
34026976:	681b      	ldr	r3, [r3, #0]
34026978:	6890      	ldr	r0, [r2, #8]
3402697a:	68e1      	ldr	r1, [r4, #12]
3402697c:	edd0 0a00 	vldr	s1, [r0]
34026980:	ed90 0a01 	vldr	s0, [r0, #4]
34026984:	6998      	ldr	r0, [r3, #24]
34026986:	68dd      	ldr	r5, [r3, #12]
34026988:	688a      	ldr	r2, [r1, #8]
3402698a:	68cb      	ldr	r3, [r1, #12]
3402698c:	684f      	ldr	r7, [r1, #4]
3402698e:	6881      	ldr	r1, [r0, #8]
34026990:	69a0      	ldr	r0, [r4, #24]
34026992:	f8df e0c4 	ldr.w	lr, [pc, #196]	@ 34026a58 <forward_upsample_zeros+0x104>
34026996:	6806      	ldr	r6, [r0, #0]
34026998:	6824      	ldr	r4, [r4, #0]
3402699a:	f026 4c7e 	bic.w	ip, r6, #4261412864	@ 0xfe000000
3402699e:	45f4      	cmp	ip, lr
340269a0:	6880      	ldr	r0, [r0, #8]
340269a2:	e9d5 5602 	ldrd	r5, r6, [r5, #8]
340269a6:	d048      	beq.n	34026a3a <forward_upsample_zeros+0xe6>
340269a8:	dd1b      	ble.n	340269e2 <forward_upsample_zeros+0x8e>
340269aa:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 34026a5c <forward_upsample_zeros+0x108>
340269ae:	45f4      	cmp	ip, lr
340269b0:	d02d      	beq.n	34026a0e <forward_upsample_zeros+0xba>
340269b2:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340269b6:	45f4      	cmp	ip, lr
340269b8:	d111      	bne.n	340269de <forward_upsample_zeros+0x8a>
340269ba:	b154      	cbz	r4, 340269d2 <forward_upsample_zeros+0x7e>
340269bc:	f8d4 c004 	ldr.w	ip, [r4, #4]
340269c0:	f1bc 0f00 	cmp.w	ip, #0
340269c4:	d040      	beq.n	34026a48 <forward_upsample_zeros+0xf4>
340269c6:	8864      	ldrh	r4, [r4, #2]
340269c8:	b11c      	cbz	r4, 340269d2 <forward_upsample_zeros+0x7e>
340269ca:	f8dc 4004 	ldr.w	r4, [ip, #4]
340269ce:	f994 4000 	ldrsb.w	r4, [r4]
340269d2:	e9cd 7402 	strd	r7, r4, [sp, #8]
340269d6:	e9cd 5600 	strd	r5, r6, [sp]
340269da:	f000 fe51 	bl	34027680 <forward_lite_upsample_zeros_is16os16>
340269de:	b005      	add	sp, #20
340269e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
340269e2:	f8df e07c 	ldr.w	lr, [pc, #124]	@ 34026a60 <forward_upsample_zeros+0x10c>
340269e6:	45f4      	cmp	ip, lr
340269e8:	d011      	beq.n	34026a0e <forward_upsample_zeros+0xba>
340269ea:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340269ee:	45f4      	cmp	ip, lr
340269f0:	d1f5      	bne.n	340269de <forward_upsample_zeros+0x8a>
340269f2:	2c00      	cmp	r4, #0
340269f4:	d0ed      	beq.n	340269d2 <forward_upsample_zeros+0x7e>
340269f6:	f8d4 c004 	ldr.w	ip, [r4, #4]
340269fa:	f1bc 0f00 	cmp.w	ip, #0
340269fe:	d023      	beq.n	34026a48 <forward_upsample_zeros+0xf4>
34026a00:	8864      	ldrh	r4, [r4, #2]
34026a02:	2c00      	cmp	r4, #0
34026a04:	d0e5      	beq.n	340269d2 <forward_upsample_zeros+0x7e>
34026a06:	f8dc 4004 	ldr.w	r4, [ip, #4]
34026a0a:	7824      	ldrb	r4, [r4, #0]
34026a0c:	e7e1      	b.n	340269d2 <forward_upsample_zeros+0x7e>
34026a0e:	b154      	cbz	r4, 34026a26 <forward_upsample_zeros+0xd2>
34026a10:	f8d4 c004 	ldr.w	ip, [r4, #4]
34026a14:	f1bc 0f00 	cmp.w	ip, #0
34026a18:	d00d      	beq.n	34026a36 <forward_upsample_zeros+0xe2>
34026a1a:	8864      	ldrh	r4, [r4, #2]
34026a1c:	b11c      	cbz	r4, 34026a26 <forward_upsample_zeros+0xd2>
34026a1e:	f8dc 4004 	ldr.w	r4, [ip, #4]
34026a22:	f994 4000 	ldrsb.w	r4, [r4]
34026a26:	e9cd 7402 	strd	r7, r4, [sp, #8]
34026a2a:	e9cd 5600 	strd	r5, r6, [sp]
34026a2e:	f000 fe1f 	bl	34027670 <forward_lite_upsample_zeros_is8os8>
34026a32:	b005      	add	sp, #20
34026a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
34026a36:	4664      	mov	r4, ip
34026a38:	e7f5      	b.n	34026a26 <forward_upsample_zeros+0xd2>
34026a3a:	e9cd 6701 	strd	r6, r7, [sp, #4]
34026a3e:	9500      	str	r5, [sp, #0]
34026a40:	f000 fe26 	bl	34027690 <forward_lite_upsample_zeros_if32of32>
34026a44:	b005      	add	sp, #20
34026a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
34026a48:	4664      	mov	r4, ip
34026a4a:	e7c2      	b.n	340269d2 <forward_upsample_zeros+0x7e>
34026a4c:	68db      	ldr	r3, [r3, #12]
34026a4e:	deff      	udf	#255	@ 0xff
34026a50:	2300      	movs	r3, #0
34026a52:	685b      	ldr	r3, [r3, #4]
34026a54:	deff      	udf	#255	@ 0xff
34026a56:	bf00      	nop
34026a58:	00821040 	.word	0x00821040
34026a5c:	00840440 	.word	0x00840440
34026a60:	00040440 	.word	0x00040440

34026a64 <forward_lite_node_convert_integer_is8of32>:
34026a64:	f000 b806 	b.w	34026a74 <lite_convert_is8of32>

34026a68 <forward_lite_node_convert_integer_iu8of32>:
34026a68:	f000 b840 	b.w	34026aec <lite_convert_iu8of32>

34026a6c <forward_lite_node_convert_integer_if32os8>:
34026a6c:	f000 b86c 	b.w	34026b48 <lite_convert_if32os8>

34026a70 <forward_lite_node_convert_integer_if32ou8>:
34026a70:	f000 b90a 	b.w	34026c88 <lite_convert_if32ou8>

34026a74 <lite_convert_is8of32>:
34026a74:	2a00      	cmp	r2, #0
34026a76:	dd37      	ble.n	34026ae8 <lite_convert_is8of32+0x74>
34026a78:	b570      	push	{r4, r5, r6, lr}
34026a7a:	1885      	adds	r5, r0, r2
34026a7c:	1e50      	subs	r0, r2, #1
34026a7e:	1f16      	subs	r6, r2, #4
34026a80:	f020 0003 	bic.w	r0, r0, #3
34026a84:	ea4f 0c92 	mov.w	ip, r2, lsr #2
34026a88:	ee10 ea10 	vmov	lr, s0
34026a8c:	1a36      	subs	r6, r6, r0
34026a8e:	f10c 0c01 	add.w	ip, ip, #1
34026a92:	e00d      	b.n	34026ab0 <lite_convert_is8of32+0x3c>
34026a94:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
34026a98:	ffbb 6646 	vcvt.f32.s32	q3, q3
34026a9c:	ee37 6e6e 	cdp	14, 3, cr6, cr7, cr14, {3}
34026aa0:	4296      	cmp	r6, r2
34026aa2:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34026aa6:	ed81 7f00 	stc	15, cr7, [r1]
34026aaa:	f101 0110 	add.w	r1, r1, #16
34026aae:	d01a      	beq.n	34026ae6 <lite_convert_is8of32+0x72>
34026ab0:	f022 e801 	bfcsel	0, 34026ab6 <lite_convert_is8of32+0x42>, 4, hi
34026ab4:	eefd 0a10 	vmrs	r0, <impl def 0xd>
34026ab8:	b200      	sxth	r0, r0
34026aba:	eeed 0a10 	vmsr	<impl def 0xd>, r0
34026abe:	1aac      	subs	r4, r5, r2
34026ac0:	f1bc 0c01 	subs.w	ip, ip, #1
34026ac4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34026ac8:	ed94 6f00 	ldc	15, cr6, [r4]
34026acc:	f1a2 0204 	sub.w	r2, r2, #4
34026ad0:	d1e0      	bne.n	34026a94 <lite_convert_is8of32+0x20>
34026ad2:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
34026ad6:	ffbb 6646 	vcvt.f32.s32	q3, q3
34026ada:	ee37 6e6e 	cdp	14, 3, cr6, cr7, cr14, {3}
34026ade:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34026ae2:	ed81 7f00 	stc	15, cr7, [r1]
34026ae6:	bd70      	pop	{r4, r5, r6, pc}
34026ae8:	4770      	bx	lr
34026aea:	bf00      	nop

34026aec <lite_convert_iu8of32>:
34026aec:	2a00      	cmp	r2, #0
34026aee:	dd27      	ble.n	34026b40 <lite_convert_iu8of32+0x54>
34026af0:	b530      	push	{r4, r5, lr}
34026af2:	f102 3eff 	add.w	lr, r2, #4294967295
34026af6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
34026afa:	f10e 0e01 	add.w	lr, lr, #1
34026afe:	ee10 5a10 	vmov	r5, s0
34026b02:	f04e e001 	dls	lr, lr
34026b06:	1884      	adds	r4, r0, r2
34026b08:	f022 e801 	bfcsel	0, 34026b0e <lite_convert_iu8of32+0x22>, 4, hi
34026b0c:	eefd ca10 	vmrs	ip, <impl def 0xd>
34026b10:	fa0f fc8c 	sxth.w	ip, ip
34026b14:	eeed ca10 	vmsr	<impl def 0xd>, ip
34026b18:	1aa0      	subs	r0, r4, r2
34026b1a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34026b1e:	fd90 6f00 	ldc2	15, cr6, [r0]
34026b22:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
34026b26:	ffbb 6646 	vcvt.f32.s32	q3, q3
34026b2a:	ee37 6e65 	cdp	14, 3, cr6, cr7, cr5, {3}
34026b2e:	3a04      	subs	r2, #4
34026b30:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34026b34:	ed81 7f00 	stc	15, cr7, [r1]
34026b38:	3110      	adds	r1, #16
34026b3a:	f00f c81b 	le	lr, 34026b08 <lite_convert_iu8of32+0x1c>
34026b3e:	bd30      	pop	{r4, r5, pc}
34026b40:	4770      	bx	lr
34026b42:	bf00      	nop
34026b44:	0000      	movs	r0, r0
	...

34026b48 <lite_convert_if32os8>:
34026b48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34026b4c:	2a00      	cmp	r2, #0
34026b4e:	ee87 7a00 	vdiv.f32	s14, s14, s0
34026b52:	f340 8087 	ble.w	34026c64 <lite_convert_if32os8+0x11c>
34026b56:	ee07 3a90 	vmov	s15, r3
34026b5a:	ee17 3a10 	vmov	r3, s14
34026b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34026b62:	b570      	push	{r4, r5, r6, lr}
34026b64:	ed2d 8b10 	vpush	{d8-d15}
34026b68:	2640      	movs	r6, #64	@ 0x40
34026b6a:	460c      	mov	r4, r1
34026b6c:	eea8 3b10 	vdup.32	q4, r3
34026b70:	ee17 1a90 	vmov	r1, s15
34026b74:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 34026c68 <lite_convert_if32os8+0x120>
34026b78:	ed9f 7b3d 	vldr	d7, [pc, #244]	@ 34026c70 <lite_convert_if32os8+0x128>
34026b7c:	1e53      	subs	r3, r2, #1
34026b7e:	f023 030f 	bic.w	r3, r3, #15
34026b82:	b094      	sub	sp, #80	@ 0x50
34026b84:	f1a2 0510 	sub.w	r5, r2, #16
34026b88:	1aed      	subs	r5, r5, r3
34026b8a:	eb0d 0306 	add.w	r3, sp, r6
34026b8e:	ed9f 2b3a 	vldr	d2, [pc, #232]	@ 34026c78 <lite_convert_if32os8+0x130>
34026b92:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 34026c80 <lite_convert_if32os8+0x138>
34026b96:	ef26 4156 	vorr	q2, q3, q3
34026b9a:	ed83 9f00 	stc	15, cr9, [r3]
34026b9e:	eea0 1b10 	vdup.32	q0, r1
34026ba2:	0911      	lsrs	r1, r2, #4
34026ba4:	4414      	add	r4, r2
34026ba6:	3101      	adds	r1, #1
34026ba8:	2a10      	cmp	r2, #16
34026baa:	fc90 9f01 	ldc2	15, cr9, [r0], {1}
34026bae:	fc90 9f21 	ldc2	15, cr9, [r0], {33}	@ 0x21
34026bb2:	fc90 9f41 	ldc2	15, cr9, [r0], {65}	@ 0x41
34026bb6:	fc90 9f61 	ldc2	15, cr9, [r0], {97}	@ 0x61
34026bba:	ea4f 0e82 	mov.w	lr, r2, lsl #2
34026bbe:	bfa8      	it	ge
34026bc0:	46b6      	movge	lr, r6
34026bc2:	ec8d 8b10 	vstmia	sp, {d8-d15}
34026bc6:	4470      	add	r0, lr
34026bc8:	46ee      	mov	lr, sp
34026bca:	ed9e df00 	ldc	15, cr13, [lr]
34026bce:	f10d 0e40 	add.w	lr, sp, #64	@ 0x40
34026bd2:	ed9e ff00 	ldc	15, cr15, [lr]
34026bd6:	ef20 a150 	vorr	q5, q0, q0
34026bda:	ef0c ac5e 	vfma.f32	q5, q6, q7
34026bde:	ffbb a04a 	vcvta.s32.f32	q5, q5
34026be2:	f10d 0e10 	add.w	lr, sp, #16
34026be6:	ed9e df00 	ldc	15, cr13, [lr]
34026bea:	ee37 4e0b 	cdp	14, 3, cr4, cr7, cr11, {0}
34026bee:	ef20 a150 	vorr	q5, q0, q0
34026bf2:	ef0c ac5e 	vfma.f32	q5, q6, q7
34026bf6:	ffbb a04a 	vcvta.s32.f32	q5, q5
34026bfa:	f10d 0e20 	add.w	lr, sp, #32
34026bfe:	ee37 6e0b 	cdp	14, 3, cr6, cr7, cr11, {0}
34026c02:	ef20 c150 	vorr	q6, q0, q0
34026c06:	ed9e bf00 	ldc	15, cr11, [lr]
34026c0a:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
34026c0e:	ef0a cc5e 	vfma.f32	q6, q5, q7
34026c12:	ed9e 9f00 	ldc	15, cr9, [lr]
34026c16:	ef20 a150 	vorr	q5, q0, q0
34026c1a:	ffbb c04c 	vcvta.s32.f32	q6, q6
34026c1e:	ef08 ac5e 	vfma.f32	q5, q4, q7
34026c22:	f002 e801 	bfcsel	0, 34026c28 <lite_convert_if32os8+0xe0>, 4, eq
34026c26:	ffbb a04a 	vcvta.s32.f32	q5, q5
34026c2a:	ee37 5e0d 	cdp	14, 3, cr5, cr7, cr13, {0}
34026c2e:	eefd ca10 	vmrs	ip, <impl def 0xd>
34026c32:	ee37 7e0b 	cdp	14, 3, cr7, cr7, cr11, {0}
34026c36:	ee33 2e05 	cdp	14, 3, cr2, cr3, cr5, {0}
34026c3a:	fa1f fc8c 	uxth.w	ip, ip
34026c3e:	ee33 3e07 	cdp	14, 3, cr3, cr3, cr7, {0}
34026c42:	eeed ca10 	vmsr	<impl def 0xd>, ip
34026c46:	1aa3      	subs	r3, r4, r2
34026c48:	3901      	subs	r1, #1
34026c4a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34026c4e:	ed83 3e00 	stc	14, cr3, [r3]
34026c52:	f1a2 0210 	sub.w	r2, r2, #16
34026c56:	d001      	beq.n	34026c5c <lite_convert_if32os8+0x114>
34026c58:	4295      	cmp	r5, r2
34026c5a:	d1a5      	bne.n	34026ba8 <lite_convert_if32os8+0x60>
34026c5c:	b014      	add	sp, #80	@ 0x50
34026c5e:	ecbd 8b10 	vpop	{d8-d15}
34026c62:	bd70      	pop	{r4, r5, r6, pc}
34026c64:	4770      	bx	lr
34026c66:	bf00      	nop
	...

34026c88 <lite_convert_if32ou8>:
34026c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34026c8c:	2a00      	cmp	r2, #0
34026c8e:	ee87 7a00 	vdiv.f32	s14, s14, s0
34026c92:	dd76      	ble.n	34026d82 <lite_convert_if32ou8+0xfa>
34026c94:	ee07 3a90 	vmov	s15, r3
34026c98:	ee17 3a10 	vmov	r3, s14
34026c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
34026ca0:	b510      	push	{r4, lr}
34026ca2:	ed2d 8b10 	vpush	{d8-d15}
34026ca6:	ee17 ca90 	vmov	ip, s15
34026caa:	eea8 3b10 	vdup.32	q4, r3
34026cae:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 34026d88 <lite_convert_if32ou8+0x100>
34026cb2:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 34026d90 <lite_convert_if32ou8+0x108>
34026cb6:	f102 3eff 	add.w	lr, r2, #4294967295
34026cba:	b094      	sub	sp, #80	@ 0x50
34026cbc:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
34026cc0:	f10e 0e01 	add.w	lr, lr, #1
34026cc4:	ab10      	add	r3, sp, #64	@ 0x40
34026cc6:	eea0 cb10 	vdup.32	q0, ip
34026cca:	ed9f 2b33 	vldr	d2, [pc, #204]	@ 34026d98 <lite_convert_if32ou8+0x110>
34026cce:	ed9f 3b34 	vldr	d3, [pc, #208]	@ 34026da0 <lite_convert_if32ou8+0x118>
34026cd2:	f04e e001 	dls	lr, lr
34026cd6:	ef26 4156 	vorr	q2, q3, q3
34026cda:	ed83 9f00 	stc	15, cr9, [r3]
34026cde:	4411      	add	r1, r2
34026ce0:	fc90 9f01 	ldc2	15, cr9, [r0], {1}
34026ce4:	fc90 9f21 	ldc2	15, cr9, [r0], {33}	@ 0x21
34026ce8:	fc90 9f41 	ldc2	15, cr9, [r0], {65}	@ 0x41
34026cec:	fcb0 9f61 	ldc2	15, cr9, [r0], #388	@ 0x184
34026cf0:	466c      	mov	r4, sp
34026cf2:	ec8d 8b10 	vstmia	sp, {d8-d15}
34026cf6:	ed94 df00 	ldc	15, cr13, [r4]
34026cfa:	ac10      	add	r4, sp, #64	@ 0x40
34026cfc:	ed94 ff00 	ldc	15, cr15, [r4]
34026d00:	ef20 a150 	vorr	q5, q0, q0
34026d04:	ef0c ac5e 	vfma.f32	q5, q6, q7
34026d08:	ffbb a0ca 	vcvta.u32.f32	q5, q5
34026d0c:	ac04      	add	r4, sp, #16
34026d0e:	ed94 df00 	ldc	15, cr13, [r4]
34026d12:	fe37 4e0b 	cdp2	14, 3, cr4, cr7, cr11, {0}
34026d16:	ef20 a150 	vorr	q5, q0, q0
34026d1a:	ef0c ac5e 	vfma.f32	q5, q6, q7
34026d1e:	ffbb a0ca 	vcvta.u32.f32	q5, q5
34026d22:	ac08      	add	r4, sp, #32
34026d24:	fe37 6e0b 	cdp2	14, 3, cr6, cr7, cr11, {0}
34026d28:	ef20 c150 	vorr	q6, q0, q0
34026d2c:	ed94 bf00 	ldc	15, cr11, [r4]
34026d30:	ac0c      	add	r4, sp, #48	@ 0x30
34026d32:	ef0a cc5e 	vfma.f32	q6, q5, q7
34026d36:	ed94 9f00 	ldc	15, cr9, [r4]
34026d3a:	ef20 a150 	vorr	q5, q0, q0
34026d3e:	ffbb c0cc 	vcvta.u32.f32	q6, q6
34026d42:	ef08 ac5e 	vfma.f32	q5, q4, q7
34026d46:	f022 e801 	bfcsel	0, 34026d4c <lite_convert_if32ou8+0xc4>, 4, hi
34026d4a:	ffbb a0ca 	vcvta.u32.f32	q5, q5
34026d4e:	fe37 5e0d 	cdp2	14, 3, cr5, cr7, cr13, {0}
34026d52:	eefd ca10 	vmrs	ip, <impl def 0xd>
34026d56:	fe37 7e0b 	cdp2	14, 3, cr7, cr7, cr11, {0}
34026d5a:	fe33 2e05 	cdp2	14, 3, cr2, cr3, cr5, {0}
34026d5e:	fa1f fc8c 	uxth.w	ip, ip
34026d62:	fe33 3e07 	cdp2	14, 3, cr3, cr3, cr7, {0}
34026d66:	eeed ca10 	vmsr	<impl def 0xd>, ip
34026d6a:	1a8b      	subs	r3, r1, r2
34026d6c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34026d70:	ed83 3e00 	stc	14, cr3, [r3]
34026d74:	3a10      	subs	r2, #16
34026d76:	f00f c84d 	le	lr, 34026ce0 <lite_convert_if32ou8+0x58>
34026d7a:	b014      	add	sp, #80	@ 0x50
34026d7c:	ecbd 8b10 	vpop	{d8-d15}
34026d80:	bd10      	pop	{r4, pc}
34026d82:	4770      	bx	lr
34026d84:	f3af 8000 	nop.w
	...

34026da8 <_lite_resize_init>:
34026da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34026dac:	ed2d 8b06 	vpush	{d8-d10}
34026db0:	b087      	sub	sp, #28
34026db2:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
34026db4:	461f      	mov	r7, r3
34026db6:	e9dd 9a17 	ldrd	r9, sl, [sp, #92]	@ 0x5c
34026dba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34026dbc:	f8c4 9000 	str.w	r9, [r4]
34026dc0:	9e16      	ldr	r6, [sp, #88]	@ 0x58
34026dc2:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
34026dc6:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
34026dc8:	f8c3 a000 	str.w	sl, [r3]
34026dcc:	2805      	cmp	r0, #5
34026dce:	f200 8168 	bhi.w	340270a2 <_lite_resize_init+0x2fa>
34026dd2:	e8df f010 	tbh	[pc, r0, lsl #1]
34026dd6:	00af      	.short	0x00af
34026dd8:	00e700d0 	.word	0x00e700d0
34026ddc:	011f0112 	.word	0x011f0112
34026de0:	0006      	.short	0x0006
34026de2:	1e4b      	subs	r3, r1, #1
34026de4:	ee07 3a90 	vmov	s15, r3
34026de8:	981a      	ldr	r0, [sp, #104]	@ 0x68
34026dea:	f1b9 0f01 	cmp.w	r9, #1
34026dee:	ed90 8a00 	vldr	s16, [r0]
34026df2:	edd0 9a01 	vldr	s19, [r0, #4]
34026df6:	ed90 7a04 	vldr	s14, [r0, #16]
34026dfa:	edd0 6a05 	vldr	s13, [r0, #20]
34026dfe:	eef8 aa67 	vcvt.f32.u32	s21, s15
34026e02:	f240 812a 	bls.w	3402705a <_lite_resize_init+0x2b2>
34026e06:	ee07 1a90 	vmov	s15, r1
34026e0a:	ee76 6ae9 	vsub.f32	s13, s13, s19
34026e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
34026e12:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
34026e16:	ee66 6aaa 	vmul.f32	s13, s13, s21
34026e1a:	eea7 6a80 	vfma.f32	s12, s15, s0
34026e1e:	ee6a 9aa9 	vmul.f32	s19, s21, s19
34026e22:	ee86 aa86 	vdiv.f32	s20, s13, s12
34026e26:	1e53      	subs	r3, r2, #1
34026e28:	ee09 3a10 	vmov	s18, r3
34026e2c:	f1ba 0f01 	cmp.w	sl, #1
34026e30:	eeb8 9a49 	vcvt.f32.u32	s18, s18
34026e34:	f240 8102 	bls.w	3402703c <_lite_resize_init+0x294>
34026e38:	ee07 2a90 	vmov	s15, r2
34026e3c:	ee37 7a48 	vsub.f32	s14, s14, s16
34026e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
34026e44:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
34026e48:	ee27 7a09 	vmul.f32	s14, s14, s18
34026e4c:	eee7 6aa0 	vfma.f32	s13, s15, s1
34026e50:	ee28 8a09 	vmul.f32	s16, s16, s18
34026e54:	eec7 8a26 	vdiv.f32	s17, s14, s13
34026e58:	f1b9 0f00 	cmp.w	r9, #0
34026e5c:	d02f      	beq.n	34026ebe <_lite_resize_init+0x116>
34026e5e:	2200      	movs	r2, #0
34026e60:	fb06 f307 	mul.w	r3, r6, r7
34026e64:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
34026e68:	9300      	str	r3, [sp, #0]
34026e6a:	46b2      	mov	sl, r6
34026e6c:	4613      	mov	r3, r2
34026e6e:	4616      	mov	r6, r2
34026e70:	941e      	str	r4, [sp, #120]	@ 0x78
34026e72:	2400      	movs	r4, #0
34026e74:	4648      	mov	r0, r9
34026e76:	2f00      	cmp	r7, #0
34026e78:	f000 80da 	beq.w	34027030 <_lite_resize_init+0x288>
34026e7c:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
34026e80:	46a2      	mov	sl, r4
34026e82:	9c16      	ldr	r4, [sp, #88]	@ 0x58
34026e84:	9301      	str	r3, [sp, #4]
34026e86:	f04f 0b00 	mov.w	fp, #0
34026e8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
34026e8c:	199d      	adds	r5, r3, r6
34026e8e:	4629      	mov	r1, r5
34026e90:	4622      	mov	r2, r4
34026e92:	4640      	mov	r0, r8
34026e94:	f10b 0b01 	add.w	fp, fp, #1
34026e98:	f000 ff12 	bl	34027cc0 <st_int8_copy>
34026e9c:	455f      	cmp	r7, fp
34026e9e:	4425      	add	r5, r4
34026ea0:	d1f5      	bne.n	34026e8e <_lite_resize_init+0xe6>
34026ea2:	9b00      	ldr	r3, [sp, #0]
34026ea4:	f10a 0a01 	add.w	sl, sl, #1
34026ea8:	45d1      	cmp	r9, sl
34026eaa:	441e      	add	r6, r3
34026eac:	d1eb      	bne.n	34026e86 <_lite_resize_init+0xde>
34026eae:	46a2      	mov	sl, r4
34026eb0:	9b01      	ldr	r3, [sp, #4]
34026eb2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
34026eb4:	3301      	adds	r3, #1
34026eb6:	429a      	cmp	r2, r3
34026eb8:	d8db      	bhi.n	34026e72 <_lite_resize_init+0xca>
34026eba:	4692      	mov	sl, r2
34026ebc:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
34026ebe:	eef5 8a40 	vcmp.f32	s17, #0.0
34026ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34026ec6:	d013      	beq.n	34026ef0 <_lite_resize_init+0x148>
34026ec8:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 340270b8 <_lite_resize_init+0x310>
34026ecc:	ee79 7a27 	vadd.f32	s15, s18, s15
34026ed0:	ee07 aa10 	vmov	s14, sl
34026ed4:	ee77 7ac8 	vsub.f32	s15, s15, s16
34026ed8:	eef8 6a47 	vcvt.f32.u32	s13, s14
34026edc:	ee87 7aa8 	vdiv.f32	s14, s15, s17
34026ee0:	fe87 7a66 	vminnm.f32	s14, s14, s13
34026ee4:	feb8 7a47 	vrinta.f32	s14, s14
34026ee8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
34026eec:	ee17 aa90 	vmov	sl, s15
34026ef0:	eeb5 aa40 	vcmp.f32	s20, #0.0
34026ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34026ef8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34026efa:	f8c3 a000 	str.w	sl, [r3]
34026efe:	d013      	beq.n	34026f28 <_lite_resize_init+0x180>
34026f00:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 340270b8 <_lite_resize_init+0x310>
34026f04:	ee7a 7aa7 	vadd.f32	s15, s21, s15
34026f08:	ee07 9a10 	vmov	s14, r9
34026f0c:	ee77 7ae9 	vsub.f32	s15, s15, s19
34026f10:	eef8 6a47 	vcvt.f32.u32	s13, s14
34026f14:	ee87 7a8a 	vdiv.f32	s14, s15, s20
34026f18:	fec7 7a66 	vminnm.f32	s15, s14, s13
34026f1c:	fef8 7a67 	vrinta.f32	s15, s15
34026f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34026f24:	ee17 9a90 	vmov	r9, s15
34026f28:	2300      	movs	r3, #0
34026f2a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
34026f2c:	f8c2 9000 	str.w	r9, [r2]
34026f30:	461a      	mov	r2, r3
34026f32:	e00c      	b.n	34026f4e <_lite_resize_init+0x1a6>
34026f34:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34026f38:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
34026f3c:	eebe 8a00 	vmov.f32	s16, #224	@ 0xbf000000 -0.5
34026f40:	ee87 aa80 	vdiv.f32	s20, s15, s0
34026f44:	eec7 8aa0 	vdiv.f32	s17, s15, s1
34026f48:	461a      	mov	r2, r3
34026f4a:	eef0 9a48 	vmov.f32	s19, s16
34026f4e:	edcd 9a02 	vstr	s19, [sp, #8]
34026f52:	ed8d aa03 	vstr	s20, [sp, #12]
34026f56:	ed8d 8a05 	vstr	s16, [sp, #20]
34026f5a:	9204      	str	r2, [sp, #16]
34026f5c:	aa02      	add	r2, sp, #8
34026f5e:	ed92 7f00 	ldc	15, cr7, [r2]
34026f62:	edc4 8a04 	vstr	s17, [r4, #16]
34026f66:	ed84 7f00 	stc	15, cr7, [r4]
34026f6a:	6163      	str	r3, [r4, #20]
34026f6c:	b007      	add	sp, #28
34026f6e:	ecbd 8b06 	vpop	{d8-d10}
34026f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34026f76:	f1b9 0f01 	cmp.w	r9, #1
34026f7a:	d97f      	bls.n	3402707c <_lite_resize_init+0x2d4>
34026f7c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34026f80:	eefe 9a00 	vmov.f32	s19, #224	@ 0xbf000000 -0.5
34026f84:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
34026f88:	ee87 aa80 	vdiv.f32	s20, s15, s0
34026f8c:	f1ba 0f01 	cmp.w	sl, #1
34026f90:	d96e      	bls.n	34027070 <_lite_resize_init+0x2c8>
34026f92:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34026f96:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
34026f9a:	eebe 8a00 	vmov.f32	s16, #224	@ 0xbf000000 -0.5
34026f9e:	eec7 8aa0 	vdiv.f32	s17, s15, s1
34026fa2:	e7d4      	b.n	34026f4e <_lite_resize_init+0x1a6>
34026fa4:	f1b9 0f01 	cmp.w	r9, #1
34026fa8:	d978      	bls.n	3402709c <_lite_resize_init+0x2f4>
34026faa:	ee07 1a90 	vmov	s15, r1
34026fae:	3901      	subs	r1, #1
34026fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
34026fb4:	ee07 1a10 	vmov	s14, r1
34026fb8:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
34026fbc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
34026fc0:	eee6 7a80 	vfma.f32	s15, s13, s0
34026fc4:	ee87 aa27 	vdiv.f32	s20, s14, s15
34026fc8:	f1ba 0f01 	cmp.w	sl, #1
34026fcc:	d95d      	bls.n	3402708a <_lite_resize_init+0x2e2>
34026fce:	ee07 2a90 	vmov	s15, r2
34026fd2:	3a01      	subs	r2, #1
34026fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
34026fd8:	ee07 2a10 	vmov	s14, r2
34026fdc:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
34026fe0:	2300      	movs	r3, #0
34026fe2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
34026fe6:	eee6 7aa0 	vfma.f32	s15, s13, s1
34026fea:	ee08 3a10 	vmov	s16, r3
34026fee:	461a      	mov	r2, r3
34026ff0:	ee09 3a90 	vmov	s19, r3
34026ff4:	eec7 8a27 	vdiv.f32	s17, s14, s15
34026ff8:	e7a9      	b.n	34026f4e <_lite_resize_init+0x1a6>
34026ffa:	2300      	movs	r3, #0
34026ffc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34027000:	ee08 3a10 	vmov	s16, r3
34027004:	ee87 aa80 	vdiv.f32	s20, s15, s0
34027008:	eec7 8aa0 	vdiv.f32	s17, s15, s1
3402700c:	461a      	mov	r2, r3
3402700e:	ee09 3a90 	vmov	s19, r3
34027012:	e79c      	b.n	34026f4e <_lite_resize_init+0x1a6>
34027014:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34027018:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
3402701c:	ed9f 8a27 	vldr	s16, [pc, #156]	@ 340270bc <_lite_resize_init+0x314>
34027020:	ee87 aa80 	vdiv.f32	s20, s15, s0
34027024:	eec7 8aa0 	vdiv.f32	s17, s15, s1
34027028:	461a      	mov	r2, r3
3402702a:	eef0 9a48 	vmov.f32	s19, s16
3402702e:	e78e      	b.n	34026f4e <_lite_resize_init+0x1a6>
34027030:	3801      	subs	r0, #1
34027032:	f43f af3e 	beq.w	34026eb2 <_lite_resize_init+0x10a>
34027036:	3801      	subs	r0, #1
34027038:	d1fa      	bne.n	34027030 <_lite_resize_init+0x288>
3402703a:	e73a      	b.n	34026eb2 <_lite_resize_init+0x10a>
3402703c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
34027040:	ee38 8a07 	vadd.f32	s16, s16, s14
34027044:	ee69 7a27 	vmul.f32	s15, s18, s15
34027048:	eddf 8a1c 	vldr	s17, [pc, #112]	@ 340270bc <_lite_resize_init+0x314>
3402704c:	ee28 8a27 	vmul.f32	s16, s16, s15
34027050:	f1ba 0f00 	cmp.w	sl, #0
34027054:	f47f af00 	bne.w	34026e58 <_lite_resize_init+0xb0>
34027058:	e74a      	b.n	34026ef0 <_lite_resize_init+0x148>
3402705a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
3402705e:	ee79 9aa6 	vadd.f32	s19, s19, s13
34027062:	ee6a 7aa7 	vmul.f32	s15, s21, s15
34027066:	ed9f aa15 	vldr	s20, [pc, #84]	@ 340270bc <_lite_resize_init+0x314>
3402706a:	ee69 9aa7 	vmul.f32	s19, s19, s15
3402706e:	e6da      	b.n	34026e26 <_lite_resize_init+0x7e>
34027070:	2300      	movs	r3, #0
34027072:	ee08 3a90 	vmov	s17, r3
34027076:	ee08 3a10 	vmov	s16, r3
3402707a:	e768      	b.n	34026f4e <_lite_resize_init+0x1a6>
3402707c:	ed9f aa0f 	vldr	s20, [pc, #60]	@ 340270bc <_lite_resize_init+0x314>
34027080:	eef0 9a4a 	vmov.f32	s19, s20
34027084:	ee1a 2a10 	vmov	r2, s20
34027088:	e780      	b.n	34026f8c <_lite_resize_init+0x1e4>
3402708a:	2300      	movs	r3, #0
3402708c:	ee08 3a90 	vmov	s17, r3
34027090:	ee08 3a10 	vmov	s16, r3
34027094:	461a      	mov	r2, r3
34027096:	ee09 3a90 	vmov	s19, r3
3402709a:	e758      	b.n	34026f4e <_lite_resize_init+0x1a6>
3402709c:	ed9f aa07 	vldr	s20, [pc, #28]	@ 340270bc <_lite_resize_init+0x314>
340270a0:	e792      	b.n	34026fc8 <_lite_resize_init+0x220>
340270a2:	2300      	movs	r3, #0
340270a4:	ee08 3a90 	vmov	s17, r3
340270a8:	ee08 3a10 	vmov	s16, r3
340270ac:	461a      	mov	r2, r3
340270ae:	ee0a 3a10 	vmov	s20, r3
340270b2:	ee09 3a90 	vmov	s19, r3
340270b6:	e74a      	b.n	34026f4e <_lite_resize_init+0x1a6>
340270b8:	38d1b717 	.word	0x38d1b717
340270bc:	00000000 	.word	0x00000000

340270c0 <forward_lite_resize_bilinear_is8os8>:
340270c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340270c4:	ed2d 8b0c 	vpush	{d8-d13}
340270c8:	b099      	sub	sp, #100	@ 0x64
340270ca:	f89d 50c4 	ldrb.w	r5, [sp, #196]	@ 0xc4
340270ce:	9004      	str	r0, [sp, #16]
340270d0:	461c      	mov	r4, r3
340270d2:	e9dd ba2e 	ldrd	fp, sl, [sp, #184]	@ 0xb8
340270d6:	4610      	mov	r0, r2
340270d8:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
340270da:	2d05      	cmp	r5, #5
340270dc:	f200 820a 	bhi.w	340274f4 <forward_lite_resize_bilinear_is8os8+0x434>
340270e0:	e8df f015 	tbh	[pc, r5, lsl #1]
340270e4:	016300ab 	.word	0x016300ab
340270e8:	01ae017f 	.word	0x01ae017f
340270ec:	000601be 	.word	0x000601be
340270f0:	1e53      	subs	r3, r2, #1
340270f2:	ee06 3a90 	vmov	s13, r3
340270f6:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
340270f8:	f1ba 0f01 	cmp.w	sl, #1
340270fc:	ed92 da00 	vldr	s26, [r2]
34027100:	ed92 9a01 	vldr	s18, [r2, #4]
34027104:	edd2 7a04 	vldr	s15, [r2, #16]
34027108:	ed92 7a05 	vldr	s14, [r2, #20]
3402710c:	eeb8 8a66 	vcvt.f32.u32	s16, s13
34027110:	f240 81c7 	bls.w	340274a2 <forward_lite_resize_bilinear_is8os8+0x3e2>
34027114:	ee06 0a90 	vmov	s13, r0
34027118:	ee37 7a49 	vsub.f32	s14, s14, s18
3402711c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
34027120:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
34027124:	ee27 7a08 	vmul.f32	s14, s14, s16
34027128:	eee0 6a06 	vfma.f32	s13, s0, s12
3402712c:	ee29 9a08 	vmul.f32	s18, s18, s16
34027130:	eec7 ba26 	vdiv.f32	s23, s14, s13
34027134:	1e63      	subs	r3, r4, #1
34027136:	ee0c 3a10 	vmov	s24, r3
3402713a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
3402713c:	eeb8 ca4c 	vcvt.f32.u32	s24, s24
34027140:	2b01      	cmp	r3, #1
34027142:	f240 81a0 	bls.w	34027486 <forward_lite_resize_bilinear_is8os8+0x3c6>
34027146:	ee07 4a10 	vmov	s14, r4
3402714a:	ee77 7acd 	vsub.f32	s15, s15, s26
3402714e:	eef8 6a47 	vcvt.f32.u32	s13, s14
34027152:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
34027156:	ee67 7a8c 	vmul.f32	s15, s15, s24
3402715a:	eea0 7aa6 	vfma.f32	s14, s1, s13
3402715e:	ee2d da0c 	vmul.f32	s26, s26, s24
34027162:	eec7 da87 	vdiv.f32	s27, s15, s14
34027166:	f1ba 0f00 	cmp.w	sl, #0
3402716a:	d02e      	beq.n	340271ca <forward_lite_resize_bilinear_is8os8+0x10a>
3402716c:	f04f 0800 	mov.w	r8, #0
34027170:	e9cd 0405 	strd	r0, r4, [sp, #20]
34027174:	4643      	mov	r3, r8
34027176:	4689      	mov	r9, r1
34027178:	465c      	mov	r4, fp
3402717a:	eb01 070b 	add.w	r7, r1, fp
3402717e:	9702      	str	r7, [sp, #8]
34027180:	f04f 0b00 	mov.w	fp, #0
34027184:	4650      	mov	r0, sl
34027186:	2c00      	cmp	r4, #0
34027188:	f000 8171 	beq.w	3402746e <forward_lite_resize_bilinear_is8os8+0x3ae>
3402718c:	4647      	mov	r7, r8
3402718e:	46d8      	mov	r8, fp
34027190:	9303      	str	r3, [sp, #12]
34027192:	9b02      	ldr	r3, [sp, #8]
34027194:	eb09 0b07 	add.w	fp, r9, r7
34027198:	19dd      	adds	r5, r3, r7
3402719a:	4659      	mov	r1, fp
3402719c:	2201      	movs	r2, #1
3402719e:	4630      	mov	r0, r6
340271a0:	f10b 0b01 	add.w	fp, fp, #1
340271a4:	f000 fd8c 	bl	34027cc0 <st_int8_copy>
340271a8:	455d      	cmp	r5, fp
340271aa:	d1f6      	bne.n	3402719a <forward_lite_resize_bilinear_is8os8+0xda>
340271ac:	f108 0801 	add.w	r8, r8, #1
340271b0:	45c2      	cmp	sl, r8
340271b2:	4427      	add	r7, r4
340271b4:	d1ed      	bne.n	34027192 <forward_lite_resize_bilinear_is8os8+0xd2>
340271b6:	46b8      	mov	r8, r7
340271b8:	9b03      	ldr	r3, [sp, #12]
340271ba:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
340271bc:	3301      	adds	r3, #1
340271be:	429a      	cmp	r2, r3
340271c0:	d8de      	bhi.n	34027180 <forward_lite_resize_bilinear_is8os8+0xc0>
340271c2:	4649      	mov	r1, r9
340271c4:	46a3      	mov	fp, r4
340271c6:	9805      	ldr	r0, [sp, #20]
340271c8:	9c06      	ldr	r4, [sp, #24]
340271ca:	eef5 da40 	vcmp.f32	s27, #0.0
340271ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340271d2:	d013      	beq.n	340271fc <forward_lite_resize_bilinear_is8os8+0x13c>
340271d4:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
340271d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
340271dc:	eddf 7acc 	vldr	s15, [pc, #816]	@ 34027510 <forward_lite_resize_bilinear_is8os8+0x450>
340271e0:	ee3c ca27 	vadd.f32	s24, s24, s15
340271e4:	ee7c 7a4d 	vsub.f32	s15, s24, s26
340271e8:	ee87 7aad 	vdiv.f32	s14, s15, s27
340271ec:	fec7 7a66 	vminnm.f32	s15, s14, s13
340271f0:	fef8 7a67 	vrinta.f32	s15, s15
340271f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340271f8:	edcd 7a30 	vstr	s15, [sp, #192]	@ 0xc0
340271fc:	eef5 ba40 	vcmp.f32	s23, #0.0
34027200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027204:	f000 8139 	beq.w	3402747a <forward_lite_resize_bilinear_is8os8+0x3ba>
34027208:	eddf 7ac1 	vldr	s15, [pc, #772]	@ 34027510 <forward_lite_resize_bilinear_is8os8+0x450>
3402720c:	ee78 7a27 	vadd.f32	s15, s16, s15
34027210:	ee07 aa10 	vmov	s14, sl
34027214:	ee77 7ac9 	vsub.f32	s15, s15, s18
34027218:	eef8 6a47 	vcvt.f32.u32	s13, s14
3402721c:	ee87 7aab 	vdiv.f32	s14, s15, s23
34027220:	fec7 7a66 	vminnm.f32	s15, s14, s13
34027224:	fef8 7a67 	vrinta.f32	s15, s15
34027228:	eddf caba 	vldr	s25, [pc, #744]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
3402722c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34027230:	eef0 9a6c 	vmov.f32	s19, s25
34027234:	ee17 8a90 	vmov	r8, s15
34027238:	e00e      	b.n	34027258 <forward_lite_resize_bilinear_is8os8+0x198>
3402723a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3402723e:	eef6 ca00 	vmov.f32	s25, #96	@ 0x3f000000  0.5
34027242:	eebe da00 	vmov.f32	s26, #224	@ 0xbf000000 -0.5
34027246:	46d0      	mov	r8, sl
34027248:	eec7 ba80 	vdiv.f32	s23, s15, s0
3402724c:	eec7 daa0 	vdiv.f32	s27, s15, s1
34027250:	eef0 9a6c 	vmov.f32	s19, s25
34027254:	eeb0 9a4d 	vmov.f32	s18, s26
34027258:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
3402725a:	2b00      	cmp	r3, #0
3402725c:	f000 80a0 	beq.w	340273a0 <forward_lite_resize_bilinear_is8os8+0x2e0>
34027260:	1e63      	subs	r3, r4, #1
34027262:	ee0c 3a10 	vmov	s24, r3
34027266:	1e43      	subs	r3, r0, #1
34027268:	ee07 3a90 	vmov	s15, r3
3402726c:	eeb8 ca4c 	vcvt.f32.u32	s24, s24
34027270:	eddf 8aa8 	vldr	s17, [pc, #672]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
34027274:	eeb8 ba67 	vcvt.f32.u32	s22, s15
34027278:	f04f 0e00 	mov.w	lr, #0
3402727c:	fb0b f30a 	mul.w	r3, fp, sl
34027280:	9308      	str	r3, [sp, #32]
34027282:	fb0b f300 	mul.w	r3, fp, r0
34027286:	9009      	str	r0, [sp, #36]	@ 0x24
34027288:	9307      	str	r3, [sp, #28]
3402728a:	ee07 ea90 	vmov	s15, lr
3402728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
34027292:	eeb0 aa4d 	vmov.f32	s20, s26
34027296:	ee77 7aac 	vadd.f32	s15, s15, s25
3402729a:	eea7 aaad 	vfma.f32	s20, s15, s27
3402729e:	fe8a aa28 	vmaxnm.f32	s20, s20, s17
340272a2:	fe8a aa4c 	vminnm.f32	s20, s20, s24
340272a6:	eeb4 aa4c 	vcmp.f32	s20, s24
340272aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340272ae:	9b07      	ldr	r3, [sp, #28]
340272b0:	bf08      	it	eq
340272b2:	2300      	moveq	r3, #0
340272b4:	f1b8 0f00 	cmp.w	r8, #0
340272b8:	d06a      	beq.n	34027390 <forward_lite_resize_bilinear_is8os8+0x2d0>
340272ba:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
340272be:	eebc 7aca 	vcvt.u32.f32	s14, s20
340272c2:	eef6 7aca 	vrintz.f32	s15, s20
340272c6:	ee78 aa4a 	vsub.f32	s21, s16, s20
340272ca:	ee17 7a10 	vmov	r7, s14
340272ce:	460d      	mov	r5, r1
340272d0:	2400      	movs	r4, #0
340272d2:	ee3a aa67 	vsub.f32	s20, s20, s15
340272d6:	ee7a aaa7 	vadd.f32	s21, s21, s15
340272da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
340272dc:	e9cd e105 	strd	lr, r1, [sp, #20]
340272e0:	fb02 f707 	mul.w	r7, r2, r7
340272e4:	ae14      	add	r6, sp, #80	@ 0x50
340272e6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
340272ea:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
340272ee:	9702      	str	r7, [sp, #8]
340272f0:	9303      	str	r3, [sp, #12]
340272f2:	ee07 4a90 	vmov	s15, r4
340272f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340272fa:	eef0 7a49 	vmov.f32	s15, s18
340272fe:	ee37 7a29 	vadd.f32	s14, s14, s19
34027302:	eee7 7a2b 	vfma.f32	s15, s14, s23
34027306:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
3402730a:	fec7 7acb 	vminnm.f32	s15, s15, s22
3402730e:	eef6 6ae7 	vrintz.f32	s13, s15
34027312:	ee38 7a67 	vsub.f32	s14, s16, s15
34027316:	eef4 7a4b 	vcmp.f32	s15, s22
3402731a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
3402731e:	ee37 7a26 	vadd.f32	s14, s14, s13
34027322:	ee77 7ae6 	vsub.f32	s15, s15, s13
34027326:	edcd aa0f 	vstr	s21, [sp, #60]	@ 0x3c
3402732a:	edcd aa0a 	vstr	s21, [sp, #40]	@ 0x28
3402732e:	ed8d aa0c 	vstr	s20, [sp, #48]	@ 0x30
34027332:	ed8d aa0d 	vstr	s20, [sp, #52]	@ 0x34
34027336:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
3402733a:	ed8d 7a0e 	vstr	s14, [sp, #56]	@ 0x38
3402733e:	ed8d 7a10 	vstr	s14, [sp, #64]	@ 0x40
34027342:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
34027346:	9b03      	ldr	r3, [sp, #12]
34027348:	9600      	str	r6, [sp, #0]
3402734a:	9313      	str	r3, [sp, #76]	@ 0x4c
3402734c:	ee16 ca10 	vmov	ip, s12
34027350:	ed99 5f00 	ldc	15, cr5, [r9]
34027354:	ed9a 7f00 	ldc	15, cr7, [sl]
34027358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402735c:	9802      	ldr	r0, [sp, #8]
3402735e:	ff06 6d54 	vmul.f32	q3, q3, q2
34027362:	4460      	add	r0, ip
34027364:	bf14      	ite	ne
34027366:	46dc      	movne	ip, fp
34027368:	f04f 0c00 	moveq.w	ip, #0
3402736c:	9f04      	ldr	r7, [sp, #16]
3402736e:	4629      	mov	r1, r5
34027370:	465a      	mov	r2, fp
34027372:	ed86 7f00 	stc	15, cr7, [r6]
34027376:	fb0b 7000 	mla	r0, fp, r0, r7
3402737a:	3401      	adds	r4, #1
3402737c:	ab12      	add	r3, sp, #72	@ 0x48
3402737e:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
34027382:	f000 ff55 	bl	34028230 <lite_bilinear_is8os8_kernel>
34027386:	4544      	cmp	r4, r8
34027388:	445d      	add	r5, fp
3402738a:	d1b2      	bne.n	340272f2 <forward_lite_resize_bilinear_is8os8+0x232>
3402738c:	e9dd e105 	ldrd	lr, r1, [sp, #20]
34027390:	9b08      	ldr	r3, [sp, #32]
34027392:	f10e 0e01 	add.w	lr, lr, #1
34027396:	4419      	add	r1, r3
34027398:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
3402739a:	459e      	cmp	lr, r3
3402739c:	f47f af75 	bne.w	3402728a <forward_lite_resize_bilinear_is8os8+0x1ca>
340273a0:	b019      	add	sp, #100	@ 0x64
340273a2:	ecbd 8b0c 	vpop	{d8-d13}
340273a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
340273aa:	f1ba 0f01 	cmp.w	sl, #1
340273ae:	f240 808b 	bls.w	340274c8 <forward_lite_resize_bilinear_is8os8+0x408>
340273b2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
340273b6:	eebe 9a00 	vmov.f32	s18, #224	@ 0xbf000000 -0.5
340273ba:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
340273be:	eec7 ba80 	vdiv.f32	s23, s15, s0
340273c2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
340273c4:	2b01      	cmp	r3, #1
340273c6:	d977      	bls.n	340274b8 <forward_lite_resize_bilinear_is8os8+0x3f8>
340273c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
340273cc:	1e63      	subs	r3, r4, #1
340273ce:	ee0c 3a10 	vmov	s24, r3
340273d2:	eef6 ca00 	vmov.f32	s25, #96	@ 0x3f000000  0.5
340273d6:	eebe da00 	vmov.f32	s26, #224	@ 0xbf000000 -0.5
340273da:	eec7 daa0 	vdiv.f32	s27, s15, s1
340273de:	46d0      	mov	r8, sl
340273e0:	e741      	b.n	34027266 <forward_lite_resize_bilinear_is8os8+0x1a6>
340273e2:	f1ba 0f01 	cmp.w	sl, #1
340273e6:	f240 8082 	bls.w	340274ee <forward_lite_resize_bilinear_is8os8+0x42e>
340273ea:	ee07 2a90 	vmov	s15, r2
340273ee:	1e53      	subs	r3, r2, #1
340273f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
340273f4:	ee07 3a10 	vmov	s14, r3
340273f8:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
340273fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
34027400:	eee0 7a26 	vfma.f32	s15, s0, s13
34027404:	eec7 ba27 	vdiv.f32	s23, s14, s15
34027408:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
3402740a:	2b01      	cmp	r3, #1
3402740c:	d963      	bls.n	340274d6 <forward_lite_resize_bilinear_is8os8+0x416>
3402740e:	ee07 4a90 	vmov	s15, r4
34027412:	1e63      	subs	r3, r4, #1
34027414:	eef8 6a67 	vcvt.f32.u32	s13, s15
34027418:	ee0c 3a10 	vmov	s24, r3
3402741c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
34027420:	eddf ca3c 	vldr	s25, [pc, #240]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
34027424:	eeb8 7a4c 	vcvt.f32.u32	s14, s24
34027428:	eee0 7aa6 	vfma.f32	s15, s1, s13
3402742c:	eeb0 da6c 	vmov.f32	s26, s25
34027430:	eef0 9a6c 	vmov.f32	s19, s25
34027434:	eeb0 9a6c 	vmov.f32	s18, s25
34027438:	eec7 da27 	vdiv.f32	s27, s14, s15
3402743c:	46d0      	mov	r8, sl
3402743e:	e712      	b.n	34027266 <forward_lite_resize_bilinear_is8os8+0x1a6>
34027440:	eddf ca34 	vldr	s25, [pc, #208]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
34027444:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34027448:	46d0      	mov	r8, sl
3402744a:	eeb0 da6c 	vmov.f32	s26, s25
3402744e:	eec7 ba80 	vdiv.f32	s23, s15, s0
34027452:	eec7 daa0 	vdiv.f32	s27, s15, s1
34027456:	eef0 9a6c 	vmov.f32	s19, s25
3402745a:	eeb0 9a6c 	vmov.f32	s18, s25
3402745e:	e6fb      	b.n	34027258 <forward_lite_resize_bilinear_is8os8+0x198>
34027460:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34027464:	eef6 ca00 	vmov.f32	s25, #96	@ 0x3f000000  0.5
34027468:	ed9f da2a 	vldr	s26, [pc, #168]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
3402746c:	e6eb      	b.n	34027246 <forward_lite_resize_bilinear_is8os8+0x186>
3402746e:	3801      	subs	r0, #1
34027470:	f43f aea3 	beq.w	340271ba <forward_lite_resize_bilinear_is8os8+0xfa>
34027474:	3801      	subs	r0, #1
34027476:	d1fa      	bne.n	3402746e <forward_lite_resize_bilinear_is8os8+0x3ae>
34027478:	e69f      	b.n	340271ba <forward_lite_resize_bilinear_is8os8+0xfa>
3402747a:	eef0 ca6b 	vmov.f32	s25, s23
3402747e:	eef0 9a6b 	vmov.f32	s19, s23
34027482:	46d0      	mov	r8, sl
34027484:	e6e8      	b.n	34027258 <forward_lite_resize_bilinear_is8os8+0x198>
34027486:	ee3d da27 	vadd.f32	s26, s26, s15
3402748a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
3402748e:	ee2d da27 	vmul.f32	s26, s26, s15
34027492:	eddf da20 	vldr	s27, [pc, #128]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
34027496:	ee2d da0c 	vmul.f32	s26, s26, s24
3402749a:	2b00      	cmp	r3, #0
3402749c:	f47f ae63 	bne.w	34027166 <forward_lite_resize_bilinear_is8os8+0xa6>
340274a0:	e6ac      	b.n	340271fc <forward_lite_resize_bilinear_is8os8+0x13c>
340274a2:	ee39 9a07 	vadd.f32	s18, s18, s14
340274a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
340274aa:	ee29 9a07 	vmul.f32	s18, s18, s14
340274ae:	eddf ba19 	vldr	s23, [pc, #100]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
340274b2:	ee29 9a08 	vmul.f32	s18, s18, s16
340274b6:	e63d      	b.n	34027134 <forward_lite_resize_bilinear_is8os8+0x74>
340274b8:	eddf ca16 	vldr	s25, [pc, #88]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
340274bc:	46d0      	mov	r8, sl
340274be:	eef0 da6c 	vmov.f32	s27, s25
340274c2:	eeb0 da6c 	vmov.f32	s26, s25
340274c6:	e6c7      	b.n	34027258 <forward_lite_resize_bilinear_is8os8+0x198>
340274c8:	eddf ba12 	vldr	s23, [pc, #72]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
340274cc:	eeb0 9a6b 	vmov.f32	s18, s23
340274d0:	eef0 9a6b 	vmov.f32	s19, s23
340274d4:	e775      	b.n	340273c2 <forward_lite_resize_bilinear_is8os8+0x302>
340274d6:	eddf ca0f 	vldr	s25, [pc, #60]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
340274da:	46d0      	mov	r8, sl
340274dc:	eef0 da6c 	vmov.f32	s27, s25
340274e0:	eeb0 da6c 	vmov.f32	s26, s25
340274e4:	eef0 9a6c 	vmov.f32	s19, s25
340274e8:	eeb0 9a6c 	vmov.f32	s18, s25
340274ec:	e6b4      	b.n	34027258 <forward_lite_resize_bilinear_is8os8+0x198>
340274ee:	eddf ba09 	vldr	s23, [pc, #36]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
340274f2:	e789      	b.n	34027408 <forward_lite_resize_bilinear_is8os8+0x348>
340274f4:	eddf ca07 	vldr	s25, [pc, #28]	@ 34027514 <forward_lite_resize_bilinear_is8os8+0x454>
340274f8:	46d0      	mov	r8, sl
340274fa:	eef0 da6c 	vmov.f32	s27, s25
340274fe:	eeb0 da6c 	vmov.f32	s26, s25
34027502:	eef0 9a6c 	vmov.f32	s19, s25
34027506:	eef0 ba6c 	vmov.f32	s23, s25
3402750a:	eeb0 9a6c 	vmov.f32	s18, s25
3402750e:	e6a3      	b.n	34027258 <forward_lite_resize_bilinear_is8os8+0x198>
34027510:	38d1b717 	.word	0x38d1b717
34027514:	00000000 	.word	0x00000000

34027518 <forward_lite_resize_nearest>:
34027518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3402751c:	ed2d 8b0a 	vpush	{d8-d12}
34027520:	b097      	sub	sp, #92	@ 0x5c
34027522:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
34027524:	460e      	mov	r6, r1
34027526:	e9dd 9a2a 	ldrd	r9, sl, [sp, #168]	@ 0xa8
3402752a:	9402      	str	r4, [sp, #8]
3402752c:	461c      	mov	r4, r3
3402752e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
34027530:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
34027532:	9303      	str	r3, [sp, #12]
34027534:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
34027536:	4611      	mov	r1, r2
34027538:	9304      	str	r3, [sp, #16]
3402753a:	ab10      	add	r3, sp, #64	@ 0x40
3402753c:	9308      	str	r3, [sp, #32]
3402753e:	ab0f      	add	r3, sp, #60	@ 0x3c
34027540:	9307      	str	r3, [sp, #28]
34027542:	ab0e      	add	r3, sp, #56	@ 0x38
34027544:	920b      	str	r2, [sp, #44]	@ 0x2c
34027546:	9306      	str	r3, [sp, #24]
34027548:	4622      	mov	r2, r4
3402754a:	464b      	mov	r3, r9
3402754c:	4607      	mov	r7, r0
3402754e:	f8cd a000 	str.w	sl, [sp]
34027552:	f89d 00bc 	ldrb.w	r0, [sp, #188]	@ 0xbc
34027556:	9501      	str	r5, [sp, #4]
34027558:	9605      	str	r6, [sp, #20]
3402755a:	f89d b0b8 	ldrb.w	fp, [sp, #184]	@ 0xb8
3402755e:	f7ff fc23 	bl	34026da8 <_lite_resize_init>
34027562:	f1bb 0f03 	cmp.w	fp, #3
34027566:	bf98      	it	ls
34027568:	4b3e      	ldrls	r3, [pc, #248]	@ (34027664 <forward_lite_resize_nearest+0x14c>)
3402756a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3402756c:	bf9a      	itte	ls
3402756e:	eb03 038b 	addls.w	r3, r3, fp, lsl #2
34027572:	edd3 aa00 	vldrls	s21, [r3]
34027576:	eddf aa3c 	vldrhi	s21, [pc, #240]	@ 34027668 <forward_lite_resize_nearest+0x150>
3402757a:	2a00      	cmp	r2, #0
3402757c:	d06c      	beq.n	34027658 <forward_lite_resize_nearest+0x140>
3402757e:	3c01      	subs	r4, #1
34027580:	ee07 4a90 	vmov	s15, r4
34027584:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
34027588:	eeb8 ba67 	vcvt.f32.u32	s22, s15
3402758c:	eddd ba13 	vldr	s23, [sp, #76]	@ 0x4c
34027590:	ed9d ca14 	vldr	s24, [sp, #80]	@ 0x50
34027594:	eddd ca15 	vldr	s25, [sp, #84]	@ 0x54
34027598:	fb09 fa0a 	mul.w	sl, r9, sl
3402759c:	f1bb 0f00 	cmp.w	fp, #0
340275a0:	d05a      	beq.n	34027658 <forward_lite_resize_nearest+0x140>
340275a2:	f04f 0900 	mov.w	r9, #0
340275a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
340275a8:	46b0      	mov	r8, r6
340275aa:	3b01      	subs	r3, #1
340275ac:	ee07 3a90 	vmov	s15, r3
340275b0:	fb05 f30a 	mul.w	r3, r5, sl
340275b4:	930c      	str	r3, [sp, #48]	@ 0x30
340275b6:	464b      	mov	r3, r9
340275b8:	ed9f 8a2c 	vldr	s16, [pc, #176]	@ 3402766c <forward_lite_resize_nearest+0x154>
340275bc:	46d1      	mov	r9, sl
340275be:	eeb8 aa67 	vcvt.f32.u32	s20, s15
340275c2:	469a      	mov	sl, r3
340275c4:	920d      	str	r2, [sp, #52]	@ 0x34
340275c6:	ee07 aa90 	vmov	s15, sl
340275ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340275ce:	eef0 7a6b 	vmov.f32	s15, s23
340275d2:	ee37 7a2c 	vadd.f32	s14, s14, s25
340275d6:	eee7 7a0c 	vfma.f32	s15, s14, s24
340275da:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
340275de:	fec7 7acb 	vminnm.f32	s15, s15, s22
340275e2:	ee77 7aaa 	vadd.f32	s15, s15, s21
340275e6:	fef8 7a67 	vrinta.f32	s15, s15
340275ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340275ee:	ee17 6a90 	vmov	r6, s15
340275f2:	4645      	mov	r5, r8
340275f4:	2400      	movs	r4, #0
340275f6:	eddd 9a10 	vldr	s19, [sp, #64]	@ 0x40
340275fa:	ed9d 9a11 	vldr	s18, [sp, #68]	@ 0x44
340275fe:	eddd 8a12 	vldr	s17, [sp, #72]	@ 0x48
34027602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34027604:	fb03 f606 	mul.w	r6, r3, r6
34027608:	ee07 4a90 	vmov	s15, r4
3402760c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34027610:	eef0 7a69 	vmov.f32	s15, s19
34027614:	ee37 7a28 	vadd.f32	s14, s14, s17
34027618:	eee7 7a09 	vfma.f32	s15, s14, s18
3402761c:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
34027620:	fec7 7aca 	vminnm.f32	s15, s15, s20
34027624:	ee77 7aaa 	vadd.f32	s15, s15, s21
34027628:	fef8 7a67 	vrinta.f32	s15, s15
3402762c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34027630:	ee17 0a90 	vmov	r0, s15
34027634:	4430      	add	r0, r6
34027636:	4629      	mov	r1, r5
34027638:	464a      	mov	r2, r9
3402763a:	fb09 7000 	mla	r0, r9, r0, r7
3402763e:	3401      	adds	r4, #1
34027640:	f000 fb3e 	bl	34027cc0 <st_int8_copy>
34027644:	455c      	cmp	r4, fp
34027646:	444d      	add	r5, r9
34027648:	d1de      	bne.n	34027608 <forward_lite_resize_nearest+0xf0>
3402764a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3402764c:	f10a 0a01 	add.w	sl, sl, #1
34027650:	4498      	add	r8, r3
34027652:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
34027654:	459a      	cmp	sl, r3
34027656:	d1b6      	bne.n	340275c6 <forward_lite_resize_nearest+0xae>
34027658:	b017      	add	sp, #92	@ 0x5c
3402765a:	ecbd 8b0a 	vpop	{d8-d12}
3402765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34027662:	bf00      	nop
34027664:	340cc4b0 	.word	0x340cc4b0
34027668:	38d1b717 	.word	0x38d1b717
3402766c:	00000000 	.word	0x00000000

34027670 <forward_lite_upsample_zeros_is8os8>:
34027670:	b410      	push	{r4}
34027672:	f99d 4010 	ldrsb.w	r4, [sp, #16]
34027676:	9404      	str	r4, [sp, #16]
34027678:	f85d 4b04 	ldr.w	r4, [sp], #4
3402767c:	f000 bb80 	b.w	34027d80 <lite_upsample_zeros_ix8ox8_kernel>

34027680 <forward_lite_upsample_zeros_is16os16>:
34027680:	b410      	push	{r4}
34027682:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
34027686:	9404      	str	r4, [sp, #16]
34027688:	f85d 4b04 	ldr.w	r4, [sp], #4
3402768c:	f000 bc3e 	b.w	34027f0c <lite_upsample_zeros_ix16ox16_kernel>

34027690 <forward_lite_upsample_zeros_if32of32>:
34027690:	f000 bd06 	b.w	340280a0 <lite_upsample_zeros_if32of32_kernel>
34027694:	0000      	movs	r0, r0
	...

34027698 <st_f32_to_int16>:
34027698:	b530      	push	{r4, r5, lr}
3402769a:	08d5      	lsrs	r5, r2, #3
3402769c:	ed2d 8b08 	vpush	{d8-d11}
340276a0:	d020      	beq.n	340276e4 <st_f32_to_int16+0x4c>
340276a2:	460c      	mov	r4, r1
340276a4:	4684      	mov	ip, r0
340276a6:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 34027820 <st_f32_to_int16+0x188>
340276aa:	ed9f 7b5f 	vldr	d7, [pc, #380]	@ 34027828 <st_f32_to_int16+0x190>
340276ae:	f045 e001 	dls	lr, r5
340276b2:	4b5f      	ldr	r3, [pc, #380]	@ (34027830 <st_f32_to_int16+0x198>)
340276b4:	fc9c 9f00 	ldc2	15, cr9, [ip], {0}
340276b8:	fcbc 9f20 	ldc2	15, cr9, [ip], #128	@ 0x80
340276bc:	ee39 2e63 	cdp	14, 3, cr2, cr9, cr3, {3}
340276c0:	ee3b 4e63 	cdp	14, 3, cr4, cr11, cr3, {3}
340276c4:	ffbb 2042 	vcvta.s32.f32	q1, q1
340276c8:	ffbb 4044 	vcvta.s32.f32	q2, q2
340276cc:	ee37 6e03 	cdp	14, 3, cr6, cr7, cr3, {0}
340276d0:	ee37 7e05 	cdp	14, 3, cr7, cr7, cr5, {0}
340276d4:	eca4 7e88 	stc	14, cr7, [r4], #544	@ 0x220
340276d8:	f00f c015 	le	lr, 340276b4 <st_f32_to_int16+0x1c>
340276dc:	eb00 1045 	add.w	r0, r0, r5, lsl #5
340276e0:	eb01 1105 	add.w	r1, r1, r5, lsl #4
340276e4:	f012 0207 	ands.w	r2, r2, #7
340276e8:	f000 8097 	beq.w	3402781a <st_f32_to_int16+0x182>
340276ec:	edd0 5a00 	vldr	s11, [r0]
340276f0:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 34027834 <st_f32_to_int16+0x19c>
340276f4:	ee65 5a86 	vmul.f32	s11, s11, s12
340276f8:	eef5 5ac0 	vcmpe.f32	s11, #0.0
340276fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
34027700:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
34027704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027708:	fe77 7a26 	vselgt.f32	s15, s14, s13
3402770c:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027714:	ee17 3a90 	vmov	r3, s15
34027718:	f303 030f 	ssat	r3, #16, r3
3402771c:	2a01      	cmp	r2, #1
3402771e:	800b      	strh	r3, [r1, #0]
34027720:	d07b      	beq.n	3402781a <st_f32_to_int16+0x182>
34027722:	edd0 7a01 	vldr	s15, [r0, #4]
34027726:	ee67 7a86 	vmul.f32	s15, s15, s12
3402772a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027732:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027736:	ee77 7aa5 	vadd.f32	s15, s15, s11
3402773a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402773e:	ee17 3a90 	vmov	r3, s15
34027742:	f303 030f 	ssat	r3, #16, r3
34027746:	2a02      	cmp	r2, #2
34027748:	804b      	strh	r3, [r1, #2]
3402774a:	d066      	beq.n	3402781a <st_f32_to_int16+0x182>
3402774c:	edd0 7a02 	vldr	s15, [r0, #8]
34027750:	ee67 7a86 	vmul.f32	s15, s15, s12
34027754:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402775c:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027760:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027768:	ee17 3a90 	vmov	r3, s15
3402776c:	f303 030f 	ssat	r3, #16, r3
34027770:	2a03      	cmp	r2, #3
34027772:	808b      	strh	r3, [r1, #4]
34027774:	d051      	beq.n	3402781a <st_f32_to_int16+0x182>
34027776:	edd0 7a03 	vldr	s15, [r0, #12]
3402777a:	ee67 7a86 	vmul.f32	s15, s15, s12
3402777e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027786:	fe77 5a26 	vselgt.f32	s11, s14, s13
3402778a:	ee77 7aa5 	vadd.f32	s15, s15, s11
3402778e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027792:	ee17 3a90 	vmov	r3, s15
34027796:	f303 030f 	ssat	r3, #16, r3
3402779a:	2a04      	cmp	r2, #4
3402779c:	80cb      	strh	r3, [r1, #6]
3402779e:	d03c      	beq.n	3402781a <st_f32_to_int16+0x182>
340277a0:	edd0 7a04 	vldr	s15, [r0, #16]
340277a4:	ee67 7a86 	vmul.f32	s15, s15, s12
340277a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340277ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340277b0:	fe77 5a26 	vselgt.f32	s11, s14, s13
340277b4:	ee77 7aa5 	vadd.f32	s15, s15, s11
340277b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340277bc:	ee17 3a90 	vmov	r3, s15
340277c0:	f303 030f 	ssat	r3, #16, r3
340277c4:	2a05      	cmp	r2, #5
340277c6:	810b      	strh	r3, [r1, #8]
340277c8:	d027      	beq.n	3402781a <st_f32_to_int16+0x182>
340277ca:	edd0 7a05 	vldr	s15, [r0, #20]
340277ce:	ee67 7a86 	vmul.f32	s15, s15, s12
340277d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340277d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340277da:	fe77 5a26 	vselgt.f32	s11, s14, s13
340277de:	ee77 7aa5 	vadd.f32	s15, s15, s11
340277e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340277e6:	ee17 3a90 	vmov	r3, s15
340277ea:	f303 030f 	ssat	r3, #16, r3
340277ee:	2a06      	cmp	r2, #6
340277f0:	814b      	strh	r3, [r1, #10]
340277f2:	d012      	beq.n	3402781a <st_f32_to_int16+0x182>
340277f4:	edd0 7a06 	vldr	s15, [r0, #24]
340277f8:	ee67 7a86 	vmul.f32	s15, s15, s12
340277fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027804:	fe37 7a26 	vselgt.f32	s14, s14, s13
34027808:	ee37 7a27 	vadd.f32	s14, s14, s15
3402780c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
34027810:	ee17 3a10 	vmov	r3, s14
34027814:	f303 030f 	ssat	r3, #16, r3
34027818:	818b      	strh	r3, [r1, #12]
3402781a:	ecbd 8b08 	vpop	{d8-d11}
3402781e:	bd30      	pop	{r4, r5, pc}
	...
34027830:	46fffe00 	.word	0x46fffe00
34027834:	47000000 	.word	0x47000000

34027838 <st_f32_to_int8>:
34027838:	b530      	push	{r4, r5, lr}
3402783a:	0915      	lsrs	r5, r2, #4
3402783c:	ed2d 8b10 	vpush	{d8-d15}
34027840:	f000 81a3 	beq.w	34027b8a <st_f32_to_int8+0x352>
34027844:	ed9f 0bd2 	vldr	d0, [pc, #840]	@ 34027b90 <st_f32_to_int8+0x358>
34027848:	ed9f 1bd3 	vldr	d1, [pc, #844]	@ 34027b98 <st_f32_to_int8+0x360>
3402784c:	ea4f 1e05 	mov.w	lr, r5, lsl #4
34027850:	f1ae 0e10 	sub.w	lr, lr, #16
34027854:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
34027858:	f10e 0e01 	add.w	lr, lr, #1
3402785c:	4684      	mov	ip, r0
3402785e:	ed9f 4bd0 	vldr	d4, [pc, #832]	@ 34027ba0 <st_f32_to_int8+0x368>
34027862:	ed9f 5bd1 	vldr	d5, [pc, #836]	@ 34027ba8 <st_f32_to_int8+0x370>
34027866:	f04e e001 	dls	lr, lr
3402786a:	f04f 4386 	mov.w	r3, #1124073472	@ 0x43000000
3402786e:	ef20 6150 	vorr	q3, q0, q0
34027872:	eb01 1405 	add.w	r4, r1, r5, lsl #4
34027876:	fc9c 9f01 	ldc2	15, cr9, [ip], {1}
3402787a:	fc9c 9f21 	ldc2	15, cr9, [ip], {33}	@ 0x21
3402787e:	fc9c 9f41 	ldc2	15, cr9, [ip], {65}	@ 0x41
34027882:	fcbc 9f61 	ldc2	15, cr9, [ip], #388	@ 0x184
34027886:	ee39 2e63 	cdp	14, 3, cr2, cr9, cr3, {3}
3402788a:	ffbb 2042 	vcvta.s32.f32	q1, q1
3402788e:	ee37 6e03 	cdp	14, 3, cr6, cr7, cr3, {0}
34027892:	ee3b 2e63 	cdp	14, 3, cr2, cr11, cr3, {3}
34027896:	ffbb 2042 	vcvta.s32.f32	q1, q1
3402789a:	ee37 0e03 	cdp	14, 3, cr0, cr7, cr3, {0}
3402789e:	ee3d 2e63 	cdp	14, 3, cr2, cr13, cr3, {3}
340278a2:	ee3f 8e63 	cdp	14, 3, cr8, cr15, cr3, {3}
340278a6:	ffbb 2042 	vcvta.s32.f32	q1, q1
340278aa:	ffbb 8048 	vcvta.s32.f32	q4, q4
340278ae:	ee37 7e03 	cdp	14, 3, cr7, cr7, cr3, {0}
340278b2:	ee37 1e09 	cdp	14, 3, cr1, cr7, cr9, {0}
340278b6:	ee33 4e07 	cdp	14, 3, cr4, cr3, cr7, {0}
340278ba:	ee33 5e01 	cdp	14, 3, cr5, cr3, cr1, {0}
340278be:	eca1 5e10 	stc	14, cr5, [r1], #64	@ 0x40
340278c2:	f00f c029 	le	lr, 34027876 <st_f32_to_int8+0x3e>
340278c6:	eb00 1085 	add.w	r0, r0, r5, lsl #6
340278ca:	f012 030f 	ands.w	r3, r2, #15
340278ce:	f000 8159 	beq.w	34027b84 <st_f32_to_int8+0x34c>
340278d2:	edd0 5a00 	vldr	s11, [r0]
340278d6:	ed9f 6ab6 	vldr	s12, [pc, #728]	@ 34027bb0 <st_f32_to_int8+0x378>
340278da:	ee65 5a86 	vmul.f32	s11, s11, s12
340278de:	eef5 5ac0 	vcmpe.f32	s11, #0.0
340278e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
340278e6:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
340278ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340278ee:	fe77 7a26 	vselgt.f32	s15, s14, s13
340278f2:	ee77 7aa5 	vadd.f32	s15, s15, s11
340278f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340278fa:	ee17 2a90 	vmov	r2, s15
340278fe:	b212      	sxth	r2, r2
34027900:	f302 0207 	ssat	r2, #8, r2
34027904:	2b01      	cmp	r3, #1
34027906:	7022      	strb	r2, [r4, #0]
34027908:	f000 813c 	beq.w	34027b84 <st_f32_to_int8+0x34c>
3402790c:	edd0 7a01 	vldr	s15, [r0, #4]
34027910:	ee67 7a86 	vmul.f32	s15, s15, s12
34027914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402791c:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027920:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027928:	ee17 2a90 	vmov	r2, s15
3402792c:	b212      	sxth	r2, r2
3402792e:	f302 0207 	ssat	r2, #8, r2
34027932:	2b02      	cmp	r3, #2
34027934:	7062      	strb	r2, [r4, #1]
34027936:	f000 8125 	beq.w	34027b84 <st_f32_to_int8+0x34c>
3402793a:	edd0 7a02 	vldr	s15, [r0, #8]
3402793e:	ee67 7a86 	vmul.f32	s15, s15, s12
34027942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402794a:	fe77 5a26 	vselgt.f32	s11, s14, s13
3402794e:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027956:	ee17 2a90 	vmov	r2, s15
3402795a:	b212      	sxth	r2, r2
3402795c:	f302 0207 	ssat	r2, #8, r2
34027960:	2b03      	cmp	r3, #3
34027962:	70a2      	strb	r2, [r4, #2]
34027964:	f000 810e 	beq.w	34027b84 <st_f32_to_int8+0x34c>
34027968:	edd0 7a03 	vldr	s15, [r0, #12]
3402796c:	ee67 7a86 	vmul.f32	s15, s15, s12
34027970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027978:	fe77 5a26 	vselgt.f32	s11, s14, s13
3402797c:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027984:	ee17 2a90 	vmov	r2, s15
34027988:	b212      	sxth	r2, r2
3402798a:	f302 0207 	ssat	r2, #8, r2
3402798e:	2b04      	cmp	r3, #4
34027990:	70e2      	strb	r2, [r4, #3]
34027992:	f000 80f7 	beq.w	34027b84 <st_f32_to_int8+0x34c>
34027996:	edd0 7a04 	vldr	s15, [r0, #16]
3402799a:	ee67 7a86 	vmul.f32	s15, s15, s12
3402799e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340279a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340279a6:	fe77 5a26 	vselgt.f32	s11, s14, s13
340279aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
340279ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340279b2:	ee17 2a90 	vmov	r2, s15
340279b6:	b212      	sxth	r2, r2
340279b8:	f302 0207 	ssat	r2, #8, r2
340279bc:	2b05      	cmp	r3, #5
340279be:	7122      	strb	r2, [r4, #4]
340279c0:	f000 80e0 	beq.w	34027b84 <st_f32_to_int8+0x34c>
340279c4:	edd0 7a05 	vldr	s15, [r0, #20]
340279c8:	ee67 7a86 	vmul.f32	s15, s15, s12
340279cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340279d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340279d4:	fe77 5a26 	vselgt.f32	s11, s14, s13
340279d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
340279dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340279e0:	ee17 2a90 	vmov	r2, s15
340279e4:	b212      	sxth	r2, r2
340279e6:	f302 0207 	ssat	r2, #8, r2
340279ea:	2b06      	cmp	r3, #6
340279ec:	7162      	strb	r2, [r4, #5]
340279ee:	f000 80c9 	beq.w	34027b84 <st_f32_to_int8+0x34c>
340279f2:	edd0 7a06 	vldr	s15, [r0, #24]
340279f6:	ee67 7a86 	vmul.f32	s15, s15, s12
340279fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340279fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027a02:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027a06:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027a0e:	ee17 2a90 	vmov	r2, s15
34027a12:	b212      	sxth	r2, r2
34027a14:	f302 0207 	ssat	r2, #8, r2
34027a18:	2b07      	cmp	r3, #7
34027a1a:	71a2      	strb	r2, [r4, #6]
34027a1c:	f000 80b2 	beq.w	34027b84 <st_f32_to_int8+0x34c>
34027a20:	edd0 7a07 	vldr	s15, [r0, #28]
34027a24:	ee67 7a86 	vmul.f32	s15, s15, s12
34027a28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027a30:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027a34:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027a3c:	ee17 2a90 	vmov	r2, s15
34027a40:	b212      	sxth	r2, r2
34027a42:	f302 0207 	ssat	r2, #8, r2
34027a46:	2b08      	cmp	r3, #8
34027a48:	71e2      	strb	r2, [r4, #7]
34027a4a:	f000 809b 	beq.w	34027b84 <st_f32_to_int8+0x34c>
34027a4e:	edd0 7a08 	vldr	s15, [r0, #32]
34027a52:	ee67 7a86 	vmul.f32	s15, s15, s12
34027a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027a5e:	fe37 7a26 	vselgt.f32	s14, s14, s13
34027a62:	ee77 7a87 	vadd.f32	s15, s15, s14
34027a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027a6a:	ee17 2a90 	vmov	r2, s15
34027a6e:	b212      	sxth	r2, r2
34027a70:	f302 0207 	ssat	r2, #8, r2
34027a74:	2b09      	cmp	r3, #9
34027a76:	7222      	strb	r2, [r4, #8]
34027a78:	f000 8084 	beq.w	34027b84 <st_f32_to_int8+0x34c>
34027a7c:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
34027a80:	ee67 7a86 	vmul.f32	s15, s15, s12
34027a84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027a88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
34027a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027a90:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027a94:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027a9c:	ee17 2a90 	vmov	r2, s15
34027aa0:	b212      	sxth	r2, r2
34027aa2:	f302 0207 	ssat	r2, #8, r2
34027aa6:	2b0a      	cmp	r3, #10
34027aa8:	7262      	strb	r2, [r4, #9]
34027aaa:	d06b      	beq.n	34027b84 <st_f32_to_int8+0x34c>
34027aac:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
34027ab0:	ee67 7a86 	vmul.f32	s15, s15, s12
34027ab4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027abc:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027ac0:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027ac8:	ee17 2a90 	vmov	r2, s15
34027acc:	b212      	sxth	r2, r2
34027ace:	f302 0207 	ssat	r2, #8, r2
34027ad2:	2b0b      	cmp	r3, #11
34027ad4:	72a2      	strb	r2, [r4, #10]
34027ad6:	d055      	beq.n	34027b84 <st_f32_to_int8+0x34c>
34027ad8:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
34027adc:	ee67 7a86 	vmul.f32	s15, s15, s12
34027ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027ae8:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027aec:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027af4:	ee17 2a90 	vmov	r2, s15
34027af8:	b212      	sxth	r2, r2
34027afa:	f302 0207 	ssat	r2, #8, r2
34027afe:	2b0c      	cmp	r3, #12
34027b00:	72e2      	strb	r2, [r4, #11]
34027b02:	d03f      	beq.n	34027b84 <st_f32_to_int8+0x34c>
34027b04:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
34027b08:	ee67 7a86 	vmul.f32	s15, s15, s12
34027b0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027b14:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027b18:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027b20:	ee17 2a90 	vmov	r2, s15
34027b24:	b212      	sxth	r2, r2
34027b26:	f302 0207 	ssat	r2, #8, r2
34027b2a:	2b0d      	cmp	r3, #13
34027b2c:	7322      	strb	r2, [r4, #12]
34027b2e:	d029      	beq.n	34027b84 <st_f32_to_int8+0x34c>
34027b30:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
34027b34:	ee67 7a86 	vmul.f32	s15, s15, s12
34027b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34027b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027b40:	fe77 5a26 	vselgt.f32	s11, s14, s13
34027b44:	ee77 7aa5 	vadd.f32	s15, s15, s11
34027b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027b4c:	ee17 2a90 	vmov	r2, s15
34027b50:	b212      	sxth	r2, r2
34027b52:	f302 0207 	ssat	r2, #8, r2
34027b56:	2b0e      	cmp	r3, #14
34027b58:	7362      	strb	r2, [r4, #13]
34027b5a:	d013      	beq.n	34027b84 <st_f32_to_int8+0x34c>
34027b5c:	edd0 7a0e 	vldr	s15, [r0, #56]	@ 0x38
34027b60:	ee27 6a86 	vmul.f32	s12, s15, s12
34027b64:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
34027b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34027b6c:	fe77 7a26 	vselgt.f32	s15, s14, s13
34027b70:	ee77 7a86 	vadd.f32	s15, s15, s12
34027b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34027b78:	ee17 3a90 	vmov	r3, s15
34027b7c:	b21b      	sxth	r3, r3
34027b7e:	f303 0307 	ssat	r3, #8, r3
34027b82:	73a3      	strb	r3, [r4, #14]
34027b84:	ecbd 8b10 	vpop	{d8-d15}
34027b88:	bd30      	pop	{r4, r5, pc}
34027b8a:	460c      	mov	r4, r1
34027b8c:	e69d      	b.n	340278ca <st_f32_to_int8+0x92>
34027b8e:	bf00      	nop
	...
34027bb0:	43000000 	.word	0x43000000

34027bb4 <st_int16_to_f32>:
34027bb4:	ea5f 0c92 	movs.w	ip, r2, lsr #2
34027bb8:	b510      	push	{r4, lr}
34027bba:	d00f      	beq.n	34027bdc <st_int16_to_f32+0x28>
34027bbc:	4604      	mov	r4, r0
34027bbe:	460b      	mov	r3, r1
34027bc0:	f04c e001 	dls	lr, ip
34027bc4:	ecbc 6f04 	ldc	15, cr6, [ip], #16
34027bc8:	efb1 6e56 	vcvt.f32.s32	q3, q3, #15
34027bcc:	eca3 7f04 	stc	15, cr7, [r3], #16
34027bd0:	f00f c009 	le	lr, 34027bc4 <st_int16_to_f32+0x10>
34027bd4:	eb01 110c 	add.w	r1, r1, ip, lsl #4
34027bd8:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
34027bdc:	f012 0203 	ands.w	r2, r2, #3
34027be0:	d023      	beq.n	34027c2a <st_int16_to_f32+0x76>
34027be2:	f9b0 3000 	ldrsh.w	r3, [r0]
34027be6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 34027c2c <st_int16_to_f32+0x78>
34027bea:	ee07 3a90 	vmov	s15, r3
34027bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34027bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
34027bf6:	2a01      	cmp	r2, #1
34027bf8:	edc1 7a00 	vstr	s15, [r1]
34027bfc:	d015      	beq.n	34027c2a <st_int16_to_f32+0x76>
34027bfe:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
34027c02:	2a02      	cmp	r2, #2
34027c04:	ee07 3a90 	vmov	s15, r3
34027c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34027c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
34027c10:	edc1 7a01 	vstr	s15, [r1, #4]
34027c14:	d009      	beq.n	34027c2a <st_int16_to_f32+0x76>
34027c16:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
34027c1a:	ee07 3a90 	vmov	s15, r3
34027c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34027c22:	ee67 7a87 	vmul.f32	s15, s15, s14
34027c26:	edc1 7a02 	vstr	s15, [r1, #8]
34027c2a:	bd10      	pop	{r4, pc}
34027c2c:	38000000 	.word	0x38000000

34027c30 <st_int8_to_f32>:
34027c30:	ea5f 0c92 	movs.w	ip, r2, lsr #2
34027c34:	b510      	push	{r4, lr}
34027c36:	d03e      	beq.n	34027cb6 <st_int8_to_f32+0x86>
34027c38:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
34027c3c:	f1ae 0e04 	sub.w	lr, lr, #4
34027c40:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
34027c44:	f10e 0e01 	add.w	lr, lr, #1
34027c48:	460b      	mov	r3, r1
34027c4a:	f04e e001 	dls	lr, lr
34027c4e:	eb00 048c 	add.w	r4, r0, ip, lsl #2
34027c52:	ecb0 6f04 	ldc	15, cr6, [r0], #16
34027c56:	efb9 6e56 	vcvt.f32.s32	q3, q3, #7
34027c5a:	eca3 7f04 	stc	15, cr7, [r3], #16
34027c5e:	f00f c009 	le	lr, 34027c52 <st_int8_to_f32+0x22>
34027c62:	eb01 110c 	add.w	r1, r1, ip, lsl #4
34027c66:	f012 0203 	ands.w	r2, r2, #3
34027c6a:	d023      	beq.n	34027cb4 <st_int8_to_f32+0x84>
34027c6c:	f994 3000 	ldrsb.w	r3, [r4]
34027c70:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 34027cbc <st_int8_to_f32+0x8c>
34027c74:	ee07 3a90 	vmov	s15, r3
34027c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34027c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
34027c80:	2a01      	cmp	r2, #1
34027c82:	edc1 7a00 	vstr	s15, [r1]
34027c86:	d015      	beq.n	34027cb4 <st_int8_to_f32+0x84>
34027c88:	f994 3001 	ldrsb.w	r3, [r4, #1]
34027c8c:	2a02      	cmp	r2, #2
34027c8e:	ee07 3a90 	vmov	s15, r3
34027c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34027c96:	ee67 7a87 	vmul.f32	s15, s15, s14
34027c9a:	edc1 7a01 	vstr	s15, [r1, #4]
34027c9e:	d009      	beq.n	34027cb4 <st_int8_to_f32+0x84>
34027ca0:	f994 3002 	ldrsb.w	r3, [r4, #2]
34027ca4:	ee07 3a90 	vmov	s15, r3
34027ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34027cac:	ee67 7a87 	vmul.f32	s15, s15, s14
34027cb0:	edc1 7a02 	vstr	s15, [r1, #8]
34027cb4:	bd10      	pop	{r4, pc}
34027cb6:	4604      	mov	r4, r0
34027cb8:	e7d5      	b.n	34027c66 <st_int8_to_f32+0x36>
34027cba:	bf00      	nop
34027cbc:	3c000000 	.word	0x3c000000

34027cc0 <st_int8_copy>:
34027cc0:	4288      	cmp	r0, r1
34027cc2:	d05b      	beq.n	34027d7c <st_int8_copy+0xbc>
34027cc4:	2a00      	cmp	r2, #0
34027cc6:	d059      	beq.n	34027d7c <st_int8_copy+0xbc>
34027cc8:	4288      	cmp	r0, r1
34027cca:	b530      	push	{r4, r5, lr}
34027ccc:	d347      	bcc.n	34027d5e <st_int8_copy+0x9e>
34027cce:	078d      	lsls	r5, r1, #30
34027cd0:	4613      	mov	r3, r2
34027cd2:	d102      	bne.n	34027cda <st_int8_copy+0x1a>
34027cd4:	e008      	b.n	34027ce8 <st_int8_copy+0x28>
34027cd6:	3b01      	subs	r3, #1
34027cd8:	d040      	beq.n	34027d5c <st_int8_copy+0x9c>
34027cda:	f910 cb01 	ldrsb.w	ip, [r0], #1
34027cde:	3a01      	subs	r2, #1
34027ce0:	f801 cb01 	strb.w	ip, [r1], #1
34027ce4:	078c      	lsls	r4, r1, #30
34027ce6:	d1f6      	bne.n	34027cd6 <st_int8_copy+0x16>
34027ce8:	0914      	lsrs	r4, r2, #4
34027cea:	f3c2 0581 	ubfx	r5, r2, #2, #2
34027cee:	f002 0203 	and.w	r2, r2, #3
34027cf2:	b1b4      	cbz	r4, 34027d22 <st_int8_copy+0x62>
34027cf4:	ea4f 1e04 	mov.w	lr, r4, lsl #4
34027cf8:	f1ae 0e10 	sub.w	lr, lr, #16
34027cfc:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
34027d00:	f10e 0e01 	add.w	lr, lr, #1
34027d04:	4603      	mov	r3, r0
34027d06:	f04e e001 	dls	lr, lr
34027d0a:	ea4f 1c04 	mov.w	ip, r4, lsl #4
34027d0e:	eb01 1404 	add.w	r4, r1, r4, lsl #4
34027d12:	ecb3 7e10 	ldc	14, cr7, [r3], #64	@ 0x40
34027d16:	eca1 7e10 	stc	14, cr7, [r1], #64	@ 0x40
34027d1a:	f00f c007 	le	lr, 34027d12 <st_int8_copy+0x52>
34027d1e:	4621      	mov	r1, r4
34027d20:	4460      	add	r0, ip
34027d22:	b16d      	cbz	r5, 34027d40 <st_int8_copy+0x80>
34027d24:	6803      	ldr	r3, [r0, #0]
34027d26:	2d01      	cmp	r5, #1
34027d28:	600b      	str	r3, [r1, #0]
34027d2a:	d005      	beq.n	34027d38 <st_int8_copy+0x78>
34027d2c:	6843      	ldr	r3, [r0, #4]
34027d2e:	2d02      	cmp	r5, #2
34027d30:	604b      	str	r3, [r1, #4]
34027d32:	bf1c      	itt	ne
34027d34:	6883      	ldrne	r3, [r0, #8]
34027d36:	608b      	strne	r3, [r1, #8]
34027d38:	eb01 0185 	add.w	r1, r1, r5, lsl #2
34027d3c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
34027d40:	b162      	cbz	r2, 34027d5c <st_int8_copy+0x9c>
34027d42:	f990 3000 	ldrsb.w	r3, [r0]
34027d46:	2a01      	cmp	r2, #1
34027d48:	700b      	strb	r3, [r1, #0]
34027d4a:	d007      	beq.n	34027d5c <st_int8_copy+0x9c>
34027d4c:	f990 3001 	ldrsb.w	r3, [r0, #1]
34027d50:	2a02      	cmp	r2, #2
34027d52:	704b      	strb	r3, [r1, #1]
34027d54:	bf1c      	itt	ne
34027d56:	f990 3002 	ldrsbne.w	r3, [r0, #2]
34027d5a:	708b      	strbne	r3, [r1, #2]
34027d5c:	bd30      	pop	{r4, r5, pc}
34027d5e:	1883      	adds	r3, r0, r2
34027d60:	428b      	cmp	r3, r1
34027d62:	d9b4      	bls.n	34027cce <st_int8_copy+0xe>
34027d64:	eba3 0e00 	sub.w	lr, r3, r0
34027d68:	f04e e001 	dls	lr, lr
34027d6c:	4411      	add	r1, r2
34027d6e:	f913 2d01 	ldrsb.w	r2, [r3, #-1]!
34027d72:	f801 2d01 	strb.w	r2, [r1, #-1]!
34027d76:	f00f c007 	le	lr, 34027d6e <st_int8_copy+0xae>
34027d7a:	bd30      	pop	{r4, r5, pc}
34027d7c:	4770      	bx	lr
34027d7e:	bf00      	nop

34027d80 <lite_upsample_zeros_ix8ox8_kernel>:
34027d80:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34027d84:	ee30 0a67 	vsub.f32	s0, s0, s15
34027d88:	ee70 0ae7 	vsub.f32	s1, s1, s15
34027d8c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
34027d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34027d94:	ee17 7a90 	vmov	r7, s15
34027d98:	eefc 7ae0 	vcvt.u32.f32	s15, s1
34027d9c:	4692      	mov	sl, r2
34027d9e:	461d      	mov	r5, r3
34027da0:	ee17 2a90 	vmov	r2, s15
34027da4:	b087      	sub	sp, #28
34027da6:	9303      	str	r3, [sp, #12]
34027da8:	460b      	mov	r3, r1
34027daa:	fb07 a10a 	mla	r1, r7, sl, sl
34027dae:	9100      	str	r1, [sp, #0]
34027db0:	fb02 5105 	mla	r1, r2, r5, r5
34027db4:	f99d 404c 	ldrsb.w	r4, [sp, #76]	@ 0x4c
34027db8:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
34027dbc:	9104      	str	r1, [sp, #16]
34027dbe:	2d00      	cmp	r5, #0
34027dc0:	d05a      	beq.n	34027e78 <lite_upsample_zeros_ix8ox8_kernel+0xf8>
34027dc2:	f04f 0800 	mov.w	r8, #0
34027dc6:	9910      	ldr	r1, [sp, #64]	@ 0x40
34027dc8:	fb09 f707 	mul.w	r7, r9, r7
34027dcc:	fb09 f101 	mul.w	r1, r9, r1
34027dd0:	fb02 f201 	mul.w	r2, r2, r1
34027dd4:	9205      	str	r2, [sp, #20]
34027dd6:	1e7a      	subs	r2, r7, #1
34027dd8:	f022 020f 	bic.w	r2, r2, #15
34027ddc:	f109 31ff 	add.w	r1, r9, #4294967295
34027de0:	f1a7 0610 	sub.w	r6, r7, #16
34027de4:	eee4 4b10 	vdup.8	q2, r4
34027de8:	f021 010f 	bic.w	r1, r1, #15
34027dec:	f1a9 0410 	sub.w	r4, r9, #16
34027df0:	1ab6      	subs	r6, r6, r2
34027df2:	1e6a      	subs	r2, r5, #1
34027df4:	1a64      	subs	r4, r4, r1
34027df6:	9202      	str	r2, [sp, #8]
34027df8:	f1ba 0f00 	cmp.w	sl, #0
34027dfc:	d030      	beq.n	34027e60 <lite_upsample_zeros_ix8ox8_kernel+0xe0>
34027dfe:	f04f 0e00 	mov.w	lr, #0
34027e02:	f10a 3bff 	add.w	fp, sl, #4294967295
34027e06:	f009 0c0f 	and.w	ip, r9, #15
34027e0a:	f8cd 8004 	str.w	r8, [sp, #4]
34027e0e:	f1b9 0f00 	cmp.w	r9, #0
34027e12:	dd19      	ble.n	34027e48 <lite_upsample_zeros_ix8ox8_kernel+0xc8>
34027e14:	4649      	mov	r1, r9
34027e16:	f001 e801 	bfcsel	0, 34026e1c <_lite_resize_init+0x74>, 2, eq
34027e1a:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34027e1e:	b212      	sxth	r2, r2
34027e20:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34027e24:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34027e28:	ed90 7e00 	ldc	14, cr7, [r0]
34027e2c:	458c      	cmp	ip, r1
34027e2e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34027e32:	ed83 7e00 	stc	14, cr7, [r3]
34027e36:	f1a1 0110 	sub.w	r1, r1, #16
34027e3a:	d020      	beq.n	34027e7e <lite_upsample_zeros_ix8ox8_kernel+0xfe>
34027e3c:	42a1      	cmp	r1, r4
34027e3e:	f103 0310 	add.w	r3, r3, #16
34027e42:	f100 0010 	add.w	r0, r0, #16
34027e46:	d1e6      	bne.n	34027e16 <lite_upsample_zeros_ix8ox8_kernel+0x96>
34027e48:	45f3      	cmp	fp, lr
34027e4a:	d11c      	bne.n	34027e86 <lite_upsample_zeros_ix8ox8_kernel+0x106>
34027e4c:	9a00      	ldr	r2, [sp, #0]
34027e4e:	9910      	ldr	r1, [sp, #64]	@ 0x40
34027e50:	428a      	cmp	r2, r1
34027e52:	d918      	bls.n	34027e86 <lite_upsample_zeros_ix8ox8_kernel+0x106>
34027e54:	f10e 0e01 	add.w	lr, lr, #1
34027e58:	45f2      	cmp	sl, lr
34027e5a:	d1d8      	bne.n	34027e0e <lite_upsample_zeros_ix8ox8_kernel+0x8e>
34027e5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
34027e60:	9a02      	ldr	r2, [sp, #8]
34027e62:	4542      	cmp	r2, r8
34027e64:	d12c      	bne.n	34027ec0 <lite_upsample_zeros_ix8ox8_kernel+0x140>
34027e66:	9a04      	ldr	r2, [sp, #16]
34027e68:	9911      	ldr	r1, [sp, #68]	@ 0x44
34027e6a:	428a      	cmp	r2, r1
34027e6c:	d928      	bls.n	34027ec0 <lite_upsample_zeros_ix8ox8_kernel+0x140>
34027e6e:	9a03      	ldr	r2, [sp, #12]
34027e70:	f108 0801 	add.w	r8, r8, #1
34027e74:	4542      	cmp	r2, r8
34027e76:	d1bf      	bne.n	34027df8 <lite_upsample_zeros_ix8ox8_kernel+0x78>
34027e78:	b007      	add	sp, #28
34027e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34027e7e:	45f3      	cmp	fp, lr
34027e80:	4463      	add	r3, ip
34027e82:	4460      	add	r0, ip
34027e84:	d0e2      	beq.n	34027e4c <lite_upsample_zeros_ix8ox8_kernel+0xcc>
34027e86:	2f00      	cmp	r7, #0
34027e88:	dde4      	ble.n	34027e54 <lite_upsample_zeros_ix8ox8_kernel+0xd4>
34027e8a:	4639      	mov	r1, r7
34027e8c:	093d      	lsrs	r5, r7, #4
34027e8e:	3501      	adds	r5, #1
34027e90:	f007 080f 	and.w	r8, r7, #15
34027e94:	f001 e801 	bfcsel	0, 34026e9a <_lite_resize_init+0xf2>, 2, eq
34027e98:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34027e9c:	b292      	uxth	r2, r2
34027e9e:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34027ea2:	3d01      	subs	r5, #1
34027ea4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34027ea8:	ed83 5e00 	stc	14, cr5, [r3]
34027eac:	f1a1 0110 	sub.w	r1, r1, #16
34027eb0:	d004      	beq.n	34027ebc <lite_upsample_zeros_ix8ox8_kernel+0x13c>
34027eb2:	42b1      	cmp	r1, r6
34027eb4:	f103 0310 	add.w	r3, r3, #16
34027eb8:	d1ec      	bne.n	34027e94 <lite_upsample_zeros_ix8ox8_kernel+0x114>
34027eba:	e7cb      	b.n	34027e54 <lite_upsample_zeros_ix8ox8_kernel+0xd4>
34027ebc:	4443      	add	r3, r8
34027ebe:	e7c9      	b.n	34027e54 <lite_upsample_zeros_ix8ox8_kernel+0xd4>
34027ec0:	9d05      	ldr	r5, [sp, #20]
34027ec2:	2d00      	cmp	r5, #0
34027ec4:	ddd3      	ble.n	34027e6e <lite_upsample_zeros_ix8ox8_kernel+0xee>
34027ec6:	4629      	mov	r1, r5
34027ec8:	1e6a      	subs	r2, r5, #1
34027eca:	f1a5 0c10 	sub.w	ip, r5, #16
34027ece:	f022 020f 	bic.w	r2, r2, #15
34027ed2:	092d      	lsrs	r5, r5, #4
34027ed4:	ebac 0c02 	sub.w	ip, ip, r2
34027ed8:	3501      	adds	r5, #1
34027eda:	f001 0e0f 	and.w	lr, r1, #15
34027ede:	f001 e801 	bfcsel	0, 34026ee4 <_lite_resize_init+0x13c>, 2, eq
34027ee2:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34027ee6:	b292      	uxth	r2, r2
34027ee8:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34027eec:	3d01      	subs	r5, #1
34027eee:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34027ef2:	ed83 5e00 	stc	14, cr5, [r3]
34027ef6:	f1a1 0110 	sub.w	r1, r1, #16
34027efa:	d004      	beq.n	34027f06 <lite_upsample_zeros_ix8ox8_kernel+0x186>
34027efc:	4561      	cmp	r1, ip
34027efe:	f103 0310 	add.w	r3, r3, #16
34027f02:	d1ec      	bne.n	34027ede <lite_upsample_zeros_ix8ox8_kernel+0x15e>
34027f04:	e7b3      	b.n	34027e6e <lite_upsample_zeros_ix8ox8_kernel+0xee>
34027f06:	4473      	add	r3, lr
34027f08:	e7b1      	b.n	34027e6e <lite_upsample_zeros_ix8ox8_kernel+0xee>
34027f0a:	bf00      	nop

34027f0c <lite_upsample_zeros_ix16ox16_kernel>:
34027f0c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34027f10:	ee30 0a67 	vsub.f32	s0, s0, s15
34027f14:	ee70 0ae7 	vsub.f32	s1, s1, s15
34027f18:	eefc 7ac0 	vcvt.u32.f32	s15, s0
34027f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34027f20:	ee17 7a90 	vmov	r7, s15
34027f24:	eefc 7ae0 	vcvt.u32.f32	s15, s1
34027f28:	4692      	mov	sl, r2
34027f2a:	461d      	mov	r5, r3
34027f2c:	ee17 2a90 	vmov	r2, s15
34027f30:	b087      	sub	sp, #28
34027f32:	9303      	str	r3, [sp, #12]
34027f34:	460b      	mov	r3, r1
34027f36:	fb07 a10a 	mla	r1, r7, sl, sl
34027f3a:	9100      	str	r1, [sp, #0]
34027f3c:	fb02 5105 	mla	r1, r2, r5, r5
34027f40:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	@ 0x4c
34027f44:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
34027f48:	9104      	str	r1, [sp, #16]
34027f4a:	2d00      	cmp	r5, #0
34027f4c:	d05a      	beq.n	34028004 <lite_upsample_zeros_ix16ox16_kernel+0xf8>
34027f4e:	f04f 0800 	mov.w	r8, #0
34027f52:	9910      	ldr	r1, [sp, #64]	@ 0x40
34027f54:	fb09 f707 	mul.w	r7, r9, r7
34027f58:	fb09 f101 	mul.w	r1, r9, r1
34027f5c:	fb02 f201 	mul.w	r2, r2, r1
34027f60:	9205      	str	r2, [sp, #20]
34027f62:	1e7a      	subs	r2, r7, #1
34027f64:	f022 0207 	bic.w	r2, r2, #7
34027f68:	f109 31ff 	add.w	r1, r9, #4294967295
34027f6c:	f1a7 0608 	sub.w	r6, r7, #8
34027f70:	eea4 4b30 	vdup.16	q2, r4
34027f74:	f021 0107 	bic.w	r1, r1, #7
34027f78:	f1a9 0408 	sub.w	r4, r9, #8
34027f7c:	1ab6      	subs	r6, r6, r2
34027f7e:	1e6a      	subs	r2, r5, #1
34027f80:	1a64      	subs	r4, r4, r1
34027f82:	9202      	str	r2, [sp, #8]
34027f84:	f1ba 0f00 	cmp.w	sl, #0
34027f88:	d030      	beq.n	34027fec <lite_upsample_zeros_ix16ox16_kernel+0xe0>
34027f8a:	f04f 0e00 	mov.w	lr, #0
34027f8e:	f10a 3bff 	add.w	fp, sl, #4294967295
34027f92:	f009 0c07 	and.w	ip, r9, #7
34027f96:	f8cd 8004 	str.w	r8, [sp, #4]
34027f9a:	f1b9 0f00 	cmp.w	r9, #0
34027f9e:	dd19      	ble.n	34027fd4 <lite_upsample_zeros_ix16ox16_kernel+0xc8>
34027fa0:	4649      	mov	r1, r9
34027fa2:	f011 e801 	bfcsel	0, 34026fa8 <_lite_resize_init+0x200>, 2, mi
34027fa6:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34027faa:	b212      	sxth	r2, r2
34027fac:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34027fb0:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34027fb4:	ed90 7e80 	ldc	14, cr7, [r0, #512]	@ 0x200
34027fb8:	458c      	cmp	ip, r1
34027fba:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34027fbe:	ed83 7e80 	stc	14, cr7, [r3, #512]	@ 0x200
34027fc2:	f1a1 0108 	sub.w	r1, r1, #8
34027fc6:	d020      	beq.n	3402800a <lite_upsample_zeros_ix16ox16_kernel+0xfe>
34027fc8:	42a1      	cmp	r1, r4
34027fca:	f103 0310 	add.w	r3, r3, #16
34027fce:	f100 0010 	add.w	r0, r0, #16
34027fd2:	d1e6      	bne.n	34027fa2 <lite_upsample_zeros_ix16ox16_kernel+0x96>
34027fd4:	45f3      	cmp	fp, lr
34027fd6:	d11e      	bne.n	34028016 <lite_upsample_zeros_ix16ox16_kernel+0x10a>
34027fd8:	9a00      	ldr	r2, [sp, #0]
34027fda:	9910      	ldr	r1, [sp, #64]	@ 0x40
34027fdc:	428a      	cmp	r2, r1
34027fde:	d91a      	bls.n	34028016 <lite_upsample_zeros_ix16ox16_kernel+0x10a>
34027fe0:	f10e 0e01 	add.w	lr, lr, #1
34027fe4:	45f2      	cmp	sl, lr
34027fe6:	d1d8      	bne.n	34027f9a <lite_upsample_zeros_ix16ox16_kernel+0x8e>
34027fe8:	f8dd 8004 	ldr.w	r8, [sp, #4]
34027fec:	9a02      	ldr	r2, [sp, #8]
34027fee:	4542      	cmp	r2, r8
34027ff0:	d12f      	bne.n	34028052 <lite_upsample_zeros_ix16ox16_kernel+0x146>
34027ff2:	9a04      	ldr	r2, [sp, #16]
34027ff4:	9911      	ldr	r1, [sp, #68]	@ 0x44
34027ff6:	428a      	cmp	r2, r1
34027ff8:	d92b      	bls.n	34028052 <lite_upsample_zeros_ix16ox16_kernel+0x146>
34027ffa:	9a03      	ldr	r2, [sp, #12]
34027ffc:	f108 0801 	add.w	r8, r8, #1
34028000:	4542      	cmp	r2, r8
34028002:	d1bf      	bne.n	34027f84 <lite_upsample_zeros_ix16ox16_kernel+0x78>
34028004:	b007      	add	sp, #28
34028006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402800a:	45f3      	cmp	fp, lr
3402800c:	eb03 034c 	add.w	r3, r3, ip, lsl #1
34028010:	eb00 004c 	add.w	r0, r0, ip, lsl #1
34028014:	d0e0      	beq.n	34027fd8 <lite_upsample_zeros_ix16ox16_kernel+0xcc>
34028016:	2f00      	cmp	r7, #0
34028018:	dde2      	ble.n	34027fe0 <lite_upsample_zeros_ix16ox16_kernel+0xd4>
3402801a:	4639      	mov	r1, r7
3402801c:	08fd      	lsrs	r5, r7, #3
3402801e:	3501      	adds	r5, #1
34028020:	f007 0807 	and.w	r8, r7, #7
34028024:	f011 e801 	bfcsel	0, 3402702a <_lite_resize_init+0x282>, 2, mi
34028028:	eefd 2a10 	vmrs	r2, <impl def 0xd>
3402802c:	b292      	uxth	r2, r2
3402802e:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34028032:	3d01      	subs	r5, #1
34028034:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34028038:	ed83 5e80 	stc	14, cr5, [r3, #512]	@ 0x200
3402803c:	f1a1 0108 	sub.w	r1, r1, #8
34028040:	d004      	beq.n	3402804c <lite_upsample_zeros_ix16ox16_kernel+0x140>
34028042:	42b1      	cmp	r1, r6
34028044:	f103 0310 	add.w	r3, r3, #16
34028048:	d1ec      	bne.n	34028024 <lite_upsample_zeros_ix16ox16_kernel+0x118>
3402804a:	e7c9      	b.n	34027fe0 <lite_upsample_zeros_ix16ox16_kernel+0xd4>
3402804c:	eb03 0348 	add.w	r3, r3, r8, lsl #1
34028050:	e7c6      	b.n	34027fe0 <lite_upsample_zeros_ix16ox16_kernel+0xd4>
34028052:	9d05      	ldr	r5, [sp, #20]
34028054:	2d00      	cmp	r5, #0
34028056:	ddd0      	ble.n	34027ffa <lite_upsample_zeros_ix16ox16_kernel+0xee>
34028058:	4629      	mov	r1, r5
3402805a:	1e6a      	subs	r2, r5, #1
3402805c:	f1a5 0c08 	sub.w	ip, r5, #8
34028060:	f022 0207 	bic.w	r2, r2, #7
34028064:	08ed      	lsrs	r5, r5, #3
34028066:	ebac 0c02 	sub.w	ip, ip, r2
3402806a:	3501      	adds	r5, #1
3402806c:	f001 0e07 	and.w	lr, r1, #7
34028070:	f011 e801 	bfcsel	0, 34027076 <_lite_resize_init+0x2ce>, 2, mi
34028074:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34028078:	b292      	uxth	r2, r2
3402807a:	eeed 2a10 	vmsr	<impl def 0xd>, r2
3402807e:	3d01      	subs	r5, #1
34028080:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34028084:	ed83 5e80 	stc	14, cr5, [r3, #512]	@ 0x200
34028088:	f1a1 0108 	sub.w	r1, r1, #8
3402808c:	d004      	beq.n	34028098 <lite_upsample_zeros_ix16ox16_kernel+0x18c>
3402808e:	4561      	cmp	r1, ip
34028090:	f103 0310 	add.w	r3, r3, #16
34028094:	d1ec      	bne.n	34028070 <lite_upsample_zeros_ix16ox16_kernel+0x164>
34028096:	e7b0      	b.n	34027ffa <lite_upsample_zeros_ix16ox16_kernel+0xee>
34028098:	eb03 034e 	add.w	r3, r3, lr, lsl #1
3402809c:	e7ad      	b.n	34027ffa <lite_upsample_zeros_ix16ox16_kernel+0xee>
3402809e:	bf00      	nop

340280a0 <lite_upsample_zeros_if32of32_kernel>:
340280a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
340280a4:	ee30 0a67 	vsub.f32	s0, s0, s15
340280a8:	ee70 0ae7 	vsub.f32	s1, s1, s15
340280ac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
340280b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340280b4:	ee17 7a90 	vmov	r7, s15
340280b8:	eefc 7ae0 	vcvt.u32.f32	s15, s1
340280bc:	4692      	mov	sl, r2
340280be:	461d      	mov	r5, r3
340280c0:	ee17 2a90 	vmov	r2, s15
340280c4:	b087      	sub	sp, #28
340280c6:	9303      	str	r3, [sp, #12]
340280c8:	460b      	mov	r3, r1
340280ca:	fb07 a10a 	mla	r1, r7, sl, sl
340280ce:	9100      	str	r1, [sp, #0]
340280d0:	fb02 5105 	mla	r1, r2, r5, r5
340280d4:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
340280d8:	9104      	str	r1, [sp, #16]
340280da:	2d00      	cmp	r5, #0
340280dc:	d05a      	beq.n	34028194 <lite_upsample_zeros_if32of32_kernel+0xf4>
340280de:	2400      	movs	r4, #0
340280e0:	f04f 0800 	mov.w	r8, #0
340280e4:	9910      	ldr	r1, [sp, #64]	@ 0x40
340280e6:	fb09 f707 	mul.w	r7, r9, r7
340280ea:	fb09 f101 	mul.w	r1, r9, r1
340280ee:	fb02 f201 	mul.w	r2, r2, r1
340280f2:	9205      	str	r2, [sp, #20]
340280f4:	1e7a      	subs	r2, r7, #1
340280f6:	f022 0203 	bic.w	r2, r2, #3
340280fa:	f109 31ff 	add.w	r1, r9, #4294967295
340280fe:	1f3e      	subs	r6, r7, #4
34028100:	eea4 4b10 	vdup.32	q2, r4
34028104:	f021 0103 	bic.w	r1, r1, #3
34028108:	f1a9 0404 	sub.w	r4, r9, #4
3402810c:	1ab6      	subs	r6, r6, r2
3402810e:	1e6a      	subs	r2, r5, #1
34028110:	1a64      	subs	r4, r4, r1
34028112:	9202      	str	r2, [sp, #8]
34028114:	f1ba 0f00 	cmp.w	sl, #0
34028118:	d030      	beq.n	3402817c <lite_upsample_zeros_if32of32_kernel+0xdc>
3402811a:	f04f 0e00 	mov.w	lr, #0
3402811e:	f10a 3bff 	add.w	fp, sl, #4294967295
34028122:	f009 0c03 	and.w	ip, r9, #3
34028126:	f8cd 8004 	str.w	r8, [sp, #4]
3402812a:	f1b9 0f00 	cmp.w	r9, #0
3402812e:	dd19      	ble.n	34028164 <lite_upsample_zeros_if32of32_kernel+0xc4>
34028130:	4649      	mov	r1, r9
34028132:	f021 e801 	bfcsel	0, 34027138 <forward_lite_resize_bilinear_is8os8+0x78>, 2, hi
34028136:	eefd 2a10 	vmrs	r2, <impl def 0xd>
3402813a:	b212      	sxth	r2, r2
3402813c:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34028140:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34028144:	ed90 7f00 	ldc	15, cr7, [r0]
34028148:	458c      	cmp	ip, r1
3402814a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3402814e:	ed83 7f00 	stc	15, cr7, [r3]
34028152:	f1a1 0104 	sub.w	r1, r1, #4
34028156:	d020      	beq.n	3402819a <lite_upsample_zeros_if32of32_kernel+0xfa>
34028158:	42a1      	cmp	r1, r4
3402815a:	f103 0310 	add.w	r3, r3, #16
3402815e:	f100 0010 	add.w	r0, r0, #16
34028162:	d1e6      	bne.n	34028132 <lite_upsample_zeros_if32of32_kernel+0x92>
34028164:	45f3      	cmp	fp, lr
34028166:	d11e      	bne.n	340281a6 <lite_upsample_zeros_if32of32_kernel+0x106>
34028168:	9a00      	ldr	r2, [sp, #0]
3402816a:	9910      	ldr	r1, [sp, #64]	@ 0x40
3402816c:	428a      	cmp	r2, r1
3402816e:	d91a      	bls.n	340281a6 <lite_upsample_zeros_if32of32_kernel+0x106>
34028170:	f10e 0e01 	add.w	lr, lr, #1
34028174:	45f2      	cmp	sl, lr
34028176:	d1d8      	bne.n	3402812a <lite_upsample_zeros_if32of32_kernel+0x8a>
34028178:	f8dd 8004 	ldr.w	r8, [sp, #4]
3402817c:	9a02      	ldr	r2, [sp, #8]
3402817e:	4542      	cmp	r2, r8
34028180:	d12f      	bne.n	340281e2 <lite_upsample_zeros_if32of32_kernel+0x142>
34028182:	9a04      	ldr	r2, [sp, #16]
34028184:	9911      	ldr	r1, [sp, #68]	@ 0x44
34028186:	428a      	cmp	r2, r1
34028188:	d92b      	bls.n	340281e2 <lite_upsample_zeros_if32of32_kernel+0x142>
3402818a:	9a03      	ldr	r2, [sp, #12]
3402818c:	f108 0801 	add.w	r8, r8, #1
34028190:	4542      	cmp	r2, r8
34028192:	d1bf      	bne.n	34028114 <lite_upsample_zeros_if32of32_kernel+0x74>
34028194:	b007      	add	sp, #28
34028196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402819a:	45f3      	cmp	fp, lr
3402819c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
340281a0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
340281a4:	d0e0      	beq.n	34028168 <lite_upsample_zeros_if32of32_kernel+0xc8>
340281a6:	2f00      	cmp	r7, #0
340281a8:	dde2      	ble.n	34028170 <lite_upsample_zeros_if32of32_kernel+0xd0>
340281aa:	4639      	mov	r1, r7
340281ac:	08bd      	lsrs	r5, r7, #2
340281ae:	3501      	adds	r5, #1
340281b0:	f007 0803 	and.w	r8, r7, #3
340281b4:	f021 e801 	bfcsel	0, 340271ba <forward_lite_resize_bilinear_is8os8+0xfa>, 2, hi
340281b8:	eefd 2a10 	vmrs	r2, <impl def 0xd>
340281bc:	b292      	uxth	r2, r2
340281be:	eeed 2a10 	vmsr	<impl def 0xd>, r2
340281c2:	3d01      	subs	r5, #1
340281c4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340281c8:	ed83 5f00 	stc	15, cr5, [r3]
340281cc:	f1a1 0104 	sub.w	r1, r1, #4
340281d0:	d004      	beq.n	340281dc <lite_upsample_zeros_if32of32_kernel+0x13c>
340281d2:	42b1      	cmp	r1, r6
340281d4:	f103 0310 	add.w	r3, r3, #16
340281d8:	d1ec      	bne.n	340281b4 <lite_upsample_zeros_if32of32_kernel+0x114>
340281da:	e7c9      	b.n	34028170 <lite_upsample_zeros_if32of32_kernel+0xd0>
340281dc:	eb03 0388 	add.w	r3, r3, r8, lsl #2
340281e0:	e7c6      	b.n	34028170 <lite_upsample_zeros_if32of32_kernel+0xd0>
340281e2:	9d05      	ldr	r5, [sp, #20]
340281e4:	2d00      	cmp	r5, #0
340281e6:	ddd0      	ble.n	3402818a <lite_upsample_zeros_if32of32_kernel+0xea>
340281e8:	4629      	mov	r1, r5
340281ea:	1e6a      	subs	r2, r5, #1
340281ec:	f1a5 0c04 	sub.w	ip, r5, #4
340281f0:	f022 0203 	bic.w	r2, r2, #3
340281f4:	08ad      	lsrs	r5, r5, #2
340281f6:	ebac 0c02 	sub.w	ip, ip, r2
340281fa:	3501      	adds	r5, #1
340281fc:	f001 0e03 	and.w	lr, r1, #3
34028200:	f021 e801 	bfcsel	0, 34027206 <forward_lite_resize_bilinear_is8os8+0x146>, 2, hi
34028204:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34028208:	b292      	uxth	r2, r2
3402820a:	eeed 2a10 	vmsr	<impl def 0xd>, r2
3402820e:	3d01      	subs	r5, #1
34028210:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34028214:	ed83 5f00 	stc	15, cr5, [r3]
34028218:	f1a1 0104 	sub.w	r1, r1, #4
3402821c:	d004      	beq.n	34028228 <lite_upsample_zeros_if32of32_kernel+0x188>
3402821e:	4561      	cmp	r1, ip
34028220:	f103 0310 	add.w	r3, r3, #16
34028224:	d1ec      	bne.n	34028200 <lite_upsample_zeros_if32of32_kernel+0x160>
34028226:	e7b0      	b.n	3402818a <lite_upsample_zeros_if32of32_kernel+0xea>
34028228:	eb03 038e 	add.w	r3, r3, lr, lsl #2
3402822c:	e7ad      	b.n	3402818a <lite_upsample_zeros_if32of32_kernel+0xea>
3402822e:	bf00      	nop

34028230 <lite_bilinear_is8os8_kernel>:
34028230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34028234:	ed2d 8b10 	vpush	{d8-d15}
34028238:	2a00      	cmp	r2, #0
3402823a:	b085      	sub	sp, #20
3402823c:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
3402823e:	f340 8084 	ble.w	3402834a <lite_bilinear_is8os8_kernel+0x11a>
34028242:	eb01 0902 	add.w	r9, r1, r2
34028246:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
3402824a:	eeae 1b10 	vdup.32	q7, r1
3402824e:	217f      	movs	r1, #127	@ 0x7f
34028250:	eea6 1b10 	vdup.32	q3, r1
34028254:	4669      	mov	r1, sp
34028256:	f102 3eff 	add.w	lr, r2, #4294967295
3402825a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
3402825e:	f10e 0e01 	add.w	lr, lr, #1
34028262:	f04e e001 	dls	lr, lr
34028266:	ed81 7f00 	stc	15, cr7, [r1]
3402826a:	eb00 0802 	add.w	r8, r0, r2
3402826e:	f022 e801 	bfcsel	0, 34028274 <lite_bilinear_is8os8_kernel+0x44>, 4, hi
34028272:	eefd 1a10 	vmrs	r1, <impl def 0xd>
34028276:	b209      	sxth	r1, r1
34028278:	eeed 1a10 	vmsr	<impl def 0xd>, r1
3402827c:	681c      	ldr	r4, [r3, #0]
3402827e:	eba8 0602 	sub.w	r6, r8, r2
34028282:	6858      	ldr	r0, [r3, #4]
34028284:	eb06 0a04 	add.w	sl, r6, r4
34028288:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3402828c:	ed96 af00 	ldc	15, cr10, [r6]
34028290:	1837      	adds	r7, r6, r0
34028292:	ef24 c154 	vorr	q6, q2, q2
34028296:	4656      	mov	r6, sl
34028298:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3402829c:	ffbb c64a 	vcvt.f32.s32	q6, q5
340282a0:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340282a4:	ed96 8f00 	ldc	15, cr8, [r6]
340282a8:	ef24 a154 	vorr	q5, q2, q2
340282ac:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340282b0:	ed97 0f00 	ldc	15, cr0, [r7]
340282b4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340282b8:	ffbb a648 	vcvt.f32.s32	q5, q4
340282bc:	ef24 8154 	vorr	q4, q2, q2
340282c0:	443c      	add	r4, r7
340282c2:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340282c6:	ed94 6f00 	ldc	15, cr6, [r4]
340282ca:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340282ce:	ffbb 8640 	vcvt.f32.s32	q4, q0
340282d2:	ef24 0154 	vorr	q0, q2, q2
340282d6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340282da:	ffbb 0646 	vcvt.f32.s32	q0, q3
340282de:	ef24 6154 	vorr	q3, q2, q2
340282e2:	f8d5 c000 	ldr.w	ip, [r5]
340282e6:	f8d5 b004 	ldr.w	fp, [r5, #4]
340282ea:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340282ee:	ee3d 6e6c 	cdp	14, 3, cr6, cr13, cr12, {3}
340282f2:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340282f6:	ee3b 6e4b 	cdp	14, 3, cr6, cr11, cr11, {2}
340282fa:	68ac      	ldr	r4, [r5, #8]
340282fc:	eba9 0002 	sub.w	r0, r9, r2
34028300:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34028304:	ee39 6e44 	cdp	14, 3, cr6, cr9, cr4, {2}
34028308:	68ec      	ldr	r4, [r5, #12]
3402830a:	ef22 8152 	vorr	q4, q1, q1
3402830e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34028312:	ee31 6e44 	cdp	14, 3, cr6, cr1, cr4, {2}
34028316:	ef22 0152 	vorr	q0, q1, q1
3402831a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3402831e:	ffbb 8046 	vcvta.s32.f32	q4, q3
34028322:	466c      	mov	r4, sp
34028324:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34028328:	ef28 064e 	vmax.s32	q0, q4, q7
3402832c:	ef22 6152 	vorr	q3, q1, q1
34028330:	ed94 9f00 	ldc	15, cr9, [r4]
34028334:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34028338:	ef20 6658 	vmin.s32	q3, q0, q4
3402833c:	3a04      	subs	r2, #4
3402833e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34028342:	ed80 6f00 	stc	15, cr6, [r0]
34028346:	f00f c06f 	le	lr, 3402826e <lite_bilinear_is8os8_kernel+0x3e>
3402834a:	b005      	add	sp, #20
3402834c:	ecbd 8b10 	vpop	{d8-d15}
34028350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

34028354 <cl_submit_>:
34028354:	b570      	push	{r4, r5, r6, lr}
34028356:	b084      	sub	sp, #16
34028358:	2800      	cmp	r0, #0
3402835a:	f000 80b8 	beq.w	340284ce <cl_submit_+0x17a>
3402835e:	e9d0 1305 	ldrd	r1, r3, [r0, #20]
34028362:	069a      	lsls	r2, r3, #26
34028364:	4605      	mov	r5, r0
34028366:	d431      	bmi.n	340283cc <cl_submit_+0x78>
34028368:	2900      	cmp	r1, #0
3402836a:	f000 80ac 	beq.w	340284c6 <cl_submit_+0x172>
3402836e:	4604      	mov	r4, r0
34028370:	f06f 4640 	mvn.w	r6, #3221225472	@ 0xc0000000
34028374:	0758      	lsls	r0, r3, #29
34028376:	68a1      	ldr	r1, [r4, #8]
34028378:	6a22      	ldr	r2, [r4, #32]
3402837a:	d560      	bpl.n	3402843e <cl_submit_+0xea>
3402837c:	b12a      	cbz	r2, 3402838a <cl_submit_+0x36>
3402837e:	6923      	ldr	r3, [r4, #16]
34028380:	6952      	ldr	r2, [r2, #20]
34028382:	4433      	add	r3, r6
34028384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
34028388:	69a3      	ldr	r3, [r4, #24]
3402838a:	f023 0208 	bic.w	r2, r3, #8
3402838e:	069b      	lsls	r3, r3, #26
34028390:	61a2      	str	r2, [r4, #24]
34028392:	f140 809a 	bpl.w	340284ca <cl_submit_+0x176>
34028396:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	@ 0x2c
3402839a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
3402839e:	009b      	lsls	r3, r3, #2
340283a0:	fb02 f303 	mul.w	r3, r2, r3
340283a4:	4419      	add	r1, r3
340283a6:	4403      	add	r3, r0
340283a8:	4668      	mov	r0, sp
340283aa:	e9cd 1302 	strd	r1, r3, [sp, #8]
340283ae:	0092      	lsls	r2, r2, #2
340283b0:	9200      	str	r2, [sp, #0]
340283b2:	6863      	ldr	r3, [r4, #4]
340283b4:	9301      	str	r3, [sp, #4]
340283b6:	f7f7 fabf 	bl	3401f938 <nema_buffer_flush>
340283ba:	69a3      	ldr	r3, [r4, #24]
340283bc:	f043 0308 	orr.w	r3, r3, #8
340283c0:	61a3      	str	r3, [r4, #24]
340283c2:	6a24      	ldr	r4, [r4, #32]
340283c4:	2c00      	cmp	r4, #0
340283c6:	d053      	beq.n	34028470 <cl_submit_+0x11c>
340283c8:	69a3      	ldr	r3, [r4, #24]
340283ca:	e7d3      	b.n	34028374 <cl_submit_+0x20>
340283cc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
340283ce:	fb91 f4f2 	sdiv	r4, r1, r2
340283d2:	fb02 1414 	mls	r4, r2, r4, r1
340283d6:	2c00      	cmp	r4, #0
340283d8:	d075      	beq.n	340284c6 <cl_submit_+0x172>
340283da:	6b01      	ldr	r1, [r0, #48]	@ 0x30
340283dc:	68c0      	ldr	r0, [r0, #12]
340283de:	0089      	lsls	r1, r1, #2
340283e0:	fb02 f101 	mul.w	r1, r2, r1
340283e4:	071b      	lsls	r3, r3, #28
340283e6:	eb00 0601 	add.w	r6, r0, r1
340283ea:	d40e      	bmi.n	3402840a <cl_submit_+0xb6>
340283ec:	68ab      	ldr	r3, [r5, #8]
340283ee:	0092      	lsls	r2, r2, #2
340283f0:	4419      	add	r1, r3
340283f2:	686b      	ldr	r3, [r5, #4]
340283f4:	4668      	mov	r0, sp
340283f6:	9301      	str	r3, [sp, #4]
340283f8:	9200      	str	r2, [sp, #0]
340283fa:	e9cd 1602 	strd	r1, r6, [sp, #8]
340283fe:	f7f7 fa9b 	bl	3401f938 <nema_buffer_flush>
34028402:	69ab      	ldr	r3, [r5, #24]
34028404:	f043 0308 	orr.w	r3, r3, #8
34028408:	61ab      	str	r3, [r5, #24]
3402840a:	f44f 70a4 	mov.w	r0, #328	@ 0x148
3402840e:	f7f7 f96d 	bl	3401f6ec <nema_reg_read>
34028412:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
34028414:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
34028416:	1a1b      	subs	r3, r3, r0
34028418:	3a01      	subs	r2, #1
3402841a:	429a      	cmp	r2, r3
3402841c:	63a8      	str	r0, [r5, #56]	@ 0x38
3402841e:	dd6c      	ble.n	340284fa <cl_submit_+0x1a6>
34028420:	4621      	mov	r1, r4
34028422:	4630      	mov	r0, r6
34028424:	f000 fc40 	bl	34028ca8 <nema_rb_submit_cmdlist2>
34028428:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
3402842a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
3402842c:	3301      	adds	r3, #1
3402842e:	4293      	cmp	r3, r2
34028430:	e9c5 300c 	strd	r3, r0, [r5, #48]	@ 0x30
34028434:	d356      	bcc.n	340284e4 <cl_submit_+0x190>
34028436:	2300      	movs	r3, #0
34028438:	616b      	str	r3, [r5, #20]
3402843a:	632b      	str	r3, [r5, #48]	@ 0x30
3402843c:	e01d      	b.n	3402847a <cl_submit_+0x126>
3402843e:	071e      	lsls	r6, r3, #28
34028440:	d416      	bmi.n	34028470 <cl_submit_+0x11c>
34028442:	0698      	lsls	r0, r3, #26
34028444:	d55d      	bpl.n	34028502 <cl_submit_+0x1ae>
34028446:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	@ 0x2c
3402844a:	009b      	lsls	r3, r3, #2
3402844c:	fb02 f303 	mul.w	r3, r2, r3
34028450:	68e0      	ldr	r0, [r4, #12]
34028452:	4419      	add	r1, r3
34028454:	4403      	add	r3, r0
34028456:	e9cd 1302 	strd	r1, r3, [sp, #8]
3402845a:	0092      	lsls	r2, r2, #2
3402845c:	9200      	str	r2, [sp, #0]
3402845e:	6863      	ldr	r3, [r4, #4]
34028460:	4668      	mov	r0, sp
34028462:	9301      	str	r3, [sp, #4]
34028464:	f7f7 fa68 	bl	3401f938 <nema_buffer_flush>
34028468:	69a3      	ldr	r3, [r4, #24]
3402846a:	f043 0308 	orr.w	r3, r3, #8
3402846e:	61a3      	str	r3, [r4, #24]
34028470:	6969      	ldr	r1, [r5, #20]
34028472:	4628      	mov	r0, r5
34028474:	f000 fc9c 	bl	34028db0 <nema_rb_submit_cmdlist>
34028478:	61e8      	str	r0, [r5, #28]
3402847a:	69ab      	ldr	r3, [r5, #24]
3402847c:	069a      	lsls	r2, r3, #26
3402847e:	d52c      	bpl.n	340284da <cl_submit_+0x186>
34028480:	4b22      	ldr	r3, [pc, #136]	@ (3402850c <cl_submit_+0x1b8>)
34028482:	6b68      	ldr	r0, [r5, #52]	@ 0x34
34028484:	681b      	ldr	r3, [r3, #0]
34028486:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
3402848a:	2b01      	cmp	r3, #1
3402848c:	d00c      	beq.n	340284a8 <cl_submit_+0x154>
3402848e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
34028490:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
34028492:	088b      	lsrs	r3, r1, #2
34028494:	429a      	cmp	r2, r3
34028496:	d007      	beq.n	340284a8 <cl_submit_+0x154>
34028498:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
3402849c:	d004      	beq.n	340284a8 <cl_submit_+0x154>
3402849e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
340284a2:	429a      	cmp	r2, r3
340284a4:	d000      	beq.n	340284a8 <cl_submit_+0x154>
340284a6:	bb12      	cbnz	r2, 340284ee <cl_submit_+0x19a>
340284a8:	f000 fd4e 	bl	34028f48 <nema_rb_submit_cl_id>
340284ac:	6b68      	ldr	r0, [r5, #52]	@ 0x34
340284ae:	61e8      	str	r0, [r5, #28]
340284b0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
340284b4:	4298      	cmp	r0, r3
340284b6:	d106      	bne.n	340284c6 <cl_submit_+0x172>
340284b8:	f7f7 f90a 	bl	3401f6d0 <nema_wait_irq_cl>
340284bc:	2800      	cmp	r0, #0
340284be:	db02      	blt.n	340284c6 <cl_submit_+0x172>
340284c0:	f04f 33ff 	mov.w	r3, #4294967295
340284c4:	61eb      	str	r3, [r5, #28]
340284c6:	b004      	add	sp, #16
340284c8:	bd70      	pop	{r4, r5, r6, pc}
340284ca:	4620      	mov	r0, r4
340284cc:	e773      	b.n	340283b6 <cl_submit_+0x62>
340284ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
340284d2:	f001 f9a5 	bl	34029820 <nema_set_error>
340284d6:	b004      	add	sp, #16
340284d8:	bd70      	pop	{r4, r5, r6, pc}
340284da:	69e8      	ldr	r0, [r5, #28]
340284dc:	f000 fd34 	bl	34028f48 <nema_rb_submit_cl_id>
340284e0:	69e8      	ldr	r0, [r5, #28]
340284e2:	e7e5      	b.n	340284b0 <cl_submit_+0x15c>
340284e4:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
340284e6:	fb03 f302 	mul.w	r3, r3, r2
340284ea:	616b      	str	r3, [r5, #20]
340284ec:	e7c5      	b.n	3402847a <cl_submit_+0x126>
340284ee:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
340284f2:	4298      	cmp	r0, r3
340284f4:	d0d8      	beq.n	340284a8 <cl_submit_+0x154>
340284f6:	69e8      	ldr	r0, [r5, #28]
340284f8:	e7da      	b.n	340284b0 <cl_submit_+0x15c>
340284fa:	3001      	adds	r0, #1
340284fc:	f7f7 f8e8 	bl	3401f6d0 <nema_wait_irq_cl>
34028500:	e78e      	b.n	34028420 <cl_submit_+0xcc>
34028502:	4620      	mov	r0, r4
34028504:	f7f7 fa18 	bl	3401f938 <nema_buffer_flush>
34028508:	e7ae      	b.n	34028468 <cl_submit_+0x114>
3402850a:	bf00      	nop
3402850c:	340e5f18 	.word	0x340e5f18

34028510 <nema_cl_create_sized>:
34028510:	b5f0      	push	{r4, r5, r6, r7, lr}
34028512:	b099      	sub	sp, #100	@ 0x64
34028514:	466d      	mov	r5, sp
34028516:	4607      	mov	r7, r0
34028518:	ac05      	add	r4, sp, #20
3402851a:	460a      	mov	r2, r1
3402851c:	4628      	mov	r0, r5
3402851e:	2100      	movs	r1, #0
34028520:	f7f7 f9e8 	bl	3401f8f4 <nema_buffer_create_pool>
34028524:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
34028528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
3402852c:	4620      	mov	r0, r4
3402852e:	f7f7 f8eb 	bl	3401f708 <nema_buffer_map>
34028532:	2220      	movs	r2, #32
34028534:	2100      	movs	r1, #0
34028536:	a80e      	add	r0, sp, #56	@ 0x38
34028538:	f7f9 f8ec 	bl	34021714 <memset>
3402853c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
34028540:	ac09      	add	r4, sp, #36	@ 0x24
34028542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
34028546:	f04f 33ff 	mov.w	r3, #4294967295
3402854a:	2210      	movs	r2, #16
3402854c:	463d      	mov	r5, r7
3402854e:	9e05      	ldr	r6, [sp, #20]
34028550:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
34028554:	2e00      	cmp	r6, #0
34028556:	bfb8      	it	lt
34028558:	3607      	addlt	r6, #7
3402855a:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
3402855e:	10f6      	asrs	r6, r6, #3
34028560:	0076      	lsls	r6, r6, #1
34028562:	960d      	str	r6, [sp, #52]	@ 0x34
34028564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34028566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34028568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3402856a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
3402856c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3402856e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34028570:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
34028574:	f04f 0c00 	mov.w	ip, #0
34028578:	e885 0007 	stmia.w	r5, {r0, r1, r2}
3402857c:	4638      	mov	r0, r7
3402857e:	f8c7 c018 	str.w	ip, [r7, #24]
34028582:	b019      	add	sp, #100	@ 0x64
34028584:	bdf0      	pop	{r4, r5, r6, r7, pc}
34028586:	bf00      	nop

34028588 <nema_extend_bound_cl>:
34028588:	b5f0      	push	{r4, r5, r6, r7, lr}
3402858a:	4d8a      	ldr	r5, [pc, #552]	@ (340287b4 <nema_extend_bound_cl+0x22c>)
3402858c:	b0af      	sub	sp, #188	@ 0xbc
3402858e:	6829      	ldr	r1, [r5, #0]
34028590:	684a      	ldr	r2, [r1, #4]
34028592:	2a00      	cmp	r2, #0
34028594:	f000 80f9 	beq.w	3402878a <nema_extend_bound_cl+0x202>
34028598:	4606      	mov	r6, r0
3402859a:	6990      	ldr	r0, [r2, #24]
3402859c:	0787      	lsls	r7, r0, #30
3402859e:	f140 80e8 	bpl.w	34028772 <nema_extend_bound_cl+0x1ea>
340285a2:	0684      	lsls	r4, r0, #26
340285a4:	6953      	ldr	r3, [r2, #20]
340285a6:	d479      	bmi.n	3402869c <nema_extend_bound_cl+0x114>
340285a8:	6914      	ldr	r4, [r2, #16]
340285aa:	1ae4      	subs	r4, r4, r3
340285ac:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
340285b0:	1064      	asrs	r4, r4, #1
340285b2:	2c02      	cmp	r4, #2
340285b4:	dd7d      	ble.n	340286b2 <nema_extend_bound_cl+0x12a>
340285b6:	2000      	movs	r0, #0
340285b8:	f44f 3e80 	mov.w	lr, #65536	@ 0x10000
340285bc:	4684      	mov	ip, r0
340285be:	3c02      	subs	r4, #2
340285c0:	e000      	b.n	340285c4 <nema_extend_bound_cl+0x3c>
340285c2:	6953      	ldr	r3, [r2, #20]
340285c4:	6892      	ldr	r2, [r2, #8]
340285c6:	1c9f      	adds	r7, r3, #2
340285c8:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
340285cc:	682a      	ldr	r2, [r5, #0]
340285ce:	3001      	adds	r0, #1
340285d0:	6852      	ldr	r2, [r2, #4]
340285d2:	42a0      	cmp	r0, r4
340285d4:	6892      	ldr	r2, [r2, #8]
340285d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
340285da:	f8c3 c004 	str.w	ip, [r3, #4]
340285de:	6829      	ldr	r1, [r5, #0]
340285e0:	684b      	ldr	r3, [r1, #4]
340285e2:	615f      	str	r7, [r3, #20]
340285e4:	684a      	ldr	r2, [r1, #4]
340285e6:	d1ec      	bne.n	340285c2 <nema_extend_bound_cl+0x3a>
340285e8:	6a14      	ldr	r4, [r2, #32]
340285ea:	2c00      	cmp	r4, #0
340285ec:	d064      	beq.n	340286b8 <nema_extend_bound_cl+0x130>
340285ee:	6990      	ldr	r0, [r2, #24]
340285f0:	f040 0004 	orr.w	r0, r0, #4
340285f4:	6190      	str	r0, [r2, #24]
340285f6:	26f0      	movs	r6, #240	@ 0xf0
340285f8:	20f4      	movs	r0, #244	@ 0xf4
340285fa:	684a      	ldr	r2, [r1, #4]
340285fc:	6953      	ldr	r3, [r2, #20]
340285fe:	6892      	ldr	r2, [r2, #8]
34028600:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
34028604:	682a      	ldr	r2, [r5, #0]
34028606:	68e1      	ldr	r1, [r4, #12]
34028608:	6852      	ldr	r2, [r2, #4]
3402860a:	6892      	ldr	r2, [r2, #8]
3402860c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
34028610:	6051      	str	r1, [r2, #4]
34028612:	682a      	ldr	r2, [r5, #0]
34028614:	3302      	adds	r3, #2
34028616:	6851      	ldr	r1, [r2, #4]
34028618:	614b      	str	r3, [r1, #20]
3402861a:	6853      	ldr	r3, [r2, #4]
3402861c:	695a      	ldr	r2, [r3, #20]
3402861e:	689b      	ldr	r3, [r3, #8]
34028620:	1c91      	adds	r1, r2, #2
34028622:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
34028626:	682b      	ldr	r3, [r5, #0]
34028628:	6920      	ldr	r0, [r4, #16]
3402862a:	685b      	ldr	r3, [r3, #4]
3402862c:	689b      	ldr	r3, [r3, #8]
3402862e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
34028632:	6058      	str	r0, [r3, #4]
34028634:	682a      	ldr	r2, [r5, #0]
34028636:	6853      	ldr	r3, [r2, #4]
34028638:	6159      	str	r1, [r3, #20]
3402863a:	6853      	ldr	r3, [r2, #4]
3402863c:	621c      	str	r4, [r3, #32]
3402863e:	68e3      	ldr	r3, [r4, #12]
34028640:	f013 0307 	ands.w	r3, r3, #7
34028644:	d16b      	bne.n	3402871e <nema_extend_bound_cl+0x196>
34028646:	6851      	ldr	r1, [r2, #4]
34028648:	b309      	cbz	r1, 3402868e <nema_extend_bound_cl+0x106>
3402864a:	e9d1 6004 	ldrd	r6, r0, [r1, #16]
3402864e:	1c47      	adds	r7, r0, #1
34028650:	42b7      	cmp	r7, r6
34028652:	da12      	bge.n	3402867a <nema_extend_bound_cl+0xf2>
34028654:	f44f 26a0 	mov.w	r6, #327680	@ 0x50000
34028658:	688a      	ldr	r2, [r1, #8]
3402865a:	eb02 0180 	add.w	r1, r2, r0, lsl #2
3402865e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
34028662:	604b      	str	r3, [r1, #4]
34028664:	682a      	ldr	r2, [r5, #0]
34028666:	6853      	ldr	r3, [r2, #4]
34028668:	2b00      	cmp	r3, #0
3402866a:	f000 8088 	beq.w	3402877e <nema_extend_bound_cl+0x1f6>
3402866e:	6999      	ldr	r1, [r3, #24]
34028670:	f021 0108 	bic.w	r1, r1, #8
34028674:	6199      	str	r1, [r3, #24]
34028676:	6851      	ldr	r1, [r2, #4]
34028678:	b119      	cbz	r1, 34028682 <nema_extend_bound_cl+0xfa>
3402867a:	698b      	ldr	r3, [r1, #24]
3402867c:	f023 0320 	bic.w	r3, r3, #32
34028680:	618b      	str	r3, [r1, #24]
34028682:	2300      	movs	r3, #0
34028684:	6053      	str	r3, [r2, #4]
34028686:	69a3      	ldr	r3, [r4, #24]
34028688:	075b      	lsls	r3, r3, #29
3402868a:	d503      	bpl.n	34028694 <nema_extend_bound_cl+0x10c>
3402868c:	6a24      	ldr	r4, [r4, #32]
3402868e:	69a3      	ldr	r3, [r4, #24]
34028690:	075b      	lsls	r3, r3, #29
34028692:	d4fb      	bmi.n	3402868c <nema_extend_bound_cl+0x104>
34028694:	2000      	movs	r0, #0
34028696:	6054      	str	r4, [r2, #4]
34028698:	b02f      	add	sp, #188	@ 0xbc
3402869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
3402869c:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
3402869e:	fb93 f7f4 	sdiv	r7, r3, r4
340286a2:	fb04 3717 	mls	r7, r4, r7, r3
340286a6:	1be4      	subs	r4, r4, r7
340286a8:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
340286ac:	1064      	asrs	r4, r4, #1
340286ae:	2c02      	cmp	r4, #2
340286b0:	dc81      	bgt.n	340285b6 <nema_extend_bound_cl+0x2e>
340286b2:	6a14      	ldr	r4, [r2, #32]
340286b4:	2c00      	cmp	r4, #0
340286b6:	d19b      	bne.n	340285f0 <nema_extend_bound_cl+0x68>
340286b8:	203c      	movs	r0, #60	@ 0x3c
340286ba:	f7f7 f82b 	bl	3401f714 <nema_host_malloc>
340286be:	4604      	mov	r4, r0
340286c0:	2800      	cmp	r0, #0
340286c2:	d071      	beq.n	340287a8 <nema_extend_bound_cl+0x220>
340286c4:	1cb1      	adds	r1, r6, #2
340286c6:	00c9      	lsls	r1, r1, #3
340286c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
340286cc:	dd2e      	ble.n	3402872c <nema_extend_bound_cl+0x1a4>
340286ce:	466e      	mov	r6, sp
340286d0:	4627      	mov	r7, r4
340286d2:	4668      	mov	r0, sp
340286d4:	f7ff ff1c 	bl	34028510 <nema_cl_create_sized>
340286d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
340286da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
340286dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
340286de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
340286e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
340286e2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
340286e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
340286e8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
340286ec:	68a3      	ldr	r3, [r4, #8]
340286ee:	2b00      	cmp	r3, #0
340286f0:	d051      	beq.n	34028796 <nema_extend_bound_cl+0x20e>
340286f2:	6829      	ldr	r1, [r5, #0]
340286f4:	684a      	ldr	r2, [r1, #4]
340286f6:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340286f8:	2b00      	cmp	r3, #0
340286fa:	bf08      	it	eq
340286fc:	4613      	moveq	r3, r2
340286fe:	6263      	str	r3, [r4, #36]	@ 0x24
34028700:	684b      	ldr	r3, [r1, #4]
34028702:	699b      	ldr	r3, [r3, #24]
34028704:	f023 030c 	bic.w	r3, r3, #12
34028708:	61a3      	str	r3, [r4, #24]
3402870a:	684a      	ldr	r2, [r1, #4]
3402870c:	2a00      	cmp	r2, #0
3402870e:	f47f af6e 	bne.w	340285ee <nema_extend_bound_cl+0x66>
34028712:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34028716:	f001 f883 	bl	34029820 <nema_set_error>
3402871a:	6829      	ldr	r1, [r5, #0]
3402871c:	e76b      	b.n	340285f6 <nema_extend_bound_cl+0x6e>
3402871e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34028722:	f001 f87d 	bl	34029820 <nema_set_error>
34028726:	2000      	movs	r0, #0
34028728:	b02f      	add	sp, #188	@ 0xbc
3402872a:	bdf0      	pop	{r4, r5, r6, r7, pc}
3402872c:	a810      	add	r0, sp, #64	@ 0x40
3402872e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34028732:	f7ff feed 	bl	34028510 <nema_cl_create_sized>
34028736:	2302      	movs	r3, #2
34028738:	46a4      	mov	ip, r4
3402873a:	9316      	str	r3, [sp, #88]	@ 0x58
3402873c:	af10      	add	r7, sp, #64	@ 0x40
3402873e:	ae1f      	add	r6, sp, #124	@ 0x7c
34028740:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
34028742:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34028744:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
34028746:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34028748:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
3402874a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
3402874c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
34028750:	af1f      	add	r7, sp, #124	@ 0x7c
34028752:	e886 0007 	stmia.w	r6, {r0, r1, r2}
34028756:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
34028758:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
3402875c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
3402875e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
34028762:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
34028764:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
34028768:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
3402876c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
34028770:	e7bc      	b.n	340286ec <nema_extend_bound_cl+0x164>
34028772:	2008      	movs	r0, #8
34028774:	f001 f854 	bl	34029820 <nema_set_error>
34028778:	f04f 30ff 	mov.w	r0, #4294967295
3402877c:	e78c      	b.n	34028698 <nema_extend_bound_cl+0x110>
3402877e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34028782:	f001 f84d 	bl	34029820 <nema_set_error>
34028786:	682a      	ldr	r2, [r5, #0]
34028788:	e775      	b.n	34028676 <nema_extend_bound_cl+0xee>
3402878a:	2080      	movs	r0, #128	@ 0x80
3402878c:	f001 f848 	bl	34029820 <nema_set_error>
34028790:	f04f 30ff 	mov.w	r0, #4294967295
34028794:	e780      	b.n	34028698 <nema_extend_bound_cl+0x110>
34028796:	2010      	movs	r0, #16
34028798:	f001 f842 	bl	34029820 <nema_set_error>
3402879c:	4620      	mov	r0, r4
3402879e:	f7f6 ffb5 	bl	3401f70c <nema_host_free>
340287a2:	f04f 30ff 	mov.w	r0, #4294967295
340287a6:	e777      	b.n	34028698 <nema_extend_bound_cl+0x110>
340287a8:	2010      	movs	r0, #16
340287aa:	f001 f839 	bl	34029820 <nema_set_error>
340287ae:	f04f 30ff 	mov.w	r0, #4294967295
340287b2:	e771      	b.n	34028698 <nema_extend_bound_cl+0x110>
340287b4:	340e5f18 	.word	0x340e5f18

340287b8 <nema_cl_bind_circular>:
340287b8:	2800      	cmp	r0, #0
340287ba:	d045      	beq.n	34028848 <nema_cl_bind_circular+0x90>
340287bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340287be:	68c3      	ldr	r3, [r0, #12]
340287c0:	f013 0307 	ands.w	r3, r3, #7
340287c4:	d13a      	bne.n	3402883c <nema_cl_bind_circular+0x84>
340287c6:	4d25      	ldr	r5, [pc, #148]	@ (3402885c <nema_cl_bind_circular+0xa4>)
340287c8:	6a44      	ldr	r4, [r0, #36]	@ 0x24
340287ca:	6829      	ldr	r1, [r5, #0]
340287cc:	2c00      	cmp	r4, #0
340287ce:	bf08      	it	eq
340287d0:	4604      	moveq	r4, r0
340287d2:	684a      	ldr	r2, [r1, #4]
340287d4:	b1da      	cbz	r2, 3402880e <nema_cl_bind_circular+0x56>
340287d6:	e9d2 6004 	ldrd	r6, r0, [r2, #16]
340287da:	1c47      	adds	r7, r0, #1
340287dc:	42b7      	cmp	r7, r6
340287de:	da10      	bge.n	34028802 <nema_cl_bind_circular+0x4a>
340287e0:	f44f 26a0 	mov.w	r6, #327680	@ 0x50000
340287e4:	6892      	ldr	r2, [r2, #8]
340287e6:	eb02 0180 	add.w	r1, r2, r0, lsl #2
340287ea:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
340287ee:	604b      	str	r3, [r1, #4]
340287f0:	6829      	ldr	r1, [r5, #0]
340287f2:	684b      	ldr	r3, [r1, #4]
340287f4:	b363      	cbz	r3, 34028850 <nema_cl_bind_circular+0x98>
340287f6:	699a      	ldr	r2, [r3, #24]
340287f8:	f022 0208 	bic.w	r2, r2, #8
340287fc:	619a      	str	r2, [r3, #24]
340287fe:	684a      	ldr	r2, [r1, #4]
34028800:	b11a      	cbz	r2, 3402880a <nema_cl_bind_circular+0x52>
34028802:	6993      	ldr	r3, [r2, #24]
34028804:	f023 0320 	bic.w	r3, r3, #32
34028808:	6193      	str	r3, [r2, #24]
3402880a:	2300      	movs	r3, #0
3402880c:	604b      	str	r3, [r1, #4]
3402880e:	6923      	ldr	r3, [r4, #16]
34028810:	69a2      	ldr	r2, [r4, #24]
34028812:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
34028816:	105b      	asrs	r3, r3, #1
34028818:	f042 0220 	orr.w	r2, r2, #32
3402881c:	61a2      	str	r2, [r4, #24]
3402881e:	f04f 30ff 	mov.w	r0, #4294967295
34028822:	07da      	lsls	r2, r3, #31
34028824:	bf48      	it	mi
34028826:	f103 33ff 	addmi.w	r3, r3, #4294967295
3402882a:	62e3      	str	r3, [r4, #44]	@ 0x2c
3402882c:	2502      	movs	r5, #2
3402882e:	2300      	movs	r3, #0
34028830:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
34028834:	62a5      	str	r5, [r4, #40]	@ 0x28
34028836:	6323      	str	r3, [r4, #48]	@ 0x30
34028838:	604c      	str	r4, [r1, #4]
3402883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3402883c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34028840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
34028844:	f000 bfec 	b.w	34029820 <nema_set_error>
34028848:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3402884c:	f000 bfe8 	b.w	34029820 <nema_set_error>
34028850:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34028854:	f000 ffe4 	bl	34029820 <nema_set_error>
34028858:	6829      	ldr	r1, [r5, #0]
3402885a:	e7d0      	b.n	340287fe <nema_cl_bind_circular+0x46>
3402885c:	340e5f18 	.word	0x340e5f18

34028860 <nema_cl_add_cmd>:
34028860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34028862:	4d38      	ldr	r5, [pc, #224]	@ (34028944 <nema_cl_add_cmd+0xe4>)
34028864:	4606      	mov	r6, r0
34028866:	682a      	ldr	r2, [r5, #0]
34028868:	460f      	mov	r7, r1
3402886a:	6854      	ldr	r4, [r2, #4]
3402886c:	2c00      	cmp	r4, #0
3402886e:	d04d      	beq.n	3402890c <nema_cl_add_cmd+0xac>
34028870:	69a3      	ldr	r3, [r4, #24]
34028872:	f023 0308 	bic.w	r3, r3, #8
34028876:	61a3      	str	r3, [r4, #24]
34028878:	6850      	ldr	r0, [r2, #4]
3402887a:	b348      	cbz	r0, 340288d0 <nema_cl_add_cmd+0x70>
3402887c:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
34028880:	068c      	lsls	r4, r1, #26
34028882:	d40f      	bmi.n	340288a4 <nema_cl_add_cmd+0x44>
34028884:	078b      	lsls	r3, r1, #30
34028886:	d537      	bpl.n	340288f8 <nema_cl_add_cmd+0x98>
34028888:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
3402888c:	1d19      	adds	r1, r3, #4
3402888e:	4291      	cmp	r1, r2
34028890:	db10      	blt.n	340288b4 <nema_cl_add_cmd+0x54>
34028892:	2000      	movs	r0, #0
34028894:	f7ff fe78 	bl	34028588 <nema_extend_bound_cl>
34028898:	2800      	cmp	r0, #0
3402889a:	db18      	blt.n	340288ce <nema_cl_add_cmd+0x6e>
3402889c:	682b      	ldr	r3, [r5, #0]
3402889e:	6858      	ldr	r0, [r3, #4]
340288a0:	6943      	ldr	r3, [r0, #20]
340288a2:	e007      	b.n	340288b4 <nema_cl_add_cmd+0x54>
340288a4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
340288a6:	fb93 f1f4 	sdiv	r1, r3, r4
340288aa:	fb04 3111 	mls	r1, r4, r1, r3
340288ae:	1a64      	subs	r4, r4, r1
340288b0:	2c03      	cmp	r4, #3
340288b2:	dd3a      	ble.n	3402892a <nema_cl_add_cmd+0xca>
340288b4:	1c5a      	adds	r2, r3, #1
340288b6:	6880      	ldr	r0, [r0, #8]
340288b8:	1c99      	adds	r1, r3, #2
340288ba:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
340288be:	682b      	ldr	r3, [r5, #0]
340288c0:	685b      	ldr	r3, [r3, #4]
340288c2:	689b      	ldr	r3, [r3, #8]
340288c4:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
340288c8:	682b      	ldr	r3, [r5, #0]
340288ca:	685b      	ldr	r3, [r3, #4]
340288cc:	6159      	str	r1, [r3, #20]
340288ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
340288d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
340288d4:	f000 ffa4 	bl	34029820 <nema_set_error>
340288d8:	682a      	ldr	r2, [r5, #0]
340288da:	6850      	ldr	r0, [r2, #4]
340288dc:	bb10      	cbnz	r0, 34028924 <nema_cl_add_cmd+0xc4>
340288de:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
340288e2:	f000 ff9d 	bl	34029820 <nema_set_error>
340288e6:	682b      	ldr	r3, [r5, #0]
340288e8:	6858      	ldr	r0, [r3, #4]
340288ea:	bb40      	cbnz	r0, 3402893e <nema_cl_add_cmd+0xde>
340288ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
340288f0:	f000 ff96 	bl	34029820 <nema_set_error>
340288f4:	682b      	ldr	r3, [r5, #0]
340288f6:	6858      	ldr	r0, [r3, #4]
340288f8:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
340288fc:	1c5a      	adds	r2, r3, #1
340288fe:	428a      	cmp	r2, r1
34028900:	dbd9      	blt.n	340288b6 <nema_cl_add_cmd+0x56>
34028902:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
34028906:	2008      	movs	r0, #8
34028908:	f000 bf8a 	b.w	34029820 <nema_set_error>
3402890c:	4620      	mov	r0, r4
3402890e:	f7f6 ff15 	bl	3401f73c <nema_mutex_lock>
34028912:	4630      	mov	r0, r6
34028914:	4639      	mov	r1, r7
34028916:	f000 fa4f 	bl	34028db8 <nema_rb_inline_cmd>
3402891a:	4620      	mov	r0, r4
3402891c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
34028920:	f7f6 bf22 	b.w	3401f768 <nema_mutex_unlock>
34028924:	6981      	ldr	r1, [r0, #24]
34028926:	068c      	lsls	r4, r1, #26
34028928:	d5ac      	bpl.n	34028884 <nema_cl_add_cmd+0x24>
3402892a:	2300      	movs	r3, #0
3402892c:	f882 30f9 	strb.w	r3, [r2, #249]	@ 0xf9
34028930:	f7ff fd10 	bl	34028354 <cl_submit_>
34028934:	682b      	ldr	r3, [r5, #0]
34028936:	6858      	ldr	r0, [r3, #4]
34028938:	6943      	ldr	r3, [r0, #20]
3402893a:	1c5a      	adds	r2, r3, #1
3402893c:	e7bb      	b.n	340288b6 <nema_cl_add_cmd+0x56>
3402893e:	6981      	ldr	r1, [r0, #24]
34028940:	e7a0      	b.n	34028884 <nema_cl_add_cmd+0x24>
34028942:	bf00      	nop
34028944:	340e5f18 	.word	0x340e5f18

34028948 <nema_cl_get_space>:
34028948:	b570      	push	{r4, r5, r6, lr}
3402894a:	4e2d      	ldr	r6, [pc, #180]	@ (34028a00 <nema_cl_get_space+0xb8>)
3402894c:	6831      	ldr	r1, [r6, #0]
3402894e:	684c      	ldr	r4, [r1, #4]
34028950:	2c00      	cmp	r4, #0
34028952:	d036      	beq.n	340289c2 <nema_cl_get_space+0x7a>
34028954:	69a3      	ldr	r3, [r4, #24]
34028956:	4605      	mov	r5, r0
34028958:	f023 0308 	bic.w	r3, r3, #8
3402895c:	61a3      	str	r3, [r4, #24]
3402895e:	6848      	ldr	r0, [r1, #4]
34028960:	b3a0      	cbz	r0, 340289cc <nema_cl_get_space+0x84>
34028962:	e9d0 4305 	ldrd	r4, r3, [r0, #20]
34028966:	069a      	lsls	r2, r3, #26
34028968:	d411      	bmi.n	3402898e <nema_cl_get_space+0x46>
3402896a:	6903      	ldr	r3, [r0, #16]
3402896c:	1b1b      	subs	r3, r3, r4
3402896e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
34028972:	105b      	asrs	r3, r3, #1
34028974:	3b01      	subs	r3, #1
34028976:	429d      	cmp	r5, r3
34028978:	da1c      	bge.n	340289b4 <nema_cl_get_space+0x6c>
3402897a:	6833      	ldr	r3, [r6, #0]
3402897c:	6858      	ldr	r0, [r3, #4]
3402897e:	6943      	ldr	r3, [r0, #20]
34028980:	6884      	ldr	r4, [r0, #8]
34028982:	eb03 0545 	add.w	r5, r3, r5, lsl #1
34028986:	6145      	str	r5, [r0, #20]
34028988:	eb04 0083 	add.w	r0, r4, r3, lsl #2
3402898c:	bd70      	pop	{r4, r5, r6, pc}
3402898e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
34028990:	fb94 f3f2 	sdiv	r3, r4, r2
34028994:	fb02 4313 	mls	r3, r2, r3, r4
34028998:	1ad2      	subs	r2, r2, r3
3402899a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
3402899e:	1052      	asrs	r2, r2, #1
340289a0:	4295      	cmp	r5, r2
340289a2:	dbec      	blt.n	3402897e <nema_cl_get_space+0x36>
340289a4:	2300      	movs	r3, #0
340289a6:	f881 30f9 	strb.w	r3, [r1, #249]	@ 0xf9
340289aa:	f7ff fcd3 	bl	34028354 <cl_submit_>
340289ae:	6833      	ldr	r3, [r6, #0]
340289b0:	6858      	ldr	r0, [r3, #4]
340289b2:	e7e4      	b.n	3402897e <nema_cl_get_space+0x36>
340289b4:	4628      	mov	r0, r5
340289b6:	f7ff fde7 	bl	34028588 <nema_extend_bound_cl>
340289ba:	2800      	cmp	r0, #0
340289bc:	dadd      	bge.n	3402897a <nema_cl_get_space+0x32>
340289be:	2000      	movs	r0, #0
340289c0:	bd70      	pop	{r4, r5, r6, pc}
340289c2:	2080      	movs	r0, #128	@ 0x80
340289c4:	f000 ff2c 	bl	34029820 <nema_set_error>
340289c8:	4620      	mov	r0, r4
340289ca:	bd70      	pop	{r4, r5, r6, pc}
340289cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
340289d0:	f000 ff26 	bl	34029820 <nema_set_error>
340289d4:	6831      	ldr	r1, [r6, #0]
340289d6:	6848      	ldr	r0, [r1, #4]
340289d8:	b940      	cbnz	r0, 340289ec <nema_cl_get_space+0xa4>
340289da:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
340289de:	f000 ff1f 	bl	34029820 <nema_set_error>
340289e2:	f06f 0301 	mvn.w	r3, #1
340289e6:	429d      	cmp	r5, r3
340289e8:	dbc7      	blt.n	3402897a <nema_cl_get_space+0x32>
340289ea:	e7e3      	b.n	340289b4 <nema_cl_get_space+0x6c>
340289ec:	6983      	ldr	r3, [r0, #24]
340289ee:	069b      	lsls	r3, r3, #26
340289f0:	bf58      	it	pl
340289f2:	f04f 33ff 	movpl.w	r3, #4294967295
340289f6:	d5bd      	bpl.n	34028974 <nema_cl_get_space+0x2c>
340289f8:	f04f 32ff 	mov.w	r2, #4294967295
340289fc:	e7d0      	b.n	340289a0 <nema_cl_get_space+0x58>
340289fe:	bf00      	nop
34028a00:	340e5f18 	.word	0x340e5f18

34028a04 <nema_cl_submit>:
34028a04:	2201      	movs	r2, #1
34028a06:	b5f0      	push	{r4, r5, r6, r7, lr}
34028a08:	4e6e      	ldr	r6, [pc, #440]	@ (34028bc4 <nema_cl_submit+0x1c0>)
34028a0a:	b085      	sub	sp, #20
34028a0c:	6833      	ldr	r3, [r6, #0]
34028a0e:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
34028a12:	2800      	cmp	r0, #0
34028a14:	f000 80b7 	beq.w	34028b86 <nema_cl_submit+0x182>
34028a18:	e9d0 1305 	ldrd	r1, r3, [r0, #20]
34028a1c:	069a      	lsls	r2, r3, #26
34028a1e:	4605      	mov	r5, r0
34028a20:	d431      	bmi.n	34028a86 <nema_cl_submit+0x82>
34028a22:	2900      	cmp	r1, #0
34028a24:	f000 80ab 	beq.w	34028b7e <nema_cl_submit+0x17a>
34028a28:	4604      	mov	r4, r0
34028a2a:	f06f 4740 	mvn.w	r7, #3221225472	@ 0xc0000000
34028a2e:	0758      	lsls	r0, r3, #29
34028a30:	68a1      	ldr	r1, [r4, #8]
34028a32:	6a22      	ldr	r2, [r4, #32]
34028a34:	d560      	bpl.n	34028af8 <nema_cl_submit+0xf4>
34028a36:	b12a      	cbz	r2, 34028a44 <nema_cl_submit+0x40>
34028a38:	6923      	ldr	r3, [r4, #16]
34028a3a:	6952      	ldr	r2, [r2, #20]
34028a3c:	443b      	add	r3, r7
34028a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
34028a42:	69a3      	ldr	r3, [r4, #24]
34028a44:	f023 0208 	bic.w	r2, r3, #8
34028a48:	069b      	lsls	r3, r3, #26
34028a4a:	61a2      	str	r2, [r4, #24]
34028a4c:	f140 8099 	bpl.w	34028b82 <nema_cl_submit+0x17e>
34028a50:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	@ 0x2c
34028a54:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
34028a58:	009b      	lsls	r3, r3, #2
34028a5a:	fb02 f303 	mul.w	r3, r2, r3
34028a5e:	4419      	add	r1, r3
34028a60:	4403      	add	r3, r0
34028a62:	4668      	mov	r0, sp
34028a64:	e9cd 1302 	strd	r1, r3, [sp, #8]
34028a68:	0092      	lsls	r2, r2, #2
34028a6a:	9200      	str	r2, [sp, #0]
34028a6c:	6863      	ldr	r3, [r4, #4]
34028a6e:	9301      	str	r3, [sp, #4]
34028a70:	f7f6 ff62 	bl	3401f938 <nema_buffer_flush>
34028a74:	69a3      	ldr	r3, [r4, #24]
34028a76:	f043 0308 	orr.w	r3, r3, #8
34028a7a:	61a3      	str	r3, [r4, #24]
34028a7c:	6a24      	ldr	r4, [r4, #32]
34028a7e:	2c00      	cmp	r4, #0
34028a80:	d053      	beq.n	34028b2a <nema_cl_submit+0x126>
34028a82:	69a3      	ldr	r3, [r4, #24]
34028a84:	e7d3      	b.n	34028a2e <nema_cl_submit+0x2a>
34028a86:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
34028a88:	fb91 f4f2 	sdiv	r4, r1, r2
34028a8c:	fb02 1414 	mls	r4, r2, r4, r1
34028a90:	2c00      	cmp	r4, #0
34028a92:	d074      	beq.n	34028b7e <nema_cl_submit+0x17a>
34028a94:	6b01      	ldr	r1, [r0, #48]	@ 0x30
34028a96:	68c0      	ldr	r0, [r0, #12]
34028a98:	0089      	lsls	r1, r1, #2
34028a9a:	fb02 f101 	mul.w	r1, r2, r1
34028a9e:	071b      	lsls	r3, r3, #28
34028aa0:	eb00 0701 	add.w	r7, r0, r1
34028aa4:	d40e      	bmi.n	34028ac4 <nema_cl_submit+0xc0>
34028aa6:	68ab      	ldr	r3, [r5, #8]
34028aa8:	0092      	lsls	r2, r2, #2
34028aaa:	4419      	add	r1, r3
34028aac:	686b      	ldr	r3, [r5, #4]
34028aae:	4668      	mov	r0, sp
34028ab0:	9301      	str	r3, [sp, #4]
34028ab2:	9200      	str	r2, [sp, #0]
34028ab4:	e9cd 1702 	strd	r1, r7, [sp, #8]
34028ab8:	f7f6 ff3e 	bl	3401f938 <nema_buffer_flush>
34028abc:	69ab      	ldr	r3, [r5, #24]
34028abe:	f043 0308 	orr.w	r3, r3, #8
34028ac2:	61ab      	str	r3, [r5, #24]
34028ac4:	f44f 70a4 	mov.w	r0, #328	@ 0x148
34028ac8:	f7f6 fe10 	bl	3401f6ec <nema_reg_read>
34028acc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
34028ace:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
34028ad0:	1a1b      	subs	r3, r3, r0
34028ad2:	3a01      	subs	r2, #1
34028ad4:	429a      	cmp	r2, r3
34028ad6:	63a8      	str	r0, [r5, #56]	@ 0x38
34028ad8:	dd6b      	ble.n	34028bb2 <nema_cl_submit+0x1ae>
34028ada:	4621      	mov	r1, r4
34028adc:	4638      	mov	r0, r7
34028ade:	f000 f8e3 	bl	34028ca8 <nema_rb_submit_cmdlist2>
34028ae2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
34028ae4:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
34028ae6:	3301      	adds	r3, #1
34028ae8:	4293      	cmp	r3, r2
34028aea:	e9c5 300c 	strd	r3, r0, [r5, #48]	@ 0x30
34028aee:	d355      	bcc.n	34028b9c <nema_cl_submit+0x198>
34028af0:	2300      	movs	r3, #0
34028af2:	616b      	str	r3, [r5, #20]
34028af4:	632b      	str	r3, [r5, #48]	@ 0x30
34028af6:	e01d      	b.n	34028b34 <nema_cl_submit+0x130>
34028af8:	071f      	lsls	r7, r3, #28
34028afa:	d416      	bmi.n	34028b2a <nema_cl_submit+0x126>
34028afc:	0698      	lsls	r0, r3, #26
34028afe:	d55c      	bpl.n	34028bba <nema_cl_submit+0x1b6>
34028b00:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	@ 0x2c
34028b04:	009b      	lsls	r3, r3, #2
34028b06:	fb02 f303 	mul.w	r3, r2, r3
34028b0a:	68e0      	ldr	r0, [r4, #12]
34028b0c:	4419      	add	r1, r3
34028b0e:	4403      	add	r3, r0
34028b10:	e9cd 1302 	strd	r1, r3, [sp, #8]
34028b14:	0092      	lsls	r2, r2, #2
34028b16:	9200      	str	r2, [sp, #0]
34028b18:	6863      	ldr	r3, [r4, #4]
34028b1a:	4668      	mov	r0, sp
34028b1c:	9301      	str	r3, [sp, #4]
34028b1e:	f7f6 ff0b 	bl	3401f938 <nema_buffer_flush>
34028b22:	69a3      	ldr	r3, [r4, #24]
34028b24:	f043 0308 	orr.w	r3, r3, #8
34028b28:	61a3      	str	r3, [r4, #24]
34028b2a:	6969      	ldr	r1, [r5, #20]
34028b2c:	4628      	mov	r0, r5
34028b2e:	f000 f93f 	bl	34028db0 <nema_rb_submit_cmdlist>
34028b32:	61e8      	str	r0, [r5, #28]
34028b34:	69ab      	ldr	r3, [r5, #24]
34028b36:	069a      	lsls	r2, r3, #26
34028b38:	d52b      	bpl.n	34028b92 <nema_cl_submit+0x18e>
34028b3a:	6833      	ldr	r3, [r6, #0]
34028b3c:	6b68      	ldr	r0, [r5, #52]	@ 0x34
34028b3e:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
34028b42:	2b01      	cmp	r3, #1
34028b44:	d00c      	beq.n	34028b60 <nema_cl_submit+0x15c>
34028b46:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
34028b48:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
34028b4a:	088b      	lsrs	r3, r1, #2
34028b4c:	429a      	cmp	r2, r3
34028b4e:	d007      	beq.n	34028b60 <nema_cl_submit+0x15c>
34028b50:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
34028b54:	d004      	beq.n	34028b60 <nema_cl_submit+0x15c>
34028b56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
34028b5a:	429a      	cmp	r2, r3
34028b5c:	d000      	beq.n	34028b60 <nema_cl_submit+0x15c>
34028b5e:	bb12      	cbnz	r2, 34028ba6 <nema_cl_submit+0x1a2>
34028b60:	f000 f9f2 	bl	34028f48 <nema_rb_submit_cl_id>
34028b64:	6b68      	ldr	r0, [r5, #52]	@ 0x34
34028b66:	61e8      	str	r0, [r5, #28]
34028b68:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
34028b6c:	4298      	cmp	r0, r3
34028b6e:	d106      	bne.n	34028b7e <nema_cl_submit+0x17a>
34028b70:	f7f6 fdae 	bl	3401f6d0 <nema_wait_irq_cl>
34028b74:	2800      	cmp	r0, #0
34028b76:	db02      	blt.n	34028b7e <nema_cl_submit+0x17a>
34028b78:	f04f 33ff 	mov.w	r3, #4294967295
34028b7c:	61eb      	str	r3, [r5, #28]
34028b7e:	b005      	add	sp, #20
34028b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
34028b82:	4620      	mov	r0, r4
34028b84:	e774      	b.n	34028a70 <nema_cl_submit+0x6c>
34028b86:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34028b8a:	f000 fe49 	bl	34029820 <nema_set_error>
34028b8e:	b005      	add	sp, #20
34028b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
34028b92:	69e8      	ldr	r0, [r5, #28]
34028b94:	f000 f9d8 	bl	34028f48 <nema_rb_submit_cl_id>
34028b98:	69e8      	ldr	r0, [r5, #28]
34028b9a:	e7e5      	b.n	34028b68 <nema_cl_submit+0x164>
34028b9c:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
34028b9e:	fb03 f302 	mul.w	r3, r3, r2
34028ba2:	616b      	str	r3, [r5, #20]
34028ba4:	e7c6      	b.n	34028b34 <nema_cl_submit+0x130>
34028ba6:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
34028baa:	4298      	cmp	r0, r3
34028bac:	d0d8      	beq.n	34028b60 <nema_cl_submit+0x15c>
34028bae:	69e8      	ldr	r0, [r5, #28]
34028bb0:	e7da      	b.n	34028b68 <nema_cl_submit+0x164>
34028bb2:	3001      	adds	r0, #1
34028bb4:	f7f6 fd8c 	bl	3401f6d0 <nema_wait_irq_cl>
34028bb8:	e78f      	b.n	34028ada <nema_cl_submit+0xd6>
34028bba:	4620      	mov	r0, r4
34028bbc:	f7f6 febc 	bl	3401f938 <nema_buffer_flush>
34028bc0:	e7af      	b.n	34028b22 <nema_cl_submit+0x11e>
34028bc2:	bf00      	nop
34028bc4:	340e5f18 	.word	0x340e5f18

34028bc8 <nema_cl_wait>:
34028bc8:	b510      	push	{r4, lr}
34028bca:	b170      	cbz	r0, 34028bea <nema_cl_wait+0x22>
34028bcc:	4604      	mov	r4, r0
34028bce:	69c0      	ldr	r0, [r0, #28]
34028bd0:	2800      	cmp	r0, #0
34028bd2:	da04      	bge.n	34028bde <nema_cl_wait+0x16>
34028bd4:	f04f 33ff 	mov.w	r3, #4294967295
34028bd8:	61e3      	str	r3, [r4, #28]
34028bda:	2000      	movs	r0, #0
34028bdc:	bd10      	pop	{r4, pc}
34028bde:	f7f6 fd77 	bl	3401f6d0 <nema_wait_irq_cl>
34028be2:	2800      	cmp	r0, #0
34028be4:	daf6      	bge.n	34028bd4 <nema_cl_wait+0xc>
34028be6:	2000      	movs	r0, #0
34028be8:	bd10      	pop	{r4, pc}
34028bea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34028bee:	f000 fe17 	bl	34029820 <nema_set_error>
34028bf2:	f04f 30ff 	mov.w	r0, #4294967295
34028bf6:	bd10      	pop	{r4, pc}

34028bf8 <nema_rb_init>:
34028bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34028bfc:	6805      	ldr	r5, [r0, #0]
34028bfe:	4f23      	ldr	r7, [pc, #140]	@ (34028c8c <nema_rb_init+0x94>)
34028c00:	2d00      	cmp	r5, #0
34028c02:	603d      	str	r5, [r7, #0]
34028c04:	dd3c      	ble.n	34028c80 <nema_rb_init+0x88>
34028c06:	f8df c090 	ldr.w	ip, [pc, #144]	@ 34028c98 <nema_rb_init+0xa0>
34028c0a:	10ab      	asrs	r3, r5, #2
34028c0c:	3b04      	subs	r3, #4
34028c0e:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 34028c9c <nema_rb_init+0xa4>
34028c12:	6886      	ldr	r6, [r0, #8]
34028c14:	4c1e      	ldr	r4, [pc, #120]	@ (34028c90 <nema_rb_init+0x98>)
34028c16:	f8cc 3000 	str.w	r3, [ip]
34028c1a:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 34028ca0 <nema_rb_init+0xa8>
34028c1e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
34028c22:	f8ce 0000 	str.w	r0, [lr]
34028c26:	6026      	str	r6, [r4, #0]
34028c28:	f8c8 c000 	str.w	ip, [r8]
34028c2c:	b329      	cbz	r1, 34028c7a <nema_rb_init+0x82>
34028c2e:	2400      	movs	r4, #0
34028c30:	f8df e070 	ldr.w	lr, [pc, #112]	@ 34028ca4 <nema_rb_init+0xac>
34028c34:	4917      	ldr	r1, [pc, #92]	@ (34028c94 <nema_rb_init+0x9c>)
34028c36:	e9c0 4404 	strd	r4, r4, [r0, #16]
34028c3a:	f846 e023 	str.w	lr, [r6, r3, lsl #2]
34028c3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
34028c42:	e9c3 1502 	strd	r1, r5, [r3, #8]
34028c46:	f8c3 c004 	str.w	ip, [r3, #4]
34028c4a:	f7f6 fe75 	bl	3401f938 <nema_buffer_flush>
34028c4e:	4621      	mov	r1, r4
34028c50:	f44f 70a4 	mov.w	r0, #328	@ 0x148
34028c54:	f7f6 fd50 	bl	3401f6f8 <nema_reg_write>
34028c58:	f8d8 1000 	ldr.w	r1, [r8]
34028c5c:	20ec      	movs	r0, #236	@ 0xec
34028c5e:	f041 0106 	orr.w	r1, r1, #6
34028c62:	f7f6 fd49 	bl	3401f6f8 <nema_reg_write>
34028c66:	f8d8 1000 	ldr.w	r1, [r8]
34028c6a:	20f0      	movs	r0, #240	@ 0xf0
34028c6c:	f7f6 fd44 	bl	3401f6f8 <nema_reg_write>
34028c70:	6839      	ldr	r1, [r7, #0]
34028c72:	20f4      	movs	r0, #244	@ 0xf4
34028c74:	f7f6 fd40 	bl	3401f6f8 <nema_reg_write>
34028c78:	4621      	mov	r1, r4
34028c7a:	4608      	mov	r0, r1
34028c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34028c80:	2004      	movs	r0, #4
34028c82:	f000 fdcd 	bl	34029820 <nema_set_error>
34028c86:	f04f 31ff 	mov.w	r1, #4294967295
34028c8a:	e7f6      	b.n	34028c7a <nema_rb_init+0x82>
34028c8c:	340e5d4c 	.word	0x340e5d4c
34028c90:	340e5d44 	.word	0x340e5d44
34028c94:	ff0000f4 	.word	0xff0000f4
34028c98:	340e5d48 	.word	0x340e5d48
34028c9c:	340e5d3c 	.word	0x340e5d3c
34028ca0:	340e5d40 	.word	0x340e5d40
34028ca4:	ff0000f0 	.word	0xff0000f0

34028ca8 <nema_rb_submit_cmdlist2>:
34028ca8:	2900      	cmp	r1, #0
34028caa:	d074      	beq.n	34028d96 <nema_rb_submit_cmdlist2+0xee>
34028cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34028cb0:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 34028dac <nema_rb_submit_cmdlist2+0x104>
34028cb4:	4b39      	ldr	r3, [pc, #228]	@ (34028d9c <nema_rb_submit_cmdlist2+0xf4>)
34028cb6:	f8d8 2000 	ldr.w	r2, [r8]
34028cba:	681d      	ldr	r5, [r3, #0]
34028cbc:	6913      	ldr	r3, [r2, #16]
34028cbe:	468c      	mov	ip, r1
34028cc0:	4c37      	ldr	r4, [pc, #220]	@ (34028da0 <nema_rb_submit_cmdlist2+0xf8>)
34028cc2:	1d19      	adds	r1, r3, #4
34028cc4:	42a9      	cmp	r1, r5
34028cc6:	6824      	ldr	r4, [r4, #0]
34028cc8:	db0a      	blt.n	34028ce0 <nema_rb_submit_cmdlist2+0x38>
34028cca:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
34028cce:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
34028cd2:	6913      	ldr	r3, [r2, #16]
34028cd4:	3301      	adds	r3, #1
34028cd6:	429d      	cmp	r5, r3
34028cd8:	6113      	str	r3, [r2, #16]
34028cda:	dc59      	bgt.n	34028d90 <nema_rb_submit_cmdlist2+0xe8>
34028cdc:	2300      	movs	r3, #0
34028cde:	6113      	str	r3, [r2, #16]
34028ce0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
34028ce4:	f04f 0e00 	mov.w	lr, #0
34028ce8:	e009      	b.n	34028cfe <nema_rb_submit_cmdlist2+0x56>
34028cea:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
34028cee:	6913      	ldr	r3, [r2, #16]
34028cf0:	3301      	adds	r3, #1
34028cf2:	429d      	cmp	r5, r3
34028cf4:	6113      	str	r3, [r2, #16]
34028cf6:	bfdc      	itt	le
34028cf8:	2300      	movle	r3, #0
34028cfa:	f8c2 e010 	strle.w	lr, [r2, #16]
34028cfe:	f013 0703 	ands.w	r7, r3, #3
34028d02:	eb04 0683 	add.w	r6, r4, r3, lsl #2
34028d06:	d1f0      	bne.n	34028cea <nema_rb_submit_cmdlist2+0x42>
34028d08:	23f0      	movs	r3, #240	@ 0xf0
34028d0a:	6033      	str	r3, [r6, #0]
34028d0c:	6913      	ldr	r3, [r2, #16]
34028d0e:	3301      	adds	r3, #1
34028d10:	429d      	cmp	r5, r3
34028d12:	bfd3      	iteet	le
34028d14:	4623      	movle	r3, r4
34028d16:	6113      	strgt	r3, [r2, #16]
34028d18:	eb04 0383 	addgt.w	r3, r4, r3, lsl #2
34028d1c:	6117      	strle	r7, [r2, #16]
34028d1e:	6018      	str	r0, [r3, #0]
34028d20:	6913      	ldr	r3, [r2, #16]
34028d22:	3301      	adds	r3, #1
34028d24:	429d      	cmp	r5, r3
34028d26:	dd2f      	ble.n	34028d88 <nema_rb_submit_cmdlist2+0xe0>
34028d28:	6113      	str	r3, [r2, #16]
34028d2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
34028d2e:	491d      	ldr	r1, [pc, #116]	@ (34028da4 <nema_rb_submit_cmdlist2+0xfc>)
34028d30:	4610      	mov	r0, r2
34028d32:	6019      	str	r1, [r3, #0]
34028d34:	6913      	ldr	r3, [r2, #16]
34028d36:	3301      	adds	r3, #1
34028d38:	429d      	cmp	r5, r3
34028d3a:	bfd3      	iteet	le
34028d3c:	2300      	movle	r3, #0
34028d3e:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
34028d42:	6113      	strgt	r3, [r2, #16]
34028d44:	6113      	strle	r3, [r2, #16]
34028d46:	f8c4 c000 	str.w	ip, [r4]
34028d4a:	6913      	ldr	r3, [r2, #16]
34028d4c:	3301      	adds	r3, #1
34028d4e:	429d      	cmp	r5, r3
34028d50:	bfd8      	it	le
34028d52:	2300      	movle	r3, #0
34028d54:	6113      	str	r3, [r2, #16]
34028d56:	f7f6 fdef 	bl	3401f938 <nema_buffer_flush>
34028d5a:	4a13      	ldr	r2, [pc, #76]	@ (34028da8 <nema_rb_submit_cmdlist2+0x100>)
34028d5c:	f8d8 3000 	ldr.w	r3, [r8]
34028d60:	6811      	ldr	r1, [r2, #0]
34028d62:	691b      	ldr	r3, [r3, #16]
34028d64:	20ec      	movs	r0, #236	@ 0xec
34028d66:	eb01 0183 	add.w	r1, r1, r3, lsl #2
34028d6a:	f041 0104 	orr.w	r1, r1, #4
34028d6e:	f7f6 fcc3 	bl	3401f6f8 <nema_reg_write>
34028d72:	f8d8 3000 	ldr.w	r3, [r8]
34028d76:	6958      	ldr	r0, [r3, #20]
34028d78:	3001      	adds	r0, #1
34028d7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
34028d7e:	bfa8      	it	ge
34028d80:	2000      	movge	r0, #0
34028d82:	6158      	str	r0, [r3, #20]
34028d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34028d88:	2100      	movs	r1, #0
34028d8a:	4623      	mov	r3, r4
34028d8c:	6111      	str	r1, [r2, #16]
34028d8e:	e7ce      	b.n	34028d2e <nema_rb_submit_cmdlist2+0x86>
34028d90:	2b00      	cmp	r3, #0
34028d92:	d19c      	bne.n	34028cce <nema_rb_submit_cmdlist2+0x26>
34028d94:	e7a4      	b.n	34028ce0 <nema_rb_submit_cmdlist2+0x38>
34028d96:	f04f 30ff 	mov.w	r0, #4294967295
34028d9a:	4770      	bx	lr
34028d9c:	340e5d48 	.word	0x340e5d48
34028da0:	340e5d44 	.word	0x340e5d44
34028da4:	000200f4 	.word	0x000200f4
34028da8:	340e5d40 	.word	0x340e5d40
34028dac:	340e5d3c 	.word	0x340e5d3c

34028db0 <nema_rb_submit_cmdlist>:
34028db0:	68c0      	ldr	r0, [r0, #12]
34028db2:	f7ff bf79 	b.w	34028ca8 <nema_rb_submit_cmdlist2>
34028db6:	bf00      	nop

34028db8 <nema_rb_inline_cmd>:
34028db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34028dba:	4e21      	ldr	r6, [pc, #132]	@ (34028e40 <nema_rb_inline_cmd+0x88>)
34028dbc:	4b21      	ldr	r3, [pc, #132]	@ (34028e44 <nema_rb_inline_cmd+0x8c>)
34028dbe:	6832      	ldr	r2, [r6, #0]
34028dc0:	681d      	ldr	r5, [r3, #0]
34028dc2:	6913      	ldr	r3, [r2, #16]
34028dc4:	4c20      	ldr	r4, [pc, #128]	@ (34028e48 <nema_rb_inline_cmd+0x90>)
34028dc6:	1c5f      	adds	r7, r3, #1
34028dc8:	42af      	cmp	r7, r5
34028dca:	6824      	ldr	r4, [r4, #0]
34028dcc:	db24      	blt.n	34028e18 <nema_rb_inline_cmd+0x60>
34028dce:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
34028dd2:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
34028dd6:	6913      	ldr	r3, [r2, #16]
34028dd8:	3301      	adds	r3, #1
34028dda:	429d      	cmp	r5, r3
34028ddc:	6113      	str	r3, [r2, #16]
34028dde:	dc17      	bgt.n	34028e10 <nema_rb_inline_cmd+0x58>
34028de0:	2700      	movs	r7, #0
34028de2:	4623      	mov	r3, r4
34028de4:	6117      	str	r7, [r2, #16]
34028de6:	6018      	str	r0, [r3, #0]
34028de8:	6913      	ldr	r3, [r2, #16]
34028dea:	3301      	adds	r3, #1
34028dec:	429d      	cmp	r5, r3
34028dee:	bfd3      	iteet	le
34028df0:	2300      	movle	r3, #0
34028df2:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
34028df6:	6113      	strgt	r3, [r2, #16]
34028df8:	6113      	strle	r3, [r2, #16]
34028dfa:	6021      	str	r1, [r4, #0]
34028dfc:	6913      	ldr	r3, [r2, #16]
34028dfe:	3301      	adds	r3, #1
34028e00:	429d      	cmp	r5, r3
34028e02:	bfd8      	it	le
34028e04:	2300      	movle	r3, #0
34028e06:	f010 4f7f 	tst.w	r0, #4278190080	@ 0xff000000
34028e0a:	6113      	str	r3, [r2, #16]
34028e0c:	d107      	bne.n	34028e1e <nema_rb_inline_cmd+0x66>
34028e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34028e10:	2b00      	cmp	r3, #0
34028e12:	d1de      	bne.n	34028dd2 <nema_rb_inline_cmd+0x1a>
34028e14:	4623      	mov	r3, r4
34028e16:	e7e6      	b.n	34028de6 <nema_rb_inline_cmd+0x2e>
34028e18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
34028e1c:	e7e3      	b.n	34028de6 <nema_rb_inline_cmd+0x2e>
34028e1e:	4610      	mov	r0, r2
34028e20:	f7f6 fd8a 	bl	3401f938 <nema_buffer_flush>
34028e24:	6833      	ldr	r3, [r6, #0]
34028e26:	4a09      	ldr	r2, [pc, #36]	@ (34028e4c <nema_rb_inline_cmd+0x94>)
34028e28:	691b      	ldr	r3, [r3, #16]
34028e2a:	6811      	ldr	r1, [r2, #0]
34028e2c:	20ec      	movs	r0, #236	@ 0xec
34028e2e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
34028e32:	f041 0104 	orr.w	r1, r1, #4
34028e36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
34028e3a:	f7f6 bc5d 	b.w	3401f6f8 <nema_reg_write>
34028e3e:	bf00      	nop
34028e40:	340e5d3c 	.word	0x340e5d3c
34028e44:	340e5d48 	.word	0x340e5d48
34028e48:	340e5d44 	.word	0x340e5d44
34028e4c:	340e5d40 	.word	0x340e5d40

34028e50 <nema_rb_force_flush>:
34028e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34028e52:	4e36      	ldr	r6, [pc, #216]	@ (34028f2c <nema_rb_force_flush+0xdc>)
34028e54:	4b36      	ldr	r3, [pc, #216]	@ (34028f30 <nema_rb_force_flush+0xe0>)
34028e56:	6830      	ldr	r0, [r6, #0]
34028e58:	6819      	ldr	r1, [r3, #0]
34028e5a:	6903      	ldr	r3, [r0, #16]
34028e5c:	4a35      	ldr	r2, [pc, #212]	@ (34028f34 <nema_rb_force_flush+0xe4>)
34028e5e:	1d1c      	adds	r4, r3, #4
34028e60:	428c      	cmp	r4, r1
34028e62:	6812      	ldr	r2, [r2, #0]
34028e64:	db0a      	blt.n	34028e7c <nema_rb_force_flush+0x2c>
34028e66:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
34028e6a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
34028e6e:	6903      	ldr	r3, [r0, #16]
34028e70:	3301      	adds	r3, #1
34028e72:	4299      	cmp	r1, r3
34028e74:	6103      	str	r3, [r0, #16]
34028e76:	dc51      	bgt.n	34028f1c <nema_rb_force_flush+0xcc>
34028e78:	2300      	movs	r3, #0
34028e7a:	6103      	str	r3, [r0, #16]
34028e7c:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
34028e80:	2700      	movs	r7, #0
34028e82:	e008      	b.n	34028e96 <nema_rb_force_flush+0x46>
34028e84:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
34028e88:	6903      	ldr	r3, [r0, #16]
34028e8a:	3301      	adds	r3, #1
34028e8c:	4299      	cmp	r1, r3
34028e8e:	6103      	str	r3, [r0, #16]
34028e90:	bfdc      	itt	le
34028e92:	2300      	movle	r3, #0
34028e94:	6107      	strle	r7, [r0, #16]
34028e96:	f013 0c03 	ands.w	ip, r3, #3
34028e9a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
34028e9e:	d1f1      	bne.n	34028e84 <nema_rb_force_flush+0x34>
34028ea0:	4d25      	ldr	r5, [pc, #148]	@ (34028f38 <nema_rb_force_flush+0xe8>)
34028ea2:	4f26      	ldr	r7, [pc, #152]	@ (34028f3c <nema_rb_force_flush+0xec>)
34028ea4:	6025      	str	r5, [r4, #0]
34028ea6:	6904      	ldr	r4, [r0, #16]
34028ea8:	683d      	ldr	r5, [r7, #0]
34028eaa:	3401      	adds	r4, #1
34028eac:	42a1      	cmp	r1, r4
34028eae:	bfd8      	it	le
34028eb0:	4614      	movle	r4, r2
34028eb2:	f103 0304 	add.w	r3, r3, #4
34028eb6:	bfc8      	it	gt
34028eb8:	6104      	strgt	r4, [r0, #16]
34028eba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
34028ebe:	bfcc      	ite	gt
34028ec0:	eb02 0484 	addgt.w	r4, r2, r4, lsl #2
34028ec4:	f8c0 c010 	strle.w	ip, [r0, #16]
34028ec8:	6023      	str	r3, [r4, #0]
34028eca:	6903      	ldr	r3, [r0, #16]
34028ecc:	3301      	adds	r3, #1
34028ece:	4299      	cmp	r1, r3
34028ed0:	dd27      	ble.n	34028f22 <nema_rb_force_flush+0xd2>
34028ed2:	6103      	str	r3, [r0, #16]
34028ed4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
34028ed8:	4c19      	ldr	r4, [pc, #100]	@ (34028f40 <nema_rb_force_flush+0xf0>)
34028eda:	601c      	str	r4, [r3, #0]
34028edc:	6903      	ldr	r3, [r0, #16]
34028ede:	3301      	adds	r3, #1
34028ee0:	4299      	cmp	r1, r3
34028ee2:	bfd5      	itete	le
34028ee4:	2300      	movle	r3, #0
34028ee6:	6103      	strgt	r3, [r0, #16]
34028ee8:	6103      	strle	r3, [r0, #16]
34028eea:	eb02 0283 	addgt.w	r2, r2, r3, lsl #2
34028eee:	4b15      	ldr	r3, [pc, #84]	@ (34028f44 <nema_rb_force_flush+0xf4>)
34028ef0:	681b      	ldr	r3, [r3, #0]
34028ef2:	6013      	str	r3, [r2, #0]
34028ef4:	6903      	ldr	r3, [r0, #16]
34028ef6:	3301      	adds	r3, #1
34028ef8:	4299      	cmp	r1, r3
34028efa:	bfd8      	it	le
34028efc:	2300      	movle	r3, #0
34028efe:	6103      	str	r3, [r0, #16]
34028f00:	f7f6 fd1a 	bl	3401f938 <nema_buffer_flush>
34028f04:	6833      	ldr	r3, [r6, #0]
34028f06:	6839      	ldr	r1, [r7, #0]
34028f08:	691b      	ldr	r3, [r3, #16]
34028f0a:	20ec      	movs	r0, #236	@ 0xec
34028f0c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
34028f10:	f041 0104 	orr.w	r1, r1, #4
34028f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
34028f18:	f7f6 bbee 	b.w	3401f6f8 <nema_reg_write>
34028f1c:	2b00      	cmp	r3, #0
34028f1e:	d1a4      	bne.n	34028e6a <nema_rb_force_flush+0x1a>
34028f20:	e7ac      	b.n	34028e7c <nema_rb_force_flush+0x2c>
34028f22:	2400      	movs	r4, #0
34028f24:	4613      	mov	r3, r2
34028f26:	6104      	str	r4, [r0, #16]
34028f28:	e7d6      	b.n	34028ed8 <nema_rb_force_flush+0x88>
34028f2a:	bf00      	nop
34028f2c:	340e5d3c 	.word	0x340e5d3c
34028f30:	340e5d48 	.word	0x340e5d48
34028f34:	340e5d44 	.word	0x340e5d44
34028f38:	ff0000f0 	.word	0xff0000f0
34028f3c:	340e5d40 	.word	0x340e5d40
34028f40:	ff0000f4 	.word	0xff0000f4
34028f44:	340e5d4c 	.word	0x340e5d4c

34028f48 <nema_rb_submit_cl_id>:
34028f48:	2800      	cmp	r0, #0
34028f4a:	dd58      	ble.n	34028ffe <nema_rb_submit_cl_id+0xb6>
34028f4c:	b470      	push	{r4, r5, r6}
34028f4e:	4a33      	ldr	r2, [pc, #204]	@ (3402901c <nema_rb_submit_cl_id+0xd4>)
34028f50:	4b33      	ldr	r3, [pc, #204]	@ (34029020 <nema_rb_submit_cl_id+0xd8>)
34028f52:	6812      	ldr	r2, [r2, #0]
34028f54:	681c      	ldr	r4, [r3, #0]
34028f56:	6913      	ldr	r3, [r2, #16]
34028f58:	4932      	ldr	r1, [pc, #200]	@ (34029024 <nema_rb_submit_cl_id+0xdc>)
34028f5a:	1c5d      	adds	r5, r3, #1
34028f5c:	42a5      	cmp	r5, r4
34028f5e:	6809      	ldr	r1, [r1, #0]
34028f60:	da38      	bge.n	34028fd4 <nema_rb_submit_cl_id+0x8c>
34028f62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
34028f66:	f44f 75a4 	mov.w	r5, #328	@ 0x148
34028f6a:	601d      	str	r5, [r3, #0]
34028f6c:	6913      	ldr	r3, [r2, #16]
34028f6e:	3301      	adds	r3, #1
34028f70:	429c      	cmp	r4, r3
34028f72:	dd45      	ble.n	34029000 <nema_rb_submit_cl_id+0xb8>
34028f74:	6113      	str	r3, [r2, #16]
34028f76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
34028f7a:	6018      	str	r0, [r3, #0]
34028f7c:	6910      	ldr	r0, [r2, #16]
34028f7e:	1c43      	adds	r3, r0, #1
34028f80:	429c      	cmp	r4, r3
34028f82:	dd45      	ble.n	34029010 <nema_rb_submit_cl_id+0xc8>
34028f84:	6113      	str	r3, [r2, #16]
34028f86:	3002      	adds	r0, #2
34028f88:	eb01 0583 	add.w	r5, r1, r3, lsl #2
34028f8c:	4284      	cmp	r4, r0
34028f8e:	dc0b      	bgt.n	34028fa8 <nema_rb_submit_cl_id+0x60>
34028f90:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
34028f94:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
34028f98:	6913      	ldr	r3, [r2, #16]
34028f9a:	3301      	adds	r3, #1
34028f9c:	42a3      	cmp	r3, r4
34028f9e:	6113      	str	r3, [r2, #16]
34028fa0:	db25      	blt.n	34028fee <nema_rb_submit_cl_id+0xa6>
34028fa2:	2300      	movs	r3, #0
34028fa4:	460d      	mov	r5, r1
34028fa6:	6113      	str	r3, [r2, #16]
34028fa8:	23f8      	movs	r3, #248	@ 0xf8
34028faa:	602b      	str	r3, [r5, #0]
34028fac:	6913      	ldr	r3, [r2, #16]
34028fae:	3301      	adds	r3, #1
34028fb0:	42a3      	cmp	r3, r4
34028fb2:	bfab      	itete	ge
34028fb4:	2300      	movge	r3, #0
34028fb6:	6113      	strlt	r3, [r2, #16]
34028fb8:	6113      	strge	r3, [r2, #16]
34028fba:	eb01 0183 	addlt.w	r1, r1, r3, lsl #2
34028fbe:	2301      	movs	r3, #1
34028fc0:	600b      	str	r3, [r1, #0]
34028fc2:	6913      	ldr	r3, [r2, #16]
34028fc4:	3301      	adds	r3, #1
34028fc6:	42a3      	cmp	r3, r4
34028fc8:	bfa8      	it	ge
34028fca:	2300      	movge	r3, #0
34028fcc:	6113      	str	r3, [r2, #16]
34028fce:	bc70      	pop	{r4, r5, r6}
34028fd0:	f7ff bf3e 	b.w	34028e50 <nema_rb_force_flush>
34028fd4:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
34028fd8:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
34028fdc:	6913      	ldr	r3, [r2, #16]
34028fde:	3301      	adds	r3, #1
34028fe0:	429c      	cmp	r4, r3
34028fe2:	6113      	str	r3, [r2, #16]
34028fe4:	dc07      	bgt.n	34028ff6 <nema_rb_submit_cl_id+0xae>
34028fe6:	2300      	movs	r3, #0
34028fe8:	6113      	str	r3, [r2, #16]
34028fea:	460b      	mov	r3, r1
34028fec:	e7bb      	b.n	34028f66 <nema_rb_submit_cl_id+0x1e>
34028fee:	2b00      	cmp	r3, #0
34028ff0:	d1d0      	bne.n	34028f94 <nema_rb_submit_cl_id+0x4c>
34028ff2:	460d      	mov	r5, r1
34028ff4:	e7d8      	b.n	34028fa8 <nema_rb_submit_cl_id+0x60>
34028ff6:	2b00      	cmp	r3, #0
34028ff8:	d1ee      	bne.n	34028fd8 <nema_rb_submit_cl_id+0x90>
34028ffa:	460b      	mov	r3, r1
34028ffc:	e7b3      	b.n	34028f66 <nema_rb_submit_cl_id+0x1e>
34028ffe:	4770      	bx	lr
34029000:	460b      	mov	r3, r1
34029002:	2500      	movs	r5, #0
34029004:	6115      	str	r5, [r2, #16]
34029006:	6018      	str	r0, [r3, #0]
34029008:	6910      	ldr	r0, [r2, #16]
3402900a:	1c43      	adds	r3, r0, #1
3402900c:	429c      	cmp	r4, r3
3402900e:	dcb9      	bgt.n	34028f84 <nema_rb_submit_cl_id+0x3c>
34029010:	2600      	movs	r6, #0
34029012:	460d      	mov	r5, r1
34029014:	4633      	mov	r3, r6
34029016:	2001      	movs	r0, #1
34029018:	6116      	str	r6, [r2, #16]
3402901a:	e7b7      	b.n	34028f8c <nema_rb_submit_cl_id+0x44>
3402901c:	340e5d3c 	.word	0x340e5d3c
34029020:	340e5d48 	.word	0x340e5d48
34029024:	340e5d44 	.word	0x340e5d44

34029028 <nema_blender_init>:
34029028:	b570      	push	{r4, r5, r6, lr}
3402902a:	b086      	sub	sp, #24
3402902c:	466d      	mov	r5, sp
3402902e:	2418      	movs	r4, #24
34029030:	4e13      	ldr	r6, [pc, #76]	@ (34029080 <nema_blender_init+0x58>)
34029032:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
34029034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34029036:	e896 0003 	ldmia.w	r6, {r0, r1}
3402903a:	e885 0003 	stmia.w	r5, {r0, r1}
3402903e:	2101      	movs	r1, #1
34029040:	4622      	mov	r2, r4
34029042:	4668      	mov	r0, sp
34029044:	440c      	add	r4, r1
34029046:	f001 fa9f 	bl	3402a588 <nema_load_frag_shader>
3402904a:	2c1f      	cmp	r4, #31
3402904c:	d1f7      	bne.n	3402903e <nema_blender_init+0x16>
3402904e:	4622      	mov	r2, r4
34029050:	2101      	movs	r1, #1
34029052:	a802      	add	r0, sp, #8
34029054:	f001 fa98 	bl	3402a588 <nema_load_frag_shader>
34029058:	f001 f992 	bl	3402a380 <nema_readHwConfig>
3402905c:	f000 5080 	and.w	r0, r0, #268435456	@ 0x10000000
34029060:	2800      	cmp	r0, #0
34029062:	bf14      	ite	ne
34029064:	2201      	movne	r2, #1
34029066:	2200      	moveq	r2, #0
34029068:	4b06      	ldr	r3, [pc, #24]	@ (34029084 <nema_blender_init+0x5c>)
3402906a:	701a      	strb	r2, [r3, #0]
3402906c:	d005      	beq.n	3402907a <nema_blender_init+0x52>
3402906e:	2200      	movs	r2, #0
34029070:	4b05      	ldr	r3, [pc, #20]	@ (34029088 <nema_blender_init+0x60>)
34029072:	2001      	movs	r0, #1
34029074:	601a      	str	r2, [r3, #0]
34029076:	f001 faa7 	bl	3402a5c8 <nema_set_rop_blend_mode>
3402907a:	b006      	add	sp, #24
3402907c:	bd70      	pop	{r4, r5, r6, pc}
3402907e:	bf00      	nop
34029080:	3402adb0 	.word	0x3402adb0
34029084:	340e5d51 	.word	0x340e5d51
34029088:	340d0a8c 	.word	0x340d0a8c

3402908c <nema_set_blend>:
3402908c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34029090:	4dc0      	ldr	r5, [pc, #768]	@ (34029394 <nema_set_blend+0x308>)
34029092:	4604      	mov	r4, r0
34029094:	7828      	ldrb	r0, [r5, #0]
34029096:	b0a3      	sub	sp, #140	@ 0x8c
34029098:	4689      	mov	r9, r1
3402909a:	2800      	cmp	r0, #0
3402909c:	f040 81c4 	bne.w	34029428 <nema_set_blend+0x39c>
340290a0:	461d      	mov	r5, r3
340290a2:	4621      	mov	r1, r4
340290a4:	0d23      	lsrs	r3, r4, #20
340290a6:	051b      	lsls	r3, r3, #20
340290a8:	930c      	str	r3, [sp, #48]	@ 0x30
340290aa:	f404 0300 	and.w	r3, r4, #8388608	@ 0x800000
340290ae:	9309      	str	r3, [sp, #36]	@ 0x24
340290b0:	f404 0380 	and.w	r3, r4, #4194304	@ 0x400000
340290b4:	930d      	str	r3, [sp, #52]	@ 0x34
340290b6:	f404 1300 	and.w	r3, r4, #2097152	@ 0x200000
340290ba:	4690      	mov	r8, r2
340290bc:	930b      	str	r3, [sp, #44]	@ 0x2c
340290be:	b2d6      	uxtb	r6, r2
340290c0:	b2e8      	uxtb	r0, r5
340290c2:	f004 0b0f 	and.w	fp, r4, #15
340290c6:	f3c4 2703 	ubfx	r7, r4, #8, #4
340290ca:	f004 7c00 	and.w	ip, r4, #33554432	@ 0x2000000
340290ce:	f3c4 6340 	ubfx	r3, r4, #25, #1
340290d2:	f3c4 5200 	ubfx	r2, r4, #20, #1
340290d6:	fa5f fe89 	uxtb.w	lr, r9
340290da:	f1be 0f04 	cmp.w	lr, #4
340290de:	bf28      	it	cs
340290e0:	f04f 0900 	movcs.w	r9, #0
340290e4:	2e04      	cmp	r6, #4
340290e6:	bf28      	it	cs
340290e8:	f04f 38ff 	movcs.w	r8, #4294967295
340290ec:	2804      	cmp	r0, #4
340290ee:	bf34      	ite	cc
340290f0:	462e      	movcc	r6, r5
340290f2:	2602      	movcs	r6, #2
340290f4:	48a8      	ldr	r0, [pc, #672]	@ (34029398 <nema_set_blend+0x30c>)
340290f6:	bf28      	it	cs
340290f8:	464d      	movcs	r5, r9
340290fa:	7800      	ldrb	r0, [r0, #0]
340290fc:	960f      	str	r6, [sp, #60]	@ 0x3c
340290fe:	2800      	cmp	r0, #0
34029100:	d03c      	beq.n	3402917c <nema_set_blend+0xf0>
34029102:	2900      	cmp	r1, #0
34029104:	f2c0 822b 	blt.w	3402955e <nema_set_blend+0x4d2>
34029108:	4626      	mov	r6, r4
3402910a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3402910e:	2000      	movs	r0, #0
34029110:	f1bc 0f00 	cmp.w	ip, #0
34029114:	d002      	beq.n	3402911c <nema_set_blend+0x90>
34029116:	4618      	mov	r0, r3
34029118:	f026 7600 	bic.w	r6, r6, #33554432	@ 0x2000000
3402911c:	f016 7a80 	ands.w	sl, r6, #16777216	@ 0x1000000
34029120:	d102      	bne.n	34029128 <nema_set_blend+0x9c>
34029122:	454d      	cmp	r5, r9
34029124:	f000 82a5 	beq.w	34029672 <nema_set_blend+0x5e6>
34029128:	f040 0001 	orr.w	r0, r0, #1
3402912c:	f001 fa4c 	bl	3402a5c8 <nema_set_rop_blend_mode>
34029130:	2200      	movs	r2, #0
34029132:	2300      	movs	r3, #0
34029134:	4999      	ldr	r1, [pc, #612]	@ (3402939c <nema_set_blend+0x310>)
34029136:	2e01      	cmp	r6, #1
34029138:	6809      	ldr	r1, [r1, #0]
3402913a:	9304      	str	r3, [sp, #16]
3402913c:	f891 c00a 	ldrb.w	ip, [r1, #10]
34029140:	d128      	bne.n	34029194 <nema_set_blend+0x108>
34029142:	f1bc 0f00 	cmp.w	ip, #0
34029146:	f040 80c8 	bne.w	340292da <nema_set_blend+0x24e>
3402914a:	f1b9 0f00 	cmp.w	r9, #0
3402914e:	f040 80c4 	bne.w	340292da <nema_set_blend+0x24e>
34029152:	f1b8 3fff 	cmp.w	r8, #4294967295
34029156:	f000 82b5 	beq.w	340296c4 <nema_set_blend+0x638>
3402915a:	4648      	mov	r0, r9
3402915c:	f001 f94e 	bl	3402a3fc <nema_matmul_bypass>
34029160:	4b8f      	ldr	r3, [pc, #572]	@ (340293a0 <nema_set_blend+0x314>)
34029162:	4990      	ldr	r1, [pc, #576]	@ (340293a4 <nema_set_blend+0x318>)
34029164:	681a      	ldr	r2, [r3, #0]
34029166:	4b90      	ldr	r3, [pc, #576]	@ (340293a8 <nema_set_blend+0x31c>)
34029168:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
3402916c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34029170:	4318      	orrs	r0, r3
34029172:	f001 fa23 	bl	3402a5bc <nema_set_frag_ptr>
34029176:	b023      	add	sp, #140	@ 0x8c
34029178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402917c:	2900      	cmp	r1, #0
3402917e:	bfac      	ite	ge
34029180:	4619      	movge	r1, r3
34029182:	2101      	movlt	r1, #1
34029184:	4626      	mov	r6, r4
34029186:	9104      	str	r1, [sp, #16]
34029188:	4984      	ldr	r1, [pc, #528]	@ (3402939c <nema_set_blend+0x310>)
3402918a:	2e01      	cmp	r6, #1
3402918c:	6809      	ldr	r1, [r1, #0]
3402918e:	f891 c00a 	ldrb.w	ip, [r1, #10]
34029192:	d0d6      	beq.n	34029142 <nema_set_blend+0xb6>
34029194:	f006 4180 	and.w	r1, r6, #1073741824	@ 0x40000000
34029198:	9110      	str	r1, [sp, #64]	@ 0x40
3402919a:	f1bb 0f05 	cmp.w	fp, #5
3402919e:	f3c6 7180 	ubfx	r1, r6, #30, #1
340291a2:	9103      	str	r1, [sp, #12]
340291a4:	f006 5180 	and.w	r1, r6, #268435456	@ 0x10000000
340291a8:	f240 809e 	bls.w	340292e8 <nema_set_blend+0x25c>
340291ac:	2001      	movs	r0, #1
340291ae:	9006      	str	r0, [sp, #24]
340291b0:	487e      	ldr	r0, [pc, #504]	@ (340293ac <nema_set_blend+0x320>)
340291b2:	f04f 0e01 	mov.w	lr, #1
340291b6:	9005      	str	r0, [sp, #20]
340291b8:	2003      	movs	r0, #3
340291ba:	e9cd e001 	strd	lr, r0, [sp, #4]
340291be:	f8df a214 	ldr.w	sl, [pc, #532]	@ 340293d4 <nema_set_blend+0x348>
340291c2:	f8df e214 	ldr.w	lr, [pc, #532]	@ 340293d8 <nema_set_blend+0x34c>
340291c6:	2900      	cmp	r1, #0
340291c8:	bf14      	ite	ne
340291ca:	4651      	movne	r1, sl
340291cc:	4671      	moveq	r1, lr
340291ce:	9111      	str	r1, [sp, #68]	@ 0x44
340291d0:	bf14      	ite	ne
340291d2:	2105      	movne	r1, #5
340291d4:	2107      	moveq	r1, #7
340291d6:	910a      	str	r1, [sp, #40]	@ 0x28
340291d8:	9903      	ldr	r1, [sp, #12]
340291da:	2b00      	cmp	r3, #0
340291dc:	f040 80d2 	bne.w	34029384 <nema_set_blend+0x2f8>
340291e0:	9b04      	ldr	r3, [sp, #16]
340291e2:	2b00      	cmp	r3, #0
340291e4:	bf0c      	ite	eq
340291e6:	2300      	moveq	r3, #0
340291e8:	f44f 1300 	movne.w	r3, #2097152	@ 0x200000
340291ec:	930e      	str	r3, [sp, #56]	@ 0x38
340291ee:	2a00      	cmp	r2, #0
340291f0:	f040 80ce 	bne.w	34029390 <nema_set_blend+0x304>
340291f4:	f016 5f00 	tst.w	r6, #536870912	@ 0x20000000
340291f8:	f040 817f 	bne.w	340294fa <nema_set_blend+0x46e>
340291fc:	f016 6f80 	tst.w	r6, #67108864	@ 0x4000000
34029200:	bf0c      	ite	eq
34029202:	231d      	moveq	r3, #29
34029204:	2304      	movne	r3, #4
34029206:	f016 5fc0 	tst.w	r6, #402653184	@ 0x18000000
3402920a:	bf0c      	ite	eq
3402920c:	200e      	moveq	r0, #14
3402920e:	200c      	movne	r0, #12
34029210:	f04f 0a00 	mov.w	sl, #0
34029214:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 340293a4 <nema_set_blend+0x318>
34029218:	9007      	str	r0, [sp, #28]
3402921a:	f85e 0025 	ldr.w	r0, [lr, r5, lsl #2]
3402921e:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
34029222:	9008      	str	r0, [sp, #32]
34029224:	f1bc 0f00 	cmp.w	ip, #0
34029228:	f000 80d8 	beq.w	340293dc <nema_set_blend+0x350>
3402922c:	4c60      	ldr	r4, [pc, #384]	@ (340293b0 <nema_set_blend+0x324>)
3402922e:	4861      	ldr	r0, [pc, #388]	@ (340293b4 <nema_set_blend+0x328>)
34029230:	f1b8 3fff 	cmp.w	r8, #4294967295
34029234:	e9cd 4012 	strd	r4, r0, [sp, #72]	@ 0x48
34029238:	f000 820d 	beq.w	34029656 <nema_set_blend+0x5ca>
3402923c:	f44f 5c00 	mov.w	ip, #8192	@ 0x2000
34029240:	4c5d      	ldr	r4, [pc, #372]	@ (340293b8 <nema_set_blend+0x32c>)
34029242:	f04f 0e02 	mov.w	lr, #2
34029246:	ea44 14c8 	orr.w	r4, r4, r8, lsl #7
3402924a:	e9cd 4c14 	strd	r4, ip, [sp, #80]	@ 0x50
3402924e:	f04f 0c03 	mov.w	ip, #3
34029252:	485a      	ldr	r0, [pc, #360]	@ (340293bc <nema_set_blend+0x330>)
34029254:	f8cd a004 	str.w	sl, [sp, #4]
34029258:	9009      	str	r0, [sp, #36]	@ 0x24
3402925a:	2f01      	cmp	r7, #1
3402925c:	f240 80fd 	bls.w	3402945a <nema_set_blend+0x3ce>
34029260:	f1bb 0f05 	cmp.w	fp, #5
34029264:	f200 80d9 	bhi.w	3402941a <nema_set_blend+0x38e>
34029268:	2a00      	cmp	r2, #0
3402926a:	f040 8175 	bne.w	34029558 <nema_set_blend+0x4cc>
3402926e:	f016 5f70 	tst.w	r6, #1006632960	@ 0x3c000000
34029272:	bf18      	it	ne
34029274:	f44f 5200 	movne.w	r2, #8192	@ 0x2000
34029278:	d047      	beq.n	3402930a <nema_set_blend+0x27e>
3402927a:	9802      	ldr	r0, [sp, #8]
3402927c:	b920      	cbnz	r0, 34029288 <nema_set_blend+0x1fc>
3402927e:	b91f      	cbnz	r7, 34029288 <nema_set_blend+0x1fc>
34029280:	9804      	ldr	r0, [sp, #16]
34029282:	2800      	cmp	r0, #0
34029284:	f000 81a1 	beq.w	340295ca <nema_set_blend+0x53e>
34029288:	2b1d      	cmp	r3, #29
3402928a:	f000 8114 	beq.w	340294b6 <nema_set_blend+0x42a>
3402928e:	980a      	ldr	r0, [sp, #40]	@ 0x28
34029290:	4c4b      	ldr	r4, [pc, #300]	@ (340293c0 <nema_set_blend+0x334>)
34029292:	ea40 3383 	orr.w	r3, r0, r3, lsl #14
34029296:	9807      	ldr	r0, [sp, #28]
34029298:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
3402929c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
340292a0:	4313      	orrs	r3, r2
340292a2:	aa22      	add	r2, sp, #136	@ 0x88
340292a4:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
340292a8:	9a02      	ldr	r2, [sp, #8]
340292aa:	ea44 5401 	orr.w	r4, r4, r1, lsl #20
340292ae:	4314      	orrs	r4, r2
340292b0:	e94e 4310 	strd	r4, r3, [lr, #-64]	@ 0x40
340292b4:	f10c 0401 	add.w	r4, ip, #1
340292b8:	2f00      	cmp	r7, #0
340292ba:	f040 810d 	bne.w	340294d8 <nema_set_blend+0x44c>
340292be:	4639      	mov	r1, r7
340292c0:	4b3f      	ldr	r3, [pc, #252]	@ (340293c0 <nema_set_blend+0x334>)
340292c2:	9706      	str	r7, [sp, #24]
340292c4:	9703      	str	r7, [sp, #12]
340292c6:	9305      	str	r3, [sp, #20]
340292c8:	9b04      	ldr	r3, [sp, #16]
340292ca:	bb13      	cbnz	r3, 34029312 <nema_set_blend+0x286>
340292cc:	4b3d      	ldr	r3, [pc, #244]	@ (340293c4 <nema_set_blend+0x338>)
340292ce:	464d      	mov	r5, r9
340292d0:	9305      	str	r3, [sp, #20]
340292d2:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
340292d6:	4618      	mov	r0, r3
340292d8:	e022      	b.n	34029320 <nema_set_blend+0x294>
340292da:	f1bb 0f05 	cmp.w	fp, #5
340292de:	f200 815b 	bhi.w	34029598 <nema_set_blend+0x50c>
340292e2:	2100      	movs	r1, #0
340292e4:	9103      	str	r1, [sp, #12]
340292e6:	9110      	str	r1, [sp, #64]	@ 0x40
340292e8:	9804      	ldr	r0, [sp, #16]
340292ea:	2800      	cmp	r0, #0
340292ec:	f47f af5f 	bne.w	340291ae <nema_set_blend+0x122>
340292f0:	2f00      	cmp	r7, #0
340292f2:	f000 8164 	beq.w	340295be <nema_set_blend+0x532>
340292f6:	2001      	movs	r0, #1
340292f8:	f04f 0e03 	mov.w	lr, #3
340292fc:	9006      	str	r0, [sp, #24]
340292fe:	2001      	movs	r0, #1
34029300:	e9cd 0e01 	strd	r0, lr, [sp, #4]
34029304:	4829      	ldr	r0, [pc, #164]	@ (340293ac <nema_set_blend+0x320>)
34029306:	9005      	str	r0, [sp, #20]
34029308:	e759      	b.n	340291be <nema_set_blend+0x132>
3402930a:	4664      	mov	r4, ip
3402930c:	46f4      	mov	ip, lr
3402930e:	2f00      	cmp	r7, #0
34029310:	d0da      	beq.n	340292c8 <nema_set_blend+0x23c>
34029312:	9b03      	ldr	r3, [sp, #12]
34029314:	2b00      	cmp	r3, #0
34029316:	f000 81bb 	beq.w	34029690 <nema_set_blend+0x604>
3402931a:	f04f 0e00 	mov.w	lr, #0
3402931e:	9805      	ldr	r0, [sp, #20]
34029320:	4e29      	ldr	r6, [pc, #164]	@ (340293c8 <nema_set_blend+0x33c>)
34029322:	4a2a      	ldr	r2, [pc, #168]	@ (340293cc <nema_set_blend+0x340>)
34029324:	f856 302b 	ldr.w	r3, [r6, fp, lsl #2]
34029328:	f852 802b 	ldr.w	r8, [r2, fp, lsl #2]
3402932c:	015b      	lsls	r3, r3, #5
3402932e:	ea43 3388 	orr.w	r3, r3, r8, lsl #14
34029332:	ea40 5801 	orr.w	r8, r0, r1, lsl #20
34029336:	4926      	ldr	r1, [pc, #152]	@ (340293d0 <nema_set_blend+0x344>)
34029338:	ea48 15c5 	orr.w	r5, r8, r5, lsl #7
3402933c:	4319      	orrs	r1, r3
3402933e:	ab22      	add	r3, sp, #136	@ 0x88
34029340:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
34029344:	ea41 010e 	orr.w	r1, r1, lr
34029348:	e94c 5110 	strd	r5, r1, [ip, #-64]	@ 0x40
3402934c:	f1be 0f00 	cmp.w	lr, #0
34029350:	f000 8158 	beq.w	34029604 <nema_set_blend+0x578>
34029354:	9801      	ldr	r0, [sp, #4]
34029356:	f001 f851 	bl	3402a3fc <nema_matmul_bypass>
3402935a:	4621      	mov	r1, r4
3402935c:	2200      	movs	r2, #0
3402935e:	a812      	add	r0, sp, #72	@ 0x48
34029360:	f001 f912 	bl	3402a588 <nema_load_frag_shader>
34029364:	4b0e      	ldr	r3, [pc, #56]	@ (340293a0 <nema_set_blend+0x314>)
34029366:	f1c4 0420 	rsb	r4, r4, #32
3402936a:	6818      	ldr	r0, [r3, #0]
3402936c:	9b08      	ldr	r3, [sp, #32]
3402936e:	4303      	orrs	r3, r0
34029370:	4618      	mov	r0, r3
34029372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34029374:	4320      	orrs	r0, r4
34029376:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
3402937a:	f001 f91f 	bl	3402a5bc <nema_set_frag_ptr>
3402937e:	b023      	add	sp, #140	@ 0x8c
34029380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34029384:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34029388:	930e      	str	r3, [sp, #56]	@ 0x38
3402938a:	2a00      	cmp	r2, #0
3402938c:	f43f af32 	beq.w	340291f4 <nema_set_blend+0x168>
34029390:	2317      	movs	r3, #23
34029392:	e738      	b.n	34029206 <nema_set_blend+0x17a>
34029394:	340e5d50 	.word	0x340e5d50
34029398:	340e5d51 	.word	0x340e5d51
3402939c:	340e5f18 	.word	0x340e5f18
340293a0:	340d0a8c 	.word	0x340d0a8c
340293a4:	340cc4c0 	.word	0x340cc4c0
340293a8:	141f801f 	.word	0x141f801f
340293ac:	080c0003 	.word	0x080c0003
340293b0:	00f40182 	.word	0x00f40182
340293b4:	02009408 	.word	0x02009408
340293b8:	000c100b 	.word	0x000c100b
340293bc:	1000fc00 	.word	0x1000fc00
340293c0:	080c0000 	.word	0x080c0000
340293c4:	080c0002 	.word	0x080c0002
340293c8:	340cc4d0 	.word	0x340cc4d0
340293cc:	340cc500 	.word	0x340cc500
340293d0:	0a002007 	.word	0x0a002007
340293d4:	80000005 	.word	0x80000005
340293d8:	80000007 	.word	0x80000007
340293dc:	f1b8 3fff 	cmp.w	r8, #4294967295
340293e0:	f000 812d 	beq.w	3402963e <nema_set_blend+0x5b2>
340293e4:	f85e e028 	ldr.w	lr, [lr, r8, lsl #2]
340293e8:	f8cd c004 	str.w	ip, [sp, #4]
340293ec:	f44e 4e00 	orr.w	lr, lr, #32768	@ 0x8000
340293f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
340293f2:	2800      	cmp	r0, #0
340293f4:	f040 8083 	bne.w	340294fe <nema_set_blend+0x472>
340293f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
340293fa:	2800      	cmp	r0, #0
340293fc:	f040 80dc 	bne.w	340295b8 <nema_set_blend+0x52c>
34029400:	f04e 5080 	orr.w	r0, lr, #268435456	@ 0x10000000
34029404:	9009      	str	r0, [sp, #36]	@ 0x24
34029406:	980b      	ldr	r0, [sp, #44]	@ 0x2c
34029408:	2800      	cmp	r0, #0
3402940a:	f040 8150 	bne.w	340296ae <nema_set_blend+0x622>
3402940e:	4682      	mov	sl, r0
34029410:	f04f 0c02 	mov.w	ip, #2
34029414:	f04f 0e01 	mov.w	lr, #1
34029418:	e092      	b.n	34029540 <nema_set_blend+0x4b4>
3402941a:	2a00      	cmp	r2, #0
3402941c:	bf0c      	ite	eq
3402941e:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
34029422:	f44f 5260 	movne.w	r2, #14336	@ 0x3800
34029426:	e728      	b.n	3402927a <nema_set_blend+0x1ee>
34029428:	f04f 3020 	mov.w	r0, #538976288	@ 0x20202020
3402942c:	f001 f8d8 	bl	3402a5e0 <nema_set_raster_color>
34029430:	2000      	movs	r0, #0
34029432:	f000 fa25 	bl	34029880 <nema_enable_gradient>
34029436:	2701      	movs	r7, #1
34029438:	2200      	movs	r2, #0
3402943a:	20ff      	movs	r0, #255	@ 0xff
3402943c:	f240 1101 	movw	r1, #257	@ 0x101
34029440:	f04f 35ff 	mov.w	r5, #4294967295
34029444:	4613      	mov	r3, r2
34029446:	e9cd 220b 	strd	r2, r2, [sp, #44]	@ 0x2c
3402944a:	920d      	str	r2, [sp, #52]	@ 0x34
3402944c:	9209      	str	r2, [sp, #36]	@ 0x24
3402944e:	4694      	mov	ip, r2
34029450:	46bb      	mov	fp, r7
34029452:	4606      	mov	r6, r0
34029454:	460c      	mov	r4, r1
34029456:	46a8      	mov	r8, r5
34029458:	e63d      	b.n	340290d6 <nema_set_blend+0x4a>
3402945a:	980c      	ldr	r0, [sp, #48]	@ 0x30
3402945c:	2800      	cmp	r0, #0
3402945e:	f47f aeff 	bne.w	34029260 <nema_set_blend+0x1d4>
34029462:	f1b8 3fff 	cmp.w	r8, #4294967295
34029466:	f47f aefb 	bne.w	34029260 <nema_set_blend+0x1d4>
3402946a:	454d      	cmp	r5, r9
3402946c:	f47f aef8 	bne.w	34029260 <nema_set_blend+0x1d4>
34029470:	2f00      	cmp	r7, #0
34029472:	bf15      	itete	ne
34029474:	f44f 6400 	movne.w	r4, #2048	@ 0x800
34029478:	f44f 5400 	moveq.w	r4, #8192	@ 0x2000
3402947c:	f44f 1100 	movne.w	r1, #2097152	@ 0x200000
34029480:	f44f 0100 	moveq.w	r1, #8388608	@ 0x800000
34029484:	4b95      	ldr	r3, [pc, #596]	@ (340296dc <nema_set_blend+0x650>)
34029486:	4a96      	ldr	r2, [pc, #600]	@ (340296e0 <nema_set_blend+0x654>)
34029488:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
3402948c:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
34029490:	015b      	lsls	r3, r3, #5
34029492:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
34029496:	f043 430a 	orr.w	r3, r3, #2315255808	@ 0x8a000000
3402949a:	f043 0306 	orr.w	r3, r3, #6
3402949e:	4a91      	ldr	r2, [pc, #580]	@ (340296e4 <nema_set_blend+0x658>)
340294a0:	4323      	orrs	r3, r4
340294a2:	a822      	add	r0, sp, #136	@ 0x88
340294a4:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
340294a8:	430b      	orrs	r3, r1
340294aa:	ea42 15c5 	orr.w	r5, r2, r5, lsl #7
340294ae:	4664      	mov	r4, ip
340294b0:	e94e 5310 	strd	r5, r3, [lr, #-64]	@ 0x40
340294b4:	e74e      	b.n	34029354 <nema_set_blend+0x2c8>
340294b6:	9807      	ldr	r0, [sp, #28]
340294b8:	280e      	cmp	r0, #14
340294ba:	f47f aee8 	bne.w	3402928e <nema_set_blend+0x202>
340294be:	9802      	ldr	r0, [sp, #8]
340294c0:	2800      	cmp	r0, #0
340294c2:	f47f aee4 	bne.w	3402928e <nema_set_blend+0x202>
340294c6:	9803      	ldr	r0, [sp, #12]
340294c8:	2800      	cmp	r0, #0
340294ca:	f47f aee0 	bne.w	3402928e <nema_set_blend+0x202>
340294ce:	4664      	mov	r4, ip
340294d0:	46f4      	mov	ip, lr
340294d2:	2f00      	cmp	r7, #0
340294d4:	f43f aef3 	beq.w	340292be <nema_set_blend+0x232>
340294d8:	2100      	movs	r1, #0
340294da:	4b83      	ldr	r3, [pc, #524]	@ (340296e8 <nema_set_blend+0x65c>)
340294dc:	9305      	str	r3, [sp, #20]
340294de:	f1bb 0f00 	cmp.w	fp, #0
340294e2:	f000 80dd 	beq.w	340296a0 <nema_set_blend+0x614>
340294e6:	f1bb 0f01 	cmp.w	fp, #1
340294ea:	f04f 0e00 	mov.w	lr, #0
340294ee:	f040 80d5 	bne.w	3402969c <nema_set_blend+0x610>
340294f2:	4675      	mov	r5, lr
340294f4:	4a7a      	ldr	r2, [pc, #488]	@ (340296e0 <nema_set_blend+0x654>)
340294f6:	4e79      	ldr	r6, [pc, #484]	@ (340296dc <nema_set_blend+0x650>)
340294f8:	e08a      	b.n	34029610 <nema_set_blend+0x584>
340294fa:	2311      	movs	r3, #17
340294fc:	e683      	b.n	34029206 <nema_set_blend+0x17a>
340294fe:	487b      	ldr	r0, [pc, #492]	@ (340296ec <nema_set_blend+0x660>)
34029500:	9009      	str	r0, [sp, #36]	@ 0x24
34029502:	980b      	ldr	r0, [sp, #44]	@ 0x2c
34029504:	b390      	cbz	r0, 3402956c <nema_set_blend+0x4e0>
34029506:	f1b8 3fff 	cmp.w	r8, #4294967295
3402950a:	d02f      	beq.n	3402956c <nema_set_blend+0x4e0>
3402950c:	f241 0e0b 	movw	lr, #4107	@ 0x100b
34029510:	f04f 0a00 	mov.w	sl, #0
34029514:	980f      	ldr	r0, [sp, #60]	@ 0x3c
34029516:	f8df c1fc 	ldr.w	ip, [pc, #508]	@ 34029714 <nema_set_blend+0x688>
3402951a:	ea4e 1ec0 	orr.w	lr, lr, r0, lsl #7
3402951e:	ea4c 1cc8 	orr.w	ip, ip, r8, lsl #7
34029522:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34029526:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
3402952a:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
3402952e:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
34029532:	f04f 0c04 	mov.w	ip, #4
34029536:	f04f 0e03 	mov.w	lr, #3
3402953a:	f04f 0a02 	mov.w	sl, #2
3402953e:	9013      	str	r0, [sp, #76]	@ 0x4c
34029540:	f414 0f40 	tst.w	r4, #12582912	@ 0xc00000
34029544:	d025      	beq.n	34029592 <nema_set_blend+0x506>
34029546:	a822      	add	r0, sp, #136	@ 0x88
34029548:	eb00 0aca 	add.w	sl, r0, sl, lsl #3
3402954c:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
34029550:	4c67      	ldr	r4, [pc, #412]	@ (340296f0 <nema_set_blend+0x664>)
34029552:	e94a 0410 	strd	r0, r4, [sl, #-64]	@ 0x40
34029556:	e680      	b.n	3402925a <nema_set_blend+0x1ce>
34029558:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
3402955c:	e68d      	b.n	3402927a <nema_set_blend+0x1ee>
3402955e:	f024 4600 	bic.w	r6, r4, #2147483648	@ 0x80000000
34029562:	f04f 4302 	mov.w	r3, #2181038080	@ 0x82000000
34029566:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
3402956a:	e5d1      	b.n	34029110 <nema_set_blend+0x84>
3402956c:	f44f 5e00 	mov.w	lr, #8192	@ 0x2000
34029570:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 34029718 <nema_set_blend+0x68c>
34029574:	f414 0f40 	tst.w	r4, #12582912	@ 0xc00000
34029578:	ea4c 1cc8 	orr.w	ip, ip, r8, lsl #7
3402957c:	f8cd e04c 	str.w	lr, [sp, #76]	@ 0x4c
34029580:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
34029584:	f04f 0e02 	mov.w	lr, #2
34029588:	f04f 0c03 	mov.w	ip, #3
3402958c:	f04f 0a01 	mov.w	sl, #1
34029590:	d1d9      	bne.n	34029546 <nema_set_blend+0x4ba>
34029592:	46f4      	mov	ip, lr
34029594:	46d6      	mov	lr, sl
34029596:	e660      	b.n	3402925a <nema_set_blend+0x1ce>
34029598:	2101      	movs	r1, #1
3402959a:	4608      	mov	r0, r1
3402959c:	9001      	str	r0, [sp, #4]
3402959e:	2003      	movs	r0, #3
340295a0:	9002      	str	r0, [sp, #8]
340295a2:	2007      	movs	r0, #7
340295a4:	9106      	str	r1, [sp, #24]
340295a6:	2100      	movs	r1, #0
340295a8:	900a      	str	r0, [sp, #40]	@ 0x28
340295aa:	4852      	ldr	r0, [pc, #328]	@ (340296f4 <nema_set_blend+0x668>)
340295ac:	9103      	str	r1, [sp, #12]
340295ae:	9005      	str	r0, [sp, #20]
340295b0:	4851      	ldr	r0, [pc, #324]	@ (340296f8 <nema_set_blend+0x66c>)
340295b2:	9110      	str	r1, [sp, #64]	@ 0x40
340295b4:	9011      	str	r0, [sp, #68]	@ 0x44
340295b6:	e610      	b.n	340291da <nema_set_blend+0x14e>
340295b8:	4850      	ldr	r0, [pc, #320]	@ (340296fc <nema_set_blend+0x670>)
340295ba:	9009      	str	r0, [sp, #36]	@ 0x24
340295bc:	e7a1      	b.n	34029502 <nema_set_blend+0x476>
340295be:	484a      	ldr	r0, [pc, #296]	@ (340296e8 <nema_set_blend+0x65c>)
340295c0:	9706      	str	r7, [sp, #24]
340295c2:	9005      	str	r0, [sp, #20]
340295c4:	e9cd 7701 	strd	r7, r7, [sp, #4]
340295c8:	e5f9      	b.n	340291be <nema_set_blend+0x132>
340295ca:	f1bb 0f01 	cmp.w	fp, #1
340295ce:	f47f ae5b 	bne.w	34029288 <nema_set_blend+0x1fc>
340295d2:	9810      	ldr	r0, [sp, #64]	@ 0x40
340295d4:	2800      	cmp	r0, #0
340295d6:	f47f ae57 	bne.w	34029288 <nema_set_blend+0x1fc>
340295da:	9811      	ldr	r0, [sp, #68]	@ 0x44
340295dc:	4c41      	ldr	r4, [pc, #260]	@ (340296e4 <nema_set_blend+0x658>)
340295de:	ea40 3383 	orr.w	r3, r0, r3, lsl #14
340295e2:	9807      	ldr	r0, [sp, #28]
340295e4:	ea44 19c9 	orr.w	r9, r4, r9, lsl #7
340295e8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
340295ec:	431a      	orrs	r2, r3
340295ee:	ab22      	add	r3, sp, #136	@ 0x88
340295f0:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
340295f4:	ea49 5101 	orr.w	r1, r9, r1, lsl #20
340295f8:	f84e 2c3c 	str.w	r2, [lr, #-60]
340295fc:	4664      	mov	r4, ip
340295fe:	f84e 1c40 	str.w	r1, [lr, #-64]
34029602:	e6a7      	b.n	34029354 <nema_set_blend+0x2c8>
34029604:	f44f 0e80 	mov.w	lr, #4194304	@ 0x400000
34029608:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
3402960c:	46a4      	mov	ip, r4
3402960e:	3401      	adds	r4, #1
34029610:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
34029614:	f852 1027 	ldr.w	r1, [r2, r7, lsl #2]
34029618:	015a      	lsls	r2, r3, #5
3402961a:	4b39      	ldr	r3, [pc, #228]	@ (34029700 <nema_set_blend+0x674>)
3402961c:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
34029620:	4313      	orrs	r3, r2
34029622:	4938      	ldr	r1, [pc, #224]	@ (34029704 <nema_set_blend+0x678>)
34029624:	aa22      	add	r2, sp, #136	@ 0x88
34029626:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
3402962a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3402962c:	ea43 030e 	orr.w	r3, r3, lr
34029630:	ea41 11c9 	orr.w	r1, r1, r9, lsl #7
34029634:	432b      	orrs	r3, r5
34029636:	4311      	orrs	r1, r2
34029638:	e94c 1310 	strd	r1, r3, [ip, #-64]	@ 0x40
3402963c:	e68a      	b.n	34029354 <nema_set_blend+0x2c8>
3402963e:	9801      	ldr	r0, [sp, #4]
34029640:	b188      	cbz	r0, 34029666 <nema_set_blend+0x5da>
34029642:	9808      	ldr	r0, [sp, #32]
34029644:	f8cd c008 	str.w	ip, [sp, #8]
34029648:	f440 4e30 	orr.w	lr, r0, #45056	@ 0xb000
3402964c:	4826      	ldr	r0, [pc, #152]	@ (340296e8 <nema_set_blend+0x65c>)
3402964e:	f8cd c018 	str.w	ip, [sp, #24]
34029652:	9005      	str	r0, [sp, #20]
34029654:	e6cc      	b.n	340293f0 <nema_set_blend+0x364>
34029656:	2401      	movs	r4, #1
34029658:	482b      	ldr	r0, [pc, #172]	@ (34029708 <nema_set_blend+0x67c>)
3402965a:	9401      	str	r4, [sp, #4]
3402965c:	9009      	str	r0, [sp, #36]	@ 0x24
3402965e:	46a6      	mov	lr, r4
34029660:	f04f 0c02 	mov.w	ip, #2
34029664:	e5f9      	b.n	3402925a <nema_set_blend+0x1ce>
34029666:	2001      	movs	r0, #1
34029668:	f8cd c018 	str.w	ip, [sp, #24]
3402966c:	9001      	str	r0, [sp, #4]
3402966e:	46e6      	mov	lr, ip
34029670:	e6be      	b.n	340293f0 <nema_set_blend+0x364>
34029672:	ea4b 2707 	orr.w	r7, fp, r7, lsl #8
34029676:	0d36      	lsrs	r6, r6, #20
34029678:	4338      	orrs	r0, r7
3402967a:	0536      	lsls	r6, r6, #20
3402967c:	9201      	str	r2, [sp, #4]
3402967e:	f046 0601 	orr.w	r6, r6, #1
34029682:	f000 ffa1 	bl	3402a5c8 <nema_set_rop_blend_mode>
34029686:	4657      	mov	r7, sl
34029688:	f04f 0b01 	mov.w	fp, #1
3402968c:	9a01      	ldr	r2, [sp, #4]
3402968e:	e550      	b.n	34029132 <nema_set_blend+0xa6>
34029690:	9b06      	ldr	r3, [sp, #24]
34029692:	2b00      	cmp	r3, #0
34029694:	f43f af23 	beq.w	340294de <nema_set_blend+0x452>
34029698:	f8dd e00c 	ldr.w	lr, [sp, #12]
3402969c:	9805      	ldr	r0, [sp, #20]
3402969e:	e63f      	b.n	34029320 <nema_set_blend+0x294>
340296a0:	f44f 0e00 	mov.w	lr, #8388608	@ 0x800000
340296a4:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
340296a8:	4a0d      	ldr	r2, [pc, #52]	@ (340296e0 <nema_set_blend+0x654>)
340296aa:	4e0c      	ldr	r6, [pc, #48]	@ (340296dc <nema_set_blend+0x650>)
340296ac:	e7b0      	b.n	34029610 <nema_set_blend+0x584>
340296ae:	f1b8 3fff 	cmp.w	r8, #4294967295
340296b2:	f47f af2b 	bne.w	3402950c <nema_set_blend+0x480>
340296b6:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
340296ba:	f04f 0c02 	mov.w	ip, #2
340296be:	f04f 0e01 	mov.w	lr, #1
340296c2:	e73d      	b.n	34029540 <nema_set_blend+0x4b4>
340296c4:	4630      	mov	r0, r6
340296c6:	f000 fe99 	bl	3402a3fc <nema_matmul_bypass>
340296ca:	4a10      	ldr	r2, [pc, #64]	@ (3402970c <nema_set_blend+0x680>)
340296cc:	4b10      	ldr	r3, [pc, #64]	@ (34029710 <nema_set_blend+0x684>)
340296ce:	6810      	ldr	r0, [r2, #0]
340296d0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
340296d4:	f000 ff72 	bl	3402a5bc <nema_set_frag_ptr>
340296d8:	e54d      	b.n	34029176 <nema_set_blend+0xea>
340296da:	bf00      	nop
340296dc:	340cc4d0 	.word	0x340cc4d0
340296e0:	340cc500 	.word	0x340cc500
340296e4:	080c0002 	.word	0x080c0002
340296e8:	080c0000 	.word	0x080c0000
340296ec:	1000cc00 	.word	0x1000cc00
340296f0:	0081a042 	.word	0x0081a042
340296f4:	080c0003 	.word	0x080c0003
340296f8:	80000007 	.word	0x80000007
340296fc:	1000dc00 	.word	0x1000dc00
34029700:	80080206 	.word	0x80080206
34029704:	004e0002 	.word	0x004e0002
34029708:	1000fc00 	.word	0x1000fc00
3402970c:	340d0a8c 	.word	0x340d0a8c
34029710:	141f001f 	.word	0x141f001f
34029714:	080c100b 	.word	0x080c100b
34029718:	000c100b 	.word	0x000c100b

3402971c <init_nema_regs>:
3402971c:	b510      	push	{r4, lr}
3402971e:	2100      	movs	r1, #0
34029720:	20e8      	movs	r0, #232	@ 0xe8
34029722:	f7f5 ffe9 	bl	3401f6f8 <nema_reg_write>
34029726:	2100      	movs	r1, #0
34029728:	20fc      	movs	r0, #252	@ 0xfc
3402972a:	f7f5 ffe5 	bl	3401f6f8 <nema_reg_write>
3402972e:	2101      	movs	r1, #1
34029730:	f44f 7062 	mov.w	r0, #904	@ 0x388
34029734:	f7f5 ffe0 	bl	3401f6f8 <nema_reg_write>
34029738:	2000      	movs	r0, #0
3402973a:	f000 ffc3 	bl	3402a6c4 <nema_set_interrupt_ctrl>
3402973e:	f7ff fc73 	bl	34029028 <nema_blender_init>
34029742:	2100      	movs	r1, #0
34029744:	f44f 7000 	mov.w	r0, #512	@ 0x200
34029748:	f7ff f88a 	bl	34028860 <nema_cl_add_cmd>
3402974c:	f04f 31ff 	mov.w	r1, #4294967295
34029750:	f44f 7001 	mov.w	r0, #516	@ 0x204
34029754:	f7ff f884 	bl	34028860 <nema_cl_add_cmd>
34029758:	f000 fe12 	bl	3402a380 <nema_readHwConfig>
3402975c:	f410 2080 	ands.w	r0, r0, #262144	@ 0x40000
34029760:	d10f      	bne.n	34029782 <init_nema_regs+0x66>
34029762:	4b14      	ldr	r3, [pc, #80]	@ (340297b4 <init_nema_regs+0x98>)
34029764:	681b      	ldr	r3, [r3, #0]
34029766:	7298      	strb	r0, [r3, #10]
34029768:	2400      	movs	r4, #0
3402976a:	e9d3 2003 	ldrd	r2, r0, [r3, #12]
3402976e:	69d9      	ldr	r1, [r3, #28]
34029770:	4302      	orrs	r2, r0
34029772:	430a      	orrs	r2, r1
34029774:	e9c3 4205 	strd	r4, r2, [r3, #20]
34029778:	f000 fe10 	bl	3402a39c <nema_readHwConfigH>
3402977c:	0583      	lsls	r3, r0, #22
3402977e:	d40c      	bmi.n	3402979a <init_nema_regs+0x7e>
34029780:	bd10      	pop	{r4, pc}
34029782:	2007      	movs	r0, #7
34029784:	f000 ff26 	bl	3402a5d4 <nema_set_depth_ctrl>
34029788:	2200      	movs	r2, #0
3402978a:	4c0a      	ldr	r4, [pc, #40]	@ (340297b4 <init_nema_regs+0x98>)
3402978c:	6823      	ldr	r3, [r4, #0]
3402978e:	725a      	strb	r2, [r3, #9]
34029790:	7a18      	ldrb	r0, [r3, #8]
34029792:	f000 fe07 	bl	3402a3a4 <nema_enable_tiling>
34029796:	6823      	ldr	r3, [r4, #0]
34029798:	e7e6      	b.n	34029768 <init_nema_regs+0x4c>
3402979a:	4621      	mov	r1, r4
3402979c:	f44f 705d 	mov.w	r0, #884	@ 0x374
340297a0:	f7f5 ffaa 	bl	3401f6f8 <nema_reg_write>
340297a4:	4621      	mov	r1, r4
340297a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340297aa:	f44f 705a 	mov.w	r0, #872	@ 0x368
340297ae:	f7f5 bfa3 	b.w	3401f6f8 <nema_reg_write>
340297b2:	bf00      	nop
340297b4:	340e5f18 	.word	0x340e5f18

340297b8 <nema_init>:
340297b8:	b538      	push	{r3, r4, r5, lr}
340297ba:	f000 fddd 	bl	3402a378 <nema_get_context>
340297be:	4c16      	ldr	r4, [pc, #88]	@ (34029818 <nema_init+0x60>)
340297c0:	6020      	str	r0, [r4, #0]
340297c2:	f7f6 f80f 	bl	3401f7e4 <nema_sys_init>
340297c6:	1e05      	subs	r5, r0, #0
340297c8:	db13      	blt.n	340297f2 <nema_init+0x3a>
340297ca:	f44f 70f6 	mov.w	r0, #492	@ 0x1ec
340297ce:	f7f5 ff8d 	bl	3401f6ec <nema_reg_read>
340297d2:	4b12      	ldr	r3, [pc, #72]	@ (3402981c <nema_init+0x64>)
340297d4:	4298      	cmp	r0, r3
340297d6:	d117      	bne.n	34029808 <nema_init+0x50>
340297d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
340297dc:	2100      	movs	r1, #0
340297de:	6820      	ldr	r0, [r4, #0]
340297e0:	f7f7 ff98 	bl	34021714 <memset>
340297e4:	2300      	movs	r3, #0
340297e6:	6822      	ldr	r2, [r4, #0]
340297e8:	6053      	str	r3, [r2, #4]
340297ea:	b14d      	cbz	r5, 34029800 <nema_init+0x48>
340297ec:	461d      	mov	r5, r3
340297ee:	4628      	mov	r0, r5
340297f0:	bd38      	pop	{r3, r4, r5, pc}
340297f2:	6822      	ldr	r2, [r4, #0]
340297f4:	4628      	mov	r0, r5
340297f6:	6a13      	ldr	r3, [r2, #32]
340297f8:	f043 0301 	orr.w	r3, r3, #1
340297fc:	6213      	str	r3, [r2, #32]
340297fe:	bd38      	pop	{r3, r4, r5, pc}
34029800:	f7ff ff8c 	bl	3402971c <init_nema_regs>
34029804:	4628      	mov	r0, r5
34029806:	bd38      	pop	{r3, r4, r5, pc}
34029808:	6822      	ldr	r2, [r4, #0]
3402980a:	f04f 35ff 	mov.w	r5, #4294967295
3402980e:	6a13      	ldr	r3, [r2, #32]
34029810:	f043 0302 	orr.w	r3, r3, #2
34029814:	6213      	str	r3, [r2, #32]
34029816:	e7ea      	b.n	340297ee <nema_init+0x36>
34029818:	340e5f18 	.word	0x340e5f18
3402981c:	86362000 	.word	0x86362000

34029820 <nema_set_error>:
34029820:	4b02      	ldr	r3, [pc, #8]	@ (3402982c <nema_set_error+0xc>)
34029822:	681a      	ldr	r2, [r3, #0]
34029824:	6a13      	ldr	r3, [r2, #32]
34029826:	4318      	orrs	r0, r3
34029828:	6210      	str	r0, [r2, #32]
3402982a:	4770      	bx	lr
3402982c:	340e5f18 	.word	0x340e5f18

34029830 <nema_get_error>:
34029830:	2200      	movs	r2, #0
34029832:	4b02      	ldr	r3, [pc, #8]	@ (3402983c <nema_get_error+0xc>)
34029834:	681b      	ldr	r3, [r3, #0]
34029836:	6a18      	ldr	r0, [r3, #32]
34029838:	621a      	str	r2, [r3, #32]
3402983a:	4770      	bx	lr
3402983c:	340e5f18 	.word	0x340e5f18

34029840 <nema_set_clip>:
34029840:	b570      	push	{r4, r5, r6, lr}
34029842:	460d      	mov	r5, r1
34029844:	4c0d      	ldr	r4, [pc, #52]	@ (3402987c <nema_set_clip+0x3c>)
34029846:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
3402984a:	6826      	ldr	r6, [r4, #0]
3402984c:	b289      	uxth	r1, r1
3402984e:	ea25 74e5 	bic.w	r4, r5, r5, asr #31
34029852:	e9c6 0509 	strd	r0, r5, [r6, #36]	@ 0x24
34029856:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
3402985a:	e9c6 230b 	strd	r2, r3, [r6, #44]	@ 0x2c
3402985e:	1814      	adds	r4, r2, r0
34029860:	f44f 7088 	mov.w	r0, #272	@ 0x110
34029864:	441d      	add	r5, r3
34029866:	f7fe fffb 	bl	34028860 <nema_cl_add_cmd>
3402986a:	b2a1      	uxth	r1, r4
3402986c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
34029870:	f44f 708a 	mov.w	r0, #276	@ 0x114
34029874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
34029878:	f7fe bff2 	b.w	34028860 <nema_cl_add_cmd>
3402987c:	340e5f18 	.word	0x340e5f18

34029880 <nema_enable_gradient>:
34029880:	2800      	cmp	r0, #0
34029882:	bf14      	ite	ne
34029884:	f04f 6100 	movne.w	r1, #134217728	@ 0x8000000
34029888:	2100      	moveq	r1, #0
3402988a:	b410      	push	{r4}
3402988c:	4b06      	ldr	r3, [pc, #24]	@ (340298a8 <nema_enable_gradient+0x28>)
3402988e:	681a      	ldr	r2, [r3, #0]
34029890:	69d0      	ldr	r0, [r2, #28]
34029892:	e9d2 3403 	ldrd	r3, r4, [r2, #12]
34029896:	4323      	orrs	r3, r4
34029898:	4303      	orrs	r3, r0
3402989a:	430b      	orrs	r3, r1
3402989c:	e9c2 1305 	strd	r1, r3, [r2, #20]
340298a0:	f85d 4b04 	ldr.w	r4, [sp], #4
340298a4:	4770      	bx	lr
340298a6:	bf00      	nop
340298a8:	340e5f18 	.word	0x340e5f18

340298ac <nema_bind_src_tex>:
340298ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340298b0:	9c06      	ldr	r4, [sp, #24]
340298b2:	4617      	mov	r7, r2
340298b4:	1c62      	adds	r2, r4, #1
340298b6:	4605      	mov	r5, r0
340298b8:	460e      	mov	r6, r1
340298ba:	f89d 001c 	ldrb.w	r0, [sp, #28]
340298be:	d023      	beq.n	34029908 <nema_bind_src_tex+0x5c>
340298c0:	2101      	movs	r1, #1
340298c2:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 340299e8 <nema_bind_src_tex+0x13c>
340298c6:	0400      	lsls	r0, r0, #16
340298c8:	f8d8 2000 	ldr.w	r2, [r8]
340298cc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
340298d0:	b2a4      	uxth	r4, r4
340298d2:	4320      	orrs	r0, r4
340298d4:	65d0      	str	r0, [r2, #92]	@ 0x5c
340298d6:	e9c2 5614 	strd	r5, r6, [r2, #80]	@ 0x50
340298da:	6597      	str	r7, [r2, #88]	@ 0x58
340298dc:	e9c2 1318 	strd	r1, r3, [r2, #96]	@ 0x60
340298e0:	2003      	movs	r0, #3
340298e2:	f7ff f831 	bl	34028948 <nema_cl_get_space>
340298e6:	b168      	cbz	r0, 34029904 <nema_bind_src_tex+0x58>
340298e8:	2210      	movs	r2, #16
340298ea:	2114      	movs	r1, #20
340298ec:	2318      	movs	r3, #24
340298ee:	6002      	str	r2, [r0, #0]
340298f0:	e9c0 5101 	strd	r5, r1, [r0, #4]
340298f4:	f8d8 2000 	ldr.w	r2, [r8]
340298f8:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
340298fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
340298fe:	6146      	str	r6, [r0, #20]
34029900:	e9c0 2303 	strd	r2, r3, [r0, #12]
34029904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34029908:	06c1      	lsls	r1, r0, #27
3402990a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
3402990e:	d434      	bmi.n	3402997a <nema_bind_src_tex+0xce>
34029910:	2a12      	cmp	r2, #18
34029912:	4634      	mov	r4, r6
34029914:	d038      	beq.n	34029988 <nema_bind_src_tex+0xdc>
34029916:	f1a2 0116 	sub.w	r1, r2, #22
3402991a:	2901      	cmp	r1, #1
3402991c:	d934      	bls.n	34029988 <nema_bind_src_tex+0xdc>
3402991e:	2a4e      	cmp	r2, #78	@ 0x4e
34029920:	d032      	beq.n	34029988 <nema_bind_src_tex+0xdc>
34029922:	f1a2 014c 	sub.w	r1, r2, #76	@ 0x4c
34029926:	2901      	cmp	r1, #1
34029928:	d937      	bls.n	3402999a <nema_bind_src_tex+0xee>
3402992a:	f1a2 010b 	sub.w	r1, r2, #11
3402992e:	2943      	cmp	r1, #67	@ 0x43
34029930:	d84e      	bhi.n	340299d0 <nema_bind_src_tex+0x124>
34029932:	e8df f001 	tbb	[pc, r1]
34029936:	4545      	.short	0x4545
34029938:	4d4d4d4d 	.word	0x4d4d4d4d
3402993c:	4d4d4b4d 	.word	0x4d4d4b4d
34029940:	4d37374d 	.word	0x4d37374d
34029944:	4d4d4d4d 	.word	0x4d4d4d4d
34029948:	4d4d4d4d 	.word	0x4d4d4d4d
3402994c:	4d4d4d4d 	.word	0x4d4d4d4d
34029950:	3a454d4d 	.word	0x3a454d4d
34029954:	3f3a453f 	.word	0x3f3a453f
34029958:	3a4d4d4d 	.word	0x3a4d4d4d
3402995c:	3f4d4d3a 	.word	0x3f4d4d3a
34029960:	4d4d4d3f 	.word	0x4d4d4d3f
34029964:	4d4d4d4d 	.word	0x4d4d4d4d
34029968:	4d4d4d4d 	.word	0x4d4d4d4d
3402996c:	4d4d4d4d 	.word	0x4d4d4d4d
34029970:	4d4d4d4d 	.word	0x4d4d4d4d
34029974:	374d4d4d 	.word	0x374d4d4d
34029978:	3737      	.short	0x3737
3402997a:	1cf4      	adds	r4, r6, #3
3402997c:	bf48      	it	mi
3402997e:	1db4      	addmi	r4, r6, #6
34029980:	2a12      	cmp	r2, #18
34029982:	f024 0403 	bic.w	r4, r4, #3
34029986:	d1c6      	bne.n	34029916 <nema_bind_src_tex+0x6a>
34029988:	1ce1      	adds	r1, r4, #3
3402998a:	bf48      	it	mi
3402998c:	1da1      	addmi	r1, r4, #6
3402998e:	f021 0403 	bic.w	r4, r1, #3
34029992:	f1a2 014c 	sub.w	r1, r2, #76	@ 0x4c
34029996:	2901      	cmp	r1, #1
34029998:	d8c7      	bhi.n	3402992a <nema_bind_src_tex+0x7e>
3402999a:	3401      	adds	r4, #1
3402999c:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
340299a0:	f024 0401 	bic.w	r4, r4, #1
340299a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
340299a8:	e78a      	b.n	340298c0 <nema_bind_src_tex+0x14>
340299aa:	0062      	lsls	r2, r4, #1
340299ac:	1dd4      	adds	r4, r2, #7
340299ae:	d404      	bmi.n	340299ba <nema_bind_src_tex+0x10e>
340299b0:	10e4      	asrs	r4, r4, #3
340299b2:	e785      	b.n	340298c0 <nema_bind_src_tex+0x14>
340299b4:	00a2      	lsls	r2, r4, #2
340299b6:	1dd4      	adds	r4, r2, #7
340299b8:	d5fa      	bpl.n	340299b0 <nema_bind_src_tex+0x104>
340299ba:	f102 040e 	add.w	r4, r2, #14
340299be:	e7f7      	b.n	340299b0 <nema_bind_src_tex+0x104>
340299c0:	1de2      	adds	r2, r4, #7
340299c2:	bf48      	it	mi
340299c4:	f104 020e 	addmi.w	r2, r4, #14
340299c8:	10d4      	asrs	r4, r2, #3
340299ca:	e779      	b.n	340298c0 <nema_bind_src_tex+0x14>
340299cc:	0064      	lsls	r4, r4, #1
340299ce:	e777      	b.n	340298c0 <nema_bind_src_tex+0x14>
340299d0:	3a04      	subs	r2, #4
340299d2:	2a4a      	cmp	r2, #74	@ 0x4a
340299d4:	bf8e      	itee	hi
340299d6:	2204      	movhi	r2, #4
340299d8:	4902      	ldrls	r1, [pc, #8]	@ (340299e4 <nema_bind_src_tex+0x138>)
340299da:	568a      	ldrsbls	r2, [r1, r2]
340299dc:	fb02 f404 	mul.w	r4, r2, r4
340299e0:	e76e      	b.n	340298c0 <nema_bind_src_tex+0x14>
340299e2:	bf00      	nop
340299e4:	340cc530 	.word	0x340cc530
340299e8:	340e5f18 	.word	0x340e5f18

340299ec <nema_bind_dst_tex>:
340299ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
340299f0:	9c08      	ldr	r4, [sp, #32]
340299f2:	4698      	mov	r8, r3
340299f4:	4616      	mov	r6, r2
340299f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
340299fa:	1c63      	adds	r3, r4, #1
340299fc:	4607      	mov	r7, r0
340299fe:	460d      	mov	r5, r1
34029a00:	d03c      	beq.n	34029a7c <nema_bind_dst_tex+0x90>
34029a02:	2a12      	cmp	r2, #18
34029a04:	d011      	beq.n	34029a2a <nema_bind_dst_tex+0x3e>
34029a06:	f1a2 0316 	sub.w	r3, r2, #22
34029a0a:	2b01      	cmp	r3, #1
34029a0c:	d90d      	bls.n	34029a2a <nema_bind_dst_tex+0x3e>
34029a0e:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 34029c1c <nema_bind_dst_tex+0x230>
34029a12:	3a4c      	subs	r2, #76	@ 0x4c
34029a14:	2a01      	cmp	r2, #1
34029a16:	f8d9 3000 	ldr.w	r3, [r9]
34029a1a:	f240 80d8 	bls.w	34029bce <nema_bind_dst_tex+0x1e2>
34029a1e:	7a58      	ldrb	r0, [r3, #9]
34029a20:	f000 fcc0 	bl	3402a3a4 <nema_enable_tiling>
34029a24:	e00a      	b.n	34029a3c <nema_bind_dst_tex+0x50>
34029a26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
34029a2a:	2201      	movs	r2, #1
34029a2c:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 34029c1c <nema_bind_dst_tex+0x230>
34029a30:	4610      	mov	r0, r2
34029a32:	f8d9 3000 	ldr.w	r3, [r9]
34029a36:	721a      	strb	r2, [r3, #8]
34029a38:	f000 fcb4 	bl	3402a3a4 <nema_enable_tiling>
34029a3c:	2301      	movs	r3, #1
34029a3e:	f8d9 1000 	ldr.w	r1, [r9]
34029a42:	b2a4      	uxth	r4, r4
34029a44:	ea44 6408 	orr.w	r4, r4, r8, lsl #24
34029a48:	644c      	str	r4, [r1, #68]	@ 0x44
34029a4a:	e9c1 750e 	strd	r7, r5, [r1, #56]	@ 0x38
34029a4e:	640e      	str	r6, [r1, #64]	@ 0x40
34029a50:	e9c1 3812 	strd	r3, r8, [r1, #72]	@ 0x48
34029a54:	2003      	movs	r0, #3
34029a56:	f7fe ff77 	bl	34028948 <nema_cl_get_space>
34029a5a:	b168      	cbz	r0, 34029a78 <nema_bind_dst_tex+0x8c>
34029a5c:	2200      	movs	r2, #0
34029a5e:	2104      	movs	r1, #4
34029a60:	2308      	movs	r3, #8
34029a62:	6002      	str	r2, [r0, #0]
34029a64:	e9c0 7101 	strd	r7, r1, [r0, #4]
34029a68:	f8d9 2000 	ldr.w	r2, [r9]
34029a6c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
34029a70:	6c52      	ldr	r2, [r2, #68]	@ 0x44
34029a72:	6145      	str	r5, [r0, #20]
34029a74:	e9c0 2303 	strd	r2, r3, [r0, #12]
34029a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34029a7c:	2a12      	cmp	r2, #18
34029a7e:	d007      	beq.n	34029a90 <nema_bind_dst_tex+0xa4>
34029a80:	f1a2 0316 	sub.w	r3, r2, #22
34029a84:	2b01      	cmp	r3, #1
34029a86:	d903      	bls.n	34029a90 <nema_bind_dst_tex+0xa4>
34029a88:	2a4e      	cmp	r2, #78	@ 0x4e
34029a8a:	d001      	beq.n	34029a90 <nema_bind_dst_tex+0xa4>
34029a8c:	460c      	mov	r4, r1
34029a8e:	e004      	b.n	34029a9a <nema_bind_dst_tex+0xae>
34029a90:	1cec      	adds	r4, r5, #3
34029a92:	bf48      	it	mi
34029a94:	1dac      	addmi	r4, r5, #6
34029a96:	f024 0403 	bic.w	r4, r4, #3
34029a9a:	f1a2 034c 	sub.w	r3, r2, #76	@ 0x4c
34029a9e:	2b01      	cmp	r3, #1
34029aa0:	f240 809a 	bls.w	34029bd8 <nema_bind_dst_tex+0x1ec>
34029aa4:	f1a2 030b 	sub.w	r3, r2, #11
34029aa8:	2b43      	cmp	r3, #67	@ 0x43
34029aaa:	f200 80ac 	bhi.w	34029c06 <nema_bind_dst_tex+0x21a>
34029aae:	a101      	add	r1, pc, #4	@ (adr r1, 34029ab4 <nema_bind_dst_tex+0xc8>)
34029ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
34029ab4:	34029bc7 	.word	0x34029bc7
34029ab8:	34029bc7 	.word	0x34029bc7
34029abc:	34029c07 	.word	0x34029c07
34029ac0:	34029c07 	.word	0x34029c07
34029ac4:	34029c07 	.word	0x34029c07
34029ac8:	34029c07 	.word	0x34029c07
34029acc:	34029c07 	.word	0x34029c07
34029ad0:	34029c03 	.word	0x34029c03
34029ad4:	34029c07 	.word	0x34029c07
34029ad8:	34029c07 	.word	0x34029c07
34029adc:	34029c07 	.word	0x34029c07
34029ae0:	34029a27 	.word	0x34029a27
34029ae4:	34029a27 	.word	0x34029a27
34029ae8:	34029c07 	.word	0x34029c07
34029aec:	34029c07 	.word	0x34029c07
34029af0:	34029c07 	.word	0x34029c07
34029af4:	34029c07 	.word	0x34029c07
34029af8:	34029c07 	.word	0x34029c07
34029afc:	34029c07 	.word	0x34029c07
34029b00:	34029c07 	.word	0x34029c07
34029b04:	34029c07 	.word	0x34029c07
34029b08:	34029c07 	.word	0x34029c07
34029b0c:	34029c07 	.word	0x34029c07
34029b10:	34029c07 	.word	0x34029c07
34029b14:	34029c07 	.word	0x34029c07
34029b18:	34029c07 	.word	0x34029c07
34029b1c:	34029c07 	.word	0x34029c07
34029b20:	34029c07 	.word	0x34029c07
34029b24:	34029bc7 	.word	0x34029bc7
34029b28:	34029bf7 	.word	0x34029bf7
34029b2c:	34029bc5 	.word	0x34029bc5
34029b30:	34029bc7 	.word	0x34029bc7
34029b34:	34029bf7 	.word	0x34029bf7
34029b38:	34029bc5 	.word	0x34029bc5
34029b3c:	34029c07 	.word	0x34029c07
34029b40:	34029c07 	.word	0x34029c07
34029b44:	34029c07 	.word	0x34029c07
34029b48:	34029bf7 	.word	0x34029bf7
34029b4c:	34029bf7 	.word	0x34029bf7
34029b50:	34029c07 	.word	0x34029c07
34029b54:	34029c07 	.word	0x34029c07
34029b58:	34029bc5 	.word	0x34029bc5
34029b5c:	34029bc5 	.word	0x34029bc5
34029b60:	34029c07 	.word	0x34029c07
34029b64:	34029c07 	.word	0x34029c07
34029b68:	34029c07 	.word	0x34029c07
34029b6c:	34029c07 	.word	0x34029c07
34029b70:	34029c07 	.word	0x34029c07
34029b74:	34029c07 	.word	0x34029c07
34029b78:	34029c07 	.word	0x34029c07
34029b7c:	34029c07 	.word	0x34029c07
34029b80:	34029c07 	.word	0x34029c07
34029b84:	34029c07 	.word	0x34029c07
34029b88:	34029c07 	.word	0x34029c07
34029b8c:	34029c07 	.word	0x34029c07
34029b90:	34029c07 	.word	0x34029c07
34029b94:	34029c07 	.word	0x34029c07
34029b98:	34029c07 	.word	0x34029c07
34029b9c:	34029c07 	.word	0x34029c07
34029ba0:	34029c07 	.word	0x34029c07
34029ba4:	34029c07 	.word	0x34029c07
34029ba8:	34029c07 	.word	0x34029c07
34029bac:	34029c07 	.word	0x34029c07
34029bb0:	34029c07 	.word	0x34029c07
34029bb4:	34029c07 	.word	0x34029c07
34029bb8:	34029be3 	.word	0x34029be3
34029bbc:	34029be3 	.word	0x34029be3
34029bc0:	34029be9 	.word	0x34029be9
34029bc4:	00a4      	lsls	r4, r4, #2
34029bc6:	1de3      	adds	r3, r4, #7
34029bc8:	d418      	bmi.n	34029bfc <nema_bind_dst_tex+0x210>
34029bca:	10dc      	asrs	r4, r3, #3
34029bcc:	e719      	b.n	34029a02 <nema_bind_dst_tex+0x16>
34029bce:	2001      	movs	r0, #1
34029bd0:	7218      	strb	r0, [r3, #8]
34029bd2:	f000 fbfd 	bl	3402a3d0 <nema_enable_tiling_2x2>
34029bd6:	e731      	b.n	34029a3c <nema_bind_dst_tex+0x50>
34029bd8:	3401      	adds	r4, #1
34029bda:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
34029bde:	f024 0401 	bic.w	r4, r4, #1
34029be2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
34029be6:	e70c      	b.n	34029a02 <nema_bind_dst_tex+0x16>
34029be8:	f8df 9030 	ldr.w	r9, [pc, #48]	@ 34029c1c <nema_bind_dst_tex+0x230>
34029bec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
34029bf0:	f8d9 3000 	ldr.w	r3, [r9]
34029bf4:	e713      	b.n	34029a1e <nema_bind_dst_tex+0x32>
34029bf6:	0064      	lsls	r4, r4, #1
34029bf8:	1de3      	adds	r3, r4, #7
34029bfa:	d5e6      	bpl.n	34029bca <nema_bind_dst_tex+0x1de>
34029bfc:	f104 030e 	add.w	r3, r4, #14
34029c00:	e7e3      	b.n	34029bca <nema_bind_dst_tex+0x1de>
34029c02:	0064      	lsls	r4, r4, #1
34029c04:	e711      	b.n	34029a2a <nema_bind_dst_tex+0x3e>
34029c06:	1f13      	subs	r3, r2, #4
34029c08:	2b4a      	cmp	r3, #74	@ 0x4a
34029c0a:	bf8e      	itee	hi
34029c0c:	2304      	movhi	r3, #4
34029c0e:	4902      	ldrls	r1, [pc, #8]	@ (34029c18 <nema_bind_dst_tex+0x22c>)
34029c10:	56cb      	ldrsbls	r3, [r1, r3]
34029c12:	fb03 f404 	mul.w	r4, r3, r4
34029c16:	e6f4      	b.n	34029a02 <nema_bind_dst_tex+0x16>
34029c18:	340cc530 	.word	0x340cc530
34029c1c:	340e5f18 	.word	0x340e5f18

34029c20 <nema_clear>:
34029c20:	f04f 33ff 	mov.w	r3, #4294967295
34029c24:	b570      	push	{r4, r5, r6, lr}
34029c26:	4604      	mov	r4, r0
34029c28:	461a      	mov	r2, r3
34029c2a:	2100      	movs	r1, #0
34029c2c:	2001      	movs	r0, #1
34029c2e:	f7ff fa2d 	bl	3402908c <nema_set_blend>
34029c32:	4b07      	ldr	r3, [pc, #28]	@ (34029c50 <nema_clear+0x30>)
34029c34:	4620      	mov	r0, r4
34029c36:	681b      	ldr	r3, [r3, #0]
34029c38:	e9d3 450f 	ldrd	r4, r5, [r3, #60]	@ 0x3c
34029c3c:	f000 fcd0 	bl	3402a5e0 <nema_set_raster_color>
34029c40:	2100      	movs	r1, #0
34029c42:	462b      	mov	r3, r5
34029c44:	4622      	mov	r2, r4
34029c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
34029c4a:	4608      	mov	r0, r1
34029c4c:	f000 bcce 	b.w	3402a5ec <nema_raster_rect>
34029c50:	340e5f18 	.word	0x340e5f18

34029c54 <nema_blit_quad_fit>:
34029c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34029c58:	ed2d 8b08 	vpush	{d8-d11}
34029c5c:	4b2c      	ldr	r3, [pc, #176]	@ (34029d10 <nema_blit_quad_fit+0xbc>)
34029c5e:	b08e      	sub	sp, #56	@ 0x38
34029c60:	681b      	ldr	r3, [r3, #0]
34029c62:	aa05      	add	r2, sp, #20
34029c64:	e9d3 0115 	ldrd	r0, r1, [r3, #84]	@ 0x54
34029c68:	eef0 ba40 	vmov.f32	s23, s0
34029c6c:	eeb0 ba60 	vmov.f32	s22, s1
34029c70:	eef0 aa41 	vmov.f32	s21, s2
34029c74:	eeb0 aa61 	vmov.f32	s20, s3
34029c78:	eef0 9a42 	vmov.f32	s19, s4
34029c7c:	eeb0 9a62 	vmov.f32	s18, s5
34029c80:	eef0 8a43 	vmov.f32	s17, s6
34029c84:	eeb0 8a63 	vmov.f32	s16, s7
34029c88:	f000 fa0e 	bl	3402a0a8 <nema_mat3x3_quad_to_rect>
34029c8c:	b120      	cbz	r0, 34029c98 <nema_blit_quad_fit+0x44>
34029c8e:	b00e      	add	sp, #56	@ 0x38
34029c90:	ecbd 8b08 	vpop	{d8-d11}
34029c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34029c98:	a805      	add	r0, sp, #20
34029c9a:	f000 fbbb 	bl	3402a414 <nema_set_matrix>
34029c9e:	eeb0 0a6b 	vmov.f32	s0, s23
34029ca2:	f000 f937 	bl	34029f14 <nema_f2fx>
34029ca6:	eeb0 0a4b 	vmov.f32	s0, s22
34029caa:	4604      	mov	r4, r0
34029cac:	f000 f932 	bl	34029f14 <nema_f2fx>
34029cb0:	eeb0 0a6a 	vmov.f32	s0, s21
34029cb4:	4605      	mov	r5, r0
34029cb6:	f000 f92d 	bl	34029f14 <nema_f2fx>
34029cba:	eeb0 0a4a 	vmov.f32	s0, s20
34029cbe:	4606      	mov	r6, r0
34029cc0:	f000 f928 	bl	34029f14 <nema_f2fx>
34029cc4:	eeb0 0a69 	vmov.f32	s0, s19
34029cc8:	4607      	mov	r7, r0
34029cca:	f000 f923 	bl	34029f14 <nema_f2fx>
34029cce:	eeb0 0a49 	vmov.f32	s0, s18
34029cd2:	4682      	mov	sl, r0
34029cd4:	f000 f91e 	bl	34029f14 <nema_f2fx>
34029cd8:	eeb0 0a68 	vmov.f32	s0, s17
34029cdc:	4680      	mov	r8, r0
34029cde:	f000 f919 	bl	34029f14 <nema_f2fx>
34029ce2:	eeb0 0a48 	vmov.f32	s0, s16
34029ce6:	4681      	mov	r9, r0
34029ce8:	f000 f914 	bl	34029f14 <nema_f2fx>
34029cec:	f8cd a000 	str.w	sl, [sp]
34029cf0:	e9cd 9002 	strd	r9, r0, [sp, #8]
34029cf4:	f8cd 8004 	str.w	r8, [sp, #4]
34029cf8:	463b      	mov	r3, r7
34029cfa:	4632      	mov	r2, r6
34029cfc:	4629      	mov	r1, r5
34029cfe:	4620      	mov	r0, r4
34029d00:	f000 fc9e 	bl	3402a640 <nema_raster_quad_fx>
34029d04:	b00e      	add	sp, #56	@ 0x38
34029d06:	ecbd 8b08 	vpop	{d8-d11}
34029d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34029d0e:	bf00      	nop
34029d10:	340e5f18 	.word	0x340e5f18

34029d14 <nema_get_sw_device_name>:
34029d14:	4800      	ldr	r0, [pc, #0]	@ (34029d18 <nema_get_sw_device_name+0x4>)
34029d16:	4770      	bx	lr
34029d18:	340cc57c 	.word	0x340cc57c

34029d1c <nema_sin>:
34029d1c:	eddf 7a39 	vldr	s15, [pc, #228]	@ 34029e04 <nema_sin+0xe8>
34029d20:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 34029e08 <nema_sin+0xec>
34029d24:	ee20 0a27 	vmul.f32	s0, s0, s15
34029d28:	ee30 0a47 	vsub.f32	s0, s0, s14
34029d2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
34029d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029d34:	d514      	bpl.n	34029d60 <nema_sin+0x44>
34029d36:	eef1 7a40 	vneg.f32	s15, s0
34029d3a:	eddf 6a34 	vldr	s13, [pc, #208]	@ 34029e0c <nema_sin+0xf0>
34029d3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
34029d42:	eefd 7ac7 	vcvt.s32.f32	s15, s14
34029d46:	ee17 3a90 	vmov	r3, s15
34029d4a:	3301      	adds	r3, #1
34029d4c:	ee07 3a90 	vmov	s15, r3
34029d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34029d54:	ee67 7aa6 	vmul.f32	s15, s15, s13
34029d58:	ee30 0a67 	vsub.f32	s0, s0, s15
34029d5c:	eeb1 0a40 	vneg.f32	s0, s0
34029d60:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 34029e0c <nema_sin+0xf0>
34029d64:	eeb4 0ac7 	vcmpe.f32	s0, s14
34029d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029d6c:	db09      	blt.n	34029d82 <nema_sin+0x66>
34029d6e:	eec0 7a07 	vdiv.f32	s15, s0, s14
34029d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34029d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34029d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
34029d7e:	ee30 0a67 	vsub.f32	s0, s0, s15
34029d82:	eddf 7a23 	vldr	s15, [pc, #140]	@ 34029e10 <nema_sin+0xf4>
34029d86:	eeb4 0ae7 	vcmpe.f32	s0, s15
34029d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029d8e:	db34      	blt.n	34029dfa <nema_sin+0xde>
34029d90:	ee30 0a67 	vsub.f32	s0, s0, s15
34029d94:	2201      	movs	r2, #1
34029d96:	f04f 33ff 	mov.w	r3, #4294967295
34029d9a:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 34029e08 <nema_sin+0xec>
34029d9e:	eeb4 0ae7 	vcmpe.f32	s0, s15
34029da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029da6:	dd04      	ble.n	34029db2 <nema_sin+0x96>
34029da8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 34029e10 <nema_sin+0xf4>
34029dac:	4613      	mov	r3, r2
34029dae:	ee37 0ac0 	vsub.f32	s0, s15, s0
34029db2:	ee20 0a00 	vmul.f32	s0, s0, s0
34029db6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 34029e14 <nema_sin+0xf8>
34029dba:	eddf 7a17 	vldr	s15, [pc, #92]	@ 34029e18 <nema_sin+0xfc>
34029dbe:	ee20 7a07 	vmul.f32	s14, s0, s14
34029dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
34029dc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
34029dca:	ee67 7a80 	vmul.f32	s15, s15, s0
34029dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
34029dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34029dd6:	ee27 0a80 	vmul.f32	s0, s15, s0
34029dda:	ee30 0a07 	vadd.f32	s0, s0, s14
34029dde:	eeb4 0ac7 	vcmpe.f32	s0, s14
34029de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029de6:	bfc4      	itt	gt
34029de8:	eef0 7a00 	vmovgt.f32	s15, #0	@ 0x40000000  2.0
34029dec:	ee30 0a67 	vsubgt.f32	s0, s0, s15
34029df0:	2b01      	cmp	r3, #1
34029df2:	bf18      	it	ne
34029df4:	eeb1 0a40 	vnegne.f32	s0, s0
34029df8:	4770      	bx	lr
34029dfa:	f04f 32ff 	mov.w	r2, #4294967295
34029dfe:	2301      	movs	r3, #1
34029e00:	e7cb      	b.n	34029d9a <nema_sin+0x7e>
34029e02:	bf00      	nop
34029e04:	3c8efa35 	.word	0x3c8efa35
34029e08:	3fc90fdb 	.word	0x3fc90fdb
34029e0c:	40c90fdb 	.word	0x40c90fdb
34029e10:	40490fdb 	.word	0x40490fdb
34029e14:	3aaa2538 	.word	0x3aaa2538
34029e18:	3d2a59db 	.word	0x3d2a59db

34029e1c <nema_cos>:
34029e1c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 34029efc <nema_cos+0xe0>
34029e20:	ee20 0a27 	vmul.f32	s0, s0, s15
34029e24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
34029e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029e2c:	d514      	bpl.n	34029e58 <nema_cos+0x3c>
34029e2e:	eef1 7a40 	vneg.f32	s15, s0
34029e32:	eddf 6a33 	vldr	s13, [pc, #204]	@ 34029f00 <nema_cos+0xe4>
34029e36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
34029e3a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
34029e3e:	ee17 3a90 	vmov	r3, s15
34029e42:	3301      	adds	r3, #1
34029e44:	ee07 3a90 	vmov	s15, r3
34029e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34029e4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
34029e50:	ee30 0a67 	vsub.f32	s0, s0, s15
34029e54:	eeb1 0a40 	vneg.f32	s0, s0
34029e58:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 34029f00 <nema_cos+0xe4>
34029e5c:	eeb4 0ac7 	vcmpe.f32	s0, s14
34029e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029e64:	db09      	blt.n	34029e7a <nema_cos+0x5e>
34029e66:	eec0 7a07 	vdiv.f32	s15, s0, s14
34029e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34029e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34029e72:	ee67 7a87 	vmul.f32	s15, s15, s14
34029e76:	ee30 0a67 	vsub.f32	s0, s0, s15
34029e7a:	eddf 7a22 	vldr	s15, [pc, #136]	@ 34029f04 <nema_cos+0xe8>
34029e7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
34029e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029e86:	db34      	blt.n	34029ef2 <nema_cos+0xd6>
34029e88:	ee30 0a67 	vsub.f32	s0, s0, s15
34029e8c:	2201      	movs	r2, #1
34029e8e:	f04f 33ff 	mov.w	r3, #4294967295
34029e92:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 34029f08 <nema_cos+0xec>
34029e96:	eeb4 0ae7 	vcmpe.f32	s0, s15
34029e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029e9e:	dd04      	ble.n	34029eaa <nema_cos+0x8e>
34029ea0:	eddf 7a18 	vldr	s15, [pc, #96]	@ 34029f04 <nema_cos+0xe8>
34029ea4:	4613      	mov	r3, r2
34029ea6:	ee37 0ac0 	vsub.f32	s0, s15, s0
34029eaa:	ee20 0a00 	vmul.f32	s0, s0, s0
34029eae:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 34029f0c <nema_cos+0xf0>
34029eb2:	eddf 7a17 	vldr	s15, [pc, #92]	@ 34029f10 <nema_cos+0xf4>
34029eb6:	ee20 7a07 	vmul.f32	s14, s0, s14
34029eba:	ee77 7ac7 	vsub.f32	s15, s15, s14
34029ebe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
34029ec2:	ee67 7a80 	vmul.f32	s15, s15, s0
34029ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
34029eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34029ece:	ee27 0a80 	vmul.f32	s0, s15, s0
34029ed2:	ee30 0a07 	vadd.f32	s0, s0, s14
34029ed6:	eeb4 0ac7 	vcmpe.f32	s0, s14
34029eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34029ede:	bfc4      	itt	gt
34029ee0:	eef0 7a00 	vmovgt.f32	s15, #0	@ 0x40000000  2.0
34029ee4:	ee30 0a67 	vsubgt.f32	s0, s0, s15
34029ee8:	2b01      	cmp	r3, #1
34029eea:	bf18      	it	ne
34029eec:	eeb1 0a40 	vnegne.f32	s0, s0
34029ef0:	4770      	bx	lr
34029ef2:	f04f 32ff 	mov.w	r2, #4294967295
34029ef6:	2301      	movs	r3, #1
34029ef8:	e7cb      	b.n	34029e92 <nema_cos+0x76>
34029efa:	bf00      	nop
34029efc:	3c8efa35 	.word	0x3c8efa35
34029f00:	40c90fdb 	.word	0x40c90fdb
34029f04:	40490fdb 	.word	0x40490fdb
34029f08:	3fc90fdb 	.word	0x3fc90fdb
34029f0c:	3aaa2538 	.word	0x3aaa2538
34029f10:	3d2a59db 	.word	0x3d2a59db

34029f14 <nema_f2fx>:
34029f14:	eddf 7a06 	vldr	s15, [pc, #24]	@ 34029f30 <nema_f2fx+0x1c>
34029f18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
34029f1c:	ee20 0a27 	vmul.f32	s0, s0, s15
34029f20:	ee30 0a07 	vadd.f32	s0, s0, s14
34029f24:	eefd 7ac0 	vcvt.s32.f32	s15, s0
34029f28:	ee17 0a90 	vmov	r0, s15
34029f2c:	4770      	bx	lr
34029f2e:	bf00      	nop
34029f30:	47800000 	.word	0x47800000

34029f34 <nema_mat3x3_load_identity>:
34029f34:	2300      	movs	r3, #0
34029f36:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
34029f3a:	6043      	str	r3, [r0, #4]
34029f3c:	6002      	str	r2, [r0, #0]
34029f3e:	6102      	str	r2, [r0, #16]
34029f40:	6202      	str	r2, [r0, #32]
34029f42:	6083      	str	r3, [r0, #8]
34029f44:	60c3      	str	r3, [r0, #12]
34029f46:	6143      	str	r3, [r0, #20]
34029f48:	6183      	str	r3, [r0, #24]
34029f4a:	61c3      	str	r3, [r0, #28]
34029f4c:	4770      	bx	lr
34029f4e:	bf00      	nop

34029f50 <nema_mat3x3_translate>:
34029f50:	edd0 6a06 	vldr	s13, [r0, #24]
34029f54:	ed90 7a07 	vldr	s14, [r0, #28]
34029f58:	edd0 7a08 	vldr	s15, [r0, #32]
34029f5c:	ee26 3a80 	vmul.f32	s6, s13, s0
34029f60:	ee67 3a00 	vmul.f32	s7, s14, s0
34029f64:	ee66 6aa0 	vmul.f32	s13, s13, s1
34029f68:	ed90 4a00 	vldr	s8, [r0]
34029f6c:	edd0 4a03 	vldr	s9, [r0, #12]
34029f70:	ee27 7a20 	vmul.f32	s14, s14, s1
34029f74:	ed90 5a01 	vldr	s10, [r0, #4]
34029f78:	edd0 5a04 	vldr	s11, [r0, #16]
34029f7c:	ee27 0a80 	vmul.f32	s0, s15, s0
34029f80:	ed90 6a02 	vldr	s12, [r0, #8]
34029f84:	ee67 7aa0 	vmul.f32	s15, s15, s1
34029f88:	edd0 0a05 	vldr	s1, [r0, #20]
34029f8c:	ee34 4a03 	vadd.f32	s8, s8, s6
34029f90:	ee74 6aa6 	vadd.f32	s13, s9, s13
34029f94:	ee35 5a23 	vadd.f32	s10, s10, s7
34029f98:	ee35 7a87 	vadd.f32	s14, s11, s14
34029f9c:	ee36 0a00 	vadd.f32	s0, s12, s0
34029fa0:	ee70 7aa7 	vadd.f32	s15, s1, s15
34029fa4:	ed80 4a00 	vstr	s8, [r0]
34029fa8:	edc0 6a03 	vstr	s13, [r0, #12]
34029fac:	ed80 5a01 	vstr	s10, [r0, #4]
34029fb0:	ed80 7a04 	vstr	s14, [r0, #16]
34029fb4:	ed80 0a02 	vstr	s0, [r0, #8]
34029fb8:	edc0 7a05 	vstr	s15, [r0, #20]
34029fbc:	4770      	bx	lr
34029fbe:	bf00      	nop

34029fc0 <nema_mat3x3_scale>:
34029fc0:	ed90 5a00 	vldr	s10, [r0]
34029fc4:	edd0 5a01 	vldr	s11, [r0, #4]
34029fc8:	ed90 6a02 	vldr	s12, [r0, #8]
34029fcc:	edd0 6a03 	vldr	s13, [r0, #12]
34029fd0:	ed90 7a04 	vldr	s14, [r0, #16]
34029fd4:	edd0 7a05 	vldr	s15, [r0, #20]
34029fd8:	ee25 5a00 	vmul.f32	s10, s10, s0
34029fdc:	ee65 5a80 	vmul.f32	s11, s11, s0
34029fe0:	ee66 6aa0 	vmul.f32	s13, s13, s1
34029fe4:	ee27 7a20 	vmul.f32	s14, s14, s1
34029fe8:	ee26 0a00 	vmul.f32	s0, s12, s0
34029fec:	ee67 0aa0 	vmul.f32	s1, s15, s1
34029ff0:	ed80 5a00 	vstr	s10, [r0]
34029ff4:	edc0 5a01 	vstr	s11, [r0, #4]
34029ff8:	ed80 0a02 	vstr	s0, [r0, #8]
34029ffc:	edc0 6a03 	vstr	s13, [r0, #12]
3402a000:	ed80 7a04 	vstr	s14, [r0, #16]
3402a004:	edc0 0a05 	vstr	s1, [r0, #20]
3402a008:	4770      	bx	lr
3402a00a:	bf00      	nop

3402a00c <nema_mat3x3_rotate>:
3402a00c:	b510      	push	{r4, lr}
3402a00e:	ed2d 8b02 	vpush	{d8}
3402a012:	4604      	mov	r4, r0
3402a014:	eef0 8a40 	vmov.f32	s17, s0
3402a018:	f7ff ff00 	bl	34029e1c <nema_cos>
3402a01c:	eeb0 8a40 	vmov.f32	s16, s0
3402a020:	eeb0 0a68 	vmov.f32	s0, s17
3402a024:	f7ff fe7a 	bl	34029d1c <nema_sin>
3402a028:	ed94 6a05 	vldr	s12, [r4, #20]
3402a02c:	edd4 6a00 	vldr	s13, [r4]
3402a030:	ed94 5a03 	vldr	s10, [r4, #12]
3402a034:	ed94 7a01 	vldr	s14, [r4, #4]
3402a038:	edd4 5a04 	vldr	s11, [r4, #16]
3402a03c:	edd4 7a02 	vldr	s15, [r4, #8]
3402a040:	ee68 3a26 	vmul.f32	s7, s16, s13
3402a044:	ee65 2a00 	vmul.f32	s5, s10, s0
3402a048:	ee28 4a07 	vmul.f32	s8, s16, s14
3402a04c:	ee25 3a80 	vmul.f32	s6, s11, s0
3402a050:	ee68 4a27 	vmul.f32	s9, s16, s15
3402a054:	ee60 6a26 	vmul.f32	s13, s0, s13
3402a058:	ee25 5a08 	vmul.f32	s10, s10, s16
3402a05c:	ee20 7a07 	vmul.f32	s14, s0, s14
3402a060:	ee65 5a88 	vmul.f32	s11, s11, s16
3402a064:	ee60 7a27 	vmul.f32	s15, s0, s15
3402a068:	ee26 8a08 	vmul.f32	s16, s12, s16
3402a06c:	ee26 0a00 	vmul.f32	s0, s12, s0
3402a070:	ee77 7a88 	vadd.f32	s15, s15, s16
3402a074:	ee73 3ae2 	vsub.f32	s7, s7, s5
3402a078:	ee76 6a85 	vadd.f32	s13, s13, s10
3402a07c:	ee34 6a43 	vsub.f32	s12, s8, s6
3402a080:	ee37 7a25 	vadd.f32	s14, s14, s11
3402a084:	ee34 0ac0 	vsub.f32	s0, s9, s0
3402a088:	edc4 3a00 	vstr	s7, [r4]
3402a08c:	edc4 6a03 	vstr	s13, [r4, #12]
3402a090:	ed84 6a01 	vstr	s12, [r4, #4]
3402a094:	ed84 7a04 	vstr	s14, [r4, #16]
3402a098:	ed84 0a02 	vstr	s0, [r4, #8]
3402a09c:	edc4 7a05 	vstr	s15, [r4, #20]
3402a0a0:	ecbd 8b02 	vpop	{d8}
3402a0a4:	bd10      	pop	{r4, pc}
3402a0a6:	bf00      	nop

3402a0a8 <nema_mat3x3_quad_to_rect>:
3402a0a8:	ee70 6a41 	vsub.f32	s13, s0, s2
3402a0ac:	ee76 6a82 	vadd.f32	s13, s13, s4
3402a0b0:	ee76 6ac3 	vsub.f32	s13, s13, s6
3402a0b4:	ee30 6ae1 	vsub.f32	s12, s1, s3
3402a0b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
3402a0bc:	ee36 6a22 	vadd.f32	s12, s12, s5
3402a0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a0c4:	ed2d 8b06 	vpush	{d8-d10}
3402a0c8:	ee36 6a63 	vsub.f32	s12, s12, s7
3402a0cc:	ee09 0a10 	vmov	s18, r0
3402a0d0:	ee08 1a90 	vmov	s17, r1
3402a0d4:	f100 812e 	bmi.w	3402a334 <nema_mat3x3_quad_to_rect+0x28c>
3402a0d8:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 3402a36c <nema_mat3x3_quad_to_rect+0x2c4>
3402a0dc:	eef4 6ae7 	vcmpe.f32	s13, s15
3402a0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a0e4:	d80d      	bhi.n	3402a102 <nema_mat3x3_quad_to_rect+0x5a>
3402a0e6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
3402a0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a0ee:	f100 80f7 	bmi.w	3402a2e0 <nema_mat3x3_quad_to_rect+0x238>
3402a0f2:	eddf 7a9e 	vldr	s15, [pc, #632]	@ 3402a36c <nema_mat3x3_quad_to_rect+0x2c4>
3402a0f6:	eeb4 6ae7 	vcmpe.f32	s12, s15
3402a0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a0fe:	f240 80f7 	bls.w	3402a2f0 <nema_mat3x3_quad_to_rect+0x248>
3402a102:	ee31 7a42 	vsub.f32	s14, s2, s4
3402a106:	ee73 7ae2 	vsub.f32	s15, s7, s5
3402a10a:	ee33 2a42 	vsub.f32	s4, s6, s4
3402a10e:	ee71 2ae2 	vsub.f32	s5, s3, s5
3402a112:	ee67 5a27 	vmul.f32	s11, s14, s15
3402a116:	ee22 5a22 	vmul.f32	s10, s4, s5
3402a11a:	ee75 5ac5 	vsub.f32	s11, s11, s10
3402a11e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
3402a122:	ee66 7aa7 	vmul.f32	s15, s13, s15
3402a126:	ee26 7a07 	vmul.f32	s14, s12, s14
3402a12a:	ee66 6aa2 	vmul.f32	s13, s13, s5
3402a12e:	ee26 6a02 	vmul.f32	s12, s12, s4
3402a132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a136:	ee77 7ac6 	vsub.f32	s15, s15, s12
3402a13a:	ee77 6a66 	vsub.f32	s13, s14, s13
3402a13e:	f100 80c5 	bmi.w	3402a2cc <nema_mat3x3_quad_to_rect+0x224>
3402a142:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 3402a36c <nema_mat3x3_quad_to_rect+0x2c4>
3402a146:	eef4 5ac7 	vcmpe.f32	s11, s14
3402a14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a14e:	bf94      	ite	ls
3402a150:	2301      	movls	r3, #1
3402a152:	2300      	movhi	r3, #0
3402a154:	2b00      	cmp	r3, #0
3402a156:	f040 8106 	bne.w	3402a366 <nema_mat3x3_quad_to_rect+0x2be>
3402a15a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
3402a15e:	ee87 6a25 	vdiv.f32	s12, s14, s11
3402a162:	ee67 7a86 	vmul.f32	s15, s15, s12
3402a166:	ee66 6a86 	vmul.f32	s13, s13, s12
3402a16a:	ee21 5a27 	vmul.f32	s10, s2, s15
3402a16e:	ee61 5aa7 	vmul.f32	s11, s3, s15
3402a172:	ee63 2aa6 	vmul.f32	s5, s7, s13
3402a176:	ee31 1a40 	vsub.f32	s2, s2, s0
3402a17a:	ee23 6a26 	vmul.f32	s12, s6, s13
3402a17e:	ee33 2a40 	vsub.f32	s4, s6, s0
3402a182:	ee71 1ae0 	vsub.f32	s3, s3, s1
3402a186:	ee73 3ae0 	vsub.f32	s7, s7, s1
3402a18a:	ee31 1a05 	vadd.f32	s2, s2, s10
3402a18e:	ee32 2a06 	vadd.f32	s4, s4, s12
3402a192:	ee71 1aa5 	vadd.f32	s3, s3, s11
3402a196:	ee73 2aa2 	vadd.f32	s5, s7, s5
3402a19a:	ed82 0a02 	vstr	s0, [r2, #8]
3402a19e:	edc2 0a05 	vstr	s1, [r2, #20]
3402a1a2:	edc2 7a06 	vstr	s15, [r2, #24]
3402a1a6:	edc2 6a07 	vstr	s13, [r2, #28]
3402a1aa:	ed82 7a08 	vstr	s14, [r2, #32]
3402a1ae:	ed82 1a00 	vstr	s2, [r2]
3402a1b2:	ed82 2a01 	vstr	s4, [r2, #4]
3402a1b6:	edc2 1a03 	vstr	s3, [r2, #12]
3402a1ba:	edc2 2a04 	vstr	s5, [r2, #16]
3402a1be:	ee20 4aa6 	vmul.f32	s8, s1, s13
3402a1c2:	ee60 5aa7 	vmul.f32	s11, s1, s15
3402a1c6:	ee32 3ac4 	vsub.f32	s6, s5, s8
3402a1ca:	ee31 7ae5 	vsub.f32	s14, s3, s11
3402a1ce:	ee21 8aa6 	vmul.f32	s16, s3, s13
3402a1d2:	ee22 6aa7 	vmul.f32	s12, s5, s15
3402a1d6:	ee27 7a02 	vmul.f32	s14, s14, s4
3402a1da:	ee23 4a01 	vmul.f32	s8, s6, s2
3402a1de:	ee38 8a46 	vsub.f32	s16, s16, s12
3402a1e2:	ee34 4a47 	vsub.f32	s8, s8, s14
3402a1e6:	ee20 7a08 	vmul.f32	s14, s0, s16
3402a1ea:	ee34 4a07 	vadd.f32	s8, s8, s14
3402a1ee:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
3402a1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a1f6:	f100 80ac 	bmi.w	3402a352 <nema_mat3x3_quad_to_rect+0x2aa>
3402a1fa:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 3402a36c <nema_mat3x3_quad_to_rect+0x2c4>
3402a1fe:	eeb4 4ac7 	vcmpe.f32	s8, s14
3402a202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a206:	bf94      	ite	ls
3402a208:	2001      	movls	r0, #1
3402a20a:	2000      	movhi	r0, #0
3402a20c:	2800      	cmp	r0, #0
3402a20e:	f040 80aa 	bne.w	3402a366 <nema_mat3x3_quad_to_rect+0x2be>
3402a212:	ee20 5a82 	vmul.f32	s10, s1, s4
3402a216:	ee60 4a26 	vmul.f32	s9, s0, s13
3402a21a:	ee20 6a27 	vmul.f32	s12, s0, s15
3402a21e:	ee60 9a22 	vmul.f32	s19, s0, s5
3402a222:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
3402a226:	ee60 0a81 	vmul.f32	s1, s1, s2
3402a22a:	ee20 7a21 	vmul.f32	s14, s0, s3
3402a22e:	eeca 3a04 	vdiv.f32	s7, s20, s8
3402a232:	ee74 4ac2 	vsub.f32	s9, s9, s4
3402a236:	ee61 6a26 	vmul.f32	s13, s2, s13
3402a23a:	ee67 7a82 	vmul.f32	s15, s15, s4
3402a23e:	ee35 5a69 	vsub.f32	s10, s10, s19
3402a242:	ee75 5ae1 	vsub.f32	s11, s11, s3
3402a246:	ee31 6a46 	vsub.f32	s12, s2, s12
3402a24a:	ee62 2a81 	vmul.f32	s5, s5, s2
3402a24e:	ee37 7a60 	vsub.f32	s14, s14, s1
3402a252:	ee21 2a82 	vmul.f32	s4, s3, s4
3402a256:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
3402a25a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
3402a25e:	ee77 7ae6 	vsub.f32	s15, s15, s13
3402a262:	ee23 4a23 	vmul.f32	s8, s6, s7
3402a266:	ee65 6a23 	vmul.f32	s13, s10, s7
3402a26a:	ee65 5aa3 	vmul.f32	s11, s11, s7
3402a26e:	ee64 4aa3 	vmul.f32	s9, s9, s7
3402a272:	ee26 6a23 	vmul.f32	s12, s12, s7
3402a276:	ee27 7a23 	vmul.f32	s14, s14, s7
3402a27a:	ee72 2ac2 	vsub.f32	s5, s5, s4
3402a27e:	ee24 4a09 	vmul.f32	s8, s8, s18
3402a282:	ee65 5aa8 	vmul.f32	s11, s11, s17
3402a286:	ee28 8a23 	vmul.f32	s16, s16, s7
3402a28a:	ee24 5a89 	vmul.f32	s10, s9, s18
3402a28e:	ee26 6a28 	vmul.f32	s12, s12, s17
3402a292:	ee67 7aa3 	vmul.f32	s15, s15, s7
3402a296:	ee66 6a89 	vmul.f32	s13, s13, s18
3402a29a:	ee27 7a28 	vmul.f32	s14, s14, s17
3402a29e:	ee62 2aa3 	vmul.f32	s5, s5, s7
3402a2a2:	ed82 4a00 	vstr	s8, [r2]
3402a2a6:	edc2 5a03 	vstr	s11, [r2, #12]
3402a2aa:	ed82 8a06 	vstr	s16, [r2, #24]
3402a2ae:	ed82 5a01 	vstr	s10, [r2, #4]
3402a2b2:	ed82 6a04 	vstr	s12, [r2, #16]
3402a2b6:	edc2 7a07 	vstr	s15, [r2, #28]
3402a2ba:	edc2 6a02 	vstr	s13, [r2, #8]
3402a2be:	ed82 7a05 	vstr	s14, [r2, #20]
3402a2c2:	edc2 2a08 	vstr	s5, [r2, #32]
3402a2c6:	ecbd 8b06 	vpop	{d8-d10}
3402a2ca:	4770      	bx	lr
3402a2cc:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 3402a370 <nema_mat3x3_quad_to_rect+0x2c8>
3402a2d0:	eef4 5ac7 	vcmpe.f32	s11, s14
3402a2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a2d8:	bfac      	ite	ge
3402a2da:	2301      	movge	r3, #1
3402a2dc:	2300      	movlt	r3, #0
3402a2de:	e739      	b.n	3402a154 <nema_mat3x3_quad_to_rect+0xac>
3402a2e0:	eddf 7a23 	vldr	s15, [pc, #140]	@ 3402a370 <nema_mat3x3_quad_to_rect+0x2c8>
3402a2e4:	eeb4 6ae7 	vcmpe.f32	s12, s15
3402a2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a2ec:	f6ff af09 	blt.w	3402a102 <nema_mat3x3_quad_to_rect+0x5a>
3402a2f0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 3402a374 <nema_mat3x3_quad_to_rect+0x2cc>
3402a2f4:	ee32 2a41 	vsub.f32	s4, s4, s2
3402a2f8:	ee72 2ae1 	vsub.f32	s5, s5, s3
3402a2fc:	ee31 1a40 	vsub.f32	s2, s2, s0
3402a300:	ee71 1ae0 	vsub.f32	s3, s3, s1
3402a304:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
3402a308:	eef0 7a47 	vmov.f32	s15, s14
3402a30c:	ed82 2a01 	vstr	s4, [r2, #4]
3402a310:	ed82 1a00 	vstr	s2, [r2]
3402a314:	edc2 2a04 	vstr	s5, [r2, #16]
3402a318:	edc2 1a03 	vstr	s3, [r2, #12]
3402a31c:	ed82 0a02 	vstr	s0, [r2, #8]
3402a320:	edc2 0a05 	vstr	s1, [r2, #20]
3402a324:	ed82 7a06 	vstr	s14, [r2, #24]
3402a328:	ed82 7a07 	vstr	s14, [r2, #28]
3402a32c:	eef0 6a47 	vmov.f32	s13, s14
3402a330:	6213      	str	r3, [r2, #32]
3402a332:	e744      	b.n	3402a1be <nema_mat3x3_quad_to_rect+0x116>
3402a334:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 3402a370 <nema_mat3x3_quad_to_rect+0x2c8>
3402a338:	eef4 6ae7 	vcmpe.f32	s13, s15
3402a33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a340:	f6ff aedf 	blt.w	3402a102 <nema_mat3x3_quad_to_rect+0x5a>
3402a344:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
3402a348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a34c:	f57f aed1 	bpl.w	3402a0f2 <nema_mat3x3_quad_to_rect+0x4a>
3402a350:	e7c6      	b.n	3402a2e0 <nema_mat3x3_quad_to_rect+0x238>
3402a352:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 3402a370 <nema_mat3x3_quad_to_rect+0x2c8>
3402a356:	eeb4 4ac7 	vcmpe.f32	s8, s14
3402a35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a35e:	bfac      	ite	ge
3402a360:	2001      	movge	r0, #1
3402a362:	2000      	movlt	r0, #0
3402a364:	e752      	b.n	3402a20c <nema_mat3x3_quad_to_rect+0x164>
3402a366:	f04f 30ff 	mov.w	r0, #4294967295
3402a36a:	e7ac      	b.n	3402a2c6 <nema_mat3x3_quad_to_rect+0x21e>
3402a36c:	3727c5ac 	.word	0x3727c5ac
3402a370:	b727c5ac 	.word	0xb727c5ac
3402a374:	00000000 	.word	0x00000000

3402a378 <nema_get_context>:
3402a378:	4800      	ldr	r0, [pc, #0]	@ (3402a37c <nema_get_context+0x4>)
3402a37a:	4770      	bx	lr
3402a37c:	340e5d58 	.word	0x340e5d58

3402a380 <nema_readHwConfig>:
3402a380:	b510      	push	{r4, lr}
3402a382:	4c05      	ldr	r4, [pc, #20]	@ (3402a398 <nema_readHwConfig+0x18>)
3402a384:	6820      	ldr	r0, [r4, #0]
3402a386:	b100      	cbz	r0, 3402a38a <nema_readHwConfig+0xa>
3402a388:	bd10      	pop	{r4, pc}
3402a38a:	f44f 70f8 	mov.w	r0, #496	@ 0x1f0
3402a38e:	f7f5 f9ad 	bl	3401f6ec <nema_reg_read>
3402a392:	6020      	str	r0, [r4, #0]
3402a394:	bd10      	pop	{r4, pc}
3402a396:	bf00      	nop
3402a398:	340e5d54 	.word	0x340e5d54

3402a39c <nema_readHwConfigH>:
3402a39c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
3402a3a0:	f7f5 b9a4 	b.w	3401f6ec <nema_reg_read>

3402a3a4 <nema_enable_tiling>:
3402a3a4:	2800      	cmp	r0, #0
3402a3a6:	bf14      	ite	ne
3402a3a8:	f04f 4080 	movne.w	r0, #1073741824	@ 0x40000000
3402a3ac:	2000      	moveq	r0, #0
3402a3ae:	b410      	push	{r4}
3402a3b0:	4b06      	ldr	r3, [pc, #24]	@ (3402a3cc <nema_enable_tiling+0x28>)
3402a3b2:	681a      	ldr	r2, [r3, #0]
3402a3b4:	69d1      	ldr	r1, [r2, #28]
3402a3b6:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
3402a3ba:	4323      	orrs	r3, r4
3402a3bc:	430b      	orrs	r3, r1
3402a3be:	4303      	orrs	r3, r0
3402a3c0:	60d0      	str	r0, [r2, #12]
3402a3c2:	6193      	str	r3, [r2, #24]
3402a3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
3402a3c8:	4770      	bx	lr
3402a3ca:	bf00      	nop
3402a3cc:	340e5f18 	.word	0x340e5f18

3402a3d0 <nema_enable_tiling_2x2>:
3402a3d0:	2800      	cmp	r0, #0
3402a3d2:	bf14      	ite	ne
3402a3d4:	f04f 4040 	movne.w	r0, #3221225472	@ 0xc0000000
3402a3d8:	2000      	moveq	r0, #0
3402a3da:	b410      	push	{r4}
3402a3dc:	4b06      	ldr	r3, [pc, #24]	@ (3402a3f8 <nema_enable_tiling_2x2+0x28>)
3402a3de:	681a      	ldr	r2, [r3, #0]
3402a3e0:	69d1      	ldr	r1, [r2, #28]
3402a3e2:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
3402a3e6:	4323      	orrs	r3, r4
3402a3e8:	430b      	orrs	r3, r1
3402a3ea:	4303      	orrs	r3, r0
3402a3ec:	60d0      	str	r0, [r2, #12]
3402a3ee:	6193      	str	r3, [r2, #24]
3402a3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
3402a3f4:	4770      	bx	lr
3402a3f6:	bf00      	nop
3402a3f8:	340e5f18 	.word	0x340e5f18

3402a3fc <nema_matmul_bypass>:
3402a3fc:	b920      	cbnz	r0, 3402a408 <nema_matmul_bypass+0xc>
3402a3fe:	4601      	mov	r1, r0
3402a400:	f44f 708c 	mov.w	r0, #280	@ 0x118
3402a404:	f7fe ba2c 	b.w	34028860 <nema_cl_add_cmd>
3402a408:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
3402a40c:	f44f 708c 	mov.w	r0, #280	@ 0x118
3402a410:	f7fe ba26 	b.w	34028860 <nema_cl_add_cmd>

3402a414 <nema_set_matrix>:
3402a414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3402a418:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 3402a580 <nema_set_matrix+0x16c>
3402a41c:	edd0 7a06 	vldr	s15, [r0, #24]
3402a420:	eef4 7ac7 	vcmpe.f32	s15, s14
3402a424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a428:	4604      	mov	r4, r0
3402a42a:	d506      	bpl.n	3402a43a <nema_set_matrix+0x26>
3402a42c:	eddf 6a55 	vldr	s13, [pc, #340]	@ 3402a584 <nema_set_matrix+0x170>
3402a430:	eef4 7ae6 	vcmpe.f32	s15, s13
3402a434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a438:	dc47      	bgt.n	3402a4ca <nema_set_matrix+0xb6>
3402a43a:	2009      	movs	r0, #9
3402a43c:	f7fe fa84 	bl	34028948 <nema_cl_get_space>
3402a440:	2800      	cmp	r0, #0
3402a442:	d040      	beq.n	3402a4c6 <nema_set_matrix+0xb2>
3402a444:	f44f 73ba 	mov.w	r3, #372	@ 0x174
3402a448:	6003      	str	r3, [r0, #0]
3402a44a:	f44f 73b4 	mov.w	r3, #360	@ 0x168
3402a44e:	6962      	ldr	r2, [r4, #20]
3402a450:	6083      	str	r3, [r0, #8]
3402a452:	f44f 73bc 	mov.w	r3, #376	@ 0x178
3402a456:	6042      	str	r2, [r0, #4]
3402a458:	68a2      	ldr	r2, [r4, #8]
3402a45a:	6103      	str	r3, [r0, #16]
3402a45c:	f44f 73be 	mov.w	r3, #380	@ 0x17c
3402a460:	60c2      	str	r2, [r0, #12]
3402a462:	69a2      	ldr	r2, [r4, #24]
3402a464:	6183      	str	r3, [r0, #24]
3402a466:	f44f 73c0 	mov.w	r3, #384	@ 0x180
3402a46a:	6142      	str	r2, [r0, #20]
3402a46c:	69e2      	ldr	r2, [r4, #28]
3402a46e:	6203      	str	r3, [r0, #32]
3402a470:	61c2      	str	r2, [r0, #28]
3402a472:	6a23      	ldr	r3, [r4, #32]
3402a474:	2544      	movs	r5, #68	@ 0x44
3402a476:	6243      	str	r3, [r0, #36]	@ 0x24
3402a478:	2640      	movs	r6, #64	@ 0x40
3402a47a:	233c      	movs	r3, #60	@ 0x3c
3402a47c:	2738      	movs	r7, #56	@ 0x38
3402a47e:	2234      	movs	r2, #52	@ 0x34
3402a480:	f04f 0c30 	mov.w	ip, #48	@ 0x30
3402a484:	212c      	movs	r1, #44	@ 0x2c
3402a486:	f04f 0e28 	mov.w	lr, #40	@ 0x28
3402a48a:	f44f 78b0 	mov.w	r8, #352	@ 0x160
3402a48e:	f840 800e 	str.w	r8, [r0, lr]
3402a492:	f44f 7eb2 	mov.w	lr, #356	@ 0x164
3402a496:	f8d4 8000 	ldr.w	r8, [r4]
3402a49a:	4401      	add	r1, r0
3402a49c:	f8c1 8000 	str.w	r8, [r1]
3402a4a0:	f840 e00c 	str.w	lr, [r0, ip]
3402a4a4:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3402a4a8:	f8d4 c004 	ldr.w	ip, [r4, #4]
3402a4ac:	4402      	add	r2, r0
3402a4ae:	f8c2 c000 	str.w	ip, [r2]
3402a4b2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
3402a4b6:	51c1      	str	r1, [r0, r7]
3402a4b8:	68e1      	ldr	r1, [r4, #12]
3402a4ba:	4403      	add	r3, r0
3402a4bc:	6019      	str	r1, [r3, #0]
3402a4be:	5182      	str	r2, [r0, r6]
3402a4c0:	6923      	ldr	r3, [r4, #16]
3402a4c2:	4428      	add	r0, r5
3402a4c4:	6003      	str	r3, [r0, #0]
3402a4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3402a4ca:	ed90 6a07 	vldr	s12, [r0, #28]
3402a4ce:	eeb4 6ac7 	vcmpe.f32	s12, s14
3402a4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a4d6:	d5b0      	bpl.n	3402a43a <nema_set_matrix+0x26>
3402a4d8:	eeb4 6ae6 	vcmpe.f32	s12, s13
3402a4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a4e0:	ddab      	ble.n	3402a43a <nema_set_matrix+0x26>
3402a4e2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
3402a4e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
3402a4ea:	eef4 7ac7 	vcmpe.f32	s15, s14
3402a4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a4f2:	d43f      	bmi.n	3402a574 <nema_set_matrix+0x160>
3402a4f4:	edd4 7a08 	vldr	s15, [r4, #32]
3402a4f8:	ed94 5a00 	vldr	s10, [r4]
3402a4fc:	edd4 5a01 	vldr	s11, [r4, #4]
3402a500:	ed94 6a02 	vldr	s12, [r4, #8]
3402a504:	edd4 6a03 	vldr	s13, [r4, #12]
3402a508:	ed94 7a04 	vldr	s14, [r4, #16]
3402a50c:	ed94 4a05 	vldr	s8, [r4, #20]
3402a510:	eec5 4a27 	vdiv.f32	s9, s10, s15
3402a514:	ee85 5aa7 	vdiv.f32	s10, s11, s15
3402a518:	eec6 5a27 	vdiv.f32	s11, s12, s15
3402a51c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
3402a520:	eec7 6a27 	vdiv.f32	s13, s14, s15
3402a524:	ee84 7a27 	vdiv.f32	s14, s8, s15
3402a528:	edc4 4a00 	vstr	s9, [r4]
3402a52c:	ed84 5a01 	vstr	s10, [r4, #4]
3402a530:	edc4 5a02 	vstr	s11, [r4, #8]
3402a534:	ed84 6a03 	vstr	s12, [r4, #12]
3402a538:	edc4 6a04 	vstr	s13, [r4, #16]
3402a53c:	ed84 7a05 	vstr	s14, [r4, #20]
3402a540:	2006      	movs	r0, #6
3402a542:	f7fe fa01 	bl	34028948 <nema_cl_get_space>
3402a546:	2800      	cmp	r0, #0
3402a548:	d0bd      	beq.n	3402a4c6 <nema_set_matrix+0xb2>
3402a54a:	f44f 73ba 	mov.w	r3, #372	@ 0x174
3402a54e:	6003      	str	r3, [r0, #0]
3402a550:	f44f 73b4 	mov.w	r3, #360	@ 0x168
3402a554:	6962      	ldr	r2, [r4, #20]
3402a556:	6083      	str	r3, [r0, #8]
3402a558:	6042      	str	r2, [r0, #4]
3402a55a:	68a3      	ldr	r3, [r4, #8]
3402a55c:	252c      	movs	r5, #44	@ 0x2c
3402a55e:	60c3      	str	r3, [r0, #12]
3402a560:	2628      	movs	r6, #40	@ 0x28
3402a562:	2324      	movs	r3, #36	@ 0x24
3402a564:	2720      	movs	r7, #32
3402a566:	221c      	movs	r2, #28
3402a568:	f04f 0c18 	mov.w	ip, #24
3402a56c:	2114      	movs	r1, #20
3402a56e:	f04f 0e10 	mov.w	lr, #16
3402a572:	e78a      	b.n	3402a48a <nema_set_matrix+0x76>
3402a574:	eef4 7ae6 	vcmpe.f32	s15, s13
3402a578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402a57c:	dce0      	bgt.n	3402a540 <nema_set_matrix+0x12c>
3402a57e:	e7b9      	b.n	3402a4f4 <nema_set_matrix+0xe0>
3402a580:	33d6bf95 	.word	0x33d6bf95
3402a584:	b3d6bf95 	.word	0xb3d6bf95

3402a588 <nema_load_frag_shader>:
3402a588:	b570      	push	{r4, r5, r6, lr}
3402a58a:	460e      	mov	r6, r1
3402a58c:	4604      	mov	r4, r0
3402a58e:	4611      	mov	r1, r2
3402a590:	20c4      	movs	r0, #196	@ 0xc4
3402a592:	f7fe f965 	bl	34028860 <nema_cl_add_cmd>
3402a596:	b186      	cbz	r6, 3402a5ba <nema_load_frag_shader+0x32>
3402a598:	2500      	movs	r5, #0
3402a59a:	3408      	adds	r4, #8
3402a59c:	f854 1c08 	ldr.w	r1, [r4, #-8]
3402a5a0:	20c8      	movs	r0, #200	@ 0xc8
3402a5a2:	f7fe f95d 	bl	34028860 <nema_cl_add_cmd>
3402a5a6:	3501      	adds	r5, #1
3402a5a8:	f854 1c04 	ldr.w	r1, [r4, #-4]
3402a5ac:	20cc      	movs	r0, #204	@ 0xcc
3402a5ae:	f7fe f957 	bl	34028860 <nema_cl_add_cmd>
3402a5b2:	42ae      	cmp	r6, r5
3402a5b4:	f104 0408 	add.w	r4, r4, #8
3402a5b8:	d1f0      	bne.n	3402a59c <nema_load_frag_shader+0x14>
3402a5ba:	bd70      	pop	{r4, r5, r6, pc}

3402a5bc <nema_set_frag_ptr>:
3402a5bc:	4601      	mov	r1, r0
3402a5be:	f44f 708e 	mov.w	r0, #284	@ 0x11c
3402a5c2:	f7fe b94d 	b.w	34028860 <nema_cl_add_cmd>
3402a5c6:	bf00      	nop

3402a5c8 <nema_set_rop_blend_mode>:
3402a5c8:	4601      	mov	r1, r0
3402a5ca:	f44f 70e8 	mov.w	r0, #464	@ 0x1d0
3402a5ce:	f7fe b947 	b.w	34028860 <nema_cl_add_cmd>
3402a5d2:	bf00      	nop

3402a5d4 <nema_set_depth_ctrl>:
3402a5d4:	4601      	mov	r1, r0
3402a5d6:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
3402a5da:	f7fe b941 	b.w	34028860 <nema_cl_add_cmd>
3402a5de:	bf00      	nop

3402a5e0 <nema_set_raster_color>:
3402a5e0:	4601      	mov	r1, r0
3402a5e2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
3402a5e6:	f7fe b93b 	b.w	34028860 <nema_cl_add_cmd>
3402a5ea:	bf00      	nop

3402a5ec <nema_raster_rect>:
3402a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3402a5ee:	1e17      	subs	r7, r2, #0
3402a5f0:	dd20      	ble.n	3402a634 <nema_raster_rect+0x48>
3402a5f2:	2b00      	cmp	r3, #0
3402a5f4:	dd1e      	ble.n	3402a634 <nema_raster_rect+0x48>
3402a5f6:	4604      	mov	r4, r0
3402a5f8:	2003      	movs	r0, #3
3402a5fa:	461e      	mov	r6, r3
3402a5fc:	460d      	mov	r5, r1
3402a5fe:	f7fe f9a3 	bl	34028948 <nema_cl_get_space>
3402a602:	b1b8      	cbz	r0, 3402a634 <nema_raster_rect+0x48>
3402a604:	f44f 7182 	mov.w	r1, #260	@ 0x104
3402a608:	f44f 7c84 	mov.w	ip, #264	@ 0x108
3402a60c:	193a      	adds	r2, r7, r4
3402a60e:	b292      	uxth	r2, r2
3402a610:	1973      	adds	r3, r6, r5
3402a612:	b2a4      	uxth	r4, r4
3402a614:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
3402a618:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
3402a61c:	4d06      	ldr	r5, [pc, #24]	@ (3402a638 <nema_raster_rect+0x4c>)
3402a61e:	6001      	str	r1, [r0, #0]
3402a620:	e9c0 c302 	strd	ip, r3, [r0, #8]
3402a624:	4905      	ldr	r1, [pc, #20]	@ (3402a63c <nema_raster_rect+0x50>)
3402a626:	682a      	ldr	r2, [r5, #0]
3402a628:	6044      	str	r4, [r0, #4]
3402a62a:	6101      	str	r1, [r0, #16]
3402a62c:	6993      	ldr	r3, [r2, #24]
3402a62e:	f043 0302 	orr.w	r3, r3, #2
3402a632:	6143      	str	r3, [r0, #20]
3402a634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3402a636:	bf00      	nop
3402a638:	340e5f18 	.word	0x340e5f18
3402a63c:	ff000100 	.word	0xff000100

3402a640 <nema_raster_quad_fx>:
3402a640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3402a644:	4607      	mov	r7, r0
3402a646:	2009      	movs	r0, #9
3402a648:	460e      	mov	r6, r1
3402a64a:	4615      	mov	r5, r2
3402a64c:	461c      	mov	r4, r3
3402a64e:	f7fe f97b 	bl	34028948 <nema_cl_get_space>
3402a652:	2800      	cmp	r0, #0
3402a654:	d030      	beq.n	3402a6b8 <nema_raster_quad_fx+0x78>
3402a656:	f44f 7390 	mov.w	r3, #288	@ 0x120
3402a65a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
3402a65e:	f44f 7a92 	mov.w	sl, #292	@ 0x124
3402a662:	f44f 7998 	mov.w	r9, #304	@ 0x130
3402a666:	f44f 789a 	mov.w	r8, #308	@ 0x134
3402a66a:	f44f 7ea2 	mov.w	lr, #324	@ 0x144
3402a66e:	f44f 7ca8 	mov.w	ip, #336	@ 0x150
3402a672:	f44f 71aa 	mov.w	r1, #340	@ 0x154
3402a676:	61c4      	str	r4, [r0, #28]
3402a678:	9c08      	ldr	r4, [sp, #32]
3402a67a:	e9c0 3700 	strd	r3, r7, [r0]
3402a67e:	6244      	str	r4, [r0, #36]	@ 0x24
3402a680:	9c09      	ldr	r4, [sp, #36]	@ 0x24
3402a682:	4b0e      	ldr	r3, [pc, #56]	@ (3402a6bc <nema_raster_quad_fx+0x7c>)
3402a684:	62c4      	str	r4, [r0, #44]	@ 0x2c
3402a686:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
3402a688:	6202      	str	r2, [r0, #32]
3402a68a:	6344      	str	r4, [r0, #52]	@ 0x34
3402a68c:	4a0c      	ldr	r2, [pc, #48]	@ (3402a6c0 <nema_raster_quad_fx+0x80>)
3402a68e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
3402a690:	681b      	ldr	r3, [r3, #0]
3402a692:	60c6      	str	r6, [r0, #12]
3402a694:	6145      	str	r5, [r0, #20]
3402a696:	63c4      	str	r4, [r0, #60]	@ 0x3c
3402a698:	f8c0 a008 	str.w	sl, [r0, #8]
3402a69c:	f8c0 9010 	str.w	r9, [r0, #16]
3402a6a0:	f8c0 8018 	str.w	r8, [r0, #24]
3402a6a4:	f8c0 e028 	str.w	lr, [r0, #40]	@ 0x28
3402a6a8:	f8c0 c030 	str.w	ip, [r0, #48]	@ 0x30
3402a6ac:	6381      	str	r1, [r0, #56]	@ 0x38
3402a6ae:	6402      	str	r2, [r0, #64]	@ 0x40
3402a6b0:	699b      	ldr	r3, [r3, #24]
3402a6b2:	f043 0305 	orr.w	r3, r3, #5
3402a6b6:	6443      	str	r3, [r0, #68]	@ 0x44
3402a6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3402a6bc:	340e5f18 	.word	0x340e5f18
3402a6c0:	ff000100 	.word	0xff000100

3402a6c4 <nema_set_interrupt_ctrl>:
3402a6c4:	4601      	mov	r1, r0
3402a6c6:	20f8      	movs	r0, #248	@ 0xf8
3402a6c8:	f7fe b8ca 	b.w	34028860 <nema_cl_add_cmd>

3402a6cc <nema_ext_hold_irq_enable>:
3402a6cc:	b510      	push	{r4, lr}
3402a6ce:	f44f 7480 	mov.w	r4, #256	@ 0x100
3402a6d2:	4084      	lsls	r4, r0
3402a6d4:	f640 70f4 	movw	r0, #4084	@ 0xff4
3402a6d8:	f7f5 f808 	bl	3401f6ec <nema_reg_read>
3402a6dc:	f404 6170 	and.w	r1, r4, #3840	@ 0xf00
3402a6e0:	4301      	orrs	r1, r0
3402a6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3402a6e6:	f640 70f4 	movw	r0, #4084	@ 0xff4
3402a6ea:	f7f5 b805 	b.w	3401f6f8 <nema_reg_write>
3402a6ee:	bf00      	nop

3402a6f0 <nema_ext_hold_enable>:
3402a6f0:	b510      	push	{r4, lr}
3402a6f2:	2410      	movs	r4, #16
3402a6f4:	4084      	lsls	r4, r0
3402a6f6:	f640 70f4 	movw	r0, #4084	@ 0xff4
3402a6fa:	f7f4 fff7 	bl	3401f6ec <nema_reg_read>
3402a6fe:	b2e1      	uxtb	r1, r4
3402a700:	4301      	orrs	r1, r0
3402a702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3402a706:	f640 70f4 	movw	r0, #4084	@ 0xff4
3402a70a:	f7f4 bff5 	b.w	3401f6f8 <nema_reg_write>
3402a70e:	bf00      	nop

3402a710 <tsi_malloc_init_pool>:
3402a710:	b4f0      	push	{r4, r5, r6, r7}
3402a712:	2807      	cmp	r0, #7
3402a714:	9f04      	ldr	r7, [sp, #16]
3402a716:	d82c      	bhi.n	3402a772 <tsi_malloc_init_pool+0x62>
3402a718:	2510      	movs	r5, #16
3402a71a:	4c17      	ldr	r4, [pc, #92]	@ (3402a778 <tsi_malloc_init_pool+0x68>)
3402a71c:	f04f 0c10 	mov.w	ip, #16
3402a720:	6025      	str	r5, [r4, #0]
3402a722:	070c      	lsls	r4, r1, #28
3402a724:	bf0e      	itee	eq
3402a726:	460e      	moveq	r6, r1
3402a728:	f021 060f 	bicne.w	r6, r1, #15
3402a72c:	1976      	addne	r6, r6, r5
3402a72e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
3402a732:	4d12      	ldr	r5, [pc, #72]	@ (3402a77c <tsi_malloc_init_pool+0x6c>)
3402a734:	00c4      	lsls	r4, r0, #3
3402a736:	512a      	str	r2, [r5, r4]
3402a738:	442c      	add	r4, r5
3402a73a:	18ca      	adds	r2, r1, r3
3402a73c:	60e6      	str	r6, [r4, #12]
3402a73e:	6061      	str	r1, [r4, #4]
3402a740:	6123      	str	r3, [r4, #16]
3402a742:	60a2      	str	r2, [r4, #8]
3402a744:	f8c4 c014 	str.w	ip, [r4, #20]
3402a748:	b16f      	cbz	r7, 3402a766 <tsi_malloc_init_pool+0x56>
3402a74a:	b17e      	cbz	r6, 3402a76c <tsi_malloc_init_pool+0x5c>
3402a74c:	2200      	movs	r2, #0
3402a74e:	4610      	mov	r0, r2
3402a750:	4c0b      	ldr	r4, [pc, #44]	@ (3402a780 <tsi_malloc_init_pool+0x70>)
3402a752:	3b20      	subs	r3, #32
3402a754:	eb06 010c 	add.w	r1, r6, ip
3402a758:	6133      	str	r3, [r6, #16]
3402a75a:	e886 1014 	stmia.w	r6, {r2, r4, ip}
3402a75e:	e9c1 4201 	strd	r4, r2, [r1, #4]
3402a762:	bcf0      	pop	{r4, r5, r6, r7}
3402a764:	4770      	bx	lr
3402a766:	4638      	mov	r0, r7
3402a768:	bcf0      	pop	{r4, r5, r6, r7}
3402a76a:	4770      	bx	lr
3402a76c:	4630      	mov	r0, r6
3402a76e:	bcf0      	pop	{r4, r5, r6, r7}
3402a770:	4770      	bx	lr
3402a772:	f04f 30ff 	mov.w	r0, #4294967295
3402a776:	e7f4      	b.n	3402a762 <tsi_malloc_init_pool+0x52>
3402a778:	340d0a90 	.word	0x340d0a90
3402a77c:	340e5e58 	.word	0x340e5e58
3402a780:	000f1fa1 	.word	0x000f1fa1

3402a784 <tsi_malloc_pool>:
3402a784:	2807      	cmp	r0, #7
3402a786:	d850      	bhi.n	3402a82a <tsi_malloc_pool+0xa6>
3402a788:	b4f0      	push	{r4, r5, r6, r7}
3402a78a:	4b29      	ldr	r3, [pc, #164]	@ (3402a830 <tsi_malloc_pool+0xac>)
3402a78c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
3402a790:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
3402a794:	68c4      	ldr	r4, [r0, #12]
3402a796:	2c00      	cmp	r4, #0
3402a798:	d03e      	beq.n	3402a818 <tsi_malloc_pool+0x94>
3402a79a:	6947      	ldr	r7, [r0, #20]
3402a79c:	4b25      	ldr	r3, [pc, #148]	@ (3402a834 <tsi_malloc_pool+0xb0>)
3402a79e:	f107 000b 	add.w	r0, r7, #11
3402a7a2:	fb90 f0f7 	sdiv	r0, r0, r7
3402a7a6:	fb07 f000 	mul.w	r0, r7, r0
3402a7aa:	1e7d      	subs	r5, r7, #1
3402a7ac:	4281      	cmp	r1, r0
3402a7ae:	bfac      	ite	ge
3402a7b0:	186d      	addge	r5, r5, r1
3402a7b2:	182d      	addlt	r5, r5, r0
3402a7b4:	fb95 f5f7 	sdiv	r5, r5, r7
3402a7b8:	fb07 f505 	mul.w	r5, r7, r5
3402a7bc:	6821      	ldr	r1, [r4, #0]
3402a7be:	6018      	str	r0, [r3, #0]
3402a7c0:	428d      	cmp	r5, r1
3402a7c2:	dd2f      	ble.n	3402a824 <tsi_malloc_pool+0xa0>
3402a7c4:	68a3      	ldr	r3, [r4, #8]
3402a7c6:	b33b      	cbz	r3, 3402a818 <tsi_malloc_pool+0x94>
3402a7c8:	4626      	mov	r6, r4
3402a7ca:	e002      	b.n	3402a7d2 <tsi_malloc_pool+0x4e>
3402a7cc:	6893      	ldr	r3, [r2, #8]
3402a7ce:	4616      	mov	r6, r2
3402a7d0:	b313      	cbz	r3, 3402a818 <tsi_malloc_pool+0x94>
3402a7d2:	58e1      	ldr	r1, [r4, r3]
3402a7d4:	18e2      	adds	r2, r4, r3
3402a7d6:	42a9      	cmp	r1, r5
3402a7d8:	dbf8      	blt.n	3402a7cc <tsi_malloc_pool+0x48>
3402a7da:	1943      	adds	r3, r0, r5
3402a7dc:	428b      	cmp	r3, r1
3402a7de:	da1e      	bge.n	3402a81e <tsi_malloc_pool+0x9a>
3402a7e0:	1ac9      	subs	r1, r1, r3
3402a7e2:	f8df c058 	ldr.w	ip, [pc, #88]	@ 3402a83c <tsi_malloc_pool+0xb8>
3402a7e6:	5099      	str	r1, [r3, r2]
3402a7e8:	4413      	add	r3, r2
3402a7ea:	f8c3 c004 	str.w	ip, [r3, #4]
3402a7ee:	6891      	ldr	r1, [r2, #8]
3402a7f0:	2f00      	cmp	r7, #0
3402a7f2:	6099      	str	r1, [r3, #8]
3402a7f4:	dd08      	ble.n	3402a808 <tsi_malloc_pool+0x84>
3402a7f6:	fbb3 f1f7 	udiv	r1, r3, r7
3402a7fa:	fb07 3c11 	mls	ip, r7, r1, r3
3402a7fe:	f1bc 0f00 	cmp.w	ip, #0
3402a802:	d001      	beq.n	3402a808 <tsi_malloc_pool+0x84>
3402a804:	fb01 7307 	mla	r3, r1, r7, r7
3402a808:	1b1b      	subs	r3, r3, r4
3402a80a:	60b3      	str	r3, [r6, #8]
3402a80c:	6015      	str	r5, [r2, #0]
3402a80e:	4b0a      	ldr	r3, [pc, #40]	@ (3402a838 <tsi_malloc_pool+0xb4>)
3402a810:	4410      	add	r0, r2
3402a812:	6053      	str	r3, [r2, #4]
3402a814:	bcf0      	pop	{r4, r5, r6, r7}
3402a816:	4770      	bx	lr
3402a818:	2000      	movs	r0, #0
3402a81a:	bcf0      	pop	{r4, r5, r6, r7}
3402a81c:	4770      	bx	lr
3402a81e:	6893      	ldr	r3, [r2, #8]
3402a820:	60b3      	str	r3, [r6, #8]
3402a822:	e7f4      	b.n	3402a80e <tsi_malloc_pool+0x8a>
3402a824:	4626      	mov	r6, r4
3402a826:	4622      	mov	r2, r4
3402a828:	e7d7      	b.n	3402a7da <tsi_malloc_pool+0x56>
3402a82a:	2000      	movs	r0, #0
3402a82c:	4770      	bx	lr
3402a82e:	bf00      	nop
3402a830:	340e5e58 	.word	0x340e5e58
3402a834:	340d0a90 	.word	0x340d0a90
3402a838:	000f1fa2 	.word	0x000f1fa2
3402a83c:	000f1fa1 	.word	0x000f1fa1

3402a840 <tsi_free>:
3402a840:	2800      	cmp	r0, #0
3402a842:	d044      	beq.n	3402a8ce <tsi_free+0x8e>
3402a844:	4b6f      	ldr	r3, [pc, #444]	@ (3402aa04 <tsi_free+0x1c4>)
3402a846:	68da      	ldr	r2, [r3, #12]
3402a848:	b12a      	cbz	r2, 3402a856 <tsi_free+0x16>
3402a84a:	6859      	ldr	r1, [r3, #4]
3402a84c:	4288      	cmp	r0, r1
3402a84e:	d302      	bcc.n	3402a856 <tsi_free+0x16>
3402a850:	6899      	ldr	r1, [r3, #8]
3402a852:	4288      	cmp	r0, r1
3402a854:	d342      	bcc.n	3402a8dc <tsi_free+0x9c>
3402a856:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3402a858:	b12a      	cbz	r2, 3402a866 <tsi_free+0x26>
3402a85a:	69d9      	ldr	r1, [r3, #28]
3402a85c:	4288      	cmp	r0, r1
3402a85e:	d302      	bcc.n	3402a866 <tsi_free+0x26>
3402a860:	6a19      	ldr	r1, [r3, #32]
3402a862:	4288      	cmp	r0, r1
3402a864:	d352      	bcc.n	3402a90c <tsi_free+0xcc>
3402a866:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3402a868:	b12a      	cbz	r2, 3402a876 <tsi_free+0x36>
3402a86a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
3402a86c:	4288      	cmp	r0, r1
3402a86e:	d302      	bcc.n	3402a876 <tsi_free+0x36>
3402a870:	6b99      	ldr	r1, [r3, #56]	@ 0x38
3402a872:	4288      	cmp	r0, r1
3402a874:	d34c      	bcc.n	3402a910 <tsi_free+0xd0>
3402a876:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3402a878:	b12a      	cbz	r2, 3402a886 <tsi_free+0x46>
3402a87a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
3402a87c:	4281      	cmp	r1, r0
3402a87e:	d802      	bhi.n	3402a886 <tsi_free+0x46>
3402a880:	6d19      	ldr	r1, [r3, #80]	@ 0x50
3402a882:	4281      	cmp	r1, r0
3402a884:	d846      	bhi.n	3402a914 <tsi_free+0xd4>
3402a886:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
3402a888:	b12a      	cbz	r2, 3402a896 <tsi_free+0x56>
3402a88a:	6e59      	ldr	r1, [r3, #100]	@ 0x64
3402a88c:	4288      	cmp	r0, r1
3402a88e:	d302      	bcc.n	3402a896 <tsi_free+0x56>
3402a890:	6e99      	ldr	r1, [r3, #104]	@ 0x68
3402a892:	4281      	cmp	r1, r0
3402a894:	d840      	bhi.n	3402a918 <tsi_free+0xd8>
3402a896:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
3402a89a:	b132      	cbz	r2, 3402a8aa <tsi_free+0x6a>
3402a89c:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
3402a89e:	4281      	cmp	r1, r0
3402a8a0:	d803      	bhi.n	3402a8aa <tsi_free+0x6a>
3402a8a2:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
3402a8a6:	4288      	cmp	r0, r1
3402a8a8:	d338      	bcc.n	3402a91c <tsi_free+0xdc>
3402a8aa:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
3402a8ae:	b13a      	cbz	r2, 3402a8c0 <tsi_free+0x80>
3402a8b0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
3402a8b4:	4288      	cmp	r0, r1
3402a8b6:	d303      	bcc.n	3402a8c0 <tsi_free+0x80>
3402a8b8:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
3402a8bc:	4288      	cmp	r0, r1
3402a8be:	d32f      	bcc.n	3402a920 <tsi_free+0xe0>
3402a8c0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3402a8c4:	b11a      	cbz	r2, 3402a8ce <tsi_free+0x8e>
3402a8c6:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
3402a8ca:	4281      	cmp	r1, r0
3402a8cc:	d900      	bls.n	3402a8d0 <tsi_free+0x90>
3402a8ce:	4770      	bx	lr
3402a8d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
3402a8d4:	4281      	cmp	r1, r0
3402a8d6:	d9fa      	bls.n	3402a8ce <tsi_free+0x8e>
3402a8d8:	2107      	movs	r1, #7
3402a8da:	e000      	b.n	3402a8de <tsi_free+0x9e>
3402a8dc:	2100      	movs	r1, #0
3402a8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3402a8e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3402a8e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
3402a8ea:	695e      	ldr	r6, [r3, #20]
3402a8ec:	4b46      	ldr	r3, [pc, #280]	@ (3402aa08 <tsi_free+0x1c8>)
3402a8ee:	f106 010b 	add.w	r1, r6, #11
3402a8f2:	fb91 f1f6 	sdiv	r1, r1, r6
3402a8f6:	fb06 f101 	mul.w	r1, r6, r1
3402a8fa:	1a45      	subs	r5, r0, r1
3402a8fc:	686c      	ldr	r4, [r5, #4]
3402a8fe:	4f43      	ldr	r7, [pc, #268]	@ (3402aa0c <tsi_free+0x1cc>)
3402a900:	429c      	cmp	r4, r3
3402a902:	6039      	str	r1, [r7, #0]
3402a904:	46a8      	mov	r8, r5
3402a906:	d00d      	beq.n	3402a924 <tsi_free+0xe4>
3402a908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3402a90c:	2101      	movs	r1, #1
3402a90e:	e7e6      	b.n	3402a8de <tsi_free+0x9e>
3402a910:	2102      	movs	r1, #2
3402a912:	e7e4      	b.n	3402a8de <tsi_free+0x9e>
3402a914:	2103      	movs	r1, #3
3402a916:	e7e2      	b.n	3402a8de <tsi_free+0x9e>
3402a918:	2104      	movs	r1, #4
3402a91a:	e7e0      	b.n	3402a8de <tsi_free+0x9e>
3402a91c:	2105      	movs	r1, #5
3402a91e:	e7de      	b.n	3402a8de <tsi_free+0x9e>
3402a920:	2106      	movs	r1, #6
3402a922:	e7dc      	b.n	3402a8de <tsi_free+0x9e>
3402a924:	4b3a      	ldr	r3, [pc, #232]	@ (3402aa10 <tsi_free+0x1d0>)
3402a926:	606b      	str	r3, [r5, #4]
3402a928:	6894      	ldr	r4, [r2, #8]
3402a92a:	18a3      	adds	r3, r4, r2
3402a92c:	429d      	cmp	r5, r3
3402a92e:	d95e      	bls.n	3402a9ee <tsi_free+0x1ae>
3402a930:	b90c      	cbnz	r4, 3402a936 <tsi_free+0xf6>
3402a932:	e05c      	b.n	3402a9ee <tsi_free+0x1ae>
3402a934:	b12c      	cbz	r4, 3402a942 <tsi_free+0x102>
3402a936:	689c      	ldr	r4, [r3, #8]
3402a938:	469c      	mov	ip, r3
3402a93a:	469e      	mov	lr, r3
3402a93c:	1913      	adds	r3, r2, r4
3402a93e:	429d      	cmp	r5, r3
3402a940:	d8f8      	bhi.n	3402a934 <tsi_free+0xf4>
3402a942:	682f      	ldr	r7, [r5, #0]
3402a944:	4594      	cmp	ip, r2
3402a946:	4438      	add	r0, r7
3402a948:	d04d      	beq.n	3402a9e6 <tsi_free+0x1a6>
3402a94a:	f8dc 7000 	ldr.w	r7, [ip]
3402a94e:	eb01 040c 	add.w	r4, r1, ip
3402a952:	443c      	add	r4, r7
3402a954:	1b64      	subs	r4, r4, r5
3402a956:	fab4 f484 	clz	r4, r4
3402a95a:	0964      	lsrs	r4, r4, #5
3402a95c:	2e00      	cmp	r6, #0
3402a95e:	dd32      	ble.n	3402a9c6 <tsi_free+0x186>
3402a960:	fbb5 f7f6 	udiv	r7, r5, r6
3402a964:	fb06 5c17 	mls	ip, r6, r7, r5
3402a968:	f1bc 0f00 	cmp.w	ip, #0
3402a96c:	d001      	beq.n	3402a972 <tsi_free+0x132>
3402a96e:	fb07 6506 	mla	r5, r7, r6, r6
3402a972:	fbb3 f7f6 	udiv	r7, r3, r6
3402a976:	fb06 3c17 	mls	ip, r6, r7, r3
3402a97a:	1aad      	subs	r5, r5, r2
3402a97c:	f8ce 5008 	str.w	r5, [lr, #8]
3402a980:	f1bc 0f00 	cmp.w	ip, #0
3402a984:	d01d      	beq.n	3402a9c2 <tsi_free+0x182>
3402a986:	fb07 6606 	mla	r6, r7, r6, r6
3402a98a:	1ab2      	subs	r2, r6, r2
3402a98c:	f8c8 2008 	str.w	r2, [r8, #8]
3402a990:	b154      	cbz	r4, 3402a9a8 <tsi_free+0x168>
3402a992:	f8d8 5000 	ldr.w	r5, [r8]
3402a996:	46f0      	mov	r8, lr
3402a998:	f8de 4000 	ldr.w	r4, [lr]
3402a99c:	440d      	add	r5, r1
3402a99e:	442c      	add	r4, r5
3402a9a0:	f8ce 4000 	str.w	r4, [lr]
3402a9a4:	f8ce 2008 	str.w	r2, [lr, #8]
3402a9a8:	4283      	cmp	r3, r0
3402a9aa:	d1ad      	bne.n	3402a908 <tsi_free+0xc8>
3402a9ac:	6818      	ldr	r0, [r3, #0]
3402a9ae:	f8d8 2000 	ldr.w	r2, [r8]
3402a9b2:	4401      	add	r1, r0
3402a9b4:	440a      	add	r2, r1
3402a9b6:	f8c8 2000 	str.w	r2, [r8]
3402a9ba:	689b      	ldr	r3, [r3, #8]
3402a9bc:	f8c8 3008 	str.w	r3, [r8, #8]
3402a9c0:	e7a2      	b.n	3402a908 <tsi_free+0xc8>
3402a9c2:	461e      	mov	r6, r3
3402a9c4:	e7e1      	b.n	3402a98a <tsi_free+0x14a>
3402a9c6:	1aae      	subs	r6, r5, r2
3402a9c8:	1a9a      	subs	r2, r3, r2
3402a9ca:	f8ce 6008 	str.w	r6, [lr, #8]
3402a9ce:	60aa      	str	r2, [r5, #8]
3402a9d0:	2c00      	cmp	r4, #0
3402a9d2:	d0e9      	beq.n	3402a9a8 <tsi_free+0x168>
3402a9d4:	682d      	ldr	r5, [r5, #0]
3402a9d6:	f8de 4000 	ldr.w	r4, [lr]
3402a9da:	440d      	add	r5, r1
3402a9dc:	442c      	add	r4, r5
3402a9de:	f8ce 4000 	str.w	r4, [lr]
3402a9e2:	46f0      	mov	r8, lr
3402a9e4:	e7de      	b.n	3402a9a4 <tsi_free+0x164>
3402a9e6:	2e00      	cmp	r6, #0
3402a9e8:	dd06      	ble.n	3402a9f8 <tsi_free+0x1b8>
3402a9ea:	2400      	movs	r4, #0
3402a9ec:	e7b8      	b.n	3402a960 <tsi_free+0x120>
3402a9ee:	682c      	ldr	r4, [r5, #0]
3402a9f0:	4696      	mov	lr, r2
3402a9f2:	4420      	add	r0, r4
3402a9f4:	2400      	movs	r4, #0
3402a9f6:	e7b1      	b.n	3402a95c <tsi_free+0x11c>
3402a9f8:	eba5 020c 	sub.w	r2, r5, ip
3402a9fc:	f8cc 2008 	str.w	r2, [ip, #8]
3402aa00:	60ac      	str	r4, [r5, #8]
3402aa02:	e7d1      	b.n	3402a9a8 <tsi_free+0x168>
3402aa04:	340e5e58 	.word	0x340e5e58
3402aa08:	000f1fa2 	.word	0x000f1fa2
3402aa0c:	340d0a90 	.word	0x340d0a90
3402aa10:	000f1fa1 	.word	0x000f1fa1
3402aa14:	00000000 	.word	0x00000000

3402aa18 <sqrt>:
3402aa18:	b508      	push	{r3, lr}
3402aa1a:	ed2d 8b04 	vpush	{d8-d9}
3402aa1e:	eeb0 8b40 	vmov.f64	d8, d0
3402aa22:	f000 f819 	bl	3402aa58 <__ieee754_sqrt>
3402aa26:	eeb4 8b48 	vcmp.f64	d8, d8
3402aa2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402aa2e:	d60c      	bvs.n	3402aa4a <sqrt+0x32>
3402aa30:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 3402aa50 <sqrt+0x38>
3402aa34:	eeb4 8bc9 	vcmpe.f64	d8, d9
3402aa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402aa3c:	d505      	bpl.n	3402aa4a <sqrt+0x32>
3402aa3e:	f7f7 f8d5 	bl	34021bec <__errno>
3402aa42:	ee89 0b09 	vdiv.f64	d0, d9, d9
3402aa46:	2321      	movs	r3, #33	@ 0x21
3402aa48:	6003      	str	r3, [r0, #0]
3402aa4a:	ecbd 8b04 	vpop	{d8-d9}
3402aa4e:	bd08      	pop	{r3, pc}
	...

3402aa58 <__ieee754_sqrt>:
3402aa58:	eeb1 0bc0 	vsqrt.f64	d0, d0
3402aa5c:	4770      	bx	lr
	...

3402aa60 <_init>:
3402aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3402aa62:	bf00      	nop
3402aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
3402aa66:	bc08      	pop	{r3}
3402aa68:	469e      	mov	lr, r3
3402aa6a:	4770      	bx	lr

3402aa6c <_fini>:
3402aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3402aa6e:	bf00      	nop
3402aa70:	bcf8      	pop	{r3, r4, r5, r6, r7}
3402aa72:	bc08      	pop	{r3}
3402aa74:	469e      	mov	lr, r3
3402aa76:	4770      	bx	lr

3402aa78 <app_clean_invalidate_dbg>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3402aa78:	2300      	movs	r3, #0
3402aa7a:	4a13      	ldr	r2, [pc, #76]	@ (3402aac8 <app_clean_invalidate_dbg+0x50>)
{
3402aa7c:	b570      	push	{r4, r5, r6, lr}
3402aa7e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3402aa82:	f3bf 8f4f 	dsb	sy
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3402aa86:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    ccsidr = SCB->CCSIDR;
3402aa8a:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3402aa8e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3402aa92:	f3c3 334e 	ubfx	r3, r3, #13, #15
3402aa96:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3402aa98:	f100 0e01 	add.w	lr, r0, #1
3402aa9c:	4601      	mov	r1, r0
3402aa9e:	f04e e001 	dls	lr, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3402aaa2:	ea03 0604 	and.w	r6, r3, r4
3402aaa6:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
3402aaaa:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
3402aaae:	3901      	subs	r1, #1
3402aab0:	f00f c807 	le	lr, 3402aaa6 <app_clean_invalidate_dbg+0x2e>
    } while(sets-- != 0U);
3402aab4:	3b20      	subs	r3, #32
3402aab6:	f113 0f20 	cmn.w	r3, #32
3402aaba:	d1ed      	bne.n	3402aa98 <app_clean_invalidate_dbg+0x20>
3402aabc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3402aac0:	f3bf 8f6f 	isb	sy
}
3402aac4:	bd70      	pop	{r4, r5, r6, pc}
3402aac6:	bf00      	nop
3402aac8:	e000ed00 	.word	0xe000ed00

Disassembly of section .gnu.sgstubs:

3402aae0 <SECURE_SystemCoreClockUpdate>:
3402aae0:	e97f e97f 	sg
3402aae4:	f7e4 bb12 	b.w	3400f10c <__acle_se_SECURE_SystemCoreClockUpdate>
	...
